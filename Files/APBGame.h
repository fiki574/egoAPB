
/*
-----------------------------------------------------------------
 - UConst
-----------------------------------------------------------------
*/
#define CONST_Ammo_None                                          0
#define CONST_CameraHandyCamPresetNone                           0
#define CONST_CameraShakePreset_None                             0
#define CONST_ClothingItemCategory_None                          0
#define CONST_Contact_None                                       0
#define CONST_CSA_InputMapping_None                              0
#define CONST_DisplayPoint_None                                  0
#define CONST_District_None                                      0
#define CONST_Equipment_Equipment__None                          0
#define CONST_GolemPartClass_None                                0
#define CONST_HeatActionAffect_None                              0
#define CONST_HeatActionAffect_EndMission                        1
#define CONST_HeatActionAffect_StartMissionAsOwner               2
#define CONST_HeatLevel_None                                     0
#define CONST_HUDColour_None                                     0
#define CONST_DMM_None                                           0
#define CONST_HUDIcon_None                                       0
#define CONST_HUDMarkerOffset_None                               0
#define CONST_HUDMarkerOffset_UseAutoRouteLocation               1
#define CONST_HUDMarkerVisual_None                               0
#define CONST_HUDMarkerVisual_MinigameDebugLocation              1
#define CONST_HUDTaskMarker_None                                 0
#define CONST_HUDTextureIcon_None                                0
#define CONST_InventoryItemInfraCategory_None                    0
#define CONST_InventoryItemInfraCategory_MarketplaceCash         1
#define CONST_InventoryItemType_None                             0
#define CONST_InventoryItemType_Equipment__None                  1
#define CONST_InventoryItemType_Mod_None                         2
#define CONST_InventoryItemType_Mod_Vacant                       3
#define CONST_InventoryItemType_Reward_GenericReward             4
#define CONST_InventoryItemType_Reward_LeagueReward              5
#define CONST_InventoryItemType_Reward_RedemptionKeyReward       6
#define CONST_InventoryItemType_Token_DisplayPoint               7
#define CONST_InventoryItemType_Usable_None                      8
#define CONST_Any                                                0
#define CONST_MissionUIMissionTemplateProfile_None               0
#define CONST_ModifierCategory_None                              0
#define CONST_Modifier_Mod_None                                  0
#define CONST_Modifier_Mod_Vacant                                1
#define CONST_NotorietyEffect_None                               0
#define CONST_NotorietyLevel_None                                0
#define CONST_OpenWorldOperation_None                            0
#define CONST_PrestigeEffect_None                                0
#define CONST_PrestigeLevel_None                                 0
#define CONST_ShopUIFilter_Ammo                                  0
#define CONST_ShopUIFilter_Armory_ItemCat_Ammo                   1
#define CONST_ShopUIFilter_ItemCat_All                           2
#define CONST_ShopUIFilter_None                                  3
#define CONST_ShopUIFilterRestriction_None                       0
#define CONST_TaskItemTag_None                                   0
#define CONST_TaskObjective_None                                 0
#define CONST_TaskObjective_OppositionDefault                    1
#define CONST_TaskOperation_None                                 0
#define CONST_TaskOperation_OppositionDefault                    1
#define CONST_MissionUITaskOperationProfile_None                 0
#define CONST_MissionUITaskOperationProfile_Simple               1
#define CONST_TaskTargetAllocation_A_None                        0
#define CONST_VehicleCritical_None                               0
#define CONST_VehicleDamageHandlingEffect_NoDamage               0
#define CONST_VehicleDamageLevel_NoDamage                        0
#define CONST_Modifier_Vehicle_Mod_None                          0
#define CONST_Modifier_Vehicle_Mod_Vacant                        1
#define CONST_VehicleUIComponentCategory_None                    0
#define CONST_VFXType_None                                       0
#define CONST_WeaponCurve_None                                   0
#define CONST_WeaponLoadout_None                                 0
#define CONST_WeaponLoadout_Empty                                1
#define CONST_Unlock_WeaponSkin_None                             0
#define CONST_Weapon_None                                        0
#define CONST_WitnessableCrime_None                              0
#define CONST_WitnessableCrime_CSA_End                           1
#define CONST_MAX_GROUP_SLOTS                                    20
#define CONST_KILL_NOTIFICATION_ENTRIES                          40
#define CONST_MAX_GROUP_SLOTS                                    20
#define CONST_KILL_NOTIFICATION_ENTRIES                          40
#define CONST_INVALID_GROUP_ID                                   0
#define CONST_INVALID_CHARACTER_UID                              0
#define CONST_BOMB_UNSET                                         0
#define CONST_BOMB_DEFUSED                                       -1
#define CONST_BOMB_EXPLODED                                      -2
#define CONST_VEHICLE_ROOT_HEIGHT                                50.0f
#define CONST_ItemAttachment_None                                0
#define CONST_NUM_SHOT_RECORDS                                   10
#define CONST_MinBasisDirectionDotProduct                        0.707f
#define CONST_DIST_AS_ACCURACY_METRIC                            1000
#define CONST_MAX_MISSES_HIDDEN                                  1
#define CONST_MAX_MISSES_VISIBLE                                 3
#define CONST_MAX_RAYS                                           5
#define CONST_COLLISION_HEIGHT                                   91
#define CONST_COLLISION_RADIUS                                   34
#define CONST_LEAN_OUT_HEIGHT                                    70
#define CONST_LEAN_OUT_RADIUS                                    34
#define CONST_CROUCH_HEIGHT                                      60
#define CONST_CROUCH_RADIUS                                      34
#define CONST_STATIONARY_CROUCH_HEIGHT                           53
#define CONST_STATIONARY_CROUCH_RADIUS                           34
#define CONST_MATERIAL_BODY_INDEX                                0
#define CONST_MATERIAL_EYELASHES_INDEX                           1
#define CONST_MATERIAL_HAIR_INDEX                                2
#define CONST_METRIC_UE3_CONVERSION_FACTOR                       100
#define CONST_MAX_VEHICLE_LENGTH                                 12.0f
#define CONST_NPCBRAIN_REPLICATE_CANCEL_REACTION_OFFS            128
#define CONST_SearchUntilStopped                                 10000000
#define CONST_MaxLanes                                           2
#define CONST_ASSET_CUSTOMISATION_INVALID_SYMBOL_LAYER           0
#define CONST_ASSET_CUSTOMISATION_INVALID_TES_LAYER              1
#define CONST_ASSET_CUSTOMISATION_INVALID_GOLEMOBILE_PART        2
#define CONST_ASSET_CUSTOMISATION_INVALID_GOLEM_PART             3
#define CONST_ASSET_CUSTOMISATION_INVALID_GOLEM_BODY_FACIAL_HAIR 4
#define CONST_ASSET_CUSTOMISATION_INVALID_GOLEM_BODY_MORPH       5
#define CONST_ASSET_CUSTOMISATION_INVALID_MAX                    6
#define CONST_PASSENGER_SOCKET                                   'FrontRight'
#define CONST_PASSENGER_SOCKET_ALT                               'FrontLeft'
#define CONST_MAX_DETOURS                                        3
#define CONST_RIDE_HEIGHT                                        50.0f
#define CONST_NUM_FNMODS_VEHICLE                                 4
#define CONST_DISTANCE_THRESHOLD                                 30.0f
#define CONST_ANGLE_THRESHOLD                                    1000.0f
#define CONST_SPEED_THRESHOLD                                    10.0f
#define CONST_NUM_VEHICLE_ENGINE_SAMPLES                         50
#define CONST_NUM_OLD_VEHICLE_MOVES_TO_SAVE                      50
#define CONST_DISTANCE_TO_DIRT_FACTOR                            0.0000025
#define CONST_NPCS_FOR_SYNCH_DEBUGGING                           30
#define CONST_MAX_NUM_JUNCTIONS                                  256
#define CONST_MAX_CLIENTS_ROUNDED                                256
#define CONST_TUMBLE_RATE                                        100000
#define CONST_nMAX_INTERACTIONPOINTS                             5
#define CONST_RPM_to_RADS_PER_SEC                                0.104719755
#define CONST_Minigame_WeaponDrop_NumTeams                       2
#define CONST_MATERIAL_ID_VEHICLE_METAL                          -2
#define CONST_MATERIAL_ID_HUMAN_BODY                             -3
#define CONST_MATERIAL_ID_HIT_NOTHING                            -4
#define CONST_MAX_GROUP_SLOTS                                    20
#define CONST_KILL_NOTIFICATION_ENTRIES                          40
#define CONST_MEDALS_DWORDS                                      7
#define CONST_MISSION_STATS_PACKET_DWORDS                        14
#define CONST_MISSION_SUMMARY_DWORDS                             4
#define CONST_MISSION_SIDE_MEMBERS_PACKET_DWORDS                 31
#define CONST_ACTIVITY_MESSAGES_MAX                              5
#define CONST_CUSTOMISATION_DATA_PACKET_SIZE                     256
#define CONST_CUSTOMISATION_SAFE_MAX_UNCOMPRESSED_SIZE           16777216
#define CONST_nMAX_TRACERS                                       20
#define CONST_REDUCE_TIME_INTERVAL_BY                            0.10f
#define CONST_CHARACTER_INFO_PACKET_SLOTS                        50
#define CONST_MAX_REPLICATED_ARRAY_SIZE                          250
#define CONST_MAX_INV_CAPACITY                                   120
#define CONST_MAX_INV_CHARACTER                                  1
#define CONST_MAX_INV_CLOTHING                                   95
#define CONST_MAX_INV_DISPLAYPOINTTOKEN                          100
#define CONST_MAX_INV_DUMMY                                      5
#define CONST_MAX_INV_EQUIPMENT                                  120
#define CONST_MAX_INV_FNMOD                                      120
#define CONST_MAX_INV_INSTRUMENT                                 1
#define CONST_MAX_INV_MARKETPLACECASH                            2
#define CONST_MAX_INV_OUTFIT                                     8
#define CONST_MAX_INV_REWARDPACKAGE                              2
#define CONST_MAX_INV_SONG                                       30
#define CONST_MAX_INV_SYMBOL                                     95
#define CONST_MAX_INV_THEME                                      32
#define CONST_MAX_INV_UNLOCK                                     2
#define CONST_MAX_INV_USABLETOKEN                                100
#define CONST_MAX_INV_VEHICLE                                    32
#define CONST_MAX_INV_WEAPON                                     125
#define CONST_MAX_CAPACITY_SIZE                                  0
#define CONST_MAX_CHARACTER_SIZE                                 0
#define CONST_MAX_CLOTHING_SIZE                                  3500
#define CONST_MAX_DISPLAYPOINTTOKEN_SIZE                         0
#define CONST_MAX_DUMMY_SIZE                                     0
#define CONST_MAX_EQUIPMENT_SIZE                                 0
#define CONST_MAX_FNMOD_SIZE                                     0
#define CONST_MAX_INSTRUMENT_SIZE                                0
#define CONST_MAX_MARKETPLACECASH_SIZE                           0
#define CONST_MAX_OUTFIT_SIZE                                    1000
#define CONST_MAX_REWARDPACKAGE_SIZE                             0
#define CONST_MAX_SONG_SIZE                                      2500
#define CONST_MAX_SYMBOL_SIZE                                    2000
#define CONST_MAX_THEME_SIZE                                     2500
#define CONST_MAX_UNLOCK_SIZE                                    0
#define CONST_MAX_USABLETOKEN_SIZE                               0
#define CONST_MAX_VEHICLE_SIZE                                   3250
#define CONST_MAX_WEAPON_SIZE                                    0
#define CONST_MAX_INV_CAPACITY                                   120
#define CONST_MAX_INV_CHARACTER                                  1
#define CONST_MAX_INV_CLOTHING                                   95
#define CONST_MAX_INV_DISPLAYPOINTTOKEN                          100
#define CONST_MAX_INV_DUMMY                                      5
#define CONST_MAX_INV_EQUIPMENT                                  120
#define CONST_MAX_INV_FNMOD                                      120
#define CONST_MAX_INV_INSTRUMENT                                 1
#define CONST_MAX_INV_MARKETPLACECASH                            2
#define CONST_MAX_INV_OUTFIT                                     8
#define CONST_MAX_INV_REWARDPACKAGE                              2
#define CONST_MAX_INV_SONG                                       30
#define CONST_MAX_INV_SYMBOL                                     95
#define CONST_MAX_INV_THEME                                      32
#define CONST_MAX_INV_UNLOCK                                     2
#define CONST_MAX_INV_USABLETOKEN                                100
#define CONST_MAX_INV_VEHICLE                                    32
#define CONST_MAX_INV_WEAPON                                     125
#define CONST_MAX_CAPACITY_SIZE                                  0
#define CONST_MAX_CHARACTER_SIZE                                 0
#define CONST_MAX_CLOTHING_SIZE                                  3500
#define CONST_MAX_DISPLAYPOINTTOKEN_SIZE                         0
#define CONST_MAX_DUMMY_SIZE                                     0
#define CONST_MAX_EQUIPMENT_SIZE                                 0
#define CONST_MAX_FNMOD_SIZE                                     0
#define CONST_MAX_INSTRUMENT_SIZE                                0
#define CONST_MAX_MARKETPLACECASH_SIZE                           0
#define CONST_MAX_OUTFIT_SIZE                                    1000
#define CONST_MAX_REWARDPACKAGE_SIZE                             0
#define CONST_MAX_SONG_SIZE                                      2500
#define CONST_MAX_SYMBOL_SIZE                                    2000
#define CONST_MAX_THEME_SIZE                                     2500
#define CONST_MAX_UNLOCK_SIZE                                    0
#define CONST_MAX_USABLETOKEN_SIZE                               0
#define CONST_MAX_VEHICLE_SIZE                                   3250
#define CONST_MAX_WEAPON_SIZE                                    0
#define CONST_MAX_INV_CAPACITY                                   120
#define CONST_MAX_INV_CHARACTER                                  1
#define CONST_MAX_INV_CLOTHING                                   95
#define CONST_MAX_INV_DISPLAYPOINTTOKEN                          100
#define CONST_MAX_INV_DUMMY                                      5
#define CONST_MAX_INV_EQUIPMENT                                  120
#define CONST_MAX_INV_FNMOD                                      120
#define CONST_MAX_INV_INSTRUMENT                                 1
#define CONST_MAX_INV_MARKETPLACECASH                            2
#define CONST_MAX_INV_OUTFIT                                     8
#define CONST_MAX_INV_REWARDPACKAGE                              2
#define CONST_MAX_INV_SONG                                       30
#define CONST_MAX_INV_SYMBOL                                     95
#define CONST_MAX_INV_THEME                                      32
#define CONST_MAX_INV_UNLOCK                                     2
#define CONST_MAX_INV_USABLETOKEN                                100
#define CONST_MAX_INV_VEHICLE                                    32
#define CONST_MAX_INV_WEAPON                                     125
#define CONST_MAX_CAPACITY_SIZE                                  0
#define CONST_MAX_CHARACTER_SIZE                                 0
#define CONST_MAX_CLOTHING_SIZE                                  3500
#define CONST_MAX_DISPLAYPOINTTOKEN_SIZE                         0
#define CONST_MAX_DUMMY_SIZE                                     0
#define CONST_MAX_EQUIPMENT_SIZE                                 0
#define CONST_MAX_FNMOD_SIZE                                     0
#define CONST_MAX_INSTRUMENT_SIZE                                0
#define CONST_MAX_MARKETPLACECASH_SIZE                           0
#define CONST_MAX_OUTFIT_SIZE                                    1000
#define CONST_MAX_REWARDPACKAGE_SIZE                             0
#define CONST_MAX_SONG_SIZE                                      2500
#define CONST_MAX_SYMBOL_SIZE                                    2000
#define CONST_MAX_THEME_SIZE                                     2500
#define CONST_MAX_UNLOCK_SIZE                                    0
#define CONST_MAX_USABLETOKEN_SIZE                               0
#define CONST_MAX_VEHICLE_SIZE                                   3250
#define CONST_MAX_WEAPON_SIZE                                    0
#define CONST_MAX_INV_CAPACITY                                   120
#define CONST_MAX_INV_CHARACTER                                  1
#define CONST_MAX_INV_CLOTHING                                   95
#define CONST_MAX_INV_DISPLAYPOINTTOKEN                          100
#define CONST_MAX_INV_DUMMY                                      5
#define CONST_MAX_INV_EQUIPMENT                                  120
#define CONST_MAX_INV_FNMOD                                      120
#define CONST_MAX_INV_INSTRUMENT                                 1
#define CONST_MAX_INV_MARKETPLACECASH                            2
#define CONST_MAX_INV_OUTFIT                                     8
#define CONST_MAX_INV_REWARDPACKAGE                              2
#define CONST_MAX_INV_SONG                                       30
#define CONST_MAX_INV_SYMBOL                                     95
#define CONST_MAX_INV_THEME                                      32
#define CONST_MAX_INV_UNLOCK                                     2
#define CONST_MAX_INV_USABLETOKEN                                100
#define CONST_MAX_INV_VEHICLE                                    32
#define CONST_MAX_INV_WEAPON                                     125
#define CONST_MAX_CAPACITY_SIZE                                  0
#define CONST_MAX_CHARACTER_SIZE                                 0
#define CONST_MAX_CLOTHING_SIZE                                  3500
#define CONST_MAX_DISPLAYPOINTTOKEN_SIZE                         0
#define CONST_MAX_DUMMY_SIZE                                     0
#define CONST_MAX_EQUIPMENT_SIZE                                 0
#define CONST_MAX_FNMOD_SIZE                                     0
#define CONST_MAX_INSTRUMENT_SIZE                                0
#define CONST_MAX_MARKETPLACECASH_SIZE                           0
#define CONST_MAX_OUTFIT_SIZE                                    1000
#define CONST_MAX_REWARDPACKAGE_SIZE                             0
#define CONST_MAX_SONG_SIZE                                      2500
#define CONST_MAX_SYMBOL_SIZE                                    2000
#define CONST_MAX_THEME_SIZE                                     2500
#define CONST_MAX_UNLOCK_SIZE                                    0
#define CONST_MAX_USABLETOKEN_SIZE                               0
#define CONST_MAX_VEHICLE_SIZE                                   3250
#define CONST_MAX_WEAPON_SIZE                                    0
#define CONST_MAX_INV_CAPACITY                                   120
#define CONST_MAX_INV_CHARACTER                                  1
#define CONST_MAX_INV_CLOTHING                                   95
#define CONST_MAX_INV_DISPLAYPOINTTOKEN                          100
#define CONST_MAX_INV_DUMMY                                      5
#define CONST_MAX_INV_EQUIPMENT                                  120
#define CONST_MAX_INV_FNMOD                                      120
#define CONST_MAX_INV_INSTRUMENT                                 1
#define CONST_MAX_INV_MARKETPLACECASH                            2
#define CONST_MAX_INV_OUTFIT                                     8
#define CONST_MAX_INV_REWARDPACKAGE                              2
#define CONST_MAX_INV_SONG                                       30
#define CONST_MAX_INV_SYMBOL                                     95
#define CONST_MAX_INV_THEME                                      32
#define CONST_MAX_INV_UNLOCK                                     2
#define CONST_MAX_INV_USABLETOKEN                                100
#define CONST_MAX_INV_VEHICLE                                    32
#define CONST_MAX_INV_WEAPON                                     125
#define CONST_MAX_CAPACITY_SIZE                                  0
#define CONST_MAX_CHARACTER_SIZE                                 0
#define CONST_MAX_CLOTHING_SIZE                                  3500
#define CONST_MAX_DISPLAYPOINTTOKEN_SIZE                         0
#define CONST_MAX_DUMMY_SIZE                                     0
#define CONST_MAX_EQUIPMENT_SIZE                                 0
#define CONST_MAX_FNMOD_SIZE                                     0
#define CONST_MAX_INSTRUMENT_SIZE                                0
#define CONST_MAX_MARKETPLACECASH_SIZE                           0
#define CONST_MAX_OUTFIT_SIZE                                    1000
#define CONST_MAX_REWARDPACKAGE_SIZE                             0
#define CONST_MAX_SONG_SIZE                                      2500
#define CONST_MAX_SYMBOL_SIZE                                    2000
#define CONST_MAX_THEME_SIZE                                     2500
#define CONST_MAX_UNLOCK_SIZE                                    0
#define CONST_MAX_USABLETOKEN_SIZE                               0
#define CONST_MAX_VEHICLE_SIZE                                   3250
#define CONST_MAX_WEAPON_SIZE                                    0
#define CONST_MAX_INV_CAPACITY                                   120
#define CONST_MAX_INV_CHARACTER                                  1
#define CONST_MAX_INV_CLOTHING                                   95
#define CONST_MAX_INV_DISPLAYPOINTTOKEN                          100
#define CONST_MAX_INV_DUMMY                                      5
#define CONST_MAX_INV_EQUIPMENT                                  120
#define CONST_MAX_INV_FNMOD                                      120
#define CONST_MAX_INV_INSTRUMENT                                 1
#define CONST_MAX_INV_MARKETPLACECASH                            2
#define CONST_MAX_INV_OUTFIT                                     8
#define CONST_MAX_INV_REWARDPACKAGE                              2
#define CONST_MAX_INV_SONG                                       30
#define CONST_MAX_INV_SYMBOL                                     95
#define CONST_MAX_INV_THEME                                      32
#define CONST_MAX_INV_UNLOCK                                     2
#define CONST_MAX_INV_USABLETOKEN                                100
#define CONST_MAX_INV_VEHICLE                                    32
#define CONST_MAX_INV_WEAPON                                     125
#define CONST_MAX_CAPACITY_SIZE                                  0
#define CONST_MAX_CHARACTER_SIZE                                 0
#define CONST_MAX_CLOTHING_SIZE                                  3500
#define CONST_MAX_DISPLAYPOINTTOKEN_SIZE                         0
#define CONST_MAX_DUMMY_SIZE                                     0
#define CONST_MAX_EQUIPMENT_SIZE                                 0
#define CONST_MAX_FNMOD_SIZE                                     0
#define CONST_MAX_INSTRUMENT_SIZE                                0
#define CONST_MAX_MARKETPLACECASH_SIZE                           0
#define CONST_MAX_OUTFIT_SIZE                                    1000
#define CONST_MAX_REWARDPACKAGE_SIZE                             0
#define CONST_MAX_SONG_SIZE                                      2500
#define CONST_MAX_SYMBOL_SIZE                                    2000
#define CONST_MAX_THEME_SIZE                                     2500
#define CONST_MAX_UNLOCK_SIZE                                    0
#define CONST_MAX_USABLETOKEN_SIZE                               0
#define CONST_MAX_VEHICLE_SIZE                                   3250
#define CONST_MAX_WEAPON_SIZE                                    0
#define CONST_INVALID_FNMOD_SLOT                                 255
#define CONST_MAX_DEPLOYED_EQUIPMENT                             5
#define CONST_MAX_DEPLOYED_SYMBOLS                               5
#define CONST_MAX_DEPLOYED_CHARACTER_USABLES                     5
#define CONST_MAX_DEPLOYED_VEHICLE_USABLES                       5
#define CONST_MAX_DEPLOYED_USABLES                               10
#define CONST_DEPLOYED_USABLE_TOKEN_SLOT                         4
#define CONST_NUM_FNMODS_CHARACTER                               3
#define CONST_MAX_REUSE_GROUPS                                   250
#define CONST_MAX_STACKING_SLOTS                                 100
#define CONST_MAX_CATEGORY_STACKING_SLOTS                        33
#define CONST_MAX_AMMO_TYPES                                     23
#define CONST_MAX_CUSTOM_COLOURS                                 48
#define CONST_MAX_CUSTOM_COLOURS_ARRAYSIZE                       96
#define CONST_MAX_DEPLOYED_WEAPONS                               4
#define CONST_CHARACTER_NAME_CACHE_SIZE                          128
#define CONST_RC_SUCCESS                                         0
#define CONST_RC_FAILED                                          1
#define CONST_RC_INVALID_MESSAGE                                 2
#define CONST_RC_INVALID_STATUS                                  3
#define CONST_RC_DATABASE_ERROR                                  4
#define CONST_RC_DATABASE_BUSY                                   5
#define CONST_RC_MESSAGE_FLOOD                                   6
#define CONST_RC_DATABASE_QUERY_TIMEOUT                          7
#define CONST_RC_CONNECT_FAILED                                  8
#define CONST_RC_DISCONNECTED                                    9
#define CONST_RC_UE3_CLIENT_SERVER_MISMATCH                      10
#define CONST_RC_DATABASE_PENDING                                11
#define CONST_RC_TIMEOUT                                         12
#define CONST_RC_SESSION_CHANGED                                 13
#define CONST_RC_ENCRYPTION                                      14
#define CONST_RC_DATABASE_UNEXPECTED_RC_START                    -1
#define CONST_KICK_REASON_DUPLICATE_LOGIN                        1
#define CONST_KICK_REASON_GM                                     2
#define CONST_KICK_REASON_VIOLATION                              3
#define CONST_KICK_REASON_PUNKBUSTER                             4
#define CONST_KICK_REASON_AFK                                    5
#define CONST_KICK_REASON_TEAMKILLS                              6
#define CONST_KICK_REASON_BAN                                    7
#define CONST_KICK_REASON_CHATFLOOD                              8
#define CONST_KICK_REASON_ILLEGITIMATE_MODIFICATION              9
#define CONST_KICK_REASON_SUICIDES                               10
#define CONST_KICK_REASON_WMI_FAILED                             11
#define CONST_KICK_REASON_HARDWARE_BANNED                        12
#define CONST_RC_LOGIN_INVALID_VERSION                           10001
#define CONST_RC_LOGIN_INVALID_ACCOUNT                           10002
#define CONST_RC_LOGIN_INVALID_PASSWORD                          10003
#define CONST_RC_LOGIN_ACCOUNT_IN_USE                            10004
#define CONST_RC_LOGIN_LOGIN_IN_PROGRESS                         10005
#define CONST_RC_LOGIN_ACCOUNT_NOT_ALLOWED                       10006
#define CONST_RC_LOGIN_ACCOUNT_TYPE_BLOCKED                      10007
#define CONST_RC_LOGIN_ACCOUNT_BLOCKED                           10008
#define CONST_RC_LOGIN_SESSION_TIMEOUT                           10009
#define CONST_RC_LOGIN_INVALID_INFORMATION                       10010
#define CONST_RC_LOGIN_INVALID_SOLUTION                          10011
#define CONST_RC_LOGIN_NO_SESSION                                10012
#define CONST_RC_LOGIN_APB_INACTIVATED                           10013
#define CONST_RC_LOGIN_APB_INTERNAL_LOGIN                        10014
#define CONST_RC_LOGIN_APB_NO_KEY_PAIR                           10015
#define CONST_RC_LOGIN_STEAM_NO_BOUND_ACCOUNT                    10016
#define CONST_RC_LOGIN_STEAM_AUTHENTICATION_FAILED               10017
#define CONST_RC_LOGIN_STEAM_ACCOUNT_BINDING_FAILED              10018
#define CONST_RC_LOGIN_G1_SSO_ERROR                              10019
#define CONST_RC_LOGIN_STEAM_CLIENT_NOT_RUNNING                  10021
#define CONST_RC_LOGIN_HARDWARE_SCAN_FAILED                      10022
#define CONST_RC_LOGIN_GM_BLOCKED                                10023
#define CONST_RC_LOGIN_KONGREGATE_NO_BOUND_ACCOUNT               10030
#define CONST_RC_LOGIN_KONGREGATE_AUTHENTICATION_FAILED          10031
#define CONST_RC_LOGIN_KONGREGATE_ACCOUNT_BINDING_FAILED         10032
#define CONST_RC_LOGIN_KONGREGATE_CLIENT_NOT_AVAILABLE           10033
#define CONST_RC_LOGIN_COUNTRY_BLOCKED                           10034
#define CONST_RC_LOGIN_ARC_NO_BOUND_ACCOUNT                      10035
#define CONST_RC_LOGIN_ARC_AUTHENTICATION_FAILED                 10036
#define CONST_RC_LOGIN_ARC_ACCOUNT_BINDING_FAILED                10037
#define CONST_RC_LOGIN_ARC_CLIENT_NOT_AVAILABLE                  10038
#define CONST_RC_LOGIN_ARC_CLIENT_NOT_LOGGED_IN                  10039
#define CONST_RC_LOGIN_ARC_CLIENT_INTERNAL_ERROR                 10040
#define CONST_RC_LOGIN_ARC_GET_AUTH_TOKEN_FAILED                 10041
#define CONST_RC_LOGIN_NO_G1_CONNECT_CONFIGURATION               10042
#define CONST_RC_LOGIN_NO_PARTNER_CONFIGURATION                  10043
#define CONST_RC_G1LOGIN_NOT_FOUND                               11001
#define CONST_RC_G1LOGIN_INVALID_STATUS                          11002
#define CONST_RC_G1LOGIN_ERROR                                   11003
#define CONST_RC_G1LOGIN_BETAKEY_REQUIRED                        11004
#define CONST_RC_G1LOGIN_INVALID_MERCHANT                        11005
#define CONST_RC_G1LOGIN_AGE_RESTRICTED                          11006
#define CONST_RC_INNOVA_ERROR                                    12000
#define CONST_RC_CHARACTER_NAME_CHECK_IN_USE                     20001
#define CONST_RC_CHARACTER_NAME_CHECK_BAD_NAME                   20002
#define CONST_RC_CHARACTER_NAME_CHECK_INVALID_NAME               20004
#define CONST_RC_CHARACTER_NAME_CHECK_PREMIUM_ONLY               20005
#define CONST_RC_CHARACTER_CREATE_NAME_IN_USE                    30001
#define CONST_RC_CHARACTER_CREATE_NAME_NOT_CHECKED               30002
#define CONST_RC_CHARACTER_CREATE_INVALID_CUSTOMISATION          30003
#define CONST_RC_CHARACTER_CREATE_WORLD_FULL                     30004
#define CONST_RC_CHARACTER_CREATE_CHARACTER_LIMIT                30006
#define CONST_RC_CHARACTER_CREATE_WORLD_OFFLINE                  30007
#define CONST_RC_CHARACTER_CREATE_ACCOUNT_TYPE_BLOCKED           30008
#define CONST_RC_CHARACTER_DELETE_INVALID_SLOT_NUMBER            40001
#define CONST_RC_CHARACTER_DELETE_WORLD_OFFLINE                  40002
#define CONST_RC_CHARACTER_DELETE_CLAN_LEADER                    40003
#define CONST_RC_CHARACTER_DELETE_MAIL_POINTS                    40004
#define CONST_RC_CHARACTER_DELETE_MARKETPLACE_POINTS             40005
#define CONST_RC_CHARACTER_DELETE_ACCOUNT_TYPE_BLOCKED           40006
#define CONST_RC_CHARACTER_INFO_INVALID_SLOT_NUMBER              50001
#define CONST_RC_CHARACTER_INFO_WORLD_OFFLINE                    50002
#define CONST_RC_CHARACTERLIST_RSA_FAILED                        51001
#define CONST_RC_CHARACTERLIST_RSA_DECRYPT                       51002
#define CONST_RC_WORLD_ENTER_INVALID_SLOT_NUMBER                 60001
#define CONST_RC_WORLD_ENTER_WORLD_OFFLINE                       60002
#define CONST_RC_WORLD_ENTER_QUEUE_CANCEL                        60003
#define CONST_RC_WORLD_ENTER_LOCKED                              60004
#define CONST_RC_WORLD_ENTER_CHARACTER_NOT_EXIST                 60005
#define CONST_RC_WORLD_ENTER_CHARACTER_DUPLICATED                60006
#define CONST_RC_WORLD_ENTER_ACCOUNT_TYPE_BLOCKED                60007
#define CONST_RC_WORLD_ENTER_NEED_NAME_CHANGE                    60008
#define CONST_RC_WORLD_ENTER_ACCOUNT_OFFLINE                     60009
#define CONST_RC_WORLD_ENTER_QUEUE_DUPLICATED                    60010
#define CONST_RC_WORLD_ENTER_PREMIUM_ONLY                        60011
#define CONST_RC_CHARACTER_NAME_CHANGE_INVALID_STATUS            61001
#define CONST_RC_CHARACTER_NAME_CHANGE_INVALID_SLOT_NUMBER       61002
#define CONST_RC_CHARACTER_NAME_CHANGE_WORLD_OFFLINE             61003
#define CONST_RC_CHARACTER_NAME_CHANGE_INVALID_CHARACTER         61004
#define CONST_RC_CHARACTER_NAME_CHANGE_NAME_IN_USE               61005
#define CONST_RC_CHARACTER_NAME_CHANGE_SAME_NAME                 61006
#define CONST_RC_CHARACTER_NAME_CHANGE_BAD_NAME                  61007
#define CONST_RC_CHARACTER_NAME_CHANGE_NAME_NOT_CHECKED          61008
#define CONST_RC_CHARACTER_NAME_CHANGE_ACCOUNT_TYPE_BLOCKED      61009
#define CONST_RC_DISTRICT_RESERVE_DISTRICT_OFFLINE               70001
#define CONST_RC_DISTRICT_RESERVE_FACTION                        70002
#define CONST_RC_DISTRICT_RESERVE_ALREADY_IN_INSTANCE            70003
#define CONST_RC_DISTRICT_RESERVE_ALREADY_IN_DISTRICT            70004
#define CONST_RC_DISTRICT_RESERVE_INVALID_DISTRICT               70005
#define CONST_RC_DISTRICT_RESERVE_FULL                           70006
#define CONST_RC_DISTRICT_RESERVE_NO_INSTANCES                   70007
#define CONST_RC_DISTRICT_RESERVE_FREEZE                         70008
#define CONST_RC_DISTRICT_RESERVE_USER_BUSY                      70009
#define CONST_RC_DISTRICT_RESERVE_CHARACTER_NOT_FOUND            70010
#define CONST_RC_DISTRICT_RESERVE_ALREADY_QUEUED_FOR_INSTANCE    70011
#define CONST_RC_DISTRICT_RESERVE_ALREADY_QUEUED_FOR_DISTRICT    70012
#define CONST_RC_DISTRICT_RESERVE_NO_GROUP                       70013
#define CONST_RC_DISTRICT_RESERVE_NOT_LEADER                     70014
#define CONST_RC_DISTRICT_RESERVE_RATING                         70015
#define CONST_RC_DISTRICT_RESERVE_LOCKED                         70016
#define CONST_RC_DISTRICT_RESERVE_INSTANCE_FAILS_SKILLRATING_RESTRICTIONS 70017
#define CONST_RC_DISTRICT_RESERVE_GROUP_FAILS_SKILLRATING_RESTRICTIONS 70018
#define CONST_RC_DISTRICT_RESERVE_NOT_PREMIUM                    70019
#define CONST_RC_DISTRICT_ENTER_NOT_RESERVED                     80001
#define CONST_RC_DISTRICT_ATTACH_INVALID_DISTRICT_UID            90001
#define CONST_RC_DISTRICT_ATTACH_ALREADY_ATTACHED                90002
#define CONST_RC_CHAT_WHISPER_NOT_FOUND                          100001
#define CONST_RC_CHAT_WHISPER_IGNORED                            100002
#define CONST_RC_CHAT_WHISPER_GM                                 100003
#define CONST_RC_CHAT_WHISPER_IGNORING                           100004
#define CONST_RC_GROUP_INVITE_DECLINED                           110001
#define CONST_RC_GROUP_INVITE_NOT_FOUND                          110002
#define CONST_RC_GROUP_INVITE_FACTION                            110003
#define CONST_RC_GROUP_INVITE_NOT_LEADER                         110004
#define CONST_RC_GROUP_INVITE_GROUP                              110005
#define CONST_RC_GROUP_INVITE_INVITE_TO                          110006
#define CONST_RC_GROUP_INVITE_FULL                               110007
#define CONST_RC_GROUP_INVITE_SELF                               110008
#define CONST_RC_GROUP_INVITE_IGNORED                            110009
#define CONST_RC_GROUP_INVITE_BOUNCED                            110010
#define CONST_RC_GROUP_INVITE_INVITE_FROM                        110011
#define CONST_RC_GROUP_INVITE_GM                                 110012
#define CONST_RC_GROUP_INVITE_TUTORIAL_FROM                      110013
#define CONST_RC_GROUP_INVITE_TUTORIAL_TO                        110014
#define CONST_RC_GROUP_LEAVE_NO_GROUP                            120001
#define CONST_RC_GROUP_REMOVE_NO_GROUP                           130001
#define CONST_RC_GROUP_REMOVE_NOT_LEADER                         130002
#define CONST_RC_GROUP_REMOVE_SELF                               130003
#define CONST_RC_GROUP_REMOVE_NOT_FOUND                          130004
#define CONST_RC_GROUP_LEADER_NO_GROUP                           140001
#define CONST_RC_GROUP_LEADER_NOT_LEADER                         140002
#define CONST_RC_GROUP_LEADER_SELF                               140003
#define CONST_RC_GROUP_LEADER_NOT_FOUND                          140004
#define CONST_RC_GROUP_LEADER_OFFLINE                            140005
#define CONST_RC_GROUP_STATE_NO_GROUP                            150001
#define CONST_RC_CLAN_CREATE_NAME_IN_USE                         160001
#define CONST_RC_CLAN_CREATE_BAD_NAME                            160002
#define CONST_RC_CLAN_CREATE_INVALID_NAME                        160004
#define CONST_RC_CLAN_CREATE_CLAN                                160005
#define CONST_RC_CLAN_INVITE_DECLINED                            170001
#define CONST_RC_CLAN_INVITE_NOT_FOUND                           170002
#define CONST_RC_CLAN_INVITE_FACTION                             170003
#define CONST_RC_CLAN_INVITE_PERMISSION                          170004
#define CONST_RC_CLAN_INVITE_CLAN                                170005
#define CONST_RC_CLAN_INVITE_INVITE_TO                           170006
#define CONST_RC_CLAN_INVITE_FULL                                170007
#define CONST_RC_CLAN_INVITE_SELF                                170008
#define CONST_RC_CLAN_INVITE_NO_CLAN                             170009
#define CONST_RC_CLAN_INVITE_NO_DEFAULT_RANKS                    170010
#define CONST_RC_CLAN_INVITE_IGNORED                             170011
#define CONST_RC_CLAN_INVITE_CLAN_DELETED                        170012
#define CONST_RC_CLAN_INVITE_GM                                  170013
#define CONST_RC_CLAN_LEAVE_NO_CLAN                              180001
#define CONST_RC_CLAN_LEAVE_LEADER                               180002
#define CONST_RC_CLAN_LEAVE_NO_CLAN_MEMBER                       180003
#define CONST_RC_CLAN_REMOVE_NO_CLAN                             190001
#define CONST_RC_CLAN_REMOVE_SELF                                190002
#define CONST_RC_CLAN_REMOVE_PERMISSION                          190003
#define CONST_RC_CLAN_REMOVE_NOT_FOUND                           190004
#define CONST_RC_CLAN_REMOVE_RANK                                190005
#define CONST_RC_CLAN_LEADER_NO_CLAN                             200001
#define CONST_RC_CLAN_LEADER_NOT_LEADER                          200002
#define CONST_RC_CLAN_LEADER_SELF                                200003
#define CONST_RC_CLAN_LEADER_NOT_FOUND                           200004
#define CONST_RC_CLAN_LEADER_RANK_NOT_FOUND                      200005
#define CONST_RC_CLAN_LEADER_OLD_LEADER_NOT_FOUND                200006
#define CONST_RC_CLAN_LEADER_GENERAL_MEMBER_RANK_NOT_FOUND       200007
#define CONST_RC_CLAN_BIO_NO_CLAN                                210001
#define CONST_RC_CLAN_BIO_EDIT_NO_PERMISSION                     220001
#define CONST_RC_CLAN_BIO_EDIT_NO_CLAN                           220002
#define CONST_RC_CLAN_SYMBOL_NO_CLAN                             230001
#define CONST_RC_CLAN_SYMBOL_EDIT_NO_PERMISSION                  240001
#define CONST_RC_CLAN_SYMBOL_EDIT_NO_CLAN                        240002
#define CONST_RC_GROUP_CONFIG_NO_GROUP                           250001
#define CONST_RC_GROUP_CONFIG_NOT_LEADER                         250002
#define CONST_RC_GROUP_JOIN_GROUP                                260001
#define CONST_RC_GROUP_JOIN_INVITE_FROM                          260002
#define CONST_RC_GROUP_JOIN_NOT_FOUND                            260003
#define CONST_RC_GROUP_JOIN_SELF                                 260004
#define CONST_RC_GROUP_JOIN_NO_GROUP                             260005
#define CONST_RC_GROUP_JOIN_FULL                                 260006
#define CONST_RC_GROUP_JOIN_FACTION                              260007
#define CONST_RC_GROUP_JOIN_PRIVATE                              260008
#define CONST_RC_GROUP_JOIN_IGNORE_LIST                          260009
#define CONST_RC_GROUP_JOIN_INVITE_TO                            260010
#define CONST_RC_GROUP_JOIN_TUTORIAL                             260011
#define CONST_RC_CLAN_THEME_NO_CLAN                              270001
#define CONST_RC_CLAN_THEME_EDIT_NO_PERMISSION                   280001
#define CONST_RC_CLAN_THEME_EDIT_NO_CLAN                         280002
#define CONST_RC_CLAN_MEMBER_STATS_NO_CLAN                       290001
#define CONST_RC_CLAN_STATS_NO_CLAN                              300001
#define CONST_RC_CLAN_STATS_NO_CLAN_MEMBER                       300002
#define CONST_RC_CLAN_MEMBER_PROFILE_NO_CLAN                     310001
#define CONST_RC_CLAN_MEMBER_PROFILE_NO_CLAN_MEMBER              310002
#define CONST_RC_CLAN_MEMBER_BIO_EDIT_NO_CLAN                    320001
#define CONST_RC_CLAN_MEMBER_NOTE_EDIT_NO_PERMISSION             330001
#define CONST_RC_CLAN_MEMBER_NOTE_EDIT_NO_CLAN                   330002
#define CONST_RC_CLAN_MEMBER_NOTE_EDIT_INVALID_NOTE_TYPE         330003
#define CONST_RC_CLAN_MEMBER_NOTE_EDIT_NO_CLAN_MEMBER            330004
#define CONST_RC_CLAN_RANK_CREATE_NOT_LEADER                     340001
#define CONST_RC_CLAN_RANK_CREATE_NO_CLAN                        340002
#define CONST_RC_CLAN_RANK_CREATE_INVALID_PERMISSION             340003
#define CONST_RC_CLAN_RANK_CREATE_INVALID_RANK_NAME              340004
#define CONST_RC_CLAN_RANK_CREATE_SLOT_FULL                      340005
#define CONST_RC_CLAN_RANK_CREATE_NAME_IN_USE                    340006
#define CONST_RC_CLAN_RANK_DELETE_NOT_LEADER                     350001
#define CONST_RC_CLAN_RANK_DELETE_NO_CLAN                        350002
#define CONST_RC_CLAN_RANK_DELETE_DEFAULT_RANK                   350003
#define CONST_RC_CLAN_RANK_DELETE_INVALID_RANKUID                350004
#define CONST_RC_CLAN_RANK_DELETE_RANK_ASSIGNED                  350005
#define CONST_RC_CLAN_RANK_EDIT_NOT_LEADER                       360001
#define CONST_RC_CLAN_RANK_EDIT_NO_CLAN                          360002
#define CONST_RC_CLAN_RANK_EDIT_INVALID_PERMISSION               360003
#define CONST_RC_CLAN_RANK_EDIT_INVALID_RANK_NAME                360004
#define CONST_RC_CLAN_RANK_EDIT_INVALID_RANK_UID                 360005
#define CONST_RC_CLAN_RANK_EDIT_NAME_IN_USE                      360006
#define CONST_RC_CLAN_RANK_ASSIGN_NO_PERMISSION                  370001
#define CONST_RC_CLAN_RANK_ASSIGN_NO_CLAN                        370002
#define CONST_RC_CLAN_RANK_ASSIGN_NO_CLAN_MEMBER                 370003
#define CONST_RC_CLAN_RANK_ASSIGN_HIGHER_MEMBER                  370004
#define CONST_RC_CLAN_RANK_ASSIGN_HIGHER_RANK                    370005
#define CONST_RC_CLAN_RANK_ASSIGN_INVALID_RANKUID                370006
#define CONST_RC_CLAN_INFORMATION_NO_CLAN                        380001
#define CONST_RC_CLAN_INFORMATION_EDIT_NO_PERMISSION             390001
#define CONST_RC_CLAN_INFORMATION_EDIT_NO_CLAN                   390002
#define CONST_RC_CLAN_MOTD_EDIT_NO_PERMISSION                    400001
#define CONST_RC_CLAN_MOTD_EDIT_NO_CLAN                          400002
#define CONST_RC_CLAN_DELETE_NO_CLAN                             410001
#define CONST_RC_CLAN_DELETE_LEADER                              410002
#define CONST_RC_CLAN_MEMBER_STATE_NO_CLAN                       420001
#define CONST_RC_FRIENDLIST_ADD_NOT_FOUND                        430001
#define CONST_RC_FRIENDLIST_ADD_SELF                             430002
#define CONST_RC_FRIENDLIST_ADD_ALREADY_ADDED                    430003
#define CONST_RC_FRIENDLIST_ADD_FULL                             430004
#define CONST_RC_FRIENDLIST_ADD_GM                               430005
#define CONST_RC_FRIENDLIST_ADD_SAME_ACCOUNT                     430006
#define CONST_RC_FRIENDLIST_ADD_INVALID_NAME                     430007
#define CONST_RC_FRIENDLIST_REMOVE_NO_FRIEND                     440001
#define CONST_RC_FRIENDLIST_STATE_NO_FRIEND                      450001
#define CONST_RC_IGNORELIST_ADD_NOT_FOUND                        460001
#define CONST_RC_IGNORELIST_ADD_SELF                             460002
#define CONST_RC_IGNORELIST_ADD_ALREADY_ADDED                    460003
#define CONST_RC_IGNORELIST_ADD_FULL                             460004
#define CONST_RC_IGNORELIST_ADD_GM                               460005
#define CONST_RC_IGNORELIST_ADD_SAME_ACCOUNT                     460006
#define CONST_RC_IGNORELIST_ADD_INVALID_NAME                     460007
#define CONST_RC_IGNORELIST_REMOVE_NO_IGNORE                     470001
#define CONST_RC_GM_COMMAND_CLIENT_GM_DISTRICT_SERVER_MISSMATCH  480006
#define CONST_RC_GM_COMMAND_NO_CALLING_CLIENT                    480005
#define CONST_RC_GM_COMMAND_PERMISSION                           480001
#define CONST_RC_GM_COMMAND_PENDING                              480002
#define CONST_RC_GM_COMMAND_CHARACTER_NOT_FOUND                  480003
#define CONST_RC_GM_COMMAND_CHARACTER_NO_DISTRICT                480004
#define CONST_RC_GM_COMMAND_SILENCE_HASH_FULL                    480007
#define CONST_RC_BULKLOG_SESSION_ARCHIVE_EXECUTION_COUNT         490001
#define CONST_RC_INIT_SERVICE_BROKER_NOT_FOUND                   510001
#define CONST_RC_INIT_SERVICE_BROKER_DISABLED                    510002
#define CONST_RC_INIT_SERVICE_BROKER_CONVERSATION_GROUP_ID       510003
#define CONST_RC_MARKETPLACE_THUMBNAIL_INVALID_PARAM             520001
#define CONST_RC_GROUP_LIST_PAGE                                 530001
#define CONST_RC_GROUP_LIST_NOT_FOUND                            530002
#define CONST_RC_GROUP_INFO_NOT_FOUND                            540001
#define CONST_RC_GROUP_INFO_FACTION                              540002
#define CONST_RC_GROUP_INFO_NO_GROUP                             540003
#define CONST_RC_GROUP_INFO_PRIVATE                              540004
#define CONST_RC_CHARACTERFINDER_INFO_NO_CHARACTER               610001
#define CONST_RC_CHARACTERFINDER_INFO_GM                         610002
#define CONST_RC_MARKETPLACE_SELLER_LIST_INVALID_STRING          620001
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_BUYOUT       630001
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_BID          630002
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_AUCTION_LIMIT        630004
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_TYPE         630005
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_CASH         630006
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_NO_ITEM              630007
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_DUPE                 630008
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_DURATION     630009
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_INVALID_ITEM         630010
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_NO_CASH              630011
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_CASH_TYPE            630012
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_NOT_SELLABLE         630013
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_MINIMUM_CASH         630014
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_NO_TRADE             630015
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_SELF_RESTRICTION     630016
#define CONST_RC_MARKETPLACE_AUCTION_CREATE_RATING_RESTRICTED    630017
#define CONST_RC_MARKETPLACE_AUCTION_BID_NO_AUCTION              640001
#define CONST_RC_MARKETPLACE_AUCTION_BID_SELF                    640002
#define CONST_RC_MARKETPLACE_AUCTION_BID_EXPIRED                 640003
#define CONST_RC_MARKETPLACE_AUCTION_BID_BUYOUT_EXCEEDED         640004
#define CONST_RC_MARKETPLACE_AUCTION_BID_MINIMUM                 640005
#define CONST_RC_MARKETPLACE_AUCTION_BID_CURRENT                 640006
#define CONST_RC_MARKETPLACE_AUCTION_BID_DUPE                    640007
#define CONST_RC_MARKETPLACE_AUCTION_BID_AMOUNT                  640008
#define CONST_RC_MARKETPLACE_AUCTION_BID_INVALID_AMOUNT          640009
#define CONST_RC_MARKETPLACE_AUCTION_BID_INVALID_TYPE            640010
#define CONST_RC_MARKETPLACE_AUCTION_BID_FACTION                 640011
#define CONST_RC_MARKETPLACE_AUCTION_BID_NO_TRADE                640012
#define CONST_RC_MARKETPLACE_AUCTION_BID_AUTION_RESTRICTED       640013
#define CONST_RC_MARKETPLACE_AUCTION_CANCEL_NO_AUCTION           650001
#define CONST_RC_MARKETPLACE_AUCTION_CANCEL_EXPIRED              650002
#define CONST_RC_MARKETPLACE_AUCTION_CANNOT_CANCEL               650003
#define CONST_RC_MARKETPLACE_AUCTION_ITEM_NO_AUCTION             660001
#define CONST_RC_MARKETPLACE_AUCTION_ITEM_PERMISSION             660002
#define CONST_RC_MARKETPLACE_AUCTION_LIST_INVALID_SORT           670001
#define CONST_RC_MARKETPLACE_AUCTION_LIST_INVALID_STRING         670002
#define CONST_RC_MARKETPLACE_AUCTION_LIST_RESTRICTED_CHAR_DOESNT_EXIST 670003
#define CONST_RC_MARKETPLACE_MYBID_LIST_INVALID_SORT             680001
#define CONST_RC_MARKETPLACE_MYAUCTION_LIST_INVALID_SORT         690001
#define CONST_RC_MAIL_LIST_INVALID_SORT                          700001
#define CONST_RC_MAIL_SEND_NOT_FOUND                             710001
#define CONST_RC_MAIL_SEND_SELF                                  710002
#define CONST_RC_MAIL_SEND_BLOCKED                               710003
#define CONST_RC_MAIL_SEND_IGNORED                               710004
#define CONST_RC_MAIL_SEND_MAIL_LIMIT                            710005
#define CONST_RC_MAIL_SEND_ACCOUNT_MAIL_LIMIT                    710006
#define CONST_RC_MAIL_SEND_NO_ITEM                               710007
#define CONST_RC_MAIL_SEND_COST                                  710008
#define CONST_RC_MAIL_SEND_INVALID_CASH                          710009
#define CONST_RC_MAIL_SEND_INVALID_ITEM                          710010
#define CONST_RC_MAIL_SEND_DUPE                                  710011
#define CONST_RC_MAIL_SEND_NOT_SELLABLE                          710012
#define CONST_RC_MAIL_SEND_NO_TRADE                              710013
#define CONST_RC_MAIL_SEND_IGNORING                              710014
#define CONST_RC_MAIL_SEND_SPAM                                  710019
#define CONST_RC_MAIL_SEND_ACCOUNT_TRADE_ONLY                    710020
#define CONST_RC_MAIL_SEND_CASH_UNAVAILABLE                      710021
#define CONST_RC_MAIL_READ_NOT_FOUND                             720001
#define CONST_RC_MAIL_READ_NOT_OWNER                             720002
#define CONST_RC_MAIL_DELETE_NOT_FOUND                           730001
#define CONST_RC_MAIL_DELETE_NOT_OWNER                           730002
#define CONST_RC_MAIL_DETACH_NOT_FOUND                           740001
#define CONST_RC_MAIL_DETACH_NOT_OWNER                           740002
#define CONST_RC_MAIL_DETACH_NO_ATTACHED_CASH                    740003
#define CONST_RC_MAIL_DETACH_NO_ATTACHED_ITEM                    740004
#define CONST_RC_MAIL_DETACH_NO_ATTACHED_POINTS                  740005
#define CONST_RC_MAIL_DETACH_INVALID_TYPE                        740006
#define CONST_RC_MAIL_DETACH_INVALID_ITEM                        740007
#define CONST_RC_MAIL_DETACH_CASH_ERROR                          740008
#define CONST_RC_MAIL_DETACH_ITEM_ERROR                          740009
#define CONST_RC_MAIL_DETACH_NO_ACCOUNT                          740011
#define CONST_RC_MAIL_ATTACH_NOT_FOUND                           750001
#define CONST_RC_MAIL_ATTACH_NOT_OWNER                           750002
#define CONST_RC_MAIL_ATTACH_ATTACHED_CASH                       750003
#define CONST_RC_MAIL_ATTACH_ATTACHED_ITEM                       750004
#define CONST_RC_MAIL_ATTACH_INVALID                             750005
#define CONST_RC_MAIL_ITEM_NOT_FOUND                             760001
#define CONST_RC_DATABASE_EVENT_END_DIALOG                       800001
#define CONST_RC_DATABASE_EVENT_CONVERSATION_ERROR               800002
#define CONST_RC_DATABASE_EVENT_UNKNOWN_MESSAGE_TYPE             800003
#define CONST_RC_DATABASE_EVENT_TIMEOUT                          800004
#define CONST_RC_CHARACTER_LOAD_SUCCESS_WITH_DUPLICATED_ONLINE   810001
#define CONST_RC_CHARACTER_LOAD_DB_OUT_OF_SYNC                   810002
#define CONST_RC_CHARACTER_LOAD_SUCCESS_WITH_REDEMPTIONKEY_REWARD_FAILURE 810003
#define CONST_RC_CONFIGFILE_LOAD_ALREADY_LOADED                  820001
#define CONST_RC_NAME_QUERY_NOT_FOUND                            830001
#define CONST_RC_DISTRICT_QUEUE_CANCEL_NO_GROUP                  840001
#define CONST_RC_DISTRICT_QUEUE_CANCEL_NOT_LEADER                840002
#define CONST_RC_COMPUTER_BLOCKED                                850001
#define CONST_RC_LOGIN_INNOVA_ERROR_BASE                         900000
#define CONST_MAX_GROUP_SLOTS                                    20
#define CONST_KILL_NOTIFICATION_ENTRIES                          40
#define CONST_IP_ADDRESS_LEN                                     16
#define CONST_USERNAME_LEN                                       65
#define CONST_MINIMUM_USERNAME_LEN                               1
#define CONST_PASSWORD_LEN                                       129
#define CONST_MINIMUM_PASSWORD_LEN                               3
#define CONST_REAL_TAG_LEN                                       25
#define CONST_WORLD_NAME_LEN                                     17
#define CONST_DISTRICT_NAME_LEN                                  101
#define CONST_SERVER_REGION_LEN                                  3
#define CONST_CHARACTER_NAME_LEN                                 17
#define CONST_MINIMUM_CHARACTER_NAME_LEN                         3
#define CONST_CLAN_NAME_LEN                                      33
#define CONST_MINIMUM_CLAN_NAME_LEN                              3
#define CONST_CLAN_INFORMATION_LEN                               401
#define CONST_CLAN_BIO_LEN                                       401
#define CONST_CLAN_MOTD_LEN                                      201
#define CONST_CLAN_RANK_NAME_LEN                                 17
#define CONST_MINIMUM_CLAN_RANK_NAME_LEN                         1
#define CONST_CLAN_MEMBER_BIO_LEN                                101
#define CONST_CLAN_MEMBER_NOTE_LEN                               51
#define CONST_CHAT_MESSAGE_LEN                                   201
#define CONST_GM_COMMAND_LEN                                     201
#define CONST_MAX_SKILLRATING_LEN                                32
#define CONST_CUSTOM_COLOURS_LEN                                 48
#define CONST_DISPLAY_POINT_CUSTOMISATION_LEN                    7000
#define CONST_CHARACTER_CUSTOMISATION_LEN                        7000
#define CONST_SYMBOL_CUSTOMISATION_LEN                           2500
#define CONST_THEME_CUSTOMISATION_LEN                            2500
#define CONST_APPLICATION_VERSION_LEN                            256
#define CONST_MAP_NAME_LEN                                       256
#define CONST_MAX_QUERY_LEN                                      1024
#define CONST_SRP_MODULUS_LEN                                    64
#define CONST_SRP_PROOF_LEN                                      20
#define CONST_SRP_VERIFIER_LEN                                   64
#define CONST_SRP_SALT_LEN                                       10
#define CONST_SRP_SESSION_KEY_LEN                                40
#define CONST_AUTHENTICATION_KEY_LEN                             20
#define CONST_ENCRYPTION_KEY_LEN                                 16
#define CONST_DATABASE_TABLE_NAME_LEN                            128
#define CONST_DATABASE_USERNAME_LEN                              17
#define CONST_DATABASE_PASSWORD_LEN                              17
#define CONST_DATABASE_DATABASE_LEN                              33
#define CONST_LOG_CATEGORY_NAME_LEN                              21
#define CONST_LOG_SUBCATEGORY_NAME_LEN                           21
#define CONST_LOG_ATTRIBUTE_NAME_LEN                             33
#define CONST_STEAM_AUTH_TOKEN_LEN                               1024
#define CONST_KONGREGATE_AUTH_TOKEN_LEN                          200
#define CONST_ARC_AUTH_TOKEN_LEN                                 17
#define CONST_ARC_ACCOUNT_NAME_LEN                               65
#define CONST_MAX_REGISTRY_TAG_LEN                               33
#define CONST_MAX_ASSOCIATION_TOKEN_LEN                          1024
#define CONST_MAX_TIME_DIFF_WITH_DATABASE                        300
#define CONST_MAX_HEXDUMP                                        256
#define CONST_MAX_ACTION_DISTRICT_CHARACTERS                     100
#define CONST_MAX_SOCIAL_DISTRICT_CHARACTERS                     250
#define CONST_MAX_GM_DISTRICT_CHARACTERS                         3
#define CONST_MAX_CONTACTS                                       128
#define CONST_MAX_CHARACTER_SLOTS                                100
#define CONST_MAX_FREE_CHARACTER_SLOTS                           2
#define CONST_MAX_CLAN_SLOTS                                     150
#define CONST_MAX_CLAN_RANKS                                     15
#define CONST_MAX_FREE_FRIENDLIST                                50
#define CONST_MAX_FREE_IGNORELIST                                50
#define CONST_MAX_FRIENDLIST                                     100
#define CONST_MAX_IGNORELIST                                     100
#define CONST_MARKETPLACE_SUBSTRING_LEN                          17
#define CONST_MARKETPLACE_SERVER_PAGE_MULTIPLIER                 1
#define CONST_MAX_MARKETPLACE_ROWS_PER_SERVER_PAGE               100
#define CONST_MAX_MARKETPLACE_ROWS_PER_CLIENT_PAGE               15
#define CONST_MAX_MARKETPLACE_THUMBNAILS_PER_LOAD                10
#define CONST_MAX_MARKETPLACE_SELLERS                            20
#define CONST_MAX_MARKETPLACE_THUMBNAIL_RAW_SIZE                 10000
#define CONST_ITEM_NAME_LEN                                      33
#define CONST_FILTER_NAME_LEN                                    51
#define CONST_MAX_XML_ITEM_LEN                                   5000
#define CONST_MAX_XML_DISPLAY_POINT_LEN                          5000
#define CONST_MAX_XML_CUSTOMISATION_LEN                          5000
#define CONST_MAX_PENDING_OPERATIONS_LEN                         6000
#define CONST_MAX_PENDING_DESCRIPTION_LEN                        51
#define CONST_MAIL_SUBJECT_LEN                                   129
#define CONST_MAIL_BODY_LEN                                      1001
#define CONST_MAIL_ROWS_PER_PAGE                                 10
#define CONST_MAX_MAIL_CASH                                      200000000
#define CONST_MAX_MARKETPLACE_CASH                               200000000
#define CONST_PERSISTENT_CHARACTER_DATA_VERSION                  1
#define CONST_CONFIGFILE_COMPRESSED_LEN                          8000
#define CONST_CONFIGFILE_LEN                                     50000
#define CONST_MAX_CONFIGFILES_ACCOUNT                            5
#define CONST_MAX_CONFIGFILES_CHARACTER                          5
#define CONST_INSTANCING_DEVIATION_PERCENTAGE                    10
#define CONST_MAX_XML_LOG_LEN                                    1500
#define CONST_MAX_BINARY_LOG_LEN                                 4096
#define CONST_ACCOUNT_TYPE_NAME_LEN                              50
#define CONST_NOTICE_LEN                                         1025
#define CONST_MAX_TRACKED_ACTIVITIES                             300
#define CONST_MAX_DAILY_ACTIVITIES                               100
#define CONST_MAX_TUTORIALS                                      128
#define CONST_MAX_PROGRESSION_FIXUPS                             5
#define CONST_MAX_COLLECTABLES                                   2
#define CONST_SSO_TOKEN_LEN                                      37
#define CONST_MAX_CHALLENGE_TOP_RANKS                            20
#define CONST_MAX_POPUP_URL_LEN                                  257
#define CONST_MAX_FAIRFIGHT_URL_LEN                              257
#define CONST_MAX_CRISP_UID_LEN                                  30
#define CONST_TIMESTAMP_LEN                                      8
#define CONST_ACCOUNT_TYPE_SYSTEM                                -1
#define CONST_ACCOUNT_TYPE_NORMAL                                0
#define CONST_ACCOUNT_TYPE_GM                                    1
#define CONST_ACCOUNT_TYPE_QA                                    2
#define CONST_ACCOUNT_TYPE_DEVELOPER                             3
#define CONST_ACCOUNT_TYPE_SPCA                                  4
#define CONST_ACCOUNT_TYPE_STRESSSERVER                          9
#define CONST_CONFIG_DIR                                         "..\\APBGame\\Config\\"
#define CONST_MAX_PERSISTENT_CONFIGFILE_DOWNLOAD_ATTEMPTS        5
#define CONST_MAX_PERSISTENT_CONFIGFILE_UPLOAD_ATTEMPTS          5
#define CONST_m_nDefaultLSPort                                   10125
#define CONST_ITEM_ASSETS_MANAGER_ARRAY_SIZE                     8
#define CONST_MAX_GROUP_SLOTS                                    20
#define CONST_KILL_NOTIFICATION_ENTRIES                          40
#define CONST_ITEM_ASSETS_MANAGER_ARRAY_SIZE                     8
#define CONST_NUM_FNMODS_CHARACTER                               3
#define CONST_NUM_FNMODS_WEAPON                                  3
#define CONST_NUM_FNMODS_VEHICLE                                 4
#define CONST_ROLE_MILESTONE_BATCH_SIZE                          100
#define CONST_MAX_NUM_MEDALS                                     90
#define CONST_SECONDS_TO_MILLISECONDS                            1000.0
#define CONST_PING_QUANTIZE                                      250.0
#define CONST_NORMALISED_VECTOR_QUANTIZE                         32767.0
#define CONST_LOCK_SCREEN_WIDTH                                  640.0
#define CONST_LOCK_SCREEN_HEIGHT                                 480.0
#define CONST_MAX_CLIENT_CONTACT_PAIRS_PACKET                    5.0
#define CONST_CLIENTNOTIFICATION_NONMISSION_MULTIPLIER           10.0
#define CONST_STEAM_AUTH_BLOB_CHUNK_LEN                          384
#define CONST_NUM_TIME_DELTAS_TO_STORE                           60
#define CONST_DISTANCE_AT_VAP                                    20
#define CONST_Z_DISTANCE_AT_VAP                                  150
#define CONST_DISTANCE_TOO_FAR_FROM_VAP                          1000
#define CONST_AUTO_MOVE_TO_POSITION_TIMEOUT                      15
#define CONST_MOVE_TO_POSITION_NO_MOVEMENT_TIME_OUT              2
#define CONST_TaskItemSize_MAX                                   6
#define CONST_FrozenMessageTimeOut                               5.0f
#define CONST_UNKNOWN_HEALTH                                     -666
#define CONST_CosmeticAimRotationTolerance                       1.0f
#define CONST_CosmeticCameraCollideTolerance                     0.05f
#define CONST_CosmeticAimRotationSendThrottle                    0.04f
#define CONST_LogicalAimRotationSendThrottle                     0.04f
#define CONST_NewServerDriveResendRate                           0.1f
#define CONST_CUSTOMISATION_DATA_PACKET_SIZE                     256
#define CONST_BOTPLAYER_STEER_ANGLE_DEADZONE                     0.05
#define CONST_BOTPLAYER_ROTATION_RATE                            8.0
#define CONST_BOTPLAYER_TARGET_RADIUS                            300.0
#define CONST_BOTPLAYER_WAITTIME_MIN                             2.0f
#define CONST_BOTPLAYER_WAITTIME_RANGE                           2.0f
#define CONST_BOTPLAYER_WALKTIME                                 1.0f
#define CONST_MAX_PRESETS_NUM                                    100
#define CONST_NUM_PARTICLES_RETICULE                             80
#define CONST_ACCURACY_BAR_HEIGHT                                50
#define CONST_kJobListLineHeight                                 15
#define CONST_kBorderWidth                                       5
#define CONST_kNPCInfoTextMaxDist                                1000.0
#define CONST_CLASS_INPUT_GROUP                                  0
#define CONST_CULL_INPUT_GROUP                                   0
#define CONST_GROUP_NON_ORDERED                                  -1
#define CONST_GROUP_MAX_DEPTH                                    5
#define CONST_GROUP_MAX_ORDER                                    10
#define CONST_GROUP_INPUT_GROUP                                  0
#define CONST_GROUP_INPUT_DEPENDENCY                             1
#define CONST_GROUP_INPUT_FILTER                                 2
#define CONST_GROUP_INPUT_ANTI_FILTER                            3
#define CONST_GROUP_OUTPUT_GROUP                                 0
#define CONST_GROUP_OUTPUT_SWAP                                  1
#define CONST_GROUP_OUTPUT_DEPENDENCY                            2
#define CONST_GROUP_OUTPUT_CULL                                  3
#define CONST_SWAP_INPUT_GROUP                                   0
#define CONST_SWAP_OUTPUT_DEPENDENCY                             0
#define CONST_SWAP_OUTPUT_FILTER                                 1
#define CONST_SWAP_OUTPUT_ANTI_FILTER                            2
#define CONST_DRAW_FLAG_HIGHLIGHT_NEIGHBOURS                     0x0001
#define CONST_DRAW_FLAG_DEBUG_VIEW                               0x0002
#define CONST_DRAW_FLAG_SHOW_ANTI_FILTER_LINES                   0x0004
#define CONST_DRAW_FLAG_SHOW_CLASS_ICONS                         0x0008
#define CONST_DRAW_FLAG_SHOW_COMMENT_ICONS                       0x0010
#define CONST_DRAW_FLAG_SHOW_CULL_ICONS                          0x0020
#define CONST_DRAW_FLAG_SHOW_CULL_LINES                          0x0040
#define CONST_DRAW_FLAG_SHOW_DEPENDENCY_LINES                    0x0080
#define CONST_DRAW_FLAG_SHOW_FILTER_LINES                        0x0100
#define CONST_DRAW_FLAG_SHOW_GROUP_ICONS                         0x0200
#define CONST_DRAW_FLAG_SHOW_GROUP_LINES                         0x0400
#define CONST_DRAW_FLAG_SHOW_NON_ORDERED_GROUP_ICONS             0x0800
#define CONST_DRAW_FLAG_SHOW_NON_ORDERED_GROUP_LINES             0x1000
#define CONST_DRAW_FLAG_SHOW_SWAP_ICONS                          0x2000
#define CONST_DRAW_FLAG_SHOW_SWAP_LINES                          0x4000
#define CONST_PREPARE_TO_HALT_DURATION                           4.0f
#define CONST_MINIMUM_EDGE_ANGLE_TO_SMOOTH                       5.0
#define CONST_MAXIMUM_EDGE_ANGLE_FOR_PERP_OFFSET                 5.0
#define CONST_SPAWNING_DESPAWN_OFFSET                            -50.0
#define CONST_MIN_DISTANCE_FROM_NEXT_TO_SMOOTH                   50.f
#define CONST_MIN_LENGTH_FOR_VECTOR_TO_SMOOTH                    50.f
#define CONST_MIN_ANGLE_BETWEEN_VECTORS_TO_SMOOTH                5.f
#define CONST_MAX_DISTANCE_FROM_MIDDLE_CONTROL_POINT             300.f
#define CONST_DIRECTION_SCALE_FACTOR                             100.0f
#define CONST_MAX_BODIES                                         20
#define CONST_MAX_BODIES                                         20
#define CONST_TEAROFF_MOMENTUM_SCALE_FACTOR                      100.0f
#define CONST_MAX_REPLICATED_EVT_TIMERS                          8
#define CONST_TTI_FINISH_TIME_OFFSET                             10.0f
#define CONST_CRIMECOMMITTED_FINISH_TIME_OFFSET                  10.0f
#define CONST_MAX_NUM_HUD_MARKERS                                100
#define CONST_SHMTARGETING_UNSET                                 0
#define CONST_SHMTARGETING_NEUTRAL                               1
#define CONST_SHMTARGETING_FRIENDLY                              2
#define CONST_SHMTARGETING_HOSTILE                               3
#define CONST_MAX_PEDESTRIAN_TYPES                               20
#define CONST_MAX_VEHICLE_CATEGORIES                             20
#define CONST_PREV_ACCEL_BUFFER_SIZE                             40
#define CONST_nHOURS_PER_DAY                                     24
#define CONST_nMINS_PER_HOUR                                     60
#define CONST_nSECS_PER_MIN                                      60
#define CONST_nMINS_PER_DAY                                      1440
#define CONST_nSECS_PER_HOUR                                     3600
#define CONST_nSECS_PER_DAY                                      86400
#define CONST_MAX_ROUTE_LENGTH_RATIO                             3.0f
#define CONST_MaxIterationCount                                  10000
#define CONST_IterationsPerTick                                  50
#define CONST_Alpha                                              5.0f

/*
-----------------------------------------------------------------
 - UEnum
-----------------------------------------------------------------
*/
enum etAudioEventTypes
{
};
enum etAudioSwitchGroups
{
};
enum etAudioSwitchValues
{
};
enum etAudioLocEventTypes
{
};
enum FootstepWeight
{
	FW_Light = 0,
	FW_Medium = 1,
	FW_Heavy = 2,
	FW_MAX = 3,
};
enum etPlayerCustomisation
{
	PC_CHARACTER = 0,
	PC_VEHICLE = 1,
	PC_GRAFFITI = 2,
	PC_THEME = 3,
	PC_MAX = 4,
};
enum etCustomisationPrecacheType
{
	CPCT_Character = 0,
	CPCT_Vehicle = 1,
	CPCT_Graffiti = 2,
	CPCT_Statue = 3,
	CPCT_Theme = 4,
	CPCT_MAX = 5,
};
enum etAchievementType
{
	AchievementType_None = 0,
	AchievementType_MaxKills = 1,
	AchievementType_MAX = 2,
};
enum etActivityMessageLocation
{
	ActivityMessageLocation_ActionMessage = 0,
	ActivityMessageLocation_DistrictMapMessage = 1,
	ActivityMessageLocation_ChatMessage = 2,
	ActivityMessageLocation_StandardMessage = 3,
	ActivityMessageLocation_ScoreboardMessage = 4,
	ActivityMessageLocation_RespawnMessage = 5,
	ActivityMessageLocation_MAX = 6,
};
enum etActivityMessageParameterConversion
{
	AMPC_AchievementName = 0,
	AMPC_AmmoType = 1,
	AMPC_AssistName = 2,
	AMPC_CharacterName = 3,
	AMPC_ContactName = 4,
	AMPC_DailyActivityTitle = 5,
	AMPC_DisplayPointName = 6,
	AMPC_DistrictBlock = 7,
	AMPC_DistrictName = 8,
	AMPC_ElectiveSpawnUnavailableReason = 9,
	AMPC_GameplayObjectDescription = 10,
	AMPC_ItemDisplayName = 11,
	AMPC_JustificationText = 12,
	AMPC_Locale = 13,
	AMPC_LocationBeacon = 14,
	AMPC_MedalDescription = 15,
	AMPC_MedalName = 16,
	AMPC_MinigameName = 17,
	AMPC_Number = 18,
	AMPC_OfferType = 19,
	AMPC_OrganisationName = 20,
	AMPC_RatingLevelName = 21,
	AMPC_RewardDisplayName = 22,
	AMPC_RoleName = 23,
	AMPC_Score = 24,
	AMPC_SddRow_Contact = 25,
	AMPC_SddRow_Heat = 26,
	AMPC_SddRow_Medal = 27,
	AMPC_SddRow_Organisation = 28,
	AMPC_SddRow_RedeemableReward = 29,
	AMPC_SddRow_RewardDescription = 30,
	AMPC_SddRow_Role = 31,
	AMPC_StreetName = 32,
	AMPC_TaskMarkerIndex = 33,
	AMPC_ThreatLevelName = 34,
	AMPC_TutorialTitle = 35,
	AMPC_VehicleName = 36,
	AMPC_WeaponIcon = 37,
	AMPC_MAX = 38,
};
enum etAPBPawnConstant
{
	APBPawnConstant_ArrestTime = 0,
	APBPawnConstant_DistanceSprintedBeforeGameplayEvent = 1,
	APBPawnConstant_FallDeathMomentumScale = 2,
	APBPawnConstant_HitReactionAngleConstraint = 3,
	APBPawnConstant_ImmuneToDamageTimeInitial = 4,
	APBPawnConstant_ImmuneToDamageTimeOnRespawnExtended = 5,
	APBPawnConstant_ImmuneToDamageTimeOnRespawnNormal = 6,
	APBPawnConstant_ImmuneToStaminaDamageTime = 7,
	APBPawnConstant_ImmunityCheckDelay = 8,
	APBPawnConstant_ImmunityDistanceMax = 9,
	APBPawnConstant_JumpOffDamageBase = 10,
	APBPawnConstant_JumpOffDamageVelocityMultiplier = 11,
	APBPawnConstant_JumpOffFailDamage = 12,
	APBPawnConstant_JumpOffMinimalDamage = 13,
	APBPawnConstant_StaminaExhaustedThreshold = 14,
	APBPawnConstant_SwitchToUnarmedTime = 15,
	APBPawnConstant_WeaponAccuracyCooldownPerSecond = 16,
	APBPawnConstant_WeaponFireRateTechnicalLimit = 17,
	APBPawnConstant_MAX = 18,
};
enum etAPBViewportType
{
	VWT_16to9_Full = 0,
	VWT_4to3_Full = 1,
	VWT_MAX = 2,
};
enum etCameraConstant
{
	CameraConstant_CloseIn16_9BackAdjust = 0,
	CameraConstant_CloseIn16_9HeightAdjust = 1,
	CameraConstant_CloseIn16_9RightAdjust = 2,
	CameraConstant_CloseIn16_9RightAdjustPitchScalar = 3,
	CameraConstant_CloseIn4_3BackAdjust = 4,
	CameraConstant_CloseIn4_3HeightAdjust = 5,
	CameraConstant_CloseIn4_3RightAdjust = 6,
	CameraConstant_CloseIn4_3RightAdjustPitchScalar = 7,
	CameraConstant_CrouchAndSideSwapCameraRollSpeed = 8,
	CameraConstant_CrouchAndSideSwapCameraSpeed = 9,
	CameraConstant_CrouchCloseIn16_9BackAdjust = 10,
	CameraConstant_CrouchCloseIn16_9HeightAdjust = 11,
	CameraConstant_CrouchCloseIn16_9RightAdjust = 12,
	CameraConstant_CrouchCloseIn16_9RightAdjustPitchScalar = 13,
	CameraConstant_CrouchCloseIn4_3BackAdjust = 14,
	CameraConstant_CrouchCloseIn4_3HeightAdjust = 15,
	CameraConstant_CrouchCloseIn4_3RightAdjust = 16,
	CameraConstant_CrouchCloseIn4_3RightAdjustPitchScalar = 17,
	CameraConstant_CrouchFarOut16_9BackAdjust = 18,
	CameraConstant_CrouchFarOut16_9HeightAdjust = 19,
	CameraConstant_CrouchFarOut16_9RightAdjust = 20,
	CameraConstant_CrouchFarOut16_9RightAdjustPitchScalar = 21,
	CameraConstant_CrouchFarOut4_3BackAdjust = 22,
	CameraConstant_CrouchFarOut4_3HeightAdjust = 23,
	CameraConstant_CrouchFarOut4_3RightAdjust = 24,
	CameraConstant_CrouchFarOut4_3RightAdjustPitchScalar = 25,
	CameraConstant_FarOut16_9BackAdjust = 26,
	CameraConstant_FarOut16_9HeightAdjust = 27,
	CameraConstant_FarOut16_9RightAdjust = 28,
	CameraConstant_FarOut16_9RightAdjustPitchScalar = 29,
	CameraConstant_FarOut4_3BackAdjust = 30,
	CameraConstant_FarOut4_3HeightAdjust = 31,
	CameraConstant_FarOut4_3RightAdjust = 32,
	CameraConstant_FarOut4_3RightAdjustPitchScalar = 33,
	CameraConstant_HandyCamBlendFromSpeed = 34,
	CameraConstant_PenetrationBlendInTime = 35,
	CameraConstant_PenetrationBlendOutTime = 36,
	CameraConstant_SafeLocBlendSpeed = 37,
	CameraConstant_VaultFenceCameraRotationSpeed = 38,
	CameraConstant_ZoomSpeedPerSecond = 39,
	CameraConstant_MAX = 40,
};
enum etCameraHandyCamPresetExported
{
	CameraHandyCamPresetExported_None = 0,
	CameraHandyCamPresetExported_Debug = 1,
	CameraHandyCamPresetExported_Running = 2,
	CameraHandyCamPresetExported_Sprinting = 3,
	CameraHandyCamPresetExported_Walking = 4,
	CameraHandyCamPresetExported_MAX = 5,
};
enum etCameraShakePresetExported
{
	CameraShakePresetExported_None = 0,
	CameraShakePresetExported_APBScreenShake1 = 1,
	CameraShakePresetExported_APBScreenShake2 = 2,
	CameraShakePresetExported_APBScreenShake3 = 3,
	CameraShakePresetExported_APBScreenShake4 = 4,
	CameraShakePresetExported_APBScreenShake5 = 5,
	CameraShakePresetExported_APBScreenShake6 = 6,
	CameraShakePresetExported_HeavyLanding = 7,
	CameraShakePresetExported_MAX = 8,
};
enum etCapacityItemType
{
	Capacity_Clothing = 0,
	Capacity_Clothing = 1,
	Capacity_Clothing = 2,
	Capacity_Clothing = 3,
	Capacity_Clothing_Max = 4,
	Capacity_Outfit = 5,
	Capacity_Outfit = 6,
	Capacity_Outfit = 7,
	Capacity_Outfit_Max = 8,
	Capacity_Songs = 9,
	Capacity_Songs = 10,
	Capacity_Songs = 11,
	Capacity_Songs = 12,
	Capacity_Songs_Max = 13,
	Capacity_Symbol = 14,
	Capacity_Symbol = 15,
	Capacity_Symbol = 16,
	Capacity_Symbol = 17,
	Capacity_Symbol_Max = 18,
	Capacity_Themes = 19,
	Capacity_Themes = 20,
	Capacity_Themes = 21,
	Capacity_Themes = 22,
	Capacity_Themes_Max = 23,
	Capacity_Vehicle = 24,
	Capacity_Vehicle = 25,
	Capacity_Vehicle = 26,
	Capacity_Vehicle = 27,
	Capacity_Vehicle_Max = 28,
	Capacity_FnMod = 29,
	Capacity_Weapon = 30,
	Capacity_Clothing = 31,
	Capacity_Symbol = 32,
	Capacity_MAX = 33,
};
enum etCCameraMode
{
	CameraMode_None = 0,
	CameraMode_ADA = 1,
	CameraMode_AttachToActor = 2,
	CameraMode_Death = 3,
	CameraMode_DefaultCharacter = 4,
	CameraMode_Director = 5,
	CameraMode_Driving = 6,
	CameraMode_Fly = 7,
	CameraMode_LeanTowardScreenCentre = 8,
	CameraMode_MarksManShip = 9,
	CameraMode_Passenger = 10,
	CameraMode_Sprinting = 11,
	CameraMode_Unstick = 12,
	CameraMode_VehicleDeath = 13,
	CameraMode_VehicleMarksmanship = 14,
	CameraMode_MAX = 15,
};
enum etCharacterStatus
{
	GMS_None = 0,
	GMS_Dead = 1,
	GMS_TaskParticipant = 2,
	GMS_NonTaskParticipant = 3,
	GMS_Stunned = 4,
	GMS_Arrested = 5,
	GMS_Driving = 6,
	GMS_OutOfDistrict = 7,
	GMS_Ready = 8,
	GMS_DND = 9,
	GMS_AFK = 10,
	GMS_Disconnected = 11,
	GMS_MAX = 12,
};
enum etCharacterVOIPStatus
{
	VOIP_Active_High = 0,
	VOIP_Active_Low = 1,
	VOIP_Active_Medium = 2,
	VOIP_InChannel = 3,
	VOIP_Muted = 4,
	VOIP_None = 5,
	VOIP_NotInChannel = 6,
	VOIP_MAX = 7,
};
enum etChatConstant
{
	ChatConstant_SayRadius = 0,
	ChatConstant_YellRadius = 1,
	ChatConstant_MAX = 2,
};
enum etChatState
{
	kChatState_Normal = 0,
	kChatState_AFK = 1,
	kChatState_DND = 2,
	kChatState_MAX = 3,
};
enum etChatTag
{
	ChatTag_None = 0,
	ChatTag_Dev = 1,
	ChatTag_GM = 2,
	ChatTag_SPCM = 3,
	ChatTag_STAFF = 4,
	ChatTag_MAX = 5,
};
enum etClanRank
{
	Leader = 0,
	Officer = 1,
	Member = 2,
	etClanRank_MAX = 3,
};
enum etContactType
{
	ContactType_None = 0,
	ContactType_Ambient = 1,
	ContactType_Fixer = 2,
	ContactType_MissionProvider = 3,
	ContactType_Organisation = 4,
	ContactType_TurfContact = 5,
	ContactType_MAX = 6,
};
enum etContextSensitiveActionBase
{
	CSA_None = 0,
	CSA_AntiGraffiti = 1,
	CSA_Arrest = 2,
	CSA_Arrested = 3,
	CSA_AudioDisplayPoint = 4,
	CSA_BuildingBreakIn = 5,
	CSA_BuildingForcedEntry = 6,
	CSA_CargoInteraction = 7,
	CSA_CrimeSceneInvestigation = 8,
	CSA_CrimeSceneInvestigation_Vehicle = 9,
	CSA_DefuseBomb = 10,
	CSA_DefuseVehicleBomb = 11,
	CSA_DeployAmmoCarrier = 12,
	CSA_DropTaskItem = 13,
	CSA_EnterVehicle = 14,
	CSA_Graffiti = 15,
	CSA_GraffitiDisplayPoint_Billboard = 16,
	CSA_GraffitiDisplayPoint_Default = 17,
	CSA_GraffitiDisplayPoint_Targeted = 18,
	CSA_Hacking = 19,
	CSA_Hacking_Vehicle = 20,
	CSA_Hotwire = 21,
	CSA_InventoryAccess = 22,
	CSA_MugPlayer = 23,
	CSA_MugPlayerInvoked = 24,
	CSA_NPCForcibleArrest = 25,
	CSA_NPCMugging = 26,
	CSA_NPCStopSearch = 27,
	CSA_OpenAmmoPurchase = 28,
	CSA_OpenGarage = 29,
	CSA_OpenGiftBox = 30,
	CSA_OpenInventory = 31,
	CSA_OpenInventory_Legacy = 32,
	CSA_OpenLocker = 33,
	CSA_OpenMailBox = 34,
	CSA_OpenMarketPlace = 35,
	CSA_OpenMusicStudio = 36,
	CSA_OpenPersona = 37,
	CSA_OpenSymbolDesigner = 38,
	CSA_OpenWardrobe = 39,
	CSA_PassTaskItem = 40,
	CSA_PassTaskItemToCargoHold = 41,
	CSA_PickupTaskItem = 42,
	CSA_PickupTaskItem_Small = 43,
	CSA_PlantBomb = 44,
	CSA_PlantVehicleBomb = 45,
	CSA_PlayerFound = 46,
	CSA_PlayerInteractionMenu = 47,
	CSA_RCE_Door = 48,
	CSA_RCE_Fence = 49,
	CSA_RCE_Ladder = 50,
	CSA_ReceiveTaskItem = 51,
	CSA_ReceiveTaskItemFromCargoHold = 52,
	CSA_Rescue = 53,
	CSA_Rescued = 54,
	CSA_ResupplyAmmo = 55,
	CSA_ResupplyAmmo_Legacy = 56,
	CSA_Sabotage = 57,
	CSA_Sabotage_Vehicle = 58,
	CSA_SetAlight = 59,
	CSA_SetVehicleAlight = 60,
	CSA_SpawnVehicle = 61,
	CSA_SpawnVehicle_Legacy = 62,
	CSA_SpeakToContact = 63,
	CSA_StatueDisplayPoint = 64,
	CSA_VehicleBreakIn = 65,
	CSA_MAX = 66,
};
enum etCrimeTargetCategory
{
	CrimeTargetCategory_NPC = 0,
	CrimeTargetCategory_Vehicle = 1,
	CrimeTargetCategory_Environmental = 2,
	CrimeTargetCategory_Prop = 3,
	CrimeTargetCategory_Max = 4,
};
enum etCrimeTargetEnvironmental
{
	CrimeTargetEnvironmental_RamRaid = 0,
	CrimeTargetEnvironmental_Arson = 1,
	CrimeTargetEnvironmental_PickupPoint = 2,
	CrimeTargetEnvironmental_Graffiti = 3,
	CrimeTargetEnvironmental_MAX = 4,
};
enum etCrimeTargetType
{
	CrimeTargetType_BrownCollarWorker = 0,
	CrimeTargetType_Businessman = 1,
	CrimeTargetType_BusinessmanGoingHome = 2,
	CrimeTargetType_Clubber = 3,
	CrimeTargetType_ClubberGoingHome = 4,
	CrimeTargetType_CorporateBusinessman = 5,
	CrimeTargetType_GenericEntertainment = 6,
	CrimeTargetType_GenericHungry = 7,
	CrimeTargetType_GenericShopper = 8,
	CrimeTargetType_GenericShopperGoingHome = 9,
	CrimeTargetType_Vehicle = 10,
	CrimeTargetType_FamilyCar = 11,
	CrimeTargetType_SportsCar = 12,
	CrimeTargetType_RamRaidTarget = 13,
	CrimeTargetType_ArsonTarget = 14,
	CrimeTargetType_PickupPoint = 15,
	CrimeTargetType_GraffitiTarget = 16,
	CrimeTargetType_PropTarget = 17,
	CrimeTargetType_Max = 18,
};
enum etCrimeTargetZone
{
	CrimeTargetZone_Vandalism = 0,
	CrimeTargetZone_Mugging = 1,
	CrimeTargetZone_VehicleTheft = 2,
	CrimeTargetZone_Assassination = 3,
	CrimeTargetZone_HitAndRun = 4,
	CrimeTargetZone_Max = 5,
};
enum etCrimeType
{
	CrimeType_Assault = 0,
	CrimeType_Mugging = 1,
	CrimeType_Kidnapping = 2,
	CrimeType_VehicleTheft = 3,
	CrimeType_HitAndRun = 4,
	CrimeType_Assassination = 5,
	CrimeType_RamRaid = 6,
	CrimeType_Arson = 7,
	CrimeType_PickUp = 8,
	CrimeType_Vandalism = 9,
	CrimeType_Graffiti = 10,
	CrimeType_TestAttackProp = 11,
	CrimeType_Max = 12,
};
enum etCSA_IATState
{
	CSA_IATState_None = 0,
	CSA_IATState_APBPawn_AmmoCarrierDeployed = 1,
	CSA_IATState_APBPawn_Arrested = 2,
	CSA_IATState_APBPawn_Default = 3,
	CSA_IATState_APBPawn_Unconscious = 4,
	CSA_IATState_APBVehicle_ArsonTarget = 5,
	CSA_IATState_APBVehicle_BombTarget = 6,
	CSA_IATState_APBVehicle_Default = 7,
	CSA_IATState_AmmoDepot_Default = 8,
	CSA_IATState_AmmoShopFront_Default = 9,
	CSA_IATState_AmmoVendingMachine_Default = 10,
	CSA_IATState_AudioDisplayPoint_Default = 11,
	CSA_IATState_Contact_Default = 12,
	CSA_IATState_GraffitiCrimeTarget_Default = 13,
	CSA_IATState_GrafittiDisplayPoint_Default = 14,
	CSA_IATState_MailBox_Default = 15,
	CSA_IATState_NPC_MuggingTarget = 16,
	CSA_IATState_NPC_NoUseAllowed = 17,
	CSA_IATState_NPC_OpenWorldTarget = 18,
	CSA_IATState_PlayerVehicleDisplayPoint_Default = 19,
	CSA_IATState_PlayerVehicleSpawnZone_Default = 20,
	CSA_IATState_Prop_ArsonTarget = 21,
	CSA_IATState_Prop_BombPlanted = 22,
	CSA_IATState_Prop_BombTarget = 23,
	CSA_IATState_Prop_BurglaryTarget = 24,
	CSA_IATState_Prop_CSITarget = 25,
	CSA_IATState_Prop_Default = 26,
	CSA_IATState_Prop_ForcedEntryTarget = 27,
	CSA_IATState_Prop_HackingTarget = 28,
	CSA_IATState_Prop_OpenWorldTarget = 29,
	CSA_IATState_Prop_SabotageTarget = 30,
	CSA_IATState_RouteControlElement_Default = 31,
	CSA_IATState_RouteControlElement_Door = 32,
	CSA_IATState_RouteControlElement_Fence = 33,
	CSA_IATState_RouteControlElement_Ladder = 34,
	CSA_IATState_StatueDisplayPoint_Default = 35,
	CSA_IATState_TaskItemPickup_GiftBox = 36,
	CSA_IATState_TaskItemPickup_Normal = 37,
	CSA_IATState_TaskItemPickup_Slow = 38,
	CSA_IATState_TaskItemPickup_Small = 39,
	CSA_IATState_UIInteractionPoint_Default = 40,
	CSA_IATState_MAX = 41,
};
enum etCSAAlignmentType
{
	CSA_AT_None = 0,
	CSA_AT_Rotate_ActorLocation = 1,
	CSA_AT_Rotate_ActorNormal = 2,
	CSA_AT_MAX = 3,
};
enum etCSAAnimEvent
{
	CSAAnimEvent_None = 0,
	CSAAnimEvent_EndInteraction = 1,
	CSAAnimEvent_MAX = 2,
};
enum etCSAAnimType
{
	CSAAnimType_None = 0,
	CSAAnimType_1Phase = 1,
	CSAAnimType_1Phase_RCE = 2,
	CSAAnimType_1Phase_TaskItem = 3,
	CSAAnimType_3Phase = 4,
	CSAAnimType_MAX = 5,
};
enum etCSAAutoRouteType
{
	CSA_AutoRouteType_None = 0,
	CSA_AutoRouteType_Offset = 1,
	CSA_AutoRouteType_Socket = 2,
	CSA_AutoRouteType_MAX = 3,
};
enum etCSAEndPoint
{
	CSAEndPoint_None = 0,
	CSAEndPoint_Outro_Cosmetic = 1,
	CSAEndPoint_Outro_Logical_AnimDuration = 2,
	CSAEndPoint_Outro_Logical_AnimNotify = 3,
	CSAEndPoint_Outro_Logical_Timed = 4,
	CSAEndPoint_MAX = 5,
};
enum etCSAInputType
{
	CSA_InputType_None = 0,
	CSA_InputType_PressAndHold = 1,
	CSA_InputType_Toggle = 2,
	CSA_InputType_MAX = 3,
};
enum etCSALineCheckType
{
	CSA_LCT_None = 0,
	CSA_LCT_Blocking = 1,
	CSA_LCT_Static = 2,
	CSA_LCT_MAX = 3,
};
enum etCSAState
{
	CSAState_None = 0,
	CSAState_Cancel = 1,
	CSAState_InProgress = 2,
	CSAState_Success = 3,
	CSAState_MAX = 4,
};
enum etCSAType
{
	CSAType_None = 0,
	CSAType_Action = 1,
	CSAType_UseEquipment = 2,
	CSAType_Invoked = 3,
	CSAType_Ammo = 4,
	CSAType_MAX = 5,
};
enum etCustomisedAssetPriority
{
	CAMPriority_SelfCharacter = 0,
	CAMPriority_SelfVehicle = 1,
	CAMPriority_Groupmate = 2,
	CAMPriority_Friend = 3,
	CAMPriority_SameMission = 4,
	CAMPriority_Threat11 = 5,
	CAMPriority_Threat13 = 6,
	CAMPriority_SideMate = 7,
	CAMPriority_MAX = 8,
};
enum etDeployedUsableArray
{
	DeployedUsableArray_None = 0,
	DeployedUsableArray_Character = 1,
	DeployedUsableArray_Vehicle = 2,
	DeployedUsableArray_MAX = 3,
};
enum etDifficultyRating
{
	Difficulty_VeryEasy = 0,
	Difficulty_Easy = 1,
	Difficulty_Medium = 2,
	Difficulty_Hard = 3,
	Difficulty_VeryHard = 4,
	Difficulty_MAX = 5,
};
enum etDirection
{
	Direction_None = 0,
	Direction_Left = 1,
	Direction_Right = 2,
	Direction_MAX = 3,
};
enum etDisplayPointActivationType
{
	DisplayPointActivationType_None = 0,
	DisplayPointActivationType_Free = 1,
	DisplayPointActivationType_Purchasable = 2,
	DisplayPointActivationType_Winnable = 3,
	DisplayPointActivationType_MAX = 4,
};
enum etDisplayPointType
{
	DisplayPointType_None = 0,
	DisplayPointType_Audio = 1,
	DisplayPointType_Graffiti = 2,
	DisplayPointType_Statue = 3,
	DisplayPointType_Vehicle = 4,
	DisplayPointType_MAX = 5,
};
enum etEncumbrance
{
	Encumbrance_None = 0,
	Encumbrance_Small_No_Crouch_Move = 1,
	Encumbrance_Small_No_Crouch = 2,
	Encumbrance_Small_No_Jump = 3,
	Encumbrance_Small_No_Crouch_Move_Or_Jump = 4,
	Encumbrance_Small_No_Crouch_Or_Jump = 5,
	Encumbrance_Medium = 6,
	Encumbrance_Medium_No_Crouch_Move = 7,
	Encumbrance_Medium_No_Crouch = 8,
	Encumbrance_Medium_No_Jump = 9,
	Encumbrance_Medium_No_Crouch_Move_Or_Jump = 10,
	Encumbrance_Medium_No_Crouch_Or_Jump = 11,
	Encumbrance_Large = 12,
	Encumbrance_Large_No_Crouch_Move = 13,
	Encumbrance_Large_No_Crouch = 14,
	Encumbrance_Large_No_Jump = 15,
	Encumbrance_Large_No_Crouch_Move_Or_Jump = 16,
	Encumbrance_All = 17,
	Encumbrance_Small_No_Sprint = 18,
	Encumbrance_MAX = 19,
};
enum etErrorCode
{
	ERROR_OK = 0,
	ERROR_ASYNCHRONOUS = 1,
	ERROR_ABANDON_TIMER_ACTIVE = 2,
	ERROR_ALREADY_HAS_MISSION = 3,
	ERROR_ALREADY_INTERACTING = 4,
	ERROR_AWAITING_REPLICATION = 5,
	ERROR_BAD_SDD_DATA = 6,
	ERROR_CANT_EQUIP_ITEM_IN_VEHICLE = 7,
	ERROR_CANT_UNDEPLOY_ITEM_IN_VEHICLE = 8,
	ERROR_CONTACT_LOCKED = 9,
	ERROR_CONTACT_NOT_MISSION_PROVIDER = 10,
	ERROR_CONTACT_NOT_TUTOR = 11,
	ERROR_CONTACT_NOT_FOUND_IN_LEVEL = 12,
	ERROR_CONTROLLER_HAS_NO_PAWN = 13,
	ERROR_CONTROLLER_HAS_NO_SCORER = 14,
	ERROR_COULD_NOT_DEPLOY_ITEM = 15,
	ERROR_DECLINE_TIMER_ACTIVE = 16,
	ERROR_FEE_TOO_SMALL = 17,
	ERROR_GROUP_TOO_LARGE = 18,
	ERROR_GROUP_TOO_SMALL = 19,
	ERROR_ILLEGAL_CATEGORY = 20,
	ERROR_INSIDE_VEHICLE = 21,
	ERROR_OUTSIDE_AMMO_ZONE = 22,
	ERROR_INSUFFICIENT_CASH = 23,
	ERROR_INSUFFICIENT_MILESTONE = 24,
	ERROR_INSUFFICIENT_RATING = 25,
	ERROR_INSUFFICIENT_ROLE = 26,
	ERROR_INVALID_CONTACT = 27,
	ERROR_INVALID_CONTROLLER = 28,
	ERROR_INVALID_CREATOR = 29,
	ERROR_INVALID_DEPLOYMENT_SLOT = 30,
	ERROR_INVALID_DISPLAY_POINT_TYPE = 31,
	ERROR_INVALID_DISTRICT = 32,
	ERROR_INVALID_DURATION = 33,
	ERROR_INVALID_FACTION = 34,
	ERROR_INVALID_FNMOD = 35,
	ERROR_INVALID_FNMOD_SLOT = 36,
	ERROR_INVALID_FNMOD_SLOT_NOT_VACANT = 37,
	ERROR_INVALID_FNMOD_TYPE = 38,
	ERROR_INVALID_INVENTORY_SLOT = 39,
	ERROR_INVALID_ITEM_NOT_CUSTOMISABLE = 40,
	ERROR_INVALID_ITEM_TYPE = 41,
	ERROR_INVALID_LOCOMOTION_STATE = 42,
	ERROR_INVALID_METADATA_FILTER = 43,
	ERROR_INVALID_MISSION = 44,
	ERROR_INVALID_PARAM = 45,
	ERROR_INVALID_QUANTITY = 46,
	ERROR_INVALID_SEX = 47,
	ERROR_INVALID_TIME_OF_DAY = 48,
	ERROR_INVENTORY_LOCKED_FROM_TRANSACTION = 49,
	ERROR_DISALLOW_HEAT_LEVEL = 50,
	ERROR_INVALID_USABLE_SLOT = 51,
	ERROR_INVENTORY_TABLE_FULL = 52,
	ERROR_ITEM_DOESNT_NEED_REFURBISHED = 53,
	ERROR_ITEM_IS_DEPLOYED = 54,
	ERROR_ITEM_IS_STACKED = 55,
	ERROR_ITEM_IS_TIME_LIMITED = 56,
	ERROR_ITEM_NOT_ACTIVE = 57,
	ERROR_ITEM_NOT_AVAILABLE = 58,
	ERROR_ITEM_NOT_BOUND = 59,
	ERROR_ITEM_NOT_DEPLOYED = 60,
	ERROR_ITEM_NOT_FOR_SALE = 61,
	ERROR_ITEM_NOT_FOUND = 62,
	ERROR_ITEM_NOT_PAID_FOR = 63,
	ERROR_ITEM_NOT_TRADEABLE = 64,
	ERROR_ITEM_NOT_REMOVABLE = 65,
	ERROR_ITEM_NOT_UNLOCKED = 66,
	ERROR_LEADER_ABSENT = 67,
	ERROR_MISSION_ACTIVE = 68,
	ERROR_NOT_CLIENT_FUNCTION = 69,
	ERROR_NOT_HOSTED_MODE = 70,
	ERROR_NOT_LEADER = 71,
	ERROR_NO_ITEMS_IN_PACKAGE = 72,
	ERROR_NO_PLEDGED_CONTACT = 73,
	ERROR_NO_VENDOR_CONTACT = 74,
	ERROR_PLAYER_DIDNT_CREATE_ITEM = 75,
	ERROR_SLOT_IN_USE = 76,
	ERROR_STACKING_SLOT_UNAVAILABLE = 77,
	ERROR_STRING_TOO_LONG = 78,
	ERROR_TIME_TOO_EARLY = 79,
	ERROR_TIME_TOO_LATE = 80,
	ERROR_KNOWN_TRANSACTION_FAILURE = 81,
	ERROR_UNKNOWN_TRANSACTION_FAILURE = 82,
	ERROR_UNKNOWN_CATEGORY = 83,
	ERROR_UNKNOWN_COMMAND = 84,
	ERROR_UNKNOWN_DISPLAY_POINT = 85,
	ERROR_USABLE_ACTIVE = 86,
	ERROR_USABLE_INACTIVE = 87,
	ERROR_USABLE_AFFECTED_ITEM_NOT_DEPLOYED = 88,
	ERROR_USABLE_FNMOD_UNAVAILABLE = 89,
	ERROR_USABLE_GLOBAL_COOLDOWN_TIMER_ACTIVE = 90,
	ERROR_USABLE_REUSE_GROUP_MISSION_CHECK_FAILED = 91,
	ERROR_USABLE_REUSE_GROUP_TIMER_ACTIVE = 92,
	ERROR_XML_FAILURE = 93,
	ERROR_LAST_UNDERWEAR = 94,
	ERROR_USABLE_PLAYER_IN_VEHICLE = 95,
	ERROR_INVALID_CLAN = 96,
	ERROR_USABLE_NOT_DRIVING_VEHICLE = 97,
	ERROR_USABLE_STACK_LIMIT = 98,
	ERROR_INVENTORY_FULL_REWARD = 99,
	ERROR_ITEM_CREATE_STACK_COMBINED = 100,
	ERROR_FEATURE_UNAVAILABLE = 101,
	ERROR_WEAPON_DISABLED = 102,
	ERROR_MAX = 103,
};
enum etFacialHairRandomGeneration
{
	FacialHairRandomGeneration_ChanceOfFacialHair = 0,
	FacialHairRandomGeneration_ChanceOfBodilyHair = 1,
	FacialHairRandomGeneration_MAX = 2,
};
enum etFaction
{
	kFACTION_None = 0,
	kFACTION_Enforcer = 1,
	kFACTION_Criminal = 2,
	kFACTION_Both = 3,
	kFACTION_MAX = 4,
};
enum etFeedbackMessage
{
	FeedbackQuestion_None = 0,
	FeedbackQuestion_Standard = 1,
	FeedbackQuestion_Special = 2,
	FeedbackQuestion_BalancedMatch = 3,
	FeedbackQuestion_NotReadyNag = 4,
	FeedbackQuestion_MAX = 5,
};
enum etFireOffset
{
	FireOffset_Normal = 0,
	FireOffset_VehicleLeft = 1,
	FireOffset_VehicleRight = 2,
	FireOffset_Grenade = 3,
	FireOffset_LeanTowardScreenCentre = 4,
	FireOffset_MAX = 5,
};
enum etFormulaOperation
{
	FormulaOperation_None = 0,
	FormulaOperation_Add = 1,
	FormulaOperation_Divide = 2,
	FormulaOperation_Multiply = 3,
	FormulaOperation_Subtract = 4,
	FormulaOperation_MAX = 5,
};
enum etFXMaterialImpact
{
	FXMI_Default = 0,
	FXMI_Concrete = 1,
	FXMI_MetalVehicle = 2,
	FXMI_Metal = 3,
	FXMI_Flesh = 4,
	FXMI_Wood = 5,
	FXMI_Asphalt = 6,
	FXMI_Brick = 7,
	FXMI_Foliage = 8,
	FXMI_Glass = 9,
	FXMI_Stone = 10,
	FXMI_Earth = 11,
	FXMI_Cloth = 12,
	FXMI_Water = 13,
	FXMI_Sand = 14,
	FXMI_ShallowWater = 15,
	FXMI_MAX = 16,
};
enum etGameplayEventCategory
{
	GameplayEventCategory_None = 0,
	GameplayEventCategory_Abandon_Match = 1,
	GameplayEventCategory_Abandon_Match_Fail = 2,
	GameplayEventCategory_Always_Witnessable = 3,
	GameplayEventCategory_AmmoZone_Begin = 4,
	GameplayEventCategory_AmmoZone_BuySomeAmmo = 5,
	GameplayEventCategory_AmmoZone_Deactivate = 6,
	GameplayEventCategory_AmmoZone_PurchasedAmmo_Manually = 7,
	GameplayEventCategory_Ammo_FromLocker = 8,
	GameplayEventCategory_Arrest_Player = 9,
	GameplayEventCategory_ArrestedBy_Enforcer = 10,
	GameplayEventCategory_Attacked_InvulnerablePlayer = 11,
	GameplayEventCategory_Auction_Create = 12,
	GameplayEventCategory_AutoKick_Inactivity = 13,
	GameplayEventCategory_AutoKick_SuicidesWarning = 14,
	GameplayEventCategory_AutoKick_TeamKillsWarning = 15,
	GameplayEventCategory_Autokill_AtUnsafeHeight = 16,
	GameplayEventCategory_Autokill_InsideGeometry = 17,
	GameplayEventCategory_Become_Group_Leader = 18,
	GameplayEventCategory_Become_Side_Leader = 19,
	GameplayEventCategory_Become_Side_VIP = 20,
	GameplayEventCategory_CSA_Begin = 21,
	GameplayEventCategory_CSA_End = 22,
	GameplayEventCategory_CallFor_Backup = 23,
	GameplayEventCategory_CashPool_LargeStash = 24,
	GameplayEventCategory_Cash_Received = 25,
	GameplayEventCategory_Cash_Received_PremiumBonus = 26,
	GameplayEventCategory_Chaos_Score = 27,
	GameplayEventCategory_Clan_Member = 28,
	GameplayEventCategory_Contact_Error = 29,
	GameplayEventCategory_Contact_LevelUp = 30,
	GameplayEventCategory_Contact_Pledge = 31,
	GameplayEventCategory_Contact_Referal = 32,
	GameplayEventCategory_ContactsComplete = 33,
	GameplayEventCategory_Customisation_ItemUploaded = 34,
	GameplayEventCategory_CustomiseStats_Broker = 35,
	GameplayEventCategory_CustomiseStats_FashionMogul = 36,
	GameplayEventCategory_CustomiseStats_ImageDesign = 37,
	GameplayEventCategory_CustomiseStats_Profiteer = 38,
	GameplayEventCategory_CustomiseStats_WeaponSmith_FNModsApplied = 39,
	GameplayEventCategory_DailyActivityAccept = 40,
	GameplayEventCategory_DailyActivityComplete = 41,
	GameplayEventCategory_Damage_Player = 42,
	GameplayEventCategory_Damage_Prop = 43,
	GameplayEventCategory_Damage_Vehicle = 44,
	GameplayEventCategory_Damaged_TaskTarget_ObstructionDamage = 45,
	GameplayEventCategory_Death1 = 46,
	GameplayEventCategory_Death2 = 47,
	GameplayEventCategory_DeathContagion = 48,
	GameplayEventCategory_DeliverItem_CashPool = 49,
	GameplayEventCategory_DeliverItem_Checkpoint = 50,
	GameplayEventCategory_DeliverItem_Mission = 51,
	GameplayEventCategory_DeliverItem_OpenWorld = 52,
	GameplayEventCategory_DeliverItem_OpenWorld_Fail = 53,
	GameplayEventCategory_DeliverVehicle_Fail = 54,
	GameplayEventCategory_DeliverVehicle_OpenWorld = 55,
	GameplayEventCategory_DeployAmmoCarrier = 56,
	GameplayEventCategory_Destroy_Prop = 57,
	GameplayEventCategory_Destroy_Vehicle = 58,
	GameplayEventCategory_DisplayPoint_Taken = 59,
	GameplayEventCategory_Display_Graffiti_Fail = 60,
	GameplayEventCategory_DistrictEnter = 61,
	GameplayEventCategory_DistrictLeave = 62,
	GameplayEventCategory_Drive_StolenVehicle = 63,
	GameplayEventCategory_Drive_Vehicle = 64,
	GameplayEventCategory_DroppedWeapon_PlayerKill = 65,
	GameplayEventCategory_Earned_Medal = 66,
	GameplayEventCategory_ElectiveSpawn_Unavailable = 67,
	GameplayEventCategory_ElectiveSpawn_VehicleSpawn = 68,
	GameplayEventCategory_Ended_ArrestStreak = 69,
	GameplayEventCategory_Ended_KillStreak = 70,
	GameplayEventCategory_Ended_Mission = 71,
	GameplayEventCategory_Ended_Mission2 = 72,
	GameplayEventCategory_Ended_MissionType = 73,
	GameplayEventCategory_Enter_Resupply_Zone = 74,
	GameplayEventCategory_GiftBox_Opened = 75,
	GameplayEventCategory_Grenade_Cook_Tutorial = 76,
	GameplayEventCategory_Grenade_Throw_Tutorial = 77,
	GameplayEventCategory_GroupWaypointSpam = 78,
	GameplayEventCategory_Health_Regenerated = 79,
	GameplayEventCategory_Heat_ChangeLevel = 80,
	GameplayEventCategory_Hijack_LCVehicle = 81,
	GameplayEventCategory_Hotwire_Vehicle = 82,
	GameplayEventCategory_ItemOperation_Fail = 83,
	GameplayEventCategory_JoinGroup = 84,
	GameplayEventCategory_JoinGroup_LeaderInDifferentMission = 85,
	GameplayEventCategory_KillAssist_Player = 86,
	GameplayEventCategory_KillStats_AgainstTaskItemCarriers = 87,
	GameplayEventCategory_Kill_DriverAssist = 88,
	GameplayEventCategory_Kill_EnemyTeamAnnihilation = 89,
	GameplayEventCategory_Kill_FromBehind = 90,
	GameplayEventCategory_Kill_GroupInVehicle = 91,
	GameplayEventCategory_Kill_Group_LeaningOutOfVehicle = 92,
	GameplayEventCategory_Kill_Pedestrian = 93,
	GameplayEventCategory_Kill_Player = 94,
	GameplayEventCategory_Kill_Player_InVehicleWithGrenade = 95,
	GameplayEventCategory_Kill_Player_LeaningOutOfVehicle = 96,
	GameplayEventCategory_Kill_Player_PickedUpWeapon = 97,
	GameplayEventCategory_Kill_Player_TrackedWeaponType = 98,
	GameplayEventCategory_Kill_PrimarySecondary = 99,
	GameplayEventCategory_Kill_WhileDriving = 100,
	GameplayEventCategory_Knocked_Out = 101,
	GameplayEventCategory_Knocked_Player_Out = 102,
	GameplayEventCategory_MailBox_Begin = 103,
	GameplayEventCategory_MailBox_RetrieveItemAttachment = 104,
	GameplayEventCategory_Minigame_BlockFDM_DisablePvP = 105,
	GameplayEventCategory_Minigame_BlockFDM_EnterBlock = 106,
	GameplayEventCategory_Minigame_BlockFDM_ExitBlock = 107,
	GameplayEventCategory_Minigame_Complete = 108,
	GameplayEventCategory_Minigame_Ending = 109,
	GameplayEventCategory_Minigame_GoldenGun_DropOff = 110,
	GameplayEventCategory_Minigame_GoldenGun_Pickup = 111,
	GameplayEventCategory_Minigame_GoldenGun_TurnIn = 112,
	GameplayEventCategory_Minigame_GunGame_CompletionScore = 113,
	GameplayEventCategory_Minigame_GunGame_ReachedRank = 114,
	GameplayEventCategory_Minigame_GunGame_ReachedScoreLimit = 115,
	GameplayEventCategory_Minigame_Infection_EnteredEndArea = 116,
	GameplayEventCategory_Minigame_Infection_FirstLeaderSelected = 117,
	GameplayEventCategory_Minigame_Infection_Infected_Joined = 118,
	GameplayEventCategory_Minigame_Infection_Infected_Majority = 119,
	GameplayEventCategory_Minigame_Infection_Item_Count_Gain = 120,
	GameplayEventCategory_Minigame_Infection_Item_Count_Lost = 121,
	GameplayEventCategory_Minigame_Infection_LeaderDethroned = 122,
	GameplayEventCategory_Minigame_Infection_LeftEndArea = 123,
	GameplayEventCategory_Minigame_Infection_Ping = 124,
	GameplayEventCategory_Minigame_Infection_PlayerConverted = 125,
	GameplayEventCategory_Minigame_Infection_PlayerConverted_Converter = 126,
	GameplayEventCategory_Minigame_Infection_PlayerConverted_Leader = 127,
	GameplayEventCategory_Minigame_Infection_PlayerEndedInArea = 128,
	GameplayEventCategory_Minigame_Infection_Survivor_Added = 129,
	GameplayEventCategory_Minigame_Infection_Survivor_Survived = 130,
	GameplayEventCategory_Minigame_Kills = 131,
	GameplayEventCategory_Minigame_Mugging_Delivery = 132,
	GameplayEventCategory_Minigame_Mugging_HeldItemsAtEnd = 133,
	GameplayEventCategory_Minigame_Mugging_Invulnerability_Denied = 134,
	GameplayEventCategory_Minigame_Mugging_MuggedNPC = 135,
	GameplayEventCategory_Minigame_Mugging_NPC_Kill = 136,
	GameplayEventCategory_Minigame_Mugging_NoDrops_GainedItems = 137,
	GameplayEventCategory_Minigame_Mugging_NoDrops_LostItems = 138,
	GameplayEventCategory_Minigame_Mugging_Pickup = 139,
	GameplayEventCategory_Minigame_Mugging_PlayerMug_Muggee = 140,
	GameplayEventCategory_Minigame_Mugging_PlayerMug_Mugger = 141,
	GameplayEventCategory_Minigame_Player_Joined = 142,
	GameplayEventCategory_Minigame_Player_Left = 143,
	GameplayEventCategory_Minigame_Protagonist_Assigned = 144,
	GameplayEventCategory_Minigame_Started = 145,
	GameplayEventCategory_Minigame_VIP_Hunt_InProgress = 146,
	GameplayEventCategory_Minigame_VIP_Hunt_Started = 147,
	GameplayEventCategory_Minigame_WaitingForPlayers = 148,
	GameplayEventCategory_Mission_AwardMVP = 149,
	GameplayEventCategory_Mission_BackupGroupArrived = 150,
	GameplayEventCategory_Mission_BackupPlayerArrived = 151,
	GameplayEventCategory_Mission_CashPaid = 152,
	GameplayEventCategory_Mission_DispatchedVsGroup = 153,
	GameplayEventCategory_Mission_DispatchedVsPlayer = 154,
	GameplayEventCategory_Mission_Ended_ProvingGrounds = 155,
	GameplayEventCategory_Mission_Ended_Tutorial = 156,
	GameplayEventCategory_Mission_Immunity_Start = 157,
	GameplayEventCategory_Mission_ObjectiveCompleted = 158,
	GameplayEventCategory_Mission_ObjectiveCompleted_Tutorial = 159,
	GameplayEventCategory_Mission_Offer = 160,
	GameplayEventCategory_Mission_OppositionAdded = 161,
	GameplayEventCategory_Mission_OppositionAssigned = 162,
	GameplayEventCategory_Mission_OppositionPlayerRemoved = 163,
	GameplayEventCategory_Mission_OvertimeStarted = 164,
	GameplayEventCategory_Mission_OwnerGroupAdded = 165,
	GameplayEventCategory_Mission_OwnerPlayerAdded = 166,
	GameplayEventCategory_Mission_OwnerPlayerRemoved = 167,
	GameplayEventCategory_Mission_Stage = 168,
	GameplayEventCategory_Mission_TaskTargetCompleted = 169,
	GameplayEventCategory_ModeTimer = 170,
	GameplayEventCategory_Modification_Attached = 171,
	GameplayEventCategory_Modifier_Unapplied = 172,
	GameplayEventCategory_Mug_Pedestrian = 173,
	GameplayEventCategory_NotReadyNagMessage = 174,
	GameplayEventCategory_On_ArrestStreak = 175,
	GameplayEventCategory_On_KillStreak = 176,
	GameplayEventCategory_On_TakeoutStreak = 177,
	GameplayEventCategory_OpenWorldItem_Spawned = 178,
	GameplayEventCategory_Organisation_LevelUp = 179,
	GameplayEventCategory_OutOf_Bullets = 180,
	GameplayEventCategory_OutOf_Grenades = 181,
	GameplayEventCategory_OutOf_Projectiles = 182,
	GameplayEventCategory_Passenger_StolenVehicle = 183,
	GameplayEventCategory_PickedUpWeapon_ScavengedAmmo = 184,
	GameplayEventCategory_PlayerTaskTargetProtected = 185,
	GameplayEventCategory_Player_Aim_Tutorial = 186,
	GameplayEventCategory_Player_Camera_Switch_Tutorial = 187,
	GameplayEventCategory_Player_Crouch_Tutorial = 188,
	GameplayEventCategory_Player_Emote = 189,
	GameplayEventCategory_Player_Jump_Tutorial = 190,
	GameplayEventCategory_Player_Lean_Tutorial = 191,
	GameplayEventCategory_Player_OpenedMap_Tutorial = 192,
	GameplayEventCategory_ProvingGrounds_Challenge_MissionWarning = 193,
	GameplayEventCategory_ProvingGrounds_IncrementChallengeScore = 194,
	GameplayEventCategory_ProvingGrounds_QualifyForReward_Bronze = 195,
	GameplayEventCategory_ProvingGrounds_WaitingForMission = 196,
	GameplayEventCategory_RadarJam_Enemy = 197,
	GameplayEventCategory_RamRaidOrBust_OpenWorld = 198,
	GameplayEventCategory_Rating_Changed = 199,
	GameplayEventCategory_ReadyStateChanged_Group = 200,
	GameplayEventCategory_ReadyStateChanged_Player = 201,
	GameplayEventCategory_Receive_CashOnly_Reward = 202,
	GameplayEventCategory_Receive_Cash_TokenOnly_Reward = 203,
	GameplayEventCategory_Receive_Damage = 204,
	GameplayEventCategory_Receive_TokenOnly_Reward = 205,
	GameplayEventCategory_ReceivedHoldPointsScore = 206,
	GameplayEventCategory_RemovedFromGroup = 207,
	GameplayEventCategory_Repaired_Vehicle = 208,
	GameplayEventCategory_Rescue_Arrested_Player = 209,
	GameplayEventCategory_Rescued_By_Player = 210,
	GameplayEventCategory_Resupplied_AmmoClips = 211,
	GameplayEventCategory_Resupply_Fail = 212,
	GameplayEventCategory_Resupply_Fail_PickedUpWeapon = 213,
	GameplayEventCategory_RewardPackage_ConsumptionError = 214,
	GameplayEventCategory_Reward_NewMail = 215,
	GameplayEventCategory_Reward_RandomRewardGained = 216,
	GameplayEventCategory_Role_LevelUp = 217,
	GameplayEventCategory_Song_Produced = 218,
	GameplayEventCategory_SpawnInDistrict = 219,
	GameplayEventCategory_SpawnPlayer = 220,
	GameplayEventCategory_SprintedDistance = 221,
	GameplayEventCategory_Start_Mission = 222,
	GameplayEventCategory_StolenItem = 223,
	GameplayEventCategory_Tag_Enemy = 224,
	GameplayEventCategory_TaskItem_Spawned = 225,
	GameplayEventCategory_Task_Item_Delivered = 226,
	GameplayEventCategory_Task_Time_OneMinuteRemaining = 227,
	GameplayEventCategory_TeamLeadershipVote_Begin = 228,
	GameplayEventCategory_TeamLeadershipVote_End = 229,
	GameplayEventCategory_TestFire_Weapon = 230,
	GameplayEventCategory_Threat_Changed = 231,
	GameplayEventCategory_TutorialNodeComplete = 232,
	GameplayEventCategory_UseProp_Door = 233,
	GameplayEventCategory_UseProp_Fence = 234,
	GameplayEventCategory_UseProp_Ladder = 235,
	GameplayEventCategory_Vehicle_BeginRepair = 236,
	GameplayEventCategory_Vehicle_BrokenInto = 237,
	GameplayEventCategory_Vehicle_Cargo_Full = 238,
	GameplayEventCategory_Vehicle_Critical = 239,
	GameplayEventCategory_Vehicle_EndRepair = 240,
	GameplayEventCategory_Vehicle_EnterFail = 241,
	GameplayEventCategory_Vehicle_ReceiveDamage = 242,
	GameplayEventCategory_Vehicle_SpawnFail = 243,
	GameplayEventCategory_Vehicle_SpawnSuccess = 244,
	GameplayEventCategory_Vehicle_Unequipped = 245,
	GameplayEventCategory_Vendor_Item_Buy_Joker = 246,
	GameplayEventCategory_Weapon_Deployed = 247,
	GameplayEventCategory_Weapon_Empty_Magazine = 248,
	GameplayEventCategory_Weapon_Unequipped = 249,
	GameplayEventCategory_WinStreak_Mission = 250,
	GameplayEventCategory_Witness_Crime = 251,
	GameplayEventCategory_WitnessedBy_Enforcer = 252,
	GameplayEventCategory_WitnessedBy_NPC = 253,
	GameplayEventCategory_Won_Match = 254,
	GameplayEventCategory_MAX = 255,
};
enum etGameplayEventCategory2
{
	GameplayEventCategory2_None = 0,
	GameplayEventCategory2_DailyActivityAutoAssigned = 1,
	GameplayEventCategory2_FnMod_Disabled = 2,
	GameplayEventCategory2_Minigame_FindTarget_TargetFound = 3,
	GameplayEventCategory2_Minigame_Infection_KilledInfected = 4,
	GameplayEventCategory2_Minigame_Protagonist_Killed = 5,
	GameplayEventCategory2_Minigame_Teleported = 6,
	GameplayEventCategory2_Minigame_WeaponDrop_AliveScore = 7,
	GameplayEventCategory2_Minigame_WeaponDrop_FirstPickup = 8,
	GameplayEventCategory2_Minigame_WeaponDrop_HighScore = 9,
	GameplayEventCategory2_Minigame_WeaponDrop_HighScore_Death = 10,
	GameplayEventCategory2_Minigame_WeaponDrop_HighScore_Killed = 11,
	GameplayEventCategory2_Minigame_WeaponDrop_LowLives = 12,
	GameplayEventCategory2_Minigame_WeaponDrop_WeaponSpawned = 13,
	GameplayEventCategory2_Mission_ObjectiveProximity = 14,
	GameplayEventCategory2_TimeLimitedReward_Assigned = 15,
	GameplayEventCategory2_TimeLimitedReward_Released = 16,
	GameplayEventCategory2_Weapon_Disabled = 17,
	GameplayEventCategory2_MAX = 18,
};
enum etGameplayEventMutuallyExclusiveGroup
{
	GameplayEventMutuallyExclusiveGroup_NotExclusive = 0,
	GameplayEventMutuallyExclusiveGroup = 1,
	GameplayEventMutuallyExclusiveGroup = 2,
	GameplayEventMutuallyExclusiveGroup = 3,
	GameplayEventMutuallyExclusiveGroup = 4,
	GameplayEventMutuallyExclusiveGroup = 5,
	GameplayEventMutuallyExclusiveGroup = 6,
	GameplayEventMutuallyExclusiveGroup = 7,
	GameplayEventMutuallyExclusiveGroup = 8,
	GameplayEventMutuallyExclusiveGroup = 9,
	GameplayEventMutuallyExclusiveGroup = 10,
	GameplayEventMutuallyExclusiveGroup = 11,
	GameplayEventMutuallyExclusiveGroup = 12,
	GameplayEventMutuallyExclusiveGroup = 13,
	GameplayEventMutuallyExclusiveGroup = 14,
	GameplayEventMutuallyExclusiveGroup = 15,
	GameplayEventMutuallyExclusiveGroup_MAX = 16,
};
enum etGraffitiInteractionType
{
	GraffitiInteractionType_Default = 0,
	GraffitiInteractionType_TargetedClose = 1,
	GraffitiInteractionType_TargetedDistant = 2,
	GraffitiInteractionType_MAX = 3,
};
enum etHeatConstant
{
	HeatConstant_DecayDelay = 0,
	HeatConstant_DecayInterval = 1,
	HeatConstant_DecayRate = 2,
	HeatConstant_EquilibriumAmount = 3,
	HeatConstant_HeatAmountMax = 4,
	HeatConstant_PayForHeatPrice = 5,
	HeatConstant_UnDecayDelay = 6,
	HeatConstant_UnDecayInterval = 7,
	HeatConstant_UnDecayRate = 8,
	HeatConstant_MAX = 9,
};
enum etHeatFunctionality
{
	RulesetHeat_Off = 0,
	RulesetHeat_NoPvPUnlockToAllOpposingFaction = 1,
	RulesetHeat_Full = 2,
	RulesetHeat_MAX = 3,
};
enum etHostingConfigFileAccountPersistentId
{
	kConfigAccountPersistentNone = 0,
	kConfigAccountPersistent1 = 1,
	kConfigAccountPersistent2 = 2,
	kConfigAccountPersistent3 = 3,
	kConfigAccountPersistent4 = 4,
	kConfigAccountPersistent5 = 5,
	etHostingConfigFileAccountPersistentId_MAX = 6,
};
enum etHostingConfigFileCharacterPersistentId
{
	kConfigCharacterPersistentNone = 0,
	kConfigCharacterPersistent1 = 1,
	kConfigCharacterPersistent2 = 2,
	kConfigCharacterPersistent3 = 3,
	kConfigCharacterPersistent4 = 4,
	kConfigCharacterPersistent5 = 5,
	etHostingConfigFileCharacterPersistentId_MAX = 6,
};
enum etHUDCeremonyMsgType
{
	HUDCeremonyMsgType_None = 0,
	HUDCeremonyMsgType_Contact = 1,
	HUDCeremonyMsgType_Heat = 2,
	HUDCeremonyMsgType_Medal = 3,
	HUDCeremonyMsgType_Organisation = 4,
	HUDCeremonyMsgType_RedeemableReward = 5,
	HUDCeremonyMsgType_Role = 6,
	HUDCeremonyMsgType_Threat = 7,
	HUDCeremonyMsgType_WeaponPickup = 8,
	HUDCeremonyMsgType_MAX = 9,
};
enum etHUDConstant
{
	HUDConstant_ActionMessage_FadeOutTime = 0,
	HUDConstant_ActionMessage_MaxDisplayedMessages = 1,
	HUDConstant_ActionMessage_OpaqueDisplayTime = 2,
	HUDConstant_Ammo_MaxQuantity = 3,
	HUDConstant_Ammo_MinQuantity = 4,
	HUDConstant_ChatNotification_DisplayTime = 5,
	HUDConstant_ChatNotification_UpdateMessageDelay = 6,
	HUDConstant_Chat_MaxTabNum = 7,
	HUDConstant_CrimeList_BarDuration = 8,
	HUDConstant_DistrictMap_MouseOverSizeModifier = 9,
	HUDConstant_DistrictMessage_MaxMessages = 10,
	HUDConstant_HUDMarker_ArrowDrawDistance = 11,
	HUDConstant_HUDMarker_FlashRate = 12,
	HUDConstant_HUDMessage_SpawnHideTime = 13,
	HUDConstant_Heat_FlashDuration = 14,
	HUDConstant_Heat_FlashTriggerAmount = 15,
	HUDConstant_Heat_RateOfChangePerSecond = 16,
	HUDConstant_Hit_BloodFadeTime = 17,
	HUDConstant_Hit_DamageMax = 18,
	HUDConstant_Hit_DamageMin = 19,
	HUDConstant_Hit_NumIndicators = 20,
	HUDConstant_Hit_ThicknessMax = 21,
	HUDConstant_Hit_ThicknessMin = 22,
	HUDConstant_Hit_TimeMax = 23,
	HUDConstant_Hit_TimeMin = 24,
	HUDConstant_InfoBrowser_DistanceThreshold = 25,
	HUDConstant_InfoBrowser_RouteControl_EndFadeDistancePct = 26,
	HUDConstant_InfoBrowser_RouteControl_StartFadeDistancePct = 27,
	HUDConstant_Lobby_GametimeLowWarning = 28,
	HUDConstant_Locale_HudMsgSupressTime = 29,
	HUDConstant_Locale_PlayerHeight = 30,
	HUDConstant_Locale_PlayerRadius = 31,
	HUDConstant_LowHealthAndStamina_Blur = 32,
	HUDConstant_LowHealth_Begin = 33,
	HUDConstant_LowHealth_End = 34,
	HUDConstant_LowHealth_MaxOpacity = 35,
	HUDConstant_LowHealth_Power = 36,
	HUDConstant_LowStamina_Begin = 37,
	HUDConstant_LowStamina_End = 38,
	HUDConstant_LowStamina_MaxOpacity = 39,
	HUDConstant_LowStamina_Power = 40,
	HUDConstant_Mail_OpacityRateOfChange = 41,
	HUDConstant_MeshViewer_NightLevel = 42,
	HUDConstant_MeshViewer_TimeOfDay = 43,
	HUDConstant_MissionTimeLimit_AudioThreashold_Seconds = 44,
	HUDConstant_MissionTimeLimit_BonusDisplayTime = 45,
	HUDConstant_MissionTimeLimit_ChangeDisplayTime = 46,
	HUDConstant_MissionTimeLimit_TimeRunningOutDisplayTime = 47,
	HUDConstant_MissionValue_ChangeDisplayTime = 48,
	HUDConstant_MusicInfo_ShowDelay = 49,
	HUDConstant_MusicInfo_UpdateDelay = 50,
	HUDConstant_RadarRadius_InVehicle = 51,
	HUDConstant_RadarRadius_Min = 52,
	HUDConstant_RadarRadius_OnFoot = 53,
	HUDConstant_Radar_ContourDistance = 54,
	HUDConstant_Reticule_RateOfChange = 55,
	HUDConstant_Standing_RateOfChange = 56,
	HUDConstant_TaskMarker_BufferX = 57,
	HUDConstant_TaskMarker_BufferY = 58,
	HUDConstant_TaskMarker_DistanceMax = 59,
	HUDConstant_TaskMarker_DistanceMin = 60,
	HUDConstant_TaskMarker_Ellipse_ScreenHeightPercentage = 61,
	HUDConstant_TaskMarker_Ellipse_ScreenWidthPercentage = 62,
	HUDConstant_TaskMarker_OpacityMax = 63,
	HUDConstant_TaskMarker_OpacityRateOfChange = 64,
	HUDConstant_TaskMarker_OverlapOpacity = 65,
	HUDConstant_TaskMarker_ProjectionPadding = 66,
	HUDConstant_TaskMarker_ScreenSize = 67,
	HUDConstant_TutorialDistrictExitPromptDelay = 68,
	HUDConstant_Tutorials_ReticuleTime = 69,
	HUDConstant_VOIP_Active_LowMax = 70,
	HUDConstant_VOIP_Active_MediumMax = 71,
	HUDConstant_WSCI_DefaultMarkerSize = 72,
	HUDConstant_WSCI_FadeDistance = 73,
	HUDConstant_WSCI_MaxOpacity = 74,
	HUDConstant_WSCI_MaxScale = 75,
	HUDConstant_WSCI_MinScale = 76,
	HUDConstant_WSCI_OffsetZ = 77,
	HUDConstant_WSCI_OpacityRateOfChange = 78,
	HUDConstant_WSCI_OverlapOpacity1 = 79,
	HUDConstant_WSCI_OverlapOpacity2 = 80,
	HUDConstant_Waypoints_MaxNumGroup = 81,
	HUDConstant_Waypoints_MaxNumPersonal = 82,
	HUDConstant_WeaponInfo_DeltaOpacity = 83,
	HUDConstant_WeaponInfo_InCarNoEquipOpacity = 84,
	HUDConstant_WeaponInfo_InCarOpacity = 85,
	HUDConstant_ZoneNotifier_FlashRate = 86,
	HUDConstant_ZoneNotifier_SphereTestRadius = 87,
	HUDConstant_MAX = 88,
};
enum etHUDConstantBool
{
	HUDConstantBool_CharacterMarkers_ShowCarPassengers = 0,
	HUDConstantBool_CharacterMarkers_ShowThreat = 1,
	HUDConstantBool_Radar_FullModeOnly = 2,
	HUDConstantBool_Radar_ShowContours = 3,
	HUDConstantBool_Radar_ShowMap = 4,
	HUDConstantBool_Radar_ZoomEnabled = 5,
	HUDConstantBool_Reticule_ShowBlockedLineOfSight = 6,
	HUDConstantBool_ScoreboardOn = 7,
	HUDConstantBool_TargetInfo_On = 8,
	HUDConstantBool_TaskMarkers_OnEdge_Distance = 9,
	HUDConstantBool_TaskMarkers_OnEdge_ID = 10,
	HUDConstantBool_TaskMarkers_OnEdge_Objective = 11,
	HUDConstantBool_TaskMarkers_OnEdge_Text = 12,
	HUDConstantBool_MAX = 13,
};
enum etHUDInfoBrowser
{
	InfoBrowser_None = 0,
	InfoBrowser_Character = 1,
	InfoBrowser_Contact = 2,
	InfoBrowser_DisplayPoint = 3,
	InfoBrowser_MissionTarget = 4,
	InfoBrowser_OpenWorld = 5,
	InfoBrowser_RouteControl = 6,
	InfoBrowser_Vehicle = 7,
	InfoBrowser_Vending = 8,
	InfoBrowser_WeaponPickup = 9,
	InfoBrowser_MAX = 10,
};
enum etHUDMarkerCategory
{
	HUDMarkerCategory_None = 0,
	HUDMarkerCategory_RouteControl = 1,
	HUDMarkerCategory_HiddenDuringTask = 2,
	HUDMarkerCategory_VehiclePosition = 3,
	HUDMarkerCategory_VehicleSpawnBay = 4,
	HUDMarkerCategory_AmmoSupplyZone = 5,
	HUDMarkerCategory_GroupPlayer = 6,
	HUDMarkerCategory_OppositionPlayer = 7,
	HUDMarkerCategory_Vehicle = 8,
	HUDMarkerCategory_Task = 9,
	HUDMarkerCategory_SpawnZone = 10,
	HUDMarkerCategory_VehicleSpawnZone = 11,
	HUDMarkerCategory_VehicleRepairZone = 12,
	HUDMarkerCategory_CustomisationZone = 13,
	HUDMarkerCategory_MusicZone = 14,
	HUDMarkerCategory_MarketplaceZone = 15,
	HUDMarkerCategory_GMPlayer = 16,
	HUDMarkerCategory_DisplayPoint = 17,
	HUDMarkerCategory_Waypoint = 18,
	HUDMarkerCategory_OpenWorldDropOff = 19,
	HUDMarkerCategory_Fame = 20,
	HUDMarkerCategory_Misc = 21,
	HUDMarkerCategory_Minigame = 22,
	HUDMarkerCategory_MAX = 23,
};
enum etHUDMarkerState
{
	HUDMarkerState_Active = 0,
	HUDMarkerState_Flashing = 1,
	HUDMarkerState_Greyed = 2,
	HUDMarkerState_Inactive = 3,
	HUDMarkerState_Ping_Always = 4,
	HUDMarkerState_Ping_BoomBox = 5,
	HUDMarkerState_Ping_Crouched_Moving = 6,
	HUDMarkerState_Ping_Crouched_Static = 7,
	HUDMarkerState_Ping_FireDefault = 8,
	HUDMarkerState_Ping_Marksmanship = 9,
	HUDMarkerState_Ping_Running = 10,
	HUDMarkerState_Ping_Sprinting = 11,
	HUDMarkerState_Ping_Static = 12,
	HUDMarkerState_Ping_Vehicle_Moving = 13,
	HUDMarkerState_Ping_Vehicle_Static = 14,
	HUDMarkerState_Ping_Walking = 15,
	HUDMarkerState_Task_Misc = 16,
	HUDMarkerState_Task_Neutral = 17,
	HUDMarkerState_Task_OppositionAttack = 18,
	HUDMarkerState_Task_OppositionDefend = 19,
	HUDMarkerState_Task_OwnerAttack = 20,
	HUDMarkerState_Task_OwnerDefend = 21,
	HUDMarkerState_MAX = 22,
};
enum etHUDMarkerUsage
{
	HUDMarkerUsage_MiniMap = 0,
	HUDMarkerUsage_SpawnSelect = 1,
	HUDMarkerUsage_All = 2,
	HUDMarkerUsage_MAX = 3,
};
enum etHUDMessageRank
{
	HUDMessagePriority_Low = 0,
	HUDMessagePriority_Medium = 1,
	HUDMessagePriority_High = 2,
	HUDMessagePriority_Tutorial = 3,
	HUDMessagePriority_Instant = 4,
	HUDMessagePriority_MAX = 5,
};
enum etHUDMessageType
{
	HUDMessageType_Standard = 0,
	HUDMessageType_Locale = 1,
	HUDMessageType_Action = 2,
	HUDMessageType_Scoreboard = 3,
	HUDMessageType_Chat = 4,
	HUDMessageType_MAX = 5,
};
enum etHUDPopUpItemRule
{
	HUDPopUpItemRule_Disabled = 0,
	HUDPopUpItemRule_Enabled = 1,
	HUDPopUpItemRule_InMission = 2,
	HUDPopUpItemRule_NotInMission = 3,
	HUDPopUpItemRule_InCustomisation = 4,
	HUDPopUpItemRule_InSocialDistrict = 5,
	HUDPopUpItemRule_InActionDistrict = 6,
	HUDPopUpItemRule_CanUnpledgeFromContact = 7,
	HUDPopUpItemRule_InAmmoResupplyZone = 8,
	HUDPopUpItemRule_CanOpenScoreboard = 9,
	HUDPopUpItemRule_LFGEnabled = 10,
	HUDPopUpItemRule_LFGDisabled = 11,
	HUDPopUpItemRule_MAX = 12,
};
enum etHUDReticule
{
	Reticule_Explosive = 0,
	Reticule_Ranged = 1,
	Reticule_Unarmed = 2,
	Reticule_Vehicle = 3,
	Reticule_Sniper = 4,
	Reticule_None = 5,
	Reticule_Snowflake = 6,
	Reticule_Spotter = 7,
	Reticule_Anubis = 8,
	Reticule_RedDot = 9,
	Reticule_Sprinting = 10,
	Reticule_Anubis_Prototype = 11,
	Reticule_Ranged_Shotgun_Apoc = 12,
	Reticule_MAX = 13,
};
enum etHUDWSCharInfo
{
	HUDWSCharInfo_None = 0,
	HUDWSCharInfo_Player_MaxHeat = 1,
	HUDWSCharInfo_Player_MissionFriendly = 2,
	HUDWSCharInfo_Player_MissionOpposition = 3,
	HUDWSCharInfo_Player_NeutralFriendly = 4,
	HUDWSCharInfo_Player_NeutralOpposition = 5,
	HUDWSCharInfo_MAX = 6,
};
enum etHUDZoneNotifier
{
	HUDZoneNotifier_None = 0,
	HUDZoneNotifier_Customisation = 1,
	HUDZoneNotifier_Marketplace = 2,
	HUDZoneNotifier_Supply = 3,
	HUDZoneNotifier_VehicleRepair = 4,
	HUDZoneNotifier_VehicleSpawn = 5,
	HUDZoneNotifier_MAX = 6,
};
enum etInteractiveActorCategory
{
	InteractiveActorCategory_None = 0,
	InteractiveActorCategory_PedestrianCharacter = 1,
	InteractiveActorCategory_PlayerCharacter = 2,
	InteractiveActorCategory_Vehicle = 3,
	InteractiveActorCategory_Prop = 4,
	InteractiveActorCategory_StaticActor = 5,
	InteractiveActorCategory_TriggerVolume = 6,
	InteractiveActorCategory_MAX = 7,
};
enum etInteractiveActorType
{
	InteractiveActorType_None = 0,
	InteractiveActorType_APBPawn = 1,
	InteractiveActorType_GrafittiDisplayPoint = 2,
	InteractiveActorType_TaskItemPickup = 3,
	InteractiveActorType_RouteControlElement = 4,
	InteractiveActorType_Contact = 5,
	InteractiveActorType_AudioDisplayPoint = 6,
	InteractiveActorType_PlayerVehicleSpawnZone = 7,
	InteractiveActorType_AmmoDepot = 8,
	InteractiveActorType_AmmoCarrier = 9,
	InteractiveActorType_StatueDisplayPoint = 10,
	InteractiveActorType_MailBox = 11,
	InteractiveActorType_APBVehicle = 12,
	InteractiveActorType_NPC = 13,
	InteractiveActorType_Prop = 14,
	InteractiveActorType_PlayerVehicleDisplayPoint = 15,
	InteractiveActorType_GraffitiCrimeTarget = 16,
	InteractiveActorType_AmmoVendingMachine = 17,
	InteractiveActorType_AmmoShopFront = 18,
	InteractiveActorType_UIInteractionPoint = 19,
	InteractiveActorType_MAX = 20,
};
enum etInventoryItemCategory
{
	InventoryItemCategory_None = 0,
	InventoryItemCategory_Capacity = 1,
	InventoryItemCategory_Character = 2,
	InventoryItemCategory_Clothing = 3,
	InventoryItemCategory_DisplayPointToken = 4,
	InventoryItemCategory_Dummy = 5,
	InventoryItemCategory_Equipment = 6,
	InventoryItemCategory_FnMod = 7,
	InventoryItemCategory_Instrument = 8,
	InventoryItemCategory_MarketplaceCash = 9,
	InventoryItemCategory_Outfit = 10,
	InventoryItemCategory_RewardPackage = 11,
	InventoryItemCategory_Song = 12,
	InventoryItemCategory_Symbol = 13,
	InventoryItemCategory_Theme = 14,
	InventoryItemCategory_Unlock = 15,
	InventoryItemCategory_UsableToken = 16,
	InventoryItemCategory_Vehicle = 17,
	InventoryItemCategory_Weapon = 18,
	InventoryItemCategory_MAX = 19,
};
enum etInventoryItemCategoryLimited
{
	InventoryItemCategoryLimited_None = 0,
	InventoryItemCategoryLimited_Character = 1,
	InventoryItemCategoryLimited_Clothing = 2,
	InventoryItemCategoryLimited_Outfit = 3,
	InventoryItemCategoryLimited_Song = 4,
	InventoryItemCategoryLimited_Symbol = 5,
	InventoryItemCategoryLimited_Theme = 6,
	InventoryItemCategoryLimited_Vehicle = 7,
	InventoryItemCategoryLimited_Weapon = 8,
	InventoryItemCategoryLimited_MAX = 9,
};
enum etInventoryItemSubCategory
{
	InventoryItemSubCategory_None = 0,
	InventoryItemSubCategory_Capacity = 1,
	InventoryItemSubCategory_Character = 2,
	InventoryItemSubCategory_ClothingAccessory = 3,
	InventoryItemSubCategory_ClothingArmour = 4,
	InventoryItemSubCategory_ClothingBadges = 5,
	InventoryItemSubCategory_ClothingBelts = 6,
	InventoryItemSubCategory_ClothingBodyHair = 7,
	InventoryItemSubCategory_ClothingBottoms = 8,
	InventoryItemSubCategory_ClothingEyewear = 9,
	InventoryItemSubCategory_ClothingFacialHair = 10,
	InventoryItemSubCategory_ClothingFootwear = 11,
	InventoryItemSubCategory_ClothingHandWear = 12,
	InventoryItemSubCategory_ClothingHeadwear = 13,
	InventoryItemSubCategory_ClothingJewellery = 14,
	InventoryItemSubCategory_ClothingMasks = 15,
	InventoryItemSubCategory_ClothingOverall = 16,
	InventoryItemSubCategory_ClothingSkirtsAndDresses = 17,
	InventoryItemSubCategory_ClothingTop = 18,
	InventoryItemSubCategory_ClothingUnderwear = 19,
	InventoryItemSubCategory_ClothingWebbing = 20,
	InventoryItemSubCategory_DisplayPointToken = 21,
	InventoryItemSubCategory_Dummy = 22,
	InventoryItemSubCategory_Equipment = 23,
	InventoryItemSubCategory_FnModCharacter = 24,
	InventoryItemSubCategory_FnModVehicle = 25,
	InventoryItemSubCategory_FnModWeapon = 26,
	InventoryItemSubCategory_Instrument = 27,
	InventoryItemSubCategory_MarketplaceCash = 28,
	InventoryItemSubCategory_Outfit = 29,
	InventoryItemSubCategory_RewardPackageClothing = 30,
	InventoryItemSubCategory_RewardPackageUnlockPrimitives = 31,
	InventoryItemSubCategory_RewardPackageUnlockTitles = 32,
	InventoryItemSubCategory_RewardPackageUnlockVehicle = 33,
	InventoryItemSubCategory_RewardPackageUnlockVehicleParts = 34,
	InventoryItemSubCategory_RewardPackageUnlockWeapon = 35,
	InventoryItemSubCategory_RewardPackageUnlockWeaponSkin = 36,
	InventoryItemSubCategory_Song = 37,
	InventoryItemSubCategory_Symbol = 38,
	InventoryItemSubCategory_Theme = 39,
	InventoryItemSubCategory_UnlockCapacity = 40,
	InventoryItemSubCategory_UnlockClothing = 41,
	InventoryItemSubCategory_UnlockDisplayPoint = 42,
	InventoryItemSubCategory_UnlockEmote = 43,
	InventoryItemSubCategory_UnlockEquipment = 44,
	InventoryItemSubCategory_UnlockFeature = 45,
	InventoryItemSubCategory_UnlockFnMod = 46,
	InventoryItemSubCategory_UnlockGeneric = 47,
	InventoryItemSubCategory_UnlockInstrument = 48,
	InventoryItemSubCategory_UnlockPrimitive = 49,
	InventoryItemSubCategory_UnlockRewardPackage = 50,
	InventoryItemSubCategory_UnlockSong = 51,
	InventoryItemSubCategory_UnlockSymbol = 52,
	InventoryItemSubCategory_UnlockTheme = 53,
	InventoryItemSubCategory_UnlockTitle = 54,
	InventoryItemSubCategory_UnlockUsable = 55,
	InventoryItemSubCategory_UnlockVehicle = 56,
	InventoryItemSubCategory_UnlockVehicleComponent = 57,
	InventoryItemSubCategory_UnlockWeapon = 58,
	InventoryItemSubCategory_UnlockWeaponSkin = 59,
	InventoryItemSubCategory_UsableToken = 60,
	InventoryItemSubCategory_VehicleCar = 61,
	InventoryItemSubCategory_VehicleTruck = 62,
	InventoryItemSubCategory_VehicleVan = 63,
	InventoryItemSubCategory_WeaponGrenade = 64,
	InventoryItemSubCategory_WeaponMelee = 65,
	InventoryItemSubCategory_WeaponPrimary = 66,
	InventoryItemSubCategory_WeaponSecondary = 67,
	InventoryItemSubCategory_WeaponWitnessing = 68,
	InventoryItemSubCategory_MAX = 69,
};
enum etLoadingMovieTransitionType
{
	LMTT_AllFactions_Generic = 0,
	LMTT_Enforcer_Generic = 1,
	LMTT_Enforcer_Leagues = 2,
	LMTT_Criminal_Generic = 3,
	LMTT_Criminal_Leagues = 4,
	LMTT_AllFactions_Leagues = 5,
	LMTT_MAX = 6,
};
enum etLoadingScreenHintDomain
{
	LoadingScreenHintDomain_Action = 0,
	LoadingScreenHintDomain_Social = 1,
	LoadingScreenHintDomain_Either = 2,
	LoadingScreenHintDomain_MAX = 3,
};
enum etLocaleTypePriority
{
	BlockVolume = 0,
	Street = 1,
	LocationBeacon = 2,
	etLocaleTypePriority_MAX = 3,
};
enum etMailConstant
{
	MailConstant_Cost = 0,
	MailConstant_SoftLimit = 1,
	MailConstant_MAX = 2,
};
enum etMailDetach
{
	kMailDetach_None = 0,
	kMailDetach_Cash = 1,
	kMailDetach_Item = 2,
	kMailDetach_MAX = 3,
};
enum etMailDuration
{
	MailDuration_Short = 0,
	MailDuration_Long = 1,
	MailDuration_MAX = 2,
};
enum etMailInfo
{
	kMailInfo_None = 0,
	kMailInfo_Unread = 1,
	kMailInfo_Expired = 2,
	kMailInfo_MAX = 3,
};
enum etMailSort
{
	kMailSort_Default = 0,
	kMailSort_Sender_Name_ASC = 1,
	kMailSort_Sender_Name_DESC = 2,
	kMailSort_Send_Time_ASC = 3,
	kMailSort_Send_Time_DESC = 4,
	kMailSort_Expiration_Time_ASC = 5,
	kMailSort_Expiration_Time_DESC = 6,
	kMailSort_Read_ASC = 7,
	kMailSort_Read_DESC = 8,
	kMailSort_Subject_ASC = 9,
	kMailSort_Subject_DESC = 10,
	kMailSort_MAX = 11,
};
enum etMarketplaceAuctionType
{
	kMarketplaceAuctionType_None = 0,
	kMarketplaceAuctionType_Cash = 1,
	kMarketplaceAuctionType_MAX = 2,
};
enum etMarketplaceCashType
{
	MarketplaceCash = 0,
	etMarketplaceCashType_MAX = 1,
};
enum etMarketplaceConstant
{
	MarketplaceConstant_Tariff = 0,
	MarketplaceConstant_MaximumAuctions = 1,
	MarketplaceConstant_MinimumCash = 2,
	MarketplaceConstant_MAX = 3,
};
enum etMarketplaceDuration
{
	MarketplaceDuration_Short = 0,
	MarketplaceDuration_Medium = 1,
	MarketplaceDuration_Long = 2,
	MarketplaceDuration_MAX = 3,
};
enum etMarketplaceInfo
{
	kMarketplaceInfo_None = 0,
	kMarketplaceInfo_Auction_Expired = 1,
	kMarketplaceInfo_Auction_Sold = 2,
	kMarketplaceInfo_Auction_Won = 3,
	kMarketplaceInfo_Auction_Outbid = 4,
	kMarketplaceInfo_Auction_Cancelled = 5,
	kMarketplaceInfo_MAX = 6,
};
enum etMarketplaceListType
{
	kMarketplaceList_Auction = 0,
	kMarketplaceList_MyAuction = 1,
	kMarketplaceList_MyBid = 2,
	kMarketplaceList_MAX = 3,
};
enum etMarketplaceSearch
{
	kMarketplaceSearch_Default = 0,
	kMarketplaceSearch_Item = 1,
	kMarketplaceSearch_Seller = 2,
	kMarketplaceSearch_MAX = 3,
};
enum etMarketplaceSort
{
	kMarketplaceSort_Default = 0,
	kMarketplaceSort_Item_Name_ASC = 1,
	kMarketplaceSort_Item_Name_DESC = 2,
	kMarketplaceSort_Item_Rating_ASC = 3,
	kMarketplaceSort_Item_Rating_DESC = 4,
	kMarketplaceSort_Expiration_Time_ASC = 5,
	kMarketplaceSort_Expiration_Time_DESC = 6,
	kMarketplaceSort_Seller_Name_ASC = 7,
	kMarketplaceSort_Seller_Name_DESC = 8,
	kMarketplaceSort_Bid_Price_ASC = 9,
	kMarketplaceSort_Bid_Price_DESC = 10,
	kMarketplaceSort_Buyout_Price_ASC = 11,
	kMarketplaceSort_Buyout_Price_DESC = 12,
	kMarketplaceSort_Gender_ASC = 13,
	kMarketplaceSort_Gender_DESC = 14,
	kMarketplaceSort_High_Bidder_Name_ASC = 15,
	kMarketplaceSort_High_Bidder_Name_DESC = 16,
	kMarketplaceSort_Item_Faction_ASC = 17,
	kMarketplaceSort_Item_Faction_DESC = 18,
	kMarketplaceSort_MAX = 19,
};
enum etMarketplaceTimeLeft
{
	MarketplaceTimeLeft_VeryShort = 0,
	MarketplaceTimeLeft_Short = 1,
	MarketplaceTimeLeft_Medium = 2,
	MarketplaceTimeLeft_Long = 3,
	MarketplaceTimeLeft_VeryLong = 4,
	MarketplaceTimeLeft_MAX = 5,
};
enum etMissionCriminalDispatchTypes
{
	kCRIMINALDISPATCH_MissionVsEnforcers = 0,
	kCRIMINALDISPATCH_MissionVsCriminals = 1,
	kCRIMINALDISPATCH_Backup = 2,
	kCRIMINALDISPATCH_MAX = 3,
};
enum etMissionEnforcerDispatchTypes
{
	kENFORCERDISPATCH_MissionVsCriminals = 0,
	kENFORCERDISPATCH_Backup = 1,
	kENFORCERDISPATCH_Bounty = 2,
	kENFORCERDISPATCH_MAX = 3,
};
enum etMissionResultReason
{
	eMRR_None = 0,
	eMRR_Abandoned = 1,
	eMRR_ChallengeCycled = 2,
	eMRR_CompletedUnopposed = 3,
	eMRR_Declined = 4,
	eMRR_Emergency = 5,
	eMRR_Forced = 6,
	eMRR_ObjectiveCompleted = 7,
	eMRR_ObjectiveFailed = 8,
	eMRR_OppositionDestroyedOwnerTarget = 9,
	eMRR_OwnersDestroyedOwnerTarget = 10,
	eMRR_Reassigned = 11,
	eMRR_RemovedFromSide = 12,
	eMRR_SideTooSmall = 13,
	eMRR_TimedOut = 14,
	eMRR_VipKillLimitReached = 15,
	eMRR_WonFinalObjective = 16,
	eMRR_WonMostObjectives = 17,
	eMRR_MAX = 18,
};
enum etMissionUITrackedValue
{
	MissionUITrackedValue_None = 0,
	MissionUITrackedValue_TaskTargetsTriggeredOwners = 1,
	MissionUITrackedValue_TaskTargetsTriggeredOpposition = 2,
	MissionUITrackedValue_TaskItemsDelivered = 3,
	MissionUITrackedValue_CheckpointsTriggeredLocalPlayer = 4,
	MissionUITrackedValue_VIPLivesLostOwners = 5,
	MissionUITrackedValue_TakeoutsOwners = 6,
	MissionUITrackedValue_TakeoutsOpposition = 7,
	MissionUITrackedValue_BombTimer = 8,
	MissionUITrackedValue_GraffitiPointState = 9,
	MissionUITrackedValue_ArmedGuardTimer = 10,
	MissionUITrackedValue_TakeoutBalanceOwnerOpposition = 11,
	MissionUITrackedValue_CheckpointTerritoryState = 12,
	MissionUITrackedValue_MovingTargetState = 13,
	MissionUITrackedValue_BombState = 14,
	MissionUITrackedValue_TakeoutBalanceOppositionOwner = 15,
	MissionUITrackedValue_SurvivalTimer = 16,
	MissionUITrackedValue_EscapeBar = 17,
	MissionUITrackedValue_EscapePenaltyTimer = 18,
	MissionUITrackedValue_BombsArmed = 19,
	MissionUITrackedValue_MovingTargetsHeldOwners = 20,
	MissionUITrackedValue_MovingTargetsHeldOpposition = 21,
	MissionUITrackedValue_ObjectivesWonOwners = 22,
	MissionUITrackedValue_ObjectivesWonOpposition = 23,
	MissionUITrackedValue_TaskTargetsTriggeredOwners_SumConcStages = 24,
	MissionUITrackedValue_TaskTargetsTriggeredOpposition_SumConcStages = 25,
	MissionUITrackedValue_TaskItemsDeliveredOpposition = 26,
	MissionUITrackedValue_BombsArmed_SumConcStages = 27,
	MissionUITrackedValue_VIPLivesLostOpposition = 28,
	MissionUITrackedValue_VehiclesDelivered = 29,
	MissionUITrackedValue_VehiclesDeliveredOpposition = 30,
	MissionUITrackedValue_BombsArmedOpposition = 31,
	MissionUITrackedValue_BombsArmedOpposition_SumConcStages = 32,
	MissionUITrackedValue_ObjectiveHoldPointsOwners = 33,
	MissionUITrackedValue_ObjectiveHoldPointsOpposition = 34,
	MissionUITrackedValue_DescriptionTextOnly = 35,
	MissionUITrackedValue_MAX = 36,
};
enum etMissionUITrackedValueDisplay
{
	MissionUITrackedValueDisplay_None = 0,
	MissionUITrackedValueDisplay_Percentage = 1,
	MissionUITrackedValueDisplay_Bar = 2,
	MissionUITrackedValueDisplay_Percentage_Inverse = 3,
	MissionUITrackedValueDisplay_Bar_Inverse = 4,
	MissionUITrackedValueDisplay_Counter = 5,
	MissionUITrackedValueDisplay_Counter_Inverse = 6,
	MissionUITrackedValueDisplay_LimitedCounter = 7,
	MissionUITrackedValueDisplay_LimitedCounter_Inverse = 8,
	MissionUITrackedValueDisplay_Time = 9,
	MissionUITrackedValueDisplay_Time_Inverse = 10,
	MissionUITrackedValueDisplay_MAX = 11,
};
enum etModifierClass
{
	ModifierClass_None = 0,
	ModifierClass_Character = 1,
	ModifierClass_Vehicle = 2,
	ModifierClass_Weapon = 3,
	ModifierClass_MAX = 4,
};
enum etModifierEffectType
{
	ModifierEffectType_None = 0,
	ModifierEffectType_APBPawnConstant_ArrestTime = 1,
	ModifierEffectType_APBPawnConstant_JumpOffDamageBase = 2,
	ModifierEffectType_APBPawnConstant_JumpOffDamageVelocityMultiplier = 3,
	ModifierEffectType_APBPawnConstant_JumpOffFailDamage = 4,
	ModifierEffectType_APBPawn_JumpOffDamageTotal = 5,
	ModifierEffectType_Character_JumpZ = 6,
	ModifierEffectType_DesignerConstant2_EnvironmentDamageMultiplier = 7,
	ModifierEffectType_DesignerConstant2_ExplosionDamageMultiplier = 8,
	ModifierEffectType_DesignerConstant2_FriendlyExplosiveDamageMultiplier = 9,
	ModifierEffectType_DesignerConstant2_FriendlyWeaponDamageMultiplier = 10,
	ModifierEffectType_DesignerConstant2_SelfExplosiveDamageMultiplier = 11,
	ModifierEffectType_DesignerConstant2_SelfWeaponDamageMultiplier = 12,
	ModifierEffectType_DesignerConstant2_VehicleCollisionDamageMultiplier = 13,
	ModifierEffectType_DesignerConstant2_VehicleDamageThresholdMultiplier = 14,
	ModifierEffectType_DesignerConstant2_VehicleWeaponDamageMultiplier = 15,
	ModifierEffectType_DesignerConstant_AccelerationRate = 16,
	ModifierEffectType_DesignerConstant_AirControl = 17,
	ModifierEffectType_DesignerConstant_ArrestStreakArrests = 18,
	ModifierEffectType_DesignerConstant_CarSurfingMinSpeed = 19,
	ModifierEffectType_DesignerConstant_FallingDamageMultiplier = 20,
	ModifierEffectType_DesignerConstant_FallingDamageSpeedThreshold = 21,
	ModifierEffectType_DesignerConstant_FallingDamageStaminaMultiplier = 22,
	ModifierEffectType_DesignerConstant_FallingWindedSpeedThreshold = 23,
	ModifierEffectType_DesignerConstant_FieldSupplierRadiusPlayer = 24,
	ModifierEffectType_DesignerConstant_FieldSupplierRadiusVehicle = 25,
	ModifierEffectType_DesignerConstant_MaxJumpZ = 26,
	ModifierEffectType_DesignerConstant_PlayerHealth = 27,
	ModifierEffectType_DesignerConstant_PlayerHealthRegenerationDelay = 28,
	ModifierEffectType_DesignerConstant_PlayerHealthRegenerationDuration = 29,
	ModifierEffectType_DesignerConstant_PlayerMarksmanshipSpeed = 30,
	ModifierEffectType_DesignerConstant_PlayerRunSpeed = 31,
	ModifierEffectType_DesignerConstant_PlayerSprintSpeed = 32,
	ModifierEffectType_DesignerConstant_PlayerStamina = 33,
	ModifierEffectType_DesignerConstant_PlayerWalkSpeed = 34,
	ModifierEffectType_DesignerConstant_PlayerWalkSpeedCrouched = 35,
	ModifierEffectType_DesignerConstant_VehicleCriticalMaxDuration = 36,
	ModifierEffectType_DesignerConstant_VehicleCriticalMinDuration = 37,
	ModifierEffectType_DesignerConstant_VehicleHitDeathSpeed = 38,
	ModifierEffectType_Explosion_Damage = 39,
	ModifierEffectType_Explosion_GroundZeroRadius = 40,
	ModifierEffectType_Explosion_HardDamageModifier = 41,
	ModifierEffectType_Explosion_Radius = 42,
	ModifierEffectType_Explosion_StunDamage = 43,
	ModifierEffectType_Explosion_Type = 44,
	ModifierEffectType_FXMaterialImpact_FXMO_Flesh = 45,
	ModifierEffectType_RangedWeaponType_AccuracyPower = 46,
	ModifierEffectType_RangedWeaponType_CrouchModifier = 47,
	ModifierEffectType_RangedWeaponType_ExplosionType = 48,
	ModifierEffectType_RangedWeaponType_FreeAmmo = 49,
	ModifierEffectType_RangedWeaponType_InVehicleModifier = 50,
	ModifierEffectType_RangedWeaponType_JumpModifier = 51,
	ModifierEffectType_RangedWeaponType_LeanModifier = 52,
	ModifierEffectType_RangedWeaponType_MarksmanshipFOV16 = 53,
	ModifierEffectType_RangedWeaponType_MarksmanshipFOV4 = 54,
	ModifierEffectType_RangedWeaponType_MarksmanshipModifier = 55,
	ModifierEffectType_RangedWeaponType_MaxPierceCount = 56,
	ModifierEffectType_RangedWeaponType_MaxRange = 57,
	ModifierEffectType_RangedWeaponType_MaxTimeBetweenShots = 58,
	ModifierEffectType_RangedWeaponType_MinDamageRange = 59,
	ModifierEffectType_RangedWeaponType_MinNumShots = 60,
	ModifierEffectType_RangedWeaponType_MinNumShots_MarksmanshipOnly = 61,
	ModifierEffectType_RangedWeaponType_MinimumCrosshairWidth = 62,
	ModifierEffectType_RangedWeaponType_MinimumDamagePercentage = 63,
	ModifierEffectType_RangedWeaponType_OverallShotModifierCap = 64,
	ModifierEffectType_RangedWeaponType_PerShotModifier = 65,
	ModifierEffectType_RangedWeaponType_PerShotModifier_MarksmanshipOnly = 66,
	ModifierEffectType_RangedWeaponType_PierceDamageReduction = 67,
	ModifierEffectType_RangedWeaponType_PierceDamageScale = 68,
	ModifierEffectType_RangedWeaponType_RadiusAtTenMetres = 69,
	ModifierEffectType_RangedWeaponType_RampDistance = 70,
	ModifierEffectType_RangedWeaponType_RaySpreadAtTenMetres = 71,
	ModifierEffectType_RangedWeaponType_RaySpreadAtTenMetres_MarksmanshipOnly = 72,
	ModifierEffectType_RangedWeaponType_RaysPerShot = 73,
	ModifierEffectType_RangedWeaponType_Recoil = 74,
	ModifierEffectType_RangedWeaponType_RecoveryDelay = 75,
	ModifierEffectType_RangedWeaponType_RecoveryDelay_MarksmanshipOnly = 76,
	ModifierEffectType_RangedWeaponType_RecoveryPerSecond = 77,
	ModifierEffectType_RangedWeaponType_RecoveryPerSecond_MarksmanshipOnly = 78,
	ModifierEffectType_RangedWeaponType_RunModifier = 79,
	ModifierEffectType_RangedWeaponType_SprintModifier = 80,
	ModifierEffectType_RangedWeaponType_TracerFrequency = 81,
	ModifierEffectType_RangedWeaponType_WalkModifier = 82,
	ModifierEffectType_Special_DisableCSA = 83,
	ModifierEffectType_Special_FieldSupplier = 84,
	ModifierEffectType_Special_MaxHealth_Participation = 85,
	ModifierEffectType_Special_MaxStamina_Participation = 86,
	ModifierEffectType_Special_PointOfInterest = 87,
	ModifierEffectType_Special_RadarJammer = 88,
	ModifierEffectType_Special_RadarPing = 89,
	ModifierEffectType_Special_RemoteDetonator = 90,
	ModifierEffectType_Special_SpotOnDetonate = 91,
	ModifierEffectType_Special_Spotter = 92,
	ModifierEffectType_Special_StartRegen_AE = 93,
	ModifierEffectType_Special_TakeDamage = 94,
	ModifierEffectType_ThrownGrenade_DecrementAmmoCapacity = 95,
	ModifierEffectType_VehicleDamageVFX_FinalStateOverride = 96,
	ModifierEffectType_VehicleSetupType_BreakInCSADuration = 97,
	ModifierEffectType_VehicleSetupType_Brick = 98,
	ModifierEffectType_VehicleSetupType_ChassisTorqueFactor = 99,
	ModifierEffectType_VehicleSetupType_CollisionDamage = 100,
	ModifierEffectType_VehicleSetupType_ComOffsetX = 101,
	ModifierEffectType_VehicleSetupType_ComOffsetZ = 102,
	ModifierEffectType_VehicleSetupType_DamageableModifier = 103,
	ModifierEffectType_VehicleSetupType_DriveType = 104,
	ModifierEffectType_VehicleSetupType_EngineBrakingFactor = 105,
	ModifierEffectType_VehicleSetupType_FinalDriveRatio = 106,
	ModifierEffectType_VehicleSetupType_FrontLatFactor = 107,
	ModifierEffectType_VehicleSetupType_FrontLongFactor = 108,
	ModifierEffectType_VehicleSetupType_MainCargoPipCapacity = 109,
	ModifierEffectType_VehicleSetupType_MaxBrakeTorque = 110,
	ModifierEffectType_VehicleSetupType_MaxDirt = 111,
	ModifierEffectType_VehicleSetupType_MaxDust = 112,
	ModifierEffectType_VehicleSetupType_MaxHealth = 113,
	ModifierEffectType_VehicleSetupType_MaxRepairTimeSecs = 114,
	ModifierEffectType_VehicleSetupType_MaxReverseSpeed = 115,
	ModifierEffectType_VehicleSetupType_MaxSpeed = 116,
	ModifierEffectType_VehicleSetupType_MobileRadarTower = 117,
	ModifierEffectType_VehicleSetupType_Muffler = 118,
	ModifierEffectType_VehicleSetupType_PointOfInterest = 119,
	ModifierEffectType_VehicleSetupType_RadarRange = 120,
	ModifierEffectType_VehicleSetupType_RearHandbrakeLat = 121,
	ModifierEffectType_VehicleSetupType_RearHandbrakeLong = 122,
	ModifierEffectType_VehicleSetupType_RearLatFactor = 123,
	ModifierEffectType_VehicleSetupType_RearLongFactor = 124,
	ModifierEffectType_VehicleSetupType_ReverseThrottle = 125,
	ModifierEffectType_VehicleSetupType_Spawning = 126,
	ModifierEffectType_VehicleSetupType_SteerAngle_0ms = 127,
	ModifierEffectType_VehicleSetupType_SteerAngle_12ms = 128,
	ModifierEffectType_VehicleSetupType_SteerAngle_22ms = 129,
	ModifierEffectType_VehicleSetupType_SteerSpeed = 130,
	ModifierEffectType_VehicleSetupType_Suspension_Damping = 131,
	ModifierEffectType_VehicleSetupType_Suspension_Stiffness = 132,
	ModifierEffectType_VehicleSetupType_Torque_2500RPM = 133,
	ModifierEffectType_VehicleSetupType_Torque_4500RPM = 134,
	ModifierEffectType_VehicleSetupType_Torque_500RPM = 135,
	ModifierEffectType_VehicleSetupType_Torque_7000RPM = 136,
	ModifierEffectType_VehicleSetupType_WheelBoneOffset_FrontHeight = 137,
	ModifierEffectType_VehicleSetupType_WheelBoneOffset_RearHeight = 138,
	ModifierEffectType_VehicleSetupType_WheelMeshOffset_FrontHeight = 139,
	ModifierEffectType_VehicleSetupType_WheelMeshOffset_RearHeight = 140,
	ModifierEffectType_WeaponRecoil_MarksmanshipPitchPercentage = 141,
	ModifierEffectType_WeaponRecoil_MarksmanshipYawPercentage = 142,
	ModifierEffectType_WeaponRecoil_PitchMax = 143,
	ModifierEffectType_WeaponRecoil_PitchMin = 144,
	ModifierEffectType_WeaponRecoil_PitchRecoveryPercentageMax = 145,
	ModifierEffectType_WeaponRecoil_PitchRecoveryPercentageMin = 146,
	ModifierEffectType_WeaponRecoil_RecoilExp = 147,
	ModifierEffectType_WeaponRecoil_RecoilTime = 148,
	ModifierEffectType_WeaponRecoil_RecoverExp = 149,
	ModifierEffectType_WeaponRecoil_RecoverTime = 150,
	ModifierEffectType_WeaponRecoil_YawNegativeMax = 151,
	ModifierEffectType_WeaponRecoil_YawNegativeMin = 152,
	ModifierEffectType_WeaponRecoil_YawNegativeRecoveryPercentageMax = 153,
	ModifierEffectType_WeaponRecoil_YawNegativeRecoveryPercentageMin = 154,
	ModifierEffectType_WeaponRecoil_YawPositiveMax = 155,
	ModifierEffectType_WeaponRecoil_YawPositiveMin = 156,
	ModifierEffectType_WeaponRecoil_YawPositiveRecoveryPercentageMax = 157,
	ModifierEffectType_WeaponRecoil_YawPositiveRecoveryPercentageMin = 158,
	ModifierEffectType_WeaponType_AmmoCategory = 159,
	ModifierEffectType_WeaponType_AmmoPoolCapacity = 160,
	ModifierEffectType_WeaponType_BurstInterval = 161,
	ModifierEffectType_WeaponType_BurstShots = 162,
	ModifierEffectType_WeaponType_CanSprint = 163,
	ModifierEffectType_WeaponType_ChamberedQuickReload = 164,
	ModifierEffectType_WeaponType_CrouchSpeed = 165,
	ModifierEffectType_WeaponType_Encumbrance = 166,
	ModifierEffectType_WeaponType_EquipInVehicle = 167,
	ModifierEffectType_WeaponType_EquipTime = 168,
	ModifierEffectType_WeaponType_FireInterval = 169,
	ModifierEffectType_WeaponType_FireInterval_MarksmanshipOnly = 170,
	ModifierEffectType_WeaponType_FireState_MarksmanshipOnly = 171,
	ModifierEffectType_WeaponType_HUDReticule = 172,
	ModifierEffectType_WeaponType_HUDReticuleMarksmanship = 173,
	ModifierEffectType_WeaponType_HardDamageModifier = 174,
	ModifierEffectType_WeaponType_HealthDamage = 175,
	ModifierEffectType_WeaponType_HealthDamage_MarksmanshipOnly = 176,
	ModifierEffectType_WeaponType_HolsterTime = 177,
	ModifierEffectType_WeaponType_ImpulseStrength = 178,
	ModifierEffectType_WeaponType_LessLethal = 179,
	ModifierEffectType_WeaponType_MagazineCapacity = 180,
	ModifierEffectType_WeaponType_MagazineWarningAmount = 181,
	ModifierEffectType_WeaponType_MarksmanshipSpeed = 182,
	ModifierEffectType_WeaponType_PingDistance = 183,
	ModifierEffectType_WeaponType_RagdollImpulseScale = 184,
	ModifierEffectType_WeaponType_ReloadTime = 185,
	ModifierEffectType_WeaponType_ResupplyDelaySecs = 186,
	ModifierEffectType_WeaponType_ResupplyUnits = 187,
	ModifierEffectType_WeaponType_RunSpeed = 188,
	ModifierEffectType_WeaponType_SoftDamageModifier = 189,
	ModifierEffectType_WeaponType_SprintDelay = 190,
	ModifierEffectType_WeaponType_SprintDelay_MarksmanshipOnly = 191,
	ModifierEffectType_WeaponType_SprintSpeed = 192,
	ModifierEffectType_WeaponType_StaminaDamage = 193,
	ModifierEffectType_WeaponType_Tagger = 194,
	ModifierEffectType_WeaponType_TaggerDuration = 195,
	ModifierEffectType_WeaponType_WalkSpeed = 196,
	ModifierEffectType_WeaponType_WeaponFiringState = 197,
	ModifierEffectType_WeaponType_WeaponProjectile = 198,
	ModifierEffectType_MAX = 199,
};
enum etModifierItemEffectType
{
	ModifierItemEffectType_None = 0,
	ModifierItemEffectType_Character_EquipItem = 1,
	ModifierItemEffectType_MAX = 2,
};
enum etModifierStackingSlot
{
	ModifierStackingSlot_None = 0,
	ModifierStackingSlot_cActivated = 1,
	ModifierStackingSlot_cConsumable = 2,
	ModifierStackingSlot_cHealth = 3,
	ModifierStackingSlot_cMinigame = 4,
	ModifierStackingSlot_cUtility = 5,
	ModifierStackingSlot_vActivated = 6,
	ModifierStackingSlot_vChassis = 7,
	ModifierStackingSlot_vEngine = 8,
	ModifierStackingSlot_vGeneric = 9,
	ModifierStackingSlot_vTrunk = 10,
	ModifierStackingSlot_wBarrel = 11,
	ModifierStackingSlot_wMagazine = 12,
	ModifierStackingSlot_wReceiver = 13,
	ModifierStackingSlot_wUpperRail = 14,
	ModifierStackingSlot_MAX = 15,
};
enum etModifierType
{
	ModifierType_None = 0,
	ModifierType_Activatable = 1,
	ModifierType_Permanent = 2,
	ModifierType_MAX = 3,
};
enum etNameQuery
{
	kNameQuery_Chat = 0,
	kNameQuery_Item = 1,
	kNameQuery_MAX = 2,
};
enum etNPCCategory
{
	LCPedestrian = 0,
	LCVehicle = 1,
	etNPCCategory_MAX = 2,
};
enum etNPCEvent
{
	LC_NonProps_ColdHands = 0,
	LC_NonProps_Fem_Ambients = 1,
	LC_NonProps_Fem_ListenMusic = 2,
	LC_NonProps_Fem_TalkMobile = 3,
	LC_NonProps_LookSkyward = 4,
	LC_NonProps_Prototype = 5,
	LC_NonProps_Stand_Ambients = 6,
	LC_NonProps_Texting = 7,
	LC_Vignette_BankMachine_Male = 8,
	LC_Vignette_BinLitter_Male = 9,
	LC_Vignette_MailBox_Male = 10,
	LC_Vignette_Newspaper_Male = 11,
	LC_Vignette_Observe_Male = 12,
	LC_Vignette_Parkbench_Backless_Male = 13,
	LC_Vignette_Parkbench_Universal_Male = 14,
	LC_Vignette_Payphone_Male = 15,
	LC_Vignette_TaxiWait = 16,
	LC_Vignette_VendingMachine_Male = 17,
	LC_Vignette_WallLean_Male = 18,
	NO_EVENT = 19,
	eAvoidLoudVehicleNotifier = 20,
	eAvoidVehicle = 21,
	eAvoidVehicleNotifier = 22,
	eBumpIntoPlayer = 23,
	eCrimeCommitted = 24,
	eDespawnPedestrian = 25,
	eDriverBlocked = 26,
	eDriverDespawn = 27,
	eDriverPanic = 28,
	eDriverRandomAnim = 29,
	eDriverStopAndPanic = 30,
	eLookAround = 31,
	eLookAt = 32,
	eMinorCollision = 33,
	eNotifier = 34,
	eNotifierTimed = 35,
	eOnTopOfActor = 36,
	ePedIdle = 37,
	ePedestrianPanic = 38,
	eRandomAnim = 39,
	eSpawnDestroy = 40,
	eTaskTargetInteraction = 41,
	eVehicleCriticallyDamaged = 42,
	etNPCEvent_MAX = 43,
};
enum etNPCReaction
{
	NO_REACTION = 0,
	rBumpIntoPlayer = 1,
	rCower = 2,
	rCrimeCommitted = 3,
	rDespawnPedestrian = 4,
	rDriverAngry = 5,
	rDriverBlocked = 6,
	rDriverDeSpawn = 7,
	rDriverPanic = 8,
	rDriverRandomAnim = 9,
	rDriverStopAndPanic = 10,
	rLookAround = 11,
	rLookAt = 12,
	rPedWaitingAnxious = 13,
	rPedWaitingGeneric = 14,
	rReRouteToVignetteNode = 15,
	rRunAway = 16,
	rRunIntoBuilding = 17,
	rSpawnDestroy = 18,
	rStationaryRandomAnim = 19,
	rTaskTargetInteraction = 20,
	rVehicleCriticallyDamaged = 21,
	etNPCReaction_MAX = 22,
};
enum etNPCWorldEvent
{
	WorldEvent_Arson = 0,
	WorldEvent_AvoidVehicle = 1,
	WorldEvent_AvoidVehicleHorn = 2,
	WorldEvent_AvoidVehicleSiren = 3,
	WorldEvent_Bombing = 4,
	WorldEvent_BuildingBreakIn = 5,
	WorldEvent_BulletFired = 6,
	WorldEvent_BulletHit = 7,
	WorldEvent_Deathmatch = 8,
	WorldEvent_DebugShout = 9,
	WorldEvent_DestroyProp = 10,
	WorldEvent_Explosion = 11,
	WorldEvent_Graffiti = 12,
	WorldEvent_GrenadeCook = 13,
	WorldEvent_GrenadeThrown = 14,
	WorldEvent_Hijack = 15,
	WorldEvent_ItemDelivery = 16,
	WorldEvent_LookAtPlayer = 17,
	WorldEvent_LookAtShopfront = 18,
	WorldEvent_LookAtVehicleSiren = 19,
	WorldEvent_Mugging = 20,
	WorldEvent_NPCDeath = 21,
	WorldEvent_None = 22,
	WorldEvent_Pickup = 23,
	WorldEvent_RamRaid = 24,
	WorldEvent_Rendezvous = 25,
	WorldEvent_StolenLargeObject = 26,
	WorldEvent_TerritoryControl = 27,
	WorldEvent_Vandalism = 28,
	WorldEvent_VehicleCollision = 29,
	WorldEvent_VehicleLocked = 30,
	WorldEvent_VehicleUnlocked = 31,
	WorldEvent_WitnessableCrimeDefault = 32,
	WorldEvent_MAX = 33,
};
enum etOnFootDeathAnimation
{
	eDA_None = 0,
	eDA_Backwards = 1,
	eDA_Explosion_Backwards = 2,
	eDA_Explosion_Forwards = 3,
	eDA_Explosion_Left = 4,
	eDA_Explosion_Right = 5,
	eDA_Fall = 6,
	eDA_Forwards = 7,
	eDA_MAX = 8,
};
enum etOpenWorldConstant
{
	OpenWorldConstant_CashPoolHUDMarkerAmount_Crim = 0,
	OpenWorldConstant_CashPoolHUDMarkerAmount_Enf = 1,
	OpenWorldConstant_CashPoolLargeStash = 2,
	OpenWorldConstant_DropOffDeliveryPointReplenishmentDelay = 3,
	OpenWorldConstant_DropOffLargeTaskItemDeliveryPoints = 4,
	OpenWorldConstant_DropOffMediumTaskItemDeliveryPoints = 5,
	OpenWorldConstant_DropOffSmallTaskItemDeliveryPoints = 6,
	OpenWorldConstant_DropOffVehicleDeliveryPoints = 7,
	OpenWorldConstant_LargeTaskItemSizePoints = 8,
	OpenWorldConstant_MediumTaskItemSizePoints = 9,
	OpenWorldConstant_SmallTaskItemsLimit = 10,
	OpenWorldConstant_TaskItemTimeOut = 11,
	OpenWorldConstant_MAX = 12,
};
enum etOrganisation
{
	Organisation_None = 0,
	Organisation_CriminalDefault = 1,
	Organisation_GKings = 2,
	Organisation_BloodRoses = 3,
	Organisation_Praetorian = 4,
	Organisation_PrentissTigers = 5,
	Organisation_RedRain = 6,
	Organisation_SPPD = 7,
	Organisation_EnforcerDefault = 8,
	Organisation_EnforcerSeasonal = 9,
	Organisation_CriminalSeasonal = 10,
	Organisation_JokerDistribution = 11,
	Organisation_JokerAffiliates = 12,
	Organisation_Armas = 13,
	Organisation_ArmasJB = 14,
	Organisation_ArmasNTJB = 15,
	Organisation_Tutorial = 16,
	Organisation_Anarchists = 17,
	Organisation_MAX = 18,
};
enum etPawnHitReaction_BoneList
{
	aHitReactionBoneList = 0,
	etPawnHitReaction_BoneList_MAX = 1,
};
enum etPawnHitReaction_BoneRemapTable
{
	aHitReactionBoneRemapTable1 = 0,
	aHitReactionBoneRemapTable2 = 1,
	etPawnHitReaction_BoneRemapTable_MAX = 2,
};
enum etPawnHitReaction_Bool
{
	bEnableHitReactionBoneSprings = 0,
	etPawnHitReaction_Bool_MAX = 1,
};
enum etPawnHitReaction_ConstrainedBoneList
{
	aHitReactionConstrainedBoneList = 0,
	etPawnHitReaction_ConstrainedBoneList_MAX = 1,
};
enum etPawnHitReaction_Float
{
	fHitReactionBlendOutTime = 0,
	fHitReactionImpulseScale = 1,
	fHitReactionImpulseScaleWalking = 2,
	fHitReactionImpulseScaleRunning = 3,
	fHitReactionImpulseScaleSprinting = 4,
	fHitReactionImpulseScaleLocalPlayer = 5,
	fHitReactionMassEffectScale = 6,
	etPawnHitReaction_Float_MAX = 7,
};
enum etPawnHitReaction_SpringList
{
	aHitReactionSpringList = 0,
	etPawnHitReaction_SpringList_MAX = 1,
};
enum etPawnHitReaction_Vector2D
{
	vHitReactionMotorStrength = 0,
	vHitReactionSpringStrength = 1,
	etPawnHitReaction_Vector2D_MAX = 2,
};
enum etPawnHitReactionType
{
	PawnHitReaction_BoneList = 0,
	PawnHitReaction_ConstrainedBoneList = 1,
	PawnHitReaction_SpringList = 2,
	PawnHitReaction_BoneRemapTable = 3,
	PawnHitReaction_Float = 4,
	PawnHitReaction_Vector2D = 5,
	PawnHitReaction_Bool = 6,
	PawnHitReaction_MAX = 7,
};
enum etPedestrianPaletteType
{
	F_Business_City = 0,
	F_Business_Local = 1,
	F_Clubber_Casual = 2,
	F_Clubber_Fashion = 3,
	F_Industrial_DockWorker = 4,
	F_Industrial_FactoryWorker = 5,
	F_LowerClass_TrailerTrash = 6,
	F_LowerClass_Welfare = 7,
	F_MiddleClass_Casual = 8,
	F_MiddleClass_Professional = 9,
	F_Seedy_Grifter = 10,
	F_Seedy_Hobo = 11,
	F_Uniformed_Casual = 12,
	F_Uniformed_Smart = 13,
	F_UpperClass_Casual = 14,
	F_UpperClass_Fashion = 15,
	F_Urban1_HipHop = 16,
	F_Urban1_Rocker = 17,
	F_Urban2_Athletic = 18,
	F_Urban2_Emo = 19,
	M_Business_City = 20,
	M_Business_City_AsianDyed_06 = 21,
	M_Business_Local = 22,
	M_Clubber_Casual = 23,
	M_Clubber_Fashion = 24,
	M_Industrial_DockWorker = 25,
	M_Industrial_FactoryWorker = 26,
	M_LowerClass_TrailerTrash = 27,
	M_LowerClass_Welfare = 28,
	M_MiddleClass_Casual = 29,
	M_MiddleClass_Professional = 30,
	M_Seedy_Grifter = 31,
	M_Seedy_Hobo = 32,
	M_Uniformed_Casual = 33,
	M_Uniformed_Professional = 34,
	M_Uniformed_Smart_AsianDyed_06 = 35,
	M_UpperClass_Casual = 36,
	M_UpperClass_Fashion = 37,
	M_Urban1_HipHop = 38,
	M_Urban1_Rocker = 39,
	M_Urban2_Athletic = 40,
	M_Urban2_Emo = 41,
	etPedestrianPaletteType_MAX = 42,
};
enum etPedestrianTempSetup
{
	Male = 0,
	Female = 1,
	etPedestrianTempSetup_MAX = 2,
};
enum etPedestrianTTIReaction
{
	NPCMugging = 0,
	etPedestrianTTIReaction_MAX = 1,
};
enum etPlayerRadarPings
{
	Pings_None = 0,
	Pings_Partial = 1,
	Pings_Full = 2,
	Pings_MAX = 3,
};
enum etPopulation
{
	kPopulation_Low = 0,
	kPopulation_Medium = 1,
	kPopulation_High = 2,
	kPopulation_Full = 3,
	kPopulation_MAX = 4,
};
enum etPrimitiveType
{
	kPrimitive_Vinyl = 0,
	kPrimitive_Decal = 1,
	kPrimitive_Font = 2,
	kPrimitive_MAX = 3,
};
enum etPvPRule
{
	PvPRule_DisabledAlways = 0,
	PvPRule_EnabledAlways = 1,
	PvPRule_EnabledFriendsOnly = 2,
	PvPRule_EnabledEnemiesOnly = 3,
	PvPRule_EnabledFriendsAndEnemiesOnly = 4,
	PvPRule_MAX = 5,
};
enum etPvPType
{
	PvPType_Environment = 0,
	PvPType_PlayerEnforcer = 1,
	PvPType_PlayerCriminal = 2,
	PvPType_PlayerVIP = 3,
	PvPType_FFA = 4,
	PvPType_MAX = 5,
};
enum etRCEType
{
	RCEType_None = 0,
	RCEType_Door = 1,
	RCEType_Fence = 2,
	RCEType_Ladder = 3,
	RCEType_MAX = 4,
};
enum etSkillRatingConstant
{
	SkillRatingConstant_InitialMean = 0,
	SkillRatingConstant_InitialStandardDeviation = 1,
	SkillRatingConstant_Beta = 2,
	SkillRatingConstant_DynamicsFactor = 3,
	SkillRatingConstant_DrawProbability = 4,
	SkillRatingConstant_ConservativeStandardDeviationMultiplier = 5,
	SkillRatingConstant_InTrainingStandardDeviationThreshold = 6,
	SkillRatingConstant_InTrainingMatchNumThreshold = 7,
	SkillRatingConstant_AllowedMeanChangeStdDevMultiplier = 8,
	SkillRatingConstant_MinAllowedConsRating = 9,
	SkillRatingConstant_MaxAllowedConsRating = 10,
	SkillRatingConstant_MAX = 11,
};
enum etSpawnConstant
{
	SpawnConstant_DistrictMapBackgroundOpactiy = 0,
	SpawnConstant_ElectiveSpawn_1_FadeToGreyTime = 1,
	SpawnConstant_ElectiveSpawn_2_ShowElectiveSpawnScreenTime = 2,
	SpawnConstant_ElectiveSpawn_3_ShowForcedSpawnScreenTime = 3,
	SpawnConstant_ElectiveSpawn_4_AutomaticSpawnTime = 4,
	SpawnConstant_ElectiveSpawn_5_KillSwitchTime = 5,
	SpawnConstant_ElectiveSpawn_AddToMapZoom = 6,
	SpawnConstant_ElectiveSpawn_MaxRelaxationAttempts = 7,
	SpawnConstant_ElectiveSpawn_MaxSpawnZones = 8,
	SpawnConstant_ElectiveSpawn_VehicleCooldownTime = 9,
	SpawnConstant_ElectiveSpawn_VehicleDamagePercentage = 10,
	SpawnConstant_GroundPlacementHeightOffset = 11,
	SpawnConstant_MissionDefaultRespawnTime = 12,
	SpawnConstant_MissionDefaultRespawnTimeIncrement = 13,
	SpawnConstant_MissionMinPlayerRespawnDistance = 14,
	SpawnConstant_RespawnRetryInterval = 15,
	SpawnConstant_RespawnTransitionScreenFadeInTime = 16,
	SpawnConstant_RespawnTransitionScreenFadeOutTime = 17,
	SpawnConstant_SpawnWaveRefreshRateSeconds = 18,
	SpawnConstant_UnstickRespawnDelaySeconds = 19,
	SpawnConstant_MAX = 20,
};
enum etSpawnDestroyData
{
	Spawn = 0,
	Destroy = 1,
	etSpawnDestroyData_MAX = 2,
};
enum etSpawnVariable
{
	SpawnVariable_None = 0,
	SpawnVariable_Default = 1,
	SpawnVariable_PGBeacon = 2,
	SpawnVariable_PGCrate = 3,
	SpawnVariable_DefaultRelaxation = 4,
	SpawnVariable_ActionRelaxation = 5,
	SpawnVariable_Minigame_GoldenGun = 6,
	SpawnVariable_Minigame_Mugging = 7,
	SpawnVariable_Minigame_BlockFDM = 8,
	SpawnVariable_Minigame_VIP = 9,
	SpawnVariable_TestDistricts = 10,
	SpawnVariable_MAX = 11,
};
enum etTaskItemAnimationType
{
	TaskItemAnimationType_None = 0,
	TaskItemAnimationType_Medium = 1,
	TaskItemAnimationType_Large = 2,
	TaskItemAnimationType_MAX = 3,
};
enum etTaskItemBatch
{
	TaskItemBatch_None = 0,
	TaskItemBatch_A = 1,
	TaskItemBatch_B = 2,
	TaskItemBatch_C = 3,
	TaskItemBatch_D = 4,
	TaskItemBatch_E = 5,
	TaskItemBatch_F = 6,
	TaskItemBatch_G = 7,
	TaskItemBatch_H = 8,
	TaskItemBatch_MAX = 9,
};
enum etTaskItemCategory
{
	TaskItemCategory_None = 0,
	TaskItemCategory_Electrical = 1,
	TaskItemCategory_Evidence = 2,
	TaskItemCategory_Financial = 3,
	TaskItemCategory_Generic = 4,
	TaskItemCategory_Hazard = 5,
	TaskItemCategory_Baggage = 6,
	TaskItemCategory_Personal = 7,
	TaskItemCategory_Test_HouseholdTech = 8,
	TaskItemCategory_Storage = 9,
	TaskItemCategory_Event = 10,
	TaskItemCategory_Deployables = 11,
	TaskItemCategory_Event_Seasonal = 12,
	TaskItemCategory_MAX = 13,
};
enum etTaskItemSize
{
	TaskItemSize_None = 0,
	TaskItemSize_Small = 1,
	TaskItemSize_MediumCarried = 2,
	TaskItemSize_LargeCarried = 3,
	TaskItemSize_Vehicle = 4,
	TaskItemSize_CashPool = 5,
	TaskItemSize_MAX = 6,
};
enum etTaskItemSpecificationMethod
{
	TISM_ByTaskItemVariety = 0,
	TISM_ByTaskItemSubCategory = 1,
	TISM_ByTaskItemCategory = 2,
	TISM_MAX = 3,
};
enum etTaskItemVisibility
{
	ItemVisibility_VisibleAlways = 0,
	ItemVisibility_HiddenAlways = 1,
	ItemVisibility_VisibleUntilFirstPickup = 2,
	ItemVisibility_MAX = 3,
};
enum etTaskMemberRequirement
{
	MemberRequirement_AllMembersSimultaneously = 0,
	MemberRequirement_AllMembersSequentially = 1,
	MemberRequirement_AnyMember = 2,
	MemberRequirement_MAX = 3,
};
enum etTaskObjectiveStage
{
	TaskObjectiveStage = 0,
	TaskObjectiveStage_01 = 1,
	TaskObjectiveStage_02 = 2,
	TaskObjectiveStage_03 = 3,
	TaskObjectiveStage_04 = 4,
	TaskObjectiveStage_05 = 5,
	TaskObjectiveStage_06 = 6,
	TaskObjectiveStage_07 = 7,
	TaskObjectiveStage_08 = 8,
	TaskObjectiveStage_09 = 9,
	TaskObjectiveStage = 10,
	TaskObjectiveStage = 11,
	TaskObjectiveStage = 12,
	TaskObjectiveStage = 13,
	TaskObjectiveStage = 14,
	TaskObjectiveStage = 15,
	TaskObjectiveStage = 16,
	TaskObjectiveStage = 17,
	TaskObjectiveStage = 18,
	TaskObjectiveStage = 19,
	TaskObjectiveStage = 20,
	TaskObjectiveStage = 21,
	TaskObjectiveStage = 22,
	TaskObjectiveStage = 23,
	TaskObjectiveStage = 24,
	TaskObjectiveStage = 25,
	TaskObjectiveStage = 26,
	TaskObjectiveStage = 27,
	TaskObjectiveStage = 28,
	TaskObjectiveStage = 29,
	TaskObjectiveStage = 30,
	TaskObjectiveStage = 31,
	TaskObjectiveStage = 32,
	TaskObjectiveStage = 33,
	TaskObjectiveStage = 34,
	TaskObjectiveStage = 35,
	TaskObjectiveStage = 36,
	TaskObjectiveStage = 37,
	TaskObjectiveStage = 38,
	TaskObjectiveStage = 39,
	TaskObjectiveStage_MAX = 40,
};
enum etTaskOperationCategory
{
	TaskOperationCategory_None = 0,
	TaskOperationCategory_AntiGraffiti = 1,
	TaskOperationCategory_ArmedGuard = 2,
	TaskOperationCategory_Arson = 3,
	TaskOperationCategory_BombDisposal = 4,
	TaskOperationCategory_Bombing = 5,
	TaskOperationCategory_Burglary = 6,
	TaskOperationCategory_Bust = 7,
	TaskOperationCategory_CrimeSceneInvestigation = 8,
	TaskOperationCategory_Deathmatch = 9,
	TaskOperationCategory_DefaultOpposition = 10,
	TaskOperationCategory_Delivery = 11,
	TaskOperationCategory_Escape = 12,
	TaskOperationCategory_Escort = 13,
	TaskOperationCategory_ForcedArrest = 14,
	TaskOperationCategory_ForcedEntry = 15,
	TaskOperationCategory_Graffiti = 16,
	TaskOperationCategory_Hacking = 17,
	TaskOperationCategory_MovingTarget = 18,
	TaskOperationCategory_Mugging = 19,
	TaskOperationCategory_Pickup = 20,
	TaskOperationCategory_RamRaid = 21,
	TaskOperationCategory_Rendezvous = 22,
	TaskOperationCategory_Sabotage = 23,
	TaskOperationCategory_StopAndSearch = 24,
	TaskOperationCategory_Survival = 25,
	TaskOperationCategory_TakeOverDeathmatch = 26,
	TaskOperationCategory_TerritoryControl = 27,
	TaskOperationCategory_Vandalism = 28,
	TaskOperationCategory_VehicleCargo = 29,
	TaskOperationCategory_VehicleLooting = 30,
	TaskOperationCategory_VehicleTheft = 31,
	TaskOperationCategory_MAX = 32,
};
enum etTaskTargetCategory
{
	TaskTargetCategory_None = 0,
	TaskTargetCategory_NPC_Pedestrian = 1,
	TaskTargetCategory_ParkedVehicle = 2,
	TaskTargetCategory_ObjectivePoint = 3,
	TaskTargetCategory_StaticActor = 4,
	TaskTargetCategory_TriggerVolume = 5,
	TaskTargetCategory_GraffitiPoint = 6,
	TaskTargetCategory_StandAloneProp = 7,
	TaskTargetCategory_ItemSpawnPoint = 8,
	TaskTargetCategory_Checkpoint = 9,
	TaskTargetCategory_MAX = 10,
};
enum etTaskTargetClass
{
	TaskTargetClass_None = 0,
	TaskTargetClass_GraffitiPoint = 1,
	TaskTargetClass_ItemSpawnPoint = 2,
	TaskTargetClass_Checkpoint = 3,
	TaskTargetClass_NPC = 4,
	TaskTargetClass_Prop = 5,
	TaskTargetClass_VehicleSpawnPoint = 6,
	TaskTargetClass_MinigameSpawner = 7,
	TaskTargetClass_MAX = 8,
};
enum etTaskTargetGraffiti
{
	Graffiti_Default = 0,
	Graffiti_MAX = 1,
};
enum etTaskTargetSpecificationMethod
{
	TTSM_SpecificTaskTargetType = 0,
	TTSM_AnyOneTypeFromClass = 1,
	TTSM_AnyMixFromClass = 2,
	TTSM_MAX = 3,
};
enum etTESProjectionInfo
{
	TESProjectionInfo_Body_MaxProjections = 0,
	TESProjectionInfo_Body_MaxPrimitives = 1,
	TESProjectionInfo_Body_AverageNumItems = 2,
	TESProjectionInfo_ComplexityCutOff_LowMed = 3,
	TESProjectionInfo_ComplexityCutOff_MedHigh = 4,
	TESProjectionInfo_Vehicle_MaxProjections = 5,
	TESProjectionInfo_Vehicle_MaxPrimitives = 6,
	TESProjectionInfo_Symbol_MaxPrimitives = 7,
	TESProjectionInfo_MAX = 8,
};
enum etTimeOfDayAvailability
{
	TimeOfDayAvailability_0000 = 0,
	TimeOfDayAvailability_0001 = 1,
	TimeOfDayAvailability_0010 = 2,
	TimeOfDayAvailability_0011 = 3,
	TimeOfDayAvailability_0100 = 4,
	TimeOfDayAvailability_0101 = 5,
	TimeOfDayAvailability_0110 = 6,
	TimeOfDayAvailability_0111 = 7,
	TimeOfDayAvailability = 8,
	TimeOfDayAvailability = 9,
	TimeOfDayAvailability = 10,
	TimeOfDayAvailability = 11,
	TimeOfDayAvailability = 12,
	TimeOfDayAvailability = 13,
	TimeOfDayAvailability = 14,
	TimeOfDayAvailability = 15,
	TimeOfDayAvailability_Always = 16,
	TimeOfDayAvailability_MAX = 17,
};
enum etTimeofDayPeriod
{
	TimeofDayPeriod_Morning = 0,
	TimeofDayPeriod_Afternoon = 1,
	TimeofDayPeriod_Evening = 2,
	TimeofDayPeriod_Night = 3,
	TimeofDayPeriod_MAX = 4,
};
enum etTrackedActivityOperation
{
	TrackedActivityOperation_None = 0,
	TrackedActivityOperation_0_DivideBy = 1,
	TrackedActivityOperation_0_DivideBy_1_Percent = 2,
	TrackedActivityOperation_Sum = 3,
	TrackedActivityOperation_Min = 4,
	TrackedActivityOperation_MAX = 5,
};
enum etTrackedActivityUnitConversion
{
	TrackedActivityUnitConversion_None = 0,
	TrackedActivityUnitConversion_Days_Hours_Minutes_Seconds = 1,
	TrackedActivityUnitConversion_FixedPoint = 2,
	TrackedActivityUnitConversion_MAX = 3,
};
enum etTTINPCEndingType
{
	Despawn = 0,
	WalkAway = 1,
	RunAway = 2,
	Die = 3,
	etTTINPCEndingType_MAX = 4,
};
enum etTTIPlayerAnimType
{
	IntroAnim = 0,
	MainAnim1 = 1,
	MainAnim2 = 2,
	MainAnim3 = 3,
	OutroAnim = 4,
	IdleAnim = 5,
	etTTIPlayerAnimType_MAX = 6,
};
enum etTutorialBypassBehaviour
{
	TutorialBypassBehaviour_None = 0,
	TutorialBypassBehaviour_MaxOutTutorContacts_NoRewards = 1,
	TutorialBypassBehaviour_MaxOutTutorContacts_FullRewards = 2,
	TutorialBypassBehaviour_MAX = 3,
};
enum etTutorialPosition
{
	TopLeft = 0,
	MiddleLeft = 1,
	BottomLeft = 2,
	etTutorialPosition_MAX = 3,
};
enum etTutorialType
{
	Small = 0,
	Large = 1,
	etTutorialType_MAX = 2,
};
enum etVehicleBatch
{
	VehicleBatch_None = 0,
	VehicleBatch_A = 1,
	VehicleBatch_B = 2,
	VehicleBatch_C = 3,
	VehicleBatch_D = 4,
	VehicleBatch_E = 5,
	VehicleBatch_F = 6,
	VehicleBatch_G = 7,
	VehicleBatch_H = 8,
	VehicleBatch_MAX = 9,
};
enum etVehicleColour
{
	White = 0,
	Silver = 1,
	Grey = 2,
	SlateGrey = 3,
	DarkGrey = 4,
	Black = 5,
	CadetBlue = 6,
	RoyalBlue = 7,
	MediumBlue = 8,
	Blue = 9,
	DarkBlueMike = 10,
	LightSlateGrey = 11,
	Cyan = 12,
	MediumSeaGreen = 13,
	SeaGreenStig = 14,
	DarkCyan = 15,
	DarkSeaGreen = 16,
	Green = 17,
	DarkGreen = 18,
	DarkOliveGreen = 19,
	Orange = 20,
	Red = 21,
	DarkRed = 22,
	Brown = 23,
	DarkBrownPranay = 24,
	Khaki = 25,
	HoneyDew = 26,
	LightPink = 27,
	Yellow = 28,
	Golden = 29,
	DarkOrange = 30,
	DarkGolden = 31,
	Silver_Metallic = 32,
	Grey_Metallic = 33,
	SlateGrey_Metallic = 34,
	LightSlateGrey_Metallic = 35,
	DarkSeaGreen_Metallic = 36,
	HoneyDew_Metallic = 37,
	Orange_Metallic = 38,
	etVehicleColour_MAX = 39,
};
enum etVehicleDamageVFXState
{
	VehicleDamageVFX_None = 0,
	VehicleDamageVFX_DamageState1 = 1,
	VehicleDamageVFX_DamageState2 = 2,
	VehicleDamageVFX_DamageState3 = 3,
	VehicleDamageVFX_DamageState4 = 4,
	VehicleDamageVFX_MAX = 5,
};
enum etVehicleDistricts
{
	None_ = 0,
	Financial = 1,
	etVehicleDistricts_MAX = 2,
};
enum etVehicleDriveType
{
	kVehicleDriveRWD = 0,
	kVehicleDriveFWD = 1,
	kVehicleDriveAWD = 2,
	etVehicleDriveType_MAX = 3,
};
enum etVehicleGear
{
	VehicleGear_Reverse = 0,
	VehicleGear = 1,
	VehicleGear = 2,
	VehicleGear = 3,
	VehicleGear = 4,
	VehicleGear = 5,
	VehicleGear = 6,
	VehicleGear_MAX = 7,
};
enum etVehicleInteractionAnimation
{
	kVIA_Open_Door = 0,
	kVIA_Close_Door = 1,
	kVIA_Close_Door_From_Inside = 2,
	kVIA_Get_In_And_Close_Door = 3,
	kVIA_Open_Door_And_Get_Out = 4,
	kVIA_Open_Door_And_Bail_Out = 5,
	kVIA_Swap_Seats = 6,
	kVIA_Enter_VCP = 7,
	kVIA_Exit_VCP = 8,
	kVIA_Eject_Doing_Initial_Criminal = 9,
	kVIA_Eject_Doing_Initial_Enforcer = 10,
	kVIA_Eject_Doing_Later_Criminal = 11,
	kVIA_Eject_Doing_Later_Enforcer = 12,
	kVIA_Eject_Seat_Slide_Criminal = 13,
	kVIA_Eject_Seat_Slide_Enforcer = 14,
	kVIA_Death = 15,
	kVIA_DeathLean = 16,
	kVIA_MAX = 17,
};
enum etVehicleModelClass
{
	VehicleModelClass_None = 0,
	VehicleModelClass_MAX = 1,
};
enum etVehiclePositionIndex
{
	VehiclePositionIndex_FrontLeft = 0,
	VehiclePositionIndex_FrontRight = 1,
	VehiclePositionIndex_RearLeft = 2,
	VehiclePositionIndex_RearRight = 3,
	VehiclePositionIndex_Cargo = 4,
	VehiclePositionIndex_MAX = 5,
};
enum etVehicleSetupType
{
	VehicleSetupType_None = 0,
	VehicleSetupType_AmbientSUV_PickupKingCab = 1,
	VehicleSetupType_AmbientSUV_SUV = 2,
	VehicleSetupType_AmbientTruck_BoxBackCurtain = 3,
	VehicleSetupType_AmbientUtility_2DoorCabriolet = 4,
	VehicleSetupType_AmbientUtility_2DoorCoupe = 5,
	VehicleSetupType_AmbientTruck_Cement = 6,
	VehicleSetupType_AmbientUtility_2DoorHatchbackVan = 7,
	VehicleSetupType_AmbientTruck_Garbage = 8,
	VehicleSetupType_AmbientUtility_4DoorEstate = 9,
	VehicleSetupType_AmbientUtility_4DoorEstateVan = 10,
	VehicleSetupType_AmbientUtility_4DoorHatchback = 11,
	VehicleSetupType_AmbientUtility_4DoorSedan = 12,
	VehicleSetupType_AmbientUtility_ClassicMuscle = 13,
	VehicleSetupType_AmbientUtility_ExecSaloon = 14,
	VehicleSetupType_AmbientUtility_LowRider = 15,
	VehicleSetupType_AmbientUtility_SportSUV = 16,
	VehicleSetupType_AmbientUtility_Taxi = 17,
	VehicleSetupType_AmbientVan_Ambulance = 18,
	VehicleSetupType_AmbientVan_ArmouredVan = 19,
	VehicleSetupType_AmbientVan_StandardVan = 20,
	VehicleSetupType_CriminalCarrying = 21,
	VehicleSetupType_CriminalCompact = 22,
	VehicleSetupType_CriminalPerformance = 23,
	VehicleSetupType_EnforcerCarrying = 24,
	VehicleSetupType_EnforcerCompact = 25,
	VehicleSetupType_EnforcerPerformance = 26,
	VehicleSetupType_AmbientSUV_Pickup = 27,
	VehicleSetupType_AmbientUtility_Roadster = 28,
	VehicleSetupType_Armas_AmbientUtility_ClassicMuscle1 = 29,
	VehicleSetupType_Rally_2DoorHatchbackVan = 30,
	VehicleSetupType_TestVehicle = 31,
	VehicleSetupType_TestVehicle2 = 32,
	VehicleSetupType_Minigame_ClassicMuscle_Infection = 33,
	VehicleSetupType_AmbientUtility_4DoorRally = 34,
	VehicleSetupType_ExoticMuscle = 35,
	VehicleSetupType_MAX = 36,
};
enum etVehicleSpecificationMethod
{
	VehicleSpecification_ByVehicleCategory = 0,
	VehicleSpecification_ByVehicleSubCategory = 1,
	VehicleSpecification_SpecificVehicleSetupType = 2,
	VehicleSpecification_MAX = 3,
};
enum etVehicleTempSetup
{
	VehicleTempSetup_2DoorCar = 0,
	VehicleTempSetup_4DoorCar = 1,
	VehicleTempSetup_KingCab = 2,
	VehicleTempSetup_Roadster = 3,
	VehicleTempSetup_VanStandard = 4,
	VehicleTempSetup_2DrCoupe = 5,
	VehicleTempSetup_2DrVan = 6,
	VehicleTempSetup_4DrEstate = 7,
	VehicleTempSetup_ClassicMuscle = 8,
	VehicleTempSetup_Utility1Estate = 9,
	VehicleTempSetup_EstateVan = 10,
	VehicleTempSetup_ExecSaloon = 11,
	VehicleTempSetup_Hatchback = 12,
	VehicleTempSetup_Lowrider = 13,
	VehicleTempSetup_Pickup = 14,
	VehicleTempSetup_Saloon = 15,
	VehicleTempSetup_SportsSUV = 16,
	VehicleTempSetup_SUV = 17,
	VehicleTempSetup_Taxi = 18,
	VehicleTempSetup_TruckCurtain = 19,
	VehicleTempSetup_VanAmbulance = 20,
	VehicleTempSetup_VanArmoured = 21,
	VehicleTempSetup_CrimCarrying = 22,
	VehicleTempSetup_CrimCompact = 23,
	VehicleTempSetup_CrimPerformance = 24,
	VehicleTempSetup_EnfCarrying = 25,
	VehicleTempSetup_EnfCompact = 26,
	VehicleTempSetup_EnfPerformance = 27,
	VehicleTempSetup_ExoticMuscle = 28,
	VehicleTempSetup_MAX = 29,
};
enum etVehicleUICategory
{
	VehicleUICategory_None = 0,
	VehicleUICategory_MAX = 1,
};
enum etVIPAssignmentMethod
{
	VIPAssignmentMethod_SideLeader = 0,
	VIPAssignmentMethod_HighestHeatPlayer = 1,
	VIPAssignmentMethod_MAX = 2,
};
enum etWarningPromptGroup
{
	WPG_Warning_Email = 0,
	WPG_Warning_Vending = 1,
	WPG_Warning_MAX = 2,
};
enum etWeaponClass
{
	Grenade = 0,
	Projectile = 1,
	Raycast = 2,
	ShotGun = 3,
	Witnessing = 4,
	etWeaponClass_MAX = 5,
};
enum etWeaponFiringState
{
	WeaponNone = 0,
	WeaponSemi = 1,
	WeaponAuto = 2,
	WeaponBurst = 3,
	WeaponCooking = 4,
	etWeaponFiringState_MAX = 5,
};
enum etWeaponImpactClass
{
	WIC_Null = 0,
	WIC_Small = 1,
	WIC_Medium = 2,
	WIC_Heavy = 3,
	WIC_Explosive = 4,
	WIC_Melee = 5,
	WIC_Shotgun = 6,
	WIC_NonLethal = 7,
	WIC_MAX = 8,
};
enum etWeaponOverrideType
{
	WeaponOverrideUseDeployed = 0,
	WeaponOverrideUseFromInventoryOrDeployed = 1,
	WeaponOverrideUseFromInventoryOrEmpty = 2,
	WeaponOverrideUseFromInventoryOrCreate = 3,
	WeaponOverrideAlwaysCreate = 4,
	etWeaponOverrideType_MAX = 5,
};
enum etWeaponPickupAvailability
{
	WPA_OwnerOnly = 0,
	WPA_OwnerTeam = 1,
	WPA_OpposingTeam = 2,
	WPA_OwnerMission = 3,
	WPA_OwnerFaction = 4,
	WPA_NonOwnerFaction = 5,
	WPA_NonOwner = 6,
	WPA_Everyone = 7,
	WPA_MAX = 8,
};
enum etWitnessingFunctionality
{
	RulesetWitnessing_Off = 0,
	RulesetWitnessing_HeatGenerated = 1,
	RulesetWitnessing_HeatAndMissionsGenerated = 2,
	RulesetWitnessing_MAX = 3,
};
enum etWorldFaction
{
	kWorldFaction_Normal = 0,
	kWorldFaction_Recommended = 1,
	kWorldFaction_Full = 2,
	kWorldFaction_MAX = 3,
};
enum etYesNoEither
{
	kYNE_Either = 0,
	kYNE_Yes = 1,
	kYNE_No = 2,
	kYNE_MAX = 3,
};
enum etTeamChangeEventType
{
	eSCET_TeamAssignedToTask = 0,
	eSCET_TeamMembersAdded = 1,
	eSCET_TeamMemberLeft = 2,
	eSCET_TeamLeaderChanged = 3,
	eSCET_MAX = 4,
};
enum FloatFoldOp
{
	FFoldOp_Sum = 0,
	FFoldOp_Product = 1,
	FFoldOp_Maximum = 2,
	FFoldOp_Minimum = 3,
	FFoldOp_MAX = 4,
};
enum VectorFoldOp
{
	VFoldOp_Sum = 0,
	VFoldOp_Product = 1,
	VFoldOp_Maximum = 2,
	VFoldOp_Minimum = 3,
	VFoldOp_MAX = 4,
};
enum etTaskTargetActionState
{
	eTaskTargetActionState_Intro = 0,
	eTaskTargetActionState_Loop = 1,
	eTaskTargetActionState_Outro = 2,
	eTaskTargetActionState_Cancelled = 3,
	eTaskTargetActionState_Success = 4,
	eTaskTargetActionState_MAX = 5,
};
enum EStudioParameterType
{
	LPT_None = 0,
	LPT_Float = 1,
	LPT_Bool = 2,
	LPT_Int = 3,
	LPT_String = 4,
	LPT_MAX = 5,
};
enum etVehicleStudioRenderTargetType
{
	VSRT_EXTERIOR_DIFFUSE = 0,
	VSRT_EXTERIOR_NORMAL = 1,
	VSRT_EXTERIOR_EMISSIVE = 2,
	VSRT_INTERIOR_DIFFUSE = 3,
	VSRT_INTERIOR_NORMAL = 4,
	VSRT_INTERIOR_EMISSIVE = 5,
	VSRT_WHEEL_DIFFUSE = 6,
	VSRT_WHEEL_NORMAL = 7,
	VSRT_EXTERIOR_DECALS = 8,
	VSRT_MAX = 9,
};
enum etAmmoResupplyResult
{
	kAmmoResupply_OK = 0,
	kAmmoResupply_NoDeployedWeapons = 1,
	kAmmoResupply_AllWeaponsFull = 2,
	kAmmoResupply_InsufficientFunds = 3,
	kAmmoResupply_WrongFaction = 4,
	kAmmoResupply_WrongGroup = 5,
	kAmmoResupply_AmmoCarrierFnModInactive = 6,
	kAmmoResupply_AmmoCarrierDepotNotDeployed = 7,
	kAmmoResupply_AmmoCarrierVehicleMoving = 8,
	kAmmoResupply_SupplierEmpty = 9,
	kAmmoResupply_InsufficientStorageSpace = 10,
	kAmmoResupply_InVehicle = 11,
	kAmmoResupply_Unconscious = 12,
	kAmmoResupply_Arrested = 13,
	kAmmoResupply_Dead = 14,
	kAmmoResupply_Fail = 15,
	kAmmoResupply_AlreadyResupplying = 16,
	kAmmoResupply_MAX = 17,
};
enum etWeaponResupplyResult
{
	kWeaponResupply_OK = 0,
	kWeaponResupply_NoWeaponDeployedInSlot = 1,
	kWeaponResupply_WeaponFull = 2,
	kWeaponResupply_InsufficientFunds = 3,
	kAmmoResupply_WeaponLocked = 4,
	kWeaponResupply_Fail = 5,
	kWeaponResupply_AlreadyResupplying = 6,
	etWeaponResupplyResult_MAX = 7,
};
enum etWeaponType
{
	WeaponType_None = 0,
	WeaponType_Primary = 1,
	WeaponType_Secondary = 2,
	WeaponType_Grenade = 3,
	WeaponType_MAX = 4,
};
enum etInventoryAccessResult
{
	kInventoryAccess_OK = 0,
	kInventoryAccess_WrongFaction = 1,
	kInventoryAccess_WrongGroup = 2,
	kInventoryAccess_AmmoCarrierFnModInactive = 3,
	kInventoryAccess_AmmoCarrierDepotNotDeployed = 4,
	kInventoryAccess_AmmoCarrierVehicleMoving = 5,
	kInventoryAccess_Unconscious = 6,
	kInventoryAccess_Arrested = 7,
	kInventoryAccess_Dead = 8,
	kInventoryAccess_Fail = 9,
	kInventoryAccess_MAX = 10,
};
enum etInventoryAccessType
{
	kInventoryAccessMode_None = 0,
	kInventoryAccessMode_ReadOnly = 1,
	kInventoryAccessMode_AmmoPurchase = 2,
	kInventoryAccessMode_Locker_Ammo = 3,
	kInventoryAccessMode_Locker_NoAmmo = 4,
	kInventoryAccessMode_FieldDeployment = 5,
	kInventoryAccessMode_FullDeployment = 6,
	kInventoryAccessMode_MAX = 7,
};
enum etResupplyState
{
	ResupplyState_None = 0,
	ResupplyState_FromStorageInventory = 1,
	ResupplyState_FromPurchased = 2,
	ResupplyState_Cancelled = 3,
	ResupplyState_Completed = 4,
	ResupplyState_MAX = 5,
};
enum etResupplyTarget
{
	ResupplyTarget_None = 0,
	ResupplyTarget_AmmoPool = 1,
	ResupplyTarget_Magazine = 2,
	ResupplyTarget_Any = 3,
	ResupplyTarget_MAX = 4,
};
enum etLocomotionType
{
	Locomotion_None = 0,
	Locomotion_Walk = 1,
	Locomotion_Run = 2,
	Locomotion_Sprint = 3,
	Locomotion_Marksmanship = 4,
	Locomotion_MAX = 5,
};
enum eAnimRequestAction
{
	kARA_NotPlaying = 0,
	kARA_Trigger = 1,
	kARA_TriggerPredicted = 2,
	kARA_Play = 3,
	kARA_Loop = 4,
	kARA_Stop = 5,
	kARA_MAX = 6,
};
enum etItemState
{
	ItemState_Inactive = 0,
	ItemState_Active = 1,
	ItemState_Reloading = 2,
	ItemState_LoopedReloading = 3,
	ItemState_WeaponSemi = 4,
	ItemState_WeaponBurst = 5,
	ItemState_WeaponAuto = 6,
	ItemState_WeaponCooking = 7,
	ItemState_Chambering = 8,
	ItemState_GrenadeEmpty = 9,
	ItemState_WeaponWindup = 10,
	ItemState_MAX = 11,
};
enum etMatchAxis
{
	kIGNORE = 0,
	kMATCH = 1,
	etMatchAxis_MAX = 2,
};
enum etSideOfTheBody
{
	kLEFT = 0,
	kRIGHT = 1,
	etSideOfTheBody_MAX = 2,
};
enum etIKStrategy
{
	IK_DEFAULT = 0,
	IK_NONE = 1,
	IK_UNSCALED = 2,
	IK_ANY_OBJECT = 3,
	IK_VEHICLE = 4,
	IK_MAX = 5,
};
enum etEffectorRotation
{
	IK_EFFECTOR_DEFAULT = 0,
	IK_EFFECTOR_MAINTAIN_RELATIVE_ROTATION = 1,
	IK_EFFECTOR_TAKE_FROM_EFFECTOR_SPACE = 2,
	IK_EFFECTOR_MATCH_SOCKET = 3,
	IK_EFFECTOR_MAX = 4,
};
enum eSocketResult
{
	kSR_NONE = 0,
	kSR_FOUND = 1,
	kSR_CACHED_LOCAL = 2,
	kSR_MAX = 3,
};
enum etDyingState
{
	eDS_None = 0,
	eDS_OnFoot = 1,
	eDS_InVehicle = 2,
	eDS_InVehicleTelefrag = 3,
	eDS_Respawn = 4,
	eDS_TeleFrag = 5,
	eDS_MAX = 6,
};
enum etWeaponState
{
	WEAPONSTATE_Normal = 0,
	WEAPONSTATE_UnHolster = 1,
	WEAPONSTATE_Holster = 2,
	WEAPONSTATE_Reloading = 3,
	WEAPONSTATE_QuickReload = 4,
	WEAPONSTATE_EndReloading = 5,
	WEAPONSTATE_SwitchToUnarmed = 6,
	WEAPONSTATE_MAX = 7,
};
enum etGrenadeWeaponState
{
	GRENADEWEAPON_Normal = 0,
	GRENADEWEAPON_PinPull = 1,
	GRENADEWEAPON_Throw = 2,
	GRENADEWEAPON_MAX = 3,
};
enum etCSAMirrorState
{
	CSAMirror_UseCameraSwap = 0,
	CSAMirror_NotMirrored = 1,
	CSAMirror_Mirrored = 2,
	CSAMirror_MAX = 3,
};
enum etCharacterLeanState
{
	CLS_None = 0,
	CLS_MirroredLeft = 1,
	CLS_Left = 2,
	CLS_Right = 3,
	CLS_MAX = 4,
};
enum etCanUseDoor
{
	CanUseDoor_False_Roll_None = 0,
	CanUseDoor_True = 1,
	CanUseDoor_False_Angle_Pitch = 2,
	CanUseDoor_False_Angle_Roll = 3,
	CanUseDoor_False_No_Floor_At_VAP = 4,
	CanUseDoor_False_VAP_Too_Far_Z = 5,
	CanUseDoor_False_Collision = 6,
	CanUseDoor_MAX = 7,
};
enum etCurrentRecoilPart
{
	RecoilPart_None = 0,
	RecoilPart_Recoil = 1,
	RecoilPart_Recover = 2,
	RecoilPart_MAX = 3,
};
enum etCSAPhase
{
	eCSAPhase_Default = 0,
	eCSAPhase_Intro = 1,
	eCSAPhase_Main = 2,
	eCSAPhase_Outro = 3,
	eCSAPhase_MAX = 4,
};
enum etTaskItemNotify
{
	eTIN_None = 0,
	eTIN_PassTaskItem = 1,
	eTIN_ReceiveTaskItem = 2,
	eTIN_DropTaskItem = 3,
	eTIN_MAX = 4,
};
enum etContactInteractionState
{
	eCIS_DefaultIdle = 0,
	eCIS_DefaultIdleToAlertIdle = 1,
	eCIS_Hail = 2,
	eCIS_AlertIdle = 3,
	eCIS_Greeting = 4,
	eCIS_Response = 5,
	eCIS_Dealing = 6,
	eCIS_Goodbye = 7,
	eCIS_AlertIdleToDefaultIdle = 8,
	eCIS_Rotate = 9,
	eCIS_MAX = 10,
};
enum etPlayerStanding
{
	ePS_Default = 0,
	ePS_Maxed = 1,
	ePS_NoDeal = 2,
	ePS_WrongFaction = 3,
	ePS_MAX = 4,
};
enum etContactInteractionType
{
	eCIT_None = 0,
	eCIT_Remote = 1,
	eCIT_FaceToFace = 2,
	eCIT_FaceToFaceInventoryAccess = 3,
	eCIT_MAX = 4,
};
enum EPKCState
{
	PKCSTATE_None = 0,
	PKCSTATE_Limbo = 1,
	PKCSTATE_EncroachCheck = 2,
	PKCSTATE_Kinematic_NoCollision = 3,
	PKCSTATE_Kinematic_WithCollision = 4,
	PKCSTATE_PseudoKinematic = 5,
	PKCSTATE_Dynamic = 6,
	PKCSTATE_MAX = 7,
};
enum EVehicleType
{
	VEHICLETYPE_None = 0,
	VEHICLETYPE_Free = 1,
	VEHICLETYPE_LivingCity = 2,
	VEHICLETYPE_PlayerDeployed = 3,
	VEHICLETYPE_HackSpawned = 4,
	VEHICLETYPE_TestPseudoKinematic = 5,
	VEHICLETYPE_ParkedTaskTarget = 6,
	VEHICLETYPE_MAX = 7,
};
enum etVehicleSpawnState
{
	eVSS_NotSpawned = 0,
	eVSS_Spawned = 1,
	eVSS_DiedDamaged = 2,
	eVSS_DiedVandalised = 3,
	eVSS_Recycled = 4,
	eVSS_Telefragged = 5,
	eVSS_MAX = 6,
};
enum etSeatUseState
{
	SUS_None = 0,
	SUS_LockedDuringHijack = 1,
	SUS_UsingNotOnRoutingToVAP = 2,
	SUS_UsingNotOnGettingInNonOwning = 3,
	SUS_UsingNotOnGettingInOwning = 4,
	SUS_UsingNotOnGettingOut = 5,
	SUS_UsingNotOnSwitchingSeats = 6,
	SUS_UsingOn = 7,
	SUS_MAX = 8,
};
enum etDoorState
{
	DS_Open = 0,
	DS_Closed = 1,
	DS_MAX = 2,
};
enum etVehicleExitPosition
{
	VEP_None = 0,
	VEP_AtVAP = 1,
	VEP_Teleport = 2,
	VEP_MAX = 3,
};
enum etSeatActionEnum
{
	SAE_GettingIn = 0,
	SAE_GettingOut = 1,
	SAE_MAX = 2,
};
enum etLaneState
{
	kLS_None = 0,
	kLS_FollowLane = 1,
	kLS_ChangeLane = 2,
	kLS_MAX = 3,
};
enum etNPCClass
{
	kLC_None = 0,
	kLC_Pedestrian = 1,
	kLC_Vehicle = 2,
	kLC_MAX = 3,
};
enum etClassRole
{
	kCR_None = 0,
	kCR_Client = 1,
	kCR_Server = 2,
	kCR_ClientServer = 3,
	kCR_MAX = 4,
};
enum etClassScope
{
	kCS_None = 0,
	kCS_Global = 1,
	kCS_Individual = 2,
	kCS_MAX = 3,
};
enum etManagementStatus
{
	kMS_None = 0,
	kMS_Ignored = 1,
	kMS_Manual = 2,
	kMS_Automatic = 3,
	kMS_MAX = 4,
};
enum etReplicationStatus
{
	kRS_None = 0,
	kRS_NotReplicated = 1,
	kRS_Replicated = 2,
	kRS_MAX = 3,
};
enum etBrainAndPhysRepState
{
	kBPS_None = 0,
	kBPS_Init = 1,
	kBPS_Active = 2,
	kBPS_Disconnected = 3,
	kBPS_Limbo = 4,
	kBPS_SelfDestructCountdown = 5,
	kBPS_RagDoll = 6,
	kBPS_MAX = 7,
};
enum etLocomotionState
{
	kLcS_None = 0,
	kLcS_Edge = 1,
	kLcS_Smooth = 2,
	kLcS_MAX = 3,
};
enum etRouteState
{
	kRtS_None = 0,
	kRtS_Following = 1,
	kRtS_Paused = 2,
	kRtS_Completed = 3,
	kRtS_MAX = 4,
};
enum etAvoidAnim
{
	kAA_AvoidLeft = 0,
	kAA_AvoidRight = 1,
	kAA_MAX = 2,
};
enum etNPCBrainState
{
	kNPCB_None = 0,
	kNPCB_RouteFollowing = 1,
	kNPCB_PerformingVignette = 2,
	kNPCB_PerformingTTIReaction = 3,
	kNPCB_WaitingAtObstruction = 4,
	kNPCB_MAX = 5,
};
enum etTTIState
{
	kTTI_None = 0,
	kTTI_Active = 1,
	kTTI_Canceled = 2,
	kTTI_Completed = 3,
	kTTI_Aborted = 4,
	kTTI_MAX = 5,
};
enum etTTIStage
{
	kTTIStage_None = 0,
	kTTIStage_Intro = 1,
	kTTIStage_Loop = 2,
	kTTIStage_Outro = 3,
	kTTIStage_Idle = 4,
	kTTIStage_MAX = 5,
};
enum etRouteTypes
{
	eInvalidRouteType = 0,
	ePathfindingRoute = 1,
	eDetailedRoute = 2,
	etRouteTypes_MAX = 3,
};
enum etSpeedState
{
	kSS_None = 0,
	kSS_ConstantSpeed = 1,
	kSS_ChangeSpeed = 2,
	kSS_MAX = 3,
};
enum etIndicatorLightType
{
	kIndicatorLight_None = 0,
	kIndicatorLight_Left = 1,
	kIndicatorLight_Right = 2,
	kIndicatorLight_MAX = 3,
};
enum etRouteFollowerEvent
{
	kRFE_ReachedTargetSpeed = 0,
	kRFE_ReachedTargetLane = 1,
	kRFE_ReachedEndOfRoute = 2,
	kRFE_MAX = 3,
};
enum EFindFMVariantMethod
{
	FFMVM_Below = 0,
	FFMVM_Above = 1,
	FFMVM_BelowAndAbove = 2,
	FFMVM_MAX = 3,
};
enum etDamageType
{
	kDamage_FrontLeft = 0,
	kDamage_FrontRight = 1,
	kDamage_RearLeft = 2,
	kDamage_RearRight = 3,
	kDamage_SideLeft = 4,
	kDamage_SideRight = 5,
	kDamage_Top = 6,
	kDamage_MAX = 7,
};
enum etExtremeDamageType
{
	kExtreme_Front = 0,
	kExtreme_Rear = 1,
	kExtreme_SideLeft = 2,
	kExtreme_SideRight = 3,
	kExtreme_Top = 4,
	kExtreme_MAX = 5,
};
enum etEmissiveLightType
{
	kLight_Dummy = 0,
	kLight_HeadlightLeft = 1,
	kLight_HeadlightRight = 2,
	kLight_IndicatorFrontLeft = 3,
	kLight_IndicatorFrontRight = 4,
	kLight_BrakeLeft = 5,
	kLight_BrakeRight = 6,
	kLight_ReverseLeft = 7,
	kLight_ReverseRight = 8,
	kLight_Interior = 9,
	kLight_Dashboard = 10,
	kLight_BrakeDiscs = 11,
	kLight_CentreBrake = 12,
	kLight_TailLightLeft = 13,
	kLight_TailLightRight = 14,
	kLight_IndicatorRearLeft = 15,
	kLight_IndicatorRearRight = 16,
	kLight_Special_01 = 17,
	kLight_Special_02 = 18,
	kLight_Special_03 = 19,
	kLight_Special_04 = 20,
	kLight_Special_05 = 21,
	kLight_Special_06 = 22,
	kLight_Special_07 = 23,
	kLight_Special_08 = 24,
	kLight_Special_09 = 25,
	kLight_Special = 26,
	kLight_RoofLight = 27,
	kLight_MAX = 28,
};
enum etPaintType
{
	PT_BASIC = 0,
	PT_METALLIC = 1,
	PT_PEARLESCENT = 2,
	PT_METALLIC_PEARLESCENT = 3,
	PT_MATTE = 4,
	PT_MAX = 5,
};
enum etVehicleTextureType
{
	VT_EXTERIOR_DIFFUSE = 0,
	VT_EXTERIOR_NORMAL = 1,
	VT_EXTERIOR_EMISSIVE = 2,
	VT_INTERIOR_DIFFUSE = 3,
	VT_INTERIOR_NORMAL = 4,
	VT_INTERIOR_EMISSIVE = 5,
	VT_WHEEL_DIFFUSE = 6,
	VT_WHEEL_NORMAL = 7,
	VT_EXTERIOR_ScratchDiffuse_DirtMask_DamageMask_DustMask = 8,
	VT_EXTERIOR_DamagedNormal = 9,
	VT_EXTERIOR_ScratchMask = 10,
	VT_MAX = 11,
};
enum etVehicleLookupTextureType
{
	VLT_DAMAGE = 0,
	VLT_EMISSIVE = 1,
	VLT_MAX = 2,
};
enum etDeliverableState
{
	DeliverableState_None = 0,
	DeliverableState_Free = 1,
	DeliverableState_CarriedOwners = 2,
	DeliverableState_CarriedOpposition = 3,
	DeliverableState_Delivered = 4,
	DeliverableState_MAX = 5,
};
enum etDoorInteractionAnimation
{
	kDIA_Open_Door = 0,
	kDIA_Close_Door = 1,
	kDIA_Close_Door_From_Inside = 2,
	kDIA_Get_In_And_Close_Door = 3,
	kDIA_Open_Door_And_Get_Out = 4,
	kDIA_Open_Door_And_Bail_Out = 5,
	kDIA_NPC_Hijack_Open_Door_Criminal = 6,
	kDIA_NPC_Hijack_Open_Door_Enforcer = 7,
	kDIA_MAX = 8,
};
enum etStartNewHandyCamState
{
	HandyCam_Started = 0,
	HandyCam_DisallowActivation = 1,
	HandyCam_AlreadyActive = 2,
	HandyCam_NotAlreadyActive = 3,
	HandyCam_MAX = 4,
};
enum EShakeParam
{
	ESP_OffsetRandom = 0,
	ESP_OffsetZero = 1,
	ESP_MAX = 2,
};
enum etCameraPosition
{
	CameraPosition_ZoomedIn = 0,
	CameraPosition_UserDefined = 1,
	CameraPosition_ZoomedOut = 2,
	CameraPosition_MAX = 3,
};
enum etModeIntendedTarget
{
	Targ_None = 0,
	Targ_Controller = 1,
	Targ_Character = 2,
	Targ_Vehicle = 3,
	Targ_MAX = 4,
};
enum ECurrentVehicleCameraMode
{
	VCM_NONE = 0,
	VCM_DRIVER = 1,
	VCM_PASSENGER_SIT = 2,
	VCM_PASSENGER_AIM = 3,
	VCM_PASSENGER_MARKS = 4,
	VCM_MAX = 5,
};
enum EDumpedStatType
{
	eDUMPEDSTATTYPE_None = 0,
	eDUMPEDSTATTYPE_Nsecs = 1,
	eDUMPEDSTATTYPE_Minute = 2,
	eDUMPEDSTATTYPE_Hour = 3,
	eDUMPEDSTATTYPE_MAX = 4,
};
enum ERenderTargetTapPoint
{
	RTTP_PreUberPP = 0,
	RTTP_PostDownsample = 1,
	RTTP_PostAverageLuminance = 2,
	RTTP_PostAdaptation = 3,
	RTTP_PostDOFGather = 4,
	RTTP_PostDOFDilate = 5,
	RTTP_PostDOFBlur = 6,
	RTTP_PostBloomGather = 7,
	RTTP_PostBloomBlur = 8,
	RTTP_MAX = 9,
};
enum etOpenWorldDeliveryResult
{
	DeliveryResult_AllSuccessful = 0,
	DeliveryResult_SomeFailed = 1,
	DeliveryResult_AllFailed = 2,
	DeliveryResult_MAX = 3,
};
enum etOccupancyState
{
	kBayUnoccupied = 0,
	kBayPartiallyOccupied = 1,
	kBayOccupied = 2,
	etOccupancyState_MAX = 3,
};
enum etVehicleSpawnErrorCode
{
	kVehicleSpawn_OK = 0,
	kVehicleSpawn_NoDeployedVehicle = 1,
	kVehicleSpawn_WrongFaction = 2,
	kVehicleSpawn_JustSpawnedAVehicle = 3,
	kVehicleSpawn_NotAllowedToRecall = 4,
	kVehicleSpawn_InsufficientFunds = 5,
	kVehicleSpawn_AllBaysOccupied = 6,
	kVehicleSpawn_NoSpawnBays = 7,
	kVehicleSpawn_PlayerIsDead = 8,
	kVehicleSpawn_SpawnFailed = 9,
	kVehicleSpawn_MAX = 10,
};
enum etTaskMarkerIndices
{
	TaskMarker_A = 0,
	TaskMarker_B = 1,
	TaskMarker_C = 2,
	TaskMarker_D = 3,
	TaskMarker_E = 4,
	TaskMarker_F = 5,
	TaskMarker_G = 6,
	TaskMarker_H = 7,
	TaskMarker_I = 8,
	TaskMarker_J = 9,
	TaskMarker_K = 10,
	TaskMarker_L = 11,
	TaskMarker_M = 12,
	TaskMarker_N = 13,
	TaskMarker_O = 14,
	TaskMarker_P = 15,
	TaskMarker_Q = 16,
	TaskMarker_R = 17,
	TaskMarker_S = 18,
	TaskMarker_T = 19,
	TaskMarker_U = 20,
	TaskMarker_V = 21,
	TaskMarker_W = 22,
	TaskMarker_X = 23,
	TaskMarker_Y = 24,
	TaskMarker_Z = 25,
	TaskMarker_MAX = 26,
};
enum etMovingTargetPossessionType
{
	eMTPT_None = 0,
	eMTPT_Participant = 1,
	eMTPT_Opposition = 2,
	eMTPT_MAX = 3,
};
enum etMissionResult
{
	eMR_None = 0,
	eMR_OwnersWon = 1,
	eMR_OppositionWon = 2,
	eMR_Draw = 3,
	eMR_NobodyWon = 4,
	eMR_MAX = 5,
};
enum etObjectiveResult
{
	eOR_Win = 0,
	eOR_Lose = 1,
	eOR_Draw = 2,
	eOR_MAX = 3,
};
enum etStageResult
{
	eSR_OwnersWon = 0,
	eSR_OppositionWon = 1,
	eSR_Draw = 2,
	eSR_MAX = 3,
};
enum etMissionSide
{
	kOwners = 0,
	kOpposition = 1,
	etMissionSide_MAX = 2,
};
enum etThemePlayRequestState
{
	ThemePlayRequest_Empty = 0,
	ThemePlayRequest_WaitingForGuid = 1,
	ThemePlayRequest_WaitingForThemeData = 2,
	ThemePlayRequest_LoadingInstruments = 3,
	ThemePlayRequest_StartPlaying = 4,
	ThemePlayRequest_Playing = 5,
	ThemePlayRequest_Stopping = 6,
	ThemePlayRequest_MAX = 7,
};
enum etTESPrimitiveType
{
	TESPrimitive_Vinyl = 0,
	TESPrimitive_Decal = 1,
	TESPrimitive_Font = 2,
	TESPrimitive_MAX = 3,
};
enum etTextureType
{
	TextureType_Diffuse = 0,
	TextureType_Normal = 1,
	TextureType_MAX = 2,
};
enum etCharacterBuildState
{
	kCBS_SourceAssetStreaming = 0,
	kCBS_SourceMeshesStreamingDelay = 1,
	kCBS_SourceTexturesStreaming = 2,
	kCBS_Mesh = 3,
	kCBS_UVBleedMesh = 4,
	kCBS_SourceTexturesStreamingDelay = 5,
	kCBS_Diffuse = 6,
	kCBS_Normal = 7,
	kCBS_MorphScale = 8,
	kCBS_Audio = 9,
	kCBS_Cleanup = 10,
	kCBS_MAX = 11,
};
enum etAudioPartCategory
{
	APC_None = 0,
	APC_Engine = 1,
	APC_Exhaust = 2,
	APC_Turbo = 3,
	APC_Transmission = 4,
	APC_DumpValve = 5,
	APC_GearChange = 6,
	APC_Horn = 7,
	APC_Siren = 8,
	APC_Amp = 9,
	APC_Speaker = 10,
	APC_MAX = 11,
};
enum etGolemobilePartCategory
{
	GPC_Exterior = 0,
	GPC_Interior = 1,
	GPC_Glass = 2,
	GPC_Wheels = 3,
	GPC_MAX = 4,
};
enum etVehicleBuildState
{
	kVBS_SourceAssetStreaming = 0,
	kVBS_Mesh = 1,
	kVBS_UVBleedMesh = 2,
	kVBS_SourceTexturesStreamingDelay = 3,
	kVBS_ExteriorTexture = 4,
	kVBS_InteriorTexture = 5,
	kVBS_GlassTexture = 6,
	kVBS_WheelsTexture = 7,
	kVBS_EvictResources = 8,
	kVBS_Audio = 9,
	kVBS_MAX = 10,
};
enum etHeatDebugInfoReason
{
	HeatDebugInfoReason_DirectHeat = 0,
	HeatDebugInfoReason_HeatTimeDecay = 1,
	HeatDebugInfoReason_PayForHeat = 2,
	HeatDebugInfoReason_WitnessedByNPC = 3,
	HeatDebugInfoReason_WitnessedByEnforcer = 4,
	HeatDebugInfoReason_ForWitnessingCriminal = 5,
	HeatDebugInfoReason_GM = 6,
	HeatDebugInfoReason_MAX = 7,
};
enum etCrimeListState
{
	CrimeListState_Empty = 0,
	CrimeListState_Decaying = 1,
	CrimeListState_CrimeInProgress = 2,
	CrimeListState_MAX = 3,
};
enum etCharacterTextureBuildState
{
	kCTBS_Null = 0,
	kCTBS_Diffuse_Setup = 1,
	kCTBS_Diffuse_BaseSkinColour = 2,
	kCTBS_Diffuse_SkinDetails = 3,
	kCTBS_Diffuse_PredefinedTattoos = 4,
	kCTBS_Diffuse_Tattoos = 5,
	kCTBS_Diffuse_HairBody = 6,
	kCTBS_Diffuse_HairEyebrows = 7,
	kCTBS_Diffuse_HairBeard = 8,
	kCTBS_Diffuse_Scars = 9,
	kCTBS_Diffuse_HairHead = 10,
	kCTBS_Diffuse_BodyFacePaint = 11,
	kCTBS_Diffuse_Makeup = 12,
	kCTBS_Diffuse_NailVarnishIrisColourPupilShape = 13,
	kCTBS_Diffuse_Item_BaseColour = 14,
	kCTBS_Diffuse_Item_PredefinedColourDyeDecals = 15,
	kCTBS_Diffuse_Item_ProjectedColourDyeDecals = 16,
	kCTBS_Diffuse_Item_Overlay = 17,
	kCTBS_Diffuse_Item_PredefinedStitchOnIronOnDecals = 18,
	kCTBS_Diffuse_Item_CombineBRDF = 19,
	kCTBS_Diffuse_GenerateUVMask = 20,
	kCTBS_Diffuse_Dilate = 21,
	kCTBS_Diffuse_Generate = 22,
	kCTBS_Diffuse_Cleanup = 23,
	kCTBS_Normal_Setup = 24,
	kCTBS_Normal_Base = 25,
	kCTBS_Normal_Muscle = 26,
	kCTBS_Normal_Ears = 27,
	kCTBS_Normal_Cheeks = 28,
	kCTBS_Normal_Chin = 29,
	kCTBS_Normal_Mouth = 30,
	kCTBS_Normal_Forehead = 31,
	kCTBS_Normal_Eyes = 32,
	kCTBS_Normal_Brow = 33,
	kCTBS_Normal_Nose = 34,
	kCTBS_Normal_SkinnyVeins = 35,
	kCTBS_Normal_Wrinkles = 36,
	kCTBS_Normal_HairBody = 37,
	kCTBS_Normal_HairEyebrows = 38,
	kCTBS_Normal_Scars = 39,
	kCTBS_Normal_HairBeard = 40,
	kCTBS_Normal_HairHead = 41,
	kCTBS_Normal_Item = 42,
	kCTBS_Normal_Generate = 43,
	kCTBS_Normal_Cleanup = 44,
	kCTBS_MAX = 45,
};
enum etTriggerState
{
	eTS_Untriggered = 0,
	eTS_PartiallyTriggered = 1,
	eTS_Triggered = 2,
	eTS_Resetting = 3,
	eTS_MAX = 4,
};
enum etTaskTargetVFXState
{
	TTVFX_NotInUse = 0,
	TTVFX_Inactive = 1,
	TTVFX_Untriggered = 2,
	TTVFX_PartiallyTriggered_Server = 3,
	TTVFX_PartiallyTriggered_Friendly = 4,
	TTVFX_PartiallyTriggered_Hostile = 5,
	TTVFX_Triggered_Server = 6,
	TTVFX_Triggered_Friendly = 7,
	TTVFX_Triggered_Hostile = 8,
	TTVFX_Resetting_Server = 9,
	TTVFX_Resetting_Friendly = 10,
	TTVFX_Resetting_Hostile = 11,
	TTVFX_ObjectiveCompleted = 12,
	TTVFX_MAX = 13,
};
enum etColourType
{
	kColour_Symbols = 0,
	kColour_Hair = 1,
	kColour_StandardPaint = 2,
	kColour_PearlescentPaint = 3,
	kColour_Clothing = 4,
	kColour_MAX = 5,
};
enum etDisplayPointInteractionType
{
	eDPIT_ViewOnly = 0,
	eDPIT_Activate = 1,
	eDPIT_Update = 2,
	eDPIT_GMUpdate = 3,
	eDPIT_Deactivate = 4,
	eDPIT_MAX = 5,
};
enum EFlythroughActorType
{
	FLYTHROUGH_Undefined = 0,
	FLYTHROUGH_Ped = 1,
	FLYTHROUGH_Veh = 2,
	FLYTHROUGH_MAX = 3,
};
enum etNotifyFlag
{
	eNF_None = 0,
	eNF_Capture1 = 1,
	eNF_Capture2 = 2,
	eNF_Cancel = 3,
	eNF_End = 4,
	eNF_MAX = 5,
};
enum etTurfControlPointMessage
{
	eTCPM_FactionChanged = 0,
	eTCPM_MAX = 1,
};
enum etGraffitiState
{
	eGS_Reset = 0,
	eGS_InProgress_Graffiti = 1,
	eGS_InProgress_AntiGraffiti = 2,
	eGS_Triggered_Graffiti = 3,
	eGS_Triggered_AntiGraffiti = 4,
	eGS_MAX = 5,
};
enum etGraffitiTextureType
{
	eGTT_None = 0,
	eGTT_Graffiti = 1,
	eGTT_AntiGraffiti = 2,
	eGTT_MAX = 3,
};
enum etBoneSelectionMethod
{
	kBONESELECT_LOWEST = 0,
	kBONESELECT_NAMED_BONE = 1,
	kBONESELECT_MATCH_BONE = 2,
	kBONESELECT_MAX = 3,
};
enum etAffectAxis
{
	kAFFECT_DEFAULT = 0,
	kAFFECT_IGNORE = 1,
	kAFFECT_MAX = 2,
};
enum etInventoryEvent
{
	eInventoryEvent_TableChanged = 0,
	eInventoryEvent_DeploymentChanged = 1,
	eInventoryEvent_UnlockFlagsChanged = 2,
	eInventoryEvent_ExaminedFlagsChanged = 3,
	eInventoryEvent_UsableActivated = 4,
	eInventoryEvent_UsableDeactivated = 5,
	eInventoryEvent_AvailabilityChanged = 6,
	eInventoryEvent_MAX = 7,
};
enum etDeployedUsableType
{
	eDUType_None = 0,
	eDUType_UsableToken = 1,
	eDUType_FnMod = 2,
	eDUType_MAX = 3,
};
enum etModifierEvent
{
	eModifierEvent_None = 0,
	eModifierEvent_BeginModifier = 1,
	eModifierEvent_EndModifier = 2,
	eModifierEvent_MAX = 3,
};
enum etShouldDestroyItemResult
{
	etSDIR_Unknown = 0,
	etSDIR_ValidItem_NoDestroy = 1,
	etSDIR_TestItem_WouldDestroy = 2,
	etSDIR_TestItem_Destroy = 3,
	etSDIR_RussianItem_WouldDestroy = 4,
	etSDIR_RussianItem_Destroy = 5,
	etSDIR_MAX = 6,
};
enum etUnlockableTableIndex
{
	eUTI_DeployedCharacterUsables = 0,
	eUTI_DeployedVehicleUsables = 1,
	eUTI_DeployedEquipment = 2,
	eUTI_DeployedSymbols = 3,
	eUTI_CharacterFnMods = 4,
	eUTI_Max = 5,
};
enum etWeaponSlot
{
	PrimaryWeaponSlot = 0,
	SecondaryWeaponSlot = 1,
	MeleeWeaponSlot = 2,
	GrenadeWeaponSlot = 3,
	etWeaponSlot_MAX = 4,
};
enum ChangeWeaponInstantFlags
{
	CWIF_FullDuration = 0,
	CWIF_InstantUnequip = 1,
	CWIF_InstantEquip = 2,
	CWIF_CompletelyInstant = 3,
	CWIF_MAX = 4,
};
enum etChatMessageType
{
	kCHAT_SAY = 0,
	kCHAT_YELL = 1,
	kCHAT_WHISPER = 2,
	kCHAT_WHISPER_SENT = 3,
	kCHAT_METAGROUP = 4,
	kCHAT_GROUP = 5,
	kCHAT_CLAN = 6,
	kCHAT_OFFICER = 7,
	kCHAT_DISTRICT = 8,
	kCHAT_AFK = 9,
	kCHAT_DND = 10,
	kCHAT_SYSTEM = 11,
	kCHAT_BROADCAST_SYSTEM = 12,
	kCHAT_MAX = 13,
};
enum etChatMonitorTestResult
{
	etChatMonitorTestResult_NONE = 0,
	etChatMonitorTestResult_REPEAT = 1,
	etChatMonitorTestResult_BLACKLISTED = 2,
	etChatMonitorTestResult_MAX = 3,
};
enum etClientState
{
	kCLIENT_STATE_DISCONNECTED = 0,
	kCLIENT_STATE_LOGINSERVER_CONNECT_IN_PROGRESS = 1,
	kCLIENT_STATE_LOGINSERVER_CONNECT_COMPLETE = 2,
	kCLIENT_STATE_LOGIN_IN_PROGRESS = 3,
	kCLIENT_STATE_LOGIN_SUCCESS = 4,
	kCLIENT_STATE_CHARACTER_LIST_RECEIVED = 5,
	kCLIENT_STATE_WORLD_LIST_RECEIVED = 6,
	kCLIENT_STATE_WORLD_ENTER1_IN_PROGRESS = 7,
	kCLIENT_STATE_WORLD_ENTER1_COMPLETE = 8,
	kCLIENT_STATE_WORLDSERVER_CONNECT_IN_PROGRESS = 9,
	kCLIENT_STATE_WORLDSERVER_CONNECT_COMPLETE = 10,
	kCLIENT_STATE_WORLD_ENTER2_IN_PROGRESS = 11,
	kCLIENT_STATE_WORLD_ENTER2_IN_QUEUE = 12,
	kCLIENT_STATE_WORLD_ENTER2_COMPLETE = 13,
	kCLIENT_STATE_DISTRICT_ENTER1_IN_PROGRESS = 14,
	kCLIENT_STATE_DISTRICT_ENTER1_COMPLETE = 15,
	kCLIENT_STATE_DISTRICTSERVER_CONNECT_IN_PROGRESS = 16,
	kCLIENT_STATE_DISTRICTSERVER_CONNECT_COMPLETE = 17,
	kCLIENT_STATE_DISTRICT_ENTER2_IN_PROGRESS = 18,
	kCLIENT_STATE_DISTRICT_ENTER2_COMPLETE = 19,
	kCLIENT_STATE_DISTRICT_EXIT_IN_PROGRESS = 20,
	kCLIENT_STATE_LOGOUT_IN_PROGRESS = 21,
	kCLIENT_STATE_MAX = 22,
};
enum etClientDisconnectReason
{
	kCLIENT_DISCONNECT_REASON_NONE = 0,
	kCLIENT_DISCONNECT_REASON_RETURN_TO_LOGIN = 1,
	kCLIENT_DISCONNECT_REASON_RETURN_TO_LOBBY = 2,
	kCLIENT_DISCONNECT_REASON_KICK_DUPLICATE_LOGIN = 3,
	kCLIENT_DISCONNECT_REASON_KICK_GM = 4,
	kCLIENT_DISCONNECT_REASON_KICK_AFK = 5,
	kCLIENT_DISCONNECT_REASON_KICK_TEAMKILLS = 6,
	kCLIENT_DISCONNECT_REASON_KICK_PUNKBUSTER = 7,
	kCLIENT_DISCONNECT_REASON_PACKAGE_VERIFICATION_FAILED = 8,
	kCLIENT_DISCONNECT_REASON_KICK_VIOLATION = 9,
	kCLIENT_DISCONNECT_REASON_NO_BOUND_ACCOUNT = 10,
	kCLIENT_DISCONNECT_REASON_RETRY_INTEGRATION_LOGIN = 11,
	kCLIENT_DISCONNECT_REASON_KICK_CHATFLOOD = 12,
	kCLIENT_DISCONNECT_REASON_KICK_SUICIDES = 13,
	kCLIENT_DISCONNECT_REASON_KICK_WMI_FAILED = 14,
	kCLIENT_DISCONNECT_REASON_KICK_HARDWARE_BANNED = 15,
	kCLIENT_DISCONNECT_REASON_MAX = 16,
};
enum etSpawnSystem
{
	SPAWN_Hub = 0,
	SPAWN_Elective = 1,
	SPAWN_MissionNearest = 2,
	SPAWN_MissionTotallyRandom = 3,
	SPAWN_SecondNearestHub = 4,
	SPAWN_MAX = 5,
};
enum etAutoReadyState
{
	AutoReadyState_None = 0,
	AutoReadyState_CooldownBeforeAutoReadyTimer = 1,
	AutoReadyState_CoolDownBeforeAutoReady_Done = 2,
	AutoReadyState_AutoReadyTimer = 3,
	AutoReadyState_Suspended = 4,
	AutoReadyState_ManualSelection = 5,
	AutoReadyState_MAX = 6,
};
enum etTaggerType
{
	eTT_None = 0,
	eTT_Tagger = 1,
	eTT_Spotter = 2,
	eTT_MAX = 3,
};
enum etElectiveSpawnUnavailableReason
{
	eElectiveSpawnUnavailableReason_None = 0,
	eElectiveSpawnUnavailableReason_IsVIP = 1,
	eElectiveSpawnUnavailableReason_Suicide = 2,
	eElectiveSpawnUnavailableReason_TeamKill = 3,
	eElectiveSpawnUnavailableReason_MAX = 4,
};
enum etItemOperation
{
	Operation_ApplyFnMod = 0,
	Operation_Consume = 1,
	Operation_Copy = 2,
	Operation_Destroy = 3,
	Operation_Refurbish = 4,
	Operation_Rename = 5,
	Operation_SellToVendor = 6,
	Operation_SetStartTime = 7,
	Operation_SetExpiryTime = 8,
	Operation_SetNumCharges = 9,
	Operation_SplitStack = 10,
	Operation_CombineStack = 11,
	Operation_Deploy = 12,
	Operation_DeployFnMod = 13,
	Operation_Undeploy = 14,
	Operation_UndeployFnMod = 15,
	Operation_UnapplyFnMod = 16,
	Operation_ApplyWeaponSkin = 17,
	Operation_ApplyTitle = 18,
	Operation_Reedit = 19,
	Operation_MAX = 20,
};
enum etGM_ErrorCode
{
	eGM_Success = 0,
	eGM_PlayerNotFound = 1,
	eGM_PlayerDead = 2,
	eGM_CommandForbiddenInVehicle = 3,
	eGM_InvalidLocation = 4,
	eGM_NoVehicleUnderReticule = 5,
	eGM_GMDead = 6,
	eGM_NotAllowedOnYourself = 7,
	eGM_MAX = 8,
};
enum etPlayerInteractionState
{
	ePIS_None = 0,
	ePIS_Contact = 1,
	ePIS_MailBox = 2,
	ePIS_DisplayPoint = 3,
	ePIS_Garage = 4,
	ePIS_Wardrobe = 5,
	ePIS_Persona = 6,
	ePIS_SymbolEditor = 7,
	ePIS_MarketPlace = 8,
	ePIS_MusicStudio = 9,
	ePIS_Max = 10,
};
enum AtAutoReachedPositionReturnValue
{
	AtAutoReachedPositionReturnValue_Fail = 0,
	AtAutoReachedPositionReturnValue_NormalSucess = 1,
	AtAutoReachedPositionReturnValue_StateFinished = 2,
	AtAutoReachedPositionReturnValue_MAX = 3,
};
enum etPlayerEventTypes
{
	kPlayerEvent_PickedUpItem = 0,
	kPlayerEvent_DroppedItem = 1,
	kPlayerEvent_PassItemToPlayer = 2,
	kPlayerEvent_PassItemToCargoHold = 3,
	kPlayerEvent_ReceiveItemFromPlayer = 4,
	kPlayerEvent_ReceiveItemFromCargoHold = 5,
	kPlayerEvent_EnteredVehicle = 6,
	kPlayerEvent_LeftVehicle = 7,
	kPlayerEvent_Died = 8,
	kPlayerEvent_Arrested = 9,
	kPlayerEvent_Rescued = 10,
	kPlayerEvent_LostConsciousness = 11,
	kPlayerEvent_RegainedConsciousness = 12,
	kPlayerEvent_BeginCSA = 13,
	kPlayerEvent_EndCSA = 14,
	kPlayerEvent_MAX = 15,
};
enum etBotPlayerState
{
	BOTPS_None = 0,
	BOTPS_SoakTest = 1,
	BOTPS_BudgetTrackerAutomation = 2,
	BOTPS_MAX = 3,
};
enum etDistrictState
{
	kDISTRICT_STATE_DISCONNECTED = 0,
	kDISTRICT_STATE_WORLDSERVER_LISTENING = 1,
	kDISTRICT_STATE_WORLDSERVER_CONNECT_IN_PROGRESS = 2,
	kDISTRICT_STATE_WORLDSERVER_CONNECT_COMPLETE = 3,
	kDISTRICT_STATE_WORLDSERVER_DEV_ATTACH_IN_PROGRESS = 4,
	kDISTRICT_STATE_WORLDSERVER_DEV_ATTACH_COMPLETE = 5,
	kDISTRICT_STATE_WORLDSERVER_ATTACH_IN_PROGRESS = 6,
	kDISTRICT_STATE_WORLDSERVER_ATTACH_COMPLETE = 7,
	kDISTRICT_STATE_MAX = 8,
};
enum etJunctionState
{
	JS_DefaultState = 0,
	JS_PrepareToHalt = 1,
	JS_VehiclesCrossing = 2,
	JS_WaitForPedsToClear = 3,
	JS_WaitForVehiclesToClear = 4,
	JS_PedsCrossing = 5,
	JS_MAX = 6,
};
enum etTrafficLightState
{
	kTL_Red = 0,
	kTL_Amber = 1,
	kTL_Green = 2,
	kTL_MAX = 3,
};
enum etTrafficLightGroup
{
	kTLG_None = 0,
	kTLG_One = 1,
	kTLG_Two = 2,
	kTLG_Three = 3,
	kTLG_Four = 4,
	kTLG_MAX = 5,
};
enum etRole
{
	eInvalid = 0,
	eEditor = 1,
	eStandAlone = 2,
	eServer = 3,
	eClient = 4,
	etRole_MAX = 5,
};
enum etLCM_State
{
	eLCM_None = 0,
	eLCM_WaitingForDependencies = 1,
	eLCM_Active = 2,
	eLCM_MAX = 3,
};
enum etTaskObjectiveState
{
	eTOS_Pending = 0,
	eTOS_InProgress = 1,
	eTOS_CompletedOwners = 2,
	eTOS_CompletedOpposition = 3,
	eTOS_CompletedDraw = 4,
	eTOS_EndedNoWinner = 5,
	eTOS_MAX = 6,
};
enum etEscapePenaltyType
{
	eEPT_WitnessableCrime = 0,
	eEPT_HeatAction = 1,
	eEPT_WeaponFired = 2,
	eEPT_TakeDamage = 3,
	eEPT_Arrested = 4,
	eEPT_ArrestOpponent = 5,
	eEPT_Killed = 6,
	eEPT_KillOpponent = 7,
	eEPT_MAX = 8,
};
enum etPendingCSAType
{
	ePT_None = 0,
	ePT_AutoRoute = 1,
	ePT_CSAEnd = 2,
	ePT_MAX = 3,
};
enum etSpawnBayState
{
	kDefaultUnoccupied = 0,
	kUsedUnoccupied = 1,
	kUsedOccupied = 2,
	etSpawnBayState_MAX = 3,
};
enum EPropState
{
	PROPSTATE_None = 0,
	PROPSTATE_Prepare = 1,
	PROPSTATE_Neutral = 2,
	PROPSTATE_Running = 3,
	PROPSTATE_Disabled = 4,
	PROPSTATE_MAX = 5,
};
enum EPropType
{
	PROPTYPE_FullLogical = 0,
	PROPTYPE_FullCosmetic = 1,
	PROPTYPE_Hybrid = 2,
	PROPTYPE_MAX = 3,
};
enum etPedEvent
{
	kPE_Spawn = 0,
	kPE_Destroy = 1,
	kPE_MAX = 2,
};
enum etNPCEjectAnimation
{
	NEA_Driver_Being_Ejected_None = 0,
	NEA_Driver_Being_Ejected_Initial_Criminal = 1,
	NEA_Driver_Being_Ejected_Initial_Enforcer = 2,
	NEA_Driver_Being_Ejected_Later_Criminal = 3,
	NEA_Driver_Being_Ejected_Later_Enforcer = 4,
	NEA_Driver_Being_Ejected_From_Passenger_Side_Initial_Criminal = 5,
	NEA_Driver_Being_Ejected_From_Passenger_Side_Initial_Enforcer = 6,
	NEA_Driver_Being_Ejected_From_Passenger_Side_Later_Criminal = 7,
	NEA_Driver_Being_Ejected_From_Passenger_Side_Later_Enforcer = 8,
	NEA_Driver_Being_Ejected_MAX = 9,
};
enum EHMReplicationType
{
	HMReplicationType_All = 0,
	HMReplicationType_DataOnly = 1,
	HMReplicationType_TextOnly = 2,
	HMReplicationType_MAX = 3,
};
enum etSetupTypeNPCClasses
{
	kSTN_None = 0,
	kSTN_Pedestrian = 1,
	kSTN_Vehicle = 2,
	kSTN_MAX = 3,
};
enum etTimerState
{
	kTS_None = 0,
	kTS_Active = 1,
	kTS_Aborted = 2,
	kTS_Completed = 3,
	kTS_MAX = 4,
};
enum etTaskItemState
{
	TaskItemState_Initial = 0,
	TaskItemState_Pickup = 1,
	TaskItemState_PlayerInventory = 2,
	TaskItemState_Cargo = 3,
	TaskItemState_Delivered = 4,
	TaskItemState_Delivered_Pickup = 5,
	TaskItemState_Invalid = 6,
	TaskItemState_MAX = 7,
};
enum etToDManagerEvent
{
	eToDEvent_PeriodTransition = 0,
	eToDEvent_MAX = 1,
};
enum eOutput_CheckHostingClientState
{
	eCheckHostingClientState_Success = 0,
	eCheckHostingClientState_Failure = 1,
	eCheckHostingClientState_Failure_NonHosted = 2,
	eCheckHostingClientState_MAX = 3,
};
enum etUVBleedBuildState
{
	kUBBS_Null = 0,
	kUBBS_DuplicateMesh = 1,
	kUBBS_SeamExtrude = 2,
	kUBBS_InitRHI = 3,
	kUBBS_MAX = 4,
};
enum etCurrentCargoType
{
	eCargoType_None = 0,
	eCargoType_Passengers = 1,
	eCargoType_TaskItems = 2,
	eCargoType_MAX = 3,
};
enum etObjectAheadType
{
	kOAT_None = 0,
	kOAT_Bend = 1,
	kOAT_EndOfRoute = 2,
	kOAT_Junction = 3,
	kOAT_NPCVehicle = 4,
	kOAT_Obstacle = 5,
	kOAT_MAX = 6,
};
enum etLightsPattern
{
	LightsPattern_None = 0,
	LightsPattern_TEST = 1,
	LightsPattern_EnforcerPlaceholder = 2,
	LightsPattern_SingleFlashP1P2 = 3,
	LightsPattern_TrebleFlashP1P2 = 4,
	LightsPattern_P1P6 = 5,
	LightsPattern_P1P6Return = 6,
	LightsPattern_P1P6Inside = 7,
	LightsPattern_TrebleFlashP1 = 8,
	LightsPattern_MAX = 9,
};
enum eRenderStates
{
	eDelta = 0,
	eWorldRoutes = 1,
	eBestRoutes = 2,
	eNewRoutes = 3,
	eRenderStates_MAX = 4,
};
enum etVehicleTextureBuildState
{
	kVTBS_Null = 0,
	kVTBS_Exterior_Setup = 1,
	kVTBS_Exterior_Clear_Decals = 2,
	kVTBS_Exterior_Build_Decals = 3,
	kVTBS_Exterior_GenerateUVMask = 4,
	kVTBS_Exterior_Decals_Dilate = 5,
	kVTBS_Exterior_Diffuse_Base = 6,
	kVTBS_Exterior_Diffuse_Parts = 7,
	kVTBS_Exterior_Diffuse_LicencePlate = 8,
	kVTBS_Exterior_Normal_Base = 9,
	kVTBS_Exterior_Normal_Parts = 10,
	kVTBS_Exterior_Normal_LicencePlate = 11,
	kVTBS_Exterior_Diffuse_MergeDecals = 12,
	kVTBS_Exterior_Normal_MergeDecals = 13,
	kVTBS_Exterior_Emissive_Base = 14,
	kVTBS_Exterior_Emissive_Parts = 15,
	kVTBS_Exterior_Generate_Diffuse = 16,
	kVTBS_Exterior_Generate_Normal = 17,
	kVTBS_Exterior_Generate_Emissive = 18,
	kVTBS_Interior_Setup = 19,
	kVTBS_Interior_Diffuse_Base = 20,
	kVTBS_Interior_Diffuse_Parts = 21,
	kVTBS_Interior_Normal_Base = 22,
	kVTBS_Interior_Normal_Parts = 23,
	kVTBS_Interior_Emissive_Base = 24,
	kVTBS_Interior_Emissive_Parts = 25,
	kVTBS_Interior_Generate_Diffuse = 26,
	kVTBS_Interior_Generate_Normal = 27,
	kVTBS_Interior_Generate_Emissive = 28,
	kVTBS_Wheels_Setup = 29,
	kVTBS_Wheels_Diffuse_Parts = 30,
	kVTBS_Wheels_Normal_Parts = 31,
	kVTBS_Wheels_Generate_Diffuse = 32,
	kVTBS_Wheels_Generate_Normal = 33,
	kVTBS_MAX = 34,
};
enum etVehicleValidatorState
{
	kVVS_Null = 0,
	kVVS_DecompressAssetCustomisation = 1,
	kVVS_CheckVehicleType = 2,
	kVVS_StripCustomisation = 3,
	kVVS_FixupBackwardsCompatibility = 4,
	kVVS_RemoveWrongFactionComponents = 5,
	kVVS_FixupMandatoryComponents = 6,
	kVVS_LoadAddedMandatoryComponents = 7,
	kVVS_Complete = 8,
	kVVS_MAX = 9,
};
enum etVehicleValidatorType
{
	kVVT_Null = 0,
	kVVT_V_A_Roadster = 1,
	kVVT_V_C_Carrying = 2,
	kVVT_V_E_Carrying = 3,
	kVVT_V_E_Perf = 4,
	kVVT_V_A_ExecSaloon = 5,
	kVVT_V_E_Compact = 6,
	kVVT_V_C_Perf = 7,
	kVVT_V_A_ClassicMuscle = 8,
	kVVT_MAX = 9,
};
enum etMeshBuildState
{
	kMBS_Null = 0,
	kMBS_LoadMorphs = 1,
	kMBS_CloneMorphs = 2,
	kMBS_CalculateSegmentRemovedFlags = 3,
	kMBS_CreateTextureLayout = 4,
	kMBS_BakeMorphs = 5,
	kMBS_UpdateTexCoords = 6,
	kMBS_RemoveSegments = 7,
	kMBS_FixTangentSpace = 8,
	kMBS_AddMeshFragments = 9,
	kMBS_SortMorphVertsByIndex = 10,
	kMBS_AccumulateHairMorphs = 11,
	kMBS_AppendHairMesh = 12,
	kMBS_BakeHairMorphs = 13,
	kMBS_SetupShapeMorphsHeightScaling = 14,
	kMBS_ShapeMorphsAndScaleVerts = 15,
	kMBS_ScaleReferenceSkeleton = 16,
	kMBS_RemoveCulledVertices = 17,
	kMBS_RebuildTangentSpace = 18,
	kMBS_BuildShadowInformation = 19,
	kMBS_InitSkelMeshRHI = 20,
	kMBS_MAX = 21,
};
enum etPrimaryLightDataType
{
	kPLDT_Colour = 0,
	kPLDT_Direction = 1,
	kPLDT_SkyColour = 2,
	kPLDT_VFXLightColour = 3,
	kPLDT_MAX = 4,
};
enum etTextureAddress
{
	kClamp = 0,
	kWrap = 1,
	kMirror = 2,
	kBorder = 3,
	etTextureAddress_MAX = 4,
};
enum etTextureBlend
{
	kAlpha = 0,
	kAdditive = 1,
	kMultiplicative = 2,
	kAlphaTest = 3,
	etTextureBlend_MAX = 4,
};
enum etProjectionMode
{
	kPerspective = 0,
	kOrthogonal = 1,
	kCylindrical = 2,
	etProjectionMode_MAX = 3,
};
enum etAnimationDescriptor
{
	None = 0,
	ClimbFence2m = 1,
	ClimbFence3m = 2,
	Default = 3,
	KickDoorBack = 4,
	KickDoorFront = 5,
	LadderDownCurvedTop4m = 6,
	LadderDownCurvedTop4mTired = 7,
	LadderDownCurvedTop8m = 8,
	LadderDownCurvedTop8mTired = 9,
	LadderDownStraightTop4m = 10,
	LadderDownStraightTop4mTired = 11,
	LadderDownStraightTop8m = 12,
	LadderDownStraightTop8mTired = 13,
	LadderUpCurvedTop4m = 14,
	LadderUpCurvedTop4mTired = 15,
	LadderUpCurvedTop8m = 16,
	LadderUpCurvedTop8mTired = 17,
	LadderUpStraightTop4m = 18,
	LadderUpStraightTop4mTired = 19,
	LadderUpStraightTop8m = 20,
	LadderUpStraightTop8mTired = 21,
	etAnimationDescriptor_MAX = 22,
};
enum etAnimTreeDecision_EquippedItem
{
	None = 0,
	AssaultRifle = 1,
	BeanBagGun = 2,
	ShotGun = 3,
	SniperRifle = 4,
	SubMachineGun = 5,
	Pistol = 6,
	Snub = 7,
	GrenadeLauncher = 8,
	HeavyMachineGun = 9,
	RocketLauncher = 10,
	MachinePistol = 11,
	StarterSubMachineGun = 12,
	Magnum = 13,
	Magnum_Enf = 14,
	SemiAutoRifle = 15,
	DartGun = 16,
	Grenades = 17,
	StunGun = 18,
	StunShotgun = 19,
	Rifle = 20,
	50CalSniperRifle = 21,
	BurstFirePistol = 22,
	TommyGun = 23,
	MachinePistol_2Hand = 24,
	AssaultRifle_OTAC = 25,
	Rifle_OOS = 26,
	Pistol_Blowtorch = 27,
	FFA-Grip = 28,
	EOL = 29,
	MachinePistol_SMGReload = 30,
	SemiAutoSniper_BullpupReload = 31,
	SemiAutoSniper_BullpupReload_ForeGrip = 32,
	Pistol_ForeGrip = 33,
	Revolver_SingleShotReload = 34,
	Automatic_BullpupReload_NoForeGrip = 35,
	etAnimTreeDecision_EquippedItem_MAX = 36,
};
enum etAnimTreeDecision_Vehicle
{
	None = 0,
	StandardCar = 1,
	StandardVan = 2,
	VanSlideDoor = 3,
	StandardTruck = 4,
	etAnimTreeDecision_Vehicle_MAX = 5,
};
enum etAPBSupportPages
{
	NotDefined = 0,
	AccountManagementURL = 1,
	ArmasProductURL = 2,
	ArmasStoreCharacterSelectURL = 3,
	ArmasStoreURL = 4,
	BuyCharacterSlotsURL = 5,
	BuyPointsURL = 6,
	CreateAccountURL = 7,
	CreditsURL = 8,
	CurrencyInfo = 9,
	GarageHelpURL = 10,
	HelpMailURL = 11,
	HelpURL = 12,
	KB_Ammo = 13,
	KB_Contact_Interact = 14,
	KB_Contact_LevelUp = 15,
	KB_Contact_Max = 16,
	KB_Inventory = 17,
	KB_Marketplace = 18,
	KB_Mission_Rewards = 19,
	KB_MusicStudio = 20,
	KB_MusicStudio_Locker = 21,
	KB_Notoriety = 22,
	KB_Notoriety_KillPed = 23,
	KB_OpenWorld_Mugging = 24,
	KB_OpenWorld_RamRaid = 25,
	KB_OpenWorld_Vehicles = 26,
	KB_Persona = 27,
	KB_Prestige = 28,
	KB_Prestige_KillPed = 29,
	KB_Settings_Voip = 30,
	KB_Social_Clan = 31,
	KB_Social_GroupsFriends = 32,
	KB_Threat = 33,
	KB_Threat_APBDispatch = 34,
	KB_Witnessing_Crim = 35,
	KB_Witnessing_Enf = 36,
	KnowledgeBaseURL = 37,
	PreOrderURL = 38,
	SupportURL = 39,
	TestURL = 40,
	UpgradeToPremiumCharacterNameCheckURL = 41,
	UpgradeToPremiumCharacterSelectURL = 42,
	UpgradeToPremiumURL = 43,
	Vault = 44,
	Vault_Achievement = 45,
	Vault_Character = 46,
	Vault_Contact = 47,
	Vault_Item = 48,
	Vault_Organisation = 49,
	Vault_Role = 50,
	Vault_WIP = 51,
	WardrobeHelpURL = 52,
	etAPBSupportPages_MAX = 53,
};
enum etBombLevel
{
	Bomb_Investigate = 0,
	Bomb_Level = 1,
	Bomb_Level = 2,
	Bomb_Level = 3,
	Bomb_Level = 4,
	Bomb_MAX = 5,
};
enum etCC_ArrayPurchaseElement
{
	Scars = 0,
	Tattoos = 1,
	FacialHair = 2,
	etCC_ArrayPurchaseElement_MAX = 3,
};
enum etCC_PurchaseElement
{
	BodyPaint = 0,
	Breasts = 1,
	Cheek = 2,
	Chin = 3,
	Curviness = 4,
	Ears = 5,
	EyeBrow_Color = 6,
	EyeBrows_Shape = 7,
	EyeLids = 8,
	Face = 9,
	FacePaint = 10,
	FacialHair = 11,
	Forehead = 12,
	Hair_Color = 13,
	Hair_Style = 14,
	Height = 15,
	Lips = 16,
	LipSize = 17,
	LipsShape = 18,
	MakeUp_Blusher = 19,
	MakeUp_EyeLiner = 20,
	MakeUp_EyeShadow = 21,
	MakeUp_Lipstick = 22,
	MakeUP_Mascara = 23,
	MakeUp_NailVarnish = 24,
	MolesFreckles = 25,
	Muscles = 26,
	Nose = 27,
	OcularStructure = 28,
	PresetTattoo = 29,
	Scars = 30,
	Skin = 31,
	SkinPigment = 32,
	SkinTone = 33,
	Tattoos = 34,
	Weight = 35,
	ContactLenses = 36,
	etCC_PurchaseElement_MAX = 37,
};
enum etCharacterCustomisationOverride
{
	None = 0,
	Minigame_Infection_Headless = 1,
	Minigame_Infection_Pumpkin = 2,
	Christmas_Elf = 3,
	Christmas_Santa = 4,
	Easter_Invulnerable = 5,
	etCharacterCustomisationOverride_MAX = 6,
};
enum etCharacterInteractionMenu
{
	0 = 0,
	1 = 1,
	2 = 2,
	3 = 3,
	4 = 4,
	5 = 5,
	etCharacterInteractionMenu_MAX = 6,
};
enum etClothingItemCategory
{
	None = 0,
	ClothingAccessoryClothing = 1,
	ClothingAccessoryEquipment = 2,
	ClothingAccessoryOther = 3,
	ClothingArmourPads = 4,
	ClothingArmourVests = 5,
	ClothingBadges = 6,
	ClothingBeltHigh = 7,
	ClothingBeltLoose = 8,
	ClothingBeltLow = 9,
	ClothingBodyHair = 10,
	ClothingBottomsShorts = 11,
	ClothingBottomsTrousers = 12,
	ClothingContact = 13,
	ClothingEyewearGlasses = 14,
	ClothingEyewearOther = 15,
	ClothingEyewearSunglasses = 16,
	ClothingFacialHair = 17,
	ClothingFootwearBoots = 18,
	ClothingFootwearShoes = 19,
	ClothingFootwearSocks = 20,
	ClothingHandwearGloves = 21,
	ClothingHandwearOther = 22,
	ClothingHeadwearHats = 23,
	ClothingHeadwearOther = 24,
	ClothingJewelleryOther = 25,
	ClothingJewelryBracelets = 26,
	ClothingJewelryEarrings = 27,
	ClothingJewelryNecklaces = 28,
	ClothingJewelryPiercing = 29,
	ClothingJewelryRings = 30,
	ClothingMaskFace = 31,
	ClothingMaskHalf = 32,
	ClothingMaskHead = 33,
	ClothingNotForRelease = 34,
	ClothingOverall = 35,
	ClothingSkirtsAndDressesDresses = 36,
	ClothingSkirtsAndDressesSkirts = 37,
	ClothingTest = 38,
	ClothingTopCoat = 39,
	ClothingTopTop = 40,
	ClothingUnderwearBra = 41,
	ClothingUnderwearHosiery = 42,
	ClothingUnderwearPants = 43,
	ClothingWebbingBasic = 44,
	ClothingWebbingChestConfig = 45,
	ClothingWebbingLegConfig = 46,
	ClothingWebbingShoulderConfig = 47,
	etClothingItemCategory_MAX = 48,
};
enum etConsoleCommand
{
	(GM) Browser = 0,
	(GM) Clear Minigame Queue = 1,
	(GM) End Conversation = 2,
	(GM) End Minigame = 3,
	(GM) End Mission = 4,
	(GM) End Profile Sequence = 5,
	(GM) Enqueue Minigame = 6,
	(GM) Free Fly Camera Absolute Axes = 7,
	(GM) Free Fly Camera Director = 8,
	(GM) Free Fly Camera Mode = 9,
	(GM) Free Fly Camera Speed = 10,
	(GM) Freeze Player = 11,
	(GM) GB Message = 12,
	(GM) Goto Player = 13,
	(GM) Inspect Player = 14,
	(GM) Kick Player = 15,
	(GM) Minigames: Add Prefered VIP Target = 16,
	(GM) Minigames: Remove Prefered VIP Target = 17,
	(GM) Repair Vehicle = 18,
	(GM) Set Chat Tag = 19,
	(GM) Set Opposition = 20,
	(GM) Set Run Speed = 21,
	(GM) Set Time of Day = 22,
	(GM) Set heat level = 23,
	(GM) Silence = 24,
	(GM) Spawn Camera Light = 25,
	(GM) Spectate = 26,
	(GM) Start Mission = 27,
	(GM) Start Profile Sequence = 28,
	(GM) Summon Player = 29,
	(GM) Teleport = 30,
	(GM) Toggle Chat Tag = 31,
	(GM) Toggle FPS Detail = 32,
	(GM) Toggle GM Identifier = 33,
	(GM) Toggle Invisibility = 34,
	(GM) Toggle Invulnerability = 35,
	(GM) Toggle Minigame Spawning = 36,
	(GM) Toggle Mission Offers = 37,
	(GM) Toggle PunkBuster = 38,
	(GM) Toggle Time of Day = 39,
	(GM) UnFreeze Player = 40,
	(GM) Unlock Contact = 41,
	(GM) Unsilence Player = 42,
	(GM) Unspectate = 43,
	Abandon Mission = 44,
	Accept Clan Invite = 45,
	Accept Group Invite = 46,
	Add Friend = 47,
	Cancel Unstick = 48,
	Clan Invite = 49,
	Clan Leave = 50,
	Clan Remove = 51,
	Exit = 52,
	Group Info = 53,
	Group Invite = 54,
	Group Invite Mode  = 55,
	Group Invite Mode Default = 56,
	Group Join = 57,
	Group List = 58,
	Group Public Mode  = 59,
	Group Public Mode Default = 60,
	Group Remove = 61,
	Help = 62,
	Ignore Player = 63,
	LatencyTest = 64,
	Leave Group = 65,
	Logout = 66,
	Looking For Group = 67,
	Player List = 68,
	Remove Friend = 69,
	Report Player = 70,
	Save Chat Log = 71,
	Set AFK = 72,
	Set Available = 73,
	Set DND = 74,
	Show Names = 75,
	Time = 76,
	Time Played = 77,
	Toggle FPS = 78,
	Toggle Profanity Filter = 79,
	Toggle Timestamps = 80,
	Transfer Group Leadership = 81,
	Unignore = 82,
	Unstick = 83,
	World Population = 84,
	etConsoleCommand_MAX = 85,
};
enum etContact
{
	None = 0,
	Financial_C1 = 1,
	Financial_C2 = 2,
	Waterfront_C3 = 3,
	Waterfront_C1 = 4,
	Financial_C4 = 5,
	Financial_C6 = 6,
	Waterfront_C5 = 7,
	Waterfront_C10 = 8,
	Financial_C5 = 9,
	Waterfront_C2 = 10,
	Financial_C9 = 11,
	Financial_C10 = 12,
	Waterfront_C6 = 13,
	Financial_C3 = 14,
	Waterfront_C7 = 15,
	Financial_C8 = 16,
	Waterfront_C8 = 17,
	Financial_C7 = 18,
	Waterfront_C9 = 19,
	Waterfront_C4 = 20,
	Social = 21,
	Social = 22,
	Financial_E8 = 23,
	Financial_E4 = 24,
	Waterfront_E2 = 25,
	Waterfront_E9 = 26,
	Financial_E5 = 27,
	Financial_E10 = 28,
	Waterfront_E4 = 29,
	Waterfront_E1 = 30,
	Financial_E6 = 31,
	Waterfront_E10 = 32,
	Financial_E2 = 33,
	Financial_E9 = 34,
	Waterfront_E5 = 35,
	Financial_E3 = 36,
	Waterfront_E6 = 37,
	Financial_E7 = 38,
	Waterfront_E7 = 39,
	Financial_E1 = 40,
	Waterfront_E8 = 41,
	Waterfront_E3 = 42,
	Social = 43,
	Social = 44,
	Pinky = 45,
	Binky = 46,
	Inky = 47,
	Winky = 48,
	Clyde = 49,
	CriminalDefaultOrganisation = 50,
	EnforcerDefaultOrganisation = 51,
	Organisation_RedRain = 52,
	Organisation_Praetorian = 53,
	Organisation_GKings = 54,
	Organisation_BloodRoses = 55,
	Organisation_SPPD = 56,
	Organisation_PrentissTigers = 57,
	Financial_C11 = 58,
	Financial_Halloween_E1 = 59,
	Financial_C12 = 60,
	Financial_Halloween_C1 = 61,
	Organisation_Seasonal_Enf = 62,
	Financial_E11 = 63,
	Organisation_Seasonal_Crim = 64,
	Financial_E12 = 65,
	Waterfront_C11 = 66,
	Waterfront_C12 = 67,
	Waterfront_E11 = 68,
	Waterfront_E12 = 69,
	Financial_C11_Dummy1 = 70,
	Financial_C11_Dummy2 = 71,
	Financial_C11_Dummy3 = 72,
	Organisation_JokerDistribution = 73,
	Social_Armas_Unlocks = 74,
	Social_Armas = 75,
	LCTester1 = 76,
	LCTester2 = 77,
	LCTester3 = 78,
	Financial_E11_Dummy1 = 79,
	Seasonal_Christmas_Enf = 80,
	Seasonal_Christmas_Crim = 81,
	Organisation_JokerAffiliates = 82,
	Social_Joker_Affiliate = 83,
	ProvingGrounds_Asylum_Enf = 84,
	ProvingGrounds_Asylum_Crim = 85,
	Chaos_Financial = 86,
	Chaos_Waterfront = 87,
	etContact_MAX = 88,
};
enum etCSA_InputMapping
{
	None = 0,
	Equipment = 1,
	Primary = 2,
	Secondary = 3,
	Inventory = 4,
	DropTaskItem = 5,
	Tertiary = 6,
	Locker = 7,
	etCSA_InputMapping_MAX = 8,
};
enum etDefaultOutfitItem
{
	Clothing_Preset_Male_Top_Default_Criminal_AShirt = 0,
	Clothing_Preset_Male_Trousers_Default_Criminal_WarmUpPants = 1,
	Clothing_Preset_Male_Top_Default_Enforcer_RingerT = 2,
	Clothing_Preset_Male_Trousers_Default_Enforcer_WarmUpPants = 3,
	Clothing_M_Footwear_Trainers_Urban_HipHopYoDawg = 4,
	Clothing_M_Underwear_Boxers_Athletic_Drawstring = 5,
	Clothing_Preset_Female_Top_Default_Criminal_TankTop = 6,
	Clothing_Preset_Female_Trousers_Default_Criminal_WarmUpPants = 7,
	Clothing_Preset_Female_Top_Default_Enforcer_RingerT = 8,
	Clothing_Preset_Female_Trousers_Default_Enforcer_WarmUpPants = 9,
	Clothing_F_Footwear_Trainers_Urban_Plain = 10,
	Clothing_F_Underwear_Bra_Functional_Plain = 11,
	Clothing_F_Underwear_Shorties_Functional_Plain = 12,
	Clothing_MAX = 13,
};
enum etDisplayPoint
{
	None = 0,
	Financial_Display_Graffiti_01 = 1,
	Financial_Display_Graffiti_02 = 2,
	Financial_Display_Graffiti_03 = 3,
	Financial_Display_Graffiti_04 = 4,
	Financial_Display_Graffiti_05 = 5,
	Financial_Display_Graffiti_06 = 6,
	Financial_Display_Graffiti_07 = 7,
	Financial_Display_Graffiti_08 = 8,
	Financial_Display_Graffiti_09 = 9,
	Financial_Display_Graffiti = 10,
	Financial_Display_Graffiti = 11,
	Financial_Display_Graffiti = 12,
	Financial_Display_Graffiti = 13,
	Financial_Display_Graffiti = 14,
	Financial_Display_Graffiti = 15,
	Financial_Display_Graffiti = 16,
	Financial_Display_Graffiti = 17,
	Financial_Display_Graffiti = 18,
	Financial_Display_Graffiti = 19,
	Financial_Display_Graffiti = 20,
	Financial_Display_Graffiti = 21,
	Financial_Display_Graffiti = 22,
	Financial_Display_Graffiti = 23,
	Financial_Display_Graffiti = 24,
	Financial_Display_Graffiti = 25,
	Financial_Display_Graffiti = 26,
	Financial_Display_Graffiti = 27,
	Financial_Display_Graffiti = 28,
	Financial_Display_Graffiti = 29,
	Financial_Display_Graffiti = 30,
	Financial_Display_Graffiti = 31,
	Financial_Display_Graffiti = 32,
	Financial_Display_Graffiti = 33,
	Financial_Display_Graffiti = 34,
	Financial_Display_Graffiti = 35,
	Financial_Display_Graffiti = 36,
	Financial_Display_Graffiti = 37,
	Financial_Display_Graffiti = 38,
	Financial_Display_Graffiti = 39,
	Financial_Display_Graffiti = 40,
	Financial_Display_Graffiti = 41,
	Financial_Display_Graffiti = 42,
	Financial_Display_Graffiti = 43,
	Financial_Display_Graffiti = 44,
	Financial_Display_Graffiti = 45,
	Financial_Display_Graffiti = 46,
	Financial_Display_Graffiti = 47,
	Financial_Display_Graffiti = 48,
	Financial_Display_Graffiti = 49,
	Financial_Display_Graffiti = 50,
	Financial_League_Statue01 = 51,
	Financial_League_Statue02 = 52,
	Financial_League_Statue03 = 53,
	Financial_League_Statue04 = 54,
	Financial_League_Statue05 = 55,
	Financial_League_Statue06 = 56,
	Financial_League_Statue07 = 57,
	PGBeacon_Free_01 = 58,
	PGBeacon_Free_02 = 59,
	PGBeacon_Free_03 = 60,
	PGCrate_Free_01 = 61,
	PGCrate_Free_02 = 62,
	PGCrate_Free_03 = 63,
	PGCrate_Free_04 = 64,
	PGCrate_Free_05 = 65,
	PGCrate_Free_06 = 66,
	PGCrate_Free_Audio_01 = 67,
	Social_Free_Audio_01 = 68,
	Social_Free_Audio_02 = 69,
	Social_Free_Audio_03 = 70,
	Social_Free_Audio_04 = 71,
	Social_Free_Audio_05 = 72,
	Social_Free_Audio_06 = 73,
	Social_Free_Graffiti_01 = 74,
	Social_Free_Graffiti_02 = 75,
	Social_Free_Graffiti_03 = 76,
	Social_Free_Graffiti_04 = 77,
	Social_Free_Graffiti_05 = 78,
	Social_Free_Graffiti_06 = 79,
	Social_Free_Graffiti_07 = 80,
	Social_Free_Graffiti_08 = 81,
	Social_Free_Graffiti_09 = 82,
	Social_Free_Graffiti = 83,
	Social_Free_Graffiti = 84,
	Social_Free_Graffiti = 85,
	Social_Free_Graffiti = 86,
	Social_Free_Graffiti = 87,
	Social_Free_Graffiti = 88,
	Social_Free_Graffiti = 89,
	Social_Free_Graffiti = 90,
	Social_Free_Graffiti = 91,
	Social_Free_Graffiti = 92,
	Social_Free_Graffiti = 93,
	Social_Free_Graffiti = 94,
	Social_Free_Graffiti = 95,
	Social_Free_Vehicle_01 = 96,
	Social_Free_Vehicle_02 = 97,
	Social_Free_Vehicle_03 = 98,
	Social_Free_Vehicle_04 = 99,
	Social_Free_Vehicle_05 = 100,
	Social_Free_Vehicle_06 = 101,
	Social_Free_Vehicle_07 = 102,
	Social_Free_Vehicle_08 = 103,
	Social_Free_Vehicle_09 = 104,
	Social_Free_Vehicle = 105,
	Social_Free_Vehicle = 106,
	Social_Free_Vehicle = 107,
	Social_Free_Vehicle = 108,
	Social_Free_Vehicle = 109,
	Social_Free_Vehicle = 110,
	Social_League_Graffiti_01 = 111,
	Social_League_Graffiti_02 = 112,
	Social_League_Graffiti_03 = 113,
	Social_League_Graffiti_04 = 114,
	Social_League_Graffiti_05 = 115,
	Social_League_Graffiti_06 = 116,
	Social_League_Graffiti_07 = 117,
	Social_League_Graffiti_08 = 118,
	Social_League_Graffiti_09 = 119,
	Social_League_Graffiti = 120,
	Social_League_Graffiti = 121,
	Social_League_Graffiti = 122,
	Social_League_Graffiti = 123,
	Social_League_Graffiti = 124,
	Social_League_Graffiti = 125,
	Social_League_Graffiti = 126,
	Social_League_Graffiti = 127,
	Social_League_Graffiti = 128,
	Social_League_Graffiti = 129,
	Social_League_Graffiti = 130,
	Social_League_Graffiti = 131,
	Social_League_Graffiti = 132,
	Social_League_Graffiti = 133,
	Social_League_Graffiti = 134,
	Social_League_Graffiti = 135,
	Social_League_Graffiti = 136,
	Social_League_Statue01 = 137,
	Social_League_Statue02 = 138,
	Social_League_Statue03 = 139,
	Social_League_Statue04 = 140,
	Social_League_Statue05 = 141,
	Social_League_Statue06 = 142,
	Social_League_Statue07 = 143,
	Social_League_Statue08 = 144,
	Social_League_Statue09 = 145,
	Social_League_Statue10 = 146,
	Social_League_Statue11 = 147,
	Social_League_Statue12 = 148,
	Social_League_Statue13 = 149,
	Social_League_Statue14 = 150,
	Social_League_Statue15 = 151,
	Social_League_Statue16 = 152,
	Social_League_Statue17 = 153,
	Social_League_Statue18 = 154,
	Social_League_Statue19 = 155,
	Social_League_Statue20 = 156,
	Social_League_Statue21 = 157,
	Social_League_Statue22 = 158,
	Social_Purchasable_Graffiti_01 = 159,
	Social_Purchasable_Graffiti_02 = 160,
	Social_Purchasable_Graffiti_03 = 161,
	Social_Purchasable_Graffiti_04 = 162,
	Social_Purchasable_Graffiti_05 = 163,
	Social_Purchasable_Graffiti_06 = 164,
	Social_Purchasable_Graffiti_07 = 165,
	Social_Purchasable_Graffiti_08 = 166,
	Social_Purchasable_Graffiti_09 = 167,
	Social_Purchasable_Graffiti = 168,
	Social_Purchasable_Graffiti = 169,
	Social_Purchasable_Graffiti = 170,
	Social_Purchasable_Graffiti = 171,
	Social_Purchasable_Graffiti = 172,
	Social_Purchasable_Graffiti = 173,
	Social_Purchasable_Graffiti = 174,
	Social_Purchasable_Graffiti = 175,
	Social_Purchasable_Graffiti = 176,
	Social_Purchasable_Graffiti = 177,
	Social_Purchasable_Graffiti = 178,
	Social_Purchasable_Graffiti = 179,
	Social_Purchasable_Graffiti = 180,
	Social_Purchasable_Graffiti = 181,
	Social_Purchasable_Graffiti = 182,
	Social_Purchasable_Graffiti = 183,
	Social_Purchasable_Statue_01 = 184,
	Social_Purchasable_Statue_02 = 185,
	Social_Purchasable_Statue_03 = 186,
	Social_Purchasable_Statue_04 = 187,
	Social_Purchasable_Statue_05 = 188,
	Social_Purchasable_Statue_06 = 189,
	Social_Purchasable_Statue_07 = 190,
	Social_Purchasable_Statue_08 = 191,
	Social_Purchasable_Statue_09 = 192,
	Social_Purchasable_Statue = 193,
	Social_Purchasable_Statue = 194,
	Social_Purchasable_Statue = 195,
	Social_Purchasable_Statue = 196,
	Social_Purchasable_Statue = 197,
	Social_Purchasable_Statue = 198,
	Social_Purchasable_Statue = 199,
	Social_Purchasable_Statue = 200,
	Social_Purchasable_Statue = 201,
	Social_Purchasable_Statue = 202,
	Social_Purchasable_Statue = 203,
	Social_Purchasable_Vehicle_01 = 204,
	Social_Purchasable_Vehicle_02 = 205,
	Social_Purchasable_Vehicle_03 = 206,
	Social_Purchasable_Vehicle_04 = 207,
	Social_Purchasable_Vehicle_05 = 208,
	Social_Purchasable_Vehicle_06 = 209,
	Social_Purchasable_Vehicle_07 = 210,
	Social_Purchasable_Vehicle_08 = 211,
	Social_Purchasable_Vehicle_09 = 212,
	Test_Audio = 213,
	Test_Graffiti = 214,
	Test_Graffiti = 215,
	Test_Statue = 216,
	Test_Vehicle_Criminal = 217,
	Test_Vehicle_Criminal = 218,
	Test_Vehicle_Enforcer = 219,
	Test_Vehicle_Enforcer = 220,
	Waterfront_Free_Graffiti_01 = 221,
	Waterfront_Free_Graffiti_02 = 222,
	Waterfront_Free_Graffiti_03 = 223,
	Waterfront_Free_Graffiti_04 = 224,
	Waterfront_Free_Graffiti_05 = 225,
	Waterfront_Free_Graffiti_06 = 226,
	Waterfront_Free_Graffiti_07 = 227,
	Waterfront_Free_Graffiti_08 = 228,
	Waterfront_Free_Graffiti_09 = 229,
	Waterfront_Free_Graffiti = 230,
	Waterfront_Free_Graffiti = 231,
	Waterfront_Free_Graffiti = 232,
	Waterfront_Free_Graffiti = 233,
	Waterfront_Free_Graffiti = 234,
	Waterfront_Free_Graffiti = 235,
	Waterfront_Free_Graffiti = 236,
	Waterfront_Free_Graffiti = 237,
	Waterfront_Free_Graffiti = 238,
	Waterfront_Free_Graffiti = 239,
	Waterfront_Free_Graffiti = 240,
	Waterfront_Free_Graffiti = 241,
	Waterfront_Free_Graffiti = 242,
	Waterfront_Free_Graffiti = 243,
	Waterfront_Free_Graffiti = 244,
	Waterfront_Free_Graffiti = 245,
	Waterfront_Free_Graffiti = 246,
	Waterfront_Free_Graffiti = 247,
	Waterfront_Free_Graffiti = 248,
	Waterfront_Free_Graffiti = 249,
	Waterfront_Free_Graffiti = 250,
	Waterfront_Free_Graffiti = 251,
	Waterfront_Free_Graffiti = 252,
	Waterfront_Free_Graffiti = 253,
	Waterfront_Free_Graffiti = 254,
	Waterfront_Free_Graffiti = 255,
	Waterfront_Free_Graffiti = 256,
	Waterfront_Free_Graffiti = 257,
	Waterfront_Free_Graffiti = 258,
	Waterfront_Free_Graffiti = 259,
	Waterfront_Free_Graffiti = 260,
	Waterfront_Free_Graffiti = 261,
	Waterfront_Free_Graffiti = 262,
	Waterfront_Free_Graffiti = 263,
	Waterfront_Free_Graffiti = 264,
	Waterfront_Free_Graffiti = 265,
	Waterfront_Free_Graffiti = 266,
	Waterfront_Free_Graffiti = 267,
	Waterfront_Free_Graffiti = 268,
	Waterfront_Free_Graffiti = 269,
	Waterfront_Free_Graffiti = 270,
	Waterfront_League_Statue01 = 271,
	Waterfront_League_Statue02 = 272,
	Waterfront_League_Statue03 = 273,
	Waterfront_League_Statue04 = 274,
	Waterfront_League_Statue05 = 275,
	Waterfront_League_Statue06 = 276,
	Waterfront_League_Statue07 = 277,
	etDisplayPoint_MAX = 278,
};
enum etDistrictBlock
{
	Financial_Block01 = 0,
	Financial_Block02 = 1,
	Financial_Block03 = 2,
	Financial_Block04 = 3,
	Financial_Block05 = 4,
	Financial_Block06 = 5,
	Financial_Block07 = 6,
	Financial_Block08 = 7,
	Financial_Block09 = 8,
	Financial_Block10 = 9,
	Financial_Block11 = 10,
	Financial_Block12 = 11,
	Financial_Block13 = 12,
	Financial_Block14 = 13,
	Financial_Block15 = 14,
	Financial_Block16 = 15,
	Financial_Block17 = 16,
	Financial_Block18 = 17,
	Financial_Block19 = 18,
	Financial_Block20 = 19,
	Financial_Block21 = 20,
	Financial_Block22 = 21,
	Financial_Block23 = 22,
	Financial_Block24 = 23,
	Financial_Block25 = 24,
	Financial_Block26 = 25,
	Financial_Block27 = 26,
	Financial_Block28 = 27,
	Financial_Block29 = 28,
	Financial_Block30 = 29,
	Financial_Block31 = 30,
	Financial_Block32 = 31,
	Financial_Block33 = 32,
	Financial_Block34 = 33,
	Financial_Block35 = 34,
	Financial_Block36 = 35,
	Financial_Block37 = 36,
	Financial_Block38 = 37,
	Financial_Block39 = 38,
	Financial_Block40 = 39,
	Financial_Block41 = 40,
	Financial_Block42 = 41,
	Financial_Block43 = 42,
	Financial_Block44 = 43,
	Financial_Block45 = 44,
	Financial_Block46 = 45,
	Financial_Block47 = 46,
	Financial_Block48 = 47,
	SimpleGameplayLevel_Block01 = 48,
	SimpleGameplayLevel_Block02 = 49,
	Waterfront_Block01 = 50,
	Waterfront_Block02 = 51,
	Waterfront_Block03 = 52,
	Waterfront_Block04 = 53,
	Waterfront_Block05 = 54,
	Waterfront_Block06 = 55,
	Waterfront_Block07 = 56,
	Waterfront_Block08 = 57,
	Waterfront_Block09 = 58,
	Waterfront_Block10 = 59,
	Waterfront_Block11 = 60,
	Waterfront_Block12 = 61,
	Waterfront_Block13 = 62,
	Waterfront_Block14 = 63,
	Waterfront_Block15 = 64,
	Waterfront_Block16 = 65,
	Waterfront_Block17 = 66,
	Waterfront_Block18 = 67,
	Waterfront_Block19 = 68,
	Waterfront_Block20 = 69,
	Waterfront_Block21 = 70,
	Waterfront_Block22 = 71,
	Waterfront_Block23 = 72,
	Waterfront_Block24 = 73,
	Waterfront_Block25 = 74,
	Waterfront_Block26 = 75,
	Waterfront_Block27 = 76,
	Waterfront_Block28 = 77,
	Waterfront_Block29 = 78,
	Waterfront_Block30 = 79,
	Waterfront_Block31 = 80,
	Waterfront_Block32 = 81,
	Waterfront_Block33 = 82,
	Waterfront_Block34 = 83,
	Waterfront_Block35 = 84,
	Waterfront_Block36 = 85,
	Waterfront_Block37 = 86,
	Waterfront_Block38 = 87,
	Waterfront_Block39 = 88,
	Waterfront_Block40 = 89,
	Waterfront_Block41 = 90,
	Waterfront_Block42 = 91,
	Waterfront_Block43 = 92,
	Waterfront_Block44 = 93,
	Waterfront_Block45 = 94,
	Financial_Block49 = 95,
	SimpleGameplayLevel_Block03 = 96,
	SimpleGameplayLevel_Block04 = 97,
	SimpleGameplayLevel_Block05 = 98,
	SimpleGameplayLevel_Block06 = 99,
	PGCrate_Block28 = 100,
	PGBeacon_EleventhFloor = 101,
	PGBeacon_TenthFloor = 102,
	PGBeacon_NinthFloor = 103,
	PGBeacon_EighthFloor = 104,
	PGBeacon_SeventhFloor = 105,
	PGBeacon_SixthFloor = 106,
	PGBeacon_FifthFloor = 107,
	PGBeacon_FourthFloor = 108,
	PGBeacon_ThirdFloor = 109,
	PGBeacon_SecondFloor = 110,
	PGBeacon_RoadLevel = 111,
	PGBeacon_ConstructionSite = 112,
	PGBeacon_NorthBuilding = 113,
	PGBeacon_WestBuilding = 114,
	PGBeacon_NorthTower = 115,
	PGBeacon_SouthTower = 116,
	PGBeacon_Block09 = 117,
	PGCrate_NECrates = 118,
	PGCrate_NWCrates = 119,
	PGCrate_SECrates = 120,
	PGCrate_SWCrates = 121,
	PGCrate_NorthBuilding = 122,
	PGCrate_SouthBuilding = 123,
	PGCrate_Management = 124,
	PGCrate_Centre = 125,
	PGCrate_Crane = 126,
	PGBeacon_TowerIntersection = 127,
	PGAsylum_WingNE = 128,
	Social_All = 129,
	PGAsylum_WingNW = 130,
	PGAsylum_CourtyardNorth = 131,
	PGAsylum_CourtyardCentral = 132,
	PGAsylum_Foyer = 133,
	PGAsylum_WingSE = 134,
	PGAsylum_WingSW = 135,
	PGAsylum_Chapel = 136,
	FinancialChaos = 137,
	WaterfrontChaos = 138,
	etDistrictBlock_MAX = 139,
};
enum etDistrict
{
	None = 0,
	Financial = 1,
	FinancialChaos = 2,
	LCTestMap = 3,
	PGAsylum = 4,
	PGBeacon = 5,
	PGCrate = 6,
	SimpleGameplayLevel = 7,
	SimpleUILevel = 8,
	Social = 9,
	UIDistrict = 10,
	Waterfront = 11,
	WaterfrontChaos = 12,
	etDistrict_MAX = 13,
};
enum etDynamicMenuEntry
{
	Hair = 0,
	Face = 1,
	Eyes = 2,
	Body = 3,
	Skin = 4,
	Scars = 5,
	Gender = 6,
	MakeUp = 7,
	Tattoos = 8,
	FacialBodyHair = 9,
	Menu_FaceDepthTopDown = 10,
	ForeheadDetail = 11,
	IrisColor/IrisSize = 12,
	EarShape = 13,
	Menu_EarSize = 14,
	Menu_EarOrientation = 15,
	BrowShape = 16,
	EyeBrowShape = 17,
	EyeBrowColor = 18,
	CheeckDetail = 19,
	Menu_Cheeks = 20,
	NoseShape = 21,
	Menu_NoseLength = 22,
	Menu_NoseBridge = 23,
	Menu_NoseWidth = 24,
	Menu_MouthWidthHeight = 25,
	Menu_LipShapeF = 26,
	Menu_LipShapeM = 27,
	Menu_LipSize = 28,
	Menu_LipDetail = 29,
	Menu_JawWidthHeight = 30,
	ChinShape = 31,
	Menu_ChinLenghtDepth = 32,
	ChinDetail = 33,
	PupilShape = 34,
	EyeLashLength = 35,
	EyeLidShape = 36,
	EyeLidDetail = 37,
	EyeSocketShape = 38,
	EyeShapeF = 39,
	EyeShapeM = 40,
	EyeTilt = 41,
	Menu_BodyWeight = 42,
	Menu_BodyHeight = 43,
	Menu_Muscularity = 44,
	Menu_BreastSize = 45,
	Menu_BreastPerkiness = 46,
	Menu_BodyEast = 47,
	EyeShadow = 48,
	EyeLiner = 49,
	Blusher = 50,
	LipstickColor = 51,
	FacePaint = 52,
	NailPolish = 53,
	Menu_SkinTone = 54,
	Menu_SkinPigment = 55,
	AgeMarks = 56,
	Wrinkles = 57,
	Menu_Veins = 58,
	Menu_Freckles = 59,
	Menu_Moles = 60,
	etDynamicMenuEntry_MAX = 61,
};
enum etEmoteCommand
{
	Angry = 0,
	Animal = 1,
	Body Pop = 2,
	Bored = 3,
	Bow = 4,
	Brag = 5,
	Celebrate = 6,
	Chicken = 7,
	Chuckle = 8,
	Clap = 9,
	Coin Toss = 10,
	Cold = 11,
	Confused = 12,
	Congratulations = 13,
	Cry = 14,
	Dance = 15,
	Dance 80s = 16,
	Dance Airguitar = 17,
	Dance Ballet = 18,
	Dance Comical = 19,
	Dance Goth = 20,
	Dance Hip Hop = 21,
	Dance Irish = 22,
	Dance Metal = 23,
	Dance Michael = 24,
	Dance Punk = 25,
	Dance Robot = 26,
	Dance Signature = 27,
	Dance Techno = 28,
	Disagree = 29,
	Fart = 30,
	Flirt = 31,
	Hello = 32,
	Insult = 33,
	No = 34,
	Ready = 35,
	Shock = 36,
	Smoke = 37,
	Strike A Pose 1 = 38,
	Strike A Pose 2 = 39,
	Surrender = 40,
	Taunt = 41,
	Threaten = 42,
	Thumbs Up = 43,
	Dance Urban = 44,
	Victory = 45,
	Wait = 46,
	Wave = 47,
	Whistle = 48,
	Yes = 49,
	etEmoteCommand_MAX = 50,
};
enum etEquipmentCategory
{
	None = 0,
	BatteringRam = 1,
	BrassKnuckes = 2,
	Camera = 3,
	Crowbar = 4,
	Explosives = 5,
	Hacking = 6,
	HandcuffKeys = 7,
	Handcuffs = 8,
	PaintSprayer = 9,
	PetrolCan = 10,
	PoliceBadge = 11,
	Sabotage = 12,
	SlimJim = 13,
	SprayCan = 14,
	WireCutters = 15,
	etEquipmentCategory_MAX = 16,
};
enum etFactionRestrictedLocation
{
	None = 0,
	SimpleGameplayLevelTest_Both = 1,
	SimpleGameplayLevelTest_Criminal = 2,
	SimpleGameplayLevelTest_Enforcer = 3,
	Social_Criminal = 4,
	Social_Enforcer = 5,
	etFactionRestrictedLocation_MAX = 6,
};
enum etGolemPartClass
{
	None = 0,
	AliceBandCatEars = 1,
	Aliceband = 2,
	Arm_SkinTight_L = 3,
	Arm_SkinTight_R = 4,
	Arm_Thick_L = 5,
	Arm_Thick_R = 6,
	Armour_Chest = 7,
	Armour_Chest_Accessory_Neck = 8,
	Armour_Chest_Accessory_Shoulders = 9,
	Armour_Chest_Accessory_WaistB = 10,
	Armour_Chest_Accessory_WaistF = 11,
	Armour_Chest_Slim = 12,
	Armour_Chest_Slim_Accessory = 13,
	Armour_Platecarrier = 14,
	Armour_Shorts = 15,
	Armour_Vest = 16,
	Armpads = 17,
	Backpack = 18,
	Balaclava_3Holes = 19,
	Balaclava_Eyeholes = 20,
	Balaclava_Eyeslit = 21,
	Balaclava_Halfface = 22,
	Balaclava_Openface = 23,
	Beard_Full_Medium = 24,
	Beard_Full_Short = 25,
	Beard_Full_Thick = 26,
	Beard_Goatee = 27,
	Beard_GoateeFull = 28,
	Beard_Goatee_Thick = 29,
	Beard_Moustache = 30,
	Beard_Moustache_Thick = 31,
	Beard_Sideburns = 32,
	Beard_Stubble = 33,
	Belt_Armoured = 34,
	Belt_Chunky = 35,
	Belt_High = 36,
	Belt_Loopless = 37,
	Belt_Low = 38,
	Belt_Scarf = 39,
	Belt_Standard = 40,
	Boots_Wide = 41,
	Chest_L = 42,
	Dress = 43,
	Dress_Collar = 44,
	EarL = 45,
	EarR = 46,
	ElbowForearmpads = 47,
	Elbow_L = 48,
	Elbow_R = 49,
	Elbowpads = 50,
	Finger_L1 = 51,
	Finger_L2 = 52,
	Finger_L3 = 53,
	Finger_L4 = 54,
	Finger_L5 = 55,
	Finger_R1 = 56,
	Finger_R2 = 57,
	Finger_R3 = 58,
	Finger_R4 = 59,
	Finger_R5 = 60,
	Footwear_HeelStandard = 61,
	Footwear_High = 62,
	Footwear_Standard = 63,
	Footwear_ThighBootsHeel = 64,
	Forearm_L = 65,
	Forearm_L_Slim = 66,
	Forearm_R = 67,
	Forearm_R_Slim = 68,
	Forearmpads = 69,
	Gauntlet_L = 70,
	Gauntlet_R = 71,
	Gauntlets = 72,
	Glasses = 73,
	Gloves = 74,
	Gloves_Bulky = 75,
	Hair_Chest = 76,
	Hair_Scalp = 77,
	Halo = 78,
	Hand_L = 79,
	Hand_R = 80,
	Harness_Tactical = 81,
	Hat_BackwardsBballCap = 82,
	Hat_Beanie = 83,
	Hat_Beanie_Accessory = 84,
	Hat_Beanie_Augmented = 85,
	Hat_Beret = 86,
	Hat_Standard = 87,
	Hat_Standard_Bulky = 88,
	Hat_Standard_Bulky_Accessory = 89,
	Hat_Standard_Bulky_NoAccessory = 90,
	Hat_Standard_Bulky_NoAccessoryNoEarRings = 91,
	Hat_Tall = 92,
	Headband = 93,
	Helmet_Bulky = 94,
	Helmet_Bulky_Accessory = 95,
	Helmet_Bulky_Accessory_Face = 96,
	Helmet_Bulky_Full = 97,
	Holsterpad_L = 98,
	Holsterpad_L_Accessory = 99,
	Holsterpad_R = 100,
	Holsterpad_R_Accessory = 101,
	JacketShirt_ClosedCollar_LongSleeves = 102,
	JacketShirt_OpenCollar_ShortSleeves = 103,
	Jacket_Closed = 104,
	Jacket_ClosedVNeck = 105,
	Jacket_Closed_CullOpenShirt = 106,
	Jacket_Closed_Long = 107,
	Jacket_Closed_Short_HoodUp = 108,
	Jacket_Open = 109,
	Jacket_OpenHalf = 110,
	Jacket_OpenHalf_Cropped = 111,
	Jacket_OpenShortsleeved = 112,
	Jacket_OpenSleeveless = 113,
	Jacket_Open_Hood = 114,
	Jacket_Parka_HoodUp = 115,
	KneeShinpads = 116,
	Kneepad_L = 117,
	Kneepad_R = 118,
	Kneepads = 119,
	Legwarmers = 120,
	Mannequin = 121,
	Mask_Full = 122,
	Mask_Full_Hockey = 123,
	Mask_Full_Large = 124,
	Mask_Full_Large_Bulky = 125,
	Mask_Full_Large_Straps = 126,
	Mask_Lowerface = 127,
	Mask_Tight = 128,
	Mouth_Prop = 129,
	NecklaceFull_Long = 130,
	NecklaceFull_Long_Armour = 131,
	NecklaceFull_Medium = 132,
	NecklaceFull_Small = 133,
	Necklace_Choker = 134,
	Necklace_Long = 135,
	Necklace_Medium = 136,
	Necklace_Small = 137,
	Overalls = 138,
	Overalls_Bulky = 139,
	Pendant_Choker = 140,
	Pendant_Long = 141,
	Pendant_Medium = 142,
	Pendant_Small = 143,
	Piercing_Belly = 144,
	Piercing_Chin = 145,
	Piercing_EarL = 146,
	Piercing_EarR = 147,
	Piercing_EarTopL = 148,
	Piercing_EarTopR = 149,
	Piercing_Forehead = 150,
	Piercing_Nipples = 151,
	Piercing_NoseBottom = 152,
	Piercing_NoseTop = 153,
	Piercing_Scalp = 154,
	Piercing_Waist = 155,
	Pouches_ChestRig_Front_Mid&Low = 156,
	Pouches_Front_Low = 157,
	Pouches_Front_Mid = 158,
	Pouches_Front_Mid&Low = 159,
	Scarf = 160,
	Scarf_Mask = 161,
	Scarf_Mask_Full = 162,
	Shinpads = 163,
	Shirt_ClosedCollar = 164,
	Shirt_OpenCollar = 165,
	Shirt_OpenCollar_ShortSleeves = 166,
	Skirt_Kilt = 167,
	Skirt_Standard = 168,
	Skirt_Standard_NoLoops = 169,
	Skirt_Tutu = 170,
	Snood = 171,
	Snowman_Eyes = 172,
	Snowman_Head = 173,
	Snowman_Nose = 174,
	Sock_L = 175,
	Sock_R = 176,
	Stocking_L = 177,
	Stocking_R = 178,
	TestItem = 179,
	Thighpads = 180,
	Tie = 181,
	Tie_Loose = 182,
	Top_Corset = 183,
	Top_Corset_Underbust = 184,
	Top_LongSleeves = 185,
	Top_LongSleeves_Collar = 186,
	Top_LongSleeves_Hockey = 187,
	Top_LongSleeves_Hood = 188,
	Top_ShortSleeves = 189,
	Top_Sleeveless = 190,
	TrousersCapri_NoBelt = 191,
	TrousersLow_Baggy = 192,
	TrousersStandard_Medium = 193,
	TrousersStandard_MediumFlared = 194,
	TrousersStandard_Medium_NoBelt = 195,
	TrousersStandard_Medium_Shorts = 196,
	TrousersStandard_Tight = 197,
	TrousersStandard_Tight_NoBelt = 198,
	TrousersStandard_Tight_Shorts = 199,
	TrousersStandard_Tight_Shorts_NoBelt = 200,
	Underwear_Compulsory_Bottom = 201,
	Underwear_Compulsory_Top = 202,
	Vest_ChestRig = 203,
	Vest_Tactical = 204,
	Waist_L = 205,
	Webbing_Backholster = 206,
	Webbing_Chest = 207,
	Webbing_Chest_Armour = 208,
	Webbing_ThighL = 209,
	Webbing_ThighL_Accessory = 210,
	Webbing_ThighL_Low = 211,
	Webbing_ThighR = 212,
	Webbing_ThighR_Accessory = 213,
	Webbing_UpperArmL = 214,
	Webbing_UpperArmR = 215,
	Webbing_Vest = 216,
	Wings_Small = 217,
	Wrist_L = 218,
	Wrist_L_Slim = 219,
	Wrist_R = 220,
	Wrist_R_Slim = 221,
	etGolemPartClass_MAX = 222,
};
enum etHUDCeremonyMsg
{
	AM_CombatYouStreakArrestOn = 0,
	AM_CombatYouStreakKillOn = 1,
	AM_CombatYouStreakWinOn = 2,
	AM_FameMatchEarnedMedal = 3,
	AM_FameYouContactGainLevel = 4,
	AM_FameYouContactLevelMax = 5,
	AM_FameYouContactReferal = 6,
	AM_FameYouEarnAchievement = 7,
	AM_FameYouEarnMedal = 8,
	AM_FameYouOrganisationGainLevel = 9,
	AM_FameYouOrganisationMaxLevel = 10,
	AM_FameYouRoleGainLevel = 11,
	AM_FameYouRoleMaxLevel = 12,
	AM_HeatYouNotorietyLevelDrops = 13,
	AM_HeatYouNotorietyLevelRaise = 14,
	AM_HeatYouPrestigeLevelDrops = 15,
	AM_HeatYouPrestigeLevelRaise = 16,
	AM_Heat_BountyClaimed_AnyCrimKillCrim = 17,
	AM_Heat_BountyClaimed_AnyCrimKillEnf = 18,
	AM_Heat_BountyClaimed_AnyEnfKillCrim = 19,
	AM_Heat_BountyClaimed_AnyEnfKillEnf = 20,
	AM_Heat_BountyClaimed_YouCrimKillCrim = 21,
	AM_Heat_BountyClaimed_YouCrimKillEnf = 22,
	AM_Heat_BountyClaimed_YouEnfKillCrim = 23,
	AM_Heat_BountyClaimed_YouEnfKillEnf = 24,
	AM_Heat_Bounty_AnyNotorietyLevel5ForCriminals = 25,
	AM_Heat_Bounty_AnyNotorietyLevel5ForEnforcers = 26,
	AM_Heat_Bounty_AnyPrestigeLevel5 = 27,
	AM_Heat_Bounty_TeamNotorietyLevel5 = 28,
	AM_Heat_Bounty_TeamPrestigeLevel5 = 29,
	AM_Heat_Bounty_YouNotorietyLevel5 = 30,
	AM_Heat_Bounty_YouPrestigeLevel5 = 31,
	AM_RatingYouChanged = 32,
	AM_RewardUnlockClothing = 33,
	AM_RewardUnlockDisplayPoint = 34,
	AM_RewardUnlockEmotes = 35,
	AM_RewardUnlockEquipment = 36,
	AM_RewardUnlockFeature = 37,
	AM_RewardUnlockFnMod = 38,
	AM_RewardUnlockGeneric = 39,
	AM_RewardUnlockInstrument = 40,
	AM_RewardUnlockPrimitive = 41,
	AM_RewardUnlockSong = 42,
	AM_RewardUnlockSymbol = 43,
	AM_RewardUnlockTheme = 44,
	AM_RewardUnlockTitle = 45,
	AM_RewardUnlockUsable = 46,
	AM_RewardUnlockVehicle = 47,
	AM_RewardUnlockVehicleComponent = 48,
	AM_RewardUnlockWeapon = 49,
	AM_RewardUnlockWeaponSkin = 50,
	AM_ThreatAnyChanged_Crim = 51,
	AM_ThreatAnyChanged_Enf = 52,
	AM_ThreatAnyMaxPlayerEnter_Crim = 53,
	AM_ThreatAnyMaxPlayerEnter_Enf = 54,
	AM_ThreatYouChanged = 55,
	DailyActivityAutoAssigned = 56,
	DailyActivityComplete_Common = 57,
	DailyActivityComplete_Rare = 58,
	DailyActivityComplete_Uncommon = 59,
	Minigame_WeaponDrop_DropSpawned = 60,
	Minigame_WeaponDrop_DropSpawned = 61,
	Minigame_WeaponDrop_DropSpawned = 62,
	Minigame_WeaponDrop_DropSpawned = 63,
	Minigame_WeaponDrop_DropSpawned = 64,
	Minigame_WeaponDrop_DropSpawned = 65,
	Minigame_WeaponDrop_DropSpawned = 66,
	Minigame_WeaponDrop_DropSpawned = 67,
	Minigame_WeaponDrop_DropSpawned = 68,
	Minigame_WeaponDrop_Started = 69,
	Minigame_WeaponDrop_WeaponUnlocked_Ceremony = 70,
	ProvingGrounds_ChallengePrizeQualified_1_Enter = 71,
	ProvingGrounds_ChallengePrizeQualified_1_Leave = 72,
	ProvingGrounds_ChallengePrizeQualified_2_Enter = 73,
	ProvingGrounds_ChallengePrizeQualified_2_Leave = 74,
	ProvingGrounds_ChallengePrizeQualified_3_Enter = 75,
	ProvingGrounds_ChallengePrizeQualified_3_Leave = 76,
	ProvingGrounds_ChallengePrizeReceived_Bronze = 77,
	ProvingGrounds_ChallengePrizeReceived_Gold = 78,
	ProvingGrounds_ChallengePrizeReceived_Silver = 79,
	ProvingGrounds_Challenge_New = 80,
	ProvingGrounds_Challenge_New_Promote = 81,
	ProvingGrounds_MissionActivity_Completed = 82,
	Reward_Unlock_Clothing = 83,
	Reward_Unlock_Emotes = 84,
	Reward_Unlock_Vehicles = 85,
	Reward_Unlock_Weapons = 86,
	TimeLimitedReward_MissionWin_Growl = 87,
	Weapon_Override_Equiped = 88,
	Weapon_Pickup = 89,
	etHUDCeremonyMsg_MAX = 90,
};
enum etHUDColour
{
	None = 0,
	Action_Enemy = 1,
	Action_Enemy_Assist = 2,
	Action_Team = 3,
	Action_Team_Assist = 4,
	Black = 5,
	Black_TaskMarker = 6,
	Blue = 7,
	Blue_Enforcer = 8,
	Blue_Pale = 9,
	Blue_TaskMarker = 10,
	Blue_mid = 11,
	Bronze = 12,
	Cash_Green = 13,
	Cash_Red = 14,
	Ceremony_Highlight = 15,
	Chat_AutoReply = 16,
	Chat_Broadcast = 17,
	Chat_Clan = 18,
	Chat_Combat = 19,
	Chat_Dev = 20,
	Chat_District = 21,
	Chat_GM = 22,
	Chat_Group = 23,
	Chat_Mission = 24,
	Chat_Name = 25,
	Chat_Officer = 26,
	Chat_Premium = 27,
	Chat_SPCM = 28,
	Chat_Say = 29,
	Chat_System = 30,
	Chat_Team = 31,
	Chat_Tutorial = 32,
	Chat_Vehicle = 33,
	Chat_Whisper = 34,
	Chat_Yell = 35,
	Contact = 36,
	ED_garage = 37,
	ED_marketplace = 38,
	ED_music = 39,
	ED_persona = 40,
	ED_symbol = 41,
	ED_wardrobe = 42,
	Green = 43,
	Green_Dark = 44,
	Green_Pale = 45,
	Green_TaskMarker = 46,
	Green_VeryDark = 47,
	Grey = 48,
	Grey_Pale = 49,
	Grey_Transparent = 50,
	GroupHUDHeader_Chaos = 51,
	GroupHUDHeader_Minigame = 52,
	GroupHUDHeader_NotReady = 53,
	GroupHUDHeader_OnMission = 54,
	GroupHUDHeader_Ready = 55,
	GroupHUDHeader_Waiting = 56,
	GroupHUD_Enemy = 57,
	GroupHUD_Friend = 58,
	GroupHUD_NotReady = 59,
	GroupHUD_OutOfDistrict = 60,
	GroupHUD_VIP = 61,
	HUDMessage_APB = 62,
	HUDMessage_ActionText = 63,
	HUDMessage_CeremonyText = 64,
	HUDMessage_Default = 65,
	HUDMessage_DistrictMapText = 66,
	HUDMessage_Error = 67,
	HUDMessage_Mission = 68,
	HUDMessage_TutorialText = 69,
	HUDMessage_VIP = 70,
	Halloween_Orange = 71,
	Heat_AmountChange = 72,
	Heat_LevelChange = 73,
	HitReticule_CarOrProp = 74,
	HitReticule_CharacterEnemy = 75,
	HitReticule_CharacterFriend = 76,
	Lobby_WorldOffline = 77,
	Mailbox = 78,
	Orange = 79,
	Orange_APB = 80,
	Orange_Dark = 81,
	Purple = 82,
	Purple_Bright = 83,
	Red = 84,
	Red_Bright = 85,
	Red_Criminal = 86,
	Red_Dark = 87,
	Red_Pale = 88,
	Red_TaskMarker = 89,
	Red_mid = 90,
	ScoreBreakdown_Cash = 91,
	ScoreBreakdown_Name = 92,
	ScoreBreakdown_NegativeValue = 93,
	ScoreBreakdown_NormalValue = 94,
	ScoreBreakdown_PremiumDisabled = 95,
	ScoreBreakdown_PremiumValue = 96,
	ScoreBreakdown_Standing = 97,
	Scoreboard_LocalPlayer = 98,
	Scoreboard_LocalPlayer_Premium = 99,
	Scoreboard_Opponents = 100,
	Scoreboard_Opponents_Offline = 101,
	Scoreboard_Opponents_Premium = 102,
	Scoreboard_Opponents_Premium_Offline = 103,
	Scoreboard_Teammates = 104,
	Scoreboard_Teammates_Offline = 105,
	Scoreboard_Teammates_Premium = 106,
	Scoreboard_Teammates_Premium_Offline = 107,
	SymbolEditor_NormalBlack = 108,
	SymbolEditor_NormalGray = 109,
	SymbolEditor_NormalWhite = 110,
	SymbolEditor_TattooBlack = 111,
	SymbolEditor_TattooWhite = 112,
	Tutorial_KeyPress = 113,
	Valentine_Pink = 114,
	White = 115,
	White_Transparent = 116,
	Witnessing_Active = 117,
	Witnessing_Inactive = 118,
	Witnessing_PendingBounty = 119,
	Yellow = 120,
	Yellow_Bright = 121,
	Yellow_CSA = 122,
	Yellow_Pale = 123,
	Yellow_TaskMarker = 124,
	openworld_marker = 125,
	etHUDColour_MAX = 126,
};
enum etHUDColourProfile
{
	None = 0,
	Bronze = 1,
	ContactPledged = 2,
	Contact_Unpledged = 3,
	CustomisationZone = 4,
	Default = 5,
	ElectiveCorpse_Player = 6,
	ElectiveCorpse_Teammate = 7,
	ElectiveSpawnPoint_Active = 8,
	ElectiveSpawnPoint_Damaged = 9,
	ElectiveSpawnPoint_EnemyNearby = 10,
	ElectiveSpawnPoint_FullCapacity = 11,
	ElectiveSpawnPoint_Inaccessible = 12,
	ElectiveSpawnPoint_Passive = 13,
	Faction_Criminal = 14,
	Faction_Enforcer = 15,
	Faction_Friendly = 16,
	Faction_Opposition = 17,
	Group_Leader = 18,
	Group_Player = 19,
	Group_Player_Arrested = 20,
	HeatLevel5_Crim = 21,
	HeatLevel5_Enf = 22,
	InteractionPoint_Garage = 23,
	InteractionPoint_MarketPlace = 24,
	InteractionPoint_MusicStudio = 25,
	InteractionPoint_Persona = 26,
	InteractionPoint_SymbolEditor = 27,
	InteractionPoint_Wardrobe = 28,
	Mailbox = 29,
	Minigame_FindTarget_DevOps = 30,
	Minigame_Protagonist = 31,
	Neutral_ActionCSA = 32,
	Neutral_ReplenishCSA = 33,
	Neutral_Unavailable = 34,
	Openworld_Normal = 35,
	Opponent_Player = 36,
	Opponent_Player_Stunned = 37,
	StageText = 38,
	Target_VIP_Friend = 39,
	Target_VIP_Opponent = 40,
	TaskCheckpoint_Dropoff = 41,
	TaskCheckpoint_FreshAttack = 42,
	TaskCheckpoint_FreshDefend = 43,
	TaskCheckpoint_Meeting = 44,
	TaskCheckpoint_Neutral = 45,
	TaskCheckpoint_TaintedAttack = 46,
	TaskCheckpoint_TaintedDefend = 47,
	TaskItem_FreshAttack = 48,
	TaskItem_FreshDefend = 49,
	TaskItem_Neutral = 50,
	TaskItem_TaintedAttack = 51,
	TaskItem_TaintedDefend = 52,
	TaskObjective_FreshAttack = 53,
	TaskObjective_FreshDefend = 54,
	TaskObjective_Neutral = 55,
	TaskObjective_TaintedAttack = 56,
	TaskObjective_TaintedDefend = 57,
	Valentine_Pink = 58,
	Waypoint_Group = 59,
	Waypoint_Leader = 60,
	Waypoint_Personal = 61,
	Ceremony_Highlight = 62,
	etHUDColourProfile_MAX = 63,
};
enum etHUDCombatMessage
{
	Score_Combat_ArrestEnemy = 0,
	Score_Combat_KillEnemy = 1,
	Score_Combat_KillEnemyAssist = 2,
	Score_Combat_StunnedEnemy = 3,
	Score_Earned_MedalBigWin_All = 4,
	Score_Earned_MedalBigWin_Arrest_10 = 5,
	Score_Earned_MedalBigWin_Arrest_10 = 6,
	Score_Earned_MedalBigWin_Arrest_10 = 7,
	Score_Earned_MedalBigWin_Arrest_10 = 8,
	Score_Earned_MedalBigWin_Arrest_10 = 9,
	Score_Earned_MedalBigWin_Defuse = 10,
	Score_Earned_MedalBigWin_Detonate = 11,
	Score_Earned_MedalBigWin_Rescue = 12,
	Score_Earned_MedalBigWin_Rescue = 13,
	Score_Earned_MedalBigWin_Rescue = 14,
	Score_Earned_MedalBigWin_Rescue = 15,
	Score_Earned_MedalBigWin_Rescue = 16,
	Score_Earned_MedalBigWin_Takeout = 17,
	Score_Earned_MedalBigWin_Takeout = 18,
	Score_Earned_MedalBigWin_Takeout = 19,
	Score_Earned_MedalBigWin_Takeout = 20,
	Score_Earned_MedalBigWin_Takeout = 21,
	Score_Earned_MedalDishonour_ArrestedKill = 22,
	Score_Earned_MedalDishonour_ArrestedKill = 23,
	Score_Earned_MedalDishonour_ArrestedKill = 24,
	Score_Earned_MedalDishonour_ArrestedKill = 25,
	Score_Earned_MedalDishonour_ArrestedKill = 26,
	Score_Earned_MedalDishonour_ArrestedKill = 27,
	Score_Earned_MedalDishonour_ArrestedKill = 28,
	Score_Earned_MedalDishonour_ArrestedKill = 29,
	Score_Earned_MedalDishonour_ArrestedKill = 30,
	Score_Earned_MedalDishonour_ArrestedKill = 31,
	Score_Earned_MedalDishonour_FriendlyKill = 32,
	Score_Earned_MedalDishonour_FriendlyKill = 33,
	Score_Earned_MedalDishonour_FriendlyKill = 34,
	Score_Earned_MedalDishonour_FriendlyKill = 35,
	Score_Earned_MedalDishonour_FriendlyKill = 36,
	Score_Earned_MedalDishonour_FriendlyKill = 37,
	Score_Earned_MedalDishonour_FriendlyKill = 38,
	Score_Earned_MedalDishonour_FriendlyKill = 39,
	Score_Earned_MedalDishonour_FriendlyKill = 40,
	Score_Earned_MedalDishonour_FriendlyKill = 41,
	Score_Earned_MedalDishonour_FriendlyStun = 42,
	Score_Earned_MedalDishonour_FriendlyStun = 43,
	Score_Earned_MedalDishonour_FriendlyStun = 44,
	Score_Earned_MedalDishonour_FriendlyStun = 45,
	Score_Earned_MedalDishonour_FriendlyStun = 46,
	Score_Earned_MedalDishonour_SelfKill_02 = 47,
	Score_Earned_MedalDishonour_SelfKill_03 = 48,
	Score_Earned_MedalDishonour_SelfKill_04 = 49,
	Score_Earned_MedalDishonour_SelfKill_05 = 50,
	Score_Earned_MedalDishonour_SelfKill_06 = 51,
	Score_Earned_MedalDishonour_SelfKill_07 = 52,
	Score_Earned_MedalKillBehind = 53,
	Score_Earned_MedalKillStreak_05 = 54,
	Score_Earned_MedalKillStreak = 55,
	Score_Earned_MedalKillStreak = 56,
	Score_Earned_MedalKillStreak = 57,
	Score_Earned_MedalKillStreak = 58,
	Score_Earned_MedalKillStreak = 59,
	Score_Earned_MedalSituational_AntiGraffitiKill = 60,
	Score_Earned_MedalSituational_ArrestStreakKiller = 61,
	Score_Earned_MedalSituational_ArsonKill = 62,
	Score_Earned_MedalSituational_DriverAssistKill = 63,
	Score_Earned_MedalSituational_GraffitiingKill = 64,
	Score_Earned_MedalSituational_GrenadeKill = 65,
	Score_Earned_MedalSituational_KillStreakArrest = 66,
	Score_Earned_MedalSituational_KillStreakKiller = 67,
	Score_Earned_MedalSituational_MeleeKill = 68,
	Score_Earned_MedalSituational_PostDeathKill = 69,
	Score_Earned_MedalSituational_SuperKill = 70,
	Score_Earned_MedalSituational_TaskItemKill = 71,
	Score_Earned_MedalSituational_VehicleKill = 72,
	Score_Earned_MedalSituational_VIPKill = 73,
	Score_Earned_MedalTimeLimit_Kills = 74,
	Score_Earned_MedalTimeLimit_Kills = 75,
	Score_Earned_MedalTimeLimit_Kills = 76,
	Score_Earned_MedalTimeLimit_Kills = 77,
	Score_Mission_CSA_Arson = 78,
	Score_Mission_CSA_Bombings = 79,
	Score_Mission_CSA_Burglary = 80,
	Score_Mission_CSA_CarTheft = 81,
	Score_Mission_CSA_DefuseBomb = 82,
	Score_Mission_CSA_DeliverItem = 83,
	Score_Mission_CSA_ForcedEntry = 84,
	Score_Mission_CSA_Graffiti = 85,
	Score_Mission_CSA_Hacking = 86,
	Score_Mission_CSA_Investigate = 87,
	Score_Mission_CSA_Vandalism = 88,
	Score_Mission_CSA_Checkpoint = 89,
	Score_Mission_Assist_CSA_Arson = 90,
	Score_Mission_Assist_CSA_Bombings = 91,
	Score_Mission_Assist_CSA_Burglary = 92,
	Score_Mission_Assist_CSA_CarTheft = 93,
	Score_Mission_Assist_CSA_DefuseBomb = 94,
	Score_Mission_Assist_CSA_DeliverItem = 95,
	Score_Mission_Assist_CSA_ForcedEntry = 96,
	Score_Mission_Assist_CSA_Graffiti = 97,
	Score_Mission_Assist_CSA_Hacking = 98,
	Score_Mission_Assist_CSA_Investigate = 99,
	Score_Mission_Assist_CSA_Vandalism = 100,
	Score_Match_Won = 101,
	Score_Combat_RescueTeammate = 102,
	Score_Combat_StunnedTeammate = 103,
	Score_Mission_Pickup = 104,
	Score_KillTeam_Chaos = 105,
	Score_Earned_MedalDishonour_SelfKill_08 = 106,
	Score_Earned_MedalDishonour_SelfKill_09 = 107,
	Score_Earned_MedalDishonour_SelfKill = 108,
	Score_Earned_MedalDishonour_SelfKill = 109,
	Score_Earned_MedalDishonour_SelfKill = 110,
	Score_Earned_MedalDishonour_SelfKill = 111,
	Score_Earned_MedalDishonour_SelfKill = 112,
	Score_Earned_MedalDishonour_AFK = 113,
	Score_Minigame_Generic = 114,
	Score_Mission_CSA_Mugging = 115,
	Score_Minigame_Mugging_NPC_Kill = 116,
	Score_Minigame_Mugging_Easter_NPC_Kill = 117,
	Minigame_Infection_PlayerConverted_TeammatesNearby = 118,
	Minigame_Infection_Survivor_Gong = 119,
	Minigame_Infection_KillHeadless = 120,
	Minigame_Infection_Survived = 121,
	Minigame_Infection_Pumpkin = 122,
	Minigame_Mugging_Easter_GainedItems = 123,
	Minigame_Mugging_Easter_GainedItems_Single = 124,
	Minigame_Mugging_Easter_LostItems = 125,
	Minigame_Mugging_Easter_LostItems_Single = 126,
	Minigame_Mugging_Easter_PlayerMug_Muggee = 127,
	Minigame_Mugging_Easter_PlayerMug_Muggee_Single = 128,
	Minigame_Mugging_Easter_PlayerMug_Mugger = 129,
	Minigame_Mugging_Easter_PlayerMug_Mugger_Single = 130,
	Minigame_Mugging_Easter_ItemsHeldScore = 131,
	Minigame_Mugging_Easter_ItemsDeliveredScore = 132,
	AM_CombatKillWithOwn_Combat = 133,
	Score_Mission_CSA_Sabotage = 134,
	Score_Mission_Assist_Sabotage = 135,
	Minigame_WeaponDrop_ReceiveAliveScore = 136,
	Mission_ObjectiveProximity_Item = 137,
	Mission_ObjectiveProximity_Standard = 138,
	Mission_ObjectiveProximity_VIP = 139,
	Mission_ObjectiveProximity_VIP_Player_Self = 140,
	Minigame_WeaponDrop_FirstWeaponPickup = 141,
	etHUDCombatMessage_MAX = 142,
};
enum etHUDConstantString
{
	Knowledgebase = 0,
	etHUDConstantString_MAX = 1,
};
enum etHUDDistrictMapMarker
{
	None = 0,
	Contact_Fixer = 1,
	Contact_Pledged = 2,
	Mailbox = 3,
	MaxHeatPlayer_Criminal = 4,
	MaxHeatPlayer_Enforcer = 5,
	MaxThreatPlayer_Criminal = 6,
	Contact = 7,
	OpenWorldDropOff_Enf = 8,
	OpenWorldDropOff_Crim = 9,
	OpenWorldDropOff_Vehicle = 10,
	MaxThreatPlayer_Enforcer = 11,
	OpenWorldDropOff_Vehicle_Enforcer = 12,
	Player_Enemy = 13,
	Player_Group = 14,
	Player_GroupLeader = 15,
	Player_Local = 16,
	Player_Moderator = 17,
	PlayerVehicle = 18,
	PlayerVehicle_WithTaskItem = 19,
	Task_Checkpoint = 20,
	Task_Item = 21,
	Task_Target = 22,
	Waypoint_Group = 23,
	Waypoint_Leader = 24,
	Waypoint_Personal = 25,
	Zone_Ammo = 26,
	Zone_Markerplace = 27,
	Zone_Music = 28,
	Zone_Spawn = 29,
	Zone_VehicleRepair = 30,
	Zone_VehicleSpawn = 31,
	OpenWorldDropOffAuto = 32,
	InteractionPoint_Garage = 33,
	InteractionPoint_MarketPlace = 34,
	InteractionPoint_MusicStudio = 35,
	InteractionPoint_Persona = 36,
	InteractionPoint_SymbolEditor = 37,
	InteractionPoint_Wardrobe = 38,
	DisplayPoint = 39,
	StashDropOff_Enf = 40,
	StashDropOff_Crim = 41,
	StashDropOffMission = 42,
	Task_Item_Vehicle = 43,
	Task_Target_VIP = 44,
	Elective_MissionSpawn = 45,
	Elective_VehicleSpawn = 46,
	Elective_Corpse = 47,
	RadarJammer = 48,
	MobileRadarTower = 49,
	MobileSpawn = 50,
	Minigame_SnowballFight = 51,
	Minigame_ElfEvent = 52,
	Minigame_Mugging_Item_Egg = 53,
	Minigame_GoldenWeapon_Easter = 54,
	Minigame_GoldenWeapon_Easter_Protagonist = 55,
	Minigame_Mugging_Protagonist_Easter = 56,
	Minigame_Mugging_Carrier_Easter = 57,
	Minigame_Mugging_Item = 58,
	Minigame_Mugging_Protagonist = 59,
	Minigame_Mugging_Carrier = 60,
	Minigame_Mugging_NPC = 61,
	Minigame_GoldenWeapon_Explosive = 62,
	Minigame_GoldenWeapon_Protagonist_Explosive = 63,
	Minigame_Infection_Survivor = 64,
	Minigame_Infection_Pumpkin = 65,
	Minigame_Infection_Headless = 66,
	Minigame_Mugging_Easter_Chicken = 67,
	Minigame_Mugging_Easter_Bunny = 68,
	Minigame_Mugging_Easter_Chicken_V2 = 69,
	MobileSpawn_Enemy = 70,
	MobileRadarTower_Enemy = 71,
	Minigame_FindDev = 72,
	Minigame_FindDev_Violet = 73,
	Minigame_FindDev_Green = 74,
	Minigame_WeaponDrop_Protagonist = 75,
	Minigame_WeaponDrop_HighScore = 76,
	Minigame_WeaponDrop_Legendary = 77,
	etHUDDistrictMapMarker_MAX = 78,
};
enum etHUDEffect
{
	HeatFlash = 0,
	HeatIcon = 1,
	HeatIconWS = 2,
	HeatLevel = 3,
	HeatLevelHorizontal = 4,
	HeatNoteriety5 = 5,
	HeatPrestige5 = 6,
	HitEffect_Blood = 7,
	HitEffect_Direction = 8,
	ProgressCircle = 9,
	etHUDEffect_MAX = 10,
};
enum etHUDIconCombo
{
	None = 0,
	AmmoVending_Msg = 1,
	AmmoVending_Occ = 2,
	APBCash = 3,
	Cargo_Loot = 4,
	Cargo_People = 5,
	Colour_Black = 6,
	Contact = 7,
	Contact_occ = 8,
	Crim_Rating_000_Bronze = 9,
	Crim_Rating_000_Gold = 10,
	Crim_Rating_000_Green = 11,
	Crim_Rating_000_Silver = 12,
	Crim_Rating_010_Bronze = 13,
	Crim_Rating_010_Gold = 14,
	Crim_Rating_010_Green = 15,
	Crim_Rating_010_Silver = 16,
	Crim_Rating_020_Bronze = 17,
	Crim_Rating_020_Gold = 18,
	Crim_Rating_020_Green = 19,
	Crim_Rating_020_Silver = 20,
	Crim_Rating_030_Bronze = 21,
	Crim_Rating_030_Gold = 22,
	Crim_Rating_030_Green = 23,
	Crim_Rating_030_Silver = 24,
	Crim_Rating_040_Bronze = 25,
	Crim_Rating_040_Gold = 26,
	Crim_Rating_040_Green = 27,
	Crim_Rating_040_Silver = 28,
	Crim_Rating_050_Bronze = 29,
	Crim_Rating_050_Gold = 30,
	Crim_Rating_050_Green = 31,
	Crim_Rating_050_Silver = 32,
	Crim_Rating_060_Bronze = 33,
	Crim_Rating_060_Gold = 34,
	Crim_Rating_060_Green = 35,
	Crim_Rating_060_Silver = 36,
	Crim_Rating_070_Bronze = 37,
	Crim_Rating_070_Gold = 38,
	Crim_Rating_070_Green = 39,
	Crim_Rating_070_Silver = 40,
	Crim_Rating_080_Bronze = 41,
	Crim_Rating_080_Gold = 42,
	Crim_Rating_080_Green = 43,
	Crim_Rating_080_Silver = 44,
	Crim_Rating_090_Bronze = 45,
	Crim_Rating_090_Gold = 46,
	Crim_Rating_090_Green = 47,
	Crim_Rating_090_Silver = 48,
	Crim_Rating_100_Bronze = 49,
	Crim_Rating_100_Gold = 50,
	Crim_Rating_100_Green = 51,
	Crim_Rating_100_Silver = 52,
	Crim_Rating_110_Bronze = 53,
	Crim_Rating_110_Gold = 54,
	Crim_Rating_110_Green = 55,
	Crim_Rating_110_Silver = 56,
	Crim_Rating_120_Bronze = 57,
	Crim_Rating_120_Gold = 58,
	Crim_Rating_120_Green = 59,
	Crim_Rating_120_Silver = 60,
	Crim_Rating_130_Bronze = 61,
	Crim_Rating_130_Gold = 62,
	Crim_Rating_130_Green = 63,
	Crim_Rating_130_Silver = 64,
	Crim_Rating_140_Bronze = 65,
	Crim_Rating_140_Gold = 66,
	Crim_Rating_140_Green = 67,
	Crim_Rating_140_Silver = 68,
	Crim_Rating_150_Bronze = 69,
	Crim_Rating_150_Gold = 70,
	Crim_Rating_150_Green = 71,
	Crim_Rating_150_Silver = 72,
	Crim_Rating_160_Bronze = 73,
	Crim_Rating_160_Gold = 74,
	Crim_Rating_160_Green = 75,
	Crim_Rating_160_Silver = 76,
	Crim_Rating_170_Bronze = 77,
	Crim_Rating_170_Gold = 78,
	Crim_Rating_170_Green = 79,
	Crim_Rating_170_Silver = 80,
	Crim_Rating_180_Bronze = 81,
	Crim_Rating_180_Gold = 82,
	Crim_Rating_180_Green = 83,
	Crim_Rating_180_Silver = 84,
	Crim_Rating_190_Bronze = 85,
	Crim_Rating_190_Gold = 86,
	Crim_Rating_190_Green = 87,
	Crim_Rating_190_Silver = 88,
	Crim_Rating_200_Bronze = 89,
	Crim_Rating_200_Gold = 90,
	Crim_Rating_200_Green = 91,
	Crim_Rating_200_Silver = 92,
	Crim_Rating_210_Bronze = 93,
	Crim_Rating_210_Gold = 94,
	Crim_Rating_210_Green = 95,
	Crim_Rating_210_Silver = 96,
	Crim_Rating_220_Bronze = 97,
	Crim_Rating_220_Gold = 98,
	Crim_Rating_220_Green = 99,
	Crim_Rating_220_Silver = 100,
	Crim_Rating_230_Bronze = 101,
	Crim_Rating_230_Gold = 102,
	Crim_Rating_230_Green = 103,
	Crim_Rating_230_Silver = 104,
	Crim_Rating_240_Bronze = 105,
	Crim_Rating_240_Gold = 106,
	Crim_Rating_240_Green = 107,
	Crim_Rating_240_Silver = 108,
	Crim_Rating_250_Bronze = 109,
	Crim_Rating_250_Gold = 110,
	Crim_Rating_250_Green = 111,
	Crim_Rating_250_Silver = 112,
	Crim_Rating_260_Bronze = 113,
	Crim_Rating_260_Gold = 114,
	Crim_Rating_260_Green = 115,
	Crim_Rating_260_Silver = 116,
	Crim_Rating_270_Bronze = 117,
	Crim_Rating_270_Gold = 118,
	Crim_Rating_270_Green = 119,
	Crim_Rating_270_Silver = 120,
	Crim_Rating_280_Bronze = 121,
	Crim_Rating_280_Gold = 122,
	Crim_Rating_280_Green = 123,
	Crim_Rating_280_Silver = 124,
	Crim_Rating_290_Bronze = 125,
	Crim_Rating_290_Gold = 126,
	Crim_Rating_290_Green = 127,
	Crim_Rating_290_Silver = 128,
	DisplayPoint = 129,
	DistrictMap_TaskMarkerBG = 130,
	Enf_Rating_000_Bronze = 131,
	Enf_Rating_000_Gold = 132,
	Enf_Rating_000_Green = 133,
	Enf_Rating_000_Silver = 134,
	Enf_Rating_010_Bronze = 135,
	Enf_Rating_010_Gold = 136,
	Enf_Rating_010_Green = 137,
	Enf_Rating_010_Silver = 138,
	Enf_Rating_020_Bronze = 139,
	Enf_Rating_020_Gold = 140,
	Enf_Rating_020_Green = 141,
	Enf_Rating_020_Silver = 142,
	Enf_Rating_030_Bronze = 143,
	Enf_Rating_030_Gold = 144,
	Enf_Rating_030_Green = 145,
	Enf_Rating_030_Silver = 146,
	Enf_Rating_040_Bronze = 147,
	Enf_Rating_040_Gold = 148,
	Enf_Rating_040_Green = 149,
	Enf_Rating_040_Silver = 150,
	Enf_Rating_050_Bronze = 151,
	Enf_Rating_050_Gold = 152,
	Enf_Rating_050_Green = 153,
	Enf_Rating_050_Silver = 154,
	Enf_Rating_060_Bronze = 155,
	Enf_Rating_060_Gold = 156,
	Enf_Rating_060_Green = 157,
	Enf_Rating_060_Silver = 158,
	Enf_Rating_070_Bronze = 159,
	Enf_Rating_070_Gold = 160,
	Enf_Rating_070_Green = 161,
	Enf_Rating_070_Silver = 162,
	Enf_Rating_080_Bronze = 163,
	Enf_Rating_080_Gold = 164,
	Enf_Rating_080_Green = 165,
	Enf_Rating_080_Silver = 166,
	Enf_Rating_090_Bronze = 167,
	Enf_Rating_090_Gold = 168,
	Enf_Rating_090_Green = 169,
	Enf_Rating_090_Silver = 170,
	Enf_Rating_100_Bronze = 171,
	Enf_Rating_100_Gold = 172,
	Enf_Rating_100_Green = 173,
	Enf_Rating_100_Silver = 174,
	Enf_Rating_110_Bronze = 175,
	Enf_Rating_110_Gold = 176,
	Enf_Rating_110_Green = 177,
	Enf_Rating_110_Silver = 178,
	Enf_Rating_120_Bronze = 179,
	Enf_Rating_120_Gold = 180,
	Enf_Rating_120_Green = 181,
	Enf_Rating_120_Silver = 182,
	Enf_Rating_130_Bronze = 183,
	Enf_Rating_130_Gold = 184,
	Enf_Rating_130_Green = 185,
	Enf_Rating_130_Silver = 186,
	Enf_Rating_140_Bronze = 187,
	Enf_Rating_140_Gold = 188,
	Enf_Rating_140_Green = 189,
	Enf_Rating_140_Silver = 190,
	Enf_Rating_150_Bronze = 191,
	Enf_Rating_150_Gold = 192,
	Enf_Rating_150_Green = 193,
	Enf_Rating_150_Silver = 194,
	Enf_Rating_160_Bronze = 195,
	Enf_Rating_160_Gold = 196,
	Enf_Rating_160_Green = 197,
	Enf_Rating_160_Silver = 198,
	Enf_Rating_170_Bronze = 199,
	Enf_Rating_170_Gold = 200,
	Enf_Rating_170_Green = 201,
	Enf_Rating_170_Silver = 202,
	Enf_Rating_180_Bronze = 203,
	Enf_Rating_180_Gold = 204,
	Enf_Rating_180_Green = 205,
	Enf_Rating_180_Silver = 206,
	Enf_Rating_190_Bronze = 207,
	Enf_Rating_190_Gold = 208,
	Enf_Rating_190_Green = 209,
	Enf_Rating_190_Silver = 210,
	Enf_Rating_200_Bronze = 211,
	Enf_Rating_200_Gold = 212,
	Enf_Rating_200_Green = 213,
	Enf_Rating_200_Silver = 214,
	Enf_Rating_210_Bronze = 215,
	Enf_Rating_210_Gold = 216,
	Enf_Rating_210_Green = 217,
	Enf_Rating_210_Silver = 218,
	Enf_Rating_220_Bronze = 219,
	Enf_Rating_220_Gold = 220,
	Enf_Rating_220_Green = 221,
	Enf_Rating_220_Silver = 222,
	Enf_Rating_230_Bronze = 223,
	Enf_Rating_230_Gold = 224,
	Enf_Rating_230_Green = 225,
	Enf_Rating_230_Silver = 226,
	Enf_Rating_240_Bronze = 227,
	Enf_Rating_240_Gold = 228,
	Enf_Rating_240_Green = 229,
	Enf_Rating_240_Silver = 230,
	Enf_Rating_250_Bronze = 231,
	Enf_Rating_250_Gold = 232,
	Enf_Rating_250_Green = 233,
	Enf_Rating_250_Silver = 234,
	Enf_Rating_260_Bronze = 235,
	Enf_Rating_260_Gold = 236,
	Enf_Rating_260_Green = 237,
	Enf_Rating_260_Silver = 238,
	Enf_Rating_270_Bronze = 239,
	Enf_Rating_270_Gold = 240,
	Enf_Rating_270_Green = 241,
	Enf_Rating_270_Silver = 242,
	Enf_Rating_280_Bronze = 243,
	Enf_Rating_280_Gold = 244,
	Enf_Rating_280_Green = 245,
	Enf_Rating_280_Silver = 246,
	Enf_Rating_290_Bronze = 247,
	Enf_Rating_290_Gold = 248,
	Enf_Rating_290_Green = 249,
	Enf_Rating_290_Silver = 250,
	Faction_Criminal = 251,
	Faction_Enforcer = 252,
	Faction_Criminal_OpenConflict = 253,
	Faction_Enforcer_OpenConflict = 254,
	GroupLeader = 255,
	GroupPlayer = 256,
	InteractionPoint_Garage = 257,
	InteractionPoint_MusicZone = 258,
	InteractionPoint_Persona = 259,
	InteractionPoint_SymbolEditor = 260,
	InteractionPoint_Wardrobe = 261,
	Mailbox = 262,
	Mailbox_Occ = 263,
	MarketplaceZone = 264,
	AmmoVending = 265,
	OpenWorldDropOff_Enf = 266,
	OpenWorldDropOff_Large = 267,
	OpenWorldDropOff_Medium = 268,
	OpenWorldDropOff_Small = 269,
	OpenWorldDropOff_Vehicle = 270,
	OppositionPlayer = 271,
	Organisation_None = 272,
	PDA = 273,
	PlayerVehicle = 274,
	PlayerVehicleWithTaskItem = 275,
	PS_AFK = 276,
	PS_Arrested = 277,
	PS_DND = 278,
	PS_Unconscious = 279,
	Rating = 280,
	SpawnZone = 281,
	SpawnZone_Criminal = 282,
	SpawnZone_Enforcer = 283,
	SpawnZone_Factionless = 284,
	StashDropOff = 285,
	Status_AFK = 286,
	Status_Arrested = 287,
	Status_Crown = 288,
	Status_Dead = 289,
	Status_DND = 290,
	Status_Driving = 291,
	Status_LinkDead = 292,
	Status_None = 293,
	Status_NonTaskParticipant = 294,
	Status_OOD = 295,
	Status_Ready = 296,
	Status_Stunned = 297,
	Status_TaskParticipant = 298,
	Task_Arrow = 299,
	Task_Arrow_Occ = 300,
	Task_Checkpoint = 301,
	Task_Checkpoint_Occ = 302,
	Task_Item = 303,
	Task_Item_Occ = 304,
	Task_Item_Vehicle = 305,
	Task_Item_Vehicle_occ = 306,
	Task_Target = 307,
	Task_Target_Occ = 308,
	Task_Target_VIP = 309,
	TestItem = 310,
	Threat_Base = 311,
	Threat_Cri_Training = 312,
	Threat_Cri30 = 313,
	Threat_Enf_Training = 314,
	Threat_Enf30 = 315,
	VehicleRepair = 316,
	VehicleRepair_Msg = 317,
	VehicleRepair_occ = 318,
	VehicleSpawn = 319,
	VehicleSpawn_occ = 320,
	VOIP_Active_High = 321,
	VOIP_Active_Low = 322,
	VOIP_Active_Medium = 323,
	VOIP_InChannel = 324,
	VOIP_Muted = 325,
	VOIP_NotInChannel = 326,
	Waypoint = 327,
	Waypoint_Leader = 328,
	Waypoint_Leader_Occ = 329,
	Waypoint_Occ = 330,
	WIP = 331,
	Witnessing = 332,
	Tagger_Valentines = 333,
	Tagger_Duck = 334,
	Tagger_Default = 335,
	Radar_Visible = 336,
	Tagger_Rapid99 = 337,
	Tagger_Sluttles = 338,
	Icon_JokerTickets = 339,
	Tagger_Reaper = 340,
	Tagger_PurpleCat = 341,
	Tagger_Cat = 342,
	Spotter = 343,
	Spotter_Flare = 344,
	Elective_VehicleSpawn = 345,
	Elective_Corpse = 346,
	RadarJammer_Shadow = 347,
	MobileRadarTower = 348,
	AmmoDeployed_Shadow = 349,
	MobileSpawner = 350,
	Minigame_SnowballFight = 351,
	Minigame_Mugging_Item_Egg = 352,
	Minigame_GoldenWeapon_Explosive = 353,
	Minigame_GoldenWeapon_Easter_Protagonist = 354,
	Minigame_Mugging_Protagonist_Easter = 355,
	Minigame_Mugging_Carrier_Easter = 356,
	Minigame_Mugging_Item = 357,
	Minigame_Mugging_Protagonist = 358,
	Minigame_Mugging_Carrier = 359,
	Minigame_Mugging_NPC = 360,
	Tagger_Suit_Diamond = 361,
	Tagger_Suit_Spades = 362,
	Tagger_Suit_Clubs = 363,
	Tagger_Suit_Hearts = 364,
	Tagger_Suit_Joker = 365,
	Minigame_Infection_Survivor = 366,
	Minigame_Infection_Pumpkin = 367,
	Minigame_Infection_Headless = 368,
	Minigame_Mugging_Easter2015_Carrier = 369,
	Minigame_Mugging_Easter2015_Carrier = 370,
	Minigame_Mugging_Easter2015_Carrier = 371,
	Minigame_Mugging_Easter2015_Carrier = 372,
	Minigame_Mugging_Easter2015_Carrier = 373,
	Minigame_Mugging_Easter2015_Carrier_Protagonist = 374,
	Minigame_Muggable = 375,
	Mugging_Easter2015_Chicken = 376,
	Mugging_Easter2015_Bunny = 377,
	Minigame_FindTarget = 378,
	Minigame_Findtarget_Violet = 379,
	Minigame_Findtarget_Green = 380,
	Minigame_Anarchy = 381,
	Minigame_Anarchy_Provocateur = 382,
	etHUDIconCombo_MAX = 383,
};
enum etHUDIcon
{
	None = 0,
	Crim_Rating_000_Gold = 1,
	Crim_Rating_000_Green = 2,
	Crim_Rating_000_Silver = 3,
	Crim_Rating_010_Bronze = 4,
	Crim_Rating_010_Gold = 5,
	Crim_Rating_010_Green = 6,
	Crim_Rating_010_Silver = 7,
	Crim_Rating_020_Bronze = 8,
	Crim_Rating_020_Gold = 9,
	Crim_Rating_020_Green = 10,
	Crim_Rating_020_Silver = 11,
	Crim_Rating_030_Bronze = 12,
	Crim_Rating_030_Gold = 13,
	Crim_Rating_030_Green = 14,
	Crim_Rating_030_Silver = 15,
	Crim_Rating_040_Bronze = 16,
	Crim_Rating_040_Gold = 17,
	Crim_Rating_040_Green = 18,
	Crim_Rating_040_Silver = 19,
	Crim_Rating_050_Bronze = 20,
	Crim_Rating_050_Gold = 21,
	Crim_Rating_050_Green = 22,
	Crim_Rating_050_Silver = 23,
	Crim_Rating_060_Bronze = 24,
	Crim_Rating_060_Gold = 25,
	Crim_Rating_060_Green = 26,
	Crim_Rating_060_Silver = 27,
	Crim_Rating_070_Bronze = 28,
	Crim_Rating_070_Gold = 29,
	Crim_Rating_070_Green = 30,
	Crim_Rating_070_Silver = 31,
	Crim_Rating_080_Bronze = 32,
	Crim_Rating_080_Gold = 33,
	Crim_Rating_080_Green = 34,
	Crim_Rating_080_Silver = 35,
	Crim_Rating_090_Bronze = 36,
	Crim_Rating_090_Gold = 37,
	Crim_Rating_090_Green = 38,
	Crim_Rating_090_Silver = 39,
	Crim_Rating_100_Bronze = 40,
	Crim_Rating_100_Gold = 41,
	Crim_Rating_100_Green = 42,
	Crim_Rating_100_Silver = 43,
	Crim_Rating_110_Bronze = 44,
	Crim_Rating_110_Gold = 45,
	Crim_Rating_110_Green = 46,
	Crim_Rating_110_Silver = 47,
	Crim_Rating_120_Bronze = 48,
	Crim_Rating_120_Gold = 49,
	Crim_Rating_120_Green = 50,
	Crim_Rating_120_Silver = 51,
	Crim_Rating_130_Bronze = 52,
	Crim_Rating_130_Gold = 53,
	Crim_Rating_130_Green = 54,
	Crim_Rating_130_Silver = 55,
	Crim_Rating_140_Bronze = 56,
	Crim_Rating_140_Gold = 57,
	Crim_Rating_140_Green = 58,
	Crim_Rating_140_Silver = 59,
	Crim_Rating_150_Bronze = 60,
	Crim_Rating_150_Gold = 61,
	Crim_Rating_150_Green = 62,
	Crim_Rating_150_Silver = 63,
	Crim_Rating_160_Bronze = 64,
	Crim_Rating_160_Gold = 65,
	Crim_Rating_160_Green = 66,
	Crim_Rating_160_Silver = 67,
	Crim_Rating_170_Bronze = 68,
	Crim_Rating_170_Gold = 69,
	Crim_Rating_170_Green = 70,
	Crim_Rating_170_Silver = 71,
	Crim_Rating_180_Bronze = 72,
	Crim_Rating_180_Gold = 73,
	Crim_Rating_180_Green = 74,
	Crim_Rating_180_Silver = 75,
	Crim_Rating_190_Bronze = 76,
	Crim_Rating_190_Gold = 77,
	Crim_Rating_190_Green = 78,
	Crim_Rating_190_Silver = 79,
	Crim_Rating_200_Bronze = 80,
	Crim_Rating_200_Gold = 81,
	Crim_Rating_200_Green = 82,
	Crim_Rating_200_Silver = 83,
	Crim_Rating_210_Bronze = 84,
	Crim_Rating_210_Gold = 85,
	Crim_Rating_210_Green = 86,
	Crim_Rating_210_Silver = 87,
	Crim_Rating_220_Bronze = 88,
	Crim_Rating_220_Gold = 89,
	Crim_Rating_220_Green = 90,
	Crim_Rating_220_Silver = 91,
	Crim_Rating_230_Bronze = 92,
	Crim_Rating_230_Gold = 93,
	Crim_Rating_230_Green = 94,
	Crim_Rating_230_Silver = 95,
	Crim_Rating_240_Bronze = 96,
	Crim_Rating_240_Gold = 97,
	Crim_Rating_240_Green = 98,
	Crim_Rating_240_Silver = 99,
	Crim_Rating_250_Bronze = 100,
	Crim_Rating_250_Gold = 101,
	Crim_Rating_250_Green = 102,
	Crim_Rating_250_Silver = 103,
	Crim_Rating_260_Bronze = 104,
	Crim_Rating_260_Gold = 105,
	Crim_Rating_260_Green = 106,
	Crim_Rating_260_Silver = 107,
	Crim_Rating_270_Bronze = 108,
	Crim_Rating_270_Gold = 109,
	Crim_Rating_270_Green = 110,
	Crim_Rating_270_Silver = 111,
	Crim_Rating_280_Bronze = 112,
	Crim_Rating_280_Gold = 113,
	Crim_Rating_280_Green = 114,
	Crim_Rating_280_Silver = 115,
	Crim_Rating_290_Bronze = 116,
	Crim_Rating_290_Gold = 117,
	Crim_Rating_290_Green = 118,
	Crim_Rating_290_Silver = 119,
	Customisation_APBay = 120,
	Customisation_Music = 121,
	Customisation_Persona = 122,
	Customisation_Symbol = 123,
	Customisation_Vehicle = 124,
	Customisation_Wardrobe = 125,
	DistrictMap_Spawn = 126,
	DistrictMap_Spawn_Active = 127,
	DistrictMap_Spawn_Clicked = 128,
	Enf_Rating_000_Bronze = 129,
	Enf_Rating_000_Gold = 130,
	Enf_Rating_000_Green = 131,
	Enf_Rating_000_Silver = 132,
	Enf_Rating_010_Bronze = 133,
	Enf_Rating_010_Gold = 134,
	Enf_Rating_010_Green = 135,
	Enf_Rating_010_Silver = 136,
	Enf_Rating_020_Bronze = 137,
	Enf_Rating_020_Gold = 138,
	Enf_Rating_020_Green = 139,
	Enf_Rating_020_Silver = 140,
	Enf_Rating_030_Bronze = 141,
	Enf_Rating_030_Gold = 142,
	Enf_Rating_030_Green = 143,
	Enf_Rating_030_Silver = 144,
	Enf_Rating_040_Bronze = 145,
	Enf_Rating_040_Gold = 146,
	Enf_Rating_040_Green = 147,
	Enf_Rating_040_Silver = 148,
	Enf_Rating_050_Bronze = 149,
	Enf_Rating_050_Gold = 150,
	Enf_Rating_050_Green = 151,
	Enf_Rating_050_Silver = 152,
	Enf_Rating_060_Bronze = 153,
	Enf_Rating_060_Gold = 154,
	Enf_Rating_060_Green = 155,
	Enf_Rating_060_Silver = 156,
	Enf_Rating_070_Bronze = 157,
	Enf_Rating_070_Gold = 158,
	Enf_Rating_070_Green = 159,
	Enf_Rating_070_Silver = 160,
	Enf_Rating_080_Bronze = 161,
	Enf_Rating_080_Gold = 162,
	Enf_Rating_080_Green = 163,
	Enf_Rating_080_Silver = 164,
	Enf_Rating_090_Bronze = 165,
	Enf_Rating_090_Gold = 166,
	Enf_Rating_090_Green = 167,
	Enf_Rating_090_Silver = 168,
	Enf_Rating_100_Bronze = 169,
	Enf_Rating_100_Gold = 170,
	Enf_Rating_100_Green = 171,
	Enf_Rating_100_Silver = 172,
	Enf_Rating_110_Bronze = 173,
	Enf_Rating_110_Gold = 174,
	Enf_Rating_110_Green = 175,
	Enf_Rating_110_Silver = 176,
	Enf_Rating_120_Bronze = 177,
	Enf_Rating_120_Gold = 178,
	Enf_Rating_120_Green = 179,
	Enf_Rating_120_Silver = 180,
	Enf_Rating_130_Bronze = 181,
	Enf_Rating_130_Gold = 182,
	Enf_Rating_130_Green = 183,
	Enf_Rating_130_Silver = 184,
	Enf_Rating_140_Bronze = 185,
	Enf_Rating_140_Gold = 186,
	Enf_Rating_140_Green = 187,
	Enf_Rating_140_Silver = 188,
	Enf_Rating_150_Bronze = 189,
	Enf_Rating_150_Gold = 190,
	Enf_Rating_150_Green = 191,
	Enf_Rating_150_Silver = 192,
	Enf_Rating_160_Bronze = 193,
	Enf_Rating_160_Gold = 194,
	Enf_Rating_160_Green = 195,
	Enf_Rating_160_Silver = 196,
	Enf_Rating_170_Bronze = 197,
	Enf_Rating_170_Gold = 198,
	Enf_Rating_170_Green = 199,
	Enf_Rating_170_Silver = 200,
	Enf_Rating_180_Bronze = 201,
	Enf_Rating_180_Gold = 202,
	Enf_Rating_180_Green = 203,
	Enf_Rating_180_Silver = 204,
	Enf_Rating_190_Bronze = 205,
	Enf_Rating_190_Gold = 206,
	Enf_Rating_190_Green = 207,
	Enf_Rating_190_Silver = 208,
	Enf_Rating_200_Bronze = 209,
	Enf_Rating_200_Gold = 210,
	Enf_Rating_200_Green = 211,
	Enf_Rating_200_Silver = 212,
	Enf_Rating_210_Bronze = 213,
	Enf_Rating_210_Gold = 214,
	Enf_Rating_210_Green = 215,
	Enf_Rating_210_Silver = 216,
	Enf_Rating_220_Bronze = 217,
	Enf_Rating_220_Gold = 218,
	Enf_Rating_220_Green = 219,
	Enf_Rating_220_Silver = 220,
	Enf_Rating_230_Bronze = 221,
	Enf_Rating_230_Gold = 222,
	Enf_Rating_230_Green = 223,
	Enf_Rating_230_Silver = 224,
	Enf_Rating_240_Bronze = 225,
	Enf_Rating_240_Gold = 226,
	Enf_Rating_240_Green = 227,
	Enf_Rating_240_Silver = 228,
	Enf_Rating_250_Bronze = 229,
	Enf_Rating_250_Gold = 230,
	Enf_Rating_250_Green = 231,
	Enf_Rating_250_Silver = 232,
	Enf_Rating_260_Bronze = 233,
	Enf_Rating_260_Gold = 234,
	Enf_Rating_260_Green = 235,
	Enf_Rating_260_Silver = 236,
	Enf_Rating_270_Bronze = 237,
	Enf_Rating_270_Gold = 238,
	Enf_Rating_270_Green = 239,
	Enf_Rating_270_Silver = 240,
	Enf_Rating_280_Bronze = 241,
	Enf_Rating_280_Gold = 242,
	Enf_Rating_280_Green = 243,
	Enf_Rating_280_Silver = 244,
	Enf_Rating_290_Bronze = 245,
	Enf_Rating_290_Gold = 246,
	Enf_Rating_290_Green = 247,
	Enf_Rating_290_Silver = 248,
	Faction_Criminal = 249,
	Faction_Enforcer = 250,
	Faction_Criminal_OpenConflict = 251,
	Faction_Enforcer_OpenConflict = 252,
	Icon_APBCash = 253,
	Icon_Rating = 254,
	Marker_Ammo = 255,
	Marker_Arson = 256,
	Marker_Car = 257,
	Marker_CarWithArrows = 258,
	Marker_Crowbar = 259,
	Marker_Graffiti = 260,
	Marker_Ladder = 261,
	Marker_Leader = 262,
	Marker_Mail = 263,
	Marker_MultiCheckpoint = 264,
	Marker_Spanner = 265,
	Marker_Stash = 266,
	Marker_Stickman = 267,
	Marker_Suitcase = 268,
	Marker_Target = 269,
	Crim_Rating_000_Bronze = 270,
	Organisation_BloodRoses = 271,
	Organisation_GKings = 272,
	Organisation_Holiday_Halloween = 273,
	Organisation_Holiday_Christmas = 274,
	Organisation_Praetorian = 275,
	Organisation_PrentissTigers = 276,
	Shape_TriangleWhite = 277,
	Status_AFK = 278,
	Status_Arrested = 279,
	Status_Dead = 280,
	Status_DND = 281,
	Status_InVehicle = 282,
	Status_LinkDead = 283,
	Status_Locked = 284,
	Status_NoEntry = 285,
	Status_NormalDot = 286,
	Status_OOD = 287,
	Status_Ready = 288,
	Status_ThumbsUp = 289,
	Status_Unconcious = 290,
	Status_Unlocked = 291,
	Status_WIP = 292,
	Task_Arrow = 293,
	Task_Arrow_Occ = 294,
	Task_CircleLarge = 295,
	Task_CircleLarge_occ = 296,
	Task_CircleMed = 297,
	Task_CircleMed_occ = 298,
	Task_CircleSmall = 299,
	Task_CircleSmall_occ = 300,
	Task_Diamond = 301,
	Task_Diamond_occ = 302,
	Task_Shield = 303,
	Task_Shield_occ = 304,
	Task_Square = 305,
	Task_Square_occ = 306,
	Task_Star = 307,
	Task_Star_occ = 308,
	Task_Triangle = 309,
	Task_Triangle_occ = 310,
	Threat_Cri_Training = 311,
	Threat_Enf_Training = 312,
	VOIP_Active_High = 313,
	VOIP_Active_Low = 314,
	VOIP_Active_Medium = 315,
	VOIP_InChannel = 316,
	VOIP_Muted = 317,
	VOIP_NotInChannel = 318,
	Waypoint_Pin = 319,
	Tagger_Valentines = 320,
	Tagger_Duck = 321,
	Tagger_Default = 322,
	Tagger_Rapid99 = 323,
	Tagger_Sluttles = 324,
	Radar_Visible = 325,
	Radar_Ping = 326,
	Radar_Visible_Opp = 327,
	Icon_JokerTickets = 328,
	Organisation_Joker = 329,
	Tagger_Reaper = 330,
	Tagger_PurpleCat = 331,
	Tagger_Cat = 332,
	Spotter = 333,
	Spotter_Flare = 334,
	Marker_MobileRadarTower = 335,
	Ammo_Shadow = 336,
	Jammer_Shadow = 337,
	Minigame_SnowballFight = 338,
	Minigame_Mugging_Item_Egg = 339,
	Minigame_GoldenWeapon_Explosive = 340,
	Minigame_GoldenWeapon_Protagonist_Easter = 341,
	Minigame_Mugging_Protagonist_Easter = 342,
	Minigame_Mugging_Carrier_Easter = 343,
	Minigame_Mugging_Item = 344,
	Minigame_Mugging_Protagonist = 345,
	Minigame_Mugging_Carrier = 346,
	Minigame_Mugging_NPC = 347,
	Tagger_Suit_Diamond = 348,
	Tagger_Suit_Spades = 349,
	Tagger_Suit_Clubs = 350,
	Tagger_Suit_Hearts = 351,
	Tagger_Suit_Joker = 352,
	Minigame_Infection_Survivor = 353,
	Minigame_Infection_Pumpkin = 354,
	Minigame_Infection_Headless = 355,
	Minigame_Mugging_Easter2015_Carrier = 356,
	Minigame_Mugging_Easter2015_Carrier = 357,
	Minigame_Mugging_Easter2015_Carrier = 358,
	Minigame_Mugging_Easter2015_Carrier = 359,
	Minigame_Mugging_Easter2015_Carrier = 360,
	Minigame_Mugging_Easter2015_Carrier_Protagonist = 361,
	Minigame_Muggable = 362,
	Mugging_Easter2015_Chicken = 363,
	Mugging_Easter2015_Bunny = 364,
	Minigame_FindTarget = 365,
	Minigame_Findtarget_Violet = 366,
	Minigame_Findtarget_Green = 367,
	Minigame_Anarchy = 368,
	Minigame_Anarchy_Provocateur = 369,
	etHUDIcon_MAX = 370,
};
enum etHUDMarkerOffset
{
	None = 0,
	UseAutoRouteLocation = 1,
	Contact = 2,
	Graffiti = 3,
	Loot = 4,
	Mailbox = 5,
	Minigame_FDM = 6,
	Player = 7,
	PlayerVIP = 8,
	Tagger = 9,
	TaskItemDefault = 10,
	Task_Aerial = 11,
	Task_AirCon = 12,
	Task_Alarm = 13,
	Task_BackDoor = 14,
	Task_BankMachine = 15,
	Task_Container = 16,
	Task_CrateLong = 17,
	Task_CrateTall = 18,
	Task_Default = 19,
	Task_Doorway = 20,
	Task_ElectricBox = 21,
	Task_FinancialVendingStand = 22,
	Task_FireHydrant = 23,
	Task_GarageDoor = 24,
	Task_InvisibleProp = 25,
	Task_PayPhone = 26,
	Task_PlayerItem = 27,
	Task_PortaCabin = 28,
	Task_PortaCabin_Large = 29,
	Task_SatelliteDish = 30,
	Task_SecurityCamera = 31,
	Task_ShopFront = 32,
	Task_TargetGraffitiPoint = 33,
	Task_TargetNPC = 34,
	Task_TicketMachine = 35,
	Task_VendingMachine = 36,
	Task_WarehousePallet = 37,
	Task_Window = 38,
	Task_Yacht = 39,
	Vehicle = 40,
	Waypoint = 41,
	Zone = 42,
	etHUDMarkerOffset_MAX = 43,
};
enum etHUDMarkerStateColour
{
	None = 0,
	Checkpoint = 1,
	Checkpoint_Scavenger = 2,
	Contact_Pledged = 3,
	Contact_Unpledged = 4,
	CustomisationZone = 5,
	Default = 6,
	ElectiveCorpse = 7,
	ElectiveSpawnPoint = 8,
	FactionCriminal = 9,
	FactionEnforcer = 10,
	GraffitiNeutral = 11,
	GroupLeader = 12,
	GroupPlayer = 13,
	HeatLevel5_Criminal = 14,
	HeatLevel5_Enforcer = 15,
	InteractionPoint_Garage = 16,
	InteractionPoint_MarketPlace = 17,
	InteractionPoint_MusicStudio = 18,
	InteractionPoint_Persona = 19,
	InteractionPoint_SymbolEditor = 20,
	InteractionPoint_Wardrobe = 21,
	Mailbox = 22,
	Minigame = 23,
	Minigame_FindTarget_DevOps = 24,
	Minigame_Protagonist = 25,
	Openworld_Normal = 26,
	OppositionPlayer = 27,
	PlayerRadarJammer = 28,
	Player_Ping = 29,
	TaskItem = 30,
	TaskItem_Opposed = 31,
	TaskItem_Scavenger = 32,
	TaskObjective = 33,
	ValentinesPink = 34,
	Waypoint_Group = 35,
	Waypoint_Leader = 36,
	Waypoint_Personal = 37,
	etHUDMarkerStateColour_MAX = 38,
};
enum etHUDMarkerVisual
{
	None = 0,
	MinigameDebugLocation = 1,
	TaggerValentines = 2,
	TaggerDuck = 3,
	TaggerDefault = 4,
	Tagger_Rapid99 = 5,
	Tagger_Sluttles = 6,
	Tagger_Reaper = 7,
	Tagger_PurpleCat = 8,
	Tagger_Cat = 9,
	Spotter = 10,
	Spotter_Flare = 11,
	Tagger_Suit_Clubs = 12,
	Tagger_Suit_Diamond = 13,
	Tagger_Suit_Hearts = 14,
	Tagger_Suit_Spades = 15,
	Tagger_Suit_Joker = 16,
	POI_DeployedRadarJammer_Team = 17,
	POI_VehicleMobileRadarTower_Team = 18,
	POI_MobileSpawn = 19,
	POI_MobileSpawn_Team = 20,
	POI_AmmoCarrier_Team = 21,
	POI_DeployedAmmo_Team = 22,
	VehicleMobileRadarTower = 23,
	Contact_Fixer = 24,
	Contact_Pledged = 25,
	DisplayPoint = 26,
	Door = 27,
	InteractionPoint_Ammo = 28,
	InteractionPoint_Garage = 29,
	InteractionPoint_MarketPlace = 30,
	InteractionPoint_MusicStudio = 31,
	InteractionPoint_Persona = 32,
	InteractionPoint_SymbolEditor = 33,
	InteractionPoint_Wardrobe = 34,
	Mailbox = 35,
	MaxHeatPlayer_Criminal = 36,
	MaxHeatPlayer_EnforcerToCriminal = 37,
	MaxHeatPlayer_EnforcerToEnforcer = 38,
	MaxThreatPlayer_Criminal = 39,
	MaxThreatPlayer_Enforcer = 40,
	Contact = 41,
	OpenWorldAutoDefault = 42,
	OpenWorldDropOff_Enforcer = 43,
	OpenWorldDropOff_Criminal = 44,
	OpenWorldDropOff_Vehicle = 45,
	OpenWorldDropOff_Vehicle_Enforcer = 46,
	Player_DeployedVehicle = 47,
	Player_GM = 48,
	Player_Group = 49,
	Player_GroupLeader = 50,
	Player_Opposition = 51,
	SpawnZone_BothFactions = 52,
	SpawnZone_Criminal = 53,
	SpawnZone_Enforcer = 54,
	StashDropOff_Crim = 55,
	StashDropOff_Enf = 56,
	TaskItemDefault = 57,
	TaskItemDeliverableVehicle = 58,
	TaskItemMovingTarget = 59,
	TaskItemNoPickup = 60,
	TaskItemScavenger = 61,
	TaskItemShared = 62,
	TaskItemStash = 63,
	TaskTargetAntigraffiti = 64,
	TaskTargetBombDisposal = 65,
	TaskTargetBombing = 66,
	TaskTargetBugPlanting = 67,
	TaskTargetBuildingArson = 68,
	TaskTargetBuildingFeature = 69,
	TaskTargetBurglary = 70,
	TaskTargetCheckpoint = 71,
	TaskTargetCSI = 72,
	TaskTargetDeathmatchPlayer = 73,
	TaskTargetDefault = 74,
	TaskTargetDropOff = 75,
	TaskTargetForcedEntry = 76,
	TaskTargetGraffitiPoint = 77,
	TaskTargetHacking = 78,
	TaskTargetInvestigate = 79,
	TaskTargetGraffitiNeutral = 80,
	TaskTargetInvestigateVehicle = 81,
	TaskTargetItemSpawnPoint = 82,
	TaskTargetNPC = 83,
	TaskTargetProp = 84,
	TaskTargetRendezvous_Group = 85,
	TaskTargetRendezvous_Solo = 86,
	TaskTargetSabotage = 87,
	TaskTargetScan = 88,
	TaskTargetScavenger = 89,
	TaskTargetSharedDropOff = 90,
	TaskTargetVandaliseProp = 91,
	TaskTargetVehicle = 92,
	TaskTargetVehicleArson = 93,
	TaskTargetVehicleCargo = 94,
	TaskTargetVehicleDeliverKeep = 95,
	TaskTargetVehicleDeliverKeep0s = 96,
	TaskTargetVehicleLooting = 97,
	TaskTargetVehicleLootingEnforcer = 98,
	TaskTargetVehiclePickup = 99,
	TaskTargetVehicleSeizure = 100,
	TaskTargetVehicleSpawnPoint = 101,
	TaskTargetVehicleTheft = 102,
	TaskTargetVehicleVandalism = 103,
	TaskTargetVIP = 104,
	TestItem = 105,
	VehiclePosition_Cargo = 106,
	VehiclePosition_FrontLeft = 107,
	VehiclePosition_FrontRight = 108,
	VehiclePosition_RearLeft = 109,
	VehiclePosition_RearRight = 110,
	VehicleRepairZone = 111,
	VehicleSpawnZone = 112,
	Waypoint_Group = 113,
	Waypoint_Leader = 114,
	Waypoint_Personal = 115,
	Witness = 116,
	Player_Ping = 117,
	PlayerRadarJammer = 118,
	OppositionRadarJammer = 119,
	TaskTargetVIPHalloween = 120,
	Elective_MissionSpawn = 121,
	Chaos_Player_Friendly = 122,
	Chaos_Player_Enemy = 123,
	Elective_VehicleSpawn = 124,
	Elective_Corpse = 125,
	FriendlyBrick = 126,
	Minigame_SnowballFight = 127,
	Minigame_ElfEvent = 128,
	Boombox_Team = 129,
	Boombox_Opposition = 130,
	Minigame_Mugging_Item_Egg = 131,
	Minigame_GoldenWeapon_Easter = 132,
	Minigame_GoldenWeapon_Easter_Protagonist = 133,
	Minigame_Mugging_Easter_Protagonist = 134,
	Minigame_Mugging_Easter_Bunny = 135,
	Minigame_Mugging_Easter_Chicken = 136,
	Minigame_Mugging_Easter_Carrier = 137,
	Minigame_Mugging_Item = 138,
	Minigame_GoldenWeapon = 139,
	Minigame_GoldenWeapon_Protagonist = 140,
	Minigame_Mugging_Protagonist = 141,
	Minigame_Mugging_NPC = 142,
	Minigame_Mugging_Carrier = 143,
	Minigame_SnowballFight_OnMission = 144,
	Minigame_Mugging_Item_OnMission = 145,
	Minigame_Mugging_NPC_OnMission = 146,
	Minigame_GoldenWeapon_Protagonist_OnMission = 147,
	Minigame_GoldenWeapon_Easter_Protagonist_OnMission = 148,
	Minigame_Infection_Item = 149,
	Minigame_Infection_Item_OnMission = 150,
	Minigame_Infection_Survivor_Ping = 151,
	Minigame_Infection_Protagonist = 152,
	Player_Neutral = 153,
	Minigame_ElfEvent_OnMission = 154,
	Minigame_Mugging_Easter_Carrier = 155,
	Minigame_Mugging_Easter_Carrier = 156,
	Minigame_Mugging_Easter_Carrier = 157,
	Minigame_Mugging_Easter_Carrier = 158,
	Minigame_Mugging_Easter_Carrier = 159,
	Minigame_Mugging_Easter_V2_Protagonist = 160,
	Minigame_Mugging_Easter_V2_Bunny = 161,
	Minigame_Mugging_Easter_V2_Chicken = 162,
	Minigame_Mugging_Easter_V2_Carrier = 163,
	Minigame_Mugging_Easter_V2_Carrier = 164,
	Minigame_Mugging_Easter_V2_Carrier = 165,
	Minigame_Mugging_Easter_V2_Carrier = 166,
	Minigame_Mugging_Easter_V2_Carrier = 167,
	Minigame_FindDev = 168,
	Minigame_FindDev_Violet = 169,
	Minigame_FindDev_Green = 170,
	Minigame_WeaponDrop_Legendary = 171,
	Minigame_WeaponDrop_Protagonist = 172,
	Minigame_WeaponDrop_HighScore = 173,
	Minigame_WeaponDrop_HighScore_Ping = 174,
	Minigame_WeaponDrop_HighScore_Friendly = 175,
	Contact_Anarchy = 176,
	etHUDMarkerVisual_MAX = 177,
};
enum etHUDMarkerVisualText
{
	Elective_MissionSpawn = 0,
	Elective_VehicleSpawn = 1,
	MinigameDebugLocation = 2,
	Minigame_ElfEvent = 3,
	Minigame_ElfEvent_OnMission = 4,
	Minigame_GoldenWeapon = 5,
	Minigame_GoldenWeapon_Easter = 6,
	Minigame_GoldenWeapon_Easter_Protagonist = 7,
	Minigame_GoldenWeapon_Easter_Protagonist_OnMission = 8,
	Minigame_GoldenWeapon_Protagonist = 9,
	Minigame_GoldenWeapon_Protagonist_OnMission = 10,
	Minigame_Infection_Item_OnMission = 11,
	Minigame_Infection_Protagonist = 12,
	Minigame_Infection_Survivor_Ping = 13,
	Minigame_Mugging_Carrier = 14,
	Minigame_Mugging_Easter_Bunny = 15,
	Minigame_Mugging_Easter_Carrier = 16,
	Minigame_Mugging_Easter_Carrier = 17,
	Minigame_Mugging_Easter_Carrier = 18,
	Minigame_Mugging_Easter_Carrier = 19,
	Minigame_Mugging_Easter_Carrier = 20,
	Minigame_Mugging_Easter_Carrier = 21,
	Minigame_Mugging_Easter_Chicken = 22,
	Minigame_Mugging_Easter_Protagonist = 23,
	Minigame_Mugging_Item = 24,
	Minigame_Mugging_Item_Egg = 25,
	Minigame_Mugging_Item_OnMission = 26,
	Minigame_Mugging_NPC = 27,
	Minigame_Mugging_NPC_OnMission = 28,
	Minigame_Mugging_Protagonist = 29,
	Minigame_SnowballFight = 30,
	Minigame_SnowballFight_OnMission = 31,
	Minigame_WeaponDrop_HighScore = 32,
	Minigame_WeaponDrop_HighScore_Friendly = 33,
	Minigame_WeaponDrop_HighScore_Ping = 34,
	Minigame_WeaponDrop_Protagonist = 35,
	TaskItemDefault = 36,
	TaskItemDeliverableVehicle = 37,
	TaskItemMovingTarget = 38,
	TaskItemScavenger = 39,
	TaskItemShared = 40,
	TaskTargetAntigraffiti = 41,
	TaskTargetBombDisposal = 42,
	TaskTargetBombing = 43,
	TaskTargetBugPlanting = 44,
	TaskTargetBuildingArson = 45,
	TaskTargetBuildingFeature = 46,
	TaskTargetBurglary = 47,
	TaskTargetCSI = 48,
	TaskTargetCheckpoint = 49,
	TaskTargetDropOff = 50,
	TaskTargetForcedEntry = 51,
	TaskTargetGraffitiNeutral = 52,
	TaskTargetGraffitiPoint = 53,
	TaskTargetHacking = 54,
	TaskTargetInvestigate = 55,
	TaskTargetInvestigateVehicle = 56,
	TaskTargetItemSpawnPoint = 57,
	TaskTargetProp = 58,
	TaskTargetRendezvous_Group = 59,
	TaskTargetRendezvous_Solo = 60,
	TaskTargetSabotage = 61,
	TaskTargetScan = 62,
	TaskTargetScavenger = 63,
	TaskTargetSharedDropOff = 64,
	TaskTargetVIP = 65,
	TaskTargetVIPHalloween = 66,
	TaskTargetVehicle = 67,
	TaskTargetVehicleArson = 68,
	TaskTargetVehicleCargo = 69,
	TaskTargetVehicleDeliverKeep = 70,
	TaskTargetVehicleDeliverKeep0s = 71,
	TaskTargetVehicleLooting = 72,
	TaskTargetVehicleLootingEnforcer = 73,
	TaskTargetVehiclePickup = 74,
	TaskTargetVehicleSeizure = 75,
	TaskTargetVehicleSpawnPoint = 76,
	TaskTargetVehicleTheft = 77,
	TaskTargetVehicleVandalism = 78,
	Witness = 79,
	etHUDMarkerVisualText_MAX = 80,
};
enum etHUDMessageCategory
{
	Default = 0,
	APB = 1,
	ActionHUD = 2,
	AdHoc = 3,
	Ammo = 4,
	Backup = 5,
	Challenge = 6,
	Combat = 7,
	EditorWarning = 8,
	Fame = 9,
	GiftBox = 10,
	Group = 11,
	Heat = 12,
	Match = 13,
	Matchup = 14,
	Minigame = 15,
	Outcome = 16,
	Reward = 17,
	Team = 18,
	Threat = 19,
	Tutorial = 20,
	VehicleCritical = 21,
	etHUDMessageCategory_MAX = 22,
};
enum etHUDMessagePosition
{
	APB = 0,
	Bottom = 1,
	BottomLower = 2,
	CombatMsg = 3,
	DeathMessage = 4,
	Middle = 5,
	Top = 6,
	TopUpper = 7,
	etHUDMessagePosition_MAX = 8,
};
enum etHUDMessage
{
	None = 0,
	AM_Abandon_Match_Fail = 1,
	AM_AdHocEnemySideDeliverItem = 2,
	AM_AdHocEnemySideDeliverItems = 3,
	AM_AdHocEnemySideDeliverVehicle = 4,
	AM_AdHocSideDeliverItem = 5,
	AM_AdHocSideDeliverItems = 6,
	AM_AdHocSideDeliverVehicleDamaged = 7,
	AM_AdHocSideDeliverVehicleUndamaged = 8,
	AM_AdHocYouDeliverItem = 9,
	AM_AdHocYouDeliverItems = 10,
	AM_AdHocYouDeliverItems_AllFailed = 11,
	AM_AdHocYouDeliverItems_AllFailed = 12,
	AM_AdHocYouDeliverItems_AllFailed_OnMission = 13,
	AM_AdHocYouDeliverItems_SomeFailed = 14,
	AM_AdHocYouDeliverItems_SomeFailed = 15,
	AM_AdHocYouDeliverVehicle = 16,
	AM_AdHocYouDeliverVehicleFailed = 17,
	AM_AdHocYouDeliverVehicleFailed = 18,
	AM_AdHocYouDeliverVehicleFailed_OnMission = 19,
	AM_AmmoFromStorage_InsufficientAmmo = 20,
	AM_AmmoFromStorage_Resupplied = 21,
	AM_AmmoYouOutOfBullets = 22,
	AM_AmmoYouOutOfGrenades = 23,
	AM_AmmoYouOutOfProjectiles = 24,
	AM_AmmoZone_BoughtAmmoAndFullyResupplied = 25,
	AM_AmmoZone_BoughtAmmoCouldNotFullyResupply = 26,
	AM_AmmoZone_Deactivate = 27,
	AM_AmmoZone_Fail = 28,
	AM_AmmoZone_Fail_AllWeaponsFull = 29,
	AM_AmmoZone_Fail_Arrested = 30,
	AM_AmmoZone_Fail_Dead = 31,
	AM_AmmoZone_Fail_DepotNotDeployed = 32,
	AM_AmmoZone_Fail_FnModInactive = 33,
	AM_AmmoZone_Fail_InVehicle = 34,
	AM_AmmoZone_Fail_InsufficientFunds = 35,
	AM_AmmoZone_Fail_NoEquippedWeapon = 36,
	AM_AmmoZone_Fail_Unconcious = 37,
	AM_AmmoZone_Fail_VehicleMoving = 38,
	AM_AmmoZone_Fail_WrongFaction = 39,
	AM_AmmoZone_Fail_WrongGroup = 40,
	AM_Attacked_InvulnerablePlayer = 41,
	AM_BackupAnyRequest = 42,
	AM_CSA_TeammateSucceed = 43,
	AM_CombatAnyStreakArrestOn = 44,
	AM_CombatAnyStreakArrestStop = 45,
	AM_CombatAnyStreakKillOn = 46,
	AM_CombatAnyStreakKillStop = 47,
	AM_CombatAnyStreakWin = 48,
	AM_CombatArrestOpp = 49,
	AM_CombatArrestTeam = 50,
	AM_CombatKillOpp = 51,
	AM_CombatKillTeam = 52,
	AM_CombatKillTeamOther = 53,
	AM_CombatKillWithOwn = 54,
	AM_CombatKillWithOwn_Combat = 55,
	AM_CombatMuggedOpp = 56,
	AM_CombatMuggedTeam = 57,
	AM_CombatRescueOpp = 58,
	AM_CombatRescueTeam = 59,
	AM_CombatStunOpp = 60,
	AM_CombatStunSelfOpp = 61,
	AM_CombatStunSelfTeam = 62,
	AM_CombatStunTMOpp = 63,
	AM_CombatStunTMTeam = 64,
	AM_CombatStunTeam = 65,
	AM_CombatSuicideOpp = 66,
	AM_CombatSuicideTeam = 67,
	AM_CombatTKOpp = 68,
	AM_CombatTKOppOther = 69,
	AM_CombatTKTeam = 70,
	AM_CombatTKTeamOther = 71,
	AM_CombatValentinePrimary = 72,
	AM_CombatValentineSecondary = 73,
	AM_CombatYouKillReward = 74,
	AM_CombatYouPlayerAssistReward = 75,
	AM_CombatYouStreakArrestOn = 76,
	AM_CombatYouStreakArrestStop = 77,
	AM_CombatYouStreakKillOn = 78,
	AM_CombatYouStreakKillStop = 79,
	AM_CombatYouStreakWinOn = 80,
	AM_CombatYouStunnedSomeoneReward = 81,
	AM_CombatYouWereArrested_Main = 82,
	AM_Combat_DeathMsg_KillWeapon = 83,
	AM_Combat_DeathMsg_Suicide = 84,
	AM_Combat_DeathMsg_TK = 85,
	AM_Combat_Event_BunnyMug = 86,
	AM_ContactError_Aggrevated = 87,
	AM_ContactError_Ambient = 88,
	AM_ContactError_ContactLocked = 89,
	AM_ContactError_InMission = 90,
	AM_ContactError_WrongFaction = 91,
	AM_ContactInteraction_Pledged_Single = 92,
	AM_ContactInteraction_Unpledged_Single = 93,
	AM_Contact_Pledge_Break = 94,
	AM_Contact_Pledge_BreakFail_OnMission = 95,
	AM_Contact_Pledge_Make = 96,
	AM_DamagedYouTaskTargetObstruction_Player = 97,
	AM_DamagedYouTaskTargetObstruction_Vehicle = 98,
	AM_DeliverVehicle_Fail_PlayerOwned = 99,
	AM_DeliverVehicle_Fail_TaskItem = 100,
	AM_DestroyProp_Halloween_Pumpkin = 101,
	AM_DestroyProp_Halloween_Pumpkin_Purple = 102,
	AM_Display_Graffiti_Fail = 103,
	AM_DistrictBlock = 104,
	AM_EnterResupplyZone = 105,
	AM_EnterResupplyZone_Vehicle = 106,
	AM_Event_EggDrop = 107,
	AM_FameAnyContactLevelMax = 108,
	AM_FameAnyContactLevelMax_Tutorial = 109,
	AM_FameAnyEarnAchievement = 110,
	AM_FameAnyRoleGainLevel = 111,
	AM_FameAnyRoleLevelMax = 112,
	AM_FameMatchEarnedMedal = 113,
	AM_FameTeamContactGainLevel = 114,
	AM_FameTeamOrganisationGainLevel = 115,
	AM_FameYouContactGainLevel = 116,
	AM_FameYouContactLevelMax = 117,
	AM_FameYouContactReferal = 118,
	AM_FameYouEarnAchievement = 119,
	AM_FameYouEarnMedal = 120,
	AM_FameYouOrganisationGainLevel = 121,
	AM_FameYouOrganisationMaxLevel = 122,
	AM_FameYouRoleGainLevel = 123,
	AM_FameYouRoleMaxLevel = 124,
	AM_GroupAnyNewLeader = 125,
	AM_GroupIsReady = 126,
	AM_GroupNotReady = 127,
	AM_GroupYouNewLeader = 128,
	AM_HeatAnyNotorietyLevel0 = 129,
	AM_HeatSideNotorietyLevelDrops = 130,
	AM_HeatSideNotorietyLevelRaise = 131,
	AM_HeatSidePrestigeLevelDrops = 132,
	AM_HeatSidePrestigeLevelRaise = 133,
	AM_HeatSideWitnessedByEnforcer = 134,
	AM_HeatSideWitnessedCrime = 135,
	AM_HeatYouNotorietyLevel0 = 136,
	AM_HeatYouNotorietyLevel0HUD = 137,
	AM_HeatYouNotorietyLevel1 = 138,
	AM_HeatYouNotorietyLevel2Drop = 139,
	AM_HeatYouNotorietyLevel2Rise = 140,
	AM_HeatYouNotorietyLevel3Drop = 141,
	AM_HeatYouNotorietyLevel3Raise = 142,
	AM_HeatYouNotorietyLevel4Drop = 143,
	AM_HeatYouNotorietyLevel4Raise = 144,
	AM_HeatYouNotorietyLevelDrops = 145,
	AM_HeatYouNotorietyLevelRaise = 146,
	AM_HeatYouPrestigeLevel0 = 147,
	AM_HeatYouPrestigeLevel0HUD = 148,
	AM_HeatYouPrestigeLevel1234Increase = 149,
	AM_HeatYouPrestigeLevel123Drop = 150,
	AM_HeatYouPrestigeLevel4Drop = 151,
	AM_HeatYouPrestigeLevelDrops = 152,
	AM_HeatYouPrestigeLevelRaise = 153,
	AM_HeatYouWitness = 154,
	AM_HeatYouYourCrimeWasWitnessed = 155,
	AM_HeatYouYourCrimeWasWitnessed_Tutorial = 156,
	AM_HeatYou_WitnessCrime1_CrimIdle_EnfIdle = 157,
	AM_HeatYou_WitnessCrime2_CrimIdle_EnfMission = 158,
	AM_HeatYou_WitnessCrime3_CrimIdle_EnfMatch = 159,
	AM_HeatYou_WitnessCrime4_CrimMatch_EnfIdle = 160,
	AM_HeatYou_WitnessCrime5_CrimMatch_EnfMission = 161,
	AM_HeatYou_WitnessCrime6_CrimMatch_EnfMatch = 162,
	AM_HeatYou_WitnessCrime7_BothOnSameMatch = 163,
	AM_HeatYou_WitnessCrime8_CrimOvermatched = 164,
	AM_HeatYou_WitnessCrime9_EnfOvermatched = 165,
	AM_HeatYou_WitnessCrime_Tutorial = 166,
	AM_Heat_BountyClaimed_AnyCrimKillCrim = 167,
	AM_Heat_BountyClaimed_AnyCrimKillEnf = 168,
	AM_Heat_BountyClaimed_AnyEnfKillCrim = 169,
	AM_Heat_BountyClaimed_AnyEnfKillEnf = 170,
	AM_Heat_BountyClaimed_AnyKillLevel5 = 171,
	AM_Heat_BountyClaimed_You = 172,
	AM_Heat_BountyClaimed_YouCrimKillCrim = 173,
	AM_Heat_BountyClaimed_YouCrimKillEnf = 174,
	AM_Heat_BountyClaimed_YouEnfKillCrim = 175,
	AM_Heat_BountyClaimed_YouEnfKillEnf = 176,
	AM_Heat_Bounty_AnyNotorietyLevel5 = 177,
	AM_Heat_Bounty_AnyNotorietyLevel5ForCriminals = 178,
	AM_Heat_Bounty_AnyNotorietyLevel5ForEnforcers = 179,
	AM_Heat_Bounty_AnyPrestigeLevel5 = 180,
	AM_Heat_Bounty_AnyPrestigeLevel5 = 181,
	AM_Heat_Bounty_TeamNotorietyLevel5 = 182,
	AM_Heat_Bounty_TeamPrestigeLevel5 = 183,
	AM_Heat_Bounty_YouNotorietyLevel5 = 184,
	AM_Heat_Bounty_YouNotorietyLevel5 = 185,
	AM_Heat_Bounty_YouPrestigeLevel5 = 186,
	AM_Heat_Bounty_YouPrestigeLevel5 = 187,
	AM_Heat_Tutorial_YouNotorietyLevel0 = 188,
	AM_Heat_Tutorial_YouNotorietyLevel1 = 189,
	AM_Heat_Tutorial_YouNotorietyLevel2Drop = 190,
	AM_Heat_Tutorial_YouNotorietyLevel2Rise = 191,
	AM_Heat_Tutorial_YouNotorietyLevel3Drop = 192,
	AM_Heat_Tutorial_YouNotorietyLevel3Rise = 193,
	AM_Heat_Tutorial_YouNotorietyLevel4Drop = 194,
	AM_Heat_Tutorial_YouNotorietyLevel4Rise = 195,
	AM_Heat_Tutorial_YouNotorietyLevel5 = 196,
	AM_Heat_Tutorial_YouPrestigeLevel0 = 197,
	AM_Heat_Tutorial_YouPrestigeLevel1234Rise = 198,
	AM_Heat_Tutorial_YouPrestigeLevel123Drop = 199,
	AM_Heat_Tutorial_YouPrestigeLevel4Drop = 200,
	AM_Heat_Tutorial_YouPrestigeLevel5 = 201,
	AM_ItemOperation_Fail_InsufficientFunds = 202,
	AM_JoinGroup_LeaderInDifferentMission = 203,
	AM_LocationBeacon_Enter = 204,
	AM_MailBox_Fail_WrongFaction = 205,
	AM_MatchAbandonSideTooSmall = 206,
	AM_MatchAbandonSoloLeftSide = 207,
	AM_MatchAbandonSoloVsSide = 208,
	AM_MatchAbandonSoloVsSolo = 209,
	AM_MatchAnyWinSideVsSide = 210,
	AM_MatchAnyWinSideVsSolo = 211,
	AM_MatchAnyWinSoloVsSide = 212,
	AM_MatchAnyWinSoloVsSolo = 213,
	AM_MatchUnopposed = 214,
	AM_MatchYouAbandon = 215,
	AM_MatchYouLoseSolo = 216,
	AM_MatchYouLoseTeam = 217,
	AM_MatchYouLoseUnopposed = 218,
	AM_MatchYouSomeGroupMemberIsNotInTheMission = 219,
	AM_MatchYouWinSolo = 220,
	AM_MatchYouWinTeam = 221,
	AM_MinigameCompleteReward = 222,
	AM_MinigameElfEvent_Assigned_Bodyguard = 223,
	AM_MinigameElfEvent_Assigned_VIP = 224,
	AM_MinigameElfEvent_Complete_Kills = 225,
	AM_MinigameElfEvent_Complete_NonVIP_Lost = 226,
	AM_MinigameElfEvent_Complete_NonVIP_Shame = 227,
	AM_MinigameElfEvent_Complete_NonVIP_Won = 228,
	AM_MinigameElfEvent_Complete_VIP_Lost = 229,
	AM_MinigameElfEvent_Complete_VIP_Shame = 230,
	AM_MinigameElfEvent_Complete_VIP_Won = 231,
	AM_MinigameElfEvent_Hunt_Started = 232,
	AM_MinigameElfEvent_Hunt_Started_VIPGroup = 233,
	AM_MinigameFDM_Complete_CriminalsLose = 234,
	AM_MinigameFDM_Complete_CriminalsWin = 235,
	AM_MinigameFDM_Complete_EnforcersLose = 236,
	AM_MinigameFDM_Complete_EnforcersWin = 237,
	AM_MinigameFDM_Complete_Kills_Lose = 238,
	AM_MinigameFDM_Complete_Kills_Win = 239,
	AM_MinigameGoldenGun_TurnIn_Others = 240,
	AM_MinigameGoldenGun_TurnIn_Player = 241,
	AM_Minigame_Player_Joined = 242,
	AM_Minigame_Player_Left = 243,
	AM_Minigame_Protagonist_Assigned_GoldenGun = 244,
	AM_Minigame_Protagonist_Assigned_GoldenGun_Others = 245,
	AM_Minigame_Protagonist_Assigned_Mug = 246,
	AM_Minigame_Protagonist_Assigned_Mug_Others = 247,
	AM_Minigame_Started_Generic = 248,
	AM_Minigame_Started_GoldenGun = 249,
	AM_Minigame_Started_Mugging = 250,
	AM_MissionSideLeaderOfferReceivedDispatch = 251,
	AM_MissionSideLeaderOfferReceivedMission = 252,
	AM_MissionSideMemberOfferReceivedDispatch = 253,
	AM_MissionSideMemberOfferReceivedMission = 254,
	AM_MissionSideOfferRejected = 255,
	AM_MissionSideOfferRevoked = 256,
	AM_Mission_Arrests = 257,
	AM_Mission_Arrests_Fail = 258,
	AM_Mission_BackupGroupArrived = 259,
	AM_Mission_BackupPlayerArrived = 260,
	AM_Mission_DispatchedVsGroup = 261,
	AM_Mission_DispatchedVsPlayer = 262,
	AM_Mission_Draw = 263,
	AM_Mission_FinalStage = 264,
	AM_Mission_Kills = 265,
	AM_Mission_Kills_Fail = 266,
	AM_Mission_NotFinalStage = 267,
	AM_Mission_Objective_Any_Arson = 268,
	AM_Mission_Objective_Any_Bomb = 269,
	AM_Mission_Objective_Any_BombDisposal = 270,
	AM_Mission_Objective_Any_Burglary = 271,
	AM_Mission_Objective_Any_CSI = 272,
	AM_Mission_Objective_Any_Delivery = 273,
	AM_Mission_Objective_Any_Delivery_Partial = 274,
	AM_Mission_Objective_Any_Graffiti = 275,
	AM_Mission_Objective_Any_Hacking = 276,
	AM_Mission_Objective_Any_Pickup = 277,
	AM_Mission_Objective_Any_Raid = 278,
	AM_Mission_Objective_Any_Sabotage = 279,
	AM_Mission_Objective_Any_VehicleBreakIn = 280,
	AM_Mission_Objective_You_Arson = 281,
	AM_Mission_Objective_You_Bomb = 282,
	AM_Mission_Objective_You_BombDisposal = 283,
	AM_Mission_Objective_You_Burglary = 284,
	AM_Mission_Objective_You_CSI = 285,
	AM_Mission_Objective_You_Delivery = 286,
	AM_Mission_Objective_You_Graffiti = 287,
	AM_Mission_Objective_You_Hacking = 288,
	AM_Mission_Objective_You_Pickup = 289,
	AM_Mission_Objective_You_Raid = 290,
	AM_Mission_Objective_You_Sabotage = 291,
	AM_Mission_Objective_You_VehicleBreakIn = 292,
	AM_Mission_OppositionCompleteStage = 293,
	AM_Mission_OppositionGroupAdded = 294,
	AM_Mission_OppositionGroupAssigned = 295,
	AM_Mission_OppositionPlayerAdded = 296,
	AM_Mission_OppositionPlayerAssigned = 297,
	AM_Mission_OppositionPlayerRemoved = 298,
	AM_Mission_OwnerGroupAdded = 299,
	AM_Mission_OwnerPlayerAdded = 300,
	AM_Mission_OwnerPlayerRemoved = 301,
	AM_Mission_Prevent = 302,
	AM_Mission_Prevent_Fail = 303,
	AM_Mission_Task_Item_Delivered_Ally = 304,
	AM_Mission_Task_Item_Delivered_Enemy = 305,
	AM_Mission_Time_OneMinuteRemaining = 306,
	AM_Mission_Time_Opp_OneMinute = 307,
	AM_Modifier_Unapplied_Expired = 308,
	AM_OpenWorldItem_Spawned = 309,
	AM_OpenWorldItems_Spawned = 310,
	AM_RatingYouChanged = 311,
	AM_RemovedFromGroup = 312,
	AM_Resupply_Fail = 313,
	AM_RewardBonus = 314,
	AM_RewardBonusVehicleArmoredVan = 315,
	AM_RewardBonusVehicleCheap = 316,
	AM_RewardBonusVehicleExpensive = 317,
	AM_RewardBonusVehicleMidPrice = 318,
	AM_RewardBonusVehiclePristine = 319,
	AM_RewardCashOnly = 320,
	AM_RewardCashTokens = 321,
	AM_RewardForArson = 322,
	AM_RewardForBombDisposal = 323,
	AM_RewardForBombing = 324,
	AM_RewardForBurglary = 325,
	AM_RewardForForcedEntry = 326,
	AM_RewardForGraffiti = 327,
	AM_RewardForMugging = 328,
	AM_RewardForOpenWorldLarge = 329,
	AM_RewardForOpenWorldMedium = 330,
	AM_RewardForOpenWorldSmallMultiple = 331,
	AM_RewardForOpenWorldSmallSingle = 332,
	AM_RewardForPlayerArrest = 333,
	AM_RewardForPlayerArrestLevel5 = 334,
	AM_RewardForPlayerRescue = 335,
	AM_RewardForTargetCompletion = 336,
	AM_RewardForVehicleDelivery = 337,
	AM_RewardForWitness = 338,
	AM_RewardOrganization = 339,
	AM_RewardRandomRewardGained_Dispatch = 340,
	AM_RewardRandomRewardGained_Mission = 341,
	AM_RewardTokensOnly = 342,
	AM_RewardUnlockClothing = 343,
	AM_RewardUnlockDisplayPoint = 344,
	AM_RewardUnlockEmotes = 345,
	AM_RewardUnlockEquipment = 346,
	AM_RewardUnlockFeature = 347,
	AM_RewardUnlockFnMod = 348,
	AM_RewardUnlockGeneric = 349,
	AM_RewardUnlockInstrument = 350,
	AM_RewardUnlockPrimitive = 351,
	AM_RewardUnlockSong = 352,
	AM_RewardUnlockSymbol = 353,
	AM_RewardUnlockTheme = 354,
	AM_RewardUnlockTitle = 355,
	AM_RewardUnlockUsable = 356,
	AM_RewardUnlockVehicle = 357,
	AM_RewardUnlockVehicleComponent = 358,
	AM_RewardUnlockWeapon = 359,
	AM_RewardUnlockWeaponSkin = 360,
	AM_RewardYouReceivedItem = 361,
	AM_Reward_ConsumptionError = 362,
	AM_Reward_NewMail = 363,
	AM_SideAnyNewLeader = 364,
	AM_SideYouNewLeader = 365,
	AM_Spawn_Halloween_PurplePumpkin = 366,
	AM_Spawn_Halloween_PurplePumpkin_Chat = 367,
	AM_StreetVolume_Enter = 368,
	AM_TaskItem_Spawned = 369,
	AM_TaskItems_Spawned = 370,
	AM_TeamLeadershipVote_Begin = 371,
	AM_TeamLeadershipVote_End_Accepted = 372,
	AM_TeamLeadershipVote_End_Rejected = 373,
	AM_TeamRemoveFailedCooldown = 374,
	AM_TeamRemoveFailedDemerits = 375,
	AM_ThreatAnyChanged = 376,
	AM_ThreatAnyChanged_Crim = 377,
	AM_ThreatAnyChanged_Enf = 378,
	AM_ThreatAnyMaxPlayerEnter_Crim = 379,
	AM_ThreatAnyMaxPlayerEnter_Enf = 380,
	AM_ThreatAnyMaxPlayerLeave_Crim = 381,
	AM_ThreatAnyMaxPlayerLeave_Enf = 382,
	AM_ThreatTeamChanged = 383,
	AM_ThreatYouChanged = 384,
	AM_TitleNotUnlocked = 385,
	AM_TurnMissionAcceptanceStateFailed = 386,
	AM_VIP_Any = 387,
	AM_VIP_Opposition = 388,
	AM_VIP_Side = 389,
	AM_VIP_You = 390,
	AM_VIP_You = 391,
	AM_Vehicle_BeginRepair = 392,
	AM_Vehicle_BrokenInto = 393,
	AM_Vehicle_Cargo_Full = 394,
	AM_Vehicle_EnterFail_CargoFull = 395,
	AM_Vehicle_EnterFail_EnemyOwnedVehicle = 396,
	AM_Vehicle_EnterFail_EnemyTarget = 397,
	AM_Vehicle_EnterFail_NotAllowed = 398,
	AM_Vehicle_EnterFail_NotPartOfMission = 399,
	AM_Vehicle_EnterFail_OpponentInVehicle = 400,
	AM_Vehicle_EnterFail_PositionOccupied = 401,
	AM_Vehicle_SpawnBay_AllBaysOccupied = 402,
	AM_Vehicle_SpawnBay_NoDeployedVehicle = 403,
	AM_Vehicle_SpawnBay_NoFunds = 404,
	AM_Vehicle_SpawnBay_NotAllowedToRecall = 405,
	AM_Vehicle_SpawnBay_WrongFaction = 406,
	AM_Vehicle_Unequipped_Expired = 407,
	AM_WeaponSkinNotUnlocked = 408,
	AM_Weapon_Unequipped_Expired = 409,
	AM_WinStreak_Mission = 410,
	AM_WinStreak_Mission_Ended = 411,
	AmmoZone_InsufficientFunds = 412,
	AmmoZone_NoDeployedWeapons = 413,
	Armory_DisabledInMissions = 414,
	AutoKick_Inactivity = 415,
	AutoKick_SuicidesWarning = 416,
	AutoKick_TeamKillsWarning = 417,
	Autokill_InsideGeometry = 418,
	BroadcastSystemMessage = 419,
	BugTracker_BugReportError = 420,
	BugTracker_BugReportSuccess = 421,
	CharacterCustomisation_OverBudget = 422,
	ClanMgmt_DispandSuccess = 423,
	ClanMgmt_InviteSent = 424,
	ClanMgmt_NotInSocialDistrict = 425,
	ClanMgmt_RemovedFromClan = 426,
	CustomisationEditor_InventoryLimitHit = 427,
	CustomisationZone = 428,
	DailyActivityAutoAssigned = 429,
	DailyActivityComplete_Common = 430,
	DailyActivityComplete_Rare = 431,
	DailyActivityComplete_Uncommon = 432,
	DebugMessage = 433,
	DisplayPoint_Audio_None = 434,
	DisplayPoint_Audio_WrongFaction = 435,
	DisplayPoint_Graffiti_None = 436,
	DisplayPoint_Graffiti_WrongFaction = 437,
	DisplayPoint_None = 438,
	DisplayPoint_Statue_None = 439,
	DisplayPoint_Statue_WrongFaction = 440,
	DisplayPoint_Taken = 441,
	DisplayPoint_Vehicle_None = 442,
	DisplayPoint_Vehicle_WrongFaction = 443,
	DisplayPoint_WrongFaction = 444,
	DistrictEnter_HighTTK = 445,
	DistrictEnter_RTW = 446,
	DistrictEnter_WeaponPrototype = 447,
	ElectedSpawnPointDeactivated = 448,
	ElectiveSpawn_Unavailable = 449,
	FactionRestrictedLocation = 450,
	FnMod_Disabled = 451,
	GM_Frozen = 452,
	Garage_InvalidCustomisation = 453,
	Garage_OutOfDecalSpace = 454,
	Garage_VehicleOverBudget = 455,
	GiftBox_Opened = 456,
	GiftBox_Opened_Other = 457,
	GroupWaypointSpam = 458,
	Group_InviteBounced = 459,
	Group_InviteBouncedTutorial = 460,
	Group_InviteDeclined = 461,
	Group_InviteSent = 462,
	Inventory_CreatedCopies = 463,
	Inventory_DisabledInMissions = 464,
	Inventory_Refurbished = 465,
	Killed = 466,
	KilledBy_REDUNDANT = 467,
	KilledSelf_REDUNDANT = 468,
	LocaleSystem_DistrictBlockEntered = 469,
	LocaleSystem_LocationBeaconEntered = 470,
	LocalisationTest = 471,
	Mail_ItemAddedToInventory_Normal = 472,
	Mail_ItemAddedToInventory_Reward_Combined = 473,
	Mail_ItemAddedToInventory_Reward_Items = 474,
	Mail_ItemAddedToInventory_Reward_Unlocks = 475,
	Mail_RewardPackageRetrieved = 476,
	Minigame_Easter2015_Complete = 477,
	Minigame_Ending_Mugging_Easter2015 = 478,
	Minigame_Ending_Mugging_Easter2015_Subsequent = 479,
	Minigame_FindTarget_TargetFound_First = 480,
	Minigame_FindTarget_TargetFound_First_Other = 481,
	Minigame_FindTarget_TargetFound_NotFirst = 482,
	Minigame_FindTarget_TargetFound_NotFirst_Other = 483,
	Minigame_GunGame_Christmas_PlayerReachedRank = 484,
	Minigame_GunGame_Christmas_PlayerReachedRank_High = 485,
	Minigame_GunGame_ReachedRank_02 = 486,
	Minigame_GunGame_ReachedRank_02_Crim = 487,
	Minigame_GunGame_ReachedRank_03 = 488,
	Minigame_GunGame_ReachedRank_03_Crim = 489,
	Minigame_GunGame_ReachedRank_04 = 490,
	Minigame_GunGame_ReachedRank_04_Crim = 491,
	Minigame_GunGame_ReachedRank_05 = 492,
	Minigame_GunGame_ReachedRank_05_Crim = 493,
	Minigame_GunGame_ReachedRank_06 = 494,
	Minigame_GunGame_ReachedRank_06_Crim = 495,
	Minigame_GunGame_ReachedRank_07 = 496,
	Minigame_GunGame_ReachedRank_07_Crim = 497,
	Minigame_GunGame_ReachedRank_08 = 498,
	Minigame_GunGame_ReachedRank_08_Crim = 499,
	Minigame_GunGame_ReachedRank_09 = 500,
	Minigame_GunGame_ReachedRank_09_Crim = 501,
	Minigame_GunGame_ReachedRank = 502,
	Minigame_GunGame_ReachedRank_10_Crim = 503,
	Minigame_GunGame_ReachedRank = 504,
	Minigame_GunGame_ReachedRank_11_Crim = 505,
	Minigame_GunGame_ReachedRank = 506,
	Minigame_GunGame_ReachedRank_12_Crim = 507,
	Minigame_GunGame_ReachedRank = 508,
	Minigame_GunGame_ReachedRank_13_Crim = 509,
	Minigame_GunGame_ReachedRank_13_Others = 510,
	Minigame_GunGame_ReachedRank_13_OthersDead = 511,
	Minigame_Infection_DidNotSurvive = 512,
	Minigame_Infection_EnteredEndArea = 513,
	Minigame_Infection_Infected_Majority = 514,
	Minigame_Infection_KillHeadless = 515,
	Minigame_Infection_LeftEndArea = 516,
	Minigame_Infection_LostProtagonist = 517,
	Minigame_Infection_PlayerConverted = 518,
	Minigame_Infection_PlayerConverted_TeammatesNearby = 519,
	Minigame_Infection_PlayerEndedInArea = 520,
	Minigame_Infection_Pumpkin = 521,
	Minigame_Infection_Survived = 522,
	Minigame_Infection_Survivor_Gong = 523,
	Minigame_Infection_Survivor_Survived = 524,
	Minigame_Mugging_Easter2015_SpawnImmunity = 525,
	Minigame_Mugging_Easter_DeliveredItems = 526,
	Minigame_Mugging_Easter_DeliveredItems_Other = 527,
	Minigame_Mugging_Easter_GainedItems = 528,
	Minigame_Mugging_Easter_GainedItems_Single = 529,
	Minigame_Mugging_Easter_HeldItemsAtEnd = 530,
	Minigame_Mugging_Easter_HeldItemsAtEnd_Single = 531,
	Minigame_Mugging_Easter_ItemsDeliveredScore = 532,
	Minigame_Mugging_Easter_ItemsHeldScore = 533,
	Minigame_Mugging_Easter_LostItems = 534,
	Minigame_Mugging_Easter_LostItems_Single = 535,
	Minigame_Mugging_Easter_PlayerMug_Muggee = 536,
	Minigame_Mugging_Easter_PlayerMug_Muggee_Single = 537,
	Minigame_Mugging_Easter_PlayerMug_Mugger = 538,
	Minigame_Mugging_Easter_PlayerMug_Mugger_Single = 539,
	Minigame_Mugging_Easter_Protagonist = 540,
	Minigame_Mugging_Easter_Protagonist_Other = 541,
	Minigame_Mugging_Invulnerability_Denied = 542,
	Minigame_Protagonist_Assigned_Infection = 543,
	Minigame_Protagonist_Assigned_Infection_Others = 544,
	Minigame_Started_Christmas_GunGame = 545,
	Minigame_Started_Christmas_GunGame_Crim = 546,
	Minigame_Started_FindTarget = 547,
	Minigame_Started_FirstInfection_Chat = 548,
	Minigame_Started_FirstInfection_Others = 549,
	Minigame_Started_FirstInfection_Player = 550,
	Minigame_Started_Infection = 551,
	Minigame_WeaponDrop_DropSpawned = 552,
	Minigame_WeaponDrop_DropSpawned = 553,
	Minigame_WeaponDrop_DropSpawned = 554,
	Minigame_WeaponDrop_DropSpawned = 555,
	Minigame_WeaponDrop_DropSpawned = 556,
	Minigame_WeaponDrop_DropSpawned = 557,
	Minigame_WeaponDrop_DropSpawned = 558,
	Minigame_WeaponDrop_DropSpawned = 559,
	Minigame_WeaponDrop_DropSpawned = 560,
	Minigame_WeaponDrop_FirstWeaponPickup = 561,
	Minigame_WeaponDrop_HighScore_Attained = 562,
	Minigame_WeaponDrop_HighScore_Attained_Others = 563,
	Minigame_WeaponDrop_HighScore_Attained_Team = 564,
	Minigame_WeaponDrop_HighScore_Killed = 565,
	Minigame_WeaponDrop_HighScore_Killed_Others = 566,
	Minigame_WeaponDrop_Player_Joined = 567,
	Minigame_WeaponDrop_Protagonist_Attained = 568,
	Minigame_WeaponDrop_Protagonist_Attained_Others = 569,
	Minigame_WeaponDrop_Protagonist_Attained_Team = 570,
	Minigame_WeaponDrop_Protagonist_Killed = 571,
	Minigame_WeaponDrop_Protagonist_Killed_Others = 572,
	Minigame_WeaponDrop_ReceiveAliveScore = 573,
	Minigame_WeaponDrop_Started = 574,
	Minigame_WeaponDrop_WeaponUnlocked_Ceremony = 575,
	Mission_EnemyStageComplete = 576,
	Mission_ItemDelivered = 577,
	Mission_ObjectiveProximity_Item = 578,
	Mission_ObjectiveProximity_Standard = 579,
	Mission_ObjectiveProximity_VIP = 580,
	Mission_ObjectiveProximity_VIP_Player_Self = 581,
	Mission_Overtime_CSALose = 582,
	Mission_Overtime_CSALose_Chat = 583,
	Mission_Overtime_CSAWin = 584,
	Mission_Overtime_CSAWin_Chat = 585,
	Mission_Overtime_GraffitiLose = 586,
	Mission_Overtime_GraffitiLose_Chat = 587,
	Mission_Overtime_GraffitiWin = 588,
	Mission_Overtime_GraffitiWin_Chat = 589,
	Mission_Overtime_PointsHeldLose = 590,
	Mission_Overtime_PointsHeldLose_Chat = 591,
	Mission_Overtime_PointsHeldWin = 592,
	Mission_Overtime_PointsHeldWin_Chat = 593,
	Mission_StageComplete = 594,
	MusicPlayer_ImportComplete = 595,
	MusicPlayer_PlaylistAddTracks = 596,
	MusicStudio_FileTooLarge = 597,
	MusicStudio_MemoryUsageFull = 598,
	MusicStudio_PasteConflicts = 599,
	NotReadyNagMessage = 600,
	OpenWorld_ItemDelivered = 601,
	OpenWorld_VehicleDelivered = 602,
	OutOfBounds = 603,
	PlayerInfo_PlayerHasLeftGame = 604,
	ProvingGrounds_ChallengePrizeQualified_1_Enter = 605,
	ProvingGrounds_ChallengePrizeQualified_1_Leave = 606,
	ProvingGrounds_ChallengePrizeQualified_2_Enter = 607,
	ProvingGrounds_ChallengePrizeQualified_2_Leave = 608,
	ProvingGrounds_ChallengePrizeQualified_3_Enter = 609,
	ProvingGrounds_ChallengePrizeQualified_3_Leave = 610,
	ProvingGrounds_ChallengePrizeReceived_Bronze = 611,
	ProvingGrounds_ChallengePrizeReceived_Gold = 612,
	ProvingGrounds_ChallengePrizeReceived_Silver = 613,
	ProvingGrounds_Challenge_MissionWarning = 614,
	ProvingGrounds_Challenge_New = 615,
	ProvingGrounds_Challenge_New_Promote = 616,
	ProvingGrounds_MissionActivityComplete_SystemMessage = 617,
	ProvingGrounds_MissionActivity_Completed = 618,
	ProvingGrounds_MissionActivity_Completed_Chat = 619,
	ProvingGrounds_WaitingForMission = 620,
	Resupply_Fail_PickedUpWeapon = 621,
	Reward_Unlock_Clothing = 622,
	Reward_Unlock_Emotes = 623,
	Reward_Unlock_Vehicles = 624,
	Reward_Unlock_Weapons = 625,
	Score_Combat_ArrestEnemy = 626,
	Score_Combat_KillEnemy = 627,
	Score_Combat_KillEnemyAssist = 628,
	Score_Combat_RescueTeammate = 629,
	Score_Combat_StunnedEnemy = 630,
	Score_Combat_StunnedTeammate = 631,
	Score_Earned_MedalBigWin_All = 632,
	Score_Earned_MedalBigWin_Arrest_10 = 633,
	Score_Earned_MedalBigWin_Arrest_10 = 634,
	Score_Earned_MedalBigWin_Arrest_10 = 635,
	Score_Earned_MedalBigWin_Arrest_10 = 636,
	Score_Earned_MedalBigWin_Arrest_10 = 637,
	Score_Earned_MedalBigWin_Defuse = 638,
	Score_Earned_MedalBigWin_Detonate = 639,
	Score_Earned_MedalBigWin_Rescue = 640,
	Score_Earned_MedalBigWin_Rescue = 641,
	Score_Earned_MedalBigWin_Rescue = 642,
	Score_Earned_MedalBigWin_Rescue = 643,
	Score_Earned_MedalBigWin_Rescue = 644,
	Score_Earned_MedalBigWin_Takeout = 645,
	Score_Earned_MedalBigWin_Takeout = 646,
	Score_Earned_MedalBigWin_Takeout = 647,
	Score_Earned_MedalBigWin_Takeout = 648,
	Score_Earned_MedalBigWin_Takeout = 649,
	Score_Earned_MedalDishonour_AFK = 650,
	Score_Earned_MedalDishonour_ArrestedKill = 651,
	Score_Earned_MedalDishonour_ArrestedKill = 652,
	Score_Earned_MedalDishonour_ArrestedKill = 653,
	Score_Earned_MedalDishonour_ArrestedKill = 654,
	Score_Earned_MedalDishonour_ArrestedKill = 655,
	Score_Earned_MedalDishonour_ArrestedKill = 656,
	Score_Earned_MedalDishonour_ArrestedKill = 657,
	Score_Earned_MedalDishonour_ArrestedKill = 658,
	Score_Earned_MedalDishonour_ArrestedKill = 659,
	Score_Earned_MedalDishonour_ArrestedKill = 660,
	Score_Earned_MedalDishonour_FriendlyKill = 661,
	Score_Earned_MedalDishonour_FriendlyKill = 662,
	Score_Earned_MedalDishonour_FriendlyKill = 663,
	Score_Earned_MedalDishonour_FriendlyKill = 664,
	Score_Earned_MedalDishonour_FriendlyKill = 665,
	Score_Earned_MedalDishonour_FriendlyKill = 666,
	Score_Earned_MedalDishonour_FriendlyKill = 667,
	Score_Earned_MedalDishonour_FriendlyKill = 668,
	Score_Earned_MedalDishonour_FriendlyKill = 669,
	Score_Earned_MedalDishonour_FriendlyKill = 670,
	Score_Earned_MedalDishonour_FriendlyStun = 671,
	Score_Earned_MedalDishonour_FriendlyStun = 672,
	Score_Earned_MedalDishonour_FriendlyStun = 673,
	Score_Earned_MedalDishonour_FriendlyStun = 674,
	Score_Earned_MedalDishonour_FriendlyStun = 675,
	Score_Earned_MedalDishonour_SelfKill_02 = 676,
	Score_Earned_MedalDishonour_SelfKill_03 = 677,
	Score_Earned_MedalDishonour_SelfKill_04 = 678,
	Score_Earned_MedalDishonour_SelfKill_05 = 679,
	Score_Earned_MedalDishonour_SelfKill_06 = 680,
	Score_Earned_MedalDishonour_SelfKill_07 = 681,
	Score_Earned_MedalDishonour_SelfKill_08 = 682,
	Score_Earned_MedalDishonour_SelfKill_09 = 683,
	Score_Earned_MedalDishonour_SelfKill = 684,
	Score_Earned_MedalDishonour_SelfKill = 685,
	Score_Earned_MedalDishonour_SelfKill = 686,
	Score_Earned_MedalDishonour_SelfKill = 687,
	Score_Earned_MedalDishonour_SelfKill = 688,
	Score_Earned_MedalKillBehind = 689,
	Score_Earned_MedalKillStreak_05 = 690,
	Score_Earned_MedalKillStreak = 691,
	Score_Earned_MedalKillStreak = 692,
	Score_Earned_MedalKillStreak = 693,
	Score_Earned_MedalKillStreak = 694,
	Score_Earned_MedalKillStreak = 695,
	Score_Earned_MedalSituational_AntiGraffitiKill = 696,
	Score_Earned_MedalSituational_ArrestStreakKiller = 697,
	Score_Earned_MedalSituational_ArsonKill = 698,
	Score_Earned_MedalSituational_DriverAssistKill = 699,
	Score_Earned_MedalSituational_GraffitiingKill = 700,
	Score_Earned_MedalSituational_GrenadeKill = 701,
	Score_Earned_MedalSituational_KillStreakArrest = 702,
	Score_Earned_MedalSituational_KillStreakKiller = 703,
	Score_Earned_MedalSituational_MeleeKill = 704,
	Score_Earned_MedalSituational_PostDeathKill = 705,
	Score_Earned_MedalSituational_SuperKill = 706,
	Score_Earned_MedalSituational_TaskItemKill = 707,
	Score_Earned_MedalSituational_VIPKill = 708,
	Score_Earned_MedalSituational_VehicleKill = 709,
	Score_Earned_MedalTimeLimit_Kills = 710,
	Score_Earned_MedalTimeLimit_Kills = 711,
	Score_Earned_MedalTimeLimit_Kills = 712,
	Score_Earned_MedalTimeLimit_Kills = 713,
	Score_KillTeam_Chaos = 714,
	Score_Match_Won = 715,
	Score_Minigame_Generic = 716,
	Score_Minigame_Mugging_Easter_NPC_Kill = 717,
	Score_Minigame_Mugging_NPC_Kill = 718,
	Score_Mission_Assist_CSA_Arson = 719,
	Score_Mission_Assist_CSA_Bombings = 720,
	Score_Mission_Assist_CSA_Burglary = 721,
	Score_Mission_Assist_CSA_CarTheft = 722,
	Score_Mission_Assist_CSA_DefuseBomb = 723,
	Score_Mission_Assist_CSA_DeliverItem = 724,
	Score_Mission_Assist_CSA_ForcedEntry = 725,
	Score_Mission_Assist_CSA_Graffiti = 726,
	Score_Mission_Assist_CSA_Hacking = 727,
	Score_Mission_Assist_CSA_Investigate = 728,
	Score_Mission_Assist_CSA_Vandalism = 729,
	Score_Mission_Assist_Sabotage = 730,
	Score_Mission_CSA_Arson = 731,
	Score_Mission_CSA_Bombings = 732,
	Score_Mission_CSA_Burglary = 733,
	Score_Mission_CSA_CarTheft = 734,
	Score_Mission_CSA_Checkpoint = 735,
	Score_Mission_CSA_DefuseBomb = 736,
	Score_Mission_CSA_DeliverItem = 737,
	Score_Mission_CSA_ForcedEntry = 738,
	Score_Mission_CSA_Graffiti = 739,
	Score_Mission_CSA_Hacking = 740,
	Score_Mission_CSA_Investigate = 741,
	Score_Mission_CSA_Mugging = 742,
	Score_Mission_CSA_Sabotage = 743,
	Score_Mission_CSA_Vandalism = 744,
	Score_Mission_ObjectiveHoldPoints = 745,
	Score_Mission_Pickup = 746,
	Subscription_LimitNear = 747,
	SwitchWeapon_NoDeployedWeapon_Grenade = 748,
	SwitchWeapon_NoDeployedWeapon_Primary = 749,
	SwitchWeapon_NoDeployedWeapon_Secondary = 750,
	SymbolEditor_AddTooMany = 751,
	SymbolEditor_AtSymbolLimit = 752,
	SymbolEditor_DuplicateTooMany = 753,
	SymbolEditor_SymbolHasNoLayers = 754,
	Test1 = 755,
	Test2 = 756,
	Test3 = 757,
	Test4 = 758,
	TestAction = 759,
	TestFontLarge = 760,
	TestFontMedium = 761,
	TestFontSmall = 762,
	TimeLimitedReward_MissionWin_Growl = 763,
	TimeLimitedReward_MissionWin_Growl_Fail = 764,
	TimeLimitedReward_MissionWin_Growl_Fail_NoParticipation = 765,
	TimeLimitedReward_MissionWin_Growl_Success = 766,
	TimeLimitedReward_MissionWin_Growl_Success_Others = 767,
	Tutorial = 768,
	TutorialMessage_CategoryComplete = 769,
	TutorialMessage_EventComplete = 770,
	TutorialMessage_SuperCategoryComplete = 771,
	UnstickRespawn = 772,
	UnstickRespawnNotAllowed = 773,
	VehicleBloatedCustomisation = 774,
	VehicleCritical_Fire = 775,
	VehicleInvalidCustomisation = 776,
	VehicleRepairZone = 777,
	VehicleSpawnZone = 778,
	VehicleSpawnZone_SpawnVehicle = 779,
	Vending_Purchase = 780,
	Vending_Sell = 781,
	Wardrobe_EditWillAffect = 782,
	Wardrobe_ItemAddedToInventory = 783,
	Wardrobe_ItemOverBudget = 784,
	Wardrobe_OutfitOverBudget = 785,
	Waypoint_Reached = 786,
	WeaponCustomizationUI_Fail = 787,
	Weapon_Disabled = 788,
	Weapon_Override_Equiped = 789,
	Weapon_Pickup = 790,
	Witnessable_Always = 791,
	Witnessing_WitnessedByNPC = 792,
	Witnessing_WitnessedByPlayer = 793,
	Witnessing_YouWitnessedPlayer = 794,
	etHUDMessage_MAX = 795,
};
enum etHUDMessageScene
{
	Default = 0,
	SystemMessage = 1,
	TutorialMessage = 2,
	HeatLevel5 = 3,
	etHUDMessageScene_MAX = 4,
};
enum etHUDPopUpMenuItem
{
	Bug12477 = 0,
	ArmasStore = 1,
	Divider0 = 2,
	Lobby = 3,
	Options = 4,
	MusicPlayback = 5,
	Social = 6,
	Divider1 = 7,
	DistrictMap = 8,
	CityMap = 9,
	ProvingGroundsChallengesUI = 10,
	Scoreboard = 11,
	UnPledge = 12,
	Divider2 = 13,
	EnableLFG = 14,
	Disable LFG = 15,
	Divider3 = 16,
	Deployment = 17,
	Inventory = 18,
	Divider4 = 19,
	CharacterInfo = 20,
	TeamManagement = 21,
	Divider5 = 22,
	FullChat = 23,
	ChatChannelCommands = 24,
	ConsoleCommands = 25,
	EmoteCommands = 26,
	Divider6 = 27,
	BugReport = 28,
	Help = 29,
	Knowledgebase = 30,
	Support = 31,
	etHUDPopUpMenuItem_MAX = 32,
};
enum etHUDRadarMarker
{
	None = 0,
	AmmoZone = 1,
	Chaos_EnemyPlayer = 2,
	Chaos_FriendlyPlayer = 3,
	DeathmatchTarget = 4,
	GMPlayer = 5,
	GroupLeader = 6,
	GroupMember = 7,
	HeatMax_Criminal = 8,
	HeatMax_Enforcer = 9,
	Mailbox = 10,
	Minigame_GoldenWeapon_Explosive = 11,
	Minigame_GoldenWeapon_Protagonist = 12,
	Minigame_Mugging_Carrier = 13,
	Minigame_Mugging_Carrier_Easter = 14,
	Minigame_Mugging_Easter_Bunny = 15,
	Minigame_Mugging_Easter_Carrier = 16,
	Minigame_Mugging_Easter_Carrier = 17,
	Minigame_Mugging_Easter_Carrier = 18,
	Minigame_Mugging_Easter_Carrier = 19,
	Minigame_Mugging_Easter_Carrier = 20,
	Minigame_Mugging_Easter_Chicken = 21,
	Minigame_Mugging_Item = 22,
	Minigame_Mugging_Item_Egg = 23,
	Minigame_Mugging_NPC = 24,
	Minigame_Mugging_Protagonist = 25,
	Minigame_Mugging_Protagonist_Easter = 26,
	Minigame_WeaponDrop_HighScore = 27,
	Minigame_WeaponDrop_Legendary = 28,
	Minigame_WeaponDrop_Protagonist = 29,
	OpenWorldItemDropOff = 30,
	OpenWorldVehicleDropOff = 31,
	OppositionMember = 32,
	OppositionRadarJammer = 33,
	PlayerRadarJammer = 34,
	PlayerVehicle = 35,
	Player_Ping = 36,
	StashDropOff = 37,
	Task_Checkpoint = 38,
	Task_Item = 39,
	Task_Target = 40,
	Task_Target_VIP = 41,
	Test = 42,
	VehicleMobileRadarTower = 43,
	VehicleRepairZone = 44,
	VehicleSpawnZone = 45,
	Vehicle_MobileSpawnZone = 46,
	etHUDRadarMarker_MAX = 47,
};
enum etHUDReticuleHintIcon
{
	None = 0,
	Antigraffiti = 1,
	Arrest = 2,
	Arrested = 3,
	Arson = 4,
	BombDisposal = 5,
	Bombing = 6,
	BuildingArson = 7,
	Burglary = 8,
	CargoInteraction = 9,
	Contact = 10,
	FindTarget_Character = 11,
	ForcedEntry = 12,
	Graffiti = 13,
	Hacking = 14,
	Investigate = 15,
	Mailbox = 16,
	Mugging = 17,
	PickUpItem = 18,
	Player = 19,
	RC_Door = 20,
	RC_Fence = 21,
	RC_Ladder = 22,
	Rescue = 23,
	Sabotage = 24,
	Vandalism = 25,
	VehicleArson = 26,
	VehicleBreakIn = 27,
	VehicleCargo = 28,
	VehicleEnter = 29,
	VehicleLooting = 30,
	VehicleTheft = 31,
	etHUDReticuleHintIcon_MAX = 32,
};
enum etHUDScenes
{
	ActionMessage = 0,
	AutoGroup = 1,
	BackupPending = 2,
	CSAProgressBars = 3,
	Cargo = 4,
	Cash = 5,
	Ceremony = 6,
	Challenges = 7,
	ChaosEvent = 8,
	CharacterInfo = 9,
	Chat = 10,
	Clock = 11,
	CombatMsg = 12,
	Contact = 13,
	DailyActivities = 14,
	DialogEvents = 15,
	Effect_Health = 16,
	Effect_HitIndicators = 17,
	Group = 18,
	Heat = 19,
	HudMessages = 20,
	InfoBrowser = 21,
	Locale = 22,
	Mail = 23,
	Minigame = 24,
	MissionsDisabled = 25,
	MusicInfo = 26,
	MusicPlaybackHUD = 27,
	OpenWorld = 28,
	Organisation = 29,
	PopUpMenu = 30,
	Radar = 31,
	Reticule = 32,
	Subtitles = 33,
	TaskMarkers = 34,
	Tutorial = 35,
	TutorialDistrict = 36,
	Usables = 37,
	WeaponInfo = 38,
	Witnessing = 39,
	etHUDScenes_MAX = 40,
};
enum etHUDTaskMarker
{
	None = 0,
	AmmoDeployed = 1,
	Contact = 2,
	Contact_Anarchy = 3,
	MaxHeatPlayer_Criminal = 4,
	MaxHeatPlayer_Enforcer = 5,
	MaxThreatPlayer_Criminal = 6,
	MaxThreatPlayer_Enforcer = 7,
	Minigame_GoldenWeapon_Explosive = 8,
	Minigame_GoldenWeapon_Explosive_OnMission = 9,
	Minigame_GoldenWeapon_Protagonist = 10,
	Minigame_GoldenWeapon_Protagonist_OnMission = 11,
	Minigame_Infection_Headless = 12,
	Minigame_Infection_Pumpkin = 13,
	Minigame_Infection_Pumpkin_OnMission = 14,
	Minigame_Infection_Survivor = 15,
	Minigame_Mugging_Carrier = 16,
	Minigame_Mugging_Carrier_Easter = 17,
	Minigame_Mugging_Easter_Bunny = 18,
	Minigame_Mugging_Easter_Carrier = 19,
	Minigame_Mugging_Easter_Carrier = 20,
	Minigame_Mugging_Easter_Carrier = 21,
	Minigame_Mugging_Easter_Carrier = 22,
	Minigame_Mugging_Easter_Carrier = 23,
	Minigame_Mugging_Easter_Chicken = 24,
	Minigame_Mugging_Easter_V2_Carrier = 25,
	Minigame_Mugging_Easter_V2_Carrier = 26,
	Minigame_Mugging_Easter_V2_Carrier = 27,
	Minigame_Mugging_Easter_V2_Carrier = 28,
	Minigame_Mugging_Easter_V2_Carrier = 29,
	Minigame_Mugging_Item = 30,
	Minigame_Mugging_Item_Egg = 31,
	Minigame_Mugging_Item_OnMission = 32,
	Minigame_Mugging_NPC = 33,
	Minigame_Mugging_NPC_OnMission = 34,
	Minigame_Mugging_Protagonist = 35,
	Minigame_Mugging_Protagonist_Easter = 36,
	Minigame_Mugging_Protagonist_V2_Easter = 37,
	Minigame_SnowballFight_OffMission = 38,
	Minigame_SnowballFight_OnMission = 39,
	Minigame_WeaponDrop_HighScore = 40,
	Minigame_WeaponDrop_HighScore_Friendly = 41,
	Minigame_WeaponDrop_HighScore_Ping = 42,
	Minigame_WeaponDrop_Protagonist = 43,
	OpenWorldDropOffAuto = 44,
	OpenWorldDropOff_Enforcer = 45,
	OpenWorldDropOff_LargeItem = 46,
	OpenWorldDropOff_MediumItem = 47,
	OpenWorldDropOff_SmallItem = 48,
	OpenWorldDropOff_Vehicle = 49,
	OpenWorldDropOff_Vehicle_Enforcer = 50,
	Player_Deathmatch = 51,
	Player_DeployedVehicle = 52,
	Player_Group = 53,
	Player_GroupLeader = 54,
	Player_Opposition = 55,
	Radar_Jammer = 56,
	Radar_Visible = 57,
	Spotter = 58,
	Spotter_Flare = 59,
	StashDropOff = 60,
	StashDropOffMission = 61,
	Tagger_Cat = 62,
	Tagger_Default = 63,
	Tagger_Duck = 64,
	Tagger_PurpleCat = 65,
	Tagger_Rapid99 = 66,
	Tagger_Reaper = 67,
	Tagger_Sluttles = 68,
	Tagger_Suit_Clubs = 69,
	Tagger_Suit_Diamond = 70,
	Tagger_Suit_Hearts = 71,
	Tagger_Suit_Joker = 72,
	Tagger_Suit_Spades = 73,
	Tagger_Valentines = 74,
	Task_Checkpoint = 75,
	Task_Item = 76,
	Task_Item_Vehicle = 77,
	Task_Target = 78,
	Task_Target_VIP = 79,
	VehicleRepair = 80,
	Vending_Ammo = 81,
	Vending_Mailbox = 82,
	Vending_Vehicle = 83,
	Waypoint_Group = 84,
	Waypoint_Leader = 85,
	Waypoint_Personal = 86,
	etHUDTaskMarker_MAX = 87,
};
enum etHUDTaskMarkerScene
{
	Default = 0,
	etHUDTaskMarkerScene_MAX = 1,
};
enum etHUDTextureIcon
{
	None = 0,
	Achievement_Icon_Complete = 1,
	Achievement_Icon_Hidden = 2,
	Achievement_Icon_Locked01 = 3,
	Ammo_Bullet_12Guage = 4,
	Ammo_Bullet = 5,
	Ammo_Bullet_9mm = 6,
	Ammo_Bullet_HighPoweredRifle = 7,
	Ammo_Bullet_LessLethalPistol = 8,
	Ammo_Bullet_Magnum = 9,
	Ammo_Bullets_MachineGun = 10,
	Ammo_Flare = 11,
	Ammo_Grenade_40mm = 12,
	Ammo_Grenade_Concussion = 13,
	Ammo_Grenade_LessLethal40mm = 14,
	Ammo_Grenade_Percussion = 15,
	Ammo_Grenade_StunGrenade = 16,
	Ammo_LessLethalGeneric = 17,
	Ammo_Rocket = 18,
	CSAIcon_ExclamationMark = 19,
	Capacity_Clothing = 20,
	Capacity_Clothing = 21,
	Capacity_Clothing = 22,
	Capacity_Songs = 23,
	Capacity_Songs = 24,
	Capacity_Songs = 25,
	Capacity_Themes = 26,
	Capacity_Themes = 27,
	Capacity_Themes = 28,
	Capacity_Vehicles = 29,
	Capacity_Vehicles = 30,
	Capacity_Vehicles = 31,
	Capacity_Vehicles = 32,
	Ceremony_ArrestStreak = 33,
	Ceremony_BadShot = 34,
	Ceremony_Bounty = 35,
	Ceremony_BountyClaimed = 36,
	Ceremony_Cash = 37,
	Ceremony_ContactUp = 38,
	Ceremony_FirstPrize = 39,
	Ceremony_FirstPrizeNeg = 40,
	Ceremony_GenericUnlock = 41,
	Ceremony_KillStreak = 42,
	Ceremony_NewChallenge = 43,
	Ceremony_NewClothing = 44,
	Ceremony_NewEmotes = 45,
	Ceremony_NewEquipment = 46,
	Ceremony_NewPrimitives = 47,
	Ceremony_NewSlot = 48,
	Ceremony_NewSong = 49,
	Ceremony_NewSymbols = 50,
	Ceremony_NewThemesInstruments = 51,
	Ceremony_NewUpgrades = 52,
	Ceremony_NewVehiclesParts = 53,
	Ceremony_NewWeapons = 54,
	Ceremony_NotorietyDown = 55,
	Ceremony_NotorietyUp = 56,
	Ceremony_OrganizationUp = 57,
	Ceremony_PrestigeDown = 58,
	Ceremony_PrestigeUp = 59,
	Ceremony_RoleUp = 60,
	Ceremony_SecondPrize = 61,
	Ceremony_ThirdPrize = 62,
	Ceremony_ThreatLevel = 63,
	Ceremony_TutorialComplete = 64,
	Ceremony_Unlock = 65,
	Ceremony_WinStreak = 66,
	Chaos_Contact_Crim_Female = 67,
	Chaos_Contact_Crim_Male = 68,
	Chaos_Contact_Enf_Female = 69,
	Chaos_Contact_Enf_Male = 70,
	Chaos_ScoreStreak1 = 71,
	Chaos_ScoreStreak2 = 72,
	Chaos_ScoreStreak3 = 73,
	Chaos_TimeStreak = 74,
	Chaos_TotalKills = 75,
	CharacterCreation = 76,
	ClanRank_Leader = 77,
	ClanRank_Member = 78,
	ClanRank_Officer = 79,
	Clothing_F_Armpads_Armoured = 80,
	Clothing_F_Armpads_Impact = 81,
	Clothing_F_Armwear_Armwarmers_Athletic_SheerRippedForearmLeft = 82,
	Clothing_F_Armwear_Armwarmers_Athletic_SheerRippedForearmRight = 83,
	Clothing_F_Armwear_Armwarmers_Athletic_SheerRippedFullLeft = 84,
	Clothing_F_Armwear_Armwarmers_Athletic_SheerRippedFullRight = 85,
	Clothing_F_Armwear_Bracelet_Noir_LeatherbandRight = 86,
	Clothing_F_Armwear_Bracelet_Noir_PearlRight = 87,
	Clothing_F_Armwear_Bracelet_Noir_StuddedCharlotte = 88,
	Clothing_F_Armwear_Bracelet_Urban_WristbandRightCharlotte = 89,
	Clothing_F_Armwear_ForearmBand_Skate_Charlotte = 90,
	Clothing_F_Armwear_ForearmSweatband_Athletic_Charlotte = 91,
	Clothing_F_Armwear_Wrist_Functional_BraceletBulletsRight = 92,
	Clothing_F_Armwear_Wrist_Functional_BraceletsBulletsRight = 93,
	Clothing_F_Armwear_Wristwatch_Functional_JeweledRimMetalstrap = 94,
	Clothing_F_Armwear_Wristwatch_Noir_RectangularCharlotte = 95,
	Clothing_F_Backpack_Militia = 96,
	Clothing_F_Backpack_Monster = 97,
	Clothing_F_Backpack_Pumpkin = 98,
	Clothing_F_Backpack_Quiver_Valentines = 99,
	Clothing_F_Backpack_SantaBag = 100,
	Clothing_F_Backpack_Skull = 101,
	Clothing_F_Backpack_Sprinter = 102,
	Clothing_F_Backpack_Vintage = 103,
	Clothing_F_Chestwear_BackHolster_Functional_DoubleGun = 104,
	Clothing_F_Chestwear_Badge_Enforcement_BadgeDeputy = 105,
	Clothing_F_Chestwear_Badge_Enforcement_Star = 106,
	Clothing_F_Chestwear_MidriffWebbing_Functional_Gun = 107,
	Clothing_F_Chestwear_ShoulderHolster_Functional_Knife = 108,
	Clothing_F_Collar_Armoured_Heavy = 109,
	Clothing_F_Config_Leg_SprayCans_L = 110,
	Clothing_F_Config_Leg_SprayCans_R = 111,
	Clothing_F_Dress_MicroMini_Functional_LongsleevedPolo = 112,
	Clothing_F_Dress_Mini_Fashion_LowBack = 113,
	Clothing_F_Dress_Mini_Fashion_LowBackSequins = 114,
	Clothing_F_Dress_Mini_SlitSleeves = 115,
	Clothing_F_Facewear_Earpiece_Enforcement_HighTecLeft = 116,
	Clothing_F_Facewear_Earpiece_Enforcement_RegularLeft = 117,
	Clothing_F_Facewear_Gasmask_SideFilter_Eyes = 118,
	Clothing_F_Facewear_Gasmask_SnoutFilter_Eyes = 119,
	Clothing_F_Facewear_Glasses_Fashion_SunSofia = 120,
	Clothing_F_Facewear_Glasses_Heart = 121,
	Clothing_F_Facewear_Glasses_Regular_3DRetro = 122,
	Clothing_F_Facewear_Glasses_Regular_Aviator = 123,
	Clothing_F_Facewear_Glasses_Regular_BigOval = 124,
	Clothing_F_Facewear_Glasses_Regular_EyePatch = 125,
	Clothing_F_Facewear_Glasses_Sun_Exclusive = 126,
	Clothing_F_Facewear_Goggles_Functional_Flying = 127,
	Clothing_F_Facewear_Mask_Clown = 128,
	Clothing_F_Facewear_Mask_Criminal_Bandit = 129,
	Clothing_F_Facewear_Mask_Criminal_Cannibal = 130,
	Clothing_F_Facewear_Mask_Criminal_Hockey = 131,
	Clothing_F_Facewear_Mask_Criminal_HockeyPlain = 132,
	Clothing_F_Facewear_Mask_Criminal_Outlaw = 133,
	Clothing_F_Facewear_Mask_Egg = 134,
	Clothing_F_Facewear_Piercing_Functional_EarringLeft = 135,
	Clothing_F_Facewear_Piercing_Functional_EarringRight = 136,
	Clothing_F_Facewear_Piercing_Functional_EarringYinYangLeft = 137,
	Clothing_F_Facewear_Piercing_Functional_EarringYinYangRight = 138,
	Clothing_F_Facewear_Piercing_Functional_StudPyramidLeft = 139,
	Clothing_F_Facewear_Piercing_Functional_StudPyramidRight = 140,
	Clothing_F_Facewear_Piercing_Noir_BrowBarbellRight = 141,
	Clothing_F_Facewear_Piercing_Noir_EarCrossInvertedLeft = 142,
	Clothing_F_Facewear_Piercing_Noir_EarCrossInvertedRight = 143,
	Clothing_F_Facewear_Piercing_Noir_EarTopRingsRight = 144,
	Clothing_F_Facewear_Piercing_Skate_EarringRight = 145,
	Clothing_F_Facewear_Piercing_Urban_EarDollarLeft = 146,
	Clothing_F_Facewear_Piercing_Urban_EarDollarRight = 147,
	Clothing_F_Facewear_Piercings_Skate_NoseRing = 148,
	Clothing_F_Facewear_Prop_Functional_Cigar = 149,
	Clothing_F_Facewear_Prop_Functional_Cigarette = 150,
	Clothing_F_Facewear_Prop_PartyBlower = 151,
	Clothing_F_Footwear_BootsAnkle_Enforcement_LeatherBuckled = 152,
	Clothing_F_Footwear_BootsAnkle_Enforcement_Stealth = 153,
	Clothing_F_Footwear_BootsAnkle_HighTops_Skate = 154,
	Clothing_F_Footwear_BootsKnee_Death = 155,
	Clothing_F_Footwear_Boots_Functional_KneeHighWork = 156,
	Clothing_F_Footwear_Boots_HighHeel_Ankle = 157,
	Clothing_F_Footwear_Boots_Leather_Studded = 158,
	Clothing_F_Footwear_Boots_ThighHigh = 159,
	Clothing_F_Footwear_Boots_UrbanCalfLength = 160,
	Clothing_F_Footwear_Shoes_BasketBall = 161,
	Clothing_F_Footwear_Shoes_Fashion_Flats = 162,
	Clothing_F_Footwear_Shoes_Functional_Flats = 163,
	Clothing_F_Footwear_Shoes_Functional_HighHeels = 164,
	Clothing_F_Footwear_Shoes_Skate_Basic = 165,
	Clothing_F_Footwear_Trainers_Urban_Plain = 166,
	Clothing_F_Forearmpads_Impact = 167,
	Clothing_F_Hairwear_Aliceband_Antlers_Reindeer = 168,
	Clothing_F_Hairwear_Aliceband_BunnyEars = 169,
	Clothing_F_Hairwear_Aliceband_CatEars = 170,
	Clothing_F_Hairwear_Aliceband_Functional_Basic = 171,
	Clothing_F_Hairwear_Aliceband_Functional_Bow = 172,
	Clothing_F_Hairwear_Aliceband_Functional_HornsDevil = 173,
	Clothing_F_Hairwear_Aliceband_Functional_Rose = 174,
	Clothing_F_Hairwear_Aliceband_Functional_Roses = 175,
	Clothing_F_Hairwear_Aliceband_PropKnife = 176,
	Clothing_F_Hairwear_Beanie_Augmented = 177,
	Clothing_F_Hairwear_Beanie_Baggy = 178,
	Clothing_F_Hairwear_Beanie_Knit = 179,
	Clothing_F_Hairwear_Hat_BakerBoy = 180,
	Clothing_F_Hairwear_Hat_CabbyGoggles = 181,
	Clothing_F_Hairwear_Hat_Crown = 182,
	Clothing_F_Hairwear_Hat_Elf = 183,
	Clothing_F_Hairwear_Hat_Enforcement_Beret = 184,
	Clothing_F_Hairwear_Hat_Enforcement_Cop = 185,
	Clothing_F_Hairwear_Hat_Enforcement_MilitaryCap = 186,
	Clothing_F_Hairwear_Hat_Fez = 187,
	Clothing_F_Hairwear_Hat_Functional_BaseballCap = 188,
	Clothing_F_Hairwear_Hat_Functional_Beanie = 189,
	Clothing_F_Hairwear_Hat_Functional_Cowboy = 190,
	Clothing_F_Hairwear_Hat_Functional_Fedora = 191,
	Clothing_F_Hairwear_Hat_Noir_Bandana = 192,
	Clothing_F_Hairwear_Hat_Party = 193,
	Clothing_F_Hairwear_Hat_Santa = 194,
	Clothing_F_Hairwear_Hat_TinFoil = 195,
	Clothing_F_Hairwear_Hat_TopHat = 196,
	Clothing_F_Hairwear_Hat_TopHatTall = 197,
	Clothing_F_Hairwear_Hat_Urban_Bandana = 198,
	Clothing_F_Hairwear_Hat_Witch = 199,
	Clothing_F_Hairwear_Headband_Athletic_Basic = 200,
	Clothing_F_Hairwear_Headphones_Functional_HighTech = 201,
	Clothing_F_Halo = 202,
	Clothing_F_Handwear_Gloves_Criminal_HandWrapsLeft = 203,
	Clothing_F_Handwear_Gloves_Criminal_HandWrapsRight = 204,
	Clothing_F_Handwear_Gloves_Noir_LeatherPlainLeft = 205,
	Clothing_F_Handwear_Gloves_Noir_LeatherPlainRight = 206,
	Clothing_F_Handwear_Gloves_Noir_LeatherStudedLeft = 207,
	Clothing_F_Handwear_Gloves_Noir_LeatherStudedRight = 208,
	Clothing_F_Handwear_Gloves_Tactical_Fingerless_Left = 209,
	Clothing_F_Handwear_Gloves_Tactical_Fingerless_Right = 210,
	Clothing_F_Handwear_Ring_Noir_CharlotteLeft = 211,
	Clothing_F_Handwear_Ring_Noir_EagleShieldLeft = 212,
	Clothing_F_Harness_Combat_Ring = 213,
	Clothing_F_Harness_Combat_Tactical = 214,
	Clothing_F_Headless = 215,
	Clothing_F_Headwear_Badge_Enforcement_BadgeDeputy = 216,
	Clothing_F_Headwear_Badge_Enforcement_Star = 217,
	Clothing_F_Headwear_Glasses_Functional_Aviator = 218,
	Clothing_F_Headwear_Mask_Chicken = 219,
	Clothing_F_Headwear_Mask_Eagle = 220,
	Clothing_F_Headwear_Mask_Nixon = 221,
	Clothing_F_Headwear_Mask_Pumpkin = 222,
	Clothing_F_Headwear_Mask_Rabbit = 223,
	Clothing_F_Headwear_Mask_Trump = 224,
	Clothing_F_Helmet_Football = 225,
	Clothing_F_Helmet_HammerHead = 226,
	Clothing_F_Helmet_Hazmat_Pestilence = 227,
	Clothing_F_Helmet_Induction = 228,
	Clothing_F_Helmet_Racing = 229,
	Clothing_F_Helmet_Sabertooth = 230,
	Clothing_F_Helmet_Sports_BaseBall = 231,
	Clothing_F_Helmet_Sports_Hockey = 232,
	Clothing_F_Kneepads_HeavyDuty = 233,
	Clothing_F_Legwear_Holster_ThighRig_L = 234,
	Clothing_F_Legwear_Holster_ThighRig_R = 235,
	Clothing_F_Legwear_Kneesocks_Functional_RegularLeft = 236,
	Clothing_F_Legwear_Kneesocks_Functional_RegularRight = 237,
	Clothing_F_Legwear_Legwarmer = 238,
	Clothing_F_Legwear_ThighHolster_Enforcement_Knife = 239,
	Clothing_F_Legwear_ThighHolster_Enforcement_LeftThigh = 240,
	Clothing_F_Mask_Death = 241,
	Clothing_F_Mask_Famine = 242,
	Clothing_F_Mask_War = 243,
	Clothing_F_Neckwear_Badge_Enforcement_Deputy = 244,
	Clothing_F_Neckwear_Badge_Enforcement_PrentissTigers = 245,
	Clothing_F_Neckwear_Badge_Enforcement_Star = 246,
	Clothing_F_Neckwear_Choker_Noir_Charlotte = 247,
	Clothing_F_Neckwear_Choker_Noir_Skull = 248,
	Clothing_F_Neckwear_Necklace_Enforcement_Dogtag = 249,
	Clothing_F_Neckwear_Necklace_Functional_DiamondHeart = 250,
	Clothing_F_Neckwear_Necklace_Functional_GoldLong = 251,
	Clothing_F_Neckwear_Necklace_Functional_GoldMedium = 252,
	Clothing_F_Neckwear_Necklace_Functional_GoldShort = 253,
	Clothing_F_Neckwear_Necklace_Skate_ToothStacey = 254,
	Clothing_F_Neckwear_Scarf_Beaded = 255,
	Clothing_F_Neckwear_Scarf_Functional_Shemagh = 256,
	Clothing_F_Neckwear_Scarf_Functional_ShemaghMask = 257,
	Clothing_F_Neckwear_Snood = 258,
	Clothing_F_Overalls_Hazmat_pestilence = 259,
	Clothing_F_Overalls_Jumpsuit_Tactical = 260,
	Clothing_F_Overalls_RabbitSuit = 261,
	Clothing_F_Overalls_Racesuit = 262,
	Clothing_F_Pad_Butt_Armoured = 263,
	Clothing_F_Pad_Groin_Armoured = 264,
	Clothing_F_Pouch_Leg_Utility_L = 265,
	Clothing_F_Pouch_Leg_Utility_R = 266,
	Clothing_F_Pouches_ChestRig_Grenades = 267,
	Clothing_F_Pouches_ChestRig_Machinegunner = 268,
	Clothing_F_Pouches_ChestRig_Rifleman = 269,
	Clothing_F_Pouches_ChestRig_Shotgunner = 270,
	Clothing_F_Pouches_ChestRig_SubMachineGun = 271,
	Clothing_F_Pouches_Vest_Grenades = 272,
	Clothing_F_Pouches_Vest_Machinegunner = 273,
	Clothing_F_Pouches_Vest_Shotgunner = 274,
	Clothing_F_Pouches_Vest_SubMachineGun = 275,
	Clothing_F_Shinpads_Impact = 276,
	Clothing_F_Shorts_Cargo_Capri = 277,
	Clothing_F_Shorts_HighWaist_Fashionable = 278,
	Clothing_F_Shorts_Sports_Basketball = 279,
	Clothing_F_Shoulderpads_Armoured = 280,
	Clothing_F_Skirt_Long_Functional_Office = 281,
	Clothing_F_Skirt_Mini_Functional_Flared = 282,
	Clothing_F_Skirt_Mini_Functional_Tutu = 283,
	Clothing_F_Skirt_SchoolGirl = 284,
	Clothing_F_Skirt_SchoolGirlGoth = 285,
	Clothing_F_Snowmanhead = 286,
	Clothing_F_Snowmanhead_Eyes = 287,
	Clothing_F_Snowmanhead_Nose = 288,
	Clothing_F_Swimwear_BikiniBottom_Functional_BriefRing = 289,
	Clothing_F_Swimwear_BikiniTop_Functional_HalterRing = 290,
	Clothing_F_Test_Balaclava_3Holes = 291,
	Clothing_F_Test_Balaclava_Halfface = 292,
	Clothing_F_Test_Belt_Tactical = 293,
	Clothing_F_Test_ElbowPads_Tactical = 294,
	Clothing_F_Test_Gloves_Tactical_Fingerless_Left = 295,
	Clothing_F_Test_Gloves_Tactical_Fingerless_Right = 296,
	Clothing_F_Test_Helmet_Combat = 297,
	Clothing_F_Test_Holster_Small_Left = 298,
	Clothing_F_Test_Holster_Small_Right = 299,
	Clothing_F_Test_Holster_Tactical_Left = 300,
	Clothing_F_Test_Holster_Tactical_Right = 301,
	Clothing_F_Test_Kneepads_Tactical = 302,
	Clothing_F_Test_MotorbikeHelmet = 303,
	Clothing_F_Test_Pouch_GasMask_Left = 304,
	Clothing_F_Test_Pouch_GasMask_Right = 305,
	Clothing_F_Test_Pouches_Vestslim_Rifleman = 306,
	Clothing_F_Test_Vest_Tactical = 307,
	Clothing_F_Thighpads_Armoured = 308,
	Clothing_F_Thighpads_Impact = 309,
	Clothing_F_Top_Backpack_Radio = 310,
	Clothing_F_Top_Backpack_Skateboard = 311,
	Clothing_F_Top_Corset_Underbust_Laced = 312,
	Clothing_F_Top_Halter_Fashion = 313,
	Clothing_F_Top_Jacket_Cropped_Hood = 314,
	Clothing_F_Top_Jacket_Death = 315,
	Clothing_F_Top_LongSleeved_Functional_SuitJacket = 316,
	Clothing_F_Top_LongSleeved_Hockey = 317,
	Clothing_F_Top_Longsleeve_Functional_ShirtDoneUp = 318,
	Clothing_F_Top_Longsleeve_Functional_ShirtOffice = 319,
	Clothing_F_Top_Longsleeve_Parka_HoodUp = 320,
	Clothing_F_Top_Longsleeve_Skate_HoodieHoodDown = 321,
	Clothing_F_Top_Longsleeve_Skate_HoodieHoodup = 322,
	Clothing_F_Top_Longsleeved_Famine = 323,
	Clothing_F_Top_Longsleeved_Football = 324,
	Clothing_F_Top_Longsleeved_Functional_JacketLeather = 325,
	Clothing_F_Top_Longsleeved_Functional_PulloverPolo = 326,
	Clothing_F_Top_Longsleeved_Functional_PulloverTight = 327,
	Clothing_F_Top_Longsleeved_Jacket_Denim = 328,
	Clothing_F_Top_Longsleeved_Jacket_Flight_Cotton = 329,
	Clothing_F_Top_Longsleeved_Jacket_Leather_Studded = 330,
	Clothing_F_Top_Longsleeved_Jacket_Patriot = 331,
	Clothing_F_Top_Longsleeved_Jacket_Santa = 332,
	Clothing_F_Top_Longsleeved_MilitaryJumper = 333,
	Clothing_F_Top_Longsleeved_TechHoodie = 334,
	Clothing_F_Top_ShortSleeved_Baseball = 335,
	Clothing_F_Top_Shortsleeved_Functional_SchoolGirl = 336,
	Clothing_F_Top_Shortsleeved_Functional_SchoolGirlGoth = 337,
	Clothing_F_Top_Shortsleeved_Functional_Tee = 338,
	Clothing_F_Top_Shortsleeved_Noir_Tee = 339,
	Clothing_F_Top_Shortsleeved_Smock = 340,
	Clothing_F_Top_Sleeveless_Basketball = 341,
	Clothing_F_Top_Tanktop_Tied = 342,
	Clothing_F_Top_Vest_Armoured = 343,
	Clothing_F_Top_Vest_Athletic_Cropped = 344,
	Clothing_F_Top_Vest_Athletic_Regular = 345,
	Clothing_F_Top_Vest_CarbonNanofiber = 346,
	Clothing_F_Top_Vest_CeramicPlated = 347,
	Clothing_F_Top_Vest_ChestRig = 348,
	Clothing_F_Top_Vest_Enforcement_Base = 349,
	Clothing_F_Top_Vest_Enforcement_Shooting = 350,
	Clothing_F_Top_Vest_Functional_Cropped = 351,
	Clothing_F_Top_Vest_Impact = 352,
	Clothing_F_Top_Vest_Torn = 353,
	Clothing_F_TrousersShorts_Butt_Functional_Denim = 354,
	Clothing_F_TrousersShorts_Butt_Noir_Leather = 355,
	Clothing_F_TrousersShorts_ThighLength_Functional_Safari = 356,
	Clothing_F_Trousers_Baseball = 357,
	Clothing_F_Trousers_Combats_Enforcement_US = 358,
	Clothing_F_Trousers_Combats_Reinforced = 359,
	Clothing_F_Trousers_DropCrotch = 360,
	Clothing_F_Trousers_Famine = 361,
	Clothing_F_Trousers_Football = 362,
	Clothing_F_Trousers_Hockey = 363,
	Clothing_F_Trousers_Jeans_Baggy = 364,
	Clothing_F_Trousers_Jeans_Functional_Regular = 365,
	Clothing_F_Trousers_Jeans_Functional_Skinny = 366,
	Clothing_F_Trousers_Jeans_Noir_Skinny = 367,
	Clothing_F_Trousers_LeatherDenim = 368,
	Clothing_F_Trousers_Leather_Buckled = 369,
	Clothing_F_Trousers_Leggings_Fashion_FullLength = 370,
	Clothing_F_Trousers_Leggings_Functional_CalfLength = 371,
	Clothing_F_Trousers_Leggings_Functional_FullLength = 372,
	Clothing_F_Trousers_Leggings_Noir_CalfLength = 373,
	Clothing_F_Trousers_Leggings_Noir_FullLength = 374,
	Clothing_F_Trousers_Suit_Functional_Regular = 375,
	Clothing_F_Trousers_Tactical = 376,
	Clothing_F_Trousers_TechProsthetic = 377,
	Clothing_F_Trousers_Tracksuit_Athletic_Regular = 378,
	Clothing_F_Underwear_Bodysuit_Tank = 379,
	Clothing_F_Underwear_BoyShorts_Functional_Lace = 380,
	Clothing_F_Underwear_Bra_Functional_Adhesive = 381,
	Clothing_F_Underwear_Bra_Functional_Lace = 382,
	Clothing_F_Underwear_Bra_Functional_Plain = 383,
	Clothing_F_Underwear_Bra_Functional_Strapless = 384,
	Clothing_F_Underwear_Shorties_Functional_Plain = 385,
	Clothing_F_Underwear_Stockings_Functional_LaceFlowerHighLeft = 386,
	Clothing_F_Underwear_Stockings_Functional_LaceFlowerHighRight = 387,
	Clothing_F_Underwear_Stockings_Functional_LaceFlowerLowLeft = 388,
	Clothing_F_Underwear_Stockings_Functional_LaceFlowerLowRight = 389,
	Clothing_F_Underwear_Stockings_Functional_LaceSwirlsLeft = 390,
	Clothing_F_Underwear_Stockings_Functional_LaceSwirlsRight = 391,
	Clothing_F_Underwear_Stockings_Noir_TornHighLeft = 392,
	Clothing_F_Underwear_Stockings_Noir_TornHighRight = 393,
	Clothing_F_Underwear_Thong_Functional_Lace = 394,
	Clothing_F_Waistwear_Badge_Enforcement_BadgeDeputy = 395,
	Clothing_F_Waistwear_Badge_Enforcement_Star = 396,
	Clothing_F_Waistwear_Belt_Army = 397,
	Clothing_F_Waistwear_Belt_Enforcement_BulletAngledRight = 398,
	Clothing_F_Waistwear_Belt_Enforcement_BulletStar = 399,
	Clothing_F_Waistwear_Belt_Enforcement_EquipmentEM = 400,
	Clothing_F_Waistwear_Belt_Fashion_Scarf = 401,
	Clothing_F_Waistwear_Belt_Functional_Basic = 402,
	Clothing_F_Waistwear_Belt_Functional_LeatherWeaveRegular = 403,
	Clothing_F_Waistwear_Belt_Noir_CrossedStudded = 404,
	Clothing_F_Waistwear_Belt_Noir_Rock = 405,
	Clothing_F_Waistwear_Belt_Skate_StuddedFlatBuckleSimple = 406,
	Clothing_F_Waistwear_Belt_Skate_StuddedSimple = 407,
	Clothing_F_Waistwear_Corset_Noir_Charlotte = 408,
	Clothing_F_Waistwear_Piercing_Functional_BellyButterfly = 409,
	Clothing_F_Waistwear_Piercing_Functional_BellyDiamondBall = 410,
	Clothing_F_Waistwear_Piercing_Functional_BellyHeart = 411,
	Clothing_F_Waistwear_Piercing_Functional_BellyJewels = 412,
	Clothing_F_Wings_Cherub = 413,
	Clothing_F_Wings_Devil = 414,
	Clothing_M_Armpads_Armoured = 415,
	Clothing_M_Armpads_Impact = 416,
	Clothing_M_Armwear_Bracelets_Enforcement_LaRochaLeft = 417,
	Clothing_M_Armwear_Bracelets_Skate_StuddedLeft = 418,
	Clothing_M_Armwear_Bracelets_Skate_StuddedRight = 419,
	Clothing_M_Armwear_Upper_Functional_BandLaRochaLeft = 420,
	Clothing_M_Armwear_Wrist_Functional_BraceletBulletsLeft = 421,
	Clothing_M_Armwear_Wristwatch_Enforcement_LaRochaRight = 422,
	Clothing_M_Backpack_Militia = 423,
	Clothing_M_Backpack_Monster = 424,
	Clothing_M_Backpack_Pumpkin = 425,
	Clothing_M_Backpack_Quiver_Valentines = 426,
	Clothing_M_Backpack_SantaBag = 427,
	Clothing_M_Backpack_Skull = 428,
	Clothing_M_Backpack_Sprinter = 429,
	Clothing_M_Backpack_Vintage = 430,
	Clothing_M_Chestwear_Badge_Enforcement_BadgeDeputy = 431,
	Clothing_M_Chestwear_Badge_Enforcement_Star = 432,
	Clothing_M_Chestwear_Piercings_Skate_Nipple = 433,
	Clothing_M_Chestwear_ShoulderHolster_Functional_DoubleH = 434,
	Clothing_M_Chestwear_ShoulderHolster_Functional_Knife = 435,
	Clothing_M_Collar_Armoured_Heavy = 436,
	Clothing_M_Config_Leg_SprayCans_L = 437,
	Clothing_M_Config_Leg_SprayCans_R = 438,
	Clothing_M_Facewear_Earpiece_Enforcement_HighTecLeft = 439,
	Clothing_M_Facewear_Earpiece_Enforcement_RegularLeft = 440,
	Clothing_M_Facewear_Gasmask_SideFilter_Eyes = 441,
	Clothing_M_Facewear_Gasmask_SnoutFilter_Eyes = 442,
	Clothing_M_Facewear_Glasses_Athletic_Sun = 443,
	Clothing_M_Facewear_Glasses_Heart = 444,
	Clothing_M_Facewear_Glasses_Regular_3DRetro = 445,
	Clothing_M_Facewear_Glasses_Regular_Aviator = 446,
	Clothing_M_Facewear_Glasses_Regular_BigOval = 447,
	Clothing_M_Facewear_Glasses_Regular_EyePatch = 448,
	Clothing_M_Facewear_Glasses_Regular_NarrowRectangle = 449,
	Clothing_M_Facewear_Glasses_Regular_Rectangle = 450,
	Clothing_M_Facewear_Goggles_Functional_Flying = 451,
	Clothing_M_Facewear_Mask_Clown = 452,
	Clothing_M_Facewear_Mask_Criminal_Bandit = 453,
	Clothing_M_Facewear_Mask_Criminal_Cannibal = 454,
	Clothing_M_Facewear_Mask_Criminal_Hockey = 455,
	Clothing_M_Facewear_Mask_Criminal_HockeyPlain = 456,
	Clothing_M_Facewear_Mask_Criminal_Outlaw = 457,
	Clothing_M_Facewear_Mask_Egg = 458,
	Clothing_M_Facewear_Piercing_Functional_EarringYinYangLeft = 459,
	Clothing_M_Facewear_Piercing_Functional_EarringYinYangRight = 460,
	Clothing_M_Facewear_Piercing_Noir_EarCrossInvertedLeft = 461,
	Clothing_M_Facewear_Piercing_Noir_EarCrossInvertedRight = 462,
	Clothing_M_Facewear_Piercing_Noir_EarTopRingsRight = 463,
	Clothing_M_Facewear_Piercing_Skate_EarringRight = 464,
	Clothing_M_Facewear_Piercing_Urban_EarDollarLeft = 465,
	Clothing_M_Facewear_Piercing_Urban_EarDollarRight = 466,
	Clothing_M_Facewear_Piercings_Skate_Chin = 467,
	Clothing_M_Facewear_Piercings_Skate_EarringLeft = 468,
	Clothing_M_Facewear_Piercings_Skate_EarringRight = 469,
	Clothing_M_Facewear_Piercings_Skate_EarsLeft = 470,
	Clothing_M_Facewear_Piercings_Skate_EarsRight = 471,
	Clothing_M_Facewear_Piercings_Skate_EarsStudLeft = 472,
	Clothing_M_Facewear_Piercings_Skate_EarsStudRight = 473,
	Clothing_M_Facewear_Piercings_Skate_Forehead = 474,
	Clothing_M_Facewear_Piercings_Skate_NoseRing = 475,
	Clothing_M_Facewear_Piercings_Skate_NoseTop = 476,
	Clothing_M_Facewear_Piercings_Skate_Scalp = 477,
	Clothing_M_Facewear_Prop_Functional_Cigar = 478,
	Clothing_M_Facewear_Prop_Functional_Cigarette = 479,
	Clothing_M_Facewear_Prop_PartyBlower = 480,
	Clothing_M_Footwear_BootsAnkle_Enforcement_LaRocha = 481,
	Clothing_M_Footwear_BootsAnkle_Enforcement_Leather = 482,
	Clothing_M_Footwear_BootsAnkle_Enforcement_Stealth = 483,
	Clothing_M_Footwear_BootsAnkle_Enforcement_Walking = 484,
	Clothing_M_Footwear_BootsAnkle_Fashion = 485,
	Clothing_M_Footwear_BootsAnkle_Functional_HighTops = 486,
	Clothing_M_Footwear_BootsAnkle_HighTops_Skate = 487,
	Clothing_M_Footwear_BootsKnee_Death = 488,
	Clothing_M_Footwear_Boots_Leather_Plates = 489,
	Clothing_M_Footwear_Boots_UrbanCalfLength = 490,
	Clothing_M_Footwear_Shoes_BasketBall = 491,
	Clothing_M_Footwear_Shoes_Brogue_Monkstrap = 492,
	Clothing_M_Footwear_Shoes_Functional_Brogue = 493,
	Clothing_M_Footwear_Shoes_Skate_Basic = 494,
	Clothing_M_Footwear_Socks_Functional_AnkleLeft = 495,
	Clothing_M_Footwear_Socks_Functional_AnkleRight = 496,
	Clothing_M_Footwear_Socks_Goth_Left = 497,
	Clothing_M_Footwear_Socks_Goth_Right = 498,
	Clothing_M_Footwear_Socks_KiltLeft = 499,
	Clothing_M_Footwear_Socks_KiltRight = 500,
	Clothing_M_Footwear_Trainers_Urban_HipHopYoDawg = 501,
	Clothing_M_Forearmpads_Impact = 502,
	Clothing_M_Hairwear_Aliceband_Antlers_Reindeer = 503,
	Clothing_M_Hairwear_Aliceband_BunnyEars = 504,
	Clothing_M_Hairwear_Aliceband_CatEars = 505,
	Clothing_M_Hairwear_Aliceband_Functional_Basic = 506,
	Clothing_M_Hairwear_Aliceband_Functional_HornsDevil = 507,
	Clothing_M_Hairwear_Aliceband_PropKnife = 508,
	Clothing_M_Hairwear_Beanie_Augmented = 509,
	Clothing_M_Hairwear_Beanie_Baggy = 510,
	Clothing_M_Hairwear_Beanie_Knit = 511,
	Clothing_M_Hairwear_Goggles_Functional_FlyingContact = 512,
	Clothing_M_Hairwear_Hat_Bakerboy = 513,
	Clothing_M_Hairwear_Hat_CabbyGoggles = 514,
	Clothing_M_Hairwear_Hat_Crown = 515,
	Clothing_M_Hairwear_Hat_Elf = 516,
	Clothing_M_Hairwear_Hat_Enforcement_Beanie = 517,
	Clothing_M_Hairwear_Hat_Enforcement_Beret = 518,
	Clothing_M_Hairwear_Hat_Enforcement_Cop = 519,
	Clothing_M_Hairwear_Hat_Enforcement_MilitaryCap = 520,
	Clothing_M_Hairwear_Hat_Fez = 521,
	Clothing_M_Hairwear_Hat_FlatCap_Fashionable = 522,
	Clothing_M_Hairwear_Hat_Functional_BaseballCap = 523,
	Clothing_M_Hairwear_Hat_Functional_Cowboy = 524,
	Clothing_M_Hairwear_Hat_Functional_Fedora = 525,
	Clothing_M_Hairwear_Hat_Party = 526,
	Clothing_M_Hairwear_Hat_Santa = 527,
	Clothing_M_Hairwear_Hat_TinFoil = 528,
	Clothing_M_Hairwear_Hat_TopHat = 529,
	Clothing_M_Hairwear_Hat_TopHatTall = 530,
	Clothing_M_Hairwear_Hat_Urban_Bandana = 531,
	Clothing_M_Hairwear_Hat_Urban_BaseballCapBackwards = 532,
	Clothing_M_Hairwear_Hat_Wizard = 533,
	Clothing_M_Hairwear_Headband_Athletic_Basic = 534,
	Clothing_M_Hairwear_Headphones_Functional_HighTech = 535,
	Clothing_M_Halo = 536,
	Clothing_M_Handwear_Gloves_Criminal_HandWrapsLeft = 537,
	Clothing_M_Handwear_Gloves_Criminal_HandWrapsRight = 538,
	Clothing_M_Handwear_Gloves_Enforcement_GauntletFingerlessLeft = 539,
	Clothing_M_Handwear_Gloves_Enforcement_GauntletFingerlessRight = 540,
	Clothing_M_Handwear_Gloves_Enforcement_GauntletLeft = 541,
	Clothing_M_Handwear_Gloves_Enforcement_GauntletRight = 542,
	Clothing_M_Handwear_Gloves_Noir_LeatherFingerlessLeft = 543,
	Clothing_M_Handwear_Gloves_Noir_LeatherFingerlessRight = 544,
	Clothing_M_Handwear_Gloves_Noir_LeatherPlainLeft = 545,
	Clothing_M_Handwear_Gloves_Noir_LeatherPlainRight = 546,
	Clothing_M_Handwear_Gloves_Tactical_Fingerless_Left = 547,
	Clothing_M_Handwear_Gloves_Tactical_Fingerless_Right = 548,
	Clothing_M_Handwear_Ring_Functional_SmallLeftRing = 549,
	Clothing_M_Handwear_Ring_Noir_SkullRightMiddle = 550,
	Clothing_M_Handwear_Ring_Urban_DollarLeftIndex = 551,
	Clothing_M_Harness_Combat_Ring = 552,
	Clothing_M_Harness_Combat_Tactical = 553,
	Clothing_M_Headless = 554,
	Clothing_M_Headwear_Badge_Enforcement_BadgeDeputy = 555,
	Clothing_M_Headwear_Badge_Enforcement_Star = 556,
	Clothing_M_Headwear_Glasses_Functional_Aviator = 557,
	Clothing_M_Headwear_Mask_Chicken = 558,
	Clothing_M_Headwear_Mask_Eagle = 559,
	Clothing_M_Headwear_Mask_Nixon = 560,
	Clothing_M_Headwear_Mask_Pumpkin = 561,
	Clothing_M_Headwear_Mask_Rabbit = 562,
	Clothing_M_Headwear_Mask_Trump = 563,
	Clothing_M_Helmet_Football = 564,
	Clothing_M_Helmet_HammerHead = 565,
	Clothing_M_Helmet_Hazmat_Pestilence = 566,
	Clothing_M_Helmet_Induction = 567,
	Clothing_M_Helmet_Racing = 568,
	Clothing_M_Helmet_Sabertooth = 569,
	Clothing_M_Helmet_Sports_BaseBall = 570,
	Clothing_M_Helmet_Sports_Hockey = 571,
	Clothing_M_Kilt = 572,
	Clothing_M_KiltGoth = 573,
	Clothing_M_Kneepads_HeavyDuty = 574,
	Clothing_M_Legwear_Holster_ThighRig_L = 575,
	Clothing_M_Legwear_Holster_ThighRig_R = 576,
	Clothing_M_Legwear_ThighHolster_Enforcement_Knife = 577,
	Clothing_M_Legwear_ThighHolster_Enforcement_LaRochaRightThigh = 578,
	Clothing_M_Mask_Death = 579,
	Clothing_M_Mask_Famine = 580,
	Clothing_M_Mask_War = 581,
	Clothing_M_Neckwear_Badge_Enforcement_Deputy = 582,
	Clothing_M_Neckwear_Badge_Enforcement_PoliceBadge = 583,
	Clothing_M_Neckwear_Badge_Enforcement_PrentissTigers = 584,
	Clothing_M_Neckwear_Badge_Enforcement_Star = 585,
	Clothing_M_Neckwear_Necklace_Enforcement_Dogtag = 586,
	Clothing_M_Neckwear_Necklace_Functional_GogglesFlying = 587,
	Clothing_M_Neckwear_Necklace_Urban_GoldFlat = 588,
	Clothing_M_Neckwear_Necklace_Urban_GoldShort = 589,
	Clothing_M_Neckwear_Necklace_Urban_PlatinumDollar = 590,
	Clothing_M_Neckwear_Pendant_Urban_PlatinumCrown = 591,
	Clothing_M_Neckwear_Pendant_Urban_RoundSpinner = 592,
	Clothing_M_Neckwear_Scarf_Beaded = 593,
	Clothing_M_Neckwear_Scarf_Functional_Shemagh = 594,
	Clothing_M_Neckwear_Scarf_Functional_ShemaghMask = 595,
	Clothing_M_Neckwear_Snood = 596,
	Clothing_M_Neckwear_Tie_Functional_DoneUp = 597,
	Clothing_M_Neckwear_Tie_Functional_Loose = 598,
	Clothing_M_Overalls_Hazmat_pestilence = 599,
	Clothing_M_Overalls_Jumpsuit_Tactical = 600,
	Clothing_M_Overalls_RabbitSuit = 601,
	Clothing_M_Overalls_Racesuit = 602,
	Clothing_M_Pad_Butt_Armoured = 603,
	Clothing_M_Pad_Groin_Armoured = 604,
	Clothing_M_Pouch_Leg_Utility_L = 605,
	Clothing_M_Pouch_Leg_Utility_R = 606,
	Clothing_M_Pouches_ChestRig_Grenades = 607,
	Clothing_M_Pouches_ChestRig_Machinegunner = 608,
	Clothing_M_Pouches_ChestRig_Rifleman = 609,
	Clothing_M_Pouches_ChestRig_Shotgunner = 610,
	Clothing_M_Pouches_ChestRig_SubMachineGun = 611,
	Clothing_M_Pouches_Vest_Grenades = 612,
	Clothing_M_Pouches_Vest_Machinegunner = 613,
	Clothing_M_Pouches_Vest_Shotgunner = 614,
	Clothing_M_Pouches_Vest_SubMachineGun = 615,
	Clothing_M_Shinpads_Impact = 616,
	Clothing_M_Shorts_Cargo_Capri = 617,
	Clothing_M_Shorts_Sports_Basketball = 618,
	Clothing_M_Shoulderpads_Armoured = 619,
	Clothing_M_Snowmanhead = 620,
	Clothing_M_Snowmanhead_Eyes = 621,
	Clothing_M_Snowmanhead_Nose
 = 622,
	Clothing_M_Test_Balaclava_3Holes = 623,
	Clothing_M_Test_Balaclava_Halfface = 624,
	Clothing_M_Test_Belt_Tactical = 625,
	Clothing_M_Test_ElbowPads_Tactical = 626,
	Clothing_M_Test_Gloves_Tactical_Fingerless_Left = 627,
	Clothing_M_Test_Gloves_Tactical_Fingerless_Right = 628,
	Clothing_M_Test_Helmet_Combat = 629,
	Clothing_M_Test_Holster_Small_Left = 630,
	Clothing_M_Test_Holster_Small_Right = 631,
	Clothing_M_Test_Holster_Tactical_Left = 632,
	Clothing_M_Test_Holster_Tactical_Right = 633,
	Clothing_M_Test_Kneepads_Tactical = 634,
	Clothing_M_Test_MotorbikeHelmet = 635,
	Clothing_M_Test_Pouch_GasMask_Left = 636,
	Clothing_M_Test_Pouch_GasMask_Right = 637,
	Clothing_M_Test_Pouches_Vestslim_Rifleman = 638,
	Clothing_M_Test_Vest_Tactical = 639,
	Clothing_M_Thighpads_Armoured = 640,
	Clothing_M_Thighpads_Impact = 641,
	Clothing_M_Top_Backpack_Radio = 642,
	Clothing_M_Top_Backpack_Skateboard = 643,
	Clothing_M_Top_Jacket_Death = 644,
	Clothing_M_Top_Jacket_Padded_Slim = 645,
	Clothing_M_Top_LongSleeved_Functional_ShirtClosedCollar = 646,
	Clothing_M_Top_LongSleeved_Functional_SuitJacket = 647,
	Clothing_M_Top_LongSleeved_Functional_SuitJacketCasual = 648,
	Clothing_M_Top_LongSleeved_Functional_SuitJacketDoneUp = 649,
	Clothing_M_Top_LongSleeved_Hockey = 650,
	Clothing_M_Top_LongSleeved_Urban_JacketCollar = 651,
	Clothing_M_Top_LongSleeved_Urban_Shirt = 652,
	Clothing_M_Top_Longsleeve_Hoodie_HoodDown = 653,
	Clothing_M_Top_Longsleeve_Parka_HoodUp = 654,
	Clothing_M_Top_Longsleeve_Skate_HoodieHoodup = 655,
	Clothing_M_Top_Longsleeved_Famine = 656,
	Clothing_M_Top_Longsleeved_Fashion = 657,
	Clothing_M_Top_Longsleeved_Football = 658,
	Clothing_M_Top_Longsleeved_Functional_JacketLeatherFCOpen = 659,
	Clothing_M_Top_Longsleeved_Functional_SmartShirt = 660,
	Clothing_M_Top_Longsleeved_Functional_SmartShirtPopped = 661,
	Clothing_M_Top_Longsleeved_Funtional_JacketLeather = 662,
	Clothing_M_Top_Longsleeved_Jacket_Denim = 663,
	Clothing_M_Top_Longsleeved_Jacket_Flight_Nylon = 664,
	Clothing_M_Top_Longsleeved_Jacket_Leather_Studded = 665,
	Clothing_M_Top_Longsleeved_Jacket_Patriot = 666,
	Clothing_M_Top_Longsleeved_Jacket_Santa = 667,
	Clothing_M_Top_Longsleeved_MilitaryJumper = 668,
	Clothing_M_Top_Longsleeved_ShirtGhillie = 669,
	Clothing_M_Top_Longsleeved_ShirtGhillieGoth = 670,
	Clothing_M_Top_Longsleeved_TechHoodie = 671,
	Clothing_M_Top_Longsleeved_Torn = 672,
	Clothing_M_Top_Longsleeved_Urban_JacketLeatherPopped = 673,
	Clothing_M_Top_ShortSleeved_Baseball = 674,
	Clothing_M_Top_ShortSleeved_Functional_CollaredShirtOpen = 675,
	Clothing_M_Top_ShortSleeved_Functional_TeeTight = 676,
	Clothing_M_Top_ShortSleeved_Urban_CollaredShirtUniform = 677,
	Clothing_M_Top_ShortSleeved_Urban_TeeMedium = 678,
	Clothing_M_Top_Shortsleeved_Smock = 679,
	Clothing_M_Top_Sleeveless_Basketball = 680,
	Clothing_M_Top_Sleeveless_Enforcement_Tee = 681,
	Clothing_M_Top_Sleeveless_Functional_Wifebeater = 682,
	Clothing_M_Top_Sleeveless_MuscleShirt_Yback = 683,
	Clothing_M_Top_Sleeveless_Noir_Tee = 684,
	Clothing_M_Top_Vest_Armoured = 685,
	Clothing_M_Top_Vest_CarbonNanofiber = 686,
	Clothing_M_Top_Vest_CeramicPlated = 687,
	Clothing_M_Top_Vest_ChestRig = 688,
	Clothing_M_Top_Vest_Enforcement_Base = 689,
	Clothing_M_Top_Vest_Enforcement_Slim = 690,
	Clothing_M_Top_Vest_Enforcement_Webbing = 691,
	Clothing_M_Top_Vest_Enforcement_WebbingForBase = 692,
	Clothing_M_Top_Vest_Enforcement_WebbingHolster = 693,
	Clothing_M_Top_Vest_Impact = 694,
	Clothing_M_Top_Waistcoat_Tie_Shirt = 695,
	Clothing_M_TrousersShorts_CalfLength_Urban_Baggy = 696,
	Clothing_M_Trousers_Baseball = 697,
	Clothing_M_Trousers_Chino_Functional_Regular = 698,
	Clothing_M_Trousers_Combats_Enforcement_US = 699,
	Clothing_M_Trousers_Combats_Reinforced = 700,
	Clothing_M_Trousers_DropCrotch = 701,
	Clothing_M_Trousers_Famine = 702,
	Clothing_M_Trousers_Football = 703,
	Clothing_M_Trousers_Hockey = 704,
	Clothing_M_Trousers_Jeans_Fashion_Baggy = 705,
	Clothing_M_Trousers_Jeans_Fashion_Patched = 706,
	Clothing_M_Trousers_Jeans_Fashion_Regular = 707,
	Clothing_M_Trousers_Jeans_Functional_Regular = 708,
	Clothing_M_Trousers_Jeans_Functional_Skinny = 709,
	Clothing_M_Trousers_Jeans_Turnups_Torn = 710,
	Clothing_M_Trousers_Jeans_Urban_Baggy = 711,
	Clothing_M_Trousers_Leather_Stitched = 712,
	Clothing_M_Trousers_Suit_Functional_Regular = 713,
	Clothing_M_Trousers_Tactical = 714,
	Clothing_M_Trousers_TechProsthetic = 715,
	Clothing_M_Trousers_Tracksuit_Athletic_Regular = 716,
	Clothing_M_Underwear_Boxers_Athletic_Drawstring = 717,
	Clothing_M_Underwear_Briefs_Functional_Regular = 718,
	Clothing_M_Waistwear_Badge_Enforcement_BadgeDeputy = 719,
	Clothing_M_Waistwear_Badge_Enforcement_Star = 720,
	Clothing_M_Waistwear_Belt_Army = 721,
	Clothing_M_Waistwear_Belt_Enforcement_BulletAngledLeft = 722,
	Clothing_M_Waistwear_Belt_Enforcement_EquipmentEM = 723,
	Clothing_M_Waistwear_Belt_Functional_LeatherWeaveRegular = 724,
	Clothing_M_Waistwear_Belt_Functional_LowRegular = 725,
	Clothing_M_Waistwear_Belt_Functional_RegularBuckle = 726,
	Clothing_M_Waistwear_Belt_Noir_CrossedStudded = 727,
	Clothing_M_Waistwear_Belt_Noir_StuddedAngledLeft = 728,
	Clothing_M_Waistwear_Belt_Skate_LowRoundStuds = 729,
	Clothing_M_Waistwear_Belt_Skate_LowStudded = 730,
	Clothing_M_Waistwear_Belt_Skate_StuddedFlatBuckleSimple = 731,
	Clothing_M_Waistwear_Belt_Skate_StuddedSimple = 732,
	Clothing_M_Wings_Cherub = 733,
	Clothing_M_Wings_Devil = 734,
	CombatMsg_Arrest = 735,
	CombatMsg_Assist = 736,
	CombatMsg_Kill = 737,
	CombatMsg_Kill_OwnWeapon = 738,
	CombatMsg_Stun = 739,
	Contac_AkikoX = 740,
	ContactStatus_Locked = 741,
	ContactStatus_Pledged = 742,
	ContactStatus_Unlocked = 743,
	Contact_Aletta = 744,
	Contact_AmitKarim = 745,
	Contact_ArlonBenjamin = 746,
	Contact_BaezBenjamin = 747,
	Contact_Birth = 748,
	Contact_BritneyBloodrose = 749,
	Contact_ByeongLee = 750,
	Contact_ByronBloodrose = 751,
	Contact_CharlotteBloodrose = 752,
	Contact_Chiro = 753,
	Contact_Chiza = 754,
	Contact_ChungHee = 755,
	Contact_DarrylKent = 756,
	Contact_DevilDog = 757,
	Contact_DoubleB = 758,
	Contact_Elf = 759,
	Contact_ErnstTempleton = 760,
	Contact_EvaOrlandez = 761,
	Contact_GraysonFell = 762,
	Contact_Grissom = 763,
	Contact_Gumball = 764,
	Contact_HarmonBenjamin = 765,
	Contact_HeaChoi = 766,
	Contact_Javez = 767,
	Contact_JeungBloodrose = 768,
	Contact_JustinTeng = 769,
	Contact_KasparDanko = 770,
	Contact_LaRocha = 771,
	Contact_LillithBloodrose = 772,
	Contact_LucasVanRooyen = 773,
	Contact_LynetteCasey = 774,
	Contact_MichaelSimeone = 775,
	Contact_MirriKent = 776,
	Contact_Ophelia = 777,
	Contact_OrlenzMoretti = 778,
	Contact_PaganBloodrose = 779,
	Contact_Sabbat = 780,
	Contact_SaulLinklater = 781,
	Contact_SeungBloodrose = 782,
	Contact_Shift = 783,
	Contact_SimonTran = 784,
	Contact_Sofia = 785,
	Contact_Speedball = 786,
	Contact_StregaBloodrose = 787,
	Contact_StuPhoenix = 788,
	Contact_Suji = 789,
	Contact_TerriQuan = 790,
	Contact_TipToe = 791,
	Contact_Treat = 792,
	Contact_Trick = 793,
	Contact_TyDurrant = 794,
	Contact_TyronSennet = 795,
	Contact_Up = 796,
	Contact_VeronkiaLee = 797,
	Contact_VioletPrentiss = 798,
	Contact_Wilde = 799,
	Contact_WilsonLeBoyce = 800,
	Contact_YoDawg = 801,
	Contact_Zombie = 802,
	Crim_Rating_0000 = 803,
	Crim_Rating_0000 = 804,
	Crim_Rating_0000 = 805,
	Crim_Rating_0000 = 806,
	Crim_Rating_0010 = 807,
	Crim_Rating_0010 = 808,
	Crim_Rating_0010 = 809,
	Crim_Rating_0010 = 810,
	Crim_Rating_0020 = 811,
	Crim_Rating_0020 = 812,
	Crim_Rating_0020 = 813,
	Crim_Rating_0020 = 814,
	Crim_Rating_0030 = 815,
	Crim_Rating_0030 = 816,
	Crim_Rating_0030 = 817,
	Crim_Rating_0030 = 818,
	Crim_Rating_0040 = 819,
	Crim_Rating_0040 = 820,
	Crim_Rating_0040 = 821,
	Crim_Rating_0040 = 822,
	Crim_Rating_0050 = 823,
	Crim_Rating_0050 = 824,
	Crim_Rating_0050 = 825,
	Crim_Rating_0050 = 826,
	Crim_Rating_0060 = 827,
	Crim_Rating_0060 = 828,
	Crim_Rating_0060 = 829,
	Crim_Rating_0060 = 830,
	Crim_Rating_0070 = 831,
	Crim_Rating_0070 = 832,
	Crim_Rating_0070 = 833,
	Crim_Rating_0070 = 834,
	Crim_Rating_0080 = 835,
	Crim_Rating_0080 = 836,
	Crim_Rating_0080 = 837,
	Crim_Rating_0080 = 838,
	Crim_Rating_0090 = 839,
	Crim_Rating_0090 = 840,
	Crim_Rating_0090 = 841,
	Crim_Rating_0090 = 842,
	Crim_Rating_0100 = 843,
	Crim_Rating_0100 = 844,
	Crim_Rating_0100 = 845,
	Crim_Rating_0100 = 846,
	Crim_Rating_0110 = 847,
	Crim_Rating_0110 = 848,
	Crim_Rating_0110 = 849,
	Crim_Rating_0110 = 850,
	Crim_Rating_0120 = 851,
	Crim_Rating_0120 = 852,
	Crim_Rating_0120 = 853,
	Crim_Rating_0120 = 854,
	Crim_Rating_0130 = 855,
	Crim_Rating_0130 = 856,
	Crim_Rating_0130 = 857,
	Crim_Rating_0130 = 858,
	Crim_Rating_0140 = 859,
	Crim_Rating_0140 = 860,
	Crim_Rating_0140 = 861,
	Crim_Rating_0140 = 862,
	Crim_Rating_0150 = 863,
	Crim_Rating_0150 = 864,
	Crim_Rating_0150 = 865,
	Crim_Rating_0150 = 866,
	Crim_Rating_0160 = 867,
	Crim_Rating_0160 = 868,
	Crim_Rating_0160 = 869,
	Crim_Rating_0160 = 870,
	Crim_Rating_0170 = 871,
	Crim_Rating_0170 = 872,
	Crim_Rating_0170 = 873,
	Crim_Rating_0170 = 874,
	Crim_Rating_0180 = 875,
	Crim_Rating_0180 = 876,
	Crim_Rating_0180 = 877,
	Crim_Rating_0180 = 878,
	Crim_Rating_0190 = 879,
	Crim_Rating_0190 = 880,
	Crim_Rating_0190 = 881,
	Crim_Rating_0190 = 882,
	Crim_Rating_0205 = 883,
	Crim_Rating_0205 = 884,
	Crim_Rating_0205 = 885,
	Crim_Rating_0205 = 886,
	Crim_Rating_0215 = 887,
	Crim_Rating_0215 = 888,
	Crim_Rating_0215 = 889,
	Crim_Rating_0215 = 890,
	Crim_Rating_0225 = 891,
	Crim_Rating_0225 = 892,
	Crim_Rating_0225 = 893,
	Crim_Rating_0225 = 894,
	Crim_Rating_0235 = 895,
	Crim_Rating_0235 = 896,
	Crim_Rating_0235 = 897,
	Crim_Rating_0235 = 898,
	Crim_Rating_0245 = 899,
	Crim_Rating_0245 = 900,
	Crim_Rating_0245 = 901,
	Crim_Rating_0245 = 902,
	Crim_Rating_0255 = 903,
	Crim_Rating_0255 = 904,
	Crim_Rating_0255 = 905,
	Crim_Rating_0255 = 906,
	Crim_Rating_0265 = 907,
	Crim_Rating_0265 = 908,
	Crim_Rating_0265 = 909,
	Crim_Rating_0265 = 910,
	Crim_Rating_0275 = 911,
	Crim_Rating_0275 = 912,
	Crim_Rating_0275 = 913,
	Crim_Rating_0275 = 914,
	Crim_Rating_0285 = 915,
	Crim_Rating_0285 = 916,
	Crim_Rating_0285 = 917,
	Crim_Rating_0285 = 918,
	Crim_Rating_0295 = 919,
	Crim_Rating_0295 = 920,
	Crim_Rating_0295 = 921,
	Crim_Rating_0295 = 922,
	Crim_Training = 923,
	DistrictThreat = 924,
	DistrictThreat = 925,
	DistrictThreat = 926,
	DistrictThreat = 927,
	DistrictThreat_T = 928,
	Enf_Rating_0000 = 929,
	Enf_Rating_0000 = 930,
	Enf_Rating_0000 = 931,
	Enf_Rating_0000 = 932,
	Enf_Rating_0010 = 933,
	Enf_Rating_0010 = 934,
	Enf_Rating_0010 = 935,
	Enf_Rating_0010 = 936,
	Enf_Rating_0020 = 937,
	Enf_Rating_0020 = 938,
	Enf_Rating_0020 = 939,
	Enf_Rating_0020 = 940,
	Enf_Rating_0030 = 941,
	Enf_Rating_0030 = 942,
	Enf_Rating_0030 = 943,
	Enf_Rating_0030 = 944,
	Enf_Rating_0040 = 945,
	Enf_Rating_0040 = 946,
	Enf_Rating_0040 = 947,
	Enf_Rating_0040 = 948,
	Enf_Rating_0050 = 949,
	Enf_Rating_0050 = 950,
	Enf_Rating_0050 = 951,
	Enf_Rating_0050 = 952,
	Enf_Rating_0060 = 953,
	Enf_Rating_0060 = 954,
	Enf_Rating_0060 = 955,
	Enf_Rating_0060 = 956,
	Enf_Rating_0070 = 957,
	Enf_Rating_0070 = 958,
	Enf_Rating_0070 = 959,
	Enf_Rating_0070 = 960,
	Enf_Rating_0080 = 961,
	Enf_Rating_0080 = 962,
	Enf_Rating_0080 = 963,
	Enf_Rating_0080 = 964,
	Enf_Rating_0090 = 965,
	Enf_Rating_0090 = 966,
	Enf_Rating_0090 = 967,
	Enf_Rating_0090 = 968,
	Enf_Rating_0100 = 969,
	Enf_Rating_0100 = 970,
	Enf_Rating_0100 = 971,
	Enf_Rating_0100 = 972,
	Enf_Rating_0110 = 973,
	Enf_Rating_0110 = 974,
	Enf_Rating_0110 = 975,
	Enf_Rating_0110 = 976,
	Enf_Rating_0120 = 977,
	Enf_Rating_0120 = 978,
	Enf_Rating_0120 = 979,
	Enf_Rating_0120 = 980,
	Enf_Rating_0130 = 981,
	Enf_Rating_0130 = 982,
	Enf_Rating_0130 = 983,
	Enf_Rating_0130 = 984,
	Enf_Rating_0140 = 985,
	Enf_Rating_0140 = 986,
	Enf_Rating_0140 = 987,
	Enf_Rating_0140 = 988,
	Enf_Rating_0150 = 989,
	Enf_Rating_0150 = 990,
	Enf_Rating_0150 = 991,
	Enf_Rating_0150 = 992,
	Enf_Rating_0160 = 993,
	Enf_Rating_0160 = 994,
	Enf_Rating_0160 = 995,
	Enf_Rating_0160 = 996,
	Enf_Rating_0170 = 997,
	Enf_Rating_0170 = 998,
	Enf_Rating_0170 = 999,
	Enf_Rating_0170 = 1000,
	Enf_Rating_0180 = 1001,
	Enf_Rating_0180 = 1002,
	Enf_Rating_0180 = 1003,
	Enf_Rating_0180 = 1004,
	Enf_Rating_0190 = 1005,
	Enf_Rating_0190 = 1006,
	Enf_Rating_0190 = 1007,
	Enf_Rating_0190 = 1008,
	Enf_Rating_0205 = 1009,
	Enf_Rating_0205 = 1010,
	Enf_Rating_0205 = 1011,
	Enf_Rating_0205 = 1012,
	Enf_Rating_0215 = 1013,
	Enf_Rating_0215 = 1014,
	Enf_Rating_0215 = 1015,
	Enf_Rating_0215 = 1016,
	Enf_Rating_0225 = 1017,
	Enf_Rating_0225 = 1018,
	Enf_Rating_0225 = 1019,
	Enf_Rating_0225 = 1020,
	Enf_Rating_0235 = 1021,
	Enf_Rating_0235 = 1022,
	Enf_Rating_0235 = 1023,
	Enf_Rating_0235 = 1024,
	Enf_Rating_0245 = 1025,
	Enf_Rating_0245 = 1026,
	Enf_Rating_0245 = 1027,
	Enf_Rating_0245 = 1028,
	Enf_Rating_0255 = 1029,
	Enf_Rating_0255 = 1030,
	Enf_Rating_0255 = 1031,
	Enf_Rating_0255 = 1032,
	Enf_Rating_0265 = 1033,
	Enf_Rating_0265 = 1034,
	Enf_Rating_0265 = 1035,
	Enf_Rating_0265 = 1036,
	Enf_Rating_0275 = 1037,
	Enf_Rating_0275 = 1038,
	Enf_Rating_0275 = 1039,
	Enf_Rating_0275 = 1040,
	Enf_Rating_0285 = 1041,
	Enf_Rating_0285 = 1042,
	Enf_Rating_0285 = 1043,
	Enf_Rating_0285 = 1044,
	Enf_Rating_0295 = 1045,
	Enf_Rating_0295 = 1046,
	Enf_Rating_0295 = 1047,
	Enf_Rating_0295 = 1048,
	Enf_Training = 1049,
	Faction_Criminal64 = 1050,
	Faction_Criminal_OpenConflict = 1051,
	Faction_Enforcer64 = 1052,
	Faction_Enforcer_OpenConflict = 1053,
	FnMod_Character_AmmoSupply_Radius = 1054,
	FnMod_Character_AmmoSupply_Shielded = 1055,
	FnMod_Character_BlowTorch = 1056,
	FnMod_Character_Fragile = 1057,
	FnMod_Character_HardLanding = 1058,
	FnMod_Character_RemoteDetonator = 1059,
	FnMod_Consumable_BoomBox = 1060,
	FnMod_Consumable_Choice = 1061,
	FnMod_Consumable_Cover = 1062,
	FnMod_Consumable_Epinephrine = 1063,
	FnMod_Consumable_Flag = 1064,
	FnMod_Consumable_GiftBox = 1065,
	FnMod_Consumable_Giftbox_Supply = 1066,
	FnMod_Consumable_MediKit = 1067,
	FnMod_Consumable_SatchelCharge = 1068,
	FnMod_Consumable_SupplyBox-Large = 1069,
	FnMod_Consumable_SupplyBox-Medium = 1070,
	FnMod_Vehicle_HighBurnFuel = 1071,
	FnMod_Vehicle_MobileRadarTower = 1072,
	FnMod_Weapon_AMG_Stablizer = 1073,
	FnMod_Weapon_BananaMagazine = 1074,
	FnMod_Weapon_BurstAvalanche = 1075,
	FnMod_Weapon_ChamberedRound = 1076,
	FnMod_Weapon_EOL-Conc = 1077,
	FnMod_Weapon_EOL-LightFrag = 1078,
	FnMod_Weapon_EOL-Perc = 1079,
	FnMod_Weapon_ExtendedBarrel = 1080,
	FnMod_Weapon_Firework = 1081,
	FnMod_Weapon_Flare = 1082,
	FnMod_Weapon_GermanReticle_Armas = 1083,
	FnMod_Weapon_Harrier = 1084,
	FnMod_Weapon_HuntingSight-Anubis = 1085,
	FnMod_Weapon_HuntingSight_3Post = 1086,
	FnMod_Weapon_MechanicalChoke = 1087,
	FnMod_Weapon_MicroRockets = 1088,
	FnMod_Weapon_Norsemen-Hel = 1089,
	FnMod_Weapon_Norsemen-Hoenir = 1090,
	FnMod_Weapon_Norsemen-Odin-Hel = 1091,
	FnMod_Weapon_Norsemen-Odin-Hoenir = 1092,
	FnMod_Weapon_Norsemen-Odin-Tyr = 1093,
	FnMod_Weapon_Norsemen-Tyr = 1094,
	FnMod_Weapon_Piercing = 1095,
	FnMod_Weapon_SelectFire = 1096,
	FnMod_Weapon_ShortBarrel = 1097,
	FnMod_Weapon_Silencer_Rifle_Integrated = 1098,
	FnMod_Weapon_Tagger_Suit = 1099,
	FnMod_Weapon_UL3_BloodyMary = 1100,
	FnMod_Weapon_UL3_HitchHiker = 1101,
	FnMod_Weapon_UL3_JerseyDevil = 1102,
	Group_Arrow = 1103,
	Group_Hud_Title_OnMission = 1104,
	Group_Hud_Title_Ready = 1105,
	Group_Hud_Title_Waiting = 1106,
	Group_Leader = 1107,
	Group_SideLeader = 1108,
	HUD_ActionMessage_Exclamation = 1109,
	Heat_Criminal_Level0 = 1110,
	Heat_Criminal_Level1 = 1111,
	Heat_Criminal_Level2 = 1112,
	Heat_Criminal_Level3 = 1113,
	Heat_Criminal_Level4 = 1114,
	Heat_Criminal_Level5 = 1115,
	Heat_Criminal_Level5_Masked = 1116,
	Heat_Criminal_LevelMask = 1117,
	Heat_Enforcer_Level0 = 1118,
	Heat_Enforcer_Level1 = 1119,
	Heat_Enforcer_Level2 = 1120,
	Heat_Enforcer_Level3 = 1121,
	Heat_Enforcer_Level4 = 1122,
	Heat_Enforcer_Level5 = 1123,
	Heat_Enforcer_Level5_Masked = 1124,
	Heat_Enforcer_LevelMask = 1125,
	Heat_GradientDown = 1126,
	Heat_GradientUp = 1127,
	INV_Equipment_AmmoCarrier = 1128,
	INV_Equipment_BatteringRam = 1129,
	INV_Equipment_BatteringRam = 1130,
	INV_Equipment_BatteringRam = 1131,
	INV_Equipment_BatteringRam = 1132,
	INV_Equipment_BrassKnuckles = 1133,
	INV_Equipment_BrassKnuckles = 1134,
	INV_Equipment_BrassKnuckles = 1135,
	INV_Equipment_BrassKnuckles = 1136,
	INV_Equipment_Camera = 1137,
	INV_Equipment_Camera = 1138,
	INV_Equipment_Camera = 1139,
	INV_Equipment_Camera = 1140,
	INV_Equipment_CrowBar = 1141,
	INV_Equipment_CrowBar = 1142,
	INV_Equipment_CrowBar = 1143,
	INV_Equipment_CrowBar = 1144,
	INV_Equipment_CuttingTorch = 1145,
	INV_Equipment_CuttingTorch = 1146,
	INV_Equipment_CuttingTorch = 1147,
	INV_Equipment_CuttingTorch = 1148,
	INV_Equipment_Explosives = 1149,
	INV_Equipment_Explosives = 1150,
	INV_Equipment_Explosives = 1151,
	INV_Equipment_Explosives = 1152,
	INV_Equipment_HandCuffs = 1153,
	INV_Equipment_Handcuffkeys = 1154,
	INV_Equipment_Handcuffkeys = 1155,
	INV_Equipment_Handcuffkeys = 1156,
	INV_Equipment_Handcuffkeys = 1157,
	INV_Equipment_HandCuffs = 1158,
	INV_Equipment_HandCuffs = 1159,
	INV_Equipment_HandCuffs = 1160,
	INV_Equipment_PaintSprayer = 1161,
	INV_Equipment_PaintSprayer = 1162,
	INV_Equipment_PaintSprayer = 1163,
	INV_Equipment_PaintSprayer = 1164,
	INV_Equipment_PetrolCan = 1165,
	INV_Equipment_PetrolCan = 1166,
	INV_Equipment_PetrolCan = 1167,
	INV_Equipment_PetrolCan = 1168,
	INV_Equipment_PoliceBadge = 1169,
	INV_Equipment_PoliceBadge = 1170,
	INV_Equipment_PoliceBadge = 1171,
	INV_Equipment_PoliceBadge = 1172,
	INV_Equipment_Scanner = 1173,
	INV_Equipment_Scanner = 1174,
	INV_Equipment_Scanner = 1175,
	INV_Equipment_Scanner = 1176,
	INV_Equipment_SlimJim = 1177,
	INV_Equipment_SlimJim = 1178,
	INV_Equipment_SlimJim = 1179,
	INV_Equipment_SlimJim = 1180,
	INV_Equipment_SprayCan = 1181,
	INV_Equipment_SprayCan = 1182,
	INV_Equipment_SprayCan = 1183,
	INV_Equipment_SprayCan = 1184,
	INV_Equipment_WireCutters = 1185,
	INV_Equipment_WireCutters = 1186,
	INV_Equipment_WireCutters = 1187,
	INV_Equipment_WireCutters = 1188,
	Icon_Achievement_Christmas_DeckTheHalls = 1189,
	Icon_Achievement_Christmas_HoHoHo = 1190,
	Icon_Achievement_Christmas_TheGiftThatKeepsOnGiving = 1191,
	Icon_Achievement_Halloween_Green = 1192,
	Icon_Achievement_Halloween_Purple = 1193,
	Icon_Achievement_Halloween_Red = 1194,
	Icon_Achievement_Halloween_Yellow = 1195,
	Icon_Achievement_KillStats_EnemiesKilledAsGroupInDestroyedVehicle = 1196,
	Icon_Achievement_KillStats_FromBehind = 1197,
	Icon_Achievement_KillStats_KillEnemyGroupFromPassengerSeat = 1198,
	Icon_Achievement_KillStats_KillEnemyInVehicleUsingGrenade = 1199,
	Icon_Achievement_KillStats_Notoriety5FromBehind = 1200,
	Icon_Achievement_KillStats_Prestige5FromBehind = 1201,
	Icon_Achievement_KillStats_WhileDriving = 1202,
	Icon_Achievement_KillStats_WhileLeaningOutOfVehicle = 1203,
	Icon_Achievement_KnockoutStats_Enemies = 1204,
	Icon_Achievement_MatchStats_BackupsCalledIn = 1205,
	Icon_Achievement_MatchStats_EndMissionAsMVP = 1206,
	Icon_Achievement_MaxContact_T0_BloodRoses = 1207,
	Icon_Achievement_MaxContact_T0_Gkings = 1208,
	Icon_Achievement_MaxContact_T0_Praetorians = 1209,
	Icon_Achievement_MaxContact_T0_PrentissTigers = 1210,
	Icon_Achievement_MedalStats_MedalsWon = 1211,
	Icon_Achievement_MiscStats_BecomeGroupLeader = 1212,
	Icon_Achievement_MiscStats_CompletedMission_MissionName = 1213,
	Icon_Achievement_MiscStats_ContactLevelUp = 1214,
	Icon_Achievement_MiscStats_OpenWorldGraffiti = 1215,
	Icon_Achievement_MiscStats_OrganisationLevelUp = 1216,
	Icon_Achievement_MiscStats_PlayerHealthRegenerated = 1217,
	Icon_Achievement_MiscStats_RandomRewardsReceived = 1218,
	Icon_Achievement_MiscStats_ReachThreat15 = 1219,
	Icon_Achievement_MiscStats_RoleLevelUp = 1220,
	Icon_Achievement_MiscStats_SelfCrimesWitnessed = 1221,
	Icon_Achievement_MiscStats_ShopsRamRaided = 1222,
	Icon_Achievement_MiscStats_SprintingDistance = 1223,
	Icon_Achievement_MiscStats_SuccessfulWitnessings = 1224,
	Icon_Achievement_MiscStats_VehicleDamageRepaired = 1225,
	Icon_Achievement_OpenWorld_LargeTaskItemDelivered = 1226,
	Icon_Achievement_OpenWorld_MediumTaskItemDelivered = 1227,
	Icon_Achievement_OpenWorld_MuggingsCompleted = 1228,
	Icon_Achievement_OpenWorld_SmallTaskItemDelivered = 1229,
	Icon_Achievement_SelfDeathStats_ByEnemy = 1230,
	Icon_Achievement_SelfDeathStats_ByFriendly = 1231,
	Icon_Achievement_StreakStats_ArrestEnemyKillStreak = 1232,
	Icon_Achievement_StreakStats_ArrestStreak = 1233,
	Icon_Achievement_TakeoutStats_Notoriety5 = 1234,
	Icon_Achievement_TaskTargetStats_BombDefusesCompleted = 1235,
	Icon_Achievement_TaskTargetStats_BombingsCompleted = 1236,
	Icon_Achievement_TaskTargetStats_CSICompleted = 1237,
	Icon_Achievement_TaskTargetStats_GraffitiCompleted = 1238,
	Icon_Achievement_TaskTargetStats_VandalismsCompleted = 1239,
	Icon_Achievement_TimeStats_TotalMatchTime = 1240,
	Icon_Achievement_TimeStats_TotalNotoriety5Time = 1241,
	Icon_Achievement_TimeStats_TotalPrestige5Time = 1242,
	Icon_Achievement_VehicleStats_Delivered = 1243,
	Icon_Achievement_VehicleStats_DeliveredInPristineCondition = 1244,
	Icon_Achievement_VehicleStats_DrivenVehiclesDestroyed_Player = 1245,
	Icon_Locker_Generic_Symbols = 1246,
	Icon_Locker_Generic_Token = 1247,
	Icon_Medal_Default = 1248,
	Icon_Message_Halloween = 1249,
	Icon_Reward_Emote = 1250,
	Icon_Reward_Vinyl = 1251,
	Icon_Roles_Christmas_12Guns_01 = 1252,
	Icon_Roles_Christmas_12Guns_02 = 1253,
	Icon_Roles_Christmas_12Guns_03 = 1254,
	Icon_Roles_Christmas_12Guns_04 = 1255,
	Icon_Roles_Christmas_12Guns_2015_01
 = 1256,
	Icon_Roles_Christmas_12Guns_2015_02 = 1257,
	Icon_Roles_Christmas_12Guns_2015_03 = 1258,
	Icon_Roles_Christmas_12Guns_2015_04 = 1259,
	Icon_Roles_Christmas_12Guns_2015_05 = 1260,
	Icon_Roles_Christmas_12Guns_2015_06 = 1261,
	Icon_Roles_Christmas_12Guns_2015_07 = 1262,
	Icon_Roles_Christmas_12Guns_2015_08 = 1263,
	Icon_Roles_Christmas_12Guns_2016_01 = 1264,
	Icon_Roles_Christmas_12Guns_2016_02 = 1265,
	Icon_Roles_Christmas_12Guns_2016_03 = 1266,
	Icon_Roles_Christmas_12Guns_2016_04 = 1267,
	Icon_Roles_Christmas_12Guns_2016_05 = 1268,
	Icon_Roles_Christmas_12Guns_2016_06 = 1269,
	Icon_Roles_Christmas_12Guns_2016_07 = 1270,
	Icon_Roles_Christmas_12Guns_2016_08 = 1271,
	Icon_Scoreboard_Generic_Clan = 1272,
	Icon_Scoreboard_Generic_Player = 1273,
	Icon_Title_Destroy = 1274,
	Icon_Title_Question = 1275,
	Icon_Title_Rename = 1276,
	Icon_Title_Symbol_Save = 1277,
	InfoBrowser_Crime_BreakIn = 1278,
	InfoBrowser_Crime_Mugging = 1279,
	InfoBrowser_Crime_RamRaid = 1280,
	InfoBrowser_DisplayPoint_Audio = 1281,
	InfoBrowser_DisplayPoint_Graffiti = 1282,
	InfoBrowser_DisplayPoint_Statue = 1283,
	InfoBrowser_DisplayPoint_Vehicle = 1284,
	InfoBrowser_Investigate = 1285,
	InfoBrowser_RouteControl_Door = 1286,
	InfoBrowser_RouteControl_Fence = 1287,
	InfoBrowser_RouteControl_Ladder = 1288,
	InfoBrowser_Vehicle_Enemy = 1289,
	InfoBrowser_Vehicle_Friendly = 1290,
	InfoBrowser_Vehicle_Neutral = 1291,
	InfoBrowser_Vehicle_Stolen = 1292,
	InfoBrowser_Vending_Ammo = 1293,
	InfoBrowser_Vending_Designer = 1294,
	InfoBrowser_Vending_Garage = 1295,
	InfoBrowser_Vending_Mail = 1296,
	InfoBrowser_Vending_Marketplace = 1297,
	InfoBrowser_Vending_Music = 1298,
	InfoBrowser_Vending_Persona = 1299,
	InfoBrowser_Vending_VehicleSpawn = 1300,
	InfoBrowser_Vending_Wardrobe = 1301,
	Infobrowser_CSA_Arson = 1302,
	Infobrowser_CSA_Bomb = 1303,
	Infobrowser_CSA_BombDefusal = 1304,
	Infobrowser_CSA_ForcedEntry = 1305,
	Infobrowser_CSA_Scan = 1306,
	JokerTicket = 1307,
	Joker_Ticket_Bronze = 1308,
	Joker_Ticket_Gold = 1309,
	Joker_Ticket_Silver = 1310,
	KillIcon_Arrest = 1311,
	KillIcon_AssaultRifle_ATAC_Bodyguard = 1312,
	KillIcon_AssaultRifle_ATAC_Default = 1313,
	KillIcon_AssaultRifle_ATAC_Mercenary = 1314,
	KillIcon_AssaultRifle_ATAC_Watchman = 1315,
	KillIcon_AssaultRifle_Apoc_Famine = 1316,
	KillIcon_AssaultRifle_COBR-A_Base = 1317,
	KillIcon_AssaultRifle_COBR-A_Scoped = 1318,
	KillIcon_AssaultRifle_CR5 = 1319,
	KillIcon_AssaultRifle_FAR_Base = 1320,
	KillIcon_AssaultRifle_FAR_Sight = 1321,
	KillIcon_AssaultRifle_FAR_Stock = 1322,
	KillIcon_AssaultRifle_Fanatic_Base = 1323,
	KillIcon_AssaultRifle_Fanatic_Bipod = 1324,
	KillIcon_AssaultRifle_Fanatic_Sight = 1325,
	KillIcon_AssaultRifle_NTEC = 1326,
	KillIcon_AssaultRifle_NTEC-5_Stock = 1327,
	KillIcon_AssaultRifle_NTEC-7_Compact = 1328,
	KillIcon_AssaultRifle_NTEC7 = 1329,
	KillIcon_AssaultRifle_NTEC_Scope = 1330,
	KillIcon_AssaultRifle_NTEC_Stock = 1331,
	KillIcon_AssaultRifle_Raptor_Base = 1332,
	KillIcon_AssaultRifle_Raptor_Foregrip = 1333,
	KillIcon_AssaultRifle_Raptor_Sight = 1334,
	KillIcon_AssaultRifle_STAR = 1335,
	KillIcon_AssaultRifle_STAR_LCR = 1336,
	KillIcon_AssaultRifle_STAR_Pink = 1337,
	KillIcon_AssaultRifle_VAS-R2_Base = 1338,
	KillIcon_AssaultRifle_VAS-R2_Sights = 1339,
	KillIcon_AssaultRifle_VAS-R2_Silenced = 1340,
	KillIcon_AssaultRifle_Vespa = 1341,
	KillIcon_AssaultRifle_VespaStock = 1342,
	KillIcon_AssautlRifle_VespaTactical = 1343,
	KillIcon_Explosive_AAEPD = 1344,
	KillIcon_Explosive_EOL = 1345,
	KillIcon_Explosive_EOL-Sight = 1346,
	KillIcon_Explosive_EOL-Torch = 1347,
	KillIcon_Explosive_OPGL = 1348,
	KillIcon_Explosive_OPGL_Snowball = 1349,
	KillIcon_Explosive_OSMAW = 1350,
	KillIcon_FlareGun = 1351,
	KillIcon_Generic = 1352,
	KillIcon_Grenade_Concussion = 1353,
	KillIcon_Grenade_EightBall = 1354,
	KillIcon_Grenade_Frag = 1355,
	KillIcon_Grenade_HalfBrick = 1356,
	KillIcon_Grenade_LTL = 1357,
	KillIcon_Grenade_Percussion = 1358,
	KillIcon_Grenade_Snowball = 1359,
	KillIcon_LMG_CAS_Base = 1360,
	KillIcon_LMG_CAS_Handle = 1361,
	KillIcon_LMG_CAS_Sight = 1362,
	KillIcon_LMG_Swarm_Base = 1363,
	KillIcon_LMG_Swarm_Handle = 1364,
	KillIcon_LMG_Swarm_Sight = 1365,
	KillIcon_LMG_VAS-SW2_Base = 1366,
	KillIcon_LMG_VAS-SW2_Handle = 1367,
	KillIcon_LMG_VAS-SW2_Sights = 1368,
	KillIcon_LTL_CCG = 1369,
	KillIcon_LTL_DartGun = 1370,
	KillIcon_LTL_GrenadeLauncher = 1371,
	KillIcon_LTL_Tazer = 1372,
	KillIcon_LTL_TazerShotgun = 1373,
	KillIcon_LightMachineGun_ALIG762 = 1374,
	KillIcon_LightMachineGun_SHAW556 = 1375,
	KillIcon_LightMachineGun_SSW = 1376,
	KillIcon_LightMachineGun_SSW_Upgrade = 1377,
	KillIcon_Pistol_ACT44 = 1378,
	KillIcon_Pistol_ACT44_GM = 1379,
	KillIcon_Pistol_ACT44_LastStand = 1380,
	KillIcon_Pistol_Apoc = 1381,
	KillIcon_Pistol_Blowtorch = 1382,
	KillIcon_Pistol_ColbyClassic = 1383,
	KillIcon_Pistol_ColbyCommander = 1384,
	KillIcon_Pistol_FBW = 1385,
	KillIcon_Pistol_FBW_SD = 1386,
	KillIcon_Pistol_Fr0g_Base = 1387,
	KillIcon_Pistol_Fr0g_Sight = 1388,
	KillIcon_Pistol_Fr0g_Torch = 1389,
	KillIcon_Pistol_NFA9 = 1390,
	KillIcon_Pistol_Nano = 1391,
	KillIcon_Pistol_Nano_SD = 1392,
	KillIcon_Pistol_RFP9 = 1393,
	KillIcon_Pistol_RFP9_Sight = 1394,
	KillIcon_Pistol_RFP9_Silencer = 1395,
	KillIcon_Pistol_RSA = 1396,
	KillIcon_Pistol_SASPDW = 1397,
	KillIcon_Pistol_SnubNose = 1398,
	KillIcon_Pistol_SnubNose_Pink = 1399,
	KillIcon_Rescue = 1400,
	KillIcon_Rifle_FFA = 1401,
	KillIcon_Rifle_FFA-JB = 1402,
	KillIcon_Rifle_JokerCarbine = 1403,
	KillIcon_Rifle_JokerCarbine_Pink = 1404,
	KillIcon_Rifle_OBIR = 1405,
	KillIcon_Rifle_Obeya = 1406,
	KillIcon_Rifle_Obeya_Pink = 1407,
	KillIcon_Rifle_Oscar = 1408,
	KillIcon_Rifle_SACR = 1409,
	KillIcon_Rifle_SACR_Scope = 1410,
	KillIcon_Rifle_SACR_Stock = 1411,
	KillIcon_Rifle_SLR = 1412,
	KillIcon_Rifle_SLR-Bipod = 1413,
	KillIcon_Rifle_SLR-Stock = 1414,
	KillIcon_Rifle_VBR = 1415,
	KillIcon_Rifle_VBR_Silencer = 1416,
	KillIcon_Rifle_VBR_Stock = 1417,
	KillIcon_SMG_ACES = 1418,
	KillIcon_SMG_ACES-Rifle = 1419,
	KillIcon_SMG_Apoc_Plague = 1420,
	KillIcon_SMG_C9S_Base = 1421,
	KillIcon_SMG_C9S_Sight = 1422,
	KillIcon_SMG_C9_Base = 1423,
	KillIcon_SMG_C9_Sight = 1424,
	KillIcon_SMG_CAP40 = 1425,
	KillIcon_SMG_CAP40_Compact = 1426,
	KillIcon_SMG_CBMP_Base = 1427,
	KillIcon_SMG_CBMP_Compact = 1428,
	KillIcon_SMG_CBMP_Tactical = 1429,
	KillIcon_SMG_Norsemen_Base = 1430,
	KillIcon_SMG_Norsemen_FoldingStock = 1431,
	KillIcon_SMG_Norsemen_Sight = 1432,
	KillIcon_SMG_Norsemen_Silencer = 1433,
	KillIcon_SMG_OCA = 1434,
	KillIcon_SMG_OCA_Pink = 1435,
	KillIcon_SMG_OCA_SD = 1436,
	KillIcon_SMG_OCA_SD_Whisper = 1437,
	KillIcon_SMG_OCA_Stock = 1438,
	KillIcon_SMG_PDW57-S_Base = 1439,
	KillIcon_SMG_PDW57-S_Scoped = 1440,
	KillIcon_SMG_PDW57-S_Sight = 1441,
	KillIcon_SMG_PDW57_Base = 1442,
	KillIcon_SMG_PDW57_Scoped = 1443,
	KillIcon_SMG_PDW57_Silenced = 1444,
	KillIcon_SMG_PMG = 1445,
	KillIcon_SMG_PMG-SD = 1446,
	KillIcon_SMG_TommyGun = 1447,
	KillIcon_SMG_TommyGun_Pink = 1448,
	KillIcon_SMG_VAS-C2_Base = 1449,
	KillIcon_SMG_VAS-C2_Sights = 1450,
	KillIcon_SMG_VAS-C2_Silenced = 1451,
	KillIcon_Secondary_Mountie_Base = 1452,
	KillIcon_Secondary_Mountie_Compact = 1453,
	KillIcon_Secondary_Mountie_Stock = 1454,
	KillIcon_Shotgun_Apoc_War = 1455,
	KillIcon_Shotgun_CSG = 1456,
	KillIcon_Shotgun_CSG_Pink = 1457,
	KillIcon_Shotgun_DOW_Base = 1458,
	KillIcon_Shotgun_DOW_JokerBox = 1459,
	KillIcon_Shotgun_DOW_Stock = 1460,
	KillIcon_Shotgun_JG = 1461,
	KillIcon_Shotgun_JG_Stockdown = 1462,
	KillIcon_Shotgun_NFAS = 1463,
	KillIcon_Shotgun_NFAS_Ogre = 1464,
	KillIcon_Shotgun_Shredder_Base = 1465,
	KillIcon_Shotgun_Shredder_DrumMag = 1466,
	KillIcon_Shotgun_Shredder_Torch = 1467,
	KillIcon_SniperRifle_Apoc_Death = 1468,
	KillIcon_SniperRifle_DMR = 1469,
	KillIcon_SniperRifle_HVR243 = 1470,
	KillIcon_SniperRifle_HVR243_Pink = 1471,
	KillIcon_SniperRifle_HVR243_SD = 1472,
	KillIcon_SniperRifle_HVR762 = 1473,
	KillIcon_SniperRifle_NCR762 = 1474,
	KillIcon_SniperRifle_PSR_Base = 1475,
	KillIcon_SniperRifle_PSR_MuzzleBrake = 1476,
	KillIcon_SniperRifle_PSR_Silencer = 1477,
	KillIcon_SniperRifle_Pathfinder = 1478,
	KillIcon_SniperRifle_Pathfinder-LR = 1479,
	KillIcon_SniperRifle_Pathfinder-SD = 1480,
	KillIcon_SniperRifle_SBSR_Base = 1481,
	KillIcon_SniperRifle_SBSR_Sight = 1482,
	KillIcon_SniperRifle_VAS-PR1_Base = 1483,
	KillIcon_SniperRifle_VAS-PR1_Sights = 1484,
	KillIcon_SniperRifle_VAS-PR1_Silenced = 1485,
	KillIcon_SniperRifle_Vesper = 1486,
	KillIcon_SniperRifle_VesperFoldingStock = 1487,
	KillIcon_SniperRifle_VesperTactical = 1488,
	KillIcon_Stun = 1489,
	KillIcon_UL3 = 1490,
	KillIcon_UL3_Sight = 1491,
	KillIcon_UL3_Silencer = 1492,
	KillIcon_Valentines = 1493,
	KillIcon_Vehicle = 1494,
	KillIcon_Weapon_Pistol_OCSP = 1495,
	Killcon_LMG_AMG_Base = 1496,
	Killcon_LMG_AMG_Bipod = 1497,
	Killcon_LMG_AMG_Compact = 1498,
	Killicon_Shotgun_Tas20 = 1499,
	Killicon_Shotgun_Tas20_Stock = 1500,
	Killicon_Shotgun_Tas20_Tactical = 1501,
	LargeIcon_Criminal = 1502,
	LargeIcon_Enforcer = 1503,
	List_CheckDisabled = 1504,
	List_CheckEnabled = 1505,
	Mail_Reward_Package = 1506,
	Marketplace_HighBidder = 1507,
	Medal_AntiGraffitiKill = 1508,
	Medal_ArrestStreakKiller = 1509,
	Medal_ArsonKill = 1510,
	Medal_BigWin_All = 1511,
	Medal_BigWin_Arrest_10 = 1512,
	Medal_BigWin_Arrest_10 = 1513,
	Medal_BigWin_Arrest_10 = 1514,
	Medal_BigWin_Arrest_10 = 1515,
	Medal_BigWin_Arrest_10 = 1516,
	Medal_BigWin_Defuse = 1517,
	Medal_BigWin_Detonate = 1518,
	Medal_BigWin_Rescue = 1519,
	Medal_BigWin_Rescue = 1520,
	Medal_BigWin_Rescue = 1521,
	Medal_BigWin_Rescue = 1522,
	Medal_BigWin_Rescue = 1523,
	Medal_BigWin_Takeout = 1524,
	Medal_BigWin_Takeout = 1525,
	Medal_BigWin_Takeout = 1526,
	Medal_BigWin_Takeout = 1527,
	Medal_BigWin_Takeout = 1528,
	Medal_Dishonour_AFK = 1529,
	Medal_Dishonour_ArrestedKill = 1530,
	Medal_Dishonour_ArrestedKill = 1531,
	Medal_Dishonour_ArrestedKill = 1532,
	Medal_Dishonour_ArrestedKill = 1533,
	Medal_Dishonour_ArrestedKill = 1534,
	Medal_Dishonour_ArrestedKill = 1535,
	Medal_Dishonour_ArrestedKill = 1536,
	Medal_Dishonour_ArrestedKill = 1537,
	Medal_Dishonour_ArrestedKill = 1538,
	Medal_Dishonour_ArrestedKill = 1539,
	Medal_Dishonour_FriendlyKill = 1540,
	Medal_Dishonour_FriendlyKill = 1541,
	Medal_Dishonour_FriendlyKill = 1542,
	Medal_Dishonour_FriendlyKill = 1543,
	Medal_Dishonour_FriendlyKill = 1544,
	Medal_Dishonour_FriendlyKill = 1545,
	Medal_Dishonour_FriendlyKill = 1546,
	Medal_Dishonour_FriendlyKill = 1547,
	Medal_Dishonour_FriendlyKill = 1548,
	Medal_Dishonour_FriendlyKill = 1549,
	Medal_Dishonour_FriendlyStun = 1550,
	Medal_Dishonour_FriendlyStun = 1551,
	Medal_Dishonour_FriendlyStun = 1552,
	Medal_Dishonour_FriendlyStun = 1553,
	Medal_Dishonour_FriendlyStun = 1554,
	Medal_Dishonour_SelfKill = 1555,
	Medal_Dishonour_SelfKill = 1556,
	Medal_Dishonour_SelfKill = 1557,
	Medal_Dishonour_SelfKill = 1558,
	Medal_Dishonour_SelfKill = 1559,
	Medal_Dishonour_SelfKill = 1560,
	Medal_Dishonour_SelfKill = 1561,
	Medal_Dishonour_SelfKill = 1562,
	Medal_Dishonour_SelfKill = 1563,
	Medal_Dishonour_SelfKill = 1564,
	Medal_Dishonour_SelfKill = 1565,
	Medal_Dishonour_SelfKill = 1566,
	Medal_Dishonour_SelfKill = 1567,
	Medal_Dishonour_SelfKill = 1568,
	Medal_DriverAssistKill = 1569,
	Medal_GraffitiingKill = 1570,
	Medal_GrenadeKill = 1571,
	Medal_KillStreakArrest = 1572,
	Medal_KillStreakKiller = 1573,
	Medal_KillStreak = 1574,
	Medal_KillStreak = 1575,
	Medal_KillStreak = 1576,
	Medal_KillStreak = 1577,
	Medal_KillStreak = 1578,
	Medal_KillStreak = 1579,
	Medal_Placeholder_01 = 1580,
	Medal_Placeholder_02 = 1581,
	Medal_Placeholder_03 = 1582,
	Medal_PostDeathKill = 1583,
	Medal_SuperKill = 1584,
	Medal_TaskItemKill = 1585,
	Medal_TimeLimit_Kills2 = 1586,
	Medal_TimeLimit_Kills3 = 1587,
	Medal_TimeLimit_Kills4 = 1588,
	Medal_TimeLimit_Kills5 = 1589,
	Medal_VIPKill = 1590,
	Medal_VehicleKill = 1591,
	Minigame_CriminalLogo = 1592,
	Minigame_EnforcerLogo = 1593,
	Music_DefaultMusicIcon = 1594,
	Music_DefaultThemeIcon = 1595,
	New_Feature_Icon = 1596,
	Organisation_Anarchists = 1597,
	Organisation_BloodRoses = 1598,
	Organisation_GKings = 1599,
	Organisation_Holiday_Christmas = 1600,
	Organisation_Holiday_Halloween = 1601,
	Organisation_Joker = 1602,
	Organisation_Praetorian = 1603,
	Organisation_PrentissTigers = 1604,
	OutfitIcon = 1605,
	Outfit_Female = 1606,
	Outfit_Male = 1607,
	Particle_Exclamation = 1608,
	Particle_SprayCan = 1609,
	Player_Effectiveness_01 = 1610,
	Player_Effectiveness_02 = 1611,
	Player_Effectiveness_03 = 1612,
	PopUpMenuDivider = 1613,
	RadarFull_BG = 1614,
	RadarFull_Compass = 1615,
	RadarFull_Contours = 1616,
	RadarFull_Jammed = 1617,
	RadarMini_BG = 1618,
	RadarMini_Compass = 1619,
	Reward_Bio = 1620,
	Reward_Money = 1621,
	Reward_None = 1622,
	Scoreboard_DefaultClanSymbol = 1623,
	Scoreboard_DefaultDeathIcon = 1624,
	Scoreboard_DefaultPlayerSymbol = 1625,
	Scoreboard_DefaultWeaponIcon = 1626,
	Scoreboard_HeaderImageGeneric = 1627,
	Scoreboard_HeaderImageMissionInProgress = 1628,
	Scoreboard_HeaderImageMissionLost = 1629,
	Scoreboard_HeaderImageMissionWon = 1630,
	Scoreboard_MVPIcon = 1631,
	Scoreboard_PlayerOffline = 1632,
	Scoreboard_SideIcon = 1633,
	Scoreboard_UpgradeNone = 1634,
	Scoreboard_UpgradeVacant = 1635,
	TaskMarker_Checkpoint = 1636,
	TaskMarker_Checkpoint_Edge = 1637,
	TaskMarker_Checkpoint_Occluded = 1638,
	TaskMarker_Contact = 1639,
	TaskMarker_Contact_Edge = 1640,
	TaskMarker_Item = 1641,
	TaskMarker_Item_Edge = 1642,
	TaskMarker_Item_Occluded = 1643,
	TaskMarker_PlayerVehicle = 1644,
	TaskMarker_PlayerVehicle_Edge = 1645,
	TaskMarker_Target = 1646,
	TaskMarker_Target_Edge = 1647,
	TaskMarker_Target_Occluded = 1648,
	TaskMarker_Waypoint = 1649,
	TaskMarker_Zone_Ammo = 1650,
	TaskMarker_Zone_Customisation = 1651,
	TaskMarker_Zone_Mail = 1652,
	TaskMarker_Zone_MarketPlace = 1653,
	TaskMarker_Zone_OpenWorldDelivery = 1654,
	TaskMarker_Zone_VehicleRepair = 1655,
	TaskMarker_Zone_VehicleSpawn = 1656,
	Threat_C = 1657,
	Threat_E = 1658,
	Titles = 1659,
	UpgradeSlot_Empty = 1660,
	UpgradeSlot_Locked = 1661,
	UpgradeSlot_NotPresent = 1662,
	Upgrade_Character_AirControl = 1663,
	Upgrade_Character_CarSurfer = 1664,
	Upgrade_Character_FastRegen_01 = 1665,
	Upgrade_Character_FastRegen_02 = 1666,
	Upgrade_Character_FastRegen_03 = 1667,
	Upgrade_Character_FieldSupplier_01 = 1668,
	Upgrade_Character_FieldSupplier_02 = 1669,
	Upgrade_Character_FieldSupplier_03 = 1670,
	Upgrade_Character_FlakJacket = 1671,
	Upgrade_Character_HappyLandings_01 = 1672,
	Upgrade_Character_HappyLandings_02 = 1673,
	Upgrade_Character_HappyLandings_03 = 1674,
	Upgrade_Character_MuscleRelaxant = 1675,
	Upgrade_Character_RadarJammer = 1676,
	Upgrade_Character_Silencer = 1677,
	Upgrade_Character_Spotter = 1678,
	Upgrade_Character_Survivor_01 = 1679,
	Upgrade_Character_Survivor_02 = 1680,
	Upgrade_Character_Survivor_03 = 1681,
	Upgrade_Vehicle_ActivationTimerIncrease_01 = 1682,
	Upgrade_Vehicle_ActivationTimerIncrease_02 = 1683,
	Upgrade_Vehicle_ActivationTimerIncrease_03 = 1684,
	Upgrade_Vehicle_AmmoCarrier = 1685,
	Upgrade_Vehicle_BlastRadiusIncrease_01 = 1686,
	Upgrade_Vehicle_BlastRadiusIncrease_02 = 1687,
	Upgrade_Vehicle_BlastRadiusIncrease_03 = 1688,
	Upgrade_Vehicle_Brick = 1689,
	Upgrade_Vehicle_ChassisStrengthening_01 = 1690,
	Upgrade_Vehicle_ChassisStrengthening_02 = 1691,
	Upgrade_Vehicle_ChassisStrengthening_03 = 1692,
	Upgrade_Vehicle_Endurance_01 = 1693,
	Upgrade_Vehicle_Endurance_02 = 1694,
	Upgrade_Vehicle_Endurance_03 = 1695,
	Upgrade_Vehicle_EngineOverhaul_01 = 1696,
	Upgrade_Vehicle_EngineOverhaul_02 = 1697,
	Upgrade_Vehicle_EngineOverhaul_03 = 1698,
	Upgrade_Vehicle_ExplosionDelay_01 = 1699,
	Upgrade_Vehicle_ExplosionDelay_02 = 1700,
	Upgrade_Vehicle_ExplosionDelay_03 = 1701,
	Upgrade_Vehicle_ExtraCargoCapacity1 = 1702,
	Upgrade_Vehicle_ExtraCargoCapacity2 = 1703,
	Upgrade_Vehicle_ExtraCargoCapacity3 = 1704,
	Upgrade_Vehicle_Meteor = 1705,
	Upgrade_Vehicle_MobileSpawnPoint = 1706,
	Upgrade_Vehicle_Muffler = 1707,
	Upgrade_Vehicle_QuickReSupply_01 = 1708,
	Upgrade_Vehicle_QuickReSupply_02 = 1709,
	Upgrade_Vehicle_QuickReSupply_03 = 1710,
	Upgrade_Vehicle_QuickRepair_01 = 1711,
	Upgrade_Vehicle_QuickRepair_02 = 1712,
	Upgrade_Vehicle_QuickRepair_03 = 1713,
	Upgrade_Vehicle_RammingPlate_01 = 1714,
	Upgrade_Vehicle_RammingPlate_02 = 1715,
	Upgrade_Vehicle_RammingPlate_03 = 1716,
	Upgrade_Vehicle_SteelPlating_01 = 1717,
	Upgrade_Vehicle_SteelPlating_02 = 1718,
	Upgrade_Vehicle_SteelPlating_03 = 1719,
	Upgrade_Weapon_3PointSling_01 = 1720,
	Upgrade_Weapon_3PointSling_02 = 1721,
	Upgrade_Weapon_3PointSling_03 = 1722,
	Upgrade_Weapon_Bandolier_01 = 1723,
	Upgrade_Weapon_Bandolier_02 = 1724,
	Upgrade_Weapon_Bandolier_03 = 1725,
	Upgrade_Weapon_CombatSling = 1726,
	Upgrade_Weapon_Damping_01 = 1727,
	Upgrade_Weapon_Damping_02 = 1728,
	Upgrade_Weapon_Damping_03 = 1729,
	Upgrade_Weapon_DoubleDrumMag = 1730,
	Upgrade_Weapon_EagleEyes_01 = 1731,
	Upgrade_Weapon_EagleEyes_02 = 1732,
	Upgrade_Weapon_EagleEyes_03 = 1733,
	Upgrade_Weapon_HighMagnificationScope = 1734,
	Upgrade_Weapon_MuzzleBrakeHorizontal = 1735,
	Upgrade_Weapon_QuickFingers_01 = 1736,
	Upgrade_Weapon_QuickFingers_02 = 1737,
	Upgrade_Weapon_QuickFingers_03 = 1738,
	Upgrade_Weapon_Rifling_01 = 1739,
	Upgrade_Weapon_Rifling_02 = 1740,
	Upgrade_Weapon_Rifling_03 = 1741,
	Upgrade_Weapon_RubberDucky = 1742,
	Upgrade_Weapon_ShortSighted_01 = 1743,
	Upgrade_Weapon_ShortSighted_02 = 1744,
	Upgrade_Weapon_ShortSighted_03 = 1745,
	Upgrade_Weapon_SprayAndPray_01 = 1746,
	Upgrade_Weapon_SprayAndPray_02 = 1747,
	Upgrade_Weapon_SprayAndPray_03 = 1748,
	Upgrade_Weapon_SuperMag_01 = 1749,
	Upgrade_Weapon_SuperMag_02 = 1750,
	Upgrade_Weapon_SuperMag_03 = 1751,
	Upgrade_Weapon_Switch_01 = 1752,
	Upgrade_Weapon_Switch_02 = 1753,
	Upgrade_Weapon_Switch_03 = 1754,
	Upgrade_Weapon_Tagger = 1755,
	Upgrade_Weapon_TaggerValentines = 1756,
	Vehicle_BalkanRavan = 1757,
	Vehicle_BalkanSeries4Ambulance = 1758,
	Vehicle_BalkanVarzuga = 1759,
	Vehicle_BenkzMhullerM1ArmouredVan = 1760,
	Vehicle_BishadaGX8800 = 1761,
	Vehicle_BishadaGX8800_Enf = 1762,
	Vehicle_BishadaGX8800_GT = 1763,
	Vehicle_ChargeCisco = 1764,
	Vehicle_ChargeMikro = 1765,
	Vehicle_ChargeMikro_Cheetah = 1766,
	Vehicle_ChargeMikro_Raptor = 1767,
	Vehicle_ChargeSentinel = 1768,
	Vehicle_Comp_BishadaGX8800_Aerial01 = 1769,
	Vehicle_Comp_BishadaGX8800_Aerial02 = 1770,
	Vehicle_Comp_BishadaGX8800_BumperFront01 = 1771,
	Vehicle_Comp_BishadaGX8800_BumperFront02 = 1772,
	Vehicle_Comp_BishadaGX8800_BumperFront03 = 1773,
	Vehicle_Comp_BishadaGX8800_BumperFront04 = 1774,
	Vehicle_Comp_BishadaGX8800_BumperFront05 = 1775,
	Vehicle_Comp_BishadaGX8800_BumperFront06 = 1776,
	Vehicle_Comp_BishadaGX8800_BumperFront07 = 1777,
	Vehicle_Comp_BishadaGX8800_BumperFront08 = 1778,
	Vehicle_Comp_BishadaGX8800_BumperFront09 = 1779,
	Vehicle_Comp_BishadaGX8800_BumperRear01 = 1780,
	Vehicle_Comp_BishadaGX8800_BumperRear02 = 1781,
	Vehicle_Comp_BishadaGX8800_BumperRear03 = 1782,
	Vehicle_Comp_BishadaGX8800_BumperRear04 = 1783,
	Vehicle_Comp_BishadaGX8800_BumperRear05 = 1784,
	Vehicle_Comp_BishadaGX8800_BumperRear06 = 1785,
	Vehicle_Comp_BishadaGX8800_BumperRear07 = 1786,
	Vehicle_Comp_BishadaGX8800_BumperRear08 = 1787,
	Vehicle_Comp_BishadaGX8800_BumperRear09 = 1788,
	Vehicle_Comp_BishadaGX8800_BumperRear10 = 1789,
	Vehicle_Comp_BishadaGX8800_Doors01 = 1790,
	Vehicle_Comp_BishadaGX8800_Doors02 = 1791,
	Vehicle_Comp_BishadaGX8800_Doors03 = 1792,
	Vehicle_Comp_BishadaGX8800_Doors04 = 1793,
	Vehicle_Comp_BishadaGX8800_Doors05 = 1794,
	Vehicle_Comp_BishadaGX8800_Headlights01 = 1795,
	Vehicle_Comp_BishadaGX8800_Headlights02 = 1796,
	Vehicle_Comp_BishadaGX8800_Headlights03 = 1797,
	Vehicle_Comp_BishadaGX8800_Headlights04 = 1798,
	Vehicle_Comp_BishadaGX8800_Headlights05 = 1799,
	Vehicle_Comp_BishadaGX8800_Headlights06 = 1800,
	Vehicle_Comp_BishadaGX8800_Hood01 = 1801,
	Vehicle_Comp_BishadaGX8800_Hood02 = 1802,
	Vehicle_Comp_BishadaGX8800_Hood03 = 1803,
	Vehicle_Comp_BishadaGX8800_Hood04 = 1804,
	Vehicle_Comp_BishadaGX8800_Hood05 = 1805,
	Vehicle_Comp_BishadaGX8800_Hood06 = 1806,
	Vehicle_Comp_BishadaGX8800_InteriorProps01 = 1807,
	Vehicle_Comp_BishadaGX8800_InteriorProps02 = 1808,
	Vehicle_Comp_BishadaGX8800_Roof01 = 1809,
	Vehicle_Comp_BishadaGX8800_Roof02 = 1810,
	Vehicle_Comp_BishadaGX8800_Roof03 = 1811,
	Vehicle_Comp_BishadaGX8800_Roof04 = 1812,
	Vehicle_Comp_BishadaGX8800_Roof05 = 1813,
	Vehicle_Comp_BishadaGX8800_Roof06 = 1814,
	Vehicle_Comp_BishadaGX8800_Roof07 = 1815,
	Vehicle_Comp_BishadaGX8800_SeatsFront01 = 1816,
	Vehicle_Comp_BishadaGX8800_SeatsFront02 = 1817,
	Vehicle_Comp_BishadaGX8800_SeatsFront03 = 1818,
	Vehicle_Comp_BishadaGX8800_SeatsFront04 = 1819,
	Vehicle_Comp_BishadaGX8800_SeatsFront05 = 1820,
	Vehicle_Comp_BishadaGX8800_SeatsFront06 = 1821,
	Vehicle_Comp_BishadaGX8800_SideSkirt01 = 1822,
	Vehicle_Comp_BishadaGX8800_SideSkirt02 = 1823,
	Vehicle_Comp_BishadaGX8800_SideSkirt03 = 1824,
	Vehicle_Comp_BishadaGX8800_SideSkirt04 = 1825,
	Vehicle_Comp_BishadaGX8800_SideSkirt05 = 1826,
	Vehicle_Comp_BishadaGX8800_SideSkirt06 = 1827,
	Vehicle_Comp_BishadaGX8800_Spoiler01 = 1828,
	Vehicle_Comp_BishadaGX8800_Spoiler02 = 1829,
	Vehicle_Comp_BishadaGX8800_Spoiler03 = 1830,
	Vehicle_Comp_BishadaGX8800_Spoiler04 = 1831,
	Vehicle_Comp_BishadaGX8800_Spoiler05 = 1832,
	Vehicle_Comp_BishadaGX8800_Spoiler06 = 1833,
	Vehicle_Comp_BishadaGX8800_Spoiler07 = 1834,
	Vehicle_Comp_BishadaGX8800_Spoiler08 = 1835,
	Vehicle_Comp_BishadaGX8800_Spoiler09 = 1836,
	Vehicle_Comp_BishadaGX8800_SteeringWheel01 = 1837,
	Vehicle_Comp_BishadaGX8800_SteeringWheel02 = 1838,
	Vehicle_Comp_BishadaGX8800_SteeringWheel03 = 1839,
	Vehicle_Comp_BishadaGX8800_SteeringWheel04 = 1840,
	Vehicle_Comp_BishadaGX8800_SteeringWheel05 = 1841,
	Vehicle_Comp_BishadaGX8800_SteeringWheel06 = 1842,
	Vehicle_Comp_BishadaGX8800_Taillights01 = 1843,
	Vehicle_Comp_BishadaGX8800_Taillights02 = 1844,
	Vehicle_Comp_BishadaGX8800_Taillights03 = 1845,
	Vehicle_Comp_BishadaGX8800_Taillights04 = 1846,
	Vehicle_Comp_BishadaGX8800_Taillights05 = 1847,
	Vehicle_Comp_BishadaGX8800_Taillights06 = 1848,
	Vehicle_Comp_BishadaGX8800_Wheel01 = 1849,
	Vehicle_Comp_BishadaGX8800_Wheel02 = 1850,
	Vehicle_Comp_BishadaGX8800_Wheel03 = 1851,
	Vehicle_Comp_BishadaGX8800_Wheel04 = 1852,
	Vehicle_Comp_BishadaGX8800_Wheel05 = 1853,
	Vehicle_Comp_BishadaGX8800_Wheel06 = 1854,
	Vehicle_Comp_BishadaGX8800_WingMirror01 = 1855,
	Vehicle_Comp_BishadaGX8800_WingMirror02 = 1856,
	Vehicle_Comp_BishadaGX8800_WingMirror03 = 1857,
	Vehicle_Comp_BishadaGX8800_WingMirror04 = 1858,
	Vehicle_Comp_BishadaGX8800_WingMirror05 = 1859,
	Vehicle_Comp_BishadaGX8800_WingMirror06 = 1860,
	Vehicle_Comp_ChargeCisco_BumperFront01 = 1861,
	Vehicle_Comp_ChargeCisco_BumperFront02 = 1862,
	Vehicle_Comp_ChargeCisco_BumperFront03 = 1863,
	Vehicle_Comp_ChargeCisco_BumperFront04 = 1864,
	Vehicle_Comp_ChargeCisco_BumperRear01 = 1865,
	Vehicle_Comp_ChargeCisco_BumperRear02 = 1866,
	Vehicle_Comp_ChargeCisco_BumperRear03 = 1867,
	Vehicle_Comp_ChargeCisco_BumperRear04 = 1868,
	Vehicle_Comp_ChargeCisco_HeadLights01 = 1869,
	Vehicle_Comp_ChargeCisco_HeadLights02 = 1870,
	Vehicle_Comp_ChargeCisco_HeadLights03 = 1871,
	Vehicle_Comp_ChargeCisco_HeadLights04 = 1872,
	Vehicle_Comp_ChargeCisco_Hood01 = 1873,
	Vehicle_Comp_ChargeCisco_Hood02 = 1874,
	Vehicle_Comp_ChargeCisco_Hood03 = 1875,
	Vehicle_Comp_ChargeCisco_Hood04 = 1876,
	Vehicle_Comp_ChargeCisco_Roof01 = 1877,
	Vehicle_Comp_ChargeCisco_Roof02 = 1878,
	Vehicle_Comp_ChargeCisco_Roof03 = 1879,
	Vehicle_Comp_ChargeCisco_Roof04 = 1880,
	Vehicle_Comp_ChargeCisco_SideSkirt02 = 1881,
	Vehicle_Comp_ChargeCisco_SideSkirt03 = 1882,
	Vehicle_Comp_ChargeCisco_SideSkirt04 = 1883,
	Vehicle_Comp_ChargeCisco_SideSkirts01 = 1884,
	Vehicle_Comp_ChargeCisco_Spoiler01 = 1885,
	Vehicle_Comp_ChargeCisco_Spoiler02 = 1886,
	Vehicle_Comp_ChargeCisco_Spoiler03 = 1887,
	Vehicle_Comp_ChargeCisco_Spoiler04 = 1888,
	Vehicle_Comp_ChargeCisco_TailLights01 = 1889,
	Vehicle_Comp_ChargeCisco_TailLights02 = 1890,
	Vehicle_Comp_ChargeCisco_TailLights03 = 1891,
	Vehicle_Comp_ChargeCisco_TailLights04 = 1892,
	Vehicle_Comp_ChargeCisco_Wheel01 = 1893,
	Vehicle_Comp_ChargeCisco_Wheel02 = 1894,
	Vehicle_Comp_ChargeCisco_Wheel03 = 1895,
	Vehicle_Comp_ChargeCisco_Wheel04 = 1896,
	Vehicle_Comp_ChargeCisco_WingMirror01 = 1897,
	Vehicle_Comp_ChargeCisco_WingMirror02 = 1898,
	Vehicle_Comp_ChargeCisco_WingMirror03 = 1899,
	Vehicle_Comp_ChargeCisco_WingMirror04 = 1900,
	Vehicle_Comp_ChargeMikro_BumperFront01 = 1901,
	Vehicle_Comp_ChargeMikro_BumperFront02 = 1902,
	Vehicle_Comp_ChargeMikro_BumperFront03 = 1903,
	Vehicle_Comp_ChargeMikro_BumperFront04 = 1904,
	Vehicle_Comp_ChargeMikro_BumperFront05 = 1905,
	Vehicle_Comp_ChargeMikro_BumperRear01 = 1906,
	Vehicle_Comp_ChargeMikro_BumperRear02 = 1907,
	Vehicle_Comp_ChargeMikro_BumperRear03 = 1908,
	Vehicle_Comp_ChargeMikro_BumperRear04 = 1909,
	Vehicle_Comp_ChargeMikro_BumperRear05 = 1910,
	Vehicle_Comp_ChargeMikro_Doors01 = 1911,
	Vehicle_Comp_ChargeMikro_Doors02 = 1912,
	Vehicle_Comp_ChargeMikro_Doors03 = 1913,
	Vehicle_Comp_ChargeMikro_Foglights01 = 1914,
	Vehicle_Comp_ChargeMikro_Foglights02 = 1915,
	Vehicle_Comp_ChargeMikro_HeadLights01 = 1916,
	Vehicle_Comp_ChargeMikro_HeadLights02 = 1917,
	Vehicle_Comp_ChargeMikro_HeadLights03 = 1918,
	Vehicle_Comp_ChargeMikro_HeadLights04 = 1919,
	Vehicle_Comp_ChargeMikro_HeadLights05 = 1920,
	Vehicle_Comp_ChargeMikro_Hood01 = 1921,
	Vehicle_Comp_ChargeMikro_Hood02 = 1922,
	Vehicle_Comp_ChargeMikro_Hood03 = 1923,
	Vehicle_Comp_ChargeMikro_Hood04 = 1924,
	Vehicle_Comp_ChargeMikro_Hood05 = 1925,
	Vehicle_Comp_ChargeMikro_Rollcage01 = 1926,
	Vehicle_Comp_ChargeMikro_Roof01 = 1927,
	Vehicle_Comp_ChargeMikro_Roof02 = 1928,
	Vehicle_Comp_ChargeMikro_Roof03 = 1929,
	Vehicle_Comp_ChargeMikro_Roof04 = 1930,
	Vehicle_Comp_ChargeMikro_Roof05 = 1931,
	Vehicle_Comp_ChargeMikro_Seats01 = 1932,
	Vehicle_Comp_ChargeMikro_Seats02 = 1933,
	Vehicle_Comp_ChargeMikro_Seats03 = 1934,
	Vehicle_Comp_ChargeMikro_Seats04 = 1935,
	Vehicle_Comp_ChargeMikro_Seats05 = 1936,
	Vehicle_Comp_ChargeMikro_SideSkirts01 = 1937,
	Vehicle_Comp_ChargeMikro_SideSkirts02 = 1938,
	Vehicle_Comp_ChargeMikro_SideSkirts03 = 1939,
	Vehicle_Comp_ChargeMikro_SideSkirts04 = 1940,
	Vehicle_Comp_ChargeMikro_SideSkirts05 = 1941,
	Vehicle_Comp_ChargeMikro_Spoiler01 = 1942,
	Vehicle_Comp_ChargeMikro_Spoiler02 = 1943,
	Vehicle_Comp_ChargeMikro_Spoiler03 = 1944,
	Vehicle_Comp_ChargeMikro_Spoiler04 = 1945,
	Vehicle_Comp_ChargeMikro_SteeringWheel01 = 1946,
	Vehicle_Comp_ChargeMikro_SteeringWheel02 = 1947,
	Vehicle_Comp_ChargeMikro_SteeringWheel03 = 1948,
	Vehicle_Comp_ChargeMikro_SteeringWheel04 = 1949,
	Vehicle_Comp_ChargeMikro_SteeringWheel05 = 1950,
	Vehicle_Comp_ChargeMikro_TailGate01 = 1951,
	Vehicle_Comp_ChargeMikro_TailGate02 = 1952,
	Vehicle_Comp_ChargeMikro_TailGate03 = 1953,
	Vehicle_Comp_ChargeMikro_Taillights01 = 1954,
	Vehicle_Comp_ChargeMikro_Taillights02 = 1955,
	Vehicle_Comp_ChargeMikro_Taillights03 = 1956,
	Vehicle_Comp_ChargeMikro_Taillights04 = 1957,
	Vehicle_Comp_ChargeMikro_Taillights05 = 1958,
	Vehicle_Comp_ChargeMikro_Wheel01 = 1959,
	Vehicle_Comp_ChargeMikro_Wheel02 = 1960,
	Vehicle_Comp_ChargeMikro_Wheel03 = 1961,
	Vehicle_Comp_ChargeMikro_Wheel04 = 1962,
	Vehicle_Comp_ChargeMikro_Wheel05 = 1963,
	Vehicle_Comp_ChargeMikro_WingMirror01 = 1964,
	Vehicle_Comp_ChargeMikro_WingMirror02 = 1965,
	Vehicle_Comp_ChargeMikro_WingMirror03 = 1966,
	Vehicle_Comp_ChargeMikro_WingMirror04 = 1967,
	Vehicle_Comp_ChargeMikro_WingMirror05 = 1968,
	Vehicle_Comp_ChargeMikro_WingPanelRear01 = 1969,
	Vehicle_Comp_ChargeMikro_WingPanelRear02 = 1970,
	Vehicle_Comp_ChargeMikro_WingPanelRear03 = 1971,
	Vehicle_Comp_ChargeSentinel_BullBars01 = 1972,
	Vehicle_Comp_ChargeSentinel_BullBars02 = 1973,
	Vehicle_Comp_ChargeSentinel_RoofRack01 = 1974,
	Vehicle_Comp_ChargeSentinel_SideSkirts01 = 1975,
	Vehicle_Comp_ChargeSentinel_SideSkirts02 = 1976,
	Vehicle_Comp_ChargeSentinel_SideSkirts03 = 1977,
	Vehicle_Comp_DoltonBroadwing_Aerial01 = 1978,
	Vehicle_Comp_DoltonBroadwing_Aerial02 = 1979,
	Vehicle_Comp_DoltonBroadwing_Aerial03 = 1980,
	Vehicle_Comp_DoltonBroadwing_Aerial04 = 1981,
	Vehicle_Comp_DoltonBroadwing_Aerial05 = 1982,
	Vehicle_Comp_DoltonBroadwing_Aerial06 = 1983,
	Vehicle_Comp_DoltonBroadwing_BullBar01 = 1984,
	Vehicle_Comp_DoltonBroadwing_BullBar02 = 1985,
	Vehicle_Comp_DoltonBroadwing_RoofLight01 = 1986,
	Vehicle_Comp_DoltonBroadwing_RoofLight02 = 1987,
	Vehicle_Comp_DoltonBroadwing_Spoiler01 = 1988,
	Vehicle_Comp_DoltonBroadwing_Spolier02 = 1989,
	Vehicle_Comp_DoltonBroadwing_Spolier03 = 1990,
	Vehicle_Comp_DoltonBroadwing_Wheel01 = 1991,
	Vehicle_Comp_DoltonBroadwing_Wheel02 = 1992,
	Vehicle_Comp_DoltonBroadwing_Wheel03 = 1993,
	Vehicle_Comp_DoltonFresno_BumperFront01 = 1994,
	Vehicle_Comp_DoltonFresno_BumperFront02 = 1995,
	Vehicle_Comp_DoltonFresno_BumperRear01 = 1996,
	Vehicle_Comp_DoltonFresno_BumperRear02 = 1997,
	Vehicle_Comp_DoltonFresno_Hood01 = 1998,
	Vehicle_Comp_DoltonFresno_Hood02 = 1999,
	Vehicle_Comp_DoltonFresno_SideSkirts01 = 2000,
	Vehicle_Comp_DoltonFresno_SideSkirts02 = 2001,
	Vehicle_Comp_DoltonFresno_Spoiler01 = 2002,
	Vehicle_Comp_DoltonFresno_Spoiler02 = 2003,
	Vehicle_Comp_DoltonFresno_Wheel01 = 2004,
	Vehicle_Comp_DoltonFresno_Wheel02 = 2005,
	Vehicle_Comp_DoltonFresno_Wheel03 = 2006,
	Vehicle_Comp_DoltonMontane_BullBar01 = 2007,
	Vehicle_Comp_DoltonMontane_BullBar02 = 2008,
	Vehicle_Comp_DoltonMontane_BullBarRear = 2009,
	Vehicle_Comp_DoltonMontane_RollCage01 = 2010,
	Vehicle_Comp_DoltonMontane_RollCage02 = 2011,
	Vehicle_Comp_DoltonMontane_SideSkirts01 = 2012,
	Vehicle_Comp_DoltonMontane_SideSkirts02 = 2013,
	Vehicle_Comp_DoltonMontane_SideSkirts03 = 2014,
	Vehicle_Comp_DoltonMontane_SpotLamp02 = 2015,
	Vehicle_Comp_DoltonMontane_SpotLamps01 = 2016,
	Vehicle_Comp_HanVeo_Aerial01 = 2017,
	Vehicle_Comp_HanVeo_BullBars01 = 2018,
	Vehicle_Comp_HanVeo_BumperFront01 = 2019,
	Vehicle_Comp_HanVeo_BumperFront02 = 2020,
	Vehicle_Comp_HanVeo_BumperRear01 = 2021,
	Vehicle_Comp_HanVeo_BumperRear02 = 2022,
	Vehicle_Comp_HanVeo_Doors01 = 2023,
	Vehicle_Comp_HanVeo_Doors02 = 2024,
	Vehicle_Comp_HanVeo_FrontSeats01 = 2025,
	Vehicle_Comp_HanVeo_FrontSeats02 = 2026,
	Vehicle_Comp_HanVeo_Hood01 = 2027,
	Vehicle_Comp_HanVeo_Hood02 = 2028,
	Vehicle_Comp_HanVeo_Roof01 = 2029,
	Vehicle_Comp_HanVeo_Roof02 = 2030,
	Vehicle_Comp_HanVeo_Sideskirts01 = 2031,
	Vehicle_Comp_HanVeo_Sideskirts02 = 2032,
	Vehicle_Comp_HanVeo_Spoiler01 = 2033,
	Vehicle_Comp_HanVeo_Spoiler02 = 2034,
	Vehicle_Comp_HanVeo_SteeringWheel01 = 2035,
	Vehicle_Comp_HanVeo_SteeringWheel02 = 2036,
	Vehicle_Comp_HanVeo_Taillights01 = 2037,
	Vehicle_Comp_HanVeo_Taillights02 = 2038,
	Vehicle_Comp_HanVeo_Wheel01 = 2039,
	Vehicle_Comp_HanVeo_WingMirrors01 = 2040,
	Vehicle_Comp_HanVeo_WingMirrors02 = 2041,
	Vehicle_Comp_IOGrowl_BumperFront01 = 2042,
	Vehicle_Comp_IOGrowl_BumperFront02 = 2043,
	Vehicle_Comp_IOGrowl_BumperFront03 = 2044,
	Vehicle_Comp_IOGrowl_BumperRear01 = 2045,
	Vehicle_Comp_IOGrowl_BumperRear02 = 2046,
	Vehicle_Comp_IOGrowl_BumperRear03 = 2047,
	Vehicle_Comp_IOGrowl_Doors01 = 2048,
	Vehicle_Comp_IOGrowl_Doors02 = 2049,
	Vehicle_Comp_IOGrowl_Doors03 = 2050,
	Vehicle_Comp_IOGrowl_Headlights01 = 2051,
	Vehicle_Comp_IOGrowl_Headlights02 = 2052,
	Vehicle_Comp_IOGrowl_Headlights03 = 2053,
	Vehicle_Comp_IOGrowl_Hood01 = 2054,
	Vehicle_Comp_IOGrowl_Hood02 = 2055,
	Vehicle_Comp_IOGrowl_Hood03 = 2056,
	Vehicle_Comp_IOGrowl_HoodProp01 = 2057,
	Vehicle_Comp_IOGrowl_PoliceLightsSecondary01 = 2058,
	Vehicle_Comp_IOGrowl_PoliceLightsSecondary02 = 2059,
	Vehicle_Comp_IOGrowl_PoliceLightsSecondary03 = 2060,
	Vehicle_Comp_IOGrowl_PoliceLightsSecondary04 = 2061,
	Vehicle_Comp_IOGrowl_Roof01 = 2062,
	Vehicle_Comp_IOGrowl_Roof02 = 2063,
	Vehicle_Comp_IOGrowl_Roof03 = 2064,
	Vehicle_Comp_IOGrowl_SeatsFront01 = 2065,
	Vehicle_Comp_IOGrowl_Sideskirts01 = 2066,
	Vehicle_Comp_IOGrowl_Sideskirts02 = 2067,
	Vehicle_Comp_IOGrowl_Sideskirts03 = 2068,
	Vehicle_Comp_IOGrowl_Spoiler01 = 2069,
	Vehicle_Comp_IOGrowl_Spoiler02 = 2070,
	Vehicle_Comp_IOGrowl_Spoiler03 = 2071,
	Vehicle_Comp_IOGrowl_SteeringWheel01 = 2072,
	Vehicle_Comp_IOGrowl_Taillights01 = 2073,
	Vehicle_Comp_IOGrowl_Taillights02 = 2074,
	Vehicle_Comp_IOGrowl_Taillights03 = 2075,
	Vehicle_Comp_IOGrowl_Wheels01 = 2076,
	Vehicle_Comp_IOGrowl_Wheels02 = 2077,
	Vehicle_Comp_IOGrowl_Wheels03 = 2078,
	Vehicle_Comp_IOGrowl_WingMirrors01 = 2079,
	Vehicle_Comp_IOGrowl_WingMirrors02 = 2080,
	Vehicle_Comp_IOGrowl_WingMirrors03 = 2081,
	Vehicle_Comp_IOGrowl_WingPanels01 = 2082,
	Vehicle_Comp_IOGrowl_WingPanels02 = 2083,
	Vehicle_Comp_IOGrowl_WingPanels03 = 2084,
	Vehicle_Comp_IOGrowl_WingPanelsRear01 = 2085,
	Vehicle_Comp_IOGrowl_WingPanelsRear02 = 2086,
	Vehicle_Comp_IOGrowl_WingPanelsRear03 = 2087,
	Vehicle_Comp_NomadOutlandKurai_BumperFront01 = 2088,
	Vehicle_Comp_NomadOutlandKurai_BumperFront02 = 2089,
	Vehicle_Comp_NomadOutlandKurai_BumperFront03 = 2090,
	Vehicle_Comp_NomadOutlandKurai_BumperRear01 = 2091,
	Vehicle_Comp_NomadOutlandKurai_BumperRear02 = 2092,
	Vehicle_Comp_NomadOutlandKurai_BumperRear03 = 2093,
	Vehicle_Comp_NomadOutlandKurai_Hood01 = 2094,
	Vehicle_Comp_NomadOutlandKurai_Hood02 = 2095,
	Vehicle_Comp_NomadOutlandKurai_Hood03 = 2096,
	Vehicle_Comp_NomadOutlandKurai_SideSkirt01 = 2097,
	Vehicle_Comp_NomadOutlandKurai_SideSkirt02 = 2098,
	Vehicle_Comp_NomadOutlandKurai_SideSkirt03 = 2099,
	Vehicle_Comp_NomadOutlandKurai_Spoiler01 = 2100,
	Vehicle_Comp_NomadOutlandKurai_Spoiler02 = 2101,
	Vehicle_Comp_NomadOutlandKurai_Spoiler03 = 2102,
	Vehicle_Comp_NomadOutlandKurai_Taillights01 = 2103,
	Vehicle_Comp_NomadOutlandKurai_Taillights02 = 2104,
	Vehicle_Comp_NomadOutlandKurai_Wheel01 = 2105,
	Vehicle_Comp_NomadOutlandKurai_Wheel02 = 2106,
	Vehicle_Comp_NomadOutlandKurai_Wheel03 = 2107,
	Vehicle_Comp_NomadOutlandKurai_Wheel04 = 2108,
	Vehicle_Comp_NomadOutlandPioneer_BullBars01 = 2109,
	Vehicle_Comp_NomadOutlandPioneer_BullBars02 = 2110,
	Vehicle_Comp_NomadOutlandPioneer_BullBars03 = 2111,
	Vehicle_Comp_NomadOutlandPioneer_BullBars04 = 2112,
	Vehicle_Comp_NomadOutlandPioneer_BullBars05 = 2113,
	Vehicle_Comp_NomadOutlandPioneer_BumperFront01 = 2114,
	Vehicle_Comp_NomadOutlandPioneer_BumperFront02 = 2115,
	Vehicle_Comp_NomadOutlandPioneer_BumperFront03 = 2116,
	Vehicle_Comp_NomadOutlandPioneer_BumperFront04 = 2117,
	Vehicle_Comp_NomadOutlandPioneer_BumperFront05 = 2118,
	Vehicle_Comp_NomadOutlandPioneer_BumperFront06 = 2119,
	Vehicle_Comp_NomadOutlandPioneer_BumperRear01 = 2120,
	Vehicle_Comp_NomadOutlandPioneer_BumperRear02 = 2121,
	Vehicle_Comp_NomadOutlandPioneer_BumperRear03 = 2122,
	Vehicle_Comp_NomadOutlandPioneer_BumperRear04 = 2123,
	Vehicle_Comp_NomadOutlandPioneer_BumperRear05 = 2124,
	Vehicle_Comp_NomadOutlandPioneer_BumperRear06 = 2125,
	Vehicle_Comp_NomadOutlandPioneer_Doors01 = 2126,
	Vehicle_Comp_NomadOutlandPioneer_Doors02 = 2127,
	Vehicle_Comp_NomadOutlandPioneer_Doors03 = 2128,
	Vehicle_Comp_NomadOutlandPioneer_Doors04 = 2129,
	Vehicle_Comp_NomadOutlandPioneer_FogLights01 = 2130,
	Vehicle_Comp_NomadOutlandPioneer_FogLights02 = 2131,
	Vehicle_Comp_NomadOutlandPioneer_FogLights03 = 2132,
	Vehicle_Comp_NomadOutlandPioneer_Grill01 = 2133,
	Vehicle_Comp_NomadOutlandPioneer_Grill02 = 2134,
	Vehicle_Comp_NomadOutlandPioneer_Grill03 = 2135,
	Vehicle_Comp_NomadOutlandPioneer_Grill04 = 2136,
	Vehicle_Comp_NomadOutlandPioneer_Grill05 = 2137,
	Vehicle_Comp_NomadOutlandPioneer_HeadLights01 = 2138,
	Vehicle_Comp_NomadOutlandPioneer_HeadLights02 = 2139,
	Vehicle_Comp_NomadOutlandPioneer_HeadLights03 = 2140,
	Vehicle_Comp_NomadOutlandPioneer_HeadLights04 = 2141,
	Vehicle_Comp_NomadOutlandPioneer_HeadLights05 = 2142,
	Vehicle_Comp_NomadOutlandPioneer_Hood01 = 2143,
	Vehicle_Comp_NomadOutlandPioneer_Hood02 = 2144,
	Vehicle_Comp_NomadOutlandPioneer_Hood03 = 2145,
	Vehicle_Comp_NomadOutlandPioneer_Hood04 = 2146,
	Vehicle_Comp_NomadOutlandPioneer_Hood05 = 2147,
	Vehicle_Comp_NomadOutlandPioneer_Hood06 = 2148,
	Vehicle_Comp_NomadOutlandPioneer_Roof01 = 2149,
	Vehicle_Comp_NomadOutlandPioneer_Roof02 = 2150,
	Vehicle_Comp_NomadOutlandPioneer_Roof03 = 2151,
	Vehicle_Comp_NomadOutlandPioneer_Roof04 = 2152,
	Vehicle_Comp_NomadOutlandPioneer_Roof05 = 2153,
	Vehicle_Comp_NomadOutlandPioneer_Roof06 = 2154,
	Vehicle_Comp_NomadOutlandPioneer_Roof07 = 2155,
	Vehicle_Comp_NomadOutlandPioneer_Roof08 = 2156,
	Vehicle_Comp_NomadOutlandPioneer_RoofLight01 = 2157,
	Vehicle_Comp_NomadOutlandPioneer_RoofLight02 = 2158,
	Vehicle_Comp_NomadOutlandPioneer_RoofLight03 = 2159,
	Vehicle_Comp_NomadOutlandPioneer_Roofrack01 = 2160,
	Vehicle_Comp_NomadOutlandPioneer_Roofrack02 = 2161,
	Vehicle_Comp_NomadOutlandPioneer_Roofrack03 = 2162,
	Vehicle_Comp_NomadOutlandPioneer_Roofrack04 = 2163,
	Vehicle_Comp_NomadOutlandPioneer_Roofrack05 = 2164,
	Vehicle_Comp_NomadOutlandPioneer_Roofrack06 = 2165,
	Vehicle_Comp_NomadOutlandPioneer_Roofrack07 = 2166,
	Vehicle_Comp_NomadOutlandPioneer_SeatsFront01 = 2167,
	Vehicle_Comp_NomadOutlandPioneer_SeatsFront02 = 2168,
	Vehicle_Comp_NomadOutlandPioneer_SeatsFront03 = 2169,
	Vehicle_Comp_NomadOutlandPioneer_SeatsFront04 = 2170,
	Vehicle_Comp_NomadOutlandPioneer_SideSkirts01 = 2171,
	Vehicle_Comp_NomadOutlandPioneer_SideSkirts02 = 2172,
	Vehicle_Comp_NomadOutlandPioneer_SideSkirts03 = 2173,
	Vehicle_Comp_NomadOutlandPioneer_SideSkirts04 = 2174,
	Vehicle_Comp_NomadOutlandPioneer_SideSkirts05 = 2175,
	Vehicle_Comp_NomadOutlandPioneer_SideSkirts06 = 2176,
	Vehicle_Comp_NomadOutlandPioneer_Spoiler01 = 2177,
	Vehicle_Comp_NomadOutlandPioneer_Spoiler02 = 2178,
	Vehicle_Comp_NomadOutlandPioneer_Spoiler03 = 2179,
	Vehicle_Comp_NomadOutlandPioneer_Spoiler04 = 2180,
	Vehicle_Comp_NomadOutlandPioneer_Spoiler05 = 2181,
	Vehicle_Comp_NomadOutlandPioneer_Spoiler06 = 2182,
	Vehicle_Comp_NomadOutlandPioneer_SpoilerLadder01 = 2183,
	Vehicle_Comp_NomadOutlandPioneer_SpoilerProp01 = 2184,
	Vehicle_Comp_NomadOutlandPioneer_SpoilerProp02 = 2185,
	Vehicle_Comp_NomadOutlandPioneer_SteeringWheel01 = 2186,
	Vehicle_Comp_NomadOutlandPioneer_SteeringWheel02 = 2187,
	Vehicle_Comp_NomadOutlandPioneer_SteeringWheel03 = 2188,
	Vehicle_Comp_NomadOutlandPioneer_SteeringWheel04 = 2189,
	Vehicle_Comp_NomadOutlandPioneer_TailLights01 = 2190,
	Vehicle_Comp_NomadOutlandPioneer_TailLights02 = 2191,
	Vehicle_Comp_NomadOutlandPioneer_TailLights03 = 2192,
	Vehicle_Comp_NomadOutlandPioneer_TailLights04 = 2193,
	Vehicle_Comp_NomadOutlandPioneer_TailLights05 = 2194,
	Vehicle_Comp_NomadOutlandPioneer_Wheel01 = 2195,
	Vehicle_Comp_NomadOutlandPioneer_Wheel02 = 2196,
	Vehicle_Comp_NomadOutlandPioneer_Wheel03 = 2197,
	Vehicle_Comp_NomadOutlandPioneer_Wheel04 = 2198,
	Vehicle_Comp_NomadOutlandPioneer_Wheel05 = 2199,
	Vehicle_Comp_NomadOutlandPioneer_WingMirrors01 = 2200,
	Vehicle_Comp_NomadOutlandPioneer_WingMirrors02 = 2201,
	Vehicle_Comp_NomadOutlandPioneer_WingMirrors03 = 2202,
	Vehicle_Comp_NomadOutlandPioneer_WingMirrors04 = 2203,
	Vehicle_Comp_NomadOutlandPioneer_WingMirrors05 = 2204,
	Vehicle_Comp_NomadOutlandPioneer_WingMirrors06 = 2205,
	Vehicle_Comp_PackerCeresco_BullBars01 = 2206,
	Vehicle_Comp_PackerCeresco_BullBars02 = 2207,
	Vehicle_Comp_PackerCeresco_BumperFront01 = 2208,
	Vehicle_Comp_PackerCeresco_BumperFront02 = 2209,
	Vehicle_Comp_PackerCeresco_SideSkirts01 = 2210,
	Vehicle_Comp_PackerCeresco_SideSkirts02 = 2211,
	Vehicle_Comp_PackerCeresco_SideSkirts03 = 2212,
	Vehicle_Comp_PackerCeresco_Spoiler01 = 2213,
	Vehicle_Comp_PackerCeresco_Spotlights01 = 2214,
	Vehicle_Comp_PackerCeresco_Spotlights02 = 2215,
	Vehicle_Comp_PackerCeresco_Visor01 = 2216,
	Vehicle_Comp_PackerCeresco_Wheel01 = 2217,
	Vehicle_Comp_PackerCeresco_Wheel02 = 2218,
	Vehicle_Comp_PackerCeresco_Wheel03 = 2219,
	Vehicle_Comp_PackerVaquero_BullBars01 = 2220,
	Vehicle_Comp_PackerVaquero_BullBars02 = 2221,
	Vehicle_Comp_PackerVaquero_BullBars03 = 2222,
	Vehicle_Comp_PackerVaquero_BullBars04 = 2223,
	Vehicle_Comp_PackerVaquero_BullBars05 = 2224,
	Vehicle_Comp_PackerVaquero_BumperFront01 = 2225,
	Vehicle_Comp_PackerVaquero_BumperFront02 = 2226,
	Vehicle_Comp_PackerVaquero_BumperFront03 = 2227,
	Vehicle_Comp_PackerVaquero_BumperFront04 = 2228,
	Vehicle_Comp_PackerVaquero_BumperFront05 = 2229,
	Vehicle_Comp_PackerVaquero_BumperRear01 = 2230,
	Vehicle_Comp_PackerVaquero_BumperRear02 = 2231,
	Vehicle_Comp_PackerVaquero_BumperRear03 = 2232,
	Vehicle_Comp_PackerVaquero_BumperRear04 = 2233,
	Vehicle_Comp_PackerVaquero_BumperRear05 = 2234,
	Vehicle_Comp_PackerVaquero_Door01 = 2235,
	Vehicle_Comp_PackerVaquero_Door02 = 2236,
	Vehicle_Comp_PackerVaquero_Door03 = 2237,
	Vehicle_Comp_PackerVaquero_FogLights01 = 2238,
	Vehicle_Comp_PackerVaquero_FogLights02 = 2239,
	Vehicle_Comp_PackerVaquero_FogLights03 = 2240,
	Vehicle_Comp_PackerVaquero_Grill01 = 2241,
	Vehicle_Comp_PackerVaquero_Grill02 = 2242,
	Vehicle_Comp_PackerVaquero_Grill03 = 2243,
	Vehicle_Comp_PackerVaquero_Grill04 = 2244,
	Vehicle_Comp_PackerVaquero_Grill05 = 2245,
	Vehicle_Comp_PackerVaquero_HeadLights01 = 2246,
	Vehicle_Comp_PackerVaquero_HeadLights02 = 2247,
	Vehicle_Comp_PackerVaquero_HeadLights03 = 2248,
	Vehicle_Comp_PackerVaquero_HeadLights04 = 2249,
	Vehicle_Comp_PackerVaquero_HeadLights05 = 2250,
	Vehicle_Comp_PackerVaquero_Hood01 = 2251,
	Vehicle_Comp_PackerVaquero_Hood02 = 2252,
	Vehicle_Comp_PackerVaquero_Hood03 = 2253,
	Vehicle_Comp_PackerVaquero_Hood04 = 2254,
	Vehicle_Comp_PackerVaquero_Hood05 = 2255,
	Vehicle_Comp_PackerVaquero_Roof01 = 2256,
	Vehicle_Comp_PackerVaquero_Roof02 = 2257,
	Vehicle_Comp_PackerVaquero_Roof03 = 2258,
	Vehicle_Comp_PackerVaquero_Roof04 = 2259,
	Vehicle_Comp_PackerVaquero_Roof05 = 2260,
	Vehicle_Comp_PackerVaquero_RoofProp01 = 2261,
	Vehicle_Comp_PackerVaquero_SeatsFront01 = 2262,
	Vehicle_Comp_PackerVaquero_SeatsFront02 = 2263,
	Vehicle_Comp_PackerVaquero_SeatsFront03 = 2264,
	Vehicle_Comp_PackerVaquero_SeatsFront04 = 2265,
	Vehicle_Comp_PackerVaquero_SeatsFront05 = 2266,
	Vehicle_Comp_PackerVaquero_SideSkirts01 = 2267,
	Vehicle_Comp_PackerVaquero_SideSkirts02 = 2268,
	Vehicle_Comp_PackerVaquero_SideSkirts03 = 2269,
	Vehicle_Comp_PackerVaquero_SideSkirts04 = 2270,
	Vehicle_Comp_PackerVaquero_SideSkirts05 = 2271,
	Vehicle_Comp_PackerVaquero_SpareWheel01 = 2272,
	Vehicle_Comp_PackerVaquero_SpareWheel02 = 2273,
	Vehicle_Comp_PackerVaquero_SpareWheel03 = 2274,
	Vehicle_Comp_PackerVaquero_Spoiler01 = 2275,
	Vehicle_Comp_PackerVaquero_Spoiler02 = 2276,
	Vehicle_Comp_PackerVaquero_Spoiler03 = 2277,
	Vehicle_Comp_PackerVaquero_SteeringWheel01 = 2278,
	Vehicle_Comp_PackerVaquero_SteeringWheel02 = 2279,
	Vehicle_Comp_PackerVaquero_SteeringWheel03 = 2280,
	Vehicle_Comp_PackerVaquero_SteeringWheel04 = 2281,
	Vehicle_Comp_PackerVaquero_SteeringWheel05 = 2282,
	Vehicle_Comp_PackerVaquero_TailLights01 = 2283,
	Vehicle_Comp_PackerVaquero_TailLights02 = 2284,
	Vehicle_Comp_PackerVaquero_TailLights03 = 2285,
	Vehicle_Comp_PackerVaquero_TailLights04 = 2286,
	Vehicle_Comp_PackerVaquero_TailLights05 = 2287,
	Vehicle_Comp_PackerVaquero_Wheel01 = 2288,
	Vehicle_Comp_PackerVaquero_Wheel02 = 2289,
	Vehicle_Comp_PackerVaquero_Wheel03 = 2290,
	Vehicle_Comp_PackerVaquero_Wheel04 = 2291,
	Vehicle_Comp_PackerVaquero_Wheel05 = 2292,
	Vehicle_Comp_PackerVaquero_WingMirrors01 = 2293,
	Vehicle_Comp_PackerVaquero_WingMirrors02 = 2294,
	Vehicle_Comp_PackerVaquero_WingMirrors03 = 2295,
	Vehicle_Comp_PackerVaquero_WingMirrors04 = 2296,
	Vehicle_Comp_PackerVaquero_WingMirrors05 = 2297,
	Vehicle_Comp_PackerVaquero_WingPanels01 = 2298,
	Vehicle_Comp_PackerVaquero_WingPanels02 = 2299,
	Vehicle_Comp_PackerVaquero_WingPanels03 = 2300,
	Vehicle_Comp_PackerVaquero_WingPanels04 = 2301,
	Vehicle_Comp_PackerVaquero_WingPanels05 = 2302,
	Vehicle_Comp_PackerVaquero_WingPanelsRear01 = 2303,
	Vehicle_Comp_PackerVaquero_WingPanelsRear02 = 2304,
	Vehicle_Comp_PackerVaquero_WingPanelsRear03 = 2305,
	Vehicle_Comp_PackerVaquero_WingPanelsRear04 = 2306,
	Vehicle_Comp_PackerVaquero_WingPanelsRear05 = 2307,
	Vehicle_Comp_PatriotT-25_BullBar01 = 2308,
	Vehicle_Comp_PatriotT-25_BullBar02 = 2309,
	Vehicle_Comp_PatriotT-25_RollCage01 = 2310,
	Vehicle_Comp_PatriotT-25_RollCage02 = 2311,
	Vehicle_Comp_PatriotT-25_SideSkirts01 = 2312,
	Vehicle_Comp_PatriotT-25_SideSkirts02 = 2313,
	Vehicle_Comp_PatriotT-25_SideSkirts03 = 2314,
	Vehicle_Comp_PatriotT-25_Spotlamp01 = 2315,
	Vehicle_Comp_PatriotT-25_Spotlamp02 = 2316,
	Vehicle_Comp_PatriotV20Jericho_BullBars01 = 2317,
	Vehicle_Comp_PatriotV20Jericho_BullBars02 = 2318,
	Vehicle_Comp_PatriotV20Jericho_BullBars03 = 2319,
	Vehicle_Comp_PatriotV20Jericho_BullBars04 = 2320,
	Vehicle_Comp_PatriotV20Jericho_BullBars05 = 2321,
	Vehicle_Comp_PatriotV20Jericho_BullBars06 = 2322,
	Vehicle_Comp_PatriotV20Jericho_BumperFront01 = 2323,
	Vehicle_Comp_PatriotV20Jericho_BumperFront02 = 2324,
	Vehicle_Comp_PatriotV20Jericho_BumperFront03 = 2325,
	Vehicle_Comp_PatriotV20Jericho_BumperFront04 = 2326,
	Vehicle_Comp_PatriotV20Jericho_BumperFront05 = 2327,
	Vehicle_Comp_PatriotV20Jericho_BumperFront06 = 2328,
	Vehicle_Comp_PatriotV20Jericho_BumperRear01 = 2329,
	Vehicle_Comp_PatriotV20Jericho_BumperRear02 = 2330,
	Vehicle_Comp_PatriotV20Jericho_BumperRear03 = 2331,
	Vehicle_Comp_PatriotV20Jericho_BumperRear04 = 2332,
	Vehicle_Comp_PatriotV20Jericho_BumperRear05 = 2333,
	Vehicle_Comp_PatriotV20Jericho_BumperRear06 = 2334,
	Vehicle_Comp_PatriotV20Jericho_Doors01 = 2335,
	Vehicle_Comp_PatriotV20Jericho_Doors02 = 2336,
	Vehicle_Comp_PatriotV20Jericho_Doors03 = 2337,
	Vehicle_Comp_PatriotV20Jericho_Doors04 = 2338,
	Vehicle_Comp_PatriotV20Jericho_Doors05 = 2339,
	Vehicle_Comp_PatriotV20Jericho_Doors06 = 2340,
	Vehicle_Comp_PatriotV20Jericho_FogLights01 = 2341,
	Vehicle_Comp_PatriotV20Jericho_FogLights02 = 2342,
	Vehicle_Comp_PatriotV20Jericho_FogLights03 = 2343,
	Vehicle_Comp_PatriotV20Jericho_Grill01 = 2344,
	Vehicle_Comp_PatriotV20Jericho_Grill02 = 2345,
	Vehicle_Comp_PatriotV20Jericho_Grill03 = 2346,
	Vehicle_Comp_PatriotV20Jericho_Grill04 = 2347,
	Vehicle_Comp_PatriotV20Jericho_Grill05 = 2348,
	Vehicle_Comp_PatriotV20Jericho_Grill06 = 2349,
	Vehicle_Comp_PatriotV20Jericho_HeadLights01 = 2350,
	Vehicle_Comp_PatriotV20Jericho_HeadLights02 = 2351,
	Vehicle_Comp_PatriotV20Jericho_HeadLights03 = 2352,
	Vehicle_Comp_PatriotV20Jericho_HeadLights04 = 2353,
	Vehicle_Comp_PatriotV20Jericho_HeadLights05 = 2354,
	Vehicle_Comp_PatriotV20Jericho_HeadLights06 = 2355,
	Vehicle_Comp_PatriotV20Jericho_Hood01 = 2356,
	Vehicle_Comp_PatriotV20Jericho_Hood02 = 2357,
	Vehicle_Comp_PatriotV20Jericho_Hood03 = 2358,
	Vehicle_Comp_PatriotV20Jericho_Hood04 = 2359,
	Vehicle_Comp_PatriotV20Jericho_Hood05 = 2360,
	Vehicle_Comp_PatriotV20Jericho_Hood06 = 2361,
	Vehicle_Comp_PatriotV20Jericho_Hood07 = 2362,
	Vehicle_Comp_PatriotV20Jericho_InteriorProps01 = 2363,
	Vehicle_Comp_PatriotV20Jericho_InteriorProps02 = 2364,
	Vehicle_Comp_PatriotV20Jericho_Louvers01 = 2365,
	Vehicle_Comp_PatriotV20Jericho_Louvers02 = 2366,
	Vehicle_Comp_PatriotV20Jericho_Louvers03 = 2367,
	Vehicle_Comp_PatriotV20Jericho_Louvers04 = 2368,
	Vehicle_Comp_PatriotV20Jericho_Louvers05 = 2369,
	Vehicle_Comp_PatriotV20Jericho_Louvers06 = 2370,
	Vehicle_Comp_PatriotV20Jericho_Roof01 = 2371,
	Vehicle_Comp_PatriotV20Jericho_Roof02 = 2372,
	Vehicle_Comp_PatriotV20Jericho_Roof03 = 2373,
	Vehicle_Comp_PatriotV20Jericho_Roof04 = 2374,
	Vehicle_Comp_PatriotV20Jericho_Roof05 = 2375,
	Vehicle_Comp_PatriotV20Jericho_Roof06 = 2376,
	Vehicle_Comp_PatriotV20Jericho_Roof07 = 2377,
	Vehicle_Comp_PatriotV20Jericho_Roof08 = 2378,
	Vehicle_Comp_PatriotV20Jericho_RoofLights01 = 2379,
	Vehicle_Comp_PatriotV20Jericho_SeatsFront01 = 2380,
	Vehicle_Comp_PatriotV20Jericho_SeatsFront02 = 2381,
	Vehicle_Comp_PatriotV20Jericho_SeatsFront03 = 2382,
	Vehicle_Comp_PatriotV20Jericho_SeatsFront04 = 2383,
	Vehicle_Comp_PatriotV20Jericho_SeatsFront05 = 2384,
	Vehicle_Comp_PatriotV20Jericho_SeatsFront06 = 2385,
	Vehicle_Comp_PatriotV20Jericho_SideSkirts01 = 2386,
	Vehicle_Comp_PatriotV20Jericho_SideSkirts02 = 2387,
	Vehicle_Comp_PatriotV20Jericho_SideSkirts03 = 2388,
	Vehicle_Comp_PatriotV20Jericho_SideSkirts04 = 2389,
	Vehicle_Comp_PatriotV20Jericho_SideSkirts05 = 2390,
	Vehicle_Comp_PatriotV20Jericho_SideSkirts06 = 2391,
	Vehicle_Comp_PatriotV20Jericho_Spoiler01 = 2392,
	Vehicle_Comp_PatriotV20Jericho_Spoiler02 = 2393,
	Vehicle_Comp_PatriotV20Jericho_Spoiler03 = 2394,
	Vehicle_Comp_PatriotV20Jericho_Spoiler04 = 2395,
	Vehicle_Comp_PatriotV20Jericho_Spoiler05 = 2396,
	Vehicle_Comp_PatriotV20Jericho_Spoiler06 = 2397,
	Vehicle_Comp_PatriotV20Jericho_SteeringWheel01 = 2398,
	Vehicle_Comp_PatriotV20Jericho_SteeringWheel02 = 2399,
	Vehicle_Comp_PatriotV20Jericho_SteeringWheel03 = 2400,
	Vehicle_Comp_PatriotV20Jericho_SteeringWheel04 = 2401,
	Vehicle_Comp_PatriotV20Jericho_SteeringWheel05 = 2402,
	Vehicle_Comp_PatriotV20Jericho_SteeringWheel06 = 2403,
	Vehicle_Comp_PatriotV20Jericho_TailLights01 = 2404,
	Vehicle_Comp_PatriotV20Jericho_TailLights02 = 2405,
	Vehicle_Comp_PatriotV20Jericho_TailLights03 = 2406,
	Vehicle_Comp_PatriotV20Jericho_TailLights04 = 2407,
	Vehicle_Comp_PatriotV20Jericho_TailLights05 = 2408,
	Vehicle_Comp_PatriotV20Jericho_TailLights06 = 2409,
	Vehicle_Comp_PatriotV20Jericho_Wheel01 = 2410,
	Vehicle_Comp_PatriotV20Jericho_Wheel02 = 2411,
	Vehicle_Comp_PatriotV20Jericho_Wheel03 = 2412,
	Vehicle_Comp_PatriotV20Jericho_Wheel04 = 2413,
	Vehicle_Comp_PatriotV20Jericho_Wheel05 = 2414,
	Vehicle_Comp_PatriotV20Jericho_Wheel06 = 2415,
	Vehicle_Comp_PatriotV20Jericho_Wheel07 = 2416,
	Vehicle_Comp_PatriotV20Jericho_WingMirrors01 = 2417,
	Vehicle_Comp_PatriotV20Jericho_WingMirrors02 = 2418,
	Vehicle_Comp_PatriotV20Jericho_WingMirrors03 = 2419,
	Vehicle_Comp_PatriotV20Jericho_WingMirrors04 = 2420,
	Vehicle_Comp_PatriotV20Jericho_WingMirrors05 = 2421,
	Vehicle_Comp_PatriotV20Jericho_WingMirrors06 = 2422,
	Vehicle_Comp_PatriotV20Jericho_WingPanels01 = 2423,
	Vehicle_Comp_PatriotV20Jericho_WingPanels02 = 2424,
	Vehicle_Comp_PatriotV20Jericho_WingPanels03 = 2425,
	Vehicle_Comp_PatriotV20Jericho_WingPanels04 = 2426,
	Vehicle_Comp_PatriotV20Jericho_WingPanels05 = 2427,
	Vehicle_Comp_PatriotV20Jericho_WingPanels06 = 2428,
	Vehicle_Comp_PatriotVegasG20_BumperFront01 = 2429,
	Vehicle_Comp_PatriotVegasG20_BumperFront02 = 2430,
	Vehicle_Comp_PatriotVegasG20_BumperFront03 = 2431,
	Vehicle_Comp_PatriotVegasG20_BumperFront04 = 2432,
	Vehicle_Comp_PatriotVegasG20_BumperFront05 = 2433,
	Vehicle_Comp_PatriotVegasG20_BumperFront06 = 2434,
	Vehicle_Comp_PatriotVegasG20_BumperFront07 = 2435,
	Vehicle_Comp_PatriotVegasG20_BumperRear01 = 2436,
	Vehicle_Comp_PatriotVegasG20_BumperRear02 = 2437,
	Vehicle_Comp_PatriotVegasG20_BumperRear03 = 2438,
	Vehicle_Comp_PatriotVegasG20_BumperRear04 = 2439,
	Vehicle_Comp_PatriotVegasG20_BumperRear05 = 2440,
	Vehicle_Comp_PatriotVegasG20_BumperRear06 = 2441,
	Vehicle_Comp_PatriotVegasG20_Doors01 = 2442,
	Vehicle_Comp_PatriotVegasG20_Doors02 = 2443,
	Vehicle_Comp_PatriotVegasG20_Doors03 = 2444,
	Vehicle_Comp_PatriotVegasG20_HeadLights01 = 2445,
	Vehicle_Comp_PatriotVegasG20_HeadLights02 = 2446,
	Vehicle_Comp_PatriotVegasG20_HeadLights03 = 2447,
	Vehicle_Comp_PatriotVegasG20_HeadLights04 = 2448,
	Vehicle_Comp_PatriotVegasG20_HeadLights05 = 2449,
	Vehicle_Comp_PatriotVegasG20_HeadLights06 = 2450,
	Vehicle_Comp_PatriotVegasG20_Hood01 = 2451,
	Vehicle_Comp_PatriotVegasG20_Hood02 = 2452,
	Vehicle_Comp_PatriotVegasG20_Hood03 = 2453,
	Vehicle_Comp_PatriotVegasG20_Hood04 = 2454,
	Vehicle_Comp_PatriotVegasG20_Hood05 = 2455,
	Vehicle_Comp_PatriotVegasG20_Hood06 = 2456,
	Vehicle_Comp_PatriotVegasG20_RollCage01 = 2457,
	Vehicle_Comp_PatriotVegasG20_Roof01 = 2458,
	Vehicle_Comp_PatriotVegasG20_Roof02 = 2459,
	Vehicle_Comp_PatriotVegasG20_Roof03 = 2460,
	Vehicle_Comp_PatriotVegasG20_SeatsFront01 = 2461,
	Vehicle_Comp_PatriotVegasG20_SeatsFront02 = 2462,
	Vehicle_Comp_PatriotVegasG20_SeatsFront03 = 2463,
	Vehicle_Comp_PatriotVegasG20_SideSkirts01 = 2464,
	Vehicle_Comp_PatriotVegasG20_SideSkirts02 = 2465,
	Vehicle_Comp_PatriotVegasG20_SideSkirts03 = 2466,
	Vehicle_Comp_PatriotVegasG20_SideSkirts04 = 2467,
	Vehicle_Comp_PatriotVegasG20_SideSkirts05 = 2468,
	Vehicle_Comp_PatriotVegasG20_SideSkirts06 = 2469,
	Vehicle_Comp_PatriotVegasG20_Spoiler01 = 2470,
	Vehicle_Comp_PatriotVegasG20_Spoiler02 = 2471,
	Vehicle_Comp_PatriotVegasG20_Spoiler03 = 2472,
	Vehicle_Comp_PatriotVegasG20_Spoiler04 = 2473,
	Vehicle_Comp_PatriotVegasG20_Spoiler05 = 2474,
	Vehicle_Comp_PatriotVegasG20_Spoiler06 = 2475,
	Vehicle_Comp_PatriotVegasG20_Spoiler07 = 2476,
	Vehicle_Comp_PatriotVegasG20_SteeringWheel01 = 2477,
	Vehicle_Comp_PatriotVegasG20_SteeringWheel02 = 2478,
	Vehicle_Comp_PatriotVegasG20_SteeringWheel03 = 2479,
	Vehicle_Comp_PatriotVegasG20_TailLights01 = 2480,
	Vehicle_Comp_PatriotVegasG20_TailLights02 = 2481,
	Vehicle_Comp_PatriotVegasG20_TailLights03 = 2482,
	Vehicle_Comp_PatriotVegasG20_TailLights04 = 2483,
	Vehicle_Comp_PatriotVegasG20_TailLights05 = 2484,
	Vehicle_Comp_PatriotVegasG20_TailLights06 = 2485,
	Vehicle_Comp_PatriotVegasG20_Wheel01 = 2486,
	Vehicle_Comp_PatriotVegasG20_Wheel02 = 2487,
	Vehicle_Comp_PatriotVegasG20_Wheel03 = 2488,
	Vehicle_Comp_PatriotVegasG20_Wheel04 = 2489,
	Vehicle_Comp_PatriotVegasG20_Wheel05 = 2490,
	Vehicle_Comp_PatriotVegasG20_Wheel06 = 2491,
	Vehicle_Comp_PatriotVegasG20_WingMirrors01 = 2492,
	Vehicle_Comp_PatriotVegasG20_WingMirrors02 = 2493,
	Vehicle_Comp_PatriotVegasG20_WingMirrors03 = 2494,
	Vehicle_Comp_PatriotVegasG20_WingMirrors04 = 2495,
	Vehicle_Comp_PatriotVegasG20_WingMirrors05 = 2496,
	Vehicle_Comp_PatriotVegasG20_WingMirrors06 = 2497,
	Vehicle_Comp_PatriotVegasG20_WingMirrors07 = 2498,
	Vehicle_Comp_PatriotVegasG20_WingPanels01 = 2499,
	Vehicle_Comp_PatriotVegasG20_WingPanels02 = 2500,
	Vehicle_Comp_PatriotVegasG20_WingPanels03 = 2501,
	Vehicle_Comp_PatriotVegasG20_WingPanelsRear01 = 2502,
	Vehicle_Comp_PatriotVegasG20_WingPanelsRear02 = 2503,
	Vehicle_Comp_PatriotVegasG20_WingPanelsRear03 = 2504,
	Vehicle_Comp_SeiyoEspacio_BullBars01 = 2505,
	Vehicle_Comp_SeiyoEspacio_BullBars02 = 2506,
	Vehicle_Comp_SeiyoEspacio_BullBars03 = 2507,
	Vehicle_Comp_SeiyoEspacio_BumperFront01 = 2508,
	Vehicle_Comp_SeiyoEspacio_BumperFront02 = 2509,
	Vehicle_Comp_SeiyoEspacio_BumperFront03 = 2510,
	Vehicle_Comp_SeiyoEspacio_BumperFront04 = 2511,
	Vehicle_Comp_SeiyoEspacio_BumperFront05 = 2512,
	Vehicle_Comp_SeiyoEspacio_BumperFront06 = 2513,
	Vehicle_Comp_SeiyoEspacio_BumperRear01 = 2514,
	Vehicle_Comp_SeiyoEspacio_BumperRear02 = 2515,
	Vehicle_Comp_SeiyoEspacio_BumperRear03 = 2516,
	Vehicle_Comp_SeiyoEspacio_BumperRear04 = 2517,
	Vehicle_Comp_SeiyoEspacio_BumperRear05 = 2518,
	Vehicle_Comp_SeiyoEspacio_BumperRear06 = 2519,
	Vehicle_Comp_SeiyoEspacio_Doors01 = 2520,
	Vehicle_Comp_SeiyoEspacio_Doors02 = 2521,
	Vehicle_Comp_SeiyoEspacio_Doors03 = 2522,
	Vehicle_Comp_SeiyoEspacio_Grill01 = 2523,
	Vehicle_Comp_SeiyoEspacio_Grill02 = 2524,
	Vehicle_Comp_SeiyoEspacio_Grill03 = 2525,
	Vehicle_Comp_SeiyoEspacio_Grill04 = 2526,
	Vehicle_Comp_SeiyoEspacio_Grill05 = 2527,
	Vehicle_Comp_SeiyoEspacio_Grill06 = 2528,
	Vehicle_Comp_SeiyoEspacio_Headlights01 = 2529,
	Vehicle_Comp_SeiyoEspacio_Headlights02 = 2530,
	Vehicle_Comp_SeiyoEspacio_Headlights03 = 2531,
	Vehicle_Comp_SeiyoEspacio_Headlights04 = 2532,
	Vehicle_Comp_SeiyoEspacio_Headlights05 = 2533,
	Vehicle_Comp_SeiyoEspacio_Headlights06 = 2534,
	Vehicle_Comp_SeiyoEspacio_Hood01 = 2535,
	Vehicle_Comp_SeiyoEspacio_Hood02 = 2536,
	Vehicle_Comp_SeiyoEspacio_Hood03 = 2537,
	Vehicle_Comp_SeiyoEspacio_Hood04 = 2538,
	Vehicle_Comp_SeiyoEspacio_Hood05 = 2539,
	Vehicle_Comp_SeiyoEspacio_Hood06 = 2540,
	Vehicle_Comp_SeiyoEspacio_RearWindow01 = 2541,
	Vehicle_Comp_SeiyoEspacio_RearWindow02 = 2542,
	Vehicle_Comp_SeiyoEspacio_RearWindow03 = 2543,
	Vehicle_Comp_SeiyoEspacio_RearWindow04 = 2544,
	Vehicle_Comp_SeiyoEspacio_RearWindow05 = 2545,
	Vehicle_Comp_SeiyoEspacio_Roof01 = 2546,
	Vehicle_Comp_SeiyoEspacio_Roof02 = 2547,
	Vehicle_Comp_SeiyoEspacio_Roof03 = 2548,
	Vehicle_Comp_SeiyoEspacio_Roof04 = 2549,
	Vehicle_Comp_SeiyoEspacio_Roof05 = 2550,
	Vehicle_Comp_SeiyoEspacio_Roof06 = 2551,
	Vehicle_Comp_SeiyoEspacio_Roof07 = 2552,
	Vehicle_Comp_SeiyoEspacio_SeatsFront01 = 2553,
	Vehicle_Comp_SeiyoEspacio_SeatsFront02 = 2554,
	Vehicle_Comp_SeiyoEspacio_SeatsFront03 = 2555,
	Vehicle_Comp_SeiyoEspacio_SeatsFront04 = 2556,
	Vehicle_Comp_SeiyoEspacio_SideSkirts01 = 2557,
	Vehicle_Comp_SeiyoEspacio_SideSkirts02 = 2558,
	Vehicle_Comp_SeiyoEspacio_SideSkirts03 = 2559,
	Vehicle_Comp_SeiyoEspacio_SideSkirts04 = 2560,
	Vehicle_Comp_SeiyoEspacio_SideSkirts05 = 2561,
	Vehicle_Comp_SeiyoEspacio_SideSkirts06 = 2562,
	Vehicle_Comp_SeiyoEspacio_Spoiler01 = 2563,
	Vehicle_Comp_SeiyoEspacio_Spoiler02 = 2564,
	Vehicle_Comp_SeiyoEspacio_Spoiler03 = 2565,
	Vehicle_Comp_SeiyoEspacio_Spoiler04 = 2566,
	Vehicle_Comp_SeiyoEspacio_Spoiler05 = 2567,
	Vehicle_Comp_SeiyoEspacio_Spoiler06 = 2568,
	Vehicle_Comp_SeiyoEspacio_SteeringWheel01 = 2569,
	Vehicle_Comp_SeiyoEspacio_SteeringWheel02 = 2570,
	Vehicle_Comp_SeiyoEspacio_SteeringWheel03 = 2571,
	Vehicle_Comp_SeiyoEspacio_SteeringWheel04 = 2572,
	Vehicle_Comp_SeiyoEspacio_Taillights01 = 2573,
	Vehicle_Comp_SeiyoEspacio_Taillights02 = 2574,
	Vehicle_Comp_SeiyoEspacio_Taillights03 = 2575,
	Vehicle_Comp_SeiyoEspacio_Taillights04 = 2576,
	Vehicle_Comp_SeiyoEspacio_Taillights05 = 2577,
	Vehicle_Comp_SeiyoEspacio_Taillights06 = 2578,
	Vehicle_Comp_SeiyoEspacio_Trunk01 = 2579,
	Vehicle_Comp_SeiyoEspacio_Trunk02 = 2580,
	Vehicle_Comp_SeiyoEspacio_Trunk03 = 2581,
	Vehicle_Comp_SeiyoEspacio_Wheel01 = 2582,
	Vehicle_Comp_SeiyoEspacio_Wheel02 = 2583,
	Vehicle_Comp_SeiyoEspacio_Wheel03 = 2584,
	Vehicle_Comp_SeiyoEspacio_Wheel04 = 2585,
	Vehicle_Comp_SeiyoEspacio_Wheel05 = 2586,
	Vehicle_Comp_SeiyoEspacio_WindowVisor01 = 2587,
	Vehicle_Comp_SeiyoEspacio_WindowVisor02 = 2588,
	Vehicle_Comp_SeiyoEspacio_WindowVisor03 = 2589,
	Vehicle_Comp_SeiyoEspacio_WindowVisor04 = 2590,
	Vehicle_Comp_SeiyoEspacio_WindowVisor05 = 2591,
	Vehicle_Comp_SeiyoEspacio_WingMirrors01 = 2592,
	Vehicle_Comp_SeiyoEspacio_WingMirrors02 = 2593,
	Vehicle_Comp_SeiyoEspacio_WingMirrors03 = 2594,
	Vehicle_Comp_SeiyoEspacio_WingMirrors04 = 2595,
	Vehicle_Comp_SeiyoEspacio_WingMirrors05 = 2596,
	Vehicle_Comp_SeiyoEspacio_WingMirrors06 = 2597,
	Vehicle_Comp_Shared_4x4_Wheel01 = 2598,
	Vehicle_Comp_Shared_4x4_Wheel02 = 2599,
	Vehicle_Comp_Shared_4x4_Wheel03 = 2600,
	Vehicle_Comp_Shared_AmpAudio = 2601,
	Vehicle_Comp_Shared_DumpValveAudio = 2602,
	Vehicle_Comp_Shared_ExhaustAudio = 2603,
	Vehicle_Comp_Shared_PoliceLightSecondary01 = 2604,
	Vehicle_Comp_Shared_PoliceLightSecondary02 = 2605,
	Vehicle_Comp_Shared_PoliceLightSecondary03 = 2606,
	Vehicle_Comp_Shared_PoliceLightSecondary04 = 2607,
	Vehicle_Comp_Shared_PoliceLightSecondary05 = 2608,
	Vehicle_Comp_Shared_PoliceLightSecondary06 = 2609,
	Vehicle_Comp_Shared_PoliceLightSecondary07 = 2610,
	Vehicle_Comp_Shared_PoliceLightSecondary08 = 2611,
	Vehicle_Comp_Shared_PoliceLights01 = 2612,
	Vehicle_Comp_Shared_PoliceLights02 = 2613,
	Vehicle_Comp_Shared_PoliceLights03 = 2614,
	Vehicle_Comp_Shared_PoliceLights04 = 2615,
	Vehicle_Comp_Shared_PoliceLights05 = 2616,
	Vehicle_Comp_Shared_PoliceLights06 = 2617,
	Vehicle_Comp_Shared_PoliceLights07 = 2618,
	Vehicle_Comp_Shared_PoliceLights08 = 2619,
	Vehicle_Comp_Shared_PoliceLights09 = 2620,
	Vehicle_Comp_Shared_PoliceLights10 = 2621,
	Vehicle_Comp_Shared_PoliceLights11 = 2622,
	Vehicle_Comp_Shared_PoliceLights12 = 2623,
	Vehicle_Comp_Shared_PoliceLights13 = 2624,
	Vehicle_Comp_Shared_PoliceLights14 = 2625,
	Vehicle_Comp_Shared_PoliceLights15 = 2626,
	Vehicle_Comp_Shared_PoliceLights16 = 2627,
	Vehicle_Comp_Shared_PoliceLights17 = 2628,
	Vehicle_Comp_Shared_PoliceLights18 = 2629,
	Vehicle_Comp_Shared_PoliceLights19 = 2630,
	Vehicle_Comp_Shared_PoliceLights20 = 2631,
	Vehicle_Comp_Shared_PoliceLights21 = 2632,
	Vehicle_Comp_Shared_PoliceLights22 = 2633,
	Vehicle_Comp_Shared_PoliceLights23 = 2634,
	Vehicle_Comp_Shared_PoliceLights24 = 2635,
	Vehicle_Comp_Shared_SpeakerAudio = 2636,
	Vehicle_Comp_Shared_TransmissionAudio = 2637,
	Vehicle_Comp_Shared_TurboAudio = 2638,
	Vehicle_Comp_Shared_Utility_Wheel01 = 2639,
	Vehicle_Comp_Shared_Utility_Wheel02 = 2640,
	Vehicle_Comp_Shared_Utility_Wheel03 = 2641,
	Vehicle_Comp_Shared_Utility_Wheel04 = 2642,
	Vehicle_Comp_Shared_Utility_Wheel05 = 2643,
	Vehicle_Comp_Shared_Utility_Wheel06 = 2644,
	Vehicle_Comp_Shared_WheelKits01 = 2645,
	Vehicle_Comp_Shared_WheelKits02 = 2646,
	Vehicle_Comp_SungnyemunMoirai_BumperFront01 = 2647,
	Vehicle_Comp_SungnyemunMoirai_BumperFront02 = 2648,
	Vehicle_Comp_SungnyemunMoirai_BumperFront03 = 2649,
	Vehicle_Comp_SungnyemunMoirai_BumperRear01 = 2650,
	Vehicle_Comp_SungnyemunMoirai_BumperRear02 = 2651,
	Vehicle_Comp_SungnyemunMoirai_BumperRear03 = 2652,
	Vehicle_Comp_SungnyemunMoirai_Hood01 = 2653,
	Vehicle_Comp_SungnyemunMoirai_Hood02 = 2654,
	Vehicle_Comp_SungnyemunMoirai_Hood03 = 2655,
	Vehicle_Comp_SungnyemunMoirai_SideSkirts01 = 2656,
	Vehicle_Comp_SungnyemunMoirai_SideSkirts02 = 2657,
	Vehicle_Comp_SungnyemunMoirai_SideSkirts03 = 2658,
	Vehicle_Comp_SungnyemunMoirai_Spolier01 = 2659,
	Vehicle_Comp_SungnyemunMoirai_Spolier02 = 2660,
	Vehicle_Comp_SungnyemunMoirai_Spolier03 = 2661,
	Vehicle_Comp_SungnyemunMoirai_Wheel01 = 2662,
	Vehicle_Comp_SungnyemunMoirai_Wheel02 = 2663,
	Vehicle_Comp_SungnyemunMoirai_Wheel03 = 2664,
	Vehicle_DoltonBroadwing = 2665,
	Vehicle_DoltonFresno = 2666,
	Vehicle_DoltonMontane = 2667,
	Vehicle_HanCallante = 2668,
	Vehicle_HanVeo = 2669,
	Vehicle_HanVeoAssassin = 2670,
	Vehicle_IOGrowl = 2671,
	Vehicle_IOGrowl_Apocalypse = 2672,
	Vehicle_IOGrowl_Mamba = 2673,
	Vehicle_MacchinaCalabria127 = 2674,
	Vehicle_MacchinaCalabriaCosenza = 2675,
	Vehicle_Nomad-OutlandKurai = 2676,
	Vehicle_NomadOutlandPioneer = 2677,
	Vehicle_NomadOutlandPioneerWaragi_Crim = 2678,
	Vehicle_NomadOutlandPioneerWaragi_Enf = 2679,
	Vehicle_NomadOutlandPioneer_Crim = 2680,
	Vehicle_PackerCeresco = 2681,
	Vehicle_PackerVaquero = 2682,
	Vehicle_PackerVaquero_Crim = 2683,
	Vehicle_PackerVaquero_Enf = 2684,
	Vehicle_PatriotJericho_Phantom_Crim = 2685,
	Vehicle_PatriotJericho_Phantom_Enf = 2686,
	Vehicle_PatriotT-25 = 2687,
	Vehicle_PatriotV20Jericho = 2688,
	Vehicle_PatriotV20Jericho_Crim = 2689,
	Vehicle_PatriotV20Jericho_Enf = 2690,
	Vehicle_PatriotVegasG20 = 2691,
	Vehicle_PatriotVegasG20_Firehawk_Crim = 2692,
	Vehicle_PatriotVegasG20_Firehawk_Enf = 2693,
	Vehicle_SeiyoEspacio = 2694,
	Vehicle_SeiyoEspacio_BigHorn = 2695,
	Vehicle_SeiyoEspacio_Enf = 2696,
	Vehicle_SeiyoEspacio_Mammoth = 2697,
	Vehicle_SungyenunMoirai = 2698,
	WeaponHUD_Driving = 2699,
	WeaponHUD_InCarWithBriefcase = 2700,
	WeaponSkin = 2701,
	Weapon_AssaultRifle_ATAC = 2702,
	Weapon_AssaultRifle_ATAC-Bodyguard_Gold = 2703,
	Weapon_AssaultRifle_ATAC-Mercenary_Gold = 2704,
	Weapon_AssaultRifle_ATAC-Watchman_Gold = 2705,
	Weapon_AssaultRifle_ATAC_Gold = 2706,
	Weapon_AssaultRifle_COBR-A = 2707,
	Weapon_AssaultRifle_COBR-A_Gold = 2708,
	Weapon_AssaultRifle_COBR-A_Purple = 2709,
	Weapon_AssaultRifle_COBR-A_Scoped = 2710,
	Weapon_AssaultRifle_COBR-A_Scoped_Gold = 2711,
	Weapon_AssaultRifle_COBR-A_Scoped_Purple = 2712,
	Weapon_AssaultRifle_CR5 = 2713,
	Weapon_AssaultRifle_CR5_Gold = 2714,
	Weapon_AssaultRifle_CR5_Purple = 2715,
	Weapon_AssaultRifle_FAR_Base = 2716,
	Weapon_AssaultRifle_FAR_Base_Gold = 2717,
	Weapon_AssaultRifle_FAR_Base_Purple = 2718,
	Weapon_AssaultRifle_FAR_Sight = 2719,
	Weapon_AssaultRifle_FAR_Sight_Gold = 2720,
	Weapon_AssaultRifle_FAR_Sight_Purple = 2721,
	Weapon_AssaultRifle_FAR_Stock = 2722,
	Weapon_AssaultRifle_FAR_Stock_Gold = 2723,
	Weapon_AssaultRifle_FAR_Stock_Purple = 2724,
	Weapon_AssaultRifle_Fanatic_Base = 2725,
	Weapon_AssaultRifle_Fanatic_Base_Gold = 2726,
	Weapon_AssaultRifle_Fanatic_Base_Purple = 2727,
	Weapon_AssaultRifle_Fanatic_Bipod = 2728,
	Weapon_AssaultRifle_Fanatic_Bipod_Gold = 2729,
	Weapon_AssaultRifle_Fanatic_Bipod_Purple = 2730,
	Weapon_AssaultRifle_Fanatic_Sight = 2731,
	Weapon_AssaultRifle_Fanatic_Sight_Gold = 2732,
	Weapon_AssaultRifle_Fanatic_Sight_Purple = 2733,
	Weapon_AssaultRifle_NTEC = 2734,
	Weapon_AssaultRifle_NTEC-7_Compact = 2735,
	Weapon_AssaultRifle_NTEC-7_Compact_Gold = 2736,
	Weapon_AssaultRifle_NTEC-7_Compact_Purple = 2737,
	Weapon_AssaultRifle_NTEC-Scope = 2738,
	Weapon_AssaultRifle_NTEC7_Gold = 2739,
	Weapon_AssaultRifle_NTEC_Scope_Gold = 2740,
	Weapon_AssaultRifle_NTEC_Scope_Purple = 2741,
	Weapon_AssaultRifle_NTEC_Stock = 2742,
	Weapon_AssaultRifle_Raptor = 2743,
	Weapon_AssaultRifle_Raptor-Foregrip = 2744,
	Weapon_AssaultRifle_Raptor-Foregrip_Gold = 2745,
	Weapon_AssaultRifle_Raptor-Foregrip_Purple = 2746,
	Weapon_AssaultRifle_Raptor-Sight = 2747,
	Weapon_AssaultRifle_Raptor-Sight_Gold = 2748,
	Weapon_AssaultRifle_Raptor-Sight_Purple = 2749,
	Weapon_AssaultRifle_Raptor_Gold = 2750,
	Weapon_AssaultRifle_Raptor_Purple = 2751,
	Weapon_AssaultRifle_STAR = 2752,
	Weapon_AssaultRifle_STAR_LCR = 2753,
	Weapon_AssaultRifle_STAR_Pink = 2754,
	Weapon_AssaultRifle_VAS-R2_Base = 2755,
	Weapon_AssaultRifle_VAS-R2_Base_Gold = 2756,
	Weapon_AssaultRifle_VAS-R2_Base_Purple = 2757,
	Weapon_AssaultRifle_VAS-R2_Sights = 2758,
	Weapon_AssaultRifle_VAS-R2_Sights_Gold = 2759,
	Weapon_AssaultRifle_VAS-R2_Sights_Purple = 2760,
	Weapon_AssaultRifle_VAS-R2_Silenced = 2761,
	Weapon_AssaultRifle_VAS-R2_Silenced_Gold = 2762,
	Weapon_AssaultRifle_VAS-R2_Silenced_Purple = 2763,
	Weapon_AssaultRifle_Vespa = 2764,
	Weapon_AssaultRifle_VespaStock = 2765,
	Weapon_AssaultRifle_VespaStock_Gold = 2766,
	Weapon_AssaultRifle_VespaStock_Purple = 2767,
	Weapon_AssaultRifle_VespaTactical = 2768,
	Weapon_AssaultRifle_VespaTactical_Gold = 2769,
	Weapon_AssaultRifle_VespaTactical_Purple = 2770,
	Weapon_AssaultRifle_Vespa_Gold = 2771,
	Weapon_AssaultRifle_Vespa_Purple = 2772,
	Weapon_Assaultrifle_Apoc_Famine = 2773,
	Weapon_Assaultrifle_Apoc_Famine_Gold = 2774,
	Weapon_Assaultrifle_Apoc_Famine_Purple = 2775,
	Weapon_Explosive_AAEPD = 2776,
	Weapon_Explosive_AAEPD_Gold = 2777,
	Weapon_Explosive_AAEPD_Purple = 2778,
	Weapon_Explosive_EOL-Sight_Gold = 2779,
	Weapon_Explosive_EOL-Torch_Gold = 2780,
	Weapon_Explosive_EOL_Gold = 2781,
	Weapon_Explosive_OPGL = 2782,
	Weapon_Explosive_OPGL_Snowball = 2783,
	Weapon_Explosive_OSMAW = 2784,
	Weapon_Grenade_EightBall = 2785,
	Weapon_Grenade_Frag = 2786,
	Weapon_Grenade_HouseBrick = 2787,
	Weapon_Grenade_LTL = 2788,
	Weapon_Grenade_LightFrag = 2789,
	Weapon_Grenade_Snowball = 2790,
	Weapon_LMG_AMG_Base = 2791,
	Weapon_LMG_AMG_Base_Gold = 2792,
	Weapon_LMG_AMG_Base_Purple = 2793,
	Weapon_LMG_AMG_Bipod = 2794,
	Weapon_LMG_AMG_Bipod_Gold = 2795,
	Weapon_LMG_AMG_Bipod_Purple = 2796,
	Weapon_LMG_AMG_Compact = 2797,
	Weapon_LMG_AMG_Compact_Gold = 2798,
	Weapon_LMG_AMG_Compact_Purple = 2799,
	Weapon_LMG_CAS_Base = 2800,
	Weapon_LMG_CAS_Base_Gold = 2801,
	Weapon_LMG_CAS_Base_Purple = 2802,
	Weapon_LMG_CAS_Handle = 2803,
	Weapon_LMG_CAS_Handle_Gold = 2804,
	Weapon_LMG_CAS_Handle_Purple = 2805,
	Weapon_LMG_CAS_Sight = 2806,
	Weapon_LMG_CAS_Sight_Gold = 2807,
	Weapon_LMG_CAS_Sight_Purple = 2808,
	Weapon_LMG_Swarm_Base = 2809,
	Weapon_LMG_Swarm_Base_Gold = 2810,
	Weapon_LMG_Swarm_Base_Purple = 2811,
	Weapon_LMG_Swarm_Handle = 2812,
	Weapon_LMG_Swarm_Handle_Gold = 2813,
	Weapon_LMG_Swarm_Handle_Purple = 2814,
	Weapon_LMG_Swarm_Sight = 2815,
	Weapon_LMG_Swarm_Sight_Gold = 2816,
	Weapon_LMG_Swarm_Sight_Purple = 2817,
	Weapon_LMG_VAS-SW2_Base = 2818,
	Weapon_LMG_VAS-SW2_Base_Gold = 2819,
	Weapon_LMG_VAS-SW2_Base_Purple = 2820,
	Weapon_LMG_VAS-SW2_Handle = 2821,
	Weapon_LMG_VAS-SW2_Handle_Gold = 2822,
	Weapon_LMG_VAS-SW2_Handle_Purple = 2823,
	Weapon_LMG_VAS-SW2_Sights = 2824,
	Weapon_LMG_VAS-SW2_Sights_Gold = 2825,
	Weapon_LMG_VAS-SW2_Sights_Purple = 2826,
	Weapon_LTL_CCG = 2827,
	Weapon_LTL_DartGun = 2828,
	Weapon_LTL_GrenadeLauncher = 2829,
	Weapon_LTL_Tazer = 2830,
	Weapon_LTL_TazerShotgun = 2831,
	Weapon_LightMachineGun_ALIG762 = 2832,
	Weapon_LightMachineGun_SHAW556 = 2833,
	Weapon_LightMachineGun_SSW = 2834,
	Weapon_LightMachineGun_SSW_Gold = 2835,
	Weapon_LightMachineGun_SSW_Upgrade_Gold = 2836,
	Weapon_MultiSelect = 2837,
	Weapon_Pistol_ACT44 = 2838,
	Weapon_Pistol_ACT44-GM = 2839,
	Weapon_Pistol_ACT44-LS = 2840,
	Weapon_Pistol_ACT44_GM_Gold = 2841,
	Weapon_Pistol_ACT44_LastStand_Purple = 2842,
	Weapon_Pistol_Apoc = 2843,
	Weapon_Pistol_Apoc_Gold = 2844,
	Weapon_Pistol_Apoc_Purple = 2845,
	Weapon_Pistol_Colby45AP = 2846,
	Weapon_Pistol_ColbyCommander_Gold = 2847,
	Weapon_Pistol_FBW = 2848,
	Weapon_Pistol_FBW-SD = 2849,
	Weapon_Pistol_FBW_SD_Gold = 2850,
	Weapon_Pistol_FlareGun_Gold = 2851,
	Weapon_Pistol_Flaregun = 2852,
	Weapon_Pistol_Fr0g_Base = 2853,
	Weapon_Pistol_Fr0g_Base_Gold = 2854,
	Weapon_Pistol_Fr0g_Base_Purple = 2855,
	Weapon_Pistol_Fr0g_Sight = 2856,
	Weapon_Pistol_Fr0g_Sight_Gold = 2857,
	Weapon_Pistol_Fr0g_Sight_Purple = 2858,
	Weapon_Pistol_Fr0g_Torch = 2859,
	Weapon_Pistol_Fr0g_Torch_Gold = 2860,
	Weapon_Pistol_Fr0g_Torch_Purple = 2861,
	Weapon_Pistol_NFA9 = 2862,
	Weapon_Pistol_Nano_Gold = 2863,
	Weapon_Pistol_Nano_SD = 2864,
	Weapon_Pistol_OCSP = 2865,
	Weapon_Pistol_RFP9 = 2866,
	Weapon_Pistol_RFP9_Sight = 2867,
	Weapon_Pistol_RFP9_Sight_Gold = 2868,
	Weapon_Pistol_RFP9_Sight_Purple = 2869,
	Weapon_Pistol_RFP9_Silencer = 2870,
	Weapon_Pistol_RFP9_Silencer_Gold = 2871,
	Weapon_Pistol_RFP9_Silencer_Purple = 2872,
	Weapon_Pistol_RSA = 2873,
	Weapon_Pistol_SASPDW = 2874,
	Weapon_Pistol_SnubNose = 2875,
	Weapon_Pistol_SnubNose_Pink = 2876,
	Weapon_Pistol_UL3_Base = 2877,
	Weapon_Pistol_UL3_Base_Gold = 2878,
	Weapon_Pistol_UL3_Base_Purple = 2879,
	Weapon_Pistol_UL3_Sight = 2880,
	Weapon_Pistol_UL3_Sight_Gold = 2881,
	Weapon_Pistol_UL3_Sight_Purple = 2882,
	Weapon_Pistol_UL3_Silencer = 2883,
	Weapon_Pistol_UL3_Silencer_Gold = 2884,
	Weapon_Pistol_UL3_Silencer_Purple = 2885,
	Weapon_Rifle_FFA = 2886,
	Weapon_Rifle_FFA-JB_Gold = 2887,
	Weapon_Rifle_FFA_Gold = 2888,
	Weapon_Rifle_JokerCarbine = 2889,
	Weapon_Rifle_JokerCarbine_Pink = 2890,
	Weapon_Rifle_OBIR = 2891,
	Weapon_Rifle_Obeya = 2892,
	Weapon_Rifle_Obeya_Pink = 2893,
	Weapon_Rifle_Oscar = 2894,
	Weapon_Rifle_SACR = 2895,
	Weapon_Rifle_SACR_Gold = 2896,
	Weapon_Rifle_SACR_Scope_Gold = 2897,
	Weapon_Rifle_SACR_Stock_Gold = 2898,
	Weapon_Rifle_SBSR = 2899,
	Weapon_Rifle_SBSR_Gold = 2900,
	Weapon_Rifle_SBSR_Purple = 2901,
	Weapon_Rifle_SLR = 2902,
	Weapon_Rifle_SLR-Bipod = 2903,
	Weapon_Rifle_SLR-Bipod_Gold = 2904,
	Weapon_Rifle_SLR-Bipod_Purple = 2905,
	Weapon_Rifle_SLR-Stock = 2906,
	Weapon_Rifle_SLR-Stock_Gold = 2907,
	Weapon_Rifle_SLR-Stock_Purple = 2908,
	Weapon_Rifle_SLR_Gold = 2909,
	Weapon_Rifle_SLR_Purple = 2910,
	Weapon_Rifle_VBR = 2911,
	Weapon_Rifle_VBR_Gold = 2912,
	Weapon_Rifle_VBR_Purple = 2913,
	Weapon_Rifle_VBR_Silencer = 2914,
	Weapon_Rifle_VBR_Silencer_Gold = 2915,
	Weapon_Rifle_VBR_Silencer_Purple = 2916,
	Weapon_Rifle_VBR_Stock = 2917,
	Weapon_Rifle_VBR_Stock_Gold = 2918,
	Weapon_Rifle_VBR_Stock_Purple = 2919,
	Weapon_SMG_ACES = 2920,
	Weapon_SMG_ACES-Rifle = 2921,
	Weapon_SMG_ACES-Rifle_Gold = 2922,
	Weapon_SMG_ACES_Gold = 2923,
	Weapon_SMG_Apoc_Plague = 2924,
	Weapon_SMG_Apoc_Plague_Gold = 2925,
	Weapon_SMG_Apoc_Plague_Purple = 2926,
	Weapon_SMG_C9S_Base = 2927,
	Weapon_SMG_C9S_Base_Gold = 2928,
	Weapon_SMG_C9S_Base_Purple = 2929,
	Weapon_SMG_C9S_Sight = 2930,
	Weapon_SMG_C9S_Sight_Gold = 2931,
	Weapon_SMG_C9S_Sight_Purple = 2932,
	Weapon_SMG_C9_Base = 2933,
	Weapon_SMG_C9_Base_Gold = 2934,
	Weapon_SMG_C9_Base_Purple = 2935,
	Weapon_SMG_C9_Sight = 2936,
	Weapon_SMG_C9_Sight_Gold = 2937,
	Weapon_SMG_C9_Sight_Purple = 2938,
	Weapon_SMG_CAP40 = 2939,
	Weapon_SMG_CAP40_Compact = 2940,
	Weapon_SMG_CAP40_Compact_Gold = 2941,
	Weapon_SMG_CAP40_Compact_Purple = 2942,
	Weapon_SMG_CAP40_Gold = 2943,
	Weapon_SMG_CAP40_Purple = 2944,
	Weapon_SMG_CBMP_Base = 2945,
	Weapon_SMG_CBMP_Base_Gold = 2946,
	Weapon_SMG_CBMP_Base_Purple = 2947,
	Weapon_SMG_CBMP_Compact = 2948,
	Weapon_SMG_CBMP_Compact_Gold = 2949,
	Weapon_SMG_CBMP_Compact_Purple = 2950,
	Weapon_SMG_CBMP_Tactical = 2951,
	Weapon_SMG_CBMP_Tactical_Gold = 2952,
	Weapon_SMG_CBMP_Tactical_Purple = 2953,
	Weapon_SMG_Norsemen_Base = 2954,
	Weapon_SMG_Norsemen_Base_Gold = 2955,
	Weapon_SMG_Norsemen_Base_Purple = 2956,
	Weapon_SMG_Norsemen_FoldingStock = 2957,
	Weapon_SMG_Norsemen_FoldingStock_Gold = 2958,
	Weapon_SMG_Norsemen_FoldingStock_Purple = 2959,
	Weapon_SMG_Norsemen_Sight = 2960,
	Weapon_SMG_Norsemen_Sight_Gold = 2961,
	Weapon_SMG_Norsemen_Sight_Purple = 2962,
	Weapon_SMG_Norsemen_Silencer = 2963,
	Weapon_SMG_Norsemen_Silencer_Gold = 2964,
	Weapon_SMG_Norsemen_Silencer_Purple = 2965,
	Weapon_SMG_OCA = 2966,
	Weapon_SMG_OCA-Whisper = 2967,
	Weapon_SMG_OCA_Pink = 2968,
	Weapon_SMG_OCA_SD = 2969,
	Weapon_SMG_OCA_SD_Whisper_Gold = 2970,
	Weapon_SMG_OCA_SD_Whisper_Purple = 2971,
	Weapon_SMG_OCA_Stock = 2972,
	Weapon_SMG_PDW57 = 2973,
	Weapon_SMG_PDW57-S_Base = 2974,
	Weapon_SMG_PDW57-S_Base_Gold = 2975,
	Weapon_SMG_PDW57-S_Base_Purple = 2976,
	Weapon_SMG_PDW57-S_Scoped = 2977,
	Weapon_SMG_PDW57-S_Scoped_Gold = 2978,
	Weapon_SMG_PDW57-S_Scoped_Purple = 2979,
	Weapon_SMG_PDW57-S_Sight = 2980,
	Weapon_SMG_PDW57-S_Sight_Gold = 2981,
	Weapon_SMG_PDW57-S_Sight_Purple = 2982,
	Weapon_SMG_PDW57_Gold = 2983,
	Weapon_SMG_PDW57_Purple = 2984,
	Weapon_SMG_PDW57_Scoped = 2985,
	Weapon_SMG_PDW57_Scoped_Gold = 2986,
	Weapon_SMG_PDW57_Scoped_Purple = 2987,
	Weapon_SMG_PDW57_Silenced = 2988,
	Weapon_SMG_PDW57_Silenced_Gold = 2989,
	Weapon_SMG_PDW57_Silenced_Purple = 2990,
	Weapon_SMG_PMG = 2991,
	Weapon_SMG_PMG-SD = 2992,
	Weapon_SMG_PMG-SD_Gold = 2993,
	Weapon_SMG_TommyGun = 2994,
	Weapon_SMG_TommyGun_Gold = 2995,
	Weapon_SMG_TommyGun_Pink = 2996,
	Weapon_SMG_VAS-C2_Base = 2997,
	Weapon_SMG_VAS-C2_Base_Gold = 2998,
	Weapon_SMG_VAS-C2_Base_Purple = 2999,
	Weapon_SMG_VAS-C2_Sights = 3000,
	Weapon_SMG_VAS-C2_Sights_Gold = 3001,
	Weapon_SMG_VAS-C2_Sights_Purple = 3002,
	Weapon_SMG_VAS-C2_Silenced = 3003,
	Weapon_SMG_VAS-C2_Silenced_Gold = 3004,
	Weapon_SMG_VAS-C2_Silenced_Purple = 3005,
	Weapon_Secondary_Mountie_Base = 3006,
	Weapon_Secondary_Mountie_Base_Gold = 3007,
	Weapon_Secondary_Mountie_Base_Purple = 3008,
	Weapon_Secondary_Mountie_Compact = 3009,
	Weapon_Secondary_Mountie_Compact_Gold = 3010,
	Weapon_Secondary_Mountie_Compact_Purple = 3011,
	Weapon_Secondary_Mountie_Stock = 3012,
	Weapon_Secondary_Mountie_Stock_Gold = 3013,
	Weapon_Secondary_Mountie_Stock_Purple = 3014,
	Weapon_Shotgun_Apoc_War = 3015,
	Weapon_Shotgun_Apoc_War_Gold = 3016,
	Weapon_Shotgun_Apoc_War_Purple = 3017,
	Weapon_Shotgun_CSG = 3018,
	Weapon_Shotgun_CSG_Gold = 3019,
	Weapon_Shotgun_CSG_Pink = 3020,
	Weapon_Shotgun_CSG_Purple = 3021,
	Weapon_Shotgun_DOW_Base = 3022,
	Weapon_Shotgun_DOW_Base_Gold = 3023,
	Weapon_Shotgun_DOW_Base_Purple = 3024,
	Weapon_Shotgun_DOW_JokerBox = 3025,
	Weapon_Shotgun_DOW_JokerBox_Gold = 3026,
	Weapon_Shotgun_DOW_JokerBox_Purple = 3027,
	Weapon_Shotgun_DOW_Stock = 3028,
	Weapon_Shotgun_DOW_Stock_Gold = 3029,
	Weapon_Shotgun_DOW_Stock_Purple = 3030,
	Weapon_Shotgun_JG = 3031,
	Weapon_Shotgun_JG-Stock = 3032,
	Weapon_Shotgun_NFAS = 3033,
	Weapon_Shotgun_NFAS_Ogre = 3034,
	Weapon_Shotgun_NFAS_TrueOgre = 3035,
	Weapon_Shotgun_Shredder_Base = 3036,
	Weapon_Shotgun_Shredder_Base_Gold = 3037,
	Weapon_Shotgun_Shredder_Base_Purple = 3038,
	Weapon_Shotgun_Shredder_DrumMag = 3039,
	Weapon_Shotgun_Shredder_DrumMag_Gold = 3040,
	Weapon_Shotgun_Shredder_DrumMag_Purple = 3041,
	Weapon_Shotgun_Shredder_Torch = 3042,
	Weapon_Shotgun_Shredder_Torch_Gold = 3043,
	Weapon_Shotgun_Shredder_Torch_Purple = 3044,
	Weapon_Shotgun_Tas20 = 3045,
	Weapon_Shotgun_Tas20_Gold = 3046,
	Weapon_Shotgun_Tas20_Purple = 3047,
	Weapon_Shotgun_Tas20_Stock = 3048,
	Weapon_Shotgun_Tas20_Stock_Gold = 3049,
	Weapon_Shotgun_Tas20_Stock_Purple = 3050,
	Weapon_Shotgun_Tas20_Tactical = 3051,
	Weapon_Shotgun_Tas20_Tactical_Gold = 3052,
	Weapon_Shotgun_Tas20_Tactical_Purple = 3053,
	Weapon_SniperRifle_Apoc_Death = 3054,
	Weapon_SniperRifle_Apoc_Death_Gold = 3055,
	Weapon_SniperRifle_Apoc_Death_Purple = 3056,
	Weapon_SniperRifle_DMR = 3057,
	Weapon_SniperRifle_HVR243 = 3058,
	Weapon_SniperRifle_HVR243_Gold = 3059,
	Weapon_SniperRifle_HVR243_Pink = 3060,
	Weapon_SniperRifle_HVR243_Purple = 3061,
	Weapon_SniperRifle_HVR243_SD = 3062,
	Weapon_SniperRifle_HVR243_SD_Gold = 3063,
	Weapon_SniperRifle_HVR762 = 3064,
	Weapon_SniperRifle_NCR762_Gold = 3065,
	Weapon_SniperRifle_PSR_Base = 3066,
	Weapon_SniperRifle_PSR_Base_Gold = 3067,
	Weapon_SniperRifle_PSR_Base_Purple = 3068,
	Weapon_SniperRifle_PSR_MuzzleBrake = 3069,
	Weapon_SniperRifle_PSR_MuzzleBrake_Gold = 3070,
	Weapon_SniperRifle_PSR_MuzzleBrake_Purple = 3071,
	Weapon_SniperRifle_PSR_Silencer = 3072,
	Weapon_SniperRifle_PSR_Silencer_Gold = 3073,
	Weapon_SniperRifle_PSR_Silencer_Purple = 3074,
	Weapon_SniperRifle_Pathfinder = 3075,
	Weapon_SniperRifle_Pathfinder-LR_Gold = 3076,
	Weapon_SniperRifle_Pathfinder-SD_Gold = 3077,
	Weapon_SniperRifle_Pathfinder_Gold = 3078,
	Weapon_SniperRifle_SBSR = 3079,
	Weapon_SniperRifle_SBSR_Gold = 3080,
	Weapon_SniperRifle_SBSR_Purple = 3081,
	Weapon_SniperRifle_Vesper = 3082,
	Weapon_SniperRifle_VesperFoldingStock = 3083,
	Weapon_SniperRifle_VesperFoldingStock_Gold = 3084,
	Weapon_SniperRifle_VesperFoldingStock_Purple = 3085,
	Weapon_SniperRifle_VesperTactical = 3086,
	Weapon_SniperRifle_VesperTactical_Gold = 3087,
	Weapon_SniperRifle_VesperTactical_Purple = 3088,
	Weapon_SniperRifle_Vesper_Gold = 3089,
	Weapon_SniperRifle_Vesper_Purple = 3090,
	Weapon_SniperRilfe_VAS-PR1_Base = 3091,
	Weapon_SniperRilfe_VAS-PR1_Base_Gold = 3092,
	Weapon_SniperRilfe_VAS-PR1_Base_Purple = 3093,
	Weapon_SniperRilfe_VAS-PR1_Sights = 3094,
	Weapon_SniperRilfe_VAS-PR1_Sights_Gold = 3095,
	Weapon_SniperRilfe_VAS-PR1_Sights_Purple = 3096,
	Weapon_SniperRilfe_VAS-PR1_Silenced = 3097,
	Weapon_SniperRilfe_VAS-PR1_Silenced_Gold = 3098,
	Weapon_SniperRilfe_VAS-PR1_Silenced_Purple = 3099,
	Witnessing_EyeClosed = 3100,
	Witnessing_EyeOpen = 3101,
	ZoneIcon_Customisation = 3102,
	ZoneIcon_Markerplace = 3103,
	ZoneIcon_Supply = 3104,
	ZoneIcon_VehicleRepair = 3105,
	ZoneIcon_VehicleSpawn = 3106,
	icon_achievement_gotnewstuff = 3107,
	icon_hud_tagger_valentine = 3108,
	icon_role_valentineprimary = 3109,
	icon_role_valentinesecondary = 3110,
	icons_roles_4thJuly_stars = 3111,
	icons_roles_4thJuly_stripes = 3112,
	icons_roles_ammospecialist_bronze = 3113,
	icons_roles_ammospecialist_default = 3114,
	icons_roles_ammospecialist_gold = 3115,
	icons_roles_ammospecialist_silver = 3116,
	icons_roles_assists_bronze = 3117,
	icons_roles_assists_default = 3118,
	icons_roles_assists_gold = 3119,
	icons_roles_assists_silver = 3120,
	icons_roles_carthief_bronze = 3121,
	icons_roles_carthief_default = 3122,
	icons_roles_carthief_gold = 3123,
	icons_roles_carthief_silver = 3124,
	icons_roles_cop_bronze = 3125,
	icons_roles_cop_default = 3126,
	icons_roles_cop_gold = 3127,
	icons_roles_cop_silver = 3128,
	icons_roles_detective_bronze = 3129,
	icons_roles_detective_default = 3130,
	icons_roles_detective_gold = 3131,
	icons_roles_detective_silver = 3132,
	icons_roles_easter = 3133,
	icons_roles_fashionista_bronze = 3134,
	icons_roles_fashionista_default = 3135,
	icons_roles_fashionista_gold = 3136,
	icons_roles_fashionista_silver = 3137,
	icons_roles_hitman_bronze = 3138,
	icons_roles_hitman_default = 3139,
	icons_roles_hitman_gold = 3140,
	icons_roles_hitman_silver = 3141,
	icons_roles_mastermind_bronze = 3142,
	icons_roles_mastermind_default = 3143,
	icons_roles_mastermind_gold = 3144,
	icons_roles_mastermind_silver = 3145,
	icons_roles_swat_bronze = 3146,
	icons_roles_swat_default = 3147,
	icons_roles_swat_gold = 3148,
	icons_roles_swat_silver = 3149,
	icons_roles_tuner_bronze = 3150,
	icons_roles_tuner_default = 3151,
	icons_roles_tuner_gold = 3152,
	icons_roles_tuner_silver = 3153,
	etHUDTextureIcon_MAX = 3154,
};
enum etHUDTexturePage
{
	None = 0,
	etHUDTexturePage_MAX = 1,
};
enum etHUDTexturePageIcon
{
	None = 0,
	etHUDTexturePageIcon_MAX = 1,
};
enum etLoadingMovieAudioBank
{
	AllFactions_Generic = 0,
	Enforcer_Generic = 1,
	Enforcer_Leagues = 2,
	Criminal_Generic = 3,
	Criminal_Leagues = 4,
	AllFactions_Leagues = 5,
	etLoadingMovieAudioBank_MAX = 6,
};
enum etLoadingMovieConfig
{
	Default = 0,
	etLoadingMovieConfig_MAX = 1,
};
enum etLocationBeaconInstance
{
	FinancialArtsCenter08 = 0,
	FinancialBeacon47 = 1,
	FinancialBusStation48 = 2,
	FinancialCityHall49 = 3,
	FinancialCSpawn04 = 4,
	FinancialCSpawn09 = 5,
	FinancialCSpawn13 = 6,
	FinancialCSpawn24 = 7,
	FinancialCSpawn31 = 8,
	FinancialCSpawn39 = 9,
	FinancialEffigy04 = 10,
	FinancialESpawn07 = 11,
	FinancialESpawn12 = 12,
	FinancialESpawn19 = 13,
	FinancialESpawn22 = 14,
	FinancialESpawn26 = 15,
	FinancialESpawn36 = 16,
	FinancialGarden17 = 17,
	FinancialGPHQ14 = 18,
	FinancialHopeMall02 = 19,
	FinancialKanemori = 20,
	FinancialKNN = 21,
	FinancialMedinas43 = 22,
	FinancialMist03 = 23,
	FinancialMuseum08 = 24,
	FinancialOpenWorldCar05 = 25,
	FinancialOpenWorldCar10 = 26,
	FinancialOpenWorldCar26 = 27,
	FinancialOpenWorldCar30 = 28,
	FinancialOpenWorldCar34 = 29,
	FinancialOpenWorldEnf24 = 30,
	FinancialOpenWorldEnf34 = 31,
	FinancialOpenWorldEnf41 = 32,
	FinancialOpenWorldLarge07 = 33,
	FinancialOpenWorldLarge09 = 34,
	FinancialOpenWorldLarge25 = 35,
	FinancialOpenWorldLarge27 = 36,
	FinancialOpenWorldLarge35 = 37,
	FinancialOpenWorldSmall11 = 38,
	FinancialOpenWorldSmall28 = 39,
	FinancialOpenWorldSmall35 = 40,
	FinancialOpenWorldSmall39 = 41,
	FinancialOpenWorldSmall46 = 42,
	FinancialPark16 = 43,
	FinancialPlantagenet20 = 44,
	FinancialPyramid15 = 45,
	FinancialRegent06 = 46,
	FinancialSchool45 = 47,
	FinancialSeindorf = 48,
	FinancialSeindorf01 = 49,
	FinancialStandard = 50,
	FinancialWPTower02 = 51,
	FinancialYoido = 52,
	SocialCinema = 53,
	SocialConventionCenter = 54,
	SocialCrimNightclub = 55,
	SocialEnfNightclub = 56,
	SocialMain = 57,
	SocialMall = 58,
	SocialMarina = 59,
	SocialRTWBuilding = 60,
	WaterfrontBeltaneClub36 = 61,
	WaterfrontCasino07 = 62,
	WaterfrontConference09 = 63,
	WaterfrontCSpawn08 = 64,
	WaterfrontCSpawn11 = 65,
	WaterfrontCSpawn15 = 66,
	WaterfrontCSpawn22 = 67,
	WaterfrontCSpawn33 = 68,
	WaterfrontCSpawn38 = 69,
	WaterfrontESpawn01 = 70,
	WaterfrontESpawn13 = 71,
	WaterfrontESpawn20 = 72,
	WaterfrontESpawn23 = 73,
	WaterfrontESpawn38 = 74,
	WaterfrontESpawn39 = 75,
	WaterfrontMallEast04 = 76,
	WaterfrontMallWest03 = 77,
	WaterfrontMillennium02 = 78,
	WaterfrontOpenWorldCar15 = 79,
	WaterfrontOpenWorldCar19 = 80,
	WaterfrontOpenWorldCar28 = 81,
	WaterfrontOpenWorldCar40 = 82,
	WaterfrontOpenWorldEnf00 = 83,
	WaterfrontOpenWorldEnf18 = 84,
	WaterfrontOpenWorldEnf25 = 85,
	WaterfrontOpenWorldLarge05 = 86,
	WaterfrontOpenWorldLarge19 = 87,
	WaterfrontOpenWorldLarge21 = 88,
	WaterfrontOpenWorldLarge38 = 89,
	WaterfrontOpenWorldSmall01 = 90,
	WaterfrontOpenWorldSmall16 = 91,
	WaterfrontOpenWorldSmall33 = 92,
	WaterfrontOpenWorldSmall39 = 93,
	WaterfrontPalacioSP30 = 94,
	WaterfrontVillaneuva01 = 95,
	WaterfrontYachtClub01 = 96,
	FinancialCarpark34 = 97,
	FinancialBroadway = 98,
	WaterfrontPrentissBoxing01 = 99,
	BaylanGroundLevel = 100,
	BeaconGroundLevel = 101,
	AsylumLibrary = 102,
	AsylumKitchen = 103,
	AsylumWardTwo = 104,
	AsylumWardThree = 105,
	AsylumWardFive = 106,
	AsylumWardSeven = 107,
	AsylumWardEight = 108,
	AsylumChapel = 109,
	AsylumPool = 110,
	AsylumClub = 111,
	AsylumEntrance = 112,
	AsylumYard = 113,
	AsylumGeneratorRoomAlpha = 114,
	AsylumGeneratorRoomBeta = 115,
	AsylumInfiltrationPoint = 116,
	etLocationBeaconInstance_MAX = 117,
};
enum etLocationBeacon
{
	Twenty = 0,
	Thirty = 1,
	Forty = 2,
	Fifty = 3,
	Ten = 4,
	Sixty = 5,
	Seventy = 6,
	Generic = 7,
	Big = 8,
	Medium = 9,
	Small = 10,
	BaylanGroundLevel = 11,
	Twelve1Floor = 12,
	Fifteen2Floor = 13,
	Small1Floor = 14,
	Ten1Floor = 15,
	etLocationBeacon_MAX = 16,
};
enum etMinigameEffect
{
	None = 0,
	Halloween_HeadlessInitiate = 1,
	Halloween_HeadlessSpawn_Male = 2,
	Halloween_HeadlessSpawn_Female = 3,
	Halloween_HeadlessKill = 4,
	Halloween_Gong = 5,
	Halloween_MinionSpawn_Male = 6,
	Halloween_MinionSpawn_Female = 7,
	Easter_Timer = 8,
	Easter_Start = 9,
	Easter_End = 10,
	Easter_DropOff = 11,
	Easter_DropOff = 12,
	Easter_DropOff = 13,
	Easter_DropOff = 14,
	Easter_Invulnerable = 15,
	Easter_KillCarier = 16,
	Easter_MuggingComplete = 17,
	etMinigameEffect_MAX = 18,
};
enum etMinigame
{
	None = 0,
	SnowballFight = 1,
	ElfEvent = 2,
	MugEasterBunny = 3,
	Easter_GoldenGun = 4,
	GoldenGun_Explosive = 5,
	MugEasterBunny_V2 = 6,
	Mugging = 7,
	BlockFDM_SnubNose = 8,
	BlockFDM_Any = 9,
	Infection_VIP_Test = 10,
	Infection_IC_Test = 11,
	Infection = 12,
	GunGame_Test = 13,
	GunGame_Christmas_12Days = 14,
	MugEaster2015 = 15,
	MugEaster2015_V2 = 16,
	BlockFDM_WeaponPrototype = 17,
	FindDev_Magallan = 18,
	FindDev = 19,
	WeaponDrop_Test = 20,
	WeaponDrop_Anarchy = 21,
	InternalTest = 22,
	etMinigame_MAX = 23,
};
enum etMinigameSpawnerTheme
{
	None = 0,
	WellHidden_Pickup = 1,
	FindTarget_Person = 2,
	WeaponDrop_AlwaysSpawn = 3,
	WeaponDrop_AlwaysSpawn_CarSpawner = 4,
	WeaponDrop_Legendary = 5,
	WeaponDrop_Explosive = 6,
	WeaponDrop_Sniper = 7,
	WeaponDrop_Tier1_Team0 = 8,
	WeaponDrop_Tier1_Team1 = 9,
	WeaponDrop_Tier2_Team0 = 10,
	WeaponDrop_Tier2_Team1 = 11,
	WeaponDrop_SpawnZone_Team0 = 12,
	WeaponDrop_SpawnZone_Team1 = 13,
	WeaponDrop_FinalStage = 14,
	etMinigameSpawnerTheme_MAX = 15,
};
enum etMinigame_BlockFDM
{
	SnowballFight = 0,
	BlockFDM_SnubNose = 1,
	BlockFDM_Any = 2,
	BlockFDM_WeaponPrototype = 3,
	etMinigame_BlockFDM_MAX = 4,
};
enum etMinigame_FindTarget
{
	FindDev_Magallan = 0,
	FindDev = 1,
	etMinigame_FindTarget_MAX = 2,
};
enum etMinigame_GoldenGun
{
	Easter_GoldenGun = 0,
	GoldenGun_Explosive = 1,
	etMinigame_GoldenGun_MAX = 2,
};
enum etMinigame_GunGame
{
	GunGame_Test = 0,
	GunGame_Christmas_12Days = 1,
	GunGame_MAX = 2,
};
enum etMinigame_Infection
{
	Infection_VIP_Test = 0,
	Infection_IC_Test = 1,
	Infection = 2,
	etMinigame_Infection_MAX = 3,
};
enum etMinigame_Infection_ItemCollection
{
	Infection_IC_Test = 0,
	Infection = 1,
	etMinigame_Infection_ItemCollection_MAX = 2,
};
enum etMinigame_Infection_RichFX
{
	Infection_IC_Test = 0,
	Infection = 1,
	etMinigame_Infection_RichFX_MAX = 2,
};
enum etMinigame_Infection_VIP
{
	Infection_VIP_Test = 0,
	Infection_VIP_MAX = 1,
};
enum etMinigame_Mug
{
	MugEasterBunny = 0,
	Mugging = 1,
	MugEasterBunny_V2 = 2,
	MugEaster2015 = 3,
	MugEaster2015_V2 = 4,
	etMinigame_Mug_MAX = 5,
};
enum etMinigame_VIP
{
	ElfEvent = 0,
	etMinigame_VIP_MAX = 1,
};
enum etMinigame_WeaponDrop
{
	WeaponDrop_Test = 0,
	WeaponDrop_Anarchy = 1,
	WeaponDrop_MAX = 2,
};
enum etMinigameWeaponSpawnCategory
{
	Test = 0,
	WeaponDrop_Anarchy = 1,
	etMinigameWeaponSpawnCategory_MAX = 2,
};
enum etMissionPlayerSpawnTheme
{
	None = 0,
	AnarchyTeam = 1,
	AnarchyTeam = 2,
	etMissionPlayerSpawnTheme_MAX = 3,
};
enum etMissionSystemFilter
{
	Any = 0,
	None = 1,
	NotNone = 2,
	LegacyMissions = 3,
	Minigames = 4,
	NotMinigames = 5,
	StagedMissions = 6,
	etMissionSystemFilter_MAX = 7,
};
enum etMissionTemplate
{
	AE_BCL4_BoB4 = 0,
	AE_BCS0_Ter1_B = 1,
	AE_BCS0_Ter1_G = 2,
	AE_BCS4_BoB6 = 3,
	AE_BEL0_Inv3 = 4,
	AE_BEM0_Inv7 = 5,
	AE_BES2_Dis1_P = 6,
	AE_BES2_Dis1_T = 7,
	AE_BES4_Inv5 = 8,
	A_None = 9,
	DB_BCL0_Gra1_B = 10,
	DB_BCL0_Gra1_G = 11,
	DB_BCL0_Gra2 = 12,
	DB_BCL0_VTh1_B = 13,
	DB_BCL0_VTh1_G = 14,
	DB_BCL0_Van1_B = 15,
	DB_BCL0_Van1_G = 16,
	DB_BCL3_Pic1 = 17,
	DB_BCL3_VTh1 = 18,
	DB_BCM0_Ars1 = 19,
	DB_BCM0_Van1_B = 20,
	DB_BCM0_Van1_G = 21,
	DB_BCM1_Del1_B = 22,
	DB_BCM1_Del1_G = 23,
	DB_BCM1_Vlo1_B = 24,
	DB_BCM1_Vlo1_G = 25,
	DB_BCM2_Vlo1 = 26,
	DB_BCS0_Ars1_B = 27,
	DB_BCS0_Ars1_G = 28,
	DB_BCS0_Del1_B = 29,
	DB_BCS0_Del1_G = 30,
	DB_BCS0_Del2_B = 31,
	DB_BCS0_Del2_G = 32,
	DB_BCS1_Del1_B = 33,
	DB_BCS1_Del1_G = 34,
	DB_BCS2_VTh1 = 35,
	DB_BCS2_VTh3 = 36,
	DB_BCS2_Van1 = 37,
	DB_BCS3_Ars1 = 38,
	DB_BCS4_Del1 = 39,
	DB_BEL0_Del1_P = 40,
	DB_BEL0_Del1_T = 41,
	DB_BEL0_For1_P = 42,
	DB_BEL0_For1_T = 43,
	DB_BEL0_For2 = 44,
	DB_BEL0_Inv1_P = 45,
	DB_BEL0_Inv1_T = 46,
	DB_BEL0_Inv2 = 47,
	DB_BEL1_Bus1_P = 48,
	DB_BEL1_Bus1_T = 49,
	DB_BEL1_For1_P = 50,
	DB_BEL1_For1_T = 51,
	DB_BEL1_Pic2_P = 52,
	DB_BEL1_Pic2_T = 53,
	DB_BEL1_VLo1_P = 54,
	DB_BEL1_VLo1_T = 55,
	DB_BEL3_Del1 = 56,
	DB_BEL3_DelV1 = 57,
	DB_BEL4_Dis1 = 58,
	DB_BEM0_Pic1_P = 59,
	DB_BEM0_Pic1_T = 60,
	DB_BEM0_Pic2_P = 61,
	DB_BEM0_Pic2_T = 62,
	DB_BEM1_For1 = 63,
	DB_BEM2_Del1 = 64,
	DB_BEM2_Del2 = 65,
	DB_BEM2_VLo1 = 66,
	DB_BEM3_Inv1 = 67,
	DB_BEM3_Pic1 = 68,
	DB_BES0_Del1_P = 69,
	DB_BES0_Del1_T = 70,
	DB_BES0_Del2_P = 71,
	DB_BES0_Del2_T = 72,
	DB_BES0_For1_P = 73,
	DB_BES0_For1_T = 74,
	DB_BES0_Inv1_P = 75,
	DB_BES0_Inv1_T = 76,
	DB_BES0_Inv2_P = 77,
	DB_BES0_Inv2_T = 78,
	DB_BES0_Pic1_P = 79,
	DB_BES0_Pic1_T = 80,
	DB_BES1_For1_P = 81,
	DB_BES1_For1_T = 82,
	DB_BES1_Pic4_P = 83,
	DB_BES1_Pic4_T = 84,
	DB_BES2_Inv1 = 85,
	DB_BES2_Inv2 = 86,
	DB_BES3_For1 = 87,
	DB_BES3_Inv1 = 88,
	DB_BES3_Pic1 = 89,
	Holiday_HW_Escort = 90,
	JG_BCL0_Exemplar_B = 91,
	JG_BCL0_Exemplar_G = 92,
	JG_BCL0_Gra1_B = 93,
	JG_BCL0_Gra1_G = 94,
	JG_BCL0_VTh1_B = 95,
	JG_BCL0_VTh1_G = 96,
	JG_BCL1_Ars1_B = 97,
	JG_BCL1_Ars1_G = 98,
	JG_BCL1_Bom1_B = 99,
	JG_BCL1_Bom1_G = 100,
	JG_BCL1_Gra1_G = 101,
	JG_BCL1_VTh1_B = 102,
	JG_BCL1_VTh1_G = 103,
	JG_BCL2_Ars1 = 104,
	JG_BCL2_Bom1 = 105,
	JG_BCL2_Bom2 = 106,
	JG_BCL2_Bur1 = 107,
	JG_BCL2_Exemplar = 108,
	JG_BCL2_Gra1 = 109,
	JG_BCL2_VLo1 = 110,
	JG_BCL2_VLo2 = 111,
	JG_BCL2_VTh1 = 112,
	JG_BCL3_Ars1 = 113,
	JG_BCL3_Exemplar = 114,
	JG_BCL4_Ars1 = 115,
	JG_BCL4_Exemplar = 116,
	JG_BCL4_Sab1 = 117,
	JG_BCL4_VCa1 = 118,
	JG_BCM0_Bur1_B = 119,
	JG_BCM0_Bur1_G = 120,
	JG_BCM0_Exemplar_B = 121,
	JG_BCM0_Exemplar_G = 122,
	JG_BCM1_Exemplar_B = 123,
	JG_BCM1_Exemplar_G = 124,
	JG_BCM2_Bom1 = 125,
	JG_BCM2_Bur1 = 126,
	JG_BCM2_Exemplar = 127,
	JG_BCM2_Gra1 = 128,
	JG_BCM2_Sab1 = 129,
	JG_BCM2_VLo1 = 130,
	JG_BCM2_VTh1 = 131,
	JG_BCM3_Bur1 = 132,
	JG_BCM3_Exemplar = 133,
	JG_BCM4_Exemplar = 134,
	JG_BCS0_Exemplar_B = 135,
	JG_BCS0_Exemplar_G = 136,
	JG_BCS0_FoE1_B = 137,
	JG_BCS0_FoE1_G = 138,
	JG_BCS0_VCa1_B = 139,
	JG_BCS0_VCa1_G = 140,
	JG_BCS1_Exemplar3_B = 141,
	JG_BCS1_Exemplar3_G = 142,
	JG_BCS2_Ars1 = 143,
	JG_BCS2_Bom1 = 144,
	JG_BCS2_Exemplar1 = 145,
	JG_BCS2_VTh1 = 146,
	JG_BCS3_Ars1 = 147,
	JG_BCS3_Bur1 = 148,
	JG_BCS3_Exemplar = 149,
	JG_BCS4_Bom1 = 150,
	JG_BCS4_Exemplar = 151,
	JG_BEL0_Inv1_P = 152,
	JG_BEL0_Inv1_T = 153,
	JG_BEL0_Inv2 = 154,
	JG_BEL1_Inv1_P = 155,
	JG_BEL1_Inv1_T = 156,
	JG_BEL2_AGr1 = 157,
	JG_BEL2_AGr2 = 158,
	JG_BEL2_Dis2 = 159,
	JG_BEL2_FoE2 = 160,
	JG_BEL2_FoE3 = 161,
	JG_BEL2_VPi1 = 162,
	JG_BEL3_Dis1 = 163,
	JG_BEL4_FoE1 = 164,
	JG_BEL4_Inv1 = 165,
	JG_BEL4_Inv2 = 166,
	JG_BEM0_FoE1_P = 167,
	JG_BEM0_FoE1_T = 168,
	JG_BEM1_AGr1_P = 169,
	JG_BEM1_AGr1_T = 170,
	JG_BEM1_FoE1 = 171,
	JG_BEM2_Dis1 = 172,
	JG_BEM2_FoE1 = 173,
	JG_BEM2_FoE2 = 174,
	JG_BEM2_Inv1 = 175,
	JG_BEM2_VPi1 = 176,
	JG_BEM3_Dis1 = 177,
	JG_BEM4_Dis1 = 178,
	JG_BES0_VSe1_T = 179,
	JG_BES2_Dis1 = 180,
	JG_BES2_FoE1 = 181,
	JG_BES2_Inv1 = 182,
	JG_BES2_Inv2 = 183,
	JG_BES3_Dis1 = 184,
	JG_BES4_FoE2 = 185,
	JG_FEL4_FoE1 = 186,
	JG_TutCrim_Part1 = 187,
	JG_TutCrim_Part2A = 188,
	JG_TutCrim_Part2B = 189,
	JG_TutCrim_Part3A = 190,
	JG_TutCrim_Part3B = 191,
	JG_TutCrim_Part3C = 192,
	JG_TutCrim_Part3D = 193,
	JG_TutCrim_Part3E = 194,
	JG_TutCrim_Part4A = 195,
	JG_TutCrim_Part4B = 196,
	JG_TutCrim_Part4C = 197,
	JG_TutCrim_Part4D = 198,
	JG_TutCrim_Part5A = 199,
	JG_TutCrim_Part5B = 200,
	JG_TutCrim_Part5C = 201,
	JG_TutEnf_Part1 = 202,
	JG_TutEnf_Part2A = 203,
	JG_TutEnf_Part2B = 204,
	JG_TutEnf_Part2C = 205,
	JG_TutEnf_Part2D = 206,
	JG_TutEnf_Part3A = 207,
	JG_TutEnf_Part3B = 208,
	JG_TutEnf_Part3C = 209,
	JG_TutEnf_Part3D = 210,
	JG_TutEnf_Part4A = 211,
	JG_TutEnf_Part4B = 212,
	JG_TutEnf_Part4C = 213,
	JG_TutEnf_Part4D = 214,
	JG_TutEnf_Part4E = 215,
	JG_TutEnf_Part5A = 216,
	JG_TutEnf_Part5B = 217,
	JG_TutEnf_Part5C = 218,
	JG_TutEnf_Part5D = 219,
	JG_TutEnf_Part5E = 220,
	JG_WEL4_FoE1 = 221,
	JP_BCS0_TagBag_B = 222,
	JP_BCS0_TagBag_G = 223,
	PGA_MovingTargetTaskItem = 224,
	PGA_MovingTargetTaskItem_Large = 225,
	PGA_TerritoryControl_1Point = 226,
	PGA_TerritoryControl_3Points = 227,
	PGA_TerritoryControl_5Points = 228,
	PGA_VIPSurvival = 229,
	PGB_Scavenger = 230,
	PGB_TerritoryControl_3Points = 231,
	PGB_TerritoryControl_5Points = 232,
	PGC_Scavenger = 233,
	PGC_TerritoryControl_All = 234,
	PGC_TerritoryControl_Buildings = 235,
	PGC_TerritoryControl_Crates = 236,
	PG_TeamDeathmatch = 237,
	PGvB_MovingTargetTaskItem = 238,
	PGvB_Scavenger = 239,
	PGvB_TerritoryControl_3Points = 240,
	PGvC_MovingTargetTaskItem = 241,
	PGvC_Scavenger = 242,
	PGvC_TerritoryControl_Crates = 243,
	PGv_TeamDeathmatch = 244,
	TestDeathmatch1 = 245,
	TestMovingTarget = 246,
	TestMultipleDropoff = 247,
	TestNeutralGraffiti = 248,
	TestPointCapture = 249,
	TestTerritory = 250,
	TestVIP = 251,
	Test_TaskItem = 252,
	VFX_AerialsDoubleColumn1_BombDisposal = 253,
	VFX_AerialsDoubleColumn1_Bombing = 254,
	VFX_AerialsDoubleColumn1_Vandalism = 255,
	VFX_AlarmBell_Vandalism = 256,
	VFX_AlarmBox_Vandalism = 257,
	VFX_AlarmLight_Vandalism = 258,
	VFX_BackdoorWood_Arson = 259,
	VFX_BankMachine_Burglary = 260,
	VFX_BankMachine_Vandalism = 261,
	VFX_Cargo_Arson = 262,
	VFX_Cargo_Burglary = 263,
	VFX_Cargo_Forced = 264,
	VFX_CommercialWindow_Arson = 265,
	VFX_CommercialWindow_Burglary = 266,
	VFX_Crate1LONG_Vandalism = 267,
	VFX_Crate2Tall_Vandalism = 268,
	VFX_CrateLong_Forced = 269,
	VFX_CrateTall_Burglary = 270,
	VFX_DishMesh_BombDisposal = 271,
	VFX_DishMesh_Bombing = 272,
	VFX_DishMesh_Vandalism = 273,
	VFX_DishSegmentedHole_BombDisposal = 274,
	VFX_DishSegmentedHole_Bombing = 275,
	VFX_DishSegmentedHole_Vandalism = 276,
	VFX_ElecticalBoxTall_Vandalism = 277,
	VFX_ElecticalBox_Vandalism = 278,
	VFX_ElectricalBoxTall_BombDisposal = 279,
	VFX_ElectricalBoxTall_Bombing = 280,
	VFX_ElectricalBoxTall_Vandalism = 281,
	VFX_ElectricalBox_BombDisposal = 282,
	VFX_ElectricalBox_Bombing = 283,
	VFX_ElectricalBox_Vandalism = 284,
	VFX_FinancialPortaCabinLarge_Arson = 285,
	VFX_FinancialPortaCabinLarge_BombDisposal = 286,
	VFX_FinancialPortaCabinLarge_Bombing = 287,
	VFX_FinancialPortaCabinSmall_Arson = 288,
	VFX_FinancialPortaCabinSmall_BombDisposal = 289,
	VFX_FinancialPortaCabinSmall_Bombing = 290,
	VFX_FireEscape_Burglary = 291,
	VFX_FireEscape_Forced = 292,
	VFX_FireHydrant_Vandalism = 293,
	VFX_GarageDoorsSegmentedNonRamRaid_Vandalism = 294,
	VFX_GarageDoorsSegmented_BombDisposal = 295,
	VFX_GarageDoorsSegmented_Bust = 296,
	VFX_GarageDoorsSegmented_Vandalism = 297,
	VFX_Garage_BombDisposal = 298,
	VFX_Garage_Bombing = 299,
	VFX_Garage_Ramraid = 300,
	VFX_Garage_Vandalism = 301,
	VFX_IndustrialAirConditioningProp_BombDisposal = 302,
	VFX_IndustrialAirConditioningProp_Bombing = 303,
	VFX_IndustrialAirConditioningProp_Vandalism = 304,
	VFX_Mailbox_BombDisposal = 305,
	VFX_Mailbox_Bombing = 306,
	VFX_PayPhone_Sabotage = 307,
	VFX_PayPhone_Vandalism = 308,
	VFX_Portacabin_Arson = 309,
	VFX_Portacabin_Bombing = 310,
	VFX_Residental_Burglary = 311,
	VFX_Residental_Forced = 312,
	VFX_SecurityCameraWallMounted_Vandalism = 313,
	VFX_ShopFrontDoorDoubleTwo_Forced = 314,
	VFX_ShopFrontDoorDouble_Burglary = 315,
	VFX_ShopFrontDoorSingleTwo_Forced = 316,
	VFX_ShopFrontDoorSingle_Burglary = 317,
	VFX_Shopfront_BombDisposal = 318,
	VFX_Shopfront_Bombing = 319,
	VFX_Shopfront_Ramraid = 320,
	VFX_Shopfront_Vandalism = 321,
	VFX_TicketMachine_Arson = 322,
	VFX_TicketMachine_BombDisposal = 323,
	VFX_TicketMachine_Bombing = 324,
	VFX_TicketMachine_Vandalism = 325,
	VFX_Vehicle-Car_Arson = 326,
	VFX_Vehicle-Car_Bombing = 327,
	VFX_Vehicle-Truck_Arson = 328,
	VFX_Vehicle-Truck_Bombing = 329,
	VFX_Vehicle-Van_Arson = 330,
	VFX_Vehicle-Van_Bombing = 331,
	VFX_VendingMachineBottle_Vandalism = 332,
	VFX_VendingMachineSnackLarge_Vandalism = 333,
	VFX_VendingMachineSnackSmall_Vandalism = 334,
	VFX_Wall_Graffiti = 335,
	VFX_WarehouseCratesAndBoxes01_Arson = 336,
	VFX_WarehouseCratesAndBoxes01_BombDisposal = 337,
	VFX_WarehouseCratesAndBoxes01_Bombing = 338,
	VFX_WarehouseCratesAndBoxes02_Arson = 339,
	VFX_WarehouseCratesAndBoxes02_BombDisposal = 340,
	VFX_WarehouseCratesAndBoxes02_Bombing = 341,
	VFX_WarehouseCratesAndBoxes03_Arson = 342,
	VFX_WarehouseCratesAndBoxes03_BombDisposal = 343,
	VFX_WarehouseCratesAndBoxes03_Bombing = 344,
	VFX_Yacht_Arson = 345,
	VFX_Yacht_Bombing = 346,
	VFX_Yacht_BombingDisposal = 347,
	WeaponTest_Any = 348,
	WeaponTest_Close = 349,
	WeaponTest_Long = 350,
	WeaponTest_Mixed = 351,
	WeaponTest_MultiLevel = 352,
	WitnessingDropoff = 353,
	etMissionTemplate_MAX = 354,
};
enum etNotorietyEffect
{
	None = 0,
	ArrestedByEnforcer = 1,
	Arson = 2,
	Assist = 3,
	Bombing = 4,
	Burglary = 5,
	CarryTaskItem = 6,
	DamageEnemy = 7,
	DamageFriend = 8,
	DamageLCPedestrian = 9,
	DamageProp = 10,
	DamageVehicle = 11,
	DeathFromEnemy = 12,
	DeathFromFriend = 13,
	DeathFromSuicide = 14,
	DestroyProp = 15,
	DestroyProp_Pumpkin = 16,
	DestroyVehicle = 17,
	DestroyVehicleLC = 18,
	DrivingStolenVehicle = 19,
	DropToLevel0 = 20,
	FireWeapon = 21,
	Graffiti = 22,
	Hack = 23,
	HijackVehicle = 24,
	KillLCPedestrian = 25,
	KillPlayerEnemy = 26,
	KillPlayerFriend = 27,
	KillPlayerLevel5Crim = 28,
	KillPlayerLevel5Enf = 29,
	LimitHeatToBelowMax = 30,
	MatchLoss = 31,
	MaximumHeat = 32,
	MissionItemDelivered = 33,
	MissionItemDeliveredMulti = 34,
	Mugging = 35,
	OpenWorldCashPoolDelivered = 36,
	OpenWorldLargeItemDelivered = 37,
	OpenWorldLargeItemDeliveredMulti = 38,
	OpenWorldMediumItemDelivered = 39,
	OpenWorldMediumItemDeliveredMulti = 40,
	OpenWorldRamraid = 41,
	OpenWorldSmallItemDelivered = 42,
	OpenWorldSmallItemDeliveredMulti = 43,
	OpenWorldVehicleDelivered = 44,
	OpenWorldVehicleDeliveredArmoured = 45,
	OpenWorldVehicleDeliveredCheap = 46,
	OpenWorldVehicleDeliveredExpensive = 47,
	OpenWorldVehicleDeliveredMidPrice = 48,
	OpenWorldVehicleDeliveredPerfect = 49,
	Rescue = 50,
	Rescued = 51,
	Sabotage = 52,
	VehicleArson = 53,
	VehicleBombing = 54,
	VehicleBreakIn = 55,
	WitnessedArson = 56,
	WitnessedBombing = 57,
	WitnessedBurglary = 58,
	WitnessedCarryTaskItem = 59,
	WitnessedDestroyProp = 60,
	WitnessedDestroyVehicle = 61,
	WitnessedDestroyVehicleLC = 62,
	WitnessedDrivingStolenVehicle = 63,
	WitnessedGraffiti = 64,
	WitnessedHack = 65,
	WitnessedHijackVehicle = 66,
	WitnessedKillLCPedestrian = 67,
	WitnessedKillPlayer = 68,
	WitnessedMissionItemDelivered = 69,
	WitnessedMugging = 70,
	WitnessedOpenWorldLargeItemDelivered = 71,
	WitnessedOpenWorldMediumItemDelivered = 72,
	WitnessedOpenWorldRamraid = 73,
	WitnessedOpenWorldSmallItemDelivered = 74,
	WitnessedOpenWorldVehicleDelivered = 75,
	WitnessedPassengerInStolenVehicle = 76,
	WitnessedSabotage = 77,
	WitnessedVehicleArson = 78,
	WitnessedVehicleBombing = 79,
	WitnessedVehicleBreakIn = 80,
	etNotorietyEffect_MAX = 81,
};
enum etNPCDriverType
{
	Business = 0,
	Industrial = 1,
	Clubber = 2,
	Urban1 = 3,
	Urban2 = 4,
	Uniformed = 5,
	MiddleClass = 6,
	Seedy = 7,
	LowerClass = 8,
	UpperClass = 9,
	EmergencyDriver = 10,
	SecurityDriver = 11,
	etNPCDriverType_MAX = 12,
};
enum etOpenWorldDropOff
{
	None = 0,
	CashPoolDropOff_Crim = 1,
	CashPoolDropOff_Enf = 2,
	DropOff_Enf = 3,
	MediumLargeItemDropOff_Crim = 4,
	SmallItemDropOff_Crim = 5,
	VehicleDropOff_Crim = 6,
	VehicleDropOff_Enf = 7,
	etOpenWorldDropOff_MAX = 8,
};
enum etOpenWorldOperation
{
	None = 0,
	Burglary10 = 1,
	ForcedArrest10 = 2,
	Mugging08 = 3,
	Mugging12 = 4,
	Mugging20 = 5,
	RamRaid = 6,
	StopAndSearch08 = 7,
	StopAndSearch12 = 8,
	Vehicle = 9,
	etOpenWorldOperation_MAX = 10,
};
enum etOpenWorldTargetActivity
{
	None = 0,
	Burglary = 1,
	PedestrianMugOrForcedArrest = 2,
	PedestrianMugOrMugPimp20 = 3,
	PedestrianMugOrStopAndSearch08 = 4,
	PedestrianMugOrStopAndSearch12 = 5,
	RamRaidShopFront = 6,
	etOpenWorldTargetActivity_MAX = 7,
};
enum etOutfitItemType
{
	Outfit = 0,
	etOutfitItemType_MAX = 1,
};
enum etOWAItemSpawnRule
{
	None = 0,
	NPC_Easter_Bunny = 1,
	NPC_Easter_Chicken = 2,
	NPC_Kill_Easter = 3,
	NPC_Lower = 4,
	NPC_Minigame = 5,
	NPC_Minigame_Kill = 6,
	NPC_Pimp = 7,
	NPC_Pimp_Kill = 8,
	NPC_Standard = 9,
	NPC_Urban = 10,
	RamRaidClothing = 11,
	RamRaidDrugstore = 12,
	RamRaidElectronics = 13,
	RamRaidGarageDoor = 14,
	RamRaidJewellery = 15,
	etOWAItemSpawnRule_MAX = 16,
};
enum etPopupDialog
{
	None = 0,
	AD_AmmoLow_Chat = 1,
	AD_ArrestedOtherPlayer_Chat = 2,
	AD_Arrested_Chat = 3,
	AD_CSA_EnterVehicle_Chat = 4,
	AD_ContactLevelUp_Chat = 5,
	AD_JoinGroupOnMission = 6,
	AD_JoinGroupOnMission = 7,
	AD_KillPedestrian_Criminal_Chat = 8,
	AD_KillPedestrian_Enforcer_Chat = 9,
	AD_MailRecievedRewards = 10,
	AD_MailRecievedRewards_Chat = 11,
	AD_Match_DispatchedAgainstOpposition_Chat = 12,
	AD_Match_OppositionAssigned_Chat = 13,
	AD_MissionAccepted_Chat = 14,
	AD_MobileSupplyUnit = 15,
	AD_MobileSupplyUnit_Chat = 16,
	AD_Notoriety0 = 17,
	AD_Notoriety1Dec = 18,
	AD_Notoriety1Inc = 19,
	AD_Notoriety2Dec = 20,
	AD_Notoriety2Inc = 21,
	AD_Notoriety3Dec = 22,
	AD_Notoriety3Inc = 23,
	AD_Notoriety4Dec = 24,
	AD_Notoriety4Inc = 25,
	AD_Notoriety5 = 26,
	AD_NotorietyChange_Chat = 27,
	AD_OpenWorld_DeliverArmouredVan = 28,
	AD_OpenWorld_DeliverCheapVehicle = 29,
	AD_OpenWorld_DeliverDamagedtVehicle = 30,
	AD_OpenWorld_DeliverExpensiveVehicle = 31,
	AD_OpenWorld_DeliverPerfectVehicle = 32,
	AD_OpenWorld_HijackVehicle_Chat = 33,
	AD_OpenWorld_Mugging_Chat = 34,
	AD_OpenWorld_Not5Announce = 35,
	AD_OpenWorld_Not5Announce = 36,
	AD_OpenWorld_Not5Announce = 37,
	AD_OpenWorld_Not5Announce_Chat = 38,
	AD_OpenWorld_Pres5Announce = 39,
	AD_OpenWorld_Pres5Announce = 40,
	AD_OpenWorld_Pres5Announce = 41,
	AD_OpenWorld_Pres5Announce_Chat = 42,
	AD_OpenWorld_RamRaid = 43,
	AD_OpenWorld_RamRaid_Chat = 44,
	AD_OpenWorld_Witnessed_Chat = 45,
	AD_Overtime = 46,
	AD_PickupTaskItem_Instruct = 47,
	AD_PickupTaskItem_Instruct_Chat = 48,
	AD_PlayerStunned_Chat = 49,
	AD_Prestige0 = 50,
	AD_Prestige1Dec = 51,
	AD_Prestige1Inc = 52,
	AD_Prestige2Dec = 53,
	AD_Prestige2Inc = 54,
	AD_Prestige3Dec = 55,
	AD_Prestige3Inc = 56,
	AD_Prestige4Dec = 57,
	AD_Prestige4Inc = 58,
	AD_Prestige5 = 59,
	AD_Prestige5 = 60,
	AD_Prestige5 = 61,
	AD_PrestigeChange_Chat = 62,
	AD_Progression_LostMission_Chat = 63,
	AD_Progression_WonMission_Chat = 64,
	AD_SpawnVehicle = 65,
	AD_SpawnVehicle_Chat = 66,
	AD_StunnedTeammate = 67,
	AD_TeamKill = 68,
	AD_TeamKill_Chat = 69,
	AD_Threat_Chat = 70,
	Flush = 71,
	GUI_CityMap_SelectFinancial = 72,
	GUI_CityMap_SelectFinancial = 73,
	GUI_CityMap_SelectSocial = 74,
	GUI_CityMap_SelectWaterfront = 75,
	GUI_CityMap_SelectWaterfront = 76,
	GUI_DisplayPoint_Generic_Chat = 77,
	GUI_DisplayPoint_Graffiti_Billboard = 78,
	GUI_DisplayPoint_Graffiti_Billboard = 79,
	GUI_DisplayPoint_Graffiti_Billboard = 80,
	GUI_DistrictMap_Chat = 81,
	HUDO_AdHocDeliveredItems = 82,
	HUDO_AdHocDeliveredItems_Failed = 83,
	HUDO_AdHocDeliveredItems_Failed = 84,
	HUDO_AdHocDeliveredItems_Incomplete = 85,
	HUDO_AdHocDeliveredItems_Incomplete = 86,
	HUDO_AdHocDeliveredItems_Incomplete = 87,
	HUDO_AdHocDeliveredVehicle_Failed = 88,
	HUDO_AdHocDeliveredVehicle_Failed = 89,
	HUDO_ContactReferral = 90,
	HUDO_ContactReferral = 91,
	HUDO_ContactReferral_Chat = 92,
	HUDO_MaxedContact_Chat = 93,
	HUDO_OutOfAmmo_Chat = 94,
	RO_Character_Chat = 95,
	RO_Contact_Chat = 96,
	RO_DisplayPoint_Chat = 97,
	RO_OpenWorld_BreakIn_Chat = 98,
	RO_OpenWorld_Mugging_Chat = 99,
	RO_OpenWorld_RamRaid_Chat = 100,
	RO_Vehicle_Generic_Chat_Crim = 101,
	RO_Vehicle_Generic_Chat_Enf = 102,
	RO_Vehicle_NotUsable = 103,
	RO_Vehicle_Stolen_Chat = 104,
	RO_Vending_Ammo_Chat = 105,
	RO_Vending_Generic_Chat = 106,
	RO_Vending_Mail_Chat = 107,
	RO_Vending_Vehicle_Chat = 108,
	SD_Garage_CustomisationDecals = 109,
	SD_Garage_CustomisationDecals = 110,
	SD_Garage_CustomisationPaint = 111,
	SD_Garage_CustomisationPaint = 112,
	SD_Garage_CustomisationParts = 113,
	SD_Garage_CustomisationParts = 114,
	SD_Garage_CustomisationPlates = 115,
	SD_Garage_CustomisationPlates = 116,
	SD_Garage_Customisation = 117,
	SD_Garage_Customisation_Camera = 118,
	SD_Garage_Opened = 119,
	SD_Persona = 120,
	SD_Persona = 121,
	SD_Persona = 122,
	SD_Persona = 123,
	SD_SymbolEditor = 124,
	SD_SymbolEditor = 125,
	SD_SymbolEditor = 126,
	SD_SymbolEditor = 127,
	SD_Wardrobe_AddCustomizable = 128,
	SD_Wardrobe_AddCustomizable = 129,
	SD_Wardrobe_AddItem = 130,
	SD_Wardrobe_AddItem = 131,
	SD_Wardrobe_ItemCustomization = 132,
	SD_Wardrobe_ItemCustomization = 133,
	SD_Wardrobe_ItemCustomization = 134,
	SD_Wardrobe_Open = 135,
	SD_Wardrobe_Open = 136,
	SD_Wardrobe_Open = 137,
	TD_FirstSpawn = 138,
	TD_FirstSpawn = 139,
	TD_FirstSpawn_Chat = 140,
	TD_Notoriety0 = 141,
	TD_Notoriety1Dec = 142,
	TD_Notoriety1Inc = 143,
	TD_Notoriety2Dec = 144,
	TD_Notoriety2Inc = 145,
	TD_Notoriety3Dec = 146,
	TD_Notoriety3Inc = 147,
	TD_Notoriety4Dec = 148,
	TD_Notoriety4Inc = 149,
	TD_Notoriety5 = 150,
	TD_Prestige0 = 151,
	TD_Prestige1Dec = 152,
	TD_Prestige1Inc = 153,
	TD_Prestige2Dec = 154,
	TD_Prestige2Inc = 155,
	TD_Prestige3Dec = 156,
	TD_Prestige3Inc = 157,
	TD_Prestige4Dec = 158,
	TD_Prestige4Inc = 159,
	TD_Prestige5 = 160,
	TD_TutorialsComplete = 161,
	TD_TutorialsComplete = 162,
	TD_TutorialsComplete_Chat = 163,
	TD_TutorialsReminder = 164,
	TD_TutorialsReminder = 165,
	TD_TutorialsReminder = 166,
	etPopupDialog_MAX = 167,
};
enum etPrestigeEffect
{
	None = 0,
	Antigraffiti = 1,
	ArrestCriminal = 2,
	ArrestCriminalLevel5 = 3,
	ArrestEnforcer = 4,
	Arson = 5,
	Assist = 6,
	BombDisposal = 7,
	Bombing = 8,
	Burglary = 9,
	CommandeerVehicle = 10,
	DamageEnemy = 11,
	DamageFriend = 12,
	DamageLCPedestrian = 13,
	DamageProp = 14,
	DamageVehicle = 15,
	DeathFromEnemy = 16,
	DeathFromFriend = 17,
	DeathFromSuicide = 18,
	DestroyProp = 19,
	DestroyProp_Pumpkin = 20,
	DestroyVehicle = 21,
	DestroyVehicleLC = 22,
	DropToLevel0 = 23,
	FireWeapon = 24,
	ForcedEntry = 25,
	Hack = 26,
	KillCrimPlayer = 27,
	KillLCPedestrian = 28,
	KillPlayerEnemyArrested = 29,
	KillPlayerFriend = 30,
	KillPlayerLevel5Crim = 31,
	KillPlayerLevel5Enf = 32,
	KnockOutPlayerEnemy = 33,
	LimitHeatToBelowMax = 34,
	MatchLoss = 35,
	MaximumHeat = 36,
	MissionItemDelivered = 37,
	MissionItemDeliveredMulti = 38,
	OpenWorldBust = 39,
	OpenWorldCashPoolDelivered = 40,
	OpenWorldLargeItemDelivered = 41,
	OpenWorldLargeItemDeliveredMulti = 42,
	OpenWorldMediumItemDelivered = 43,
	OpenWorldMediumItemDeliveredMulti = 44,
	OpenWorldSmallItemDelivered = 45,
	OpenWorldSmallItemDeliveredMulti = 46,
	OpenWorldVehicleDelivered = 47,
	OpenWorldVehicleDeliveredArmoured = 48,
	OpenWorldVehicleDeliveredCheap = 49,
	OpenWorldVehicleDeliveredExpensive = 50,
	OpenWorldVehicleDeliveredMidPrice = 51,
	OpenWorldVehicleDeliveredPerfect = 52,
	PrestigeLevel5Reached = 53,
	RaiseFromLevel0ToEquilibrium = 54,
	Sabotage = 55,
	StopAndSearch = 56,
	VehicleArson = 57,
	VehicleBombDisposal = 58,
	VehicleBombing = 59,
	VehicleBreakIn = 60,
	VehicleBreakIn_Mission = 61,
	WitnessArson = 62,
	WitnessBombing = 63,
	WitnessBurglary = 64,
	WitnessCarryTaskItem = 65,
	WitnessDestroyProp = 66,
	WitnessDestroyVehicle = 67,
	WitnessDestroyVehicleLC = 68,
	WitnessDrivingStolenVehicle = 69,
	WitnessGraffiti = 70,
	WitnessHack = 71,
	WitnessHijackVehicle = 72,
	WitnessKillLCPedestrian = 73,
	WitnessKillPlayerEnemy = 74,
	WitnessMissionItemDelivery = 75,
	WitnessMugging = 76,
	WitnessOpenWorldItemDelivery = 77,
	WitnessOpenWorldRamraid = 78,
	WitnessOpenWorldVehicleDelivery = 79,
	WitnessPassengerStolenVehicle = 80,
	WitnessSabotage = 81,
	WitnessVehicleArson = 82,
	WitnessVehicleBombing = 83,
	WitnessVehicleBreakIn = 84,
	WonMatchBalanced = 85,
	WonMatchSideVsSolo = 86,
	WonMatchSoloVsSide = 87,
	etPrestigeEffect_MAX = 88,
};
enum etPrimitiveUnlockItemType
{
	Unlock_Primitive_Vinyl_Circle = 0,
	Unlock_Primitive_Vinyl_Triangle = 1,
	Unlock_Primitive_Vinyl_Square = 2,
	Unlock_Primitive_Vinyl_Hexagon = 3,
	Unlock_Primitive_Vinyl_5PointStar = 4,
	Unlock_Primitive_Vinyl_QuarterArc = 5,
	Unlock_Primitive_Vinyl_RoundedTriangle = 6,
	Unlock_Primitive_Vinyl_RoundedSquare = 7,
	Unlock_Primitive_Vinyl_HalfArc = 8,
	Unlock_Primitive_Vinyl_Rounded5Star = 9,
	Unlock_Primitive_Vinyl_SemiCircle = 10,
	Unlock_Primitive_Vinyl_Crescent = 11,
	Unlock_Primitive_Vinyl_RussianStar = 12,
	Unlock_Primitive_Vinyl_6PointStar = 13,
	Unlock_Primitive_Vinyl_10PointStar = 14,
	Unlock_Primitive_Vinyl_ConcaveTriangle = 15,
	Unlock_Primitive_Vinyl_PointedOval = 16,
	Unlock_Primitive_Vinyl_SShape = 17,
	Unlock_Primitive_Vinyl_Heart = 18,
	Unlock_Primitive_Vinyl_Heart2 = 19,
	Unlock_Primitive_Vinyl_ArrowHead = 20,
	Unlock_Primitive_Vinyl_Capsule = 21,
	Unlock_Primitive_Vinyl_PointedCapsule = 22,
	Unlock_Primitive_Vinyl_PointedSemiCircle = 23,
	Unlock_Primitive_Vinyl_ConcaveRectangle = 24,
	Unlock_Primitive_Vinyl_Shield = 25,
	Unlock_Primitive_Vinyl_BubbleCircle = 26,
	Unlock_Primitive_Vinyl_Buzzsaw = 27,
	Unlock_Primitive_Vinyl_Cog = 28,
	Unlock_Primitive_Vinyl_Spike = 29,
	Unlock_Primitive_Vinyl_Wave = 30,
	Unlock_Primitive_Vinyl_Spike2 = 31,
	Unlock_Primitive_Vinyl_ChevronSpike = 32,
	Unlock_Primitive_Vinyl_BassClef = 33,
	Unlock_Primitive_Vinyl_FrenchCurve = 34,
	Unlock_Primitive_Vinyl_Flag = 35,
	Unlock_Primitive_Vinyl_Flag2 = 36,
	Unlock_Primitive_Vinyl_RoundedSShape = 37,
	Unlock_Primitive_Vinyl_Chevron = 38,
	Unlock_Primitive_Vinyl_ThinCrescent = 39,
	Unlock_Primitive_Vinyl_Spike5 = 40,
	Unlock_Primitive_Vinyl_Curve1 = 41,
	Unlock_Primitive_Vinyl_Curve2 = 42,
	Unlock_Primitive_Font_Basic_A = 43,
	Unlock_Primitive_Font_Basic_B = 44,
	Unlock_Primitive_Font_Basic_C = 45,
	Unlock_Primitive_Font_Basic_D = 46,
	Unlock_Primitive_Font_Basic_E = 47,
	Unlock_Primitive_Font_Basic_F = 48,
	Unlock_Primitive_Font_Basic_G = 49,
	Unlock_Primitive_Font_Basic_H = 50,
	Unlock_Primitive_Font_Basic_I = 51,
	Unlock_Primitive_Font_Basic_J = 52,
	Unlock_Primitive_Font_Basic_K = 53,
	Unlock_Primitive_Font_Basic_L = 54,
	Unlock_Primitive_Font_Basic_M = 55,
	Unlock_Primitive_Font_Basic_N = 56,
	Unlock_Primitive_Font_Basic_O = 57,
	Unlock_Primitive_Font_Basic_P = 58,
	Unlock_Primitive_Font_Basic_Q = 59,
	Unlock_Primitive_Font_Basic_R = 60,
	Unlock_Primitive_Font_Basic_S = 61,
	Unlock_Primitive_Font_Basic_T = 62,
	Unlock_Primitive_Font_Basic_U = 63,
	Unlock_Primitive_Font_Basic_V = 64,
	Unlock_Primitive_Font_Basic_W = 65,
	Unlock_Primitive_Font_Basic_X = 66,
	Unlock_Primitive_Font_Basic_Y = 67,
	Unlock_Primitive_Font_Basic_Z = 68,
	Unlock_Primitive_Font_Basic = 69,
	Unlock_Primitive_Font_Basic = 70,
	Unlock_Primitive_Font_Basic = 71,
	Unlock_Primitive_Font_Basic = 72,
	Unlock_Primitive_Font_Basic = 73,
	Unlock_Primitive_Font_Basic = 74,
	Unlock_Primitive_Font_Basic = 75,
	Unlock_Primitive_Font_Basic = 76,
	Unlock_Primitive_Font_Basic = 77,
	Unlock_Primitive_Font_Basic = 78,
	Unlock_Primitive_Font_And = 79,
	Unlock_Primitive_Font_AT = 80,
	Unlock_Primitive_Font_Dollar = 81,
	Unlock_Primitive_Font_Explanation = 82,
	Unlock_Primitive_Font_Pound = 83,
	Unlock_Primitive_Font_QuestionMark = 84,
	Unlock_Primitive_Font_Stencil_A = 85,
	Unlock_Primitive_Font_Stencil_B = 86,
	Unlock_Primitive_Font_Stencil_C = 87,
	Unlock_Primitive_Font_Stencil_D = 88,
	Unlock_Primitive_Font_Stencil_E = 89,
	Unlock_Primitive_Font_Stencil_F = 90,
	Unlock_Primitive_Font_Stencil_G = 91,
	Unlock_Primitive_Font_Stencil_H = 92,
	Unlock_Primitive_Font_Stencil_I = 93,
	Unlock_Primitive_Font_Stencil_J = 94,
	Unlock_Primitive_Font_Stencil_K = 95,
	Unlock_Primitive_Font_Stencil_L = 96,
	Unlock_Primitive_Font_Stencil_M = 97,
	Unlock_Primitive_Font_Stencil_N = 98,
	Unlock_Primitive_Font_Stencil_O = 99,
	Unlock_Primitive_Font_Stencil_P = 100,
	Unlock_Primitive_Font_Stencil_Q = 101,
	Unlock_Primitive_Font_Stencil_R = 102,
	Unlock_Primitive_Font_Stencil_S = 103,
	Unlock_Primitive_Font_Stencil_T = 104,
	Unlock_Primitive_Font_Stencil_U = 105,
	Unlock_Primitive_Font_Stencil_V = 106,
	Unlock_Primitive_Font_Stencil_W = 107,
	Unlock_Primitive_Font_Stencil_X = 108,
	Unlock_Primitive_Font_Stencil_Y = 109,
	Unlock_Primitive_Font_Stencil_Z = 110,
	Unlock_Primitive_Font_Stencil = 111,
	Unlock_Primitive_Font_Stencil = 112,
	Unlock_Primitive_Font_Stencil = 113,
	Unlock_Primitive_Font_Stencil = 114,
	Unlock_Primitive_Font_Stencil = 115,
	Unlock_Primitive_Font_Stencil = 116,
	Unlock_Primitive_Font_Stencil = 117,
	Unlock_Primitive_Font_Stencil = 118,
	Unlock_Primitive_Font_Stencil = 119,
	Unlock_Primitive_Font_Stencil = 120,
	Unlock_Primitive_Font_Gothic_A = 121,
	Unlock_Primitive_Font_Gothic_B = 122,
	Unlock_Primitive_Font_Gothic_C = 123,
	Unlock_Primitive_Font_Gothic_D = 124,
	Unlock_Primitive_Font_Gothic_E = 125,
	Unlock_Primitive_Font_Gothic_F = 126,
	Unlock_Primitive_Font_Gothic_G = 127,
	Unlock_Primitive_Font_Gothic_H = 128,
	Unlock_Primitive_Font_Gothic_I = 129,
	Unlock_Primitive_Font_Gothic_J = 130,
	Unlock_Primitive_Font_Gothic_K = 131,
	Unlock_Primitive_Font_Gothic_L = 132,
	Unlock_Primitive_Font_Gothic_M = 133,
	Unlock_Primitive_Font_Gothic_N = 134,
	Unlock_Primitive_Font_Gothic_O = 135,
	Unlock_Primitive_Font_Gothic_P = 136,
	Unlock_Primitive_Font_Gothic_Q = 137,
	Unlock_Primitive_Font_Gothic_R = 138,
	Unlock_Primitive_Font_Gothic_S = 139,
	Unlock_Primitive_Font_Gothic_T = 140,
	Unlock_Primitive_Font_Gothic_U = 141,
	Unlock_Primitive_Font_Gothic_V = 142,
	Unlock_Primitive_Font_Gothic_W = 143,
	Unlock_Primitive_Font_Gothic_X = 144,
	Unlock_Primitive_Font_Gothic_Y = 145,
	Unlock_Primitive_Font_Gothic_Z = 146,
	Unlock_Primitive_Font_Varsity_A = 147,
	Unlock_Primitive_Font_Varsity_B = 148,
	Unlock_Primitive_Font_Varsity_C = 149,
	Unlock_Primitive_Font_Varsity_D = 150,
	Unlock_Primitive_Font_Varsity_E = 151,
	Unlock_Primitive_Font_Varsity_F = 152,
	Unlock_Primitive_Font_Varsity_G = 153,
	Unlock_Primitive_Font_Varsity_H = 154,
	Unlock_Primitive_Font_Varsity_I = 155,
	Unlock_Primitive_Font_Varsity_J = 156,
	Unlock_Primitive_Font_Varsity_K = 157,
	Unlock_Primitive_Font_Varsity_L = 158,
	Unlock_Primitive_Font_Varsity_M = 159,
	Unlock_Primitive_Font_Varsity_N = 160,
	Unlock_Primitive_Font_Varsity_O = 161,
	Unlock_Primitive_Font_Varsity_P = 162,
	Unlock_Primitive_Font_Varsity_Q = 163,
	Unlock_Primitive_Font_Varsity_R = 164,
	Unlock_Primitive_Font_Varsity_S = 165,
	Unlock_Primitive_Font_Varsity_T = 166,
	Unlock_Primitive_Font_Varsity_U = 167,
	Unlock_Primitive_Font_Varsity_V = 168,
	Unlock_Primitive_Font_Varsity_W = 169,
	Unlock_Primitive_Font_Varsity_X = 170,
	Unlock_Primitive_Font_Varsity_Y = 171,
	Unlock_Primitive_Font_Varsity_Z = 172,
	Unlock_Primitive_Font_Varsity = 173,
	Unlock_Primitive_Font_Varsity = 174,
	Unlock_Primitive_Font_Varsity = 175,
	Unlock_Primitive_Font_Varsity = 176,
	Unlock_Primitive_Font_Varsity = 177,
	Unlock_Primitive_Font_Varsity = 178,
	Unlock_Primitive_Font_Varsity = 179,
	Unlock_Primitive_Font_Varsity = 180,
	Unlock_Primitive_Font_Varsity = 181,
	Unlock_Primitive_Font_Varsity = 182,
	Unlock_Primitive_Font_Script_a = 183,
	Unlock_Primitive_Font_Script_b = 184,
	Unlock_Primitive_Font_Script_c = 185,
	Unlock_Primitive_Font_Script_d = 186,
	Unlock_Primitive_Font_Script_e = 187,
	Unlock_Primitive_Font_Script_f = 188,
	Unlock_Primitive_Font_Script_g = 189,
	Unlock_Primitive_Font_Script_h = 190,
	Unlock_Primitive_Font_Script_i = 191,
	Unlock_Primitive_Font_Script_j = 192,
	Unlock_Primitive_Font_Script_k = 193,
	Unlock_Primitive_Font_Script_l = 194,
	Unlock_Primitive_Font_Script_m = 195,
	Unlock_Primitive_Font_Script_n = 196,
	Unlock_Primitive_Font_Script_o = 197,
	Unlock_Primitive_Font_Script_p = 198,
	Unlock_Primitive_Font_Script_q = 199,
	Unlock_Primitive_Font_Script_r = 200,
	Unlock_Primitive_Font_Script_s = 201,
	Unlock_Primitive_Font_Script_t = 202,
	Unlock_Primitive_Font_Script_u = 203,
	Unlock_Primitive_Font_Script_v = 204,
	Unlock_Primitive_Font_Script_w = 205,
	Unlock_Primitive_Font_Script_x = 206,
	Unlock_Primitive_Font_Script_y = 207,
	Unlock_Primitive_Font_Script_z = 208,
	Unlock_Primitive_Font_Graf_A = 209,
	Unlock_Primitive_Font_Graf_B = 210,
	Unlock_Primitive_Font_Graf_C = 211,
	Unlock_Primitive_Font_Graf_D = 212,
	Unlock_Primitive_Font_Graf_E = 213,
	Unlock_Primitive_Font_Graf_F = 214,
	Unlock_Primitive_Font_Graf_G = 215,
	Unlock_Primitive_Font_Graf_H = 216,
	Unlock_Primitive_Font_Graf_I = 217,
	Unlock_Primitive_Font_Graf_J = 218,
	Unlock_Primitive_Font_Graf_K = 219,
	Unlock_Primitive_Font_Graf_L = 220,
	Unlock_Primitive_Font_Graf_M = 221,
	Unlock_Primitive_Font_Graf_N = 222,
	Unlock_Primitive_Font_Graf_O = 223,
	Unlock_Primitive_Font_Graf_P = 224,
	Unlock_Primitive_Font_Graf_Q = 225,
	Unlock_Primitive_Font_Graf_R = 226,
	Unlock_Primitive_Font_Graf_S = 227,
	Unlock_Primitive_Font_Graf_T = 228,
	Unlock_Primitive_Font_Graf_U = 229,
	Unlock_Primitive_Font_Graf_V = 230,
	Unlock_Primitive_Font_Graf_W = 231,
	Unlock_Primitive_Font_Graf_X = 232,
	Unlock_Primitive_Font_Graf_Y = 233,
	Unlock_Primitive_Font_Graf_Z = 234,
	Unlock_Primitive_Vinyl_DragonTail = 235,
	Unlock_Primitive_Vinyl_DragonClaw = 236,
	Unlock_Primitive_Vinyl_YingYang = 237,
	Unlock_Primitive_Vinyl_FleurDeLis = 238,
	Unlock_Primitive_Vinyl_Female = 239,
	Unlock_Primitive_Vinyl_Shield2 = 240,
	Unlock_Primitive_Vinyl_Banner2 = 241,
	Unlock_Primitive_Vinyl_Arrow = 242,
	Unlock_Primitive_Vinyl_Arrow2 = 243,
	Unlock_Primitive_Vinyl_Girl2 = 244,
	Unlock_Primitive_Vinyl_BrushStroke = 245,
	Unlock_Primitive_Vinyl_BrushStroke2 = 246,
	Unlock_Primitive_Vinyl_Splat2 = 247,
	Unlock_Primitive_Vinyl_Splat3 = 248,
	Unlock_Primitive_Vinyl_Splat4 = 249,
	Unlock_Primitive_Vinyl_Cracks = 250,
	Unlock_Primitive_Vinyl_Dirt2 = 251,
	Unlock_Primitive_Vinyl_Drip = 252,
	Unlock_Primitive_Vinyl_Tribal1 = 253,
	Unlock_Primitive_Vinyl_Tribal3 = 254,
	Unlock_Primitive_Vinyl_Tribal4 = 255,
	Unlock_Primitive_Vinyl_Tribal5 = 256,
	Unlock_Primitive_Vinyl_Tribal7 = 257,
	Unlock_Primitive_Vinyl_Tribal8 = 258,
	Unlock_Primitive_Vinyl_Tribal10 = 259,
	Unlock_Primitive_Vinyl_Tribal11 = 260,
	Unlock_Primitive_Vinyl_Tribal12 = 261,
	Unlock_Primitive_Vinyl_Tribal13 = 262,
	Unlock_Primitive_Vinyl_Tribal15 = 263,
	Unlock_Primitive_Vinyl_Tribal16 = 264,
	Unlock_Primitive_Vinyl_Tribal18 = 265,
	Unlock_Primitive_Vinyl_Tribal19 = 266,
	Unlock_Primitive_Vinyl_Tribal22 = 267,
	Unlock_Primitive_Vinyl_Tribal24 = 268,
	Unlock_Primitive_Vinyl_Flame1 = 269,
	Unlock_Primitive_Vinyl_Flame2 = 270,
	Unlock_Primitive_Vinyl_Flame3 = 271,
	Unlock_Primitive_Vinyl_Flame4 = 272,
	Unlock_Primitive_Vinyl_Flame5 = 273,
	Unlock_Primitive_Vinyl_Flame6 = 274,
	Unlock_Primitive_Vinyl_Flame8 = 275,
	Unlock_Primitive_Vinyl_Flame9 = 276,
	Unlock_Primitive_Vinyl_Flame10 = 277,
	Unlock_Primitive_Vinyl_Flame11 = 278,
	Unlock_Primitive_Vinyl_Wave2 = 279,
	Unlock_Primitive_Vinyl_Wave3 = 280,
	Unlock_Primitive_Vinyl_ClawTear = 281,
	Unlock_Primitive_Vinyl_Flourish = 282,
	Unlock_Primitive_Vinyl_Flourish2 = 283,
	Unlock_Primitive_Vinyl_Flourish3 = 284,
	Unlock_Primitive_Vinyl_RadialGradient = 285,
	Unlock_Primitive_Vinyl_RadialGradient2 = 286,
	Unlock_Primitive_Vinyl_RadialPattern2 = 287,
	Unlock_Primitive_Vinyl_FlowerPattern = 288,
	Unlock_Primitive_Vinyl_Beams01 = 289,
	Unlock_Primitive_Lines06 = 290,
	Unlock_Primitive_Lines07 = 291,
	Unlock_Primitive_Vinyl_Swirl = 292,
	Unlock_Primitive_Vinyl_FencePattern = 293,
	Unlock_Primitive_Vinyl_Weave = 294,
	Unlock_Primitive_Vinyl_Tree = 295,
	Unlock_Primitive_Vinyl_Leaf = 296,
	Unlock_Primitive_Vinyl_Leaf2 = 297,
	Unlock_Primitive_Vinyl_Leaf3 = 298,
	Unlock_Primitive_Vinyl_Rose = 299,
	Unlock_Primitive_Vinyl_Tarantula = 300,
	Unlock_Primitive_Vinyl_Bird = 301,
	Unlock_Primitive_Vinyl_Bat = 302,
	Unlock_Primitive_Vinyl_Wing2 = 303,
	Unlock_Primitive_Vinyl_Cow = 304,
	Unlock_Primitive_Vinyl_Stag = 305,
	Unlock_Primitive_Vinyl_Lion = 306,
	Unlock_Primitive_Vinyl_Ribcage = 307,
	Unlock_Primitive_Decal_CityCrest = 308,
	Unlock_Primitive_Decal_PrentissTigers = 309,
	Unlock_Primitive_Decal_Praetorians = 310,
	Unlock_Primitive_Decal_GKings = 311,
	Unlock_Primitive_Decal_BloodRoses = 312,
	Unlock_Primitive_Decal_DaggerBadge = 313,
	Unlock_Primitive_Decal_SheriffBadge = 314,
	Unlock_Primitive_Decal_PoliceBadge = 315,
	Unlock_Primitive_Decal_Wildcats = 316,
	Unlock_Primitive_Decal_Fairy = 317,
	Unlock_Primitive_Decal_Dragon2 = 318,
	Unlock_Primitive_Decal_Fire = 319,
	Unlock_Primitive_Decal_Fire02 = 320,
	Unlock_Primitive_Decal_Zombie = 321,
	Unlock_Primitive_Decal_FlamingSkull = 322,
	Unlock_Primitive_Decal_Sun = 323,
	Unlock_Primitive_Decal_Angel = 324,
	Unlock_Primitive_Decal_Uzi = 325,
	Unlock_Primitive_Decal_Pistol = 326,
	Unlock_Primitive_Decal_TigerHead = 327,
	Unlock_Primitive_Decal_RedFace = 328,
	Unlock_Primitive_Decal_Frog = 329,
	Unlock_Primitive_Decal_Snarl = 330,
	Unlock_Primitive_Decal_Eagle = 331,
	Unlock_Primitive_Vinyl_Simple2 = 332,
	Unlock_Primitive_Vinyl_Simple2 = 333,
	Unlock_Primitive_Vinyl_Simple2 = 334,
	Unlock_Primitive_Vinyl_Simple2 = 335,
	Unlock_Primitive_Vinyl_Simple2 = 336,
	Unlock_Primitive_Vinyl_SplatsCracks = 337,
	Unlock_Primitive_Vinyl_Patterns = 338,
	Unlock_Primitive_Vinyl_Patterns = 339,
	Unlock_Primitive_Vinyl_Patterns = 340,
	Unlock_Primitive_Vinyl_Patterns = 341,
	Unlock_Primitive_Vinyl_Patterns = 342,
	Unlock_Primitive_Vinyl_Nature = 343,
	Unlock_Primitive_Arcs01 = 344,
	Unlock_Primitive_Boxes02 = 345,
	Unlock_Primitive_Boxes04 = 346,
	Unlock_Primitive_Circles01 = 347,
	Unlock_Primitive_Circles03 = 348,
	Unlock_Primitive_Digi01 = 349,
	Unlock_Primitive_Digi02 = 350,
	Unlock_Primitive_Loops = 351,
	Unlock_Primitive_Squares01 = 352,
	Unlock_Primitive_Squares02 = 353,
	Unlock_Primitive_Swirls02 = 354,
	Unlock_Primitive_SpikeThin02 = 355,
	Unlock_Primitive_SpikeThin03 = 356,
	Unlock_Primitive_LineCurve01 = 357,
	Unlock_Primitive_LineCurve02 = 358,
	Unlock_Primitive_LineSwirl01 = 359,
	Unlock_Primitive_LineSwirl02 = 360,
	Unlock_Primitive_FlourishDots01 = 361,
	Unlock_Primitive_FlourishDots02 = 362,
	Unlock_Primitive_FlourishBasic01 = 363,
	Unlock_Primitive_FlourishBasic02 = 364,
	Unlock_Primitive_FlourishBasic03 = 365,
	Unlock_Primitive_FlourishBasic04 = 366,
	Unlock_Primitive_FlourishBasic05 = 367,
	Unlock_Primitive_FlourishBasic06 = 368,
	Unlock_Primitive_FlourishBasic07 = 369,
	Unlock_Primitive_FlourishBasic08 = 370,
	Unlock_Primitive_FlourishTwisted01 = 371,
	Unlock_Primitive_FlourishTwisted02 = 372,
	Unlock_Primitive_Calligraphy01 = 373,
	Unlock_Primitive_Calligraphy02 = 374,
	Unlock_Primitive_Calligraphy03 = 375,
	Unlock_Primitive_Arrow03 = 376,
	Unlock_Primitive_Arrow04 = 377,
	Unlock_Primitive_LightningBolt01 = 378,
	Unlock_Primitive_LightningBolt02 = 379,
	Unlock_Primitive_LightningBolt03 = 380,
	Unlock_Primitive_TribalPattern01 = 381,
	Unlock_Primitive_TribalPattern02 = 382,
	Unlock_Primitive_TribalPattern03 = 383,
	Unlock_Primitive_TribalPattern04 = 384,
	Unlock_Primitive_TribalPattern05 = 385,
	Unlock_Primitive_BrushMark02 = 386,
	Unlock_Primitive_BrushMark04 = 387,
	Unlock_Primitive_BrushMark05 = 388,
	Unlock_Primitive_BrushMark06 = 389,
	Unlock_Primitive_BrushMark07 = 390,
	Unlock_Primitive_BrushMark08 = 391,
	Unlock_Primitive_Splat01 = 392,
	Unlock_Primitive_Splat02 = 393,
	Unlock_Primitive_Splat03 = 394,
	Unlock_Primitive_Splat04 = 395,
	Unlock_Primitive_Splat05 = 396,
	Unlock_Primitive_Splat06 = 397,
	Unlock_Primitive_Drip01 = 398,
	Unlock_Primitive_Drip02 = 399,
	Unlock_Primitive_Spatter01 = 400,
	Unlock_Primitive_Spatter02 = 401,
	Unlock_Primitive_Spatter03 = 402,
	Unlock_Primitive_Spatter04 = 403,
	Unlock_Primitive_BrushCircle01 = 404,
	Unlock_Primitive_BrushMark10 = 405,
	Unlock_Primitive_BrushMark11 = 406,
	Unlock_Primitive_BrushMark09 = 407,
	Unlock_Primitive_Scratch01 = 408,
	Unlock_Primitive_Scratch03 = 409,
	Unlock_Primitive_Curve05 = 410,
	Unlock_Primitive_Scratch04 = 411,
	Unlock_Primitive_Scratch05 = 412,
	Unlock_Primitive_Scribble01 = 413,
	Unlock_Primitive_Scribble02 = 414,
	Unlock_Primitive_Scribble04 = 415,
	Unlock_Primitive_Scribble05 = 416,
	Unlock_Primitive_Shatter01 = 417,
	Unlock_Primitive_BrushMark12 = 418,
	Unlock_Primitive_Block01 = 419,
	Unlock_Primitive_Block02 = 420,
	Unlock_Primitive_Block03 = 421,
	Unlock_Primitive_KidneyBean = 422,
	Unlock_Primitive_TearDrop = 423,
	Unlock_Primitive_Octagon = 424,
	Unlock_Primitive_DiamondConcave = 425,
	Unlock_Primitive_Trapezium = 426,
	Unlock_Primitive_CircleQuarter = 427,
	Unlock_Primitive_CrescentThin = 428,
	Unlock_Primitive_Curve04 = 429,
	Unlock_Primitive_Curve01 = 430,
	Unlock_Primitive_Curve02 = 431,
	Unlock_Primitive_SimpleSpike03 = 432,
	Unlock_Primitive_Tribal06 = 433,
	Unlock_Primitive_Tribal08 = 434,
	Unlock_Primitive_Tribal09 = 435,
	Unlock_Primitive_Tribal15 = 436,
	Unlock_Primitive_Tribal21 = 437,
	Unlock_Primitive_Tribal12 = 438,
	Unlock_Primitive_Check02 = 439,
	Unlock_Primitive_Check03 = 440,
	Unlock_Primitive_Check04 = 441,
	Unlock_Primitive_Lines01 = 442,
	Unlock_Primitive_Lines02 = 443,
	Unlock_Primitive_Lines03 = 444,
	Unlock_Primitive_Lines04 = 445,
	Unlock_Primitive_Grid01 = 446,
	Unlock_Primitive_Dots02 = 447,
	Unlock_Primitive_Dots03 = 448,
	Unlock_Primitive_Dots04 = 449,
	Unlock_Primitive_Dots06 = 450,
	Unlock_Primitive_Figure01 = 451,
	Unlock_Primitive_Lips01 = 452,
	Unlock_Primitive_Lips02 = 453,
	Unlock_Primitive_Mouth01 = 454,
	Unlock_Primitive_Eye01 = 455,
	Unlock_Primitive_Eye02 = 456,
	Unlock_Primitive_Hand01 = 457,
	Unlock_Primitive_Hand03 = 458,
	Unlock_Primitive_Hand04 = 459,
	Unlock_Primitive_Hand05 = 460,
	Unlock_Primitive_Hand07 = 461,
	Unlock_Primitive_Head01 = 462,
	Unlock_Primitive_Head02 = 463,
	Unlock_Primitive_Linework01 = 464,
	Unlock_Primitive_Linework02 = 465,
	Unlock_Primitive_Linework03 = 466,
	Unlock_Primitive_Linework04 = 467,
	Unlock_Primitive_Linework05 = 468,
	Unlock_Primitive_Linework06 = 469,
	Unlock_Primitive_TribalFace = 470,
	Unlock_Primitive_Clown01 = 471,
	Unlock_Primitive_Bone = 472,
	Unlock_Primitive_Skull04 = 473,
	Unlock_Primitive_Skull05 = 474,
	Unlock_Primitive_Skull02 = 475,
	Unlock_Primitive_HorrorFace03 = 476,
	Unlock_Primitive_Brain = 477,
	Unlock_Primitive_Crown01 = 478,
	Unlock_Primitive_Crown02 = 479,
	Unlock_Primitive_Dragon01 = 480,
	Unlock_Primitive_Scroll01 = 481,
	Unlock_Primitive_Banner01 = 482,
	Unlock_Primitive_Banner02 = 483,
	Unlock_Primitive_Chimera = 484,
	Unlock_Primitive_Wing02 = 485,
	Unlock_Primitive_Wing03 = 486,
	Unlock_Primitive_Wing04 = 487,
	Unlock_Primitive_Flourish01 = 488,
	Unlock_Primitive_Flourish05 = 489,
	Unlock_Primitive_Flourish06 = 490,
	Unlock_Primitive_Flourish07 = 491,
	Unlock_Primitive_Flourish08 = 492,
	Unlock_Primitive_Flourish11 = 493,
	Unlock_Primitive_Flourish12 = 494,
	Unlock_Primitive_Flourish13 = 495,
	Unlock_Primitive_Box01 = 496,
	Unlock_Primitive_Box02 = 497,
	Unlock_Primitive_Box03 = 498,
	Unlock_Primitive_FlourishAngular01 = 499,
	Unlock_Primitive_FlourishAngular02 = 500,
	Unlock_Primitive_FlourishAngular03 = 501,
	Unlock_Primitive_FlourishAngular04 = 502,
	Unlock_Primitive_FlourishAngular05 = 503,
	Unlock_Primitive_FlourishAngular06 = 504,
	Unlock_Primitive_FlourishAngular07 = 505,
	Unlock_Primitive_Cog02 = 506,
	Unlock_Primitive_Beams02 = 507,
	Unlock_Primitive_Beams03 = 508,
	Unlock_Primitive_Beams05 = 509,
	Unlock_Primitive_Pattern01 = 510,
	Unlock_Primitive_Pattern03 = 511,
	Unlock_Primitive_Pattern04 = 512,
	Unlock_Primitive_Pattern05 = 513,
	Unlock_Primitive_Pattern06 = 514,
	Unlock_Primitive_Pattern08 = 515,
	Unlock_Primitive_Swirls04 = 516,
	Unlock_Primitive_Swirls05 = 517,
	Unlock_Primitive_Swirls06 = 518,
	Unlock_Primitive_Swirls07 = 519,
	Unlock_Primitive_Circles04 = 520,
	Unlock_Primitive_Circles05 = 521,
	Unlock_Primitive_Circles06 = 522,
	Unlock_Primitive_Rainbow01 = 523,
	Unlock_Primitive_Rainbow02 = 524,
	Unlock_Primitive_Rainbow03 = 525,
	Unlock_Primitive_Web = 526,
	Unlock_Primitive_Weave = 527,
	Unlock_Primitive_Barcode = 528,
	Unlock_Primitive_NewsPrint = 529,
	Unlock_Primitive_ZebraStripe = 530,
	Unlock_Primitive_Drop01 = 531,
	Unlock_Primitive_Drop03 = 532,
	Unlock_Primitive_Flash01 = 533,
	Unlock_Primitive_Flash02 = 534,
	Unlock_Primitive_Whirl01 = 535,
	Unlock_Primitive_Cloud04 = 536,
	Unlock_Primitive_Cloud03 = 537,
	Unlock_Primitive_Tiger01 = 538,
	Unlock_Primitive_Tiger02 = 539,
	Unlock_Primitive_Fish01 = 540,
	Unlock_Primitive_Bird01 = 541,
	Unlock_Primitive_Butterfly = 542,
	Unlock_Primitive_Bird02 = 543,
	Unlock_Primitive_FlourishNature01 = 544,
	Unlock_Primitive_Leaf07 = 545,
	Unlock_Primitive_Leaf06 = 546,
	Unlock_Primitive_Cloud06 = 547,
	Unlock_Primitive_Leaf04 = 548,
	Unlock_Primitive_Leaf03 = 549,
	Unlock_Primitive_Flower03 = 550,
	Unlock_Primitive_Flower02 = 551,
	Unlock_Primitive_Headphones01 = 552,
	Unlock_Primitive_Tape = 553,
	Unlock_Primitive_Guitar = 554,
	Unlock_Primitive_Record = 555,
	Unlock_Primitive_Font_Bubble_A = 556,
	Unlock_Primitive_Font_Bubble_B = 557,
	Unlock_Primitive_Font_Bubble_C = 558,
	Unlock_Primitive_Font_Bubble_D = 559,
	Unlock_Primitive_Font_Bubble_E = 560,
	Unlock_Primitive_Font_Bubble_F = 561,
	Unlock_Primitive_Font_Bubble_G = 562,
	Unlock_Primitive_Font_Bubble_H = 563,
	Unlock_Primitive_Font_Bubble_I = 564,
	Unlock_Primitive_Font_Bubble_J = 565,
	Unlock_Primitive_Font_Bubble_K = 566,
	Unlock_Primitive_Font_Bubble_L = 567,
	Unlock_Primitive_Font_Bubble_M = 568,
	Unlock_Primitive_Font_Bubble_N = 569,
	Unlock_Primitive_Font_Bubble_O = 570,
	Unlock_Primitive_Font_Bubble_P = 571,
	Unlock_Primitive_Font_Bubble_Q = 572,
	Unlock_Primitive_Font_Bubble_R = 573,
	Unlock_Primitive_Font_Bubble_S = 574,
	Unlock_Primitive_Font_Bubble_T = 575,
	Unlock_Primitive_Font_Bubble_U = 576,
	Unlock_Primitive_Font_Bubble_V = 577,
	Unlock_Primitive_Font_Bubble_W = 578,
	Unlock_Primitive_Font_Bubble_X = 579,
	Unlock_Primitive_Font_Bubble_Y = 580,
	Unlock_Primitive_Font_Bubble_Z = 581,
	Unlock_Primitive_Font_Tag_A = 582,
	Unlock_Primitive_Font_Tag_B = 583,
	Unlock_Primitive_Font_Tag_C = 584,
	Unlock_Primitive_Font_Tag_D = 585,
	Unlock_Primitive_Font_Tag_E = 586,
	Unlock_Primitive_Font_Tag_F = 587,
	Unlock_Primitive_Font_Tag_G = 588,
	Unlock_Primitive_Font_Tag_H = 589,
	Unlock_Primitive_Font_Tag_I = 590,
	Unlock_Primitive_Font_Tag_J = 591,
	Unlock_Primitive_Font_Tag_K = 592,
	Unlock_Primitive_Font_Tag_L = 593,
	Unlock_Primitive_Font_Tag_M = 594,
	Unlock_Primitive_Font_Tag_N = 595,
	Unlock_Primitive_Font_Tag_O = 596,
	Unlock_Primitive_Font_Tag_P = 597,
	Unlock_Primitive_Font_Tag_Q = 598,
	Unlock_Primitive_Font_Tag_R = 599,
	Unlock_Primitive_Font_Tag_S = 600,
	Unlock_Primitive_Font_Tag_T = 601,
	Unlock_Primitive_Font_Tag_U = 602,
	Unlock_Primitive_Font_Tag_V = 603,
	Unlock_Primitive_Font_Tag_W = 604,
	Unlock_Primitive_Font_Tag_X = 605,
	Unlock_Primitive_Font_Tag_Y = 606,
	Unlock_Primitive_Font_Tag_Z = 607,
	Unlock_Primitive_Font_GothicUpper_A = 608,
	Unlock_Primitive_Font_GothicUpper_B = 609,
	Unlock_Primitive_Font_GothicUpper_C = 610,
	Unlock_Primitive_Font_GothicUpper_D = 611,
	Unlock_Primitive_Font_GothicUpper_E = 612,
	Unlock_Primitive_Font_GothicUpper_F = 613,
	Unlock_Primitive_Font_GothicUpper_G = 614,
	Unlock_Primitive_Font_GothicUpper_H = 615,
	Unlock_Primitive_Font_GothicUpper_I = 616,
	Unlock_Primitive_Font_GothicUpper_J = 617,
	Unlock_Primitive_Font_GothicUpper_K = 618,
	Unlock_Primitive_Font_GothicUpper_L = 619,
	Unlock_Primitive_Font_GothicUpper_M = 620,
	Unlock_Primitive_Font_GothicUpper_N = 621,
	Unlock_Primitive_Font_GothicUpper_O = 622,
	Unlock_Primitive_Font_GothicUpper_P = 623,
	Unlock_Primitive_Font_GothicUpper_Q = 624,
	Unlock_Primitive_Font_GothicUpper_R = 625,
	Unlock_Primitive_Font_GothicUpper_S = 626,
	Unlock_Primitive_Font_GothicUpper_T = 627,
	Unlock_Primitive_Font_GothicUpper_U = 628,
	Unlock_Primitive_Font_GothicUpper_V = 629,
	Unlock_Primitive_Font_GothicUpper_W = 630,
	Unlock_Primitive_Font_GothicUpper_X = 631,
	Unlock_Primitive_Font_GothicUpper_Y = 632,
	Unlock_Primitive_Font_GothicUpper_Z = 633,
	Unlock_Primitive_Font_Scratch_A = 634,
	Unlock_Primitive_Font_Scratch_B = 635,
	Unlock_Primitive_Font_Scratch_C = 636,
	Unlock_Primitive_Font_Scratch_D = 637,
	Unlock_Primitive_Font_Scratch_E = 638,
	Unlock_Primitive_Font_Scratch_F = 639,
	Unlock_Primitive_Font_Scratch_G = 640,
	Unlock_Primitive_Font_Scratch_H = 641,
	Unlock_Primitive_Font_Scratch_I = 642,
	Unlock_Primitive_Font_Scratch_J = 643,
	Unlock_Primitive_Font_Scratch_K = 644,
	Unlock_Primitive_Font_Scratch_L = 645,
	Unlock_Primitive_Font_Scratch_M = 646,
	Unlock_Primitive_Font_Scratch_N = 647,
	Unlock_Primitive_Font_Scratch_O = 648,
	Unlock_Primitive_Font_Scratch_P = 649,
	Unlock_Primitive_Font_Scratch_Q = 650,
	Unlock_Primitive_Font_Scratch_R = 651,
	Unlock_Primitive_Font_Scratch_S = 652,
	Unlock_Primitive_Font_Scratch_T = 653,
	Unlock_Primitive_Font_Scratch_U = 654,
	Unlock_Primitive_Font_Scratch_V = 655,
	Unlock_Primitive_Font_Scratch_W = 656,
	Unlock_Primitive_Font_Scratch_X = 657,
	Unlock_Primitive_Font_Scratch_Y = 658,
	Unlock_Primitive_Font_Scratch_Z = 659,
	Unlock_Primitive_Foot01 = 660,
	Unlock_Primitive_Flower04 = 661,
	Unlock_Primitive_Butterfly02 = 662,
	Unlock_Primitive_TV = 663,
	Unlock_Primitive_Teddy = 664,
	Unlock_Primitive_Glasses01 = 665,
	Unlock_Primitive_Cap01 = 666,
	Unlock_Primitive_Bag01 = 667,
	Unlock_Primitive_Money01 = 668,
	Unlock_Primitive_Poop = 669,
	Unlock_Primitive_Dics01 = 670,
	Unlock_Primitive_Bubble01 = 671,
	Unlock_Primitive_Bubble02 = 672,
	Unlock_Primitive_Hole01 = 673,
	Unlock_Primitive_GasMask02 = 674,
	Unlock_Primitive_GasMask03 = 675,
	Unlock_Primitive_Screw = 676,
	Unlock_Primitive_Grenade01 = 677,
	Unlock_Primitive_Gun01 = 678,
	Unlock_Primitive_Gun04 = 679,
	Unlock_Primitive_Bomb = 680,
	Unlock_Primitive_Axe = 681,
	Unlock_Primitive_Bullet02 = 682,
	Unlock_Primitive_Bullet03 = 683,
	Unlock_Primitive_Knuckles = 684,
	Unlock_Primitive_MusicNote = 685,
	Unlock_Primitive_Stave = 686,
	Unlock_Primitive_LineCurve03 = 687,
	Unlock_Primitive_GradientCircle01 = 688,
	Unlock_Primitive_GradientCircle02 = 689,
	Unlock_Primitive_GradientCloud = 690,
	Unlock_Primitive_TextureTest09 = 691,
	Unlock_Primitive_BlockCorner01 = 692,
	Unlock_Primitive_BlockCorner02 = 693,
	Unlock_Primitive_CircleInvert = 694,
	Unlock_Primitive_Egg = 695,
	Unlock_Primitive_Lines09 = 696,
	Unlock_Primitive_Tribal22 = 697,
	Unlock_Primitive_Tribal23 = 698,
	Unlock_Primitive_Flame12 = 699,
	Unlock_Primitive_GradientSquare = 700,
	Unlock_Primitive_Decal_PreOrder = 701,
	Unlock_Primitive_MAX = 702,
};
enum etScaleformIcon
{
	None = 0,
	UI_Crim_Rating_0000 = 1,
	UI_Crim_Rating_0000 = 2,
	UI_Crim_Rating_0000 = 3,
	UI_Crim_Rating_0000 = 4,
	UI_Crim_Rating_0010 = 5,
	UI_Crim_Rating_0010 = 6,
	UI_Crim_Rating_0010 = 7,
	UI_Crim_Rating_0010 = 8,
	UI_Crim_Rating_0020 = 9,
	UI_Crim_Rating_0020 = 10,
	UI_Crim_Rating_0020 = 11,
	UI_Crim_Rating_0020 = 12,
	UI_Crim_Rating_0030 = 13,
	UI_Crim_Rating_0030 = 14,
	UI_Crim_Rating_0030 = 15,
	UI_Crim_Rating_0030 = 16,
	UI_Crim_Rating_0040 = 17,
	UI_Crim_Rating_0040 = 18,
	UI_Crim_Rating_0040 = 19,
	UI_Crim_Rating_0040 = 20,
	UI_Crim_Rating_0050 = 21,
	UI_Crim_Rating_0050 = 22,
	UI_Crim_Rating_0050 = 23,
	UI_Crim_Rating_0050 = 24,
	UI_Crim_Rating_0060 = 25,
	UI_Crim_Rating_0060 = 26,
	UI_Crim_Rating_0060 = 27,
	UI_Crim_Rating_0060 = 28,
	UI_Crim_Rating_0070 = 29,
	UI_Crim_Rating_0070 = 30,
	UI_Crim_Rating_0070 = 31,
	UI_Crim_Rating_0070 = 32,
	UI_Crim_Rating_0080 = 33,
	UI_Crim_Rating_0080 = 34,
	UI_Crim_Rating_0080 = 35,
	UI_Crim_Rating_0080 = 36,
	UI_Crim_Rating_0090 = 37,
	UI_Crim_Rating_0090 = 38,
	UI_Crim_Rating_0090 = 39,
	UI_Crim_Rating_0090 = 40,
	UI_Crim_Rating_0100 = 41,
	UI_Crim_Rating_0100 = 42,
	UI_Crim_Rating_0100 = 43,
	UI_Crim_Rating_0100 = 44,
	UI_Crim_Rating_0110 = 45,
	UI_Crim_Rating_0110 = 46,
	UI_Crim_Rating_0110 = 47,
	UI_Crim_Rating_0110 = 48,
	UI_Crim_Rating_0120 = 49,
	UI_Crim_Rating_0120 = 50,
	UI_Crim_Rating_0120 = 51,
	UI_Crim_Rating_0120 = 52,
	UI_Crim_Rating_0130 = 53,
	UI_Crim_Rating_0130 = 54,
	UI_Crim_Rating_0130 = 55,
	UI_Crim_Rating_0130 = 56,
	UI_Crim_Rating_0140 = 57,
	UI_Crim_Rating_0140 = 58,
	UI_Crim_Rating_0140 = 59,
	UI_Crim_Rating_0140 = 60,
	UI_Crim_Rating_0150 = 61,
	UI_Crim_Rating_0150 = 62,
	UI_Crim_Rating_0150 = 63,
	UI_Crim_Rating_0150 = 64,
	UI_Crim_Rating_0160 = 65,
	UI_Crim_Rating_0160 = 66,
	UI_Crim_Rating_0160 = 67,
	UI_Crim_Rating_0160 = 68,
	UI_Crim_Rating_0170 = 69,
	UI_Crim_Rating_0170 = 70,
	UI_Crim_Rating_0170 = 71,
	UI_Crim_Rating_0170 = 72,
	UI_Crim_Rating_0180 = 73,
	UI_Crim_Rating_0180 = 74,
	UI_Crim_Rating_0180 = 75,
	UI_Crim_Rating_0180 = 76,
	UI_Crim_Rating_0190 = 77,
	UI_Crim_Rating_0190 = 78,
	UI_Crim_Rating_0190 = 79,
	UI_Crim_Rating_0190 = 80,
	UI_Crim_Rating_0205 = 81,
	UI_Crim_Rating_0205 = 82,
	UI_Crim_Rating_0205 = 83,
	UI_Crim_Rating_0205 = 84,
	UI_Crim_Rating_0215 = 85,
	UI_Crim_Rating_0215 = 86,
	UI_Crim_Rating_0215 = 87,
	UI_Crim_Rating_0215 = 88,
	UI_Crim_Rating_0225 = 89,
	UI_Crim_Rating_0225 = 90,
	UI_Crim_Rating_0225 = 91,
	UI_Crim_Rating_0225 = 92,
	UI_Crim_Rating_0235 = 93,
	UI_Crim_Rating_0235 = 94,
	UI_Crim_Rating_0235 = 95,
	UI_Crim_Rating_0235 = 96,
	UI_Crim_Rating_0245 = 97,
	UI_Crim_Rating_0245 = 98,
	UI_Crim_Rating_0245 = 99,
	UI_Crim_Rating_0245 = 100,
	UI_Crim_Rating_0255 = 101,
	UI_Crim_Rating_0255 = 102,
	UI_Crim_Rating_0255 = 103,
	UI_Crim_Rating_0255 = 104,
	UI_Crim_Rating_0265 = 105,
	UI_Crim_Rating_0265 = 106,
	UI_Crim_Rating_0265 = 107,
	UI_Crim_Rating_0265 = 108,
	UI_Crim_Rating_0275 = 109,
	UI_Crim_Rating_0275 = 110,
	UI_Crim_Rating_0275 = 111,
	UI_Crim_Rating_0275 = 112,
	UI_Crim_Rating_0285 = 113,
	UI_Crim_Rating_0285 = 114,
	UI_Crim_Rating_0285 = 115,
	UI_Crim_Rating_0285 = 116,
	UI_Crim_Rating_0295 = 117,
	UI_Crim_Rating_0295 = 118,
	UI_Crim_Rating_0295 = 119,
	UI_Crim_Rating_0295 = 120,
	UI_Crim_Training = 121,
	UI_Enf_Rating_0000 = 122,
	UI_Enf_Rating_0000 = 123,
	UI_Enf_Rating_0000 = 124,
	UI_Enf_Rating_0000 = 125,
	UI_Enf_Rating_0010 = 126,
	UI_Enf_Rating_0010 = 127,
	UI_Enf_Rating_0010 = 128,
	UI_Enf_Rating_0010 = 129,
	UI_Enf_Rating_0020 = 130,
	UI_Enf_Rating_0020 = 131,
	UI_Enf_Rating_0020 = 132,
	UI_Enf_Rating_0020 = 133,
	UI_Enf_Rating_0030 = 134,
	UI_Enf_Rating_0030 = 135,
	UI_Enf_Rating_0030 = 136,
	UI_Enf_Rating_0030 = 137,
	UI_Enf_Rating_0040 = 138,
	UI_Enf_Rating_0040 = 139,
	UI_Enf_Rating_0040 = 140,
	UI_Enf_Rating_0040 = 141,
	UI_Enf_Rating_0050 = 142,
	UI_Enf_Rating_0050 = 143,
	UI_Enf_Rating_0050 = 144,
	UI_Enf_Rating_0050 = 145,
	UI_Enf_Rating_0060 = 146,
	UI_Enf_Rating_0060 = 147,
	UI_Enf_Rating_0060 = 148,
	UI_Enf_Rating_0060 = 149,
	UI_Enf_Rating_0070 = 150,
	UI_Enf_Rating_0070 = 151,
	UI_Enf_Rating_0070 = 152,
	UI_Enf_Rating_0070 = 153,
	UI_Enf_Rating_0080 = 154,
	UI_Enf_Rating_0080 = 155,
	UI_Enf_Rating_0080 = 156,
	UI_Enf_Rating_0080 = 157,
	UI_Enf_Rating_0090 = 158,
	UI_Enf_Rating_0090 = 159,
	UI_Enf_Rating_0090 = 160,
	UI_Enf_Rating_0090 = 161,
	UI_Enf_Rating_0100 = 162,
	UI_Enf_Rating_0100 = 163,
	UI_Enf_Rating_0100 = 164,
	UI_Enf_Rating_0100 = 165,
	UI_Enf_Rating_0110 = 166,
	UI_Enf_Rating_0110 = 167,
	UI_Enf_Rating_0110 = 168,
	UI_Enf_Rating_0110 = 169,
	UI_Enf_Rating_0120 = 170,
	UI_Enf_Rating_0120 = 171,
	UI_Enf_Rating_0120 = 172,
	UI_Enf_Rating_0120 = 173,
	UI_Enf_Rating_0130 = 174,
	UI_Enf_Rating_0130 = 175,
	UI_Enf_Rating_0130 = 176,
	UI_Enf_Rating_0130 = 177,
	UI_Enf_Rating_0140 = 178,
	UI_Enf_Rating_0140 = 179,
	UI_Enf_Rating_0140 = 180,
	UI_Enf_Rating_0140 = 181,
	UI_Enf_Rating_0150 = 182,
	UI_Enf_Rating_0150 = 183,
	UI_Enf_Rating_0150 = 184,
	UI_Enf_Rating_0150 = 185,
	UI_Enf_Rating_0160 = 186,
	UI_Enf_Rating_0160 = 187,
	UI_Enf_Rating_0160 = 188,
	UI_Enf_Rating_0160 = 189,
	UI_Enf_Rating_0170 = 190,
	UI_Enf_Rating_0170 = 191,
	UI_Enf_Rating_0170 = 192,
	UI_Enf_Rating_0170 = 193,
	UI_Enf_Rating_0180 = 194,
	UI_Enf_Rating_0180 = 195,
	UI_Enf_Rating_0180 = 196,
	UI_Enf_Rating_0180 = 197,
	UI_Enf_Rating_0190 = 198,
	UI_Enf_Rating_0190 = 199,
	UI_Enf_Rating_0190 = 200,
	UI_Enf_Rating_0190 = 201,
	UI_Enf_Rating_0205 = 202,
	UI_Enf_Rating_0205 = 203,
	UI_Enf_Rating_0205 = 204,
	UI_Enf_Rating_0205 = 205,
	UI_Enf_Rating_0215 = 206,
	UI_Enf_Rating_0215 = 207,
	UI_Enf_Rating_0215 = 208,
	UI_Enf_Rating_0215 = 209,
	UI_Enf_Rating_0225 = 210,
	UI_Enf_Rating_0225 = 211,
	UI_Enf_Rating_0225 = 212,
	UI_Enf_Rating_0225 = 213,
	UI_Enf_Rating_0235 = 214,
	UI_Enf_Rating_0235 = 215,
	UI_Enf_Rating_0235 = 216,
	UI_Enf_Rating_0235 = 217,
	UI_Enf_Rating_0245 = 218,
	UI_Enf_Rating_0245 = 219,
	UI_Enf_Rating_0245 = 220,
	UI_Enf_Rating_0245 = 221,
	UI_Enf_Rating_0255 = 222,
	UI_Enf_Rating_0255 = 223,
	UI_Enf_Rating_0255 = 224,
	UI_Enf_Rating_0255 = 225,
	UI_Enf_Rating_0265 = 226,
	UI_Enf_Rating_0265 = 227,
	UI_Enf_Rating_0265 = 228,
	UI_Enf_Rating_0265 = 229,
	UI_Enf_Rating_0275 = 230,
	UI_Enf_Rating_0275 = 231,
	UI_Enf_Rating_0275 = 232,
	UI_Enf_Rating_0275 = 233,
	UI_Enf_Rating_0285 = 234,
	UI_Enf_Rating_0285 = 235,
	UI_Enf_Rating_0285 = 236,
	UI_Enf_Rating_0285 = 237,
	UI_Enf_Rating_0295 = 238,
	UI_Enf_Rating_0295 = 239,
	UI_Enf_Rating_0295 = 240,
	UI_Enf_Rating_0295 = 241,
	UI_Enf_Training = 242,
	UI_TitleIcon_CharacterCreate = 243,
	UI_TitleIcon_CharacterSelect = 244,
	UI_TitleIcon_Criminal = 245,
	UI_TitleIcon_Enforcer = 246,
	UI_TitleIcon_Login = 247,
	etScaleformIcon_MAX = 248,
};
enum etScaleformLayer
{
	None = 0,
	HUD = 1,
	Background = 2,
	FullScreenWindows = 3,
	PopOverWindows = 4,
	ModalPopOverWindows = 5,
	NonModalDialogs = 6,
	ModalDialogs = 7,
	Overlay = 8,
	etScaleformLayer_MAX = 9,
};
enum etSceneLayer
{
	None = 0,
	HUDWorldSpace = 1,
	HUD_FullScreenEffect = 2,
	HUD2D = 3,
	DistrictMap = 4,
	AcceptDecline = 5,
	HUD2D_DistrictMap = 6,
	FactionSelect = 7,
	CustomisationCanvas = 8,
	CustomisationScene = 9,
	CustomisationMain = 10,
	MainDialog = 11,
	EscapeMenu = 12,
	StorageInventory = 13,
	MusicPlayback = 14,
	Scoreboard = 15,
	FrontEnd = 16,
	OptionsMenu = 17,
	WebBrowser = 18,
	ContextPanel = 19,
	ProgressCircle = 20,
	ChatDialog = 21,
	ChatCommands = 22,
	ChatHUD = 23,
	MessageDialog = 24,
	PopupDialogs = 25,
	DiagnosticToolsLayer = 26,
	CustomisationLoadingSceneLayer = 27,
	MusicPlaybackHUD = 28,
	etSceneLayer_MAX = 29,
};
enum etScoreboardDescription
{
	Column_Arrests = 0,
	Column_Assists = 1,
	Column_BestAssists = 2,
	Column_BestKills = 3,
	Column_BestScore = 4,
	Column_Cash = 5,
	Column_CashPremium = 6,
	Column_Deaths = 7,
	Column_Kills = 8,
	Column_MVP = 9,
	Column_Medals = 10,
	Column_PlayerName = 11,
	Column_Score = 12,
	Column_Side = 13,
	Column_Standing = 14,
	Column_StandingPremium = 15,
	Column_Targets = 16,
	Column_Threat = 17,
	Column_Time = 18,
	Column_TimeAlive = 19,
	Column_TotalDeaths = 20,
	Column_TotalKills = 21,
	Column_MAX = 22,
};
enum etShopUIFilter
{
	Ammo = 0,
	Armory_ItemCat_Ammo = 1,
	ItemCat_All = 2,
	None = 3,
	Armory_CustomisableCharcter_FnMod = 4,
	Armory_CustomisableVehicle_FnMod = 5,
	Armory_CustomisableWeapon_FnMod = 6,
	Bindable_Character = 7,
	Bindable_Vehicle = 8,
	ClothingCat_Accessory_Clothing = 9,
	ClothingCat_Accessory_Equipment = 10,
	ClothingCat_Accessory_Other = 11,
	ClothingCat_Armour_Pads = 12,
	ClothingCat_Armour_Vests = 13,
	ClothingCat_Belt_High = 14,
	ClothingCat_Belt_Loose = 15,
	ClothingCat_Belt_Low = 16,
	ClothingCat_Bottoms_Shorts = 17,
	ClothingCat_Bottoms_Trousers = 18,
	ClothingCat_Eyewear_Glasses = 19,
	ClothingCat_Eyewear_Other = 20,
	ClothingCat_Eyewear_Sunglasses = 21,
	ClothingCat_Footwear_Boots = 22,
	ClothingCat_Footwear_Shoes = 23,
	ClothingCat_Footwear_Socks = 24,
	ClothingCat_Handwear_Gloves = 25,
	ClothingCat_Handwear_Other = 26,
	ClothingCat_Headwear_Hats = 27,
	ClothingCat_Headwear_Other = 28,
	ClothingCat_Jewelry_Bracelets = 29,
	ClothingCat_Jewelry_Earrings = 30,
	ClothingCat_Jewelry_Necklaces = 31,
	ClothingCat_Jewelry_Other = 32,
	ClothingCat_Jewelry_Piercing = 33,
	ClothingCat_Jewelry_Rings = 34,
	ClothingCat_MaskFace = 35,
	ClothingCat_MaskHalf = 36,
	ClothingCat_MaskHead = 37,
	ClothingCat_Overall = 38,
	ClothingCat_SkirtsAndDresses_Dresses = 39,
	ClothingCat_SkirtsAndDresses_Skirts = 40,
	ClothingCat_Tops_Coat = 41,
	ClothingCat_Tops_Tops = 42,
	ClothingCat_Underwear_Bra = 43,
	ClothingCat_Underwear_Hosiery = 44,
	ClothingCat_Underwear_Pants = 45,
	ClothingCat_Webbing_Basic = 46,
	ClothingCat_Webbing_ChestConfig = 47,
	ClothingCat_Webbing_LegConfig = 48,
	ClothingCat_Webbing_ShoulderConfig = 49,
	DeployItemCat_Weapon_AssaultRifle = 50,
	DeployItemCat_Weapon_Christmas = 51,
	DeployItemCat_Weapon_CrowdControl = 52,
	DeployItemCat_Weapon_Explosives = 53,
	DeployItemCat_Weapon_HeavyMachineGun = 54,
	DeployItemCat_Weapon_SemiAutoRifle = 55,
	DeployItemCat_Weapon_Shotgun = 56,
	DeployItemCat_Weapon_SniperRifle = 57,
	DeployItemCat_Weapon_SubMachineGun = 58,
	DeployItemCat_Weapon_ValentinePrimary = 59,
	Deploy_SelectEquipment = 60,
	Deploy_SelectOutfit = 61,
	Deploy_SelectSymbol = 62,
	Deploy_SelectTheme = 63,
	Deploy_SelectUsableToken = 64,
	Deploy_SelectVehicle = 65,
	Deploy_SelectWeapon_Grenade = 66,
	Deploy_SelectWeapon_Primary = 67,
	Deploy_SelectWeapon_Secondary = 68,
	ItemCat_Clothing = 69,
	ItemCat_Clothing_Transferable = 70,
	ItemCat_DisplayPointToken = 71,
	ItemCat_DisplayPointToken_Transferable = 72,
	ItemCat_Equipment = 73,
	ItemCat_Equipment_Transferable = 74,
	ItemCat_FnMod = 75,
	ItemCat_FnMod_Character = 76,
	ItemCat_FnMod_Transferable = 77,
	ItemCat_FnMod_UsableTokens = 78,
	ItemCat_FnMod_Vehicle = 79,
	ItemCat_FnMod_Weapon = 80,
	ItemCat_Outfit = 81,
	ItemCat_Song = 82,
	ItemCat_Song_Transferable = 83,
	ItemCat_Symbol = 84,
	ItemCat_Symbol_Transferable = 85,
	ItemCat_Theme = 86,
	ItemCat_Theme_Transferable = 87,
	ItemCat_UsableToken = 88,
	ItemCat_UsableToken_Transferable = 89,
	ItemCat_Vehicle = 90,
	ItemCat_Vehicle_Transferable = 91,
	ItemCat_Weapon = 92,
	ItemCat_WeaponAllButGrenades = 93,
	ItemCat_Weapon_Primary = 94,
	ItemCat_Weapon_Secondary = 95,
	ItemCat_Weapon_Transferable = 96,
	ItemSubCat_Clothing_Accessory = 97,
	ItemSubCat_Clothing_Armour = 98,
	ItemSubCat_Clothing_Badges = 99,
	ItemSubCat_Clothing_Belts = 100,
	ItemSubCat_Clothing_Bottoms = 101,
	ItemSubCat_Clothing_Contact = 102,
	ItemSubCat_Clothing_Eyewear = 103,
	ItemSubCat_Clothing_Footwear = 104,
	ItemSubCat_Clothing_Handwear = 105,
	ItemSubCat_Clothing_Headwear = 106,
	ItemSubCat_Clothing_Jewellery = 107,
	ItemSubCat_Clothing_Masks = 108,
	ItemSubCat_Clothing_NotForRelease = 109,
	ItemSubCat_Clothing_Overall = 110,
	ItemSubCat_Clothing_SkirtsAndDresses = 111,
	ItemSubCat_Clothing_Test = 112,
	ItemSubCat_Clothing_Top = 113,
	ItemSubCat_Clothing_Underwear = 114,
	ItemSubCat_Clothing_Webbing = 115,
	ItemSubCat_FnMod_Character = 116,
	ItemSubCat_FnMod_Vehicle = 117,
	ItemSubCat_FnMod_Weapon = 118,
	ItemSubCat_Vehicle_Car = 119,
	ItemSubCat_Vehicle_Truck = 120,
	ItemSubCat_Vehicle_Van = 121,
	ItemSubCat_Weapon_AssaultRifle = 122,
	ItemSubCat_Weapon_Christmas = 123,
	ItemSubCat_Weapon_CrowdControl = 124,
	ItemSubCat_Weapon_Explosives = 125,
	ItemSubCat_Weapon_HeavyMachineGun = 126,
	ItemSubCat_Weapon_Secondary = 127,
	ItemSubCat_Weapon_SemiAutoRifle = 128,
	ItemSubCat_Weapon_Shotgun = 129,
	ItemSubCat_Weapon_SniperRifle = 130,
	ItemSubCat_Weapon_SubMachineGun = 131,
	ItemSubCat_Weapon_Valentines = 132,
	JokerItemCat_All = 133,
	JokerItemCat_Consumables = 134,
	JokerItemCat_Modifications = 135,
	JokerItemCat_Vehicles = 136,
	JokerItemCat_Weapons = 137,
	JokerRewardCat_All = 138,
	JokerRewardCat_Outfits = 139,
	JokerRewardCat_Titles = 140,
	JokerRewardCat_VehicleKits = 141,
	JokerRewardSubCat_Vehicle_Car = 142,
	JokerRewardSubCat_Vehicle_Truck = 143,
	JokerRewardSubCat_WeaponSkins = 144,
	JokerRewardSubCat_Weapon_AssaultRifle = 145,
	JokerRewardSubCat_Weapon_Explosives = 146,
	JokerRewardSubCat_Weapon_LightMachineGun = 147,
	JokerRewardSubCat_Weapon_Rifle = 148,
	JokerRewardSubCat_Weapon_Secondary = 149,
	JokerRewardSubCat_Weapon_Shotgun = 150,
	JokerRewardSubCat_Weapon_SniperRifle = 151,
	JokerRewardSubCat_Weapon_SubMachineGun = 152,
	JokerSubCat_Modifications_Character = 153,
	JokerSubCat_Modifications_Vehicle = 154,
	JokerSubCat_Modifications_Weapon = 155,
	etShopUIFilter_MAX = 156,
};
enum etShopUIShop
{
	None = 0,
	Armory = 1,
	Armory_CustomisableCharacter_FnMod = 2,
	Armory_CustomisableVehicle_FnMod = 3,
	Armory_CustomisableWeapon_FnMod = 4,
	Deploy_SelectEquipment = 5,
	Deploy_SelectOutfit = 6,
	Deploy_SelectSymbol = 7,
	Deploy_SelectTheme = 8,
	Deploy_SelectUsableToken = 9,
	Deploy_SelectVehicle = 10,
	Deploy_SelectWeapon_Grenade = 11,
	Deploy_SelectWeapon_Primary = 12,
	Deploy_SelectWeapon_Secondary = 13,
	Fixer_BuyItems = 14,
	Fixer_BuyUnlocks = 15,
	Fixer_Sell = 16,
	Garage_Store = 17,
	Inventory_Browse = 18,
	Inventory_PurchaseAmmo = 19,
	Inventory_SelectAnyItem = 20,
	Inventory_SelectBindableCharacter = 21,
	Inventory_SelectBindableVehicle = 22,
	Inventory_SelectEquipment = 23,
	Inventory_SelectMail = 24,
	Inventory_SelectOutfit = 25,
	Inventory_SelectSellable = 26,
	Inventory_SelectSong = 27,
	Inventory_SelectSymbol = 28,
	Inventory_SelectTheme = 29,
	Inventory_SelectVehicle = 30,
	Inventory_SelectWeaponGrenade = 31,
	Inventory_SelectWeaponPrimary = 32,
	Inventory_SelectWeaponSecondary = 33,
	Joker_BuyItems = 34,
	Joker_BuyRewardPackages = 35,
	MusicStudio_ThemesAndSongs = 36,
	Wardrobe_Store = 37,
	etShopUIShop_MAX = 38,
};
enum etStreetName
{
	FinancialShianxi = 0,
	FinancialEmpire = 1,
	FinancialMain = 2,
	FinancialShianxiEmpire = 3,
	FinancialShianxiMain = 4,
	FinancialEmpireMain = 5,
	FinancialBreakwater = 6,
	FinancialBank = 7,
	FinancialExchange = 8,
	FinancialSilver = 9,
	FinancialBorder = 10,
	FinancialCanal = 11,
	FinancialBeach = 12,
	FinancialHook = 13,
	FinancialBroadway = 14,
	FinancialCross = 15,
	FinancialJuniper = 16,
	FinancialSchulz = 17,
	FinancialSipja = 18,
	FinancialGwangalli = 19,
	FinancialValencia = 20,
	FinancialConstitution = 21,
	FinancialPromenade = 22,
	FinancialHallassan = 23,
	FinancialMalaga = 24,
	FinancialCommercial = 25,
	FinancialUnion = 26,
	FinancialMerchant = 27,
	FinancialMercy = 28,
	FinancialSurgeons = 29,
	FinancialCervantes = 30,
	FinancialFortune = 31,
	FinancialGresty = 32,
	FinancialIncheon = 33,
	FinancialDonnaeko = 34,
	FinancialParkway = 35,
	FinancialJalgachi = 36,
	WaterfrontSandford = 37,
	WaterfrontCalledelmar = 38,
	WaterfrontApsan = 39,
	WaterfrontMarket = 40,
	WaterfrontJoseon = 41,
	WaterfrontPortland = 42,
	WaterfrontTrackside = 43,
	WaterfrontLading = 44,
	WaterfrontPalacio = 45,
	WaterfrontPlayadelPalacio = 46,
	WaterfrontTaegu = 47,
	WaterfrontCaminodelMar = 48,
	WaterfrontColony = 49,
	WaterfrontChandler = 50,
	WaterfrontGranada = 51,
	WaterfrontOldFleet = 52,
	WaterfrontMarshals = 53,
	WaterfrontDock = 54,
	WaterfrontSpica = 55,
	WaterfrontCharter = 56,
	WaterfrontUlsan = 57,
	WaterfrontNewHaven = 58,
	WaterfrontCadieux = 59,
	WaterfrontPiper = 60,
	WaterfrontBaywater = 61,
	WaterfrontSalina = 62,
	WaterfrontMillennium = 63,
	WaterfrontMcArthur = 64,
	WaterfrontNeritina = 65,
	WaterfrontFortuna = 66,
	WaterfrontCaminodelaBlanca = 67,
	WaterfrontLorquin = 68,
	WaterfrontSevilla = 69,
	WaterfrontDeion = 70,
	WaterfrontViaCasaSoleado = 71,
	WaterfrontFarve = 72,
	WaterfrontHaeinsa = 73,
	WaterfrontAbrams = 74,
	WaterfrontWard = 75,
	WaterfrontPrentiss = 76,
	FinancialEasy = 77,
	Financial_X_BreakwaterMain = 78,
	Financia_X_BankBreakwater = 79,
	Financial_X_BankExchange = 80,
	Financial_X_BankSilver = 81,
	Financial_X_CanalExchange = 82,
	Financial_X_CanalExchangeBorder = 83,
	Financial_X_BorderHook = 84,
	Financial_X_SchulzHook = 85,
	Financial_X_EmpireSilverExchange = 86,
	Financial_X_BeachMain = 87,
	Financial_X_JuniperBeach = 88,
	Financial_X_HallasanJuniper = 89,
	Financial_X_MalagaJuniper = 90,
	Financial_X_HallasanFortune = 91,
	Financial_X_MalagaFortune = 92,
	Financial_X_DonnaekoFortune = 93,
	Financial_X_DonnaekoMerchant = 94,
	Financial_X_JuniperMain = 95,
	Financial_X_ShianxiSchulzConstitution = 96,
	Financial_X_GrestyFortune = 97,
	Financial_X_GrestyMerchant = 98,
	Financial_X_GrestyUnion = 99,
	Financial_X_GrestyEasy = 100,
	Financial_X_MerchantUnion = 101,
	Financial_X_ValenciaMerchant = 102,
	Financial_X_MerchantSurgeon = 103,
	Financial_X_PromenadeMerchant = 104,
	Financial_X_PromenadeValencia = 105,
	Financial_X_SilverCross = 106,
	Financial_X_PromenadeFortuneUnion = 107,
	Financial_X_ValenciaMercy = 108,
	Financial_X_ValenciaParkway = 109,
	Financial_X_ValenciaEasy = 110,
	Financial_X_PromenadeConstitution = 111,
	Financial_X_BorderPromenade = 112,
	Financial_X_ValenciaPromenadeSilver = 113,
	Financial_X_CervantesValencia = 114,
	Financial_X_SurgeonMercy = 115,
	Financial_X_BorderParkwayMercy = 116,
	Financial_X_CervantesIncheon = 117,
	Financial_X_IncheonParkway = 118,
	Financial_X_CervantesGwangalliJagalchi = 119,
	Financial_X_GwangalliSipja = 120,
	Financial_X_SipjaCross = 121,
	Financial_X_BorderShianxi = 122,
	Financial_X_SilverShianxi = 123,
	Waterfront_X_SandfordDelMar = 124,
	Waterfront_X_JoseonTaeguDelMar = 125,
	Waterfront_X_TaeguCalledelMar = 126,
	Waterfront_X_JoseonTrackside = 127,
	Waterfront_X_JoseonMarket = 128,
	Waterfront_X_GranadaJoseon = 129,
	Waterfront_X_GranadaTrackside = 130,
	Waterfront_X_TaeguMarket = 131,
	Waterfront_X_CaminodelMarMarshals = 132,
	Waterfront_X_CalledelMarMarshals = 133,
	Waterfront_X_SandfordDelMarApsan = 134,
	Waterfront_X_ApsanCalledelMar = 135,
	Waterfront_X_TaeguApsan = 136,
	Waterfront_X_PortlandPalacio = 137,
	Waterfront_X_delPalacioPalacio = 138,
	Waterfront_X_delPalacioDelMar = 139,
	Waterfront_X_ColonyDelMar = 140,
	Waterfront_X_TaeguColony = 141,
	Waterfront_X_TaeguPortlandJoseon = 142,
	Waterfront_X_PortlandDelMar = 143,
	Waterfront_X_ColonyGranada = 144,
	Waterfront_X_GranadaChandler = 145,
	Waterfront_X_ChandlerTaegu = 146,
	Waterfront_X_ChandlerDelMar = 147,
	Waterfront_X_DockDelMar = 148,
	Waterfront_X_NewHavenDock = 149,
	Waterfront_X_DockSpica = 150,
	Waterfront_X_SpicaCharter = 151,
	Waterfront_X_MillenniumTaeguDelMar = 152,
	Waterfront_X_GranadaPiper = 153,
	Waterfront_X_SalinaGranada = 154,
	Waterfront_X_SalinaPiper = 155,
	Waterfront_X_SalinaCadieux = 156,
	Waterfront_X_CadieuxNewHaven = 157,
	Waterfront_X_UlsanDockMillennium = 158,
	Waterfront_X_MillenniumCharter = 159,
	Waterfront_X_MillenniumSpica = 160,
	Waterfront_X_OldFleetMillennium = 161,
	Waterfront_X_McArthurMillennium = 162,
	Waterfront_X_SevillaMillennium = 163,
	Waterfront_X_MillenniumPrentissNertinaWard = 164,
	Waterfront_X_HaeinsaWard = 165,
	Waterfront_X_CadieuxUlsan = 166,
	Waterfront_X_UlsanOldFleet = 167,
	Waterfront_X_BaywaterUlsan = 168,
	Waterfront_X_McArthurUlsanNertina = 169,
	Waterfront_X_NertinaFortuna = 170,
	Waterfront_X_FortunaLaBlanca = 171,
	Waterfront_X_LorquinLaBlanca = 172,
	Waterfront_X_SalinaLorquin = 173,
	Waterfront_X_SevillaLorquin = 174,
	Waterfront_X_McArthurLaBlanca = 175,
	Waterfront_X_NewHavenBaywaterLaBlanca = 176,
	Waterfront_X_SalinaSevilla = 177,
	Waterfront_X_McArthurSalina = 178,
	Waterfront_X_SevillaSoleadoLaBlanca = 179,
	Waterfront_X_SalinaSevillaPrentiss = 180,
	Waterfront_X_SevillaNertina = 181,
	Waterfront_X_FarveSoleado = 182,
	Waterfront_X_DeionSoleado = 183,
	Waterfront_X_NertinaDeion = 184,
	Waterfront_X_FarvePrentiss = 185,
	Waterfront_X_PrentissSoleadoWard = 186,
	Waterfront_X_HaeinsaWard1 = 187,
	Waterfront_X_HaeinsaWard2 = 188,
	Waterfront_X_PrentissAbrams = 189,
	Waterfront_X_HaeinsaAbrams = 190,
	etStreetName_MAX = 191,
};
enum etSymbolEditorMenuEntry
{
	Root_ = 0,
	SymbolEditor_Delete = 1,
	SymbolEditor_Load = 2,
	SymbolEditor_Save = 3,
	SymbolEditor_Rename = 4,
	etSymbolEditorMenuEntry_MAX = 5,
};
enum etTaskItemBoomBox
{
	None = 0,
	Basic = 1,
	etTaskItemBoomBox_MAX = 2,
};
enum etTaskItemTag
{
	None = 0,
	Bag = 1,
	Biohazard = 2,
	Bonds = 3,
	Briefcase = 4,
	Cash = 5,
	Clothing = 6,
	Drugs = 7,
	Electrical = 8,
	Equipment = 9,
	Event = 10,
	Evidence = 11,
	Generic = 12,
	Gold = 13,
	Jewellery = 14,
	LargeBox = 15,
	PDA = 16,
	Phone = 17,
	Safe = 18,
	SmallBox = 19,
	TV = 20,
	Weapons = 21,
	etTaskItemTag_MAX = 22,
};
enum etTaskItemVariety
{
	None = 0,
	BriefcaseAluminium = 1,
	BriefcaseSatchel = 2,
	BriefcaseShiny = 3,
	BriefcaseStandard = 4,
	CarryCase = 5,
	CarStereo = 6,
	CashBox_A = 7,
	CashBox_B = 8,
	Laptop_LowSpec = 9,
	Laptop_MedSpec = 10,
	Lg_GenericBox = 11,
	Microwave = 12,
	MobilePhone_BrandA = 13,
	MobilePhone_BrandB = 14,
	MobilePhone_BrandC = 15,
	MobilePhone_BrandD = 16,
	MoneyBag = 17,
	MultiPickup = 18,
	Necklace_A = 19,
	Necklace_B = 20,
	Necklace_C = 21,
	BankNoteBundle = 22,
	PDA_A = 23,
	PDA_B = 24,
	Safe = 25,
	SmallGenericBox = 26,
	TV_LargeCRT = 27,
	CarryBag = 28,
	BearerBonds = 29,
	BiohazardBarrel = 30,
	BiohazardCanister = 31,
	Camcorder = 32,
	EvidenceBag = 33,
	HardDrive = 34,
	PlasticCrate = 35,
	NuclearMaterial = 36,
	PCCase = 37,
	PetCarrier = 38,
	GunCase = 39,
	TreasureChest = 40,
	GuitarCase = 41,
	OrganTransport = 42,
	PortfolioCase = 43,
	AntistaticBag = 44,
	DVDCase = 45,
	GoldBar = 46,
	WhitePowder = 47,
	BoltCutters = 48,
	Crowbar = 49,
	CuttingTorch = 50,
	ExplosivesLevel1 = 51,
	ExplosivesLevel2 = 52,
	ExplosivesLevel3 = 53,
	ExplosivesLevel4 = 54,
	PoliceBadge = 55,
	Sword = 56,
	OpenWorldCashPoolItem = 57,
	Safe_Opposed = 58,
	PCCase_Opposed = 59,
	Laptop_MedSpec_Opposed = 60,
	OrganTransport_Opposed = 61,
	CarryCase_Opposed = 62,
	GunCase_Opposed = 63,
	BiohazardBarrell_Opposed = 64,
	Mobile_Cover = 65,
	FieldSupplier_Large = 66,
	SatchelCharge = 67,
	BoomBox = 68,
	Flag = 69,
	FieldSupplier_Medium = 70,
	Minigame_Drugs = 71,
	DevPackage = 72,
	Pumpkin = 73,
	TestPresent = 74,
	GiftBox_Christmas = 75,
	GiftBox_Prototype1 = 76,
	GiftBox_Prototype2 = 77,
	GiftBox_Joker = 78,
	GiftBox_Valentines = 79,
	etTaskItemVariety_MAX = 80,
};
enum etTaskTargetCheckpoint
{
	Checkpoint_SmallDropOff = 0,
	Checkpoint_VehicleDropOff = 1,
	Checkpoint_LargePedestrianRendezvous = 2,
	Checkpoint_Race = 3,
	Checkpoint_TerritoryControl = 4,
	Dropoff_Alley = 5,
	Dropoff_Hideout = 6,
	Dropoff_Lockup = 7,
	A_None = 8,
	Dropoff_Shop = 9,
	VehicleDropoff_Alley = 10,
	VehicleDropoff_Carpark = 11,
	VehicleDropoff_Lockup = 12,
	Checkpoint_SmallDropOff_Enforcer = 13,
	Checkpoint_SmallDropOff_Criminal = 14,
	OpenWorldDropoff_Criminals = 15,
	OpenWorldDropoff_Enforcers = 16,
	WeaponTest = 17,
	etTaskTargetCheckpoint_MAX = 18,
};
enum etTaskTargetProp
{
	A_None = 0,
	Aerials = 1,
	Alarms = 2,
	ArsonDoor = 3,
	BackDoor = 4,
	BackDoor_Arson = 5,
	BankMachine = 6,
	BusShelter = 7,
	CommercialWindows = 8,
	CommercialWindows_Arson = 9,
	Container = 10,
	Crate1LONGcrate = 11,
	Crate2TALLcrate = 12,
	Doors_Residential1 = 13,
	Doorway = 14,
	ElectricalBox = 15,
	FinancialPortacabins = 16,
	FinancialPortacabinsLarge = 17,
	FinancialTicketMachine = 18,
	FinancialVendingStand = 19,
	FireHydrant = 20,
	FruitStall = 21,
	GarageDoorsSegmented = 22,
	GarageDoorsSegmented_NonRamRaid = 23,
	IndustrialAirConditioningUnit = 24,
	InvisibleProp = 25,
	Mailbox = 26,
	NewsStand = 27,
	NewspaperBox = 28,
	ParkBench = 29,
	ParkingMeter = 30,
	PayPhone = 31,
	Prop_ElectricalBox = 32,
	Prop_FruitStall = 33,
	Prop_MailBox = 34,
	Prop_NewsStand = 35,
	Prop_NewspaperVending = 36,
	Prop_ParkingMeter = 37,
	Prop_PhoneBooth = 38,
	Prop_VendingMachine = 39,
	Pumpkin = 40,
	PumpkinPurple = 41,
	SatelliteDishes = 42,
	SatelliteDishes_Feature = 43,
	SecurityCamera = 44,
	SecurityCamera_Feature = 45,
	ShopFront_Bank = 46,
	ShopFront_ClothingStore = 47,
	ShopFront_ClothingStore_NonRamRaid = 48,
	ShopFront_Doors = 49,
	ShopFront_DrugStore = 50,
	ShopFront_DrugStore_NonRamRaid = 51,
	ShopFront_Electronics = 52,
	ShopFront_Electronics_GDC = 53,
	ShopFront_Electronics_NonRamRaid = 54,
	ShopFront_GarageDoor = 55,
	ShopFront_Interior = 56,
	ShopFront_Jewellers = 57,
	ShopFront_Jewellery = 58,
	ShopFront_Jewellery_NonRamRaid = 59,
	ShopFront_MiniMart = 60,
	VendingMachine_Drinks = 61,
	VendingMachine_Snack = 62,
	WarehousePallet = 63,
	Yacht = 64,
	etTaskTargetProp_MAX = 65,
};
enum etTaskTargetType
{
	A_None = 0,
	Aerials = 1,
	Alarms = 2,
	ArsonDoor = 3,
	BackDoor = 4,
	BackDoor_Arson = 5,
	BankMachine = 6,
	BusShelter = 7,
	Checkpoint_SmallDropOff = 8,
	Checkpoint_LargePedestrianRendezvous = 9,
	Checkpoint_Race = 10,
	Checkpoint_SmallDropOff_Criminal = 11,
	Checkpoint_SmallDropOff_Enforcer = 12,
	Checkpoint_TerritoryControl = 13,
	Checkpoint_VehicleDropOff = 14,
	CommercialWindows = 15,
	CommercialWindows_Arson = 16,
	Container = 17,
	Crate1LONGcrate = 18,
	Crate2TALLcrate = 19,
	Doors_Residential1 = 20,
	Doorway = 21,
	Dropoff_Alley = 22,
	Dropoff_Hideout = 23,
	Dropoff_Lockup = 24,
	Dropoff_Shop = 25,
	ElectricalBox = 26,
	FinancialPortacabins = 27,
	FinancialPortacabinsLarge = 28,
	FinancialTicketMachine = 29,
	FinancialVendingStand = 30,
	FireHydrant = 31,
	FruitStall = 32,
	GarageDoorsSegmented = 33,
	GarageDoorsSegmented_NonRamRaid = 34,
	Graffiti_Default = 35,
	IndustrialAirConditioningUnit = 36,
	InvisibleProp = 37,
	Mailbox = 38,
	NewspaperBox = 39,
	NewsStand = 40,
	NPC_Lower_Female = 41,
	NPC_Lower_Male = 42,
	NPC_Pimp_Male = 43,
	NPC_Standard_Female = 44,
	NPC_Standard_Male = 45,
	NPC_Urban_Female = 46,
	NPC_Urban_Male = 47,
	OpenWorldDropoff_Criminals = 48,
	OpenWorldDropoff_Enforcers = 49,
	ParkBench = 50,
	ParkedVehicleSpawn = 51,
	ParkingMeter = 52,
	PayPhone = 53,
	Prop_ElectricalBox = 54,
	Prop_FruitStall = 55,
	Prop_MailBox = 56,
	Prop_NewspaperVending = 57,
	Prop_NewsStand = 58,
	Prop_ParkingMeter = 59,
	Prop_PhoneBooth = 60,
	Prop_VendingMachine = 61,
	SatelliteDishes = 62,
	SatelliteDishes_Feature = 63,
	SecurityCamera = 64,
	SecurityCamera_Feature = 65,
	ShopFront_Bank = 66,
	ShopFront_ClothingStore = 67,
	ShopFront_ClothingStore_NonRamRaid = 68,
	ShopFront_Doors = 69,
	ShopFront_DrugStore = 70,
	ShopFront_DrugStore_NonRamRaid = 71,
	ShopFront_Electronics = 72,
	ShopFront_Electronics_GDC = 73,
	ShopFront_Electronics_NonRamRaid = 74,
	ShopFront_GarageDoor = 75,
	ShopFront_Interior = 76,
	ShopFront_Jewellers = 77,
	ShopFront_Jewellery = 78,
	ShopFront_Jewellery_NonRamRaid = 79,
	ShopFront_MiniMart = 80,
	TaskItemSpawn = 81,
	VehicleDropoff_Alley = 82,
	VehicleDropoff_Carpark = 83,
	VehicleDropoff_Lockup = 84,
	VendingMachine_Drinks = 85,
	VendingMachine_Snack = 86,
	WarehousePallet = 87,
	Yacht = 88,
	Pumpkin = 89,
	PumpkinPurple = 90,
	MinigameSpawner = 91,
	WeaponTest = 92,
	NPC_Easter_Bunny = 93,
	NPC_Easter_Chicken = 94,
	etTaskTargetType_MAX = 95,
};
enum etUIInteractionPoint
{
	None = 0,
	Garage = 1,
	MarketPlace = 2,
	MusicStudio = 3,
	Persona = 4,
	SymbolDesigner = 5,
	Wardrobe = 6,
	etUIInteractionPoint_MAX = 7,
};
enum etUUIStyle
{
	Default = 0,
	HUDMessage = 1,
	HUDMessage = 2,
	HUDMessage = 3,
	etUUIStyle_MAX = 4,
};
enum etVehicleAudioPart
{
	AudioAmp1 = 0,
	AudioAmp2 = 1,
	AudioAmp3 = 2,
	AudioAmp4 = 3,
	AudioAmp5 = 4,
	AudioAmpLC1 = 5,
	AudioAmpLC2 = 6,
	AudioDumpValve1 = 7,
	AudioDumpValve10 = 8,
	AudioDumpValve11 = 9,
	AudioDumpValve12 = 10,
	AudioDumpValve13 = 11,
	AudioDumpValve14 = 12,
	AudioDumpValve15 = 13,
	AudioDumpValve2 = 14,
	AudioDumpValve3 = 15,
	AudioDumpValve4 = 16,
	AudioDumpValve5 = 17,
	AudioDumpValve6 = 18,
	AudioDumpValve7 = 19,
	AudioDumpValve8 = 20,
	AudioDumpValve9 = 21,
	AudioEng_2drCoupe = 22,
	AudioEng_Carry_Crim_01 = 23,
	AudioEng_Carry_Crim_02 = 24,
	AudioEng_Carry_Crim_03 = 25,
	AudioEng_Carry_Enf_01 = 26,
	AudioEng_Carry_Enf_02 = 27,
	AudioEng_Carry_Enf_03 = 28,
	AudioEng_ClassicLowRider = 29,
	AudioEng_ClassicMuscle = 30,
	AudioEng_Comp_Crim_01 = 31,
	AudioEng_Comp_Enf_01 = 32,
	AudioEng_Comp_Enf_02 = 33,
	AudioEng_Comp_Enf_03 = 34,
	AudioEng_Comp_Crim_02 = 35,
	AudioEng_Comp_Crim_03 = 36,
	AudioEng_Convertable = 37,
	AudioEng_ExecSaloon = 38,
	AudioEng_KingCab = 39,
	AudioEng_Perf_Crim_01 = 40,
	AudioEng_Perf_Crim_02 = 41,
	AudioEng_Perf_Crim_03 = 42,
	AudioEng_Perf_Enf_01 = 43,
	AudioEng_Perf_Enf_02 = 44,
	AudioEng_Perf_Enf_03 = 45,
	AudioEng_Pickup = 46,
	AudioEng_Roadster = 47,
	AudioEng_SUV = 48,
	AudioEng_SUV_Sports = 49,
	AudioEng_Taxi = 50,
	AudioEng_Truck01 = 51,
	AudioEng_TruckCurtain = 52,
	AudioEng_Utility2drVan = 53,
	AudioEng_UtilityEstate = 54,
	AudioEng_UtilityEstateVan = 55,
	AudioEng_UtilityHatchback = 56,
	AudioEng_UtilitySaloon = 57,
	AudioEng_Van01 = 58,
	AudioEng_VanAmbulance = 59,
	AudioEng_VanArmoured = 60,
	AudioEng_VanStandard = 61,
	AudioEngine09 = 62,
	AudioEngine10 = 63,
	AudioEx_2drCoupe = 64,
	AudioEx_2drVan = 65,
	AudioEx_Carry_Crim_01 = 66,
	AudioEx_Carry_Crim_02 = 67,
	AudioEx_Carry_Crim_03 = 68,
	AudioEx_Carry_Enf_01 = 69,
	AudioEx_Carry_Enf_02 = 70,
	AudioEx_ClassicLowRider = 71,
	AudioEx_ClassicMuscle = 72,
	AudioEx_Comp_Crim_01 = 73,
	AudioEx_Comp_Enf_01 = 74,
	AudioEx_Comp_Enf_03 = 75,
	AudioEx_Comp_Crim_02 = 76,
	AudioEx_Comp_Crim_03 = 77,
	AudioEx_Comp_Enf_02 = 78,
	AudioEx_Convertable = 79,
	AudioEx_ExecSaloon = 80,
	AudioEx_KingCab = 81,
	AudioEx_Perf_Crim_01 = 82,
	AudioEx_Perf_Crim_02 = 83,
	AudioEx_Perf_Crim_03 = 84,
	AudioEx_Perf_Enf_01 = 85,
	AudioEx_Perf_Enf_02 = 86,
	AudioEx_Perf_Enf_03 = 87,
	AudioEx_Pickup = 88,
	AudioEx_Roadster = 89,
	AudioEx_SUV = 90,
	AudioEx_SUV_Sports = 91,
	AudioEx_Taxi = 92,
	AudioEx_Truck01 = 93,
	AudioEx_TruckCurtain = 94,
	AudioEx_UtilityEstate = 95,
	AudioEx_UtilityEstateVan = 96,
	AudioEx_UtilityHatchBack = 97,
	AudioEx_UtilitySaloon = 98,
	AudioEx_Van01 = 99,
	AudioEx_VanAmbulance = 100,
	AudioEx_VanArmoured = 101,
	AudioEx_VanStandard = 102,
	AudioExhaust10 = 103,
	AudioExhaustPop1 = 104,
	AudioGearChange1 = 105,
	AudioHorn1 = 106,
	AudioHorn10 = 107,
	AudioHorn11 = 108,
	AudioHorn12 = 109,
	AudioHorn13 = 110,
	AudioHorn14 = 111,
	AudioHorn15 = 112,
	AudioHorn2 = 113,
	AudioHorn3 = 114,
	AudioHorn4 = 115,
	AudioHorn5 = 116,
	AudioHorn6 = 117,
	AudioHorn7 = 118,
	AudioHorn8 = 119,
	AudioHorn9 = 120,
	AudioSirenNONE = 121,
	AudioSiren04 = 122,
	AudioSiren05 = 123,
	AudioSiren06 = 124,
	AudioSiren07 = 125,
	AudioSiren1 = 126,
	AudioSiren10 = 127,
	AudioSiren2 = 128,
	AudioSiren3 = 129,
	AudioSpeaker1 = 130,
	AudioSpeaker2 = 131,
	AudioSpeaker3 = 132,
	AudioSpeaker4 = 133,
	AudioSpeaker5 = 134,
	AudioSpeakerLC1 = 135,
	AudioSpeakerLC2 = 136,
	AudioTransmission1 = 137,
	AudioTransmission10 = 138,
	AudioTransmission11 = 139,
	AudioTransmission2 = 140,
	AudioTransmission3 = 141,
	AudioTransmission4 = 142,
	AudioTransmission5 = 143,
	AudioTransmission6 = 144,
	AudioTransmission7 = 145,
	AudioTransmission8 = 146,
	AudioTransmission9 = 147,
	AudioTurbo1 = 148,
	AudioTurbo10 = 149,
	AudioTurbo11 = 150,
	AudioTurbo2 = 151,
	AudioTurbo3 = 152,
	AudioTurbo4 = 153,
	AudioTurbo5 = 154,
	AudioTurbo6 = 155,
	AudioTurbo7 = 156,
	AudioTurbo8 = 157,
	AudioTurbo9 = 158,
	AudioEx_Carry_Enf_03 = 159,
	AudioSiren_008 = 160,
	AudioDumpValve16 = 161,
	AudioEx_Comp_Enf_04 = 162,
	AudioTransmission12 = 163,
	AudioTurbo12 = 164,
	AudioHorn16 = 165,
	AudioTransmission13 = 166,
	AudioTurbo13 = 167,
	AudioDumpValve17 = 168,
	AudioEng_Growl = 169,
	AudioEx_Growl = 170,
	etVehicleAudioPart_MAX = 171,
};
enum etVehicleAudioPartDefaults
{
	Ambient2DrCoupe = 0,
	Ambient2DrVan = 1,
	AmbientConvertible = 2,
	AmbientHatchback = 3,
	AmbientKingCab = 4,
	AmbientPickup = 5,
	AmbientSaloon = 6,
	AmbientSUV = 7,
	AmbientTruck = 8,
	AmbientUtility_ClassicMuscle = 9,
	AmbientUtility_ExecSaloon = 10,
	AmbientUtility_LowRider = 11,
	AmbientUtility_SportsSUV = 12,
	AmbientUtility_Taxi = 13,
	AmbientUtilityEstate = 14,
	AmbientUtilityEstateVan = 15,
	AmbientVanAmbulance = 16,
	AmbientVanArmoured = 17,
	AmbientVanStandard = 18,
	CriminalCarrying = 19,
	CriminalCompact = 20,
	CriminalPerformance = 21,
	Default4x4 = 22,
	DefaultCommuter1 = 23,
	DefaultCommuter2 = 24,
	EnforcerCarrying = 25,
	EnforcerCompact = 26,
	EnforcerPerformance = 27,
	AmbientUtility_Roadster = 28,
	AmbientUtility_ClassicMuscle-Infection = 29,
	AmbientUtility_4DoorRally = 30,
	etVehicleAudioPartDefaults_MAX = 31,
};
enum etVehicleCategory
{
	None = 0,
	Car_Lowrider = 1,
	Car_Muscle = 2,
	Car_Roadster = 3,
	Emergency = 4,
	Car = 5,
	Pickup = 6,
	Security = 7,
	SUV_Van = 8,
	Taxi = 9,
	Truck = 10,
	Van = 11,
	Car_ExecSaloon = 12,
	Car_Utility = 13,
	etVehicleCategory_MAX = 14,
};
enum etVehicleMenuEntry
{
	Menu_Customisable = 0,
	Menu_Presets = 1,
	Menu_MyVehicles = 2,
	Menu_Components = 3,
	Menu_Paint = 4,
	Menu_Decals = 5,
	Menu_LicencePlate = 6,
	Customisation_ = 7,
	Root_ = 8,
	Menu_Rename = 9,
	Menu_Deploy = 10,
	Menu_Delete = 11,
	Menu_Save = 12,
	Management_ = 13,
	etVehicleMenuEntry_MAX = 14,
};
enum etVehiclePlayerAnimationSet
{
	StandardCarFrontLeft = 0,
	StandardCarFrontRight = 1,
	StandardSUVFrontLeft = 2,
	StandardTruckFrontLeft = 3,
	StandardTruckFrontRight = 4,
	StandardVanFrontLeft = 5,
	StandardVanFrontRight = 6,
	VanSlideDoorBackLeft = 7,
	VanSlideDoorBackRight = 8,
	StandardSUVFrontRight = 9,
	VanTruckFrontLeft = 10,
	VanTruckFrontRight = 11,
	etVehiclePlayerAnimationSet_MAX = 12,
};
enum etVehicleUIComponentInfo
{
	A_2DrCoupe_BumperFront = 0,
	A_2DrCoupe_BumperRear = 1,
	A_2DrCoupe_Door = 2,
	A_2DrCoupe_Hood = 3,
	A_2DrCoupe_PoliceLightsMain = 4,
	A_2DrCoupe_PoliceLightsSecondaryFront02 = 5,
	A_2DrCoupe_RoofExterior = 6,
	A_2DrCoupe_SideSkirts = 7,
	A_2DrCoupe_Spoiler = 8,
	A_2DrCoupe_Wheels = 9,
	A_2DrCoupe_WingMirrors = 10,
	A_2DrVan_BumperFront = 11,
	A_2DrVan_BumperRear = 12,
	A_2DrVan_Door = 13,
	A_2DrVan_Grill = 14,
	A_2DrVan_Hood = 15,
	A_2DrVan_PoliceLightsMain = 16,
	A_2DrVan_PoliceLightsSecondaryFront01 = 17,
	A_2DrVan_PoliceLightsSecondaryFront02 = 18,
	A_2DrVan_PoliceLightsSecondaryFront03 = 19,
	A_2DrVan_Roof = 20,
	A_2DrVan_SideSkirts = 21,
	A_2DrVan_Spoiler = 22,
	A_2DrVan_Wheels = 23,
	A_2DrVan_WingMirrors = 24,
	A_ClassicMuscle_BumperFront = 25,
	A_ClassicMuscle_BumperRear = 26,
	A_ClassicMuscle_Doors = 27,
	A_ClassicMuscle_DoorsInterior = 28,
	A_ClassicMuscle_HeadlightsMain = 29,
	A_ClassicMuscle_Hood = 30,
	A_ClassicMuscle_PoliceLightsMain = 31,
	A_ClassicMuscle_PoliceLightsSecondary = 32,
	A_ClassicMuscle_RollCage = 33,
	A_ClassicMuscle_RoofExterior = 34,
	A_ClassicMuscle_Seats = 35,
	A_ClassicMuscle_SideSkirts = 36,
	A_ClassicMuscle_Spoiler = 37,
	A_ClassicMuscle_SteeringWheel = 38,
	A_ClassicMuscle_TailLightsMain = 39,
	A_ClassicMuscle_Wheels = 40,
	A_ClassicMuscle_WingMirrors = 41,
	A_ClassicMuscle_WingPanels = 42,
	A_ClassicMuscle_WingPanelsRear = 43,
	A_Convertible_Front = 44,
	A_Convertible_FrontGlass = 45,
	A_Convertible_Global = 46,
	A_Convertible_Wheels = 47,
	A_Convertible_WindowWipersFront = 48,
	A_Default2Dr_Wheel = 49,
	A_Default4Dr_Wheel = 50,
	A_ExecSaloon_BumperFront = 51,
	A_ExecSaloon_BumperRear = 52,
	A_ExecSaloon_Door = 53,
	A_ExecSaloon_Hood = 54,
	A_ExecSaloon_PolicelightsMain = 55,
	A_ExecSaloon_PolicelightsSecondary = 56,
	A_ExecSaloon_Roof = 57,
	A_ExecSaloon_SideSkirts = 58,
	A_ExecSaloon_Spoiler = 59,
	A_ExecSaloon_Wheel = 60,
	A_ExecSaloon_WingMirrors = 61,
	A_Hatchback_BumperFront = 62,
	A_Hatchback_BumperRear = 63,
	A_Hatchback_Door = 64,
	A_Hatchback_Hood = 65,
	A_Hatchback_PoliceLightsMain = 66,
	A_Hatchback_PoliceLightsSecondaryFront01 = 67,
	A_Hatchback_PoliceLightsSecondaryFront02 = 68,
	A_Hatchback_PoliceLightsSecondaryFront03 = 69,
	A_Hatchback_Roof = 70,
	A_Hatchback_SideSkirts = 71,
	A_Hatchback_Spoiler = 72,
	A_Hatchback_Wheels = 73,
	A_Hatchback_WingMirrors = 74,
	A_KingCab_BullBarsFront = 75,
	A_KingCab_Doors = 76,
	A_KingCab_Hood = 77,
	A_KingCab_PoliceLightsMain = 78,
	A_KingCab_PoliceLightsSecondary = 79,
	A_KingCab_RollCage = 80,
	A_KingCab_Roof = 81,
	A_KingCab_SideSkirts = 82,
	A_KingCab_SpotLights = 83,
	A_KingCab_Trunk = 84,
	A_KingCab_Wheels = 85,
	A_KingCab_WingMirrors = 86,
	A_LowRider_BumperFront = 87,
	A_LowRider_BumperRear = 88,
	A_LowRider_Doors = 89,
	A_LowRider_Hood = 90,
	A_LowRider_PoliceLights2nd = 91,
	A_LowRider_PoliceLightsMain = 92,
	A_LowRider_RoofExterior = 93,
	A_LowRider_SideSkirts = 94,
	A_LowRider_Spoiler = 95,
	A_LowRider_Wheel = 96,
	A_Pickup_BullBarsFront = 97,
	A_Pickup_BullBarsRear = 98,
	A_Pickup_BumperFront = 99,
	A_Pickup_BumperRear = 100,
	A_Pickup_Doors = 101,
	A_Pickup_Hood = 102,
	A_Pickup_PoliceLightsMain = 103,
	A_Pickup_PoliceLightsSecondary = 104,
	A_Pickup_RollCage = 105,
	A_Pickup_Roof = 106,
	A_Pickup_SideSkirts = 107,
	A_Pickup_SpotLamps = 108,
	A_Pickup_Trunk = 109,
	A_Pickup_Wheels = 110,
	A_Pickup_WingMirrors = 111,
	A_Roadster_Doors = 112,
	A_Roadster_FrontBumper = 113,
	A_Roadster_HeadlightMain = 114,
	A_Roadster_Hood = 115,
	A_Roadster_PoliceLightsSecondary = 116,
	A_Roadster_PolicelightsMain = 117,
	A_Roadster_RearBumper = 118,
	A_Roadster_Rollcage = 119,
	A_Roadster_Roof = 120,
	A_Roadster_SeatsFront = 121,
	A_Roadster_SideSkirts = 122,
	A_Roadster_Spoiler = 123,
	A_Roadster_TaillightMain = 124,
	A_Roadster_Wheel = 125,
	A_Roadster_WingMirrors = 126,
	A_SUV_BullBarsFront = 127,
	A_SUV_BumperFront = 128,
	A_SUV_BumperRear = 129,
	A_SUV_Doors = 130,
	A_SUV_Hood = 131,
	A_SUV_PoliceLightsMain = 132,
	A_SUV_PoliceLightsSecondary = 133,
	A_SUV_Roof = 134,
	A_SUV_RoofRack = 135,
	A_SUV_SideSkirts = 136,
	A_SUV_SpareWheel = 137,
	A_SUV_Trunk = 138,
	A_SUV_Wheels = 139,
	A_SUV_WingMirrors = 140,
	A_Saloon_Aerial = 141,
	A_Saloon_AudioAmp = 142,
	A_Saloon_AudioDumpValve = 143,
	A_Saloon_AudioEngine = 144,
	A_Saloon_AudioExhaust = 145,
	A_Saloon_AudioSpeaker = 146,
	A_Saloon_AudioTransmission = 147,
	A_Saloon_AudioTurbo = 148,
	A_Saloon_BullBars = 149,
	A_Saloon_BumperFront = 150,
	A_Saloon_BumperRear = 151,
	A_Saloon_Door = 152,
	A_Saloon_Hood = 153,
	A_Saloon_PoliceLightsMain = 154,
	A_Saloon_PoliceLightsSecondaryFront01 = 155,
	A_Saloon_PoliceLightsSecondaryFront02 = 156,
	A_Saloon_PoliceLightsSecondaryFront03 = 157,
	A_Saloon_Roof = 158,
	A_Saloon_RoofLight = 159,
	A_Saloon_SeatsFront = 160,
	A_Saloon_SideSkirts = 161,
	A_Saloon_Spoiler = 162,
	A_Saloon_SteeringWheel = 163,
	A_Saloon_TailLightsMain = 164,
	A_Saloon_Wheels = 165,
	A_Saloon_WingMirrors = 166,
	A_SportsSUV_BumperFront = 167,
	A_SportsSUV_BumperRear = 168,
	A_SportsSUV_Doors = 169,
	A_SportsSUV_Hood = 170,
	A_SportsSUV_PoliceLightsMain = 171,
	A_SportsSUV_PoliceLightsSecondary = 172,
	A_SportsSUV_Roof = 173,
	A_SportsSUV_SideSkirts = 174,
	A_SportsSUV_Spoiler = 175,
	A_SportsSUV_TailLightsMain = 176,
	A_SportsSUV_Trunk = 177,
	A_SportsSUV_Wheels = 178,
	A_Taxi_Aerial = 179,
	A_Taxi_BullBars = 180,
	A_Taxi_BumperFront = 181,
	A_Taxi_BumperRear = 182,
	A_Taxi_Doors = 183,
	A_Taxi_Hood = 184,
	A_Taxi_PoliceLightMain = 185,
	A_Taxi_PoliceLightSecondary = 186,
	A_Taxi_Roof = 187,
	A_Taxi_RoofLight = 188,
	A_Taxi_Spoiler = 189,
	A_Taxi_Wheel = 190,
	A_Utility1Estate_BumperFront = 191,
	A_Utility1Estate_BumperRear = 192,
	A_Utility1Estate_Door = 193,
	A_Utility1Estate_Hood = 194,
	A_Utility1Estate_PoliceLightsMain = 195,
	A_Utility1Estate_PoliceLightsSecondaryFront01 = 196,
	A_Utility1Estate_PoliceLightsSecondaryFront02 = 197,
	A_Utility1Estate_PoliceLightsSecondaryFront03 = 198,
	A_Utility1Estate_Roof = 199,
	A_Utility1Estate_SideSkirts = 200,
	A_Utility1Estate_Spoiler = 201,
	A_Utility1Estate_Wheel = 202,
	A_Utility1Estate_WingMirrors = 203,
	A_VanStandard_BullBars = 204,
	A_VanStandard_BumperFront = 205,
	A_VanStandard_BumperRear = 206,
	A_VanStandard_Doors = 207,
	A_VanStandard_Grill = 208,
	A_VanStandard_Hood = 209,
	A_VanStandard_PoliceLightsMain = 210,
	A_VanStandard_PoliceLightsSecond = 211,
	A_VanStandard_PoliceLightsSecondary = 212,
	A_VanStandard_Roof = 213,
	A_VanStandard_Sideskirts = 214,
	A_VanStandard_Spoiler = 215,
	A_VanStandard_Spotlights = 216,
	A_VanStandard_Visor = 217,
	A_VanStandard_Wheel = 218,
	A_VanStandard_WingMirrors = 219,
	A_exoticmuscle_AudioAmp = 220,
	A_exoticmuscle_AudioDumpValve = 221,
	A_exoticmuscle_AudioEngine = 222,
	A_exoticmuscle_AudioExhaust = 223,
	A_exoticmuscle_AudioSpeaker = 224,
	A_exoticmuscle_AudioTransmission = 225,
	A_exoticmuscle_AudioTurbo = 226,
	A_exoticmuscle_BrakeCallipers = 227,
	A_exoticmuscle_BumperFront = 228,
	A_exoticmuscle_BumperRear = 229,
	A_exoticmuscle_Doors = 230,
	A_exoticmuscle_Exhaust = 231,
	A_exoticmuscle_HeadlightsGlass = 232,
	A_exoticmuscle_HeadlightsMain = 233,
	A_exoticmuscle_Hood = 234,
	A_exoticmuscle_HoodProp = 235,
	A_exoticmuscle_Interior = 236,
	A_exoticmuscle_PoliceLightsMain = 237,
	A_exoticmuscle_PoliceLightsSecondary = 238,
	A_exoticmuscle_Roof = 239,
	A_exoticmuscle_RoofGlass = 240,
	A_exoticmuscle_SeatsFront = 241,
	A_exoticmuscle_SideSkirts = 242,
	A_exoticmuscle_Spoiler = 243,
	A_exoticmuscle_SpoilerGlass = 244,
	A_exoticmuscle_SteeringWheel = 245,
	A_exoticmuscle_TaillightsGlass = 246,
	A_exoticmuscle_TaillightsMain = 247,
	A_exoticmuscle_Wheel = 248,
	A_exoticmuscle_WingMirrors = 249,
	A_exoticmuscle_WingPanelsFront = 250,
	A_exoticmuscle_WingPanelsRear = 251,
	C_Carrying_AudioAmp = 252,
	C_Carrying_AudioDumpValve = 253,
	C_Carrying_AudioEngine = 254,
	C_Carrying_AudioExhaust = 255,
	C_Carrying_AudioSpeaker = 256,
	C_Carrying_AudioTransmission = 257,
	C_Carrying_AudioTurbo = 258,
	C_Carrying_BullBars = 259,
	C_Carrying_BumperFront = 260,
	C_Carrying_BumperRear = 261,
	C_Carrying_Doors = 262,
	C_Carrying_DoorsInterior = 263,
	C_Carrying_FrontWindowVisor = 264,
	C_Carrying_Grill = 265,
	C_Carrying_HeadlightsMain = 266,
	C_Carrying_Hood = 267,
	C_Carrying_PoliceLightsMain = 268,
	C_Carrying_PoliceLightsSecondary = 269,
	C_Carrying_RearWindow = 270,
	C_Carrying_RollCage = 271,
	C_Carrying_Roof = 272,
	C_Carrying_SeatsFront = 273,
	C_Carrying_SideSkirts = 274,
	C_Carrying_Spoiler = 275,
	C_Carrying_SteeringWheel = 276,
	C_Carrying_TaillightsMain = 277,
	C_Carrying_Trunk = 278,
	C_Carrying_TrunkInterior = 279,
	C_Carrying_Wheels = 280,
	C_Carrying_WingMirrors = 281,
	C_Compact_Aerial = 282,
	C_Compact_AudioAmp = 283,
	C_Compact_AudioDumpValve = 284,
	C_Compact_AudioEngine = 285,
	C_Compact_AudioExhaust = 286,
	C_Compact_AudioSpeaker = 287,
	C_Compact_AudioTransmission = 288,
	C_Compact_AudioTurbo = 289,
	C_Compact_BumperFront = 290,
	C_Compact_BumperRear = 291,
	C_Compact_Doors = 292,
	C_Compact_Foglights = 293,
	C_Compact_FrontWingPanels = 294,
	C_Compact_HeadlightsMain = 295,
	C_Compact_Hood = 296,
	C_Compact_PoliceLightsMain = 297,
	C_Compact_PoliceLightsSecondary = 298,
	C_Compact_RollCage = 299,
	C_Compact_RoofExterior = 300,
	C_Compact_SeatsFront = 301,
	C_Compact_SideSkirts = 302,
	C_Compact_Spoiler = 303,
	C_Compact_SteeringWheel = 304,
	C_Compact_Tailgate = 305,
	C_Compact_TaillightsMain = 306,
	C_Compact_TrunkInterior = 307,
	C_Compact_Wheels = 308,
	C_Compact_WingMirrors = 309,
	C_Compact_WingPanelsRear = 310,
	C_Exotic_WingPanelsFront = 311,
	C_Perf_Aerial = 312,
	C_Perf_AudioAmp = 313,
	C_Perf_AudioDumpValve = 314,
	C_Perf_AudioEngine = 315,
	C_Perf_AudioExhaust = 316,
	C_Perf_AudioSpeaker = 317,
	C_Perf_AudioTransmission = 318,
	C_Perf_AudioTurbo = 319,
	C_Perf_BrakeCalipers = 320,
	C_Perf_BumperFront = 321,
	C_Perf_BumperRear = 322,
	C_Perf_Doors = 323,
	C_Perf_EngineComponents = 324,
	C_Perf_HeadlightsGlass = 325,
	C_Perf_HeadlightsMain = 326,
	C_Perf_Hood = 327,
	C_Perf_InteriorProps = 328,
	C_Perf_PoliceLights2nd = 329,
	C_Perf_PoliceLightsMain = 330,
	C_Perf_RollCage = 331,
	C_Perf_Roof = 332,
	C_Perf_RoofInterior = 333,
	C_Perf_SeatsFront = 334,
	C_Perf_SideSkirts = 335,
	C_Perf_Spoiler = 336,
	C_Perf_SteeringWheel = 337,
	C_Perf_TailLightsMain = 338,
	C_Perf_Wheels = 339,
	C_Perf_WingMirrors = 340,
	Common_AudioSiren = 341,
	Common_SirenFlashPattern = 342,
	E_Carrying_AudioAmp = 343,
	E_Carrying_AudioDumpValve = 344,
	E_Carrying_AudioEngine = 345,
	E_Carrying_AudioExhaust = 346,
	E_Carrying_AudioSpeaker = 347,
	E_Carrying_AudioTransmission = 348,
	E_Carrying_AudioTurbo = 349,
	E_Carrying_BullBars = 350,
	E_Carrying_BumperFront = 351,
	E_Carrying_BumperRear = 352,
	E_Carrying_Doors = 353,
	E_Carrying_FogLightsMain = 354,
	E_Carrying_Grill = 355,
	E_Carrying_HeadLightsMain = 356,
	E_Carrying_Hood = 357,
	E_Carrying_PoliceLightsMain = 358,
	E_Carrying_PoliceLightsSecondary = 359,
	E_Carrying_Roof = 360,
	E_Carrying_RoofLight = 361,
	E_Carrying_Roofrack = 362,
	E_Carrying_SeatsFront = 363,
	E_Carrying_SideSkirts = 364,
	E_Carrying_Spoiler = 365,
	E_Carrying_SpoilerLadder = 366,
	E_Carrying_SpoilerProp = 367,
	E_Carrying_SteeringWheel = 368,
	E_Carrying_TaillightsMain = 369,
	E_Carrying_Wheels = 370,
	E_Carrying_WingMirrors = 371,
	E_Compact_AudioAmp = 372,
	E_Compact_AudioDumpValve = 373,
	E_Compact_AudioEngine = 374,
	E_Compact_AudioExhaust = 375,
	E_Compact_AudioSpeaker = 376,
	E_Compact_AudioTransmission = 377,
	E_Compact_AudioTurbo = 378,
	E_Compact_BullBars = 379,
	E_Compact_BumperFront = 380,
	E_Compact_BumperRear = 381,
	E_Compact_Doors = 382,
	E_Compact_FogLightsMain = 383,
	E_Compact_Grill = 384,
	E_Compact_HeadLightsMain = 385,
	E_Compact_Hood = 386,
	E_Compact_PoliceLightsMain = 387,
	E_Compact_PoliceLightsSecondary = 388,
	E_Compact_RoofExterior = 389,
	E_Compact_RoofProps = 390,
	E_Compact_SeatsFront = 391,
	E_Compact_SideSkirts = 392,
	E_Compact_Spoiler = 393,
	E_Compact_SteeringWheel = 394,
	E_Compact_Tailgate = 395,
	E_Compact_TaillightsMain = 396,
	E_Compact_WheelBoot = 397,
	E_Compact_Wheels = 398,
	E_Compact_WingMirrors = 399,
	E_Compact_WingPanels = 400,
	E_Compact_WingPanelsRear = 401,
	E_Perf_AudioAmp = 402,
	E_Perf_AudioDumpValve = 403,
	E_Perf_AudioEngine = 404,
	E_Perf_AudioExhaust = 405,
	E_Perf_AudioSpeaker = 406,
	E_Perf_AudioTransmission = 407,
	E_Perf_AudioTurbo = 408,
	E_Perf_BullBars = 409,
	E_Perf_BumperFront = 410,
	E_Perf_BumperRear = 411,
	E_Perf_Doors = 412,
	E_Perf_Grill = 413,
	E_Perf_HeadlightsMain = 414,
	E_Perf_Hood = 415,
	E_Perf_InteriorProps = 416,
	E_Perf_Louvers = 417,
	E_Perf_PoliceLightsMain = 418,
	E_Perf_Policelights2nd = 419,
	E_Perf_RollCage = 420,
	E_Perf_Roof = 421,
	E_Perf_RoofInterior = 422,
	E_Perf_RoofLights = 423,
	E_Perf_SeatsFront = 424,
	E_Perf_SideSkirts = 425,
	E_Perf_Spoiler = 426,
	E_Perf_SpotLightsMain = 427,
	E_Perf_SteeringWheel = 428,
	E_Perf_TailLightsMain = 429,
	E_Perf_Wheels = 430,
	E_Perf_WingMirrors = 431,
	E_Perf_WingPanels = 432,
	etVehicleUIComponentInfo_MAX = 433,
};
enum etVFXAssociation
{
	Checkpoint_SmallDropOffVFX = 0,
	CheckpointDefaultTaskFX = 1,
	CheckpointExampleFX = 2,
	PlayerDefaultArsonVFX = 3,
	PlayerDefaultGraffitiVFX = 4,
	Checkpoint_VehicleDropOffVFX = 5,
	Checkpoint_CapturePointVFX = 6,
	Checkpoint_RaceVFX = 7,
	PlayerDefaultCSIVFX = 8,
	etVFXAssociation_MAX = 9,
};
enum etVFXType
{
	None = 0,
	BuildingDefault = 1,
	CheckpointDefault = 2,
	CheckpointExampleFX = 3,
	Checkpoint_CapturePoint = 4,
	Checkpoint_Race = 5,
	Checkpoint_SmallDropOff = 6,
	Checkpoint_VehicleDropOff = 7,
	FeatureDefault = 8,
	GraffitiDefault = 9,
	NPCDefault = 10,
	PlayerDefault = 11,
	PropDefault = 12,
	VehicleDefault = 13,
	etVFXType_MAX = 14,
};
enum etVideoReplayUIEntry
{
	RTWIntro = 0,
	APBIntro = 1,
	CrimTutorial = 2,
	EnfTutorial = 3,
	TutorialDistrictBrief = 4,
	etVideoReplayUIEntry_MAX = 5,
};
enum etWardrobeMenuEntry
{
	Wardrobe_Customise = 0,
	Wardrobe_StoreOutfit = 1,
	Wardrobe_RenameOutfit = 2,
	Wardrobe_DeleteOutfit = 3,
	Wardrobe_PartCustomisation = 4,
	Customisation_ = 5,
	Customisation_Part_Colour = 6,
	Customisation_Part_Vinyls = 7,
	Customisation_Decals = 8,
	Root_ = 9,
	EditOutfit_ = 10,
	Management_ItemRename = 11,
	Management_ItemSave = 12,
	Management_ItemSaveAll = 13,
	etWardrobeMenuEntry_MAX = 14,
};
enum etWeaponLoadout
{
	None = 0,
	Empty = 1,
	NoPrimary = 2,
	Snowballs = 3,
	ElfVIP = 4,
	GoldenWeapon_GrenadeLauncher_Easter = 5,
	GoldenWeapon_Explosive = 6,
	GoldenWeapon_Snub = 7,
	Infection_Protagonist = 8,
	Christmas_12Days_01 = 9,
	Christmas_12Days_02 = 10,
	Christmas_12Days_03 = 11,
	Christmas_12Days_04 = 12,
	Christmas_12Days_05 = 13,
	Christmas_12Days_06 = 14,
	Christmas_12Days_07 = 15,
	Christmas_12Days_08 = 16,
	Christmas_12Days_09 = 17,
	Christmas_12Days = 18,
	Christmas_12Days = 19,
	Christmas_12Days = 20,
	Christmas_12Days_END = 21,
	etWeaponLoadout_MAX = 22,
};
enum etAudioEventTypes
{
	Play_UIDefaultControlNavDown = 0,
	Play_Login_ExitToDesktop = 1,
	Play_UIDefaultButtonClick = 2,
	Play_Eng_Growl = 3,
	Play_Login_CreateCharacter = 4,
	Play_UIDeploymentTheme = 5,
	Play_UICharacterCustom_Back = 6,
	Play_Windup = 7,
	Play_Login_Play = 8,
	Play_MenuOpen = 9,
	Play_PropLadderFoot_Land = 10,
	Play_ArmBackwardMed = 11,
	Play_HUD_MissionStageComplete = 12,
	Play_GroupReady = 13,
	Play_Exh_Estate_01 = 14,
	Play_UICharacterCustom_ButtLeft = 15,
	Play_Easter_MissionStart = 16,
	Play_UI_Garage_PreviousVehcile = 17,
	Play_PlayerSpawn = 18,
	Play_UISymbol_Canvas_ButtScaleUni = 19,
	Play_StaminaEffect = 20,
	Play_ChallengeNegative = 21,
	Play_UI_Garage_TopSelection = 22,
	Play_HUD_StageComplete = 23,
	Play_Halloween_HeadlessSpawn_Female = 24,
	Play_UI_Garage_Load = 25,
	Stop_RadarJammer = 26,
	Play_UIDefaultSliderDecrement = 27,
	Play_PropLadderFoot_Generic = 28,
	Stop_Alarm = 29,
	Play_AchievementAlert = 30,
	Play_Eng_VanArmoured_01 = 31,
	Play_UIDeploymentClose = 32,
	Play_ContactLevelUp = 33,
	Stop_ChristmasGiftActivate = 34,
	Play_NotifyPlayerActivity = 35,
	Play_GroupMemberLeft = 36,
	Play_UIChat_OpenMenu = 37,
	Play_UICharacterCustom_PageSelect = 38,
	Play_BackupArrives = 39,
	Play_Option_Gameplay_VehicleReversingCamera = 40,
	Play_Halloween_MinionSpawn_Male = 41,
	Stop_Siren = 42,
	Play_Option_Audio_Subtitles = 43,
	Play_UISymbol_Canvas_ButtScaleNoneUni = 44,
	Play_UICharacterStudio_HairLeftRight = 45,
	Play_Alarm = 46,
	Play_UICharacterCustom_ButtRight = 47,
	Play_Mail_Reply = 48,
	Play_ArmForwardMed = 49,
	Play_UIDefaultListOpen = 50,
	Play_Music_MP3_Display = 51,
	Play_SatchelCharge = 52,
	Play_Exh_Carry_Crim_02 = 53,
	Play_Exh_Carry_Crim_03 = 54,
	Play_Exh_Carry_Crim_01 = 55,
	Play_BodyAccessoryMoveFast = 56,
	Play_SocialUI_AddFriend = 57,
	Play_BodyAccessoryMoveSlow = 58,
	Play_UIDefaultSceneClosed = 59,
	Play_FootstepRunLeft = 60,
	Play_Easter_KillCarrier = 61,
	Play_SocialUI_Ignore = 62,
	Play_OptionMenu_Audio = 63,
	Play_UICharacterStudio_AgeMarksLeft = 64,
	Play_EnemyStunned = 65,
	Play_SideReward = 66,
	Play_UI_Garage_Save = 67,
	Stop_Music_MP3 = 68,
	Play_CharacterCustom_Randomize = 69,
	Play_MissionOvertime = 70,
	Play_Eng_Comp_Enf_01 = 71,
	Stop_TimerDead = 72,
	Play_VehicleCritical = 73,
	Play_CombatALert = 74,
	Play_UIDeploymentItem = 75,
	Play_Easter_MissionEnd = 76,
	Play_UIDeployment_Consume = 77,
	Play_Eng_Carry_Enf_01 = 78,
	Play_HealthWarning = 79,
	Play_UISymbol_Canvas_FlipVert = 80,
	Play_FootstepScuff = 81,
	Play_HUD_MissionRedirect = 82,
	Play_DumpValve_Comp_06 = 83,
	Play_DumpValve_Comp_05 = 84,
	Play_DumpValve_Comp_04 = 85,
	Play_DumpValve_Comp_03 = 86,
	Play_DumpValve_Comp_02 = 87,
	Play_DumpValve_Comp_01 = 88,
	Play_UIDeployment_Veh = 89,
	Play_UIDeploymentVehicle = 90,
	Play_UIWCharacterStudio_SkinScarSelcet = 91,
	Play_RadarJammer = 92,
	Play_Siren = 93,
	Play_Halloween_RadarGong = 94,
	Play_EasterAlert = 95,
	Play_Exh_Truck_01 = 96,
	Play_Easter_MuggingProximity = 97,
	Play_OptionMenu_BugReporter = 98,
	Play_Trans_Carry_03 = 99,
	Play_Trans_Carry_02 = 100,
	Play_Trans_Carry_01 = 101,
	Play_UIDeploymentVehiclemods = 102,
	Play_Easter_DropOffX5 = 103,
	Play_Easter_DropOffX3 = 104,
	Play_Easter_DropOffX2 = 105,
	Play_ErrorBeep = 106,
	Play_EngineStart = 107,
	End_VOIP_Duck = 108,
	Play_Exh_EstateVan_01 = 109,
	Play_RewardReceivedBetter = 110,
	PLAY_TUTORIALTROPHY = 111,
	Play_ChristmasGiftActivate = 112,
	Play_Eng_Comp_Crim_01 = 113,
	Play_Eng_Comp_Crim_03 = 114,
	Play_Eng_Comp_Crim_02 = 115,
	Play_UIDefaultSceneOpened = 116,
	Play_RewardReceivedClothing = 117,
	Play_UISymbol_Canvas_Undo = 118,
	Unmute_Music = 119,
	Play_UIChat_Close = 120,
	Play_Eng_Truck_01 = 121,
	Play_ChallengePositive = 122,
	Play_UIDeployment_Othr = 123,
	Play_UICharacterCustom_ParameterSelect = 124,
	Play_UICharacterStudio_ScarLeft = 125,
	Play_Exh_ClassicMuscle_01 = 126,
	Play_Eng_Carry_Crim_01 = 127,
	Play_UI_Garage_CreateDesign = 128,
	Play_Winddown = 129,
	Play_Eng_Estate_01 = 130,
	Play_Exh_VanAmbulance_01 = 131,
	Play_UICharacterStudio_Plusminus = 132,
	Play_Emote_Kiss = 133,
	Play_UIDeploymentEquipment = 134,
	Play_SpotterActivate = 135,
	Stop_MouseSpeed = 136,
	Play_Eng_SUV_Sport_01 = 137,
	Play_Login_CheckName = 138,
	Stop_ChristmasGiftEmitter = 139,
	Play_UIDeploymentSecondaryWeapon = 140,
	Play_RoleLevelUp = 141,
	Play_HUD_ScoreBoardResults = 142,
	Play_PoitiveBeep = 143,
	Play_LegMed = 144,
	Play_Halloween_HeadlessKill = 145,
	Play_ChatAlert = 146,
	Play_EnemyArrested = 147,
	Play_UI_Garage_NextVehicle = 148,
	Play_FootstepRunRight = 149,
	Play_RewardReceivedVehicle = 150,
	Play_Option_Gameplay_Invertmouse = 151,
	Play_Login_DeleteCharacter = 152,
	Play_Exh_Comp_Enf_02 = 153,
	Play_Exh_Comp_Enf_03 = 154,
	Play_Exh_Comp_Enf_01 = 155,
	Play_Exh_Comp_Enf_04 = 156,
	Play_Eng_KingCab_01 = 157,
	Play_Turbo_Growl = 158,
	Play_UIDefaultPointerLeft = 159,
	Play_UIDefaultListIndexDecrement = 160,
	Stop_Music_Studio_Display = 161,
	Play_UIDeployment_WeapEquip = 162,
	Play_UISymbol_Canvas_Butt_MoveHoriz = 163,
	Play_RemoteDetonator = 164,
	Play_StandardBeep = 165,
	Play_Exh_Growl = 166,
	Play_UIDeploymentGraffiti = 167,
	Play_Login_Login = 168,
	Play_Emote_ClapSmall = 169,
	Play_Emote_CoinToss = 170,
	Play_AssignmentComplete = 171,
	Play_Music_Studio = 172,
	Play_DetonatorAlarm = 173,
	Play_Exh_Hatchback_01 = 174,
	Stop_All_Except_NonEngine = 175,
	Play_UIDefaultSilent = 176,
	Stop_HealthWarning = 177,
	Play_LegSlow = 178,
	Play_Exh_ExecSaloon_01 = 179,
	Play_UISymbol_Canvas_Rotate = 180,
	Play_Exh_LowRider_01 = 181,
	Play_Eng_Roadster_01 = 182,
	End_VOIP_Duck_Severe = 183,
	Play_UISymbol_Canvas_RotateCCW = 184,
	Play_ArmForwardFast = 185,
	Play_Option_Gameplay_Contacts = 186,
	Play_ArmForwardSlow = 187,
	Play_Mail_Forward = 188,
	Play_Mail_RetrieveCash = 189,
	Play_OptionMenu_Video = 190,
	Play_Option_Gameplay_InteractiveObj = 191,
	Play_DumpValve_Growl = 192,
	Play_Easter_DropOff = 193,
	Play_Emote_Sob = 194,
	Play_UI_Garage_PurchaseVehicle = 195,
	Play_FootstepSprintLeft = 196,
	Play_UIDefaultListClickSuccess = 197,
	Play_Easter_MuggingComplete = 198,
	Fade_Out_Environment = 199,
	Play_Trans_Comp_04 = 200,
	Play_Trans_Comp_01 = 201,
	Play_Trans_Comp_03 = 202,
	Play_Trans_Comp_02 = 203,
	Play_UIDefaultControlNavLeft = 204,
	Play_Eng_Taxi_01 = 205,
	Play_Halloween_MinionSpawn_Female = 206,
	PLAY_TUTORIALMEDAL = 207,
	Play_Trans_Perf_01 = 208,
	Play_Trans_Perf_03 = 209,
	Play_Trans_Perf_02 = 210,
	Play_Trans_Perf_05 = 211,
	Play_Trans_Perf_04 = 212,
	Play_Spotter = 213,
	Play_Mail_UpArrow = 214,
	Play_ContactReferal = 215,
	Play_Mail_Close = 216,
	Play_Halloween_HeadlessSpawn_Male = 217,
	Play_UIDefaultControlNavUp = 218,
	Play_Mail_DownArrow = 219,
	Play_UIDeployment_View = 220,
	Play_PlayerEntry = 221,
	Play_EnemyKilled = 222,
	Play_UIDefaultControlFocused = 223,
	Play_Mail_InboxPageLeft = 224,
	Play_Exh_2DrVan_01 = 225,
	Play_Login_Canel = 226,
	Play_ChristmasGiftEmitter = 227,
	Play_KillArrestSuccess = 228,
	Play_UICharacterStudio_TattooDesigner = 229,
	Play_SocialUI_Invite = 230,
	Play_Exh_Taxi_01 = 231,
	Play_UIDeploymentPrimaryWeapon = 232,
	Play_Explosion_Missile_Firework = 233,
	Play_GroupNotReady = 234,
	Play_Eng_ExecSaloon_01 = 235,
	Play_Explosion_Firework = 236,
	Play_UIDeployment_Manufacture = 237,
	Play_Option_Close = 238,
	Play_Emote_Howl = 239,
	Play_UIDefaultControlNavRight = 240,
	Play_TimerDead = 241,
	Play_UISymbol_Canvas_RotateCW = 242,
	Play_TutorialSound = 243,
	Play_Halloween_PurplePumpkin = 244,
	Play_FootstepWalkRight = 245,
	Play_ContactMax = 246,
	Play_ArmBackwardFast = 247,
	Play_RewardMail = 248,
	Play_HUD_FinalStage = 249,
	Stop_LoadingSound = 250,
	Play_CharacterCustom_FactionCriminal = 251,
	Play_UIDefaultListIndexIncrement = 252,
	Play_LivingCity = 253,
	Play_NewGroupMember = 254,
	Fade_In_Environment = 255,
	Play_Option_Gameplay_Tutorials = 256,
	Play_Exh_Carry_Enf_02 = 257,
	Play_Exh_Carry_Enf_03 = 258,
	Play_Exh_Carry_Enf_01 = 259,
	Play_Login_Accept = 260,
	Mute_Music = 261,
	Play_Exh_SUV_Sport_01 = 262,
	Play_RewardReceivedWeapon = 263,
	Play_RewardReceivedEmote = 264,
	Stop_SatchelCharge = 265,
	Play_FootstepLand = 266,
	Play_Exh_VanStandard_01 = 267,
	Play_ChistmasFight = 268,
	Play_UIDefaultControlActivated = 269,
	Play_Eng_VanStandard_01 = 270,
	Stop_Horn = 271,
	Stop_Music_Studio = 272,
	Play_Option_Audio_SFXVol = 273,
	Play_DumpValve_Perf_03 = 274,
	Play_DumpValve_Perf_02 = 275,
	Play_DumpValve_Perf_01 = 276,
	Play_DumpValve_Perf_05 = 277,
	Play_DumpValve_Perf_04 = 278,
	Play_Option_Audio_MusicVol = 279,
	Play_Mail_InboxPageRight = 280,
	End_VOIP_Duck_Mild = 281,
	Play_PlayerNotReady = 282,
	Play_VehicleRepair = 283,
	Play_Music_MP3 = 284,
	Play_Eng_EstateVan_01 = 285,
	Stop_ChristmasFight = 286,
	Play_FootstepSprintRight = 287,
	Play_Horn = 288,
	Play_UICharacterStudio_ChangeTattoo = 289,
	Play_Exh_Comp_Crim_02 = 290,
	Play_Exh_Comp_Crim_03 = 291,
	Play_Exh_Comp_Crim_01 = 292,
	Play_UISymbol_Canvas_Butt_MoveFree = 293,
	Play_UICharacterStudio_ScarRight = 294,
	Play_Exh_Perf_Enf_02 = 295,
	Play_Exh_Perf_Enf_03 = 296,
	Play_Exh_Perf_Enf_01 = 297,
	Play_Mail_Open = 298,
	Play_ArmBackwardSlow = 299,
	Play_UISymbol_Canvas_SkewVert = 300,
	Play_UIDefaultPointerRight = 301,
	Play_MissionStarted = 302,
	Play_Mail_Delete = 303,
	Play_UIDefaultListSort = 304,
	Play_UISymbol_Canvas_Redo = 305,
	Play_UIDeploymentSymbol = 306,
	Stop_StaminaEffect = 307,
	Play_UICharacterStudio_AgeMarksRight = 308,
	Play_KillAssist = 309,
	Start_VOIP_Duck_Mild = 310,
	Play_OptionMenu_Control = 311,
	Play_MouseSpeed = 312,
	Play_Easter_Invulnerable = 313,
	Play_LoadingSound = 314,
	Play_GroupInvite = 315,
	Play_RewardReceivedArt = 316,
	Start_VOIP_Duck = 317,
	Play_ReticuleMove = 318,
	Play_Option_Apply = 319,
	Play_CharacterCustom_FactionEnforcer = 320,
	Play_Turbo_Perf_05 = 321,
	Play_Turbo_Perf_04 = 322,
	Play_Turbo_Perf_03 = 323,
	Play_Turbo_Perf_02 = 324,
	Play_Turbo_Perf_01 = 325,
	Play_Exh_SUV_01 = 326,
	Play_Music_Studio_Display = 327,
	Play_CharacterCustom_Advanced = 328,
	Play_Login_Next = 329,
	Play_UIDefaultTabActivated = 330,
	Play_Mail_IgnoreSender = 331,
	Play_SocialUI_ButtonClose = 332,
	Play_Turbo_Comp_03 = 333,
	Play_Turbo_Comp_02 = 334,
	Play_Turbo_Comp_01 = 335,
	Play_Turbo_Comp_04 = 336,
	Play_DumpValve_Carry_01 = 337,
	Play_DumpValve_Carry_03 = 338,
	Play_DumpValve_Carry_02 = 339,
	Play_DumpValve_Carry_05 = 340,
	Play_DumpValve_Carry_04 = 341,
	Play_Emote_Laugh = 342,
	Play_Emote_Whistle = 343,
	Play_UIDeployment_Split = 344,
	Play_Emote_Smoke = 345,
	Play_OptionMenu_Gameplay = 346,
	Play_Eng_Pickup_01 = 347,
	Play_UIDeployment_Destroy = 348,
	Play_HealthFull = 349,
	Play_Option_Video_VSync = 350,
	Play_Trans_Growl = 351,
	Play_Eng_2DrVan_01 = 352,
	Play_UICharacterStudio_RemoveItem = 353,
	Play_UICharacterStudio_Purchase = 354,
	Play_ChristmasGiftExplosion = 355,
	Play_UI_Garage_Save_03 = 356,
	Play_UIDeployment_Rename = 357,
	Stop_HealthFull = 358,
	Play_Easter_CockerelTimer = 359,
	Play_Witnessing = 360,
	Play_Exh_VanArmoured_01 = 361,
	Play_ValentinesAlert = 362,
	Play_UISymbol_Canvas_SkewHoriz = 363,
	Play_APBBackup = 364,
	Play_UICharacterStudio_TattooColor = 365,
	Play_MissionOfferAlert = 366,
	Play_UIDeployment_Template = 367,
	Play_UIDefaultListClose = 368,
	Play_Arrested = 369,
	Play_Option_Video_Windowed = 370,
	Play_Eng_Saloon_01 = 371,
	Play_Exh_Pickup_01 = 372,
	Play_RoleLevelMax = 373,
	Play_LandingHeavy = 374,
	Play_Emote_Fart = 375,
	Play_Exh_Saloon_01 = 376,
	Play_Emote_CoinCatch = 377,
	Play_FootstepWalkLeft = 378,
	Play_Option_Gameplay_YourName = 379,
	Play_UIDeploymentOutfit = 380,
	Play_LegFast = 381,
	Play_UIDeploymentMeleeWeeapon = 382,
	Play_Eng_VanAmbulance_01 = 383,
	Play_Emote_Clap = 384,
	Start_VOIP_Duck_Severe = 385,
	Stop_Music_MP3_Display = 386,
	Play_Option_Cancel = 387,
	Play_BodyAccessoryMoveMed = 388,
	Play_Explosion_Flaregun = 389,
	Play_Exh_Roadster_01 = 390,
	Play_UIDeployment_Edit = 391,
	Play_Eng_SUV_01 = 392,
	Play_UISymbol_Canvas_ButtScaleVert = 393,
	Play_Emote_SmokeMatch = 394,
	Play_Mail_RetrieveItem = 395,
	Play_PlayerReady = 396,
	Stop_TimerMission = 397,
	Play_Exh_Perf_Crim_02 = 398,
	Play_Exh_Perf_Crim_03 = 399,
	Play_Exh_Perf_Crim_01 = 400,
	Play_Mail_NewMessage = 401,
	Play_UIDeploymentCharacterMods = 402,
	Play_BountyAlert = 403,
	Play_Turbo_Carry_01 = 404,
	Play_Turbo_Carry_03 = 405,
	Play_Turbo_Carry_02 = 406,
	Play_Login_Decline = 407,
	Stop_All_Game_Object = 408,
	Play_Exh_KingCab_01 = 409,
	Play_Eng_LowRider_01 = 410,
	Play_Eng_Perf_Enf_03 = 411,
	Play_Eng_Perf_Enf_02 = 412,
	Play_Eng_Perf_Enf_01 = 413,
	Play_Eng_ClassicMuscle_01 = 414,
	Play_UISymbol_Canvas_Butt_MoveVert = 415,
	Play_UIDeployment_Cloth = 416,
	Play_UI_Garage_BottomSelection = 417,
	Stop_DetonatorAlarm = 418,
	Play_BountyClaimed = 419,
	Play_HeatRatingRaise = 420,
	Play_Option_Defaults = 421,
	Play_Eng_Hatchback_01 = 422,
	Play_RewardReceived = 423,
	Play_Eng_Perf_Crim_01 = 424,
	Play_Eng_Perf_Crim_03 = 425,
	Play_Eng_Perf_Crim_02 = 426,
	Play_UICharacterStudio_Back = 427,
	Play_Halloween_PumpkinPop = 428,
	Play_WhisperAlert = 429,
	Play_UIDefaultListClickFail = 430,
	Play_UISymbol_Canvas_SkewFree = 431,
	Play_UISymbol_Canvas_FlipHoriz = 432,
	Play_Halloween_HeadlessInitiate = 433,
	Play_UISymbol_Canvas_ButtScaleHoriz = 434,
	Play_UIDeploymentGrenades = 435,
	Play_UICharacterCustom_CharacterCreate = 436,
	Play_ActionMessage = 437,
	Play_HeatRatingDrop = 438,
	Play_Option_Gameplay_Players = 439,
	Play_PropFence2m = 440,
	Play_ED_Tan_DriveThru = 441,
	Play_HelicopterDistant01_150m = 442,
	Play_PropFence3m = 443,
	Play_WaterPier_20m = 444,
	Play_ED_Crim_Apartment_Misc = 445,
	Play_CSA_Arson_CanLift = 446,
	Play_Vignette_NewspaperDispenser_Fail_InsertCoin = 447,
	Play_Vignette_NewspaperDispenserDoorOpen = 448,
	Play_ED_Civ_Bars_GunFun = 449,
	Play_PropLadderHand = 450,
	Play_EnforcerDept_Int03_30m = 451,
	Play_PhoneHit = 452,
	Play_Window_Workshop_15m = 453,
	Play_Vent004_10m = 454,
	Play_WeaponFire = 455,
	Play_CSA_LockPickClose = 456,
	Play_Flames_Cargo_Arson = 457,
	Play_CSA_Bomb_WireCut01 = 458,
	Play_RoadnoiseFar002 = 459,
	Play_RoadnoiseFar001 = 460,
	Play_Vent010_20m = 461,
	Play_Debris_ElectricBox_C = 462,
	Play_Debris_ElectricBox_B = 463,
	Play_Debris_ElectricBox_A = 464,
	Play_SecurityCamera_Destroy = 465,
	Play_LC_Mugged_Grabbed = 466,
	Play_Chimney001_10m = 467,
	Play_ED_Blbrds_Playtoy = 468,
	Play_Reload_SnubNoseRev_01_A = 469,
	Play_DoorCloseVan01 = 470,
	Play_DoorCloseVan02 = 471,
	Play_Vent003_30m = 472,
	Play_CSA_SlimJim_Spawn = 473,
	Play_Debris_StreetBillBoard_A = 474,
	Play_Debris_StreetBillBoard_B = 475,
	Play_ED_Tan_PS_PortAuthority = 476,
	Play_Debris_Pallet_Single_B = 477,
	Play_Debris_Pallet_Single_C = 478,
	Play_Debris_Pallet_Single_A = 479,
	Play_Window_MiddleClass001_15m = 480,
	WeaponReload_Close = 481,
	Play_Debris_FireObjects_C = 482,
	Play_Debris_FireObjects_B = 483,
	Play_Debris_FireObjects_A = 484,
	Play_Vent009_10m = 485,
	Play_LightFluroHum02 = 486,
	Play_LightFluroHum01 = 487,
	Play_Vent010_10m = 488,
	Play_AlarmCarBreakin = 489,
	Play_EnforcerDept_Tannoy001_40m = 490,
	Play_ED_Crim_Slum_Torture = 491,
	Play_ED_Civ_WF_PortAuthority = 492,
	Play_MeleeWeaponSwipe = 493,
	Play_Vignette_MailBoxLetterDrop = 494,
	Play_ED_Tan_NoodleShack = 495,
	Play_Vent006a_10m = 496,
	Play_Vent003_20m = 497,
	Play_Equip_Grenade_PullPin = 498,
	Play_Equip_Grenade = 499,
	Play_Vent002a_10m = 500,
	Play_TVMuffled001 = 501,
	Play_DoorOpenSports1 = 502,
	Play_DoorOpenSports3 = 503,
	Play_DoorOpenSports2 = 504,
	Play_Vent008_10m = 505,
	Play_Debris_GlassWindow_Ceiling = 506,
	Play_AirCon_Industrial = 507,
	Play_Chimney001_60m = 508,
	Play_WaterStream001 = 509,
	Play_WaterStream002 = 510,
	Play_Generator004_15m = 511,
	Play_Chimney001_30m = 512,
	Play_CSA_Arson_LighterPocket = 513,
	Play_ED_Crim_Office_BotchedJob = 514,
	Play_ED_Blbrds_Car_Bishada = 515,
	Play_CricketsNight01 = 516,
	Play_CricketsNight02 = 517,
	Play_VendingMachineAmmo_Crim = 518,
	Play_Factory013_100m = 519,
	Play_Vent003_10m = 520,
	Play_Chimney014_20m = 521,
	Play_ED_Enf_Apartment = 522,
	Play_Debris_Generic_A = 523,
	Play_CSA_Bomb_Button03 = 524,
	Play_CSA_Bomb_Button02 = 525,
	Play_CSA_Bomb_Button01 = 526,
	Play_DoorCloseSports1 = 527,
	Play_DoorCloseSports3 = 528,
	Play_DoorCloseSports2 = 529,
	Play_ED_Blbrds_TastyBurger = 530,
	Play_Vent008_20m = 531,
	BulletImpact_2D = 532,
	Play_ED_Tan_PS_Crim = 533,
	Play_BirdSparrow = 534,
	Play_EnforcerDept_Carpark = 535,
	Play_CSA_DoorForced_Break = 536,
	Stop_AmmoFlash = 537,
	Play_BombFlash_Set = 538,
	Play_Chimney013_40m = 539,
	Play_LiquidContainer005_25m = 540,
	Play_Vent002_10m = 541,
	Play_CSA_AmmoBox_Lift = 542,
	Play_LightBuzz002 = 543,
	Play_LightBuzz001 = 544,
	Play_PropExtractor012 = 545,
	Play_PropExtractor010 = 546,
	Play_PropExtractor011 = 547,
	Play_SteamVent_10m = 548,
	Play_Window_BuildingSite002_15m = 549,
	Play_MissionStage = 550,
	Play_PropExtractor001 = 551,
	Play_PropExtractor003 = 552,
	Play_PropExtractor002 = 553,
	Play_PropExtractor005 = 554,
	Play_PropExtractor004 = 555,
	Play_PropExtractor007 = 556,
	Play_PropExtractor006 = 557,
	Play_PropExtractor009 = 558,
	Play_PropExtractor008 = 559,
	Play_HUD_TaskItemDefault = 560,
	Play_Flames_Window_Arson = 561,
	Play_SirenDistant001 = 562,
	Play_Chimney001_80m = 563,
	Play_Duct003_30m = 564,
	Stop_Vehicle_Flames = 565,
	Play_HUDMessage_OnDeath = 566,
	Play_Flames_ElectricalBox_Bomb = 567,
	Play_Vignette_NewspaperDispenserPaperMovement = 568,
	Play_LC_Mugged_BodyMove = 569,
	Play_BombFlash_Slow = 570,
	Play_Debris_Vending_Bottle_A = 571,
	Play_Debris_Vending_Bottle_B = 572,
	Play_ED_Civ_Bars_OldMan = 573,
	Play_Duct006_30m = 574,
	Play_Debris_NewsRackLadder_Sm_A = 575,
	Play_Debris_NewsRackLadder_Sm_B = 576,
	Play_RoadNoise_PlayerCar = 577,
	Play_ClockLarge = 578,
	Play_Reload_BeanBagGun_01_A = 579,
	Play_Reload_BeanBagGun_01_C = 580,
	Play_Reload_BeanBagGun_01_B = 581,
	Play_Reload_DartGun_B = 582,
	Play_Reload_DartGun_C = 583,
	Play_Reload_DartGun_A = 584,
	Play_SteamVent_50m = 585,
	Play_ED_Crim_Office_FourcheBank = 586,
	Play_Debris_Dumpster_A = 587,
	Play_Debris_Dumpster_B = 588,
	Play_StarDowngrade = 589,
	Play_DamageAmount = 590,
	Play_WaterSeaNear001 = 591,
	Play_Mug_PunchSwipe = 592,
	Play_Vent001_10m = 593,
	Play_Duct006_20m = 594,
	Play_Item = 595,
	Play_ED_Civ_Apartm_Low = 596,
	Stop_TimerActiveCSA = 597,
	Play_Debris_VendingStand_B = 598,
	Play_Debris_VendingStand_C = 599,
	Play_Debris_VendingStand_A = 600,
	Play_Debris_FireHydrant_D = 601,
	Play_Debris_FireHydrant_A = 602,
	Play_Debris_FireHydrant_C = 603,
	Play_Debris_FireHydrant_B = 604,
	Play_Reload_GrenadeLauncher_01_A = 605,
	Play_Reload_GrenadeLauncher_01_C = 606,
	Play_Reload_GrenadeLauncher_01_B = 607,
	Play_AlarmSchoolBell = 608,
	Play_Vignette_MailBoxClose02 = 609,
	Play_BirdPigeon = 610,
	Play_Reload_Magnum_01_B = 611,
	Play_Reload_Magnum_01_C = 612,
	Play_Reload_Magnum_01_A = 613,
	Play_Generator006_25m = 614,
	Stop_TyreSquealLateral = 615,
	Play_Trees = 616,
	Play_Flames_PortaCabin_Small_Bomb_End = 617,
	Play_CSA_CrimeScene_PocketOut = 618,
	Play_Factory012_10m = 619,
	Play_Equip_Grenade_Throw = 620,
	Play_ED_Civ_Slums_TVAnger = 621,
	Play_CSA_DoorForced_RamDrop = 622,
	Play_SirenDistant002_400m = 623,
	Play_ED_Civ_Apartm_Sex = 624,
	Play_ED_Tan_PS_Roadblocks = 625,
	Play_CSA_BugPlant_PocketOut = 626,
	Play_EnforcerDept_Int01_30m = 627,
	Play_ED_RadioStation03 = 628,
	Play_ED_RadioStation02 = 629,
	Play_ED_RadioStation01 = 630,
	Play_ED_Crim_Slum_HellNight = 631,
	Play_CSA_SlimJim_SlideIn = 632,
	Play_Chimney005_10m = 633,
	Play_ED_Crim_ConstructionArea = 634,
	Play_ExplosionMedium = 635,
	Play_CSA_Hacking_CloseLid = 636,
	Play_LiquidContainerLarge004_80m = 637,
	Play_Reload_Shotgun_OneHanded = 638,
	Play_Grasshopper = 639,
	Play_BombGlow = 640,
	Play_CSA_Graffiti_CanSpawn = 641,
	Play_CSA_CrimeScene_Photo = 642,
	Play_CSA_SlimJim_Rattle = 643,
	Play_HelicopterDistant02_300m = 644,
	Play_CSA_BurglaryWindow_Slide = 645,
	Play_CSA_CrimeScene_PocketIn = 646,
	Play_EnforcerDept_Entrance001_15m = 647,
	Play_PhoneFlight2 = 648,
	Play_Restuarant002_30m = 649,
	Play_Duct003_20m = 650,
	Play_Missile_Firework = 651,
	Play_Vehicle_Steam = 652,
	Play_Vehicle_Steam = 653,
	Play_Debris_GlassWindow_Wall = 654,
	Play_FluroAircon_RoomAmb02 = 655,
	Play_FluroAircon_RoomAmb03 = 656,
	Play_FluroAircon_RoomAmb01 = 657,
	Play_CSA_Arson_CanThrow = 658,
	Play_KilledBy = 659,
	Play_Window_Bedroom001_15m = 660,
	Play_Grenade_Timer = 661,
	Play_Reload_SAPistol_01_A = 662,
	Play_Reload_SAPistol_01_B = 663,
	Play_Reload_SAPistol_01_C = 664,
	Play_Vignette_NewspaperDispenser_Fail_OpenFail = 665,
	Play_CSA_BurglaryDoor_Impact_Metal = 666,
	Play_Debris_CivicGarbageCan_Ashtray_A = 667,
	Play_Debris_CivicGarbageCan_Ashtray_B = 668,
	Play_NewThemeMusic = 669,
	Play_Vignette_MailBoxSlideOpen = 670,
	Play_CSA_WireCutter_Spawn01 = 671,
	BulletRicochet = 672,
	Play_CSA_Arson_CanPour_B = 673,
	Play_WaterSeaNear001_15m = 674,
	Play_ED_Tan_TastyBurger = 675,
	Play_DuctMetal_20m = 676,
	Play_Aerial_Tall_Destroy = 677,
	Play_LiquidContainer004_30m = 678,
	Play_Chimney011_30m = 679,
	Play_Chimney006_20m = 680,
	Play_ExplosionLarge = 681,
	Play_Debris_CrashBarrier_A = 682,
	Play_Debris_CrashBarrier_B = 683,
	Play_Bar001_30m = 684,
	Play_WaterSeaNear001_75m = 685,
	Play_Vignette_NewspaperDispenserDoorClose = 686,
	Play_HUDMessage_OnKill = 687,
	Play_Cafe002_15m = 688,
	Play_Deploy_MobileCover = 689,
	Play_Flames_Crate_Bomb = 690,
	Play_ED_Civ_Bars_NightClubs = 691,
	Play_Chimney006_30m = 692,
	Play_Debris_MailBox_B = 693,
	Play_Debris_MailBox_A = 694,
	Play_LiquidContainerLarge004_120m = 695,
	Play_TimerMission = 696,
	Play_Flames_IndustrialAirCon_Bomb = 697,
	Play_Vent002b_10m = 698,
	Play_PropExtractor005a = 699,
	Play_CSA_BurglaryWindow_Creak = 700,
	Play_CashIncrement = 701,
	Play_ED_TVSequence01 = 702,
	Play_ED_TVSequence02 = 703,
	Play_VehicleImpact_Ped = 704,
	Play_SteamPipe_20m = 705,
	Play_Debris_BusShelter_B = 706,
	Play_Debris_BusShelter_C = 707,
	Play_Debris_BusShelter_A = 708,
	Play_Debris_BusShelter_D = 709,
	Play_Vent011_10m = 710,
	Play_Factory017_80m = 711,
	Play_WaterSeaNear001_40m = 712,
	Play_DrainCircular = 713,
	Play_ElectricalBox_Destroy = 714,
	Play_ED_Tan_PS_Roadway = 715,
	Play_ED_Crim_SpawnArea_01 = 716,
	Play_ED_Crim_SpawnArea_03 = 717,
	Play_ED_Crim_SpawnArea_02 = 718,
	Play_ED_Tan_PS_SafeArea = 719,
	Play_ED_Civ_Bars_ArtGallery = 720,
	Play_SnowballHit = 721,
	Play_NoAmmo = 722,
	Play_GarageDoor_RamRaid1 = 723,
	Play_GarageDoor_RamRaid2 = 724,
	Play_DoorCloseSlideVan01 = 725,
	Play_DoorCloseSlideVan02 = 726,
	Play_FlagPole_50m = 727,
	Play_TimerActiveCSA = 728,
	Play_Vent005_10m = 729,
	Play_Chimney001_120m = 730,
	Stop_Scrape = 731,
	Play_ED_Crim_Apartment_PhoneCalls = 732,
	Play_Garage002 = 733,
	Play_Garage001 = 734,
	Play_Vignette_ATM_Keypad = 735,
	Play_CSA_DoorForced_Break_Cargo = 736,
	Play_Vignette_GarbageHitConc = 737,
	Play_Vignette_VendingMachineKeypad = 738,
	Stop_VehicleLand = 739,
	Play_LC_BodyMove = 740,
	Play_SteamPipe_15m = 741,
	Play_Vignette_ATM_MoneyPocket = 742,
	Play_PunchSwipe = 743,
	Play_BarBilliards_70m = 744,
	Play_Debris_FruitStall_B = 745,
	Play_Debris_FruitStall_A = 746,
	Play_CSA_Bomb_Place01 = 747,
	Play_WaterFall_250m = 748,
	Play_CSA_BurglaryWindow_Creak_Soft = 749,
	Play_EnforcerDept_Int02_30m = 750,
	Play_Mug_FistSlap = 751,
	Stop_RoadNoise_RemotePlayerCars = 752,
	Play_Deploy_AmmoBox = 753,
	Play_LC_BodyLand_Light = 754,
	Play_Grenade_Land = 755,
	Play_ED_Crim_Apartment_Messages = 756,
	Play_AlarmCar = 757,
	Play_AirConditioner = 758,
	Play_BarSlums_30m = 759,
	Play_VentSmall = 760,
	Play_Vehicle_Smoke = 761,
	Play_Alarm_Destroy = 762,
	Play_VehicleLand = 763,
	Play_Duct008_30m = 764,
	Play_RoofVentTowerHat = 765,
	Play_Chimney009_20m = 766,
	Play_GarageDoor_Destroy2 = 767,
	Play_GarageDoor_Destroy1 = 768,
	Stop_VehicleScrape = 769,
	Play_ED_Civ_WF_Apartment = 770,
	Play_Vignette_ATM_SlotOpen = 771,
	Stop_CashIncrement = 772,
	Play_GasPump_15m = 773,
	Play_NitroOn = 774,
	Play_ED_Enf_Spawn = 775,
	Play_Restaurant_Chinese = 776,
	Play_DoorOpenSlideVan01 = 777,
	Play_DoorOpenSlideVan02 = 778,
	Play_CSA_Arson_FireIgnite = 779,
	Play_CSA_AmmoBox_Open = 780,
	Play_Duct008_20m = 781,
	Play_Flames_TicketMachine_Arson = 782,
	Play_TyreSquealLateral = 783,
	Stop_Flames_PortaCabin_Large_Arson = 784,
	Play_Chimney015_20m = 785,
	Play_Duct010_10m = 786,
	Play_CSA_DoorForced_Break_Metal = 787,
	Play_ED_Crim_Office_Waskawi = 788,
	Play_CSA_Hacking_Success = 789,
	Play_Deploy_Epinephrine = 790,
	Play_Vignette_MailBoxPat = 791,
	Play_Debris_NewsStand_A = 792,
	Play_Debris_NewsStand_B = 793,
	Play_CeremonyPositive = 794,
	Play_ChimneyBlast001 = 795,
	Play_ChimneyBlast003 = 796,
	Play_ChimneyBlast002 = 797,
	Play_ChimneyBlast005 = 798,
	Play_ChimneyBlast004 = 799,
	Play_ChimneyBlast007 = 800,
	Play_ChimneyBlast006 = 801,
	Play_VehicleDamage = 802,
	Play_VehicleDamage = 803,
	Play_VehicleDamage = 804,
	Play_VehicleDamage = 805,
	Play_VehicleDamage = 806,
	Play_VehicleDamage = 807,
	Play_VehicleDamage = 808,
	Play_VehicleDamage = 809,
	Play_VehicleDamage = 810,
	Play_VehicleDamage = 811,
	Play_Chimney004_20m = 812,
	Stop_LC_TyreSqueal = 813,
	Play_CSA_BurglaryDoor_Impact = 814,
	Play_VehicleDamage = 815,
	Play_VehicleDamage = 816,
	Play_VehicleDamage = 817,
	Play_LC_PunchImpact = 818,
	Play_Duct004_30m = 819,
	Play_TimerArrested = 820,
	Play_CSA_DoorForced_Ram_Cargo = 821,
	Play_BirdCricketSingle01 = 822,
	Play_BirdCricketSingle02 = 823,
	Play_Vignette_ATM_MoneyWithdraw = 824,
	Play_Chimney008_60m = 825,
	Play_Explode_ElectricalBox_Bomb = 826,
	Play_ElecBox = 827,
	Play_ED_Blbrds_Wildcats = 828,
	Play_Explosion_Level = 829,
	Play_Explosion_Level = 830,
	Play_Explosion_Level = 831,
	Play_Explosion_Level = 832,
	Play_Chimney004_30m = 833,
	Play_BarBilliards02_25m = 834,
	BulletImpact = 835,
	Play_Chimney007_10m = 836,
	Play_DrainPavement = 837,
	Play_SlumEmitter001_100m = 838,
	Play_ED_Blbrds_Car_Nomad = 839,
	Play_ED_Tan_GasStation = 840,
	Play_Vignette_VendingMachineFail_Thump = 841,
	Stop_TimerUnconscious = 842,
	BulletOutgoing = 843,
	Play_Chimney009_30m = 844,
	Play_Debris_SatDish_Large_B = 845,
	Play_Debris_SatDish_Large_A = 846,
	Play_CricketGrasshopper = 847,
	Play_Shops_HairSalon = 848,
	Play_CSA_Graffiti_Spray01 = 849,
	Play_Protagonist = 850,
	Play_Flames_Yacht_Bomb = 851,
	Play_Chimney012_50m = 852,
	Stop_VehicleExplode_PostFlames = 853,
	Play_Debris_SatDish_Small_C = 854,
	Play_Debris_SatDish_Small_B = 855,
	Play_Debris_SatDish_Small_A = 856,
	Play_Vent003a_10m = 857,
	Play_CSA_BugPlant_Success = 858,
	Play_ED_Blbrds_Asylum = 859,
	Play_SlumBaby_50m = 860,
	Play_Vignette_VendingMachineItemDrop = 861,
	Play_Apartment01_70m = 862,
	Stop_Flames_PortaCabin_Small_Arson = 863,
	Play_Vignette_VendingMachineFlapOpen = 864,
	Play_Vignette_VendingMachineFlapClose = 865,
	Play_ED_Blbrds_Myoko = 866,
	Play_Duct001_10m = 867,
	Play_TelephoneRing_12m = 868,
	Play_BirdsInsects04 = 869,
	Play_BirdsInsects01 = 870,
	Play_BirdsInsects03 = 871,
	Play_BirdsInsects02 = 872,
	Play_LC_Mugged_DropToKnees = 873,
	Play_Cafe001_15m = 874,
	Play_BirdWingFlap02 = 875,
	Play_BirdWingFlap01 = 876,
	Play_CSA_BurglaryWindow_Break = 877,
	Play_AmbienceTestLevel = 878,
	Play_FrogSwamp = 879,
	Play_Explosion_Portacabin_Sm_End = 880,
	Play_LC_Mugged_Kicked = 881,
	Stop_Flies_Dumpster01 = 882,
	Stop_WeaponFire = 883,
	Play_Debris_CivicGarbage_A = 884,
	Play_Debris_CivicGarbage_B = 885,
	Play_Debris_CivicGarbage_C = 886,
	Play_Crate_Thump = 887,
	Play_BlowtorchImpact = 888,
	Play_Elevator_25m = 889,
	Play_SlumMusic_50m = 890,
	Play_Vignette_PayphoneCoins = 891,
	Play_Chimney002_20m = 892,
	Play_LiquidContainerLarge001 = 893,
	Play_LiquidContainerLarge002 = 894,
	Play_LiquidContainerLarge003 = 895,
	Play_DogsBarkSuburb = 896,
	Play_Missile = 897,
	Play_BannerSmall = 898,
	Play_Airplane_PassOverhead_300m = 899,
	Play_CSA_Arson_LighterIgnite = 900,
	Play_CSA_SlimJim_Rattle_Soft = 901,
	Play_Vent004_20m = 902,
	Play_BombFlash_Fast = 903,
	Play_Debris_AdvertBoard_A = 904,
	Play_Scrape = 905,
	Play_PhoneFlight = 906,
	Play_Duct002_10m = 907,
	Play_LC_TyreSqueal = 908,
	Play_RamRaid_Damage2 = 909,
	Play_RamRaid_Damage1 = 910,
	Play_CSA_BugPlant_Place = 911,
	Play_Vignette_PayphoneHangUp = 912,
	Play_ClockSmall = 913,
	Play_Apartment03_70m = 914,
	ShopMusic = 915,
	Play_CSA_DoorForced_RamLift = 916,
	Play_Equip_SAPistol_01 = 917,
	Play_Chimney002_30m = 918,
	Play_PropExtractor014_30m = 919,
	Play_Debris_Pallet_Stack_A = 920,
	Play_Debris_Pallet_Stack_B = 921,
	Play_Debris_Pallet_Stack_C = 922,
	Play_CSA_LockPickOpen = 923,
	Play_ED_Civ_Bars_Rich = 924,
	Play_Vent004_30m = 925,
	Play_Duct002_15m = 926,
	Play_Vehicle_Explode_HighBurn = 927,
	Play_Equip_SniperRifle_01 = 928,
	Play_CSA_SlimJim_DoorUnlock = 929,
	Play_Vent007_10m = 930,
	Play_Flames_Yacht_Arson = 931,
	Play_Bird03 = 932,
	Play_Bird02 = 933,
	Play_Bird01 = 934,
	Play_Bird04 = 935,
	Play_Apartment04_70m = 936,
	Play_PropExtractor014_20m = 937,
	Play_Debris_IndustrialWheeled_Large_B = 938,
	Play_Debris_IndustrialWheeled_Large_A = 939,
	Play_CSA_LockPickUnlock = 940,
	Play_CSA_AmmoBox_Close = 941,
	VehicleImpact = 942,
	Play_Flight_Firework = 943,
	Play_Factory011a = 944,
	Play_Deploy_MediKit = 945,
	Play_VendingMachine5M = 946,
	Play_Chimney001_20m = 947,
	Play_ED_Blbrds_CombatWear = 948,
	Play_Factory019_100m = 949,
	Play_Vehicle_Flames = 950,
	Play_Equip_HMG_01 = 951,
	Play_GunsDistant01_500m = 952,
	Play_APB = 953,
	Play_Reload_RocketLauncher_01_C = 954,
	Play_Reload_RocketLauncher_01_B = 955,
	Play_Reload_RocketLauncher_01_A = 956,
	Play_Chimney005_30m = 957,
	Play_BankMachine = 958,
	Play_Debris_CivicGarbageCan_Metal_A = 959,
	Play_Debris_CivicGarbageCan_Metal_B = 960,
	Play_Debris_CivicGarbageCan_Metal_C = 961,
	Play_VehicleExplode_PostFlames = 962,
	Play_BannerLarge = 963,
	Play_Flames_TicketMachine_Bomb = 964,
	Stop_Flames_Cargo_Arson = 965,
	Play_ED_Blbrds_Car_Patriot = 966,
	Play_CSA_BugPlant_Button01 = 967,
	BulletIncoming = 968,
	Play_8BallHit = 969,
	Play_Flight_Flare = 970,
	Play_DoorOpenVan01 = 971,
	Play_DoorOpenVan02 = 972,
	Play_BrickHit = 973,
	Play_CricketSingle = 974,
	Play_Vignette_VendingMachineCoin = 975,
	Play_DoorClose = 976,
	Stop_NewThemeMusic = 977,
	Play_BomdDisengage = 978,
	Play_Duct003_40m = 979,
	Play_Impact = 980,
	Play_Chimney005_20m = 981,
	Play_StarUpgrade = 982,
	Play_Chimney001_40m = 983,
	Play_NitroOff = 984,
	Play_TimerUnconscious = 985,
	Play_MissionLose = 986,
	Play_CSA_Hacking_Keyboard_Press = 987,
	Stop_TimerArrested = 988,
	Play_Duct009_10m = 989,
	Play_CSA_Bomb_Spawn01 = 990,
	Play_ReticuleDirectHit = 991,
	Play_DogBarking002 = 992,
	Play_DogBarking003 = 993,
	Play_DogBarking001 = 994,
	Play_DogBarkInt = 995,
	Play_LightBuzz003_Int = 996,
	Play_VehicleScrape = 997,
	Play_Factory008 = 998,
	Play_Factory009 = 999,
	Play_Factory001 = 1000,
	Play_Factory002 = 1001,
	Play_Factory003 = 1002,
	Play_Factory004 = 1003,
	Play_Factory005 = 1004,
	Play_Factory006 = 1005,
	Play_Factory007 = 1006,
	Play_Shops_Supermarket = 1007,
	Play_Generator003_15m = 1008,
	Play_Factory013 = 1009,
	Play_Factory012 = 1010,
	Play_Factory011 = 1011,
	Play_Factory010 = 1012,
	Play_Factory016 = 1013,
	Play_Factory015 = 1014,
	Play_Factory014 = 1015,
	Play_CSA_AmmoBox_Spawn = 1016,
	Play_Debris_NewsRackLadder_Lg_B = 1017,
	Play_Debris_NewsRackLadder_Lg_A = 1018,
	Play_Debris_Pallet_Sack_A = 1019,
	Play_Debris_Pallet_Sack_B = 1020,
	Play_Dish_Sparks = 1021,
	Play_ED_Blbrds_Inet = 1022,
	Play_Banner_FlapOnly = 1023,
	Play_DoorCloseGeneric2 = 1024,
	Play_DoorCloseGeneric1 = 1025,
	Play_RamRaid_Success = 1026,
	Play_Vignette_ATM_CardEnter = 1027,
	Play_Restuarant001_30m = 1028,
	Play_ED_Blbrds_MaeJoe = 1029,
	Play_Vignette_GarbageDispose = 1030,
	Play_BombEngage = 1031,
	Play_IndustrialAirCon_Destroy = 1032,
	Play_Club003_35m = 1033,
	Play_Vignette_MailBoxClose = 1034,
	Play_WaterNear_Calm = 1035,
	Play_Debris_NewsPaperBox_C = 1036,
	Play_Debris_NewsPaperBox_B = 1037,
	Play_Debris_NewsPaperBox_A = 1038,
	Play_Vignette_CanOpen = 1039,
	Play_Chimney006_10m = 1040,
	Play_Equip_GrenadeLauncher_01 = 1041,
	Play_CSA_DoorKickOpen = 1042,
	Play_DoorSlam001_15m = 1043,
	Play_Flames_PortaCabin_Large_Arson = 1044,
	Play_Debris_ParkBench_A = 1045,
	Play_Debris_ParkBench_C = 1046,
	Play_Debris_ParkBench_B = 1047,
	Play_CSA_DoorForced_Ram = 1048,
	Play_Equip_AssaultRifle_01 = 1049,
	Play_AircraftDistant01_300m = 1050,
	Play_Debris_ParkingMeter_A = 1051,
	Play_Debris_ParkingMeter_B = 1052,
	Play_Debris_ParkingMeter_C = 1053,
	Play_VendingMachineTicket = 1054,
	Play_Debris_PayPhone_A = 1055,
	Play_Debris_PayPhone_C = 1056,
	Play_Debris_PayPhone_B = 1057,
	Play_Debris_Vending_Small_A = 1058,
	Play_Debris_Vending_Small_B = 1059,
	Play_Generator = 1060,
	Play_Equip_Magnum_01 = 1061,
	Play_Window_Office001_15m = 1062,
	Play_Garage003_20m = 1063,
	Play_Shops = 1064,
	Play_FlagPole_35m = 1065,
	Play_CeremonyNegative = 1066,
	Play_ED_Civ_Apartm_Middle = 1067,
	Play_OneMinuteLeftPlayer = 1068,
	Play_ED_Civ_Bars_Cafe = 1069,
	Play_ED_Civ_WF_Bar = 1070,
	Play_ED_Civ_WF_Boxing = 1071,
	Play_DoorOpen = 1072,
	Play_ED_Crim_Apartment_GunFights = 1073,
	Play_CSA_BurglaryWindow_Impact = 1074,
	Play_Equip_RocketLauncher_01 = 1075,
	Play_CSA_LockPickPocket = 1076,
	Play_Window_Bathroom001_15m = 1077,
	Play_WaterFall_25m = 1078,
	Play_ElecRadarHum = 1079,
	Play_ED_Blbrds_Obeya = 1080,
	Stop_RoadNoise_PlayerCar = 1081,
	Play_MissionWin = 1082,
	Play_Vignette_NewspaperDispenserInsertCoin = 1083,
	Play_ED_Civ_Slums_Junkies = 1084,
	Play_LC_BodyGrab = 1085,
	Play_Generator001 = 1086,
	Play_ED_Blbrds_Effigy = 1087,
	Play_Window_BuildingSite001_15m = 1088,
	Play_Explosion_Portacabin_Lg_End = 1089,
	Play_EnforcerDept_Window001_15m = 1090,
	Play_Vignette_GarbageMiss = 1091,
	Play_Explosion_Grenade = 1092,
	Play_Flames_ShopFront_Bomb = 1093,
	Play_CSA_BurglaryDoor_Break = 1094,
	Play_GasStation_20m = 1095,
	Play_ChimneyLarge001_80m = 1096,
	Play_CarDespawnVFX = 1097,
	Play_DogBarkNear001 = 1098,
	Play_DogBarkNear002 = 1099,
	Play_DogBarkNear003 = 1100,
	Play_FlagPole_10m = 1101,
	Play_RadioStation001_20m = 1102,
	Play_ED_Civ_Cafe_Inspection = 1103,
	Break_WeaponFire = 1104,
	Play_Duct005_30m = 1105,
	Play_AlarmBell = 1106,
	Play_Flames_Crate_Arson = 1107,
	Play_CSA_BurglaryDoor_Break_Metal = 1108,
	Play_BankMachine_Destroy1 = 1109,
	Play_BankMachine_Destroy2 = 1110,
	Play_WaterSeaNear001_30m = 1111,
	Play_Tinitus = 1112,
	Play_Flames_PortaCabin_Large_Bomb = 1113,
	Play_Roadnoise001 = 1114,
	Play_Reload_SniperRifle_01_A = 1115,
	Play_Reload_SniperRifle_01_B = 1116,
	Play_Reload_SniperRifle_01_C = 1117,
	Play_CSA_AmmoBox_Place = 1118,
	Play_BirdTweet02 = 1119,
	Play_BirdTweet01 = 1120,
	Play_CSA_BurglaryDoor_Creak_Soft = 1121,
	Play_CSA_BurglaryDoor_Creak = 1122,
	Play_Restaurant_Window001 = 1123,
	Play_Equip_BeanBagGun_01 = 1124,
	Play_CSA_Graffiti_CanShake = 1125,
	Play_RestaurantRear001_10m = 1126,
	Play_Hotwire_WireSpark = 1127,
	Play_Vent006_10m = 1128,
	Play_5StarAlert = 1129,
	Play_DrainSquare = 1130,
	Stop_CSA_Graffiti_Spray01 = 1131,
	Play_CSA_Hacking_OpenLid = 1132,
	Play_Vignette_MailBoxSlideClose = 1133,
	BulletSequence = 1134,
	Play_Vignette_NewspaperDispenser_Fail_RattleUnit = 1135,
	Play_PropDoor = 1136,
	Play_Duct011_20m = 1137,
	Play_LC_Mugged_Punched = 1138,
	Play_Club = 1139,
	Play_Vignette_ATM_CardExit = 1140,
	Play_ED_Civ_Slums_Domestics = 1141,
	Play_BrickBall = 1142,
	Play_OneMinuteLeftOpposition = 1143,
	Play_CSA_LockPickLoop = 1144,
	Play_DrainRect = 1145,
	Play_Seagull300m = 1146,
	Play_Factory018_20m = 1147,
	Play_AirConditionerWall = 1148,
	Play_Hotwire_WireSnap = 1149,
	Play_Flames_PortaCabin_Small_Bomb = 1150,
	Play_CSA_BurglaryDoor_Creak_Metal = 1151,
	Play_Vent011_20m = 1152,
	Play_Reload_StunGun_B = 1153,
	Play_Reload_StunGun_A = 1154,
	Play_PropExtractor013_20m = 1155,
	Play_BarBilliards01_25m = 1156,
	Play_ExplosionSmall = 1157,
	Play_RoadNoise_RemotePlayerCars = 1158,
	Play_Apartment02_70m = 1159,
	Play_VehicleDamage = 1160,
	Play_VehicleDamage = 1161,
	Play_VehicleDamage = 1162,
	Play_VehicleDamage = 1163,
	Play_VehicleDamage = 1164,
	Play_VehicleDamage = 1165,
	Play_VehicleDamage = 1166,
	Play_VehicleDamage = 1167,
	Play_VehicleDamage = 1168,
	Play_BombFlash_Defused = 1169,
	Play_Flames_Door_Arson = 1170,
	Play_Equip_SMG_01 = 1171,
	Play_CSA_Hacking_PocketOut = 1172,
	Play_ED_Civ_Apartm_Rich = 1173,
	Play_ED_Civ_WF_Docks = 1174,
	Play_Reload_HMG_01_C = 1175,
	Play_Reload_HMG_01_B = 1176,
	Play_Reload_HMG_01_A = 1177,
	Play_Reload_HMG_01_E = 1178,
	Play_Reload_HMG_01_D = 1179,
	Play_ED_Tan_Recruitment = 1180,
	Play_AmmoFlash = 1181,
	Play_Flames_PortaCabin_Small_Arson = 1182,
	Play_Vehicle_Explode = 1183,
	Play_Chimney010_30m = 1184,
	Play_BirdTropical = 1185,
	Play_Fusebox = 1186,
	Play_PropLadderFoot = 1187,
	Stop_BombFlash = 1188,
	Play_VendingMachineAmmo = 1189,
	Play_Equip_SnubNoseRev_01 = 1190,
	Play_Restaurant_French = 1191,
	Play_Reload_AssaultRifle_01_A = 1192,
	Play_Reload_AssaultRifle_01_B = 1193,
	Play_Reload_AssaultRifle_01_C = 1194,
	Play_WindowOpen002 = 1195,
	Play_WindowOpen001 = 1196,
	Play_SlumEmitter003_100m = 1197,
	Play_Vignette_PayphonePickUp = 1198,
	Play_CSA_Arson_CanMove01 = 1199,
	Play_CSA_Arson_CanPour = 1200,
	Play_Chimney004_10m = 1201,
	Play_Debris_IndustrialWheeled_Small_B = 1202,
	Play_Debris_IndustrialWheeled_Small_A = 1203,
	Play_Chimney007_30m = 1204,
	Play_CarDeployVFX = 1205,
	Play_CrateTall_Destroy2 = 1206,
	Play_CrateTall_Destroy1 = 1207,
	Play_Chimney003_30m = 1208,
	Play_ShopFront_Destroy1 = 1209,
	Play_ShopFront_Destroy2 = 1210,
	Play_Vignette_ATM_WarningBeep = 1211,
	Play_Flies_Dumpster01 = 1212,
	Play_DoorBang001 = 1213,
	Play_LC_BodyRoll = 1214,
	Play_Chimney009_10m = 1215,
	Play_CSA_Hacking_PocketIn = 1216,
	Play_Reload_Magnum_02_A = 1217,
	Play_Reload_Magnum_02_C = 1218,
	Play_Reload_Magnum_02_B = 1219,
	Play_Reload_Magnum_02_D = 1220,
	Play_DogBarkAlley001 = 1221,
	Play_Chimney007_20m = 1222,
	Play_Drips = 1223,
	Play_Chimney003_20m = 1224,
	Play_VendingMachine15M = 1225,
	Play_SlumEmitter002_100m = 1226,
	Play_DoorOpenGeneric2 = 1227,
	Play_DoorOpenGeneric1 = 1228,
	Play_Vignette_NewspaperDispenserPaperTuck = 1229,
	Play_HelicopterWithTannoy001_150m = 1230,
	Play_Chimney008_10m = 1231,
	Play_Bar002_30m = 1232,
	Play_Debris_BillBoard_A = 1233,
	Play_BirdWingFlap02_15m = 1234,
	Play_PropLadderSlide4m = 1235,
	Play_VendingMachineVehicle = 1236,
	Play_LC_BodyLand = 1237,
	Play_ED_Crim_Slum_Kidnap = 1238,
	Play_Debris_TicketMachine_A = 1239,
	Play_Debris_TicketMachine_B = 1240,
	Play_EnforcerDept_PrisonCell_15m = 1241,
	Play_RoofVentCurved = 1242,
	Play_Club002_50m = 1243,
	Play_DoorOpenCompact2 = 1244,
	Play_DoorOpenCompact1 = 1245,
	Play_Chimney003_10m = 1246,
	Play_HUD_PopUp = 1247,
	Play_Duct007_30m = 1248,
	Play_CSA_DoorForced_Ram_Metal = 1249,
	Play_EnforcerDept_PCStation = 1250,
	Play_PropLadderSlide8m = 1251,
	Play_PropExtractor015_20m = 1252,
	Play_Chimney008_20m = 1253,
	Play_VendingMachineAmmo_Enf = 1254,
	Play_Club002_30m = 1255,
	Play_Vignette_GarbagePickUp = 1256,
	Play_Generator005_15m = 1257,
	Play_ED_Blbrds_Car_Hahn = 1258,
	Play_Window_Slum001_15m = 1259,
	Play_Reload_SniperRifle_FireBoltAction = 1260,
	Play_ED_Tan_PS_LoadingDock = 1261,
	Play_Vignette_PayphoneKeypad = 1262,
	Play_AlarmBell_Destroy = 1263,
	Play_TyreSquealLongitudinal = 1264,
	WeaponReload_ChamberRound = 1265,
	Play_Chimney002_10m = 1266,
	Play_LC_HeadOnSteeringWheel = 1267,
	Play_Seagull100m = 1268,
	Play_AlarmElectronic = 1269,
	Play_PropExtractor015_30m = 1270,
	Play_Chimney008_30m = 1271,
	Play_Reload_StunShotgun_01_A = 1272,
	Play_Reload_StunShotgun_01_C = 1273,
	Play_Reload_StunShotgun_01_B = 1274,
	Play_Club001_100m = 1275,
	Play_DoorCloseCompact2 = 1276,
	Play_DoorCloseCompact1 = 1277,
	Stop_Vehicle_Steam = 1278,
	Stop_Vehicle_Steam = 1279,
	Stop_TyreSquealLongitudinal = 1280,
	Play_WeaponFoley = 1281,
	Play_ED_Blbrds_Sushiburger = 1282,
	Play_Restuarant_Indian = 1283,
	Play_Club001_30m = 1284,
	Play_Reload_SMG_01_B = 1285,
	Play_Reload_SMG_01_A = 1286,
	Play_CS_Spooker2 = 1287,
	Play_CS_Spooker3 = 1288,
	Play_CS_Spooker1 = 1289,
	Play_CS_Spooker4 = 1290,
	Play_CS_Vent014_10m = 1291,
	Play_CS_Sea_Rumble01_200m = 1292,
	Play_CS_ChurchChoir = 1293,
	Play_CS_Water_Drips_001 = 1294,
	Play_CS_Water_Drips_002 = 1295,
	Play_CS_Water_Drips_003 = 1296,
	Play_CS_Conservatory = 1297,
	Play_CS_Vent011_20m = 1298,
	Play_CS_Vent012_30m = 1299,
	Play_CS_Factory004 = 1300,
	Play_CS_Factory007 = 1301,
	Play_CS_Vent003_10m = 1302,
	Play_CS_Wind_Tunnel_01 = 1303,
	Play_CS_Ambience_FountainSquare_01 = 1304,
	Play_CS_Atmosphere_Tone1 = 1305,
	Play_CS_Vent003_20m = 1306,
	Play_CS_SeaGull_Distant_01 = 1307,
	Play_CS_Pipe_Thumps_001 = 1308,
	Play_CS_Generator01_12m = 1309,
	Play_CS_WoodCreak_Deep_01 = 1310,
	Play_CS_Voice_Lunatic4_Singer = 1311,
	Play_CS_LightBuzz002 = 1312,
	Play_CS_LightBuzz003 = 1313,
	Play_CS_LightBuzz001 = 1314,
	Play_CS_Vent001_20m = 1315,
	Play_CS_FuseBox_001 = 1316,
	Play_CS_Wind_MarketPlace_01 = 1317,
	Play_CS_Voices_Lunatic3_WomanMuffled = 1318,
	Play_CS_WindowRattle_01 = 1319,
	Play_CS_Voice_Lunatic5_FlatOwner = 1320,
	Play_CS_Trees_01 = 1321,
	Play_CS_Helicopter_Distant_01 = 1322,
	Play_CS_Sea_02_80m = 1323,
	Play_CS_ClubTracks = 1324,
	Play_CS_CrowCall_Distant_01 = 1325,
	Play_CS_Lift_01 = 1326,
	Play_CS_FlamesBarrel_02 = 1327,
	Play_CS_FlamesBarrel_03 = 1328,
	Play_CS_FlamesBarrel_01 = 1329,
	Play_CS_Sea_01_160m = 1330,
	Play_CS_Voice_CourtyardHelp = 1331,
	Play_CS_Vent013_20m = 1332,
	Play_CS_EngineRoom = 1333,
	Play_CS_CrowCall_01 = 1334,
	Play_CS_Vent011_10m = 1335,
	Play_CS_LightBuzz_Internal_05 = 1336,
	Play_CS_LightBuzz_Internal_04 = 1337,
	Play_CS_LightBuzz_Internal_01 = 1338,
	Play_CS_LightBuzz_Internal_03 = 1339,
	Play_CS_LightBuzz_Internal_02 = 1340,
	Play_CS_ScaryMachine = 1341,
	Play_CS_BellRing_01 = 1342,
	Play_CS_Door_Freezer_01 = 1343,
	Play_CS_Ambience_BasketballCourt_02 = 1344,
	Play_CS_Ambience_BasketballCourt_01 = 1345,
	Play_CS_Trees_25m = 1346,
	Play_CS_PhoneRing = 1347,
	Play_CS_Voice_Whisper = 1348,
	Play_CS_Ambience_CustomiseZone01 = 1349,
	Play_CS_Ambience_ForestDay01 = 1350,
	Play_WaterSeaFar001_70m_01 = 1351,
	Play_CS_MetalDrop01_60m = 1352,
	Play_CS_Voice_Lunatic2_Laughing = 1353,
	Play_CS_Vent004_20m = 1354,
	Play_CS_Trees_TOD_BIRDS = 1355,
	Play_CS_TV_Station = 1356,
	Play_CS_Vent001_10m = 1357,
	Play_CS_SwimmingPoolDrips = 1358,
	Play_CS_Pigeon_Call_01 = 1359,
	Play_CS_SpeakerBuzz_01 = 1360,
	Play_CS_SpeakerBuzz_02 = 1361,
	Play_CS_Voice_Lunatic1_Help = 1362,
	Play_CS_Fontain_Gurgle_01 = 1363,
	Play_CS_Warehouse_01 = 1364,
	Play_CS_KitchenVent04 = 1365,
	Play_CS_KitchenVent01 = 1366,
	Play_CS_KitchenVent02 = 1367,
	Play_CS_KitchenVent03 = 1368,
	Play_CS_Garage_Back_01 = 1369,
	Play_CS_EngineRoomMachine10 = 1370,
	Play_CS_MiceInVent_01 = 1371,
	Play_CS_EngineRoomMachine07 = 1372,
	Play_CS_EngineRoomMachine06 = 1373,
	Play_CS_EngineRoomMachine05 = 1374,
	Play_CS_EngineRoomMachine08 = 1375,
	Play_CS_EngineRoomMachine30 = 1376,
	Play_CS_EngineRoomMachine31 = 1377,
	Play_CS_Wind_Low_01 = 1378,
	Play_CS_Main_Ambience = 1379,
	Play_CS_Sea_02_30m = 1380,
	Play_CS_Pigeon_Call_MarketPlace_01 = 1381,
	Play_CS_Voice_Screams2 = 1382,
	Play_CS_CrowCall_MarketPlace_01 = 1383,
	Play_CS_Tunnel_Tone01 = 1384,
	Play_CS_Pigeon_WingFlaps_02 = 1385,
	Play_CS_Pigeon_WingFlaps_03 = 1386,
	Play_CS_Pigeon_WingFlaps_01 = 1387,
	Play_CS_ShipHorn001_200m = 1388,
	Play_CS_EngineRoom_Drips01 = 1389,
	Play_CS_Voice_Screams = 1390,
	Play_RWS_NightCrickets01 = 1391,
	Play_RWS_NightCrickets03 = 1392,
	Play_RWS_NightCrickets02 = 1393,
	Play_MusicTrackGarageAudition = 1394,
	Play_RWS_RoomAircon01 = 1395,
	Play_RWS_NeonLight01 = 1396,
	Play_RWS_Mus_Shops = 1397,
	Play_RWS_Mus_PianoBar = 1398,
	Play_RWS_WaterPier_25m = 1399,
	Play_RWS_Sea01_50m = 1400,
	Play_RWS_PierCreak = 1401,
	Play_RWS_BirdWingflap01 = 1402,
	Play_RWS_BirdWingflap02 = 1403,
	Play_RWS_ShipBell_200m = 1404,
	Play_RWS_CarPodium01 = 1405,
	Play_RWS_Bar_30m = 1406,
	Play_RWS_Bar_Fridge = 1407,
	Play_RWS_Mus_Tattoist = 1408,
	Play_RWS_HeliDistant_300m = 1409,
	Play_RWS_BirdInsect01 = 1410,
	Play_RWS_Ambience = 1411,
	Play_RWS_Mus_Showroom = 1412,
	Play_RWS_BirdPigeon = 1413,
	Play_RWS_Trees_01 = 1414,
	Play_RWS_JokerTannoy = 1415,
	Stop_MusicTrackGarageAudition = 1416,
	Play_RWS_HeliDistant_100m = 1417,
	Play_RWS_Crown = 1418,
	Play_RWS_RoomAmb01 = 1419,
	Play_RWS_Mus_NightClub04 = 1420,
	Play_RWS_Mus_NightClub01 = 1421,
	Play_RWS_Mus_NightClub03 = 1422,
	Play_RWS_Mus_NightClub02 = 1423,
	Play_RWS_Woodboat_50m = 1424,
	Play_RWS_Woodboat_20m = 1425,
	Play_RWS_BirdTweet02 = 1426,
	Play_RWS_BirdTweet01 = 1427,
	Play_RWS_Bar_15m = 1428,
	Play_RWS_JokerShop = 1429,
	Play_RWS_BirdSeagulls01 = 1430,
	Play_RWS_BirdSeagulls02 = 1431,
	Play_FN_ClubAfterHours = 1432,
	Play_Fountain01_40m = 1433,
	Play_BusStation = 1434,
	Play_ShoppingMallMusic01_30m = 1435,
	Play_FN_AmbUrbanSlum = 1436,
	Play_FN_ChurchMusic_50m = 1437,
	Play_ConcertHall_30m = 1438,
	Play_FN_ChurchBell001_200m = 1439,
	Play_FN_Club03_30m = 1440,
	Play_FN_ClubStripClub = 1441,
	Play_FN_Warehouse02_50m_01 = 1442,
	Play_FN_TattooParlour = 1443,
	Play_FN_WaterSeaFar001_90m = 1444,
	Play_FN_ChinesePagoda = 1445,
	Play_FN_Warehouse04_50m_01 = 1446,
	Play_FN_TreesWildlife02 = 1447,
	Play_FN_TreesWildlife03 = 1448,
	Play_FN_TreesWildlife01 = 1449,
	Play_FN_TreesWildlife04 = 1450,
	Play_FN_ClubRestaurant = 1451,
	Play_SubwayPA = 1452,
	Play_FN_ClubGalin = 1453,
	Play_FN_GasMaskBreathing = 1454,
	Play_FN_Club01_30m = 1455,
	Play_FN_Crane001_150m = 1456,
	Play_FN_CasinoEntrance40m = 1457,
	Play_HospitalTannoy_50m = 1458,
	Play_FN_AlleyRubbish = 1459,
	Play_FN_Chimes = 1460,
	Play_FN_ClubBoxing = 1461,
	Play_FN_WaterSeaFar001_180m = 1462,
	Play_FN_AmbMidtown = 1463,
	Play_FN_Construction01_200m = 1464,
	Play_Flames_Torch01 = 1465,
	Play_Flames_Torch03 = 1466,
	Play_Flames_Torch02 = 1467,
	Play_Fountain_WaterLake = 1468,
	Play_FN_Warehouse03_50m_01 = 1469,
	Play_ElfMusic = 1470,
	Play_FN_Warehouse06_50m_01 = 1471,
	Play_FN_Club02_100m = 1472,
	Play_FN_AlleyCatDogs = 1473,
	Play_FN_WarehouseEmpty02_30m_01 = 1474,
	Play_FN_AmbDowntown = 1475,
	Play_FN_Warehouse01_50m_01 = 1476,
	Play_ShoppingMallMusic02_30m = 1477,
	Play_FN_Headphones2 = 1478,
	Play_FN_TreesNoWildlife = 1479,
	Play_FN_Construction02_150m = 1480,
	Play_Club_StipClub = 1481,
	Play_FN_Construction01_150m = 1482,
	Play_HospitalSiren = 1483,
	Play_BusStationTannoy001_50m = 1484,
	Play_FN_AmbCitypark = 1485,
	Play_Subway_2D = 1486,
	Play_Civicbell001_250m = 1487,
	Play_Club_Gaijin = 1488,
	Play_Fountain_20m = 1489,
	Play_FN_WarehouseEmpty01_30m_01 = 1490,
	Play_FN_ClubGym = 1491,
	Play_Escalator = 1492,
	Play_FN_LoadingDock01_25m_01 = 1493,
	Play_FN_SchoolBell = 1494,
	Play_Club_Myst = 1495,
	Play_FN_Warehouse05_50m_01 = 1496,
	Play_Fountain02_40m = 1497,
	Play_Club_Rimbaud = 1498,
	Play_WF_LighthouseBell001 = 1499,
	Play_WF_WaterSeaFar001_70m = 1500,
	Play_WF_Dockland002_300m = 1501,
	Play_WF_TattooParlour = 1502,
	Play_WaterSeaFar001_180m = 1503,
	Play_WF_Dockland001_300m = 1504,
	Play_WF_TrainDepot001_70m = 1505,
	Play_WF_Rats = 1506,
	Play_WF_ClubGym = 1507,
	Play_WF_WarehouseEmpty01_30m = 1508,
	Play_WF_ShipInterior001_30m = 1509,
	Play_WF_Trees_02 = 1510,
	Play_WF_Trees_01 = 1511,
	Play_WF_Warehouse03_50m = 1512,
	Play_WF_ShoppingMall_Marina001_25m = 1513,
	Play_WF_WoodBoat = 1514,
	Play_WF_WaterSeaFar001_30m = 1515,
	Play_WF_BoxCar05_50m = 1516,
	Play_WF_ShipHorn001_800m = 1517,
	Play_WF_Crane001_150m = 1518,
	Play_WF_CasinoEntrance001_25m = 1519,
	Play_WF_BoxCar04_50m = 1520,
	Play_WF_DocklandTannoy001_200m_02 = 1521,
	Play_WF_ShipBell = 1522,
	Play_WF_ClubBoxing = 1523,
	Play_WF_PierCreak = 1524,
	Play_WF_Warehouse04_50m = 1525,
	Play_WF_ShoppingMall001_25m = 1526,
	Play_WF_WaterSeaFar001_90m = 1527,
	Play_WF_AmbIndustry = 1528,
	Play_WF_BoxCar01_50m = 1529,
	Play_WF_WarehouseEmpty02_30m = 1530,
	Play_WF_ShoppingMall001_30m = 1531,
	Play_WF_AlleyCatDogs = 1532,
	Play_WF_TrainHornDistant001_150m = 1533,
	Play_WF_Warehouse02_50m = 1534,
	Play_WF_LoadingDock01_25m = 1535,
	Play_WF_ShoppingMall_Hesten001_25m = 1536,
	Play_WF_BoatYard001_30m = 1537,
	Play_WF_ShoppingMall_Hope001_25m = 1538,
	Play_WF_RifelRange_30m = 1539,
	Play_WF_Mall = 1540,
	Play_WF_WaterSeaFar001_200m = 1541,
	Play_WF_BoxCar03_50m = 1542,
	Play_WF_ShipCreak001_20m = 1543,
	Play_WF_AlleyRubbish = 1544,
	Play_WF_ShipCreak001_30m = 1545,
	Play_WF_BoatMoored = 1546,
	Play_WF_TrainDistant001_150m = 1547,
	Play_WF_DocklandTannoy001_200m = 1548,
	Play_WF_Warehouse06_50m = 1549,
	Play_WF_BoxCar02_50m = 1550,
	Play_WF_AmbDocks = 1551,
	Play_WF_AmbCentre = 1552,
	Play_WF_ConcertHall = 1553,
	Play_WF_WaterSeaFar001_50m = 1554,
	Play_WF_AmbResidential = 1555,
	Play_WF_Warehouse01_50m = 1556,
	Play_WF_WoodBoat_50m = 1557,
	Play_WF_TreesOnly = 1558,
	Play_WF_Warehouse05_50m = 1559,
	Play_WF_TrainDistant001_300m = 1560,
	Play_WF_TrainHornDistant001_300m = 1561,
	Play_SF_SkatePark_Explosions = 1562,
	Play_SF_Carpark_VehicleDriveby = 1563,
	Play_SF_Carpark_Interior = 1564,
	Play_SF_Beltane_Music = 1565,
	Play_SF_Beach_Crowd = 1566,
	Play_SF_CrimeScene_Dogs = 1567,
	Play_SF_SkatePark_Ambience = 1568,
	Play_SF_Beach_OCean = 1569,
	Play_SF_Beach_Campfire = 1570,
	Play_SF_SkatePark_Dogs = 1571,
	Play_SF_CrimeScene_Camera = 1572,
	Play_SF_SkatePark_Sirens = 1573,
	Play_SF_CrimeScene_Sirens = 1574,
	Play_SF_Beltane_Crowd2 = 1575,
	Play_SF_Beltane_Crowd1 = 1576,
	Play_SF_CrimeScene_RadioChat = 1577,
	Play_SF_Beltane_Crowd_Random = 1578,
	Play_SF_Carpark_Ambience = 1579,
	Play_SF_SkatePark_Skater = 1580,
	Play_SF_CrimeScene_Ambience = 1581,
	Play_SF_Beach_Music = 1582,
	Play_SF_CrimeScene_Music = 1583,
	Play_SF_SkatePark_Music = 1584,
	etAudioEventTypes_MAX = 1585,
};
enum etAudioSwitchGroups
{
	IgnitionRequired = 0,
	RocketType = 1,
	DisplayPointAmp = 2,
	ClothingLegs = 3,
	Siren = 4,
	MusicPlaybackMode = 5,
	ClothingFootwear = 6,
	ClothingBodyAccessories = 7,
	LC_VehicleType = 8,
	ClothingArms = 9,
	Materials = 10,
	Horns = 11,
	VentSmall = 12,
	DrainCircular = 13,
	DrainPavement = 14,
	Items = 15,
	RoofVentCurved = 16,
	DrainRect = 17,
	SuspensionType = 18,
	RoofVentTowerHat = 19,
	Perspective = 20,
	DrainSquare = 21,
	VehicleAmp = 22,
	Contacts = 23,
	LC_Character = 24,
	LC_PanicReaction = 25,
	LC_DialogueReason = 26,
	etAudioSwitchGroups_MAX = 27,
};
enum etAudioSwitchValues
{
	Yes = 0,
	No = 1,
	Osmaw01 = 2,
	Osmaw02 = 3,
	Osmaw03 = 4,
	Osmaw04 = 5,
	Osmaw05 = 6,
	Small = 7,
	Medium = 8,
	Large = 9,
	ClothingCombats_Fem = 10,
	ClothingRegularJeans = 11,
	ClothingHipHopShorts = 12,
	NoClothingLegs = 13,
	ClothingLeggings_Fem = 14,
	ClothingCombatTrousers = 15,
	ClothingSkinnyJeans_Fem = 16,
	ClothingSilkDress_Fem = 17,
	ClothingBaggyJeans = 18,
	ClothingSuitTrousers = 19,
	ClothingJeans_Fem = 20,
	ClothingRegularChinos = 21,
	ClothingLongOfficeSkirt_Fem = 22,
	SirenFire_03 = 23,
	SirenFire_02 = 24,
	SirenFire_01 = 25,
	SirenFire_04 = 26,
	SirenPolice_01 = 27,
	SirenPolice_02 = 28,
	Sirent = 29,
	SirenBusted = 30,
	SirenAmb_02 = 31,
	SirenAmb_01 = 32,
	Positional = 33,
	NonPositional = 34,
	ClothingFemale_Flats = 35,
	ClothingEnforcementBoots = 36,
	ClothingHipHopTrainers = 37,
	NoClothingFootwear = 38,
	ClothingFemale_HighHeels = 39,
	ClothingShoesBrogues = 40,
	ClothingFemale_Boots = 41,
	ClothingFemale_Trainers = 42,
	ClothingEnforcementBootsStudded = 43,
	NoClothingBodyAccessories = 44,
	ClothingUtilityBelt = 45,
	JewlleryJingle = 46,
	ClothingKevlar = 47,
	ExecSaloon = 48,
	VanStandard = 49,
	eState = 50,
	SUV = 51,
	TruckCurtain = 52,
	Hatchback = 53,
	KingCab = 54,
	VanAmbulance = 55,
	Roadster = 56,
	Convertible = 57,
	Saloon = 58,
	ClassicMuscle = 59,
	Taxi = 60,
	Amb_2DrVan = 61,
	VanArmoured = 62,
	Amb_2DrCoupe = 63,
	LowRider = 64,
	SportsSUV = 65,
	Pickup = 66,
	LC_Default = 67,
	ClothingTShirtHipHop = 68,
	ClothingSkateHoodie_F = 69,
	ClothingLongsleevedLeatherJacketCollar = 70,
	ClothingTShirtEnforcement = 71,
	ClothingPullover_F = 72,
	ClothingLatexVest = 73,
	ClothingSuitJacket_F = 74,
	ClothingJacketHoodUp = 75,
	NoClothingArms = 76,
	ClothingTShirt_F = 77,
	ClothingShirt_F = 78,
	ClothingEnforcementFieldJacket = 79,
	ClothingTShirtLongSleevedHipHop = 80,
	ClothingThighLengthTrenchCoat_F = 81,
	ClothingLongsleevedJacketHooded = 82,
	ClothingSuitJacket = 83,
	ClothingVestEnforcementShooting_F = 84,
	ClothingSmartShirt = 85,
	Mat_Wood_Plywood = 86,
	Prop_Mat_WoodenSleeper = 87,
	Prop_Mat_ParkLight_Metal = 88,
	Mat_Roof_Copper = 89,
	Mat_RailTrack = 90,
	Prop_Mat_WindowsIndustrial = 91,
	Prop_Mat_ParkBench = 92,
	Prop_Mat_Billboard = 93,
	Prop_Mat_NewspaperBox_Lid = 94,
	Prop_Mat_CableReel_Wheeled = 95,
	Prop_Mat_CafeTable_Metal = 96,
	Prop_Mat_WarehouseDoor = 97,
	Mat_Tile_Floor = 98,
	Prop_Mat_ConcreteCrucible = 99,
	Prop_Mat_Foliage_Bulky = 100,
	Prop_Mat_TicketBarrier_Railing = 101,
	Prop_Mat_PayPhone_Box = 102,
	Prop_Mat_ParkLight_Glass = 103,
	Prop_Mat_GasStationSign = 104,
	Prop_Mat_GarbageBag = 105,
	Mat_Cornice = 106,
	Prop_Mat_Aerials = 107,
	Prop_Mat_TreeSmall_Foliage = 108,
	Prop_Mat_Ramp_Gravel = 109,
	Mat_NeonStrip = 110,
	Prop_Mat_Foliage_Grassy = 111,
	Mat_Rainscreen = 112,
	Prop_Mat_CommercialWindows = 113,
	Prop_Mat_ParkingMeter = 114,
	Mat_Glass = 115,
	Prop_Mat_RoofVents_Box = 116,
	Prop_Mat_DestructibleGlass = 117,
	Prop_Mat_Yacht = 118,
	Prop_Mat_StreetSign = 119,
	Mat_Road_Cobbles = 120,
	Prop_Mat_CafeTable_Parasol = 121,
	Prop_Mat_LightsModern = 122,
	Prop_Mat_Foliage_Bushy = 123,
	Prop_Mat_BreakableDoors_MetalSolid = 124,
	Prop_Mat_LoadingBayDoor = 125,
	Prop_Mat_ParkingBarrier_Pole = 126,
	Prop_Mat_GarbageCan = 127,
	Mat_Wood_Solid = 128,
	Prop_Mat_CargoContainer = 129,
	Prop_Mat_Fence_Wire = 130,
	Prop_Mat_IndustrialAiConditioningUnit = 131,
	Mat_Road_Pavement = 132,
	Prop_Mat_DoorsResidential02 = 133,
	Prop_Mat_DoorsResidential01 = 134,
	Prop_Mat_Mailbox = 135,
	Prop_Mat_Cleat = 136,
	Prop_Mat_Skips_Large = 137,
	Prop_Mat_GarbageCan_Lid = 138,
	Prop_Mat_ArsonDoor = 139,
	Prop_Mat_Clocks = 140,
	Prop_Mat_ShopAwning = 141,
	Mat_Tile_Granite = 142,
	Prop_Mat_Escalator = 143,
	Prop_Mat_WindowsBoarded = 144,
	Prop_Mat_GarageDoorsSegmented = 145,
	Prop_Mat_Pallets_WoodenStack = 146,
	Prop_Mat_Skips = 147,
	Prop_Mat_WashingLine = 148,
	Mat_Fabric = 149,
	Prop_Mat_Fence_RustyRailing = 150,
	Prop_Mat_VendingMachine = 151,
	Mat_Road_Countryside = 152,
	Prop_Mat_BreakableDoors_MetalBar = 153,
	Prop_Mat_ElectricalBox = 154,
	Prop_Mat_Fence_IronGate = 155,
	Mat_Clothing = 156,
	Prop_Mat_GasCylinders_Trolley = 157,
	Prop_Mat_Dumpster = 158,
	Prop_Mat_CableReel_Cable = 159,
	Prop_Mat_InformationBooth = 160,
	Mat_Fence_Chain = 161,
	Prop_Mat_CivicGarbageCan_Metal = 162,
	Prop_Mat_BoxCar = 163,
	Prop_Mat_NewsStand = 164,
	Prop_Mat_TreeSmall_Trunk = 165,
	Mat_Roof_Corrugated = 166,
	Prop_Mat_GasStationPump = 167,
	Prop_Mat_ShopFrontDoors = 168,
	Prop_Mat_RamRaidShopFront = 169,
	Mat_Body = 170,
	Prop_Mat_SateliteDishes = 171,
	Prop_Mat_FruitStall = 172,
	Prop_Mat_RoadMarkers_Upright = 173,
	Prop_Mat_BreakableDoors_MetalShutter = 174,
	Mat_Rocks = 175,
	Mat_Brick_LargeBlock = 176,
	Prop_Mat_TreeLarge_Trunk = 177,
	Prop_Mat_CivicGarbageCan_Ashtray = 178,
	Prop_Mat_ChainLinkFence = 179,
	Mat_Skyscraper = 180,
	Prop_Mat_NewsRacksLadder = 181,
	Mat_Fence_Metal = 182,
	Prop_Mat_WindowsBroken = 183,
	Mat_Wood_Hollow = 184,
	Prop_Mat_WaterFrontSafety_Pole = 185,
	Prop_Mat_CardboardBox = 186,
	Prop_Mat_Pallets_WoodenSingle = 187,
	Mat_Water_Shallow = 188,
	Mat_Tile_Marble = 189,
	Prop_Mat_BankMachine = 190,
	Mat_Foliage_Bush = 191,
	Prop_Mat_BreakableDoors_WireFence = 192,
	Prop_Mat_TelephonePole = 193,
	Prop_Mat_VendingStand_Metal = 194,
	Prop_Mat_PayPhone_Base = 195,
	Mat_Tile_Ceramic = 196,
	Mat_Stucco = 197,
	Prop_Mat_WoodenCrates = 198,
	Mat_Wood_Slats = 199,
	Prop_Mat_NewsRacksWire = 200,
	Prop_Mat_FireHydrant = 201,
	Prop_Mat_IndustrialWheeledUnits = 202,
	Prop_Mat_CivicGarbageCan_Plastic = 203,
	Prop_Mat_Alarms = 204,
	Prop_Mat_RoadMarkers_Cylindrical = 205,
	Prop_Mat_TowerCrane = 206,
	Prop_Mat_RollUpDoor = 207,
	Prop_Mat_WindowsResidential02 = 208,
	Prop_Mat_WindowsResidential01 = 209,
	Mat_Foliage_Grass = 210,
	Prop_Mat_GasCylinders = 211,
	Prop_Mat_BusShelter = 212,
	Mat_Metal_Hollow = 213,
	Prop_Mat_FencePost_Metal = 214,
	Mat_Plastic_Solid = 215,
	Mat_Fence_Barbed = 216,
	Prop_Mat_ShelfMetalRack = 217,
	Prop_Mat_BackDoor = 218,
	Prop_Mat_FireObjects_Sign = 219,
	Prop_Mat_RoadMarkers_Barrel = 220,
	Prop_Mat_TrainContainer = 221,
	Prop_Mat_SecurityCamera = 222,
	Prop_Mat_ParkingBarrier_Indestruct = 223,
	Prop_Mat_TicketMachine = 224,
	Prop_Mat_BreakableDoors_GlassPane = 225,
	Prop_Mat_Skylight = 226,
	Prop_Mat_ConstructionPipes = 227,
	Mat_Gravel = 228,
	Mat_Metal_Pipe = 229,
	Prop_Mat_Barrels = 230,
	Prop_Mat_StreetSign_Plate = 231,
	Prop_Mat_Ladder = 232,
	Prop_Mat_RoadMarkers_CatsEye = 233,
	Prop_Mat_NewsStand_Closed = 234,
	Prop_Mat_CafeChair_Metal = 235,
	Prop_Mat_Pallets_CementStack = 236,
	Prop_Mat_Ramp_Steel = 237,
	Mat_Road_Asphalt = 238,
	Prop_Mat_TrainEngine = 239,
	Mat_Sand = 240,
	Prop_Mat_CableReel = 241,
	Prop_Mat_TicketBarrier = 242,
	Prop_Mat_RoadMarkers_Barrier = 243,
	Prop_Mat_ParkingBarrier_Hanging = 244,
	Prop_Mat_ShopFrontTextures = 245,
	Prop_Mat_FireObjects = 246,
	Prop_Mat_WaterTower = 247,
	Prop_Mat_RoofVents_Tower = 248,
	Prop_Mat_IndustrialGenerator = 249,
	Prop_Mat_RollerShutters = 250,
	Prop_Mat_BackDoor_Wood = 251,
	Prop_Mat_ParkingBarrier_PayBox = 252,
	Prop_Mat_Bollards = 253,
	Prop_Mat_RoadMarkers_Cone = 254,
	Mat_Metal_Vehicle = 255,
	Prop_Mat_Boxes = 256,
	Prop_Mat_Tree = 257,
	Prop_Mat_ResidentialPlanters = 258,
	Mat_Tile_Floor_Wet = 259,
	Prop_Mat_TreeLarge_Foliage = 260,
	Prop_Mat_DoorsBoarded = 261,
	Prop_Mat_ShopFrontPawnShop = 262,
	Prop_Mat_StreetLight = 263,
	Mat_Brick = 264,
	Prop_Mat_StopLights = 265,
	Prop_Mat_BasketballHoop = 266,
	Mat_Cables = 267,
	Mat_Stones_Loose = 268,
	Prop_Mat_Scaffolding = 269,
	Mat_Metal_Solid = 270,
	Prop_Mat_LightsModern_Pole = 271,
	Prop_Mat_Walkway_Wood = 272,
	Prop_Mat_Walkway_Metal = 273,
	Prop_Mat_FenceWood = 274,
	Prop_Mat_WallLights_RoofLights = 275,
	Prop_Mat_IndustrialMachinery = 276,
	Prop_Mat_PublicAddress = 277,
	Mat_Metal_Gantry = 278,
	Mat_Default = 279,
	Mat_Dirt = 280,
	Prop_Mat_GarageDoorsCanopy = 281,
	Mat_Roof_Tile = 282,
	Prop_Mat_BackDoor_Metal = 283,
	Mat_Concrete = 284,
	Prop_Mat_NewspaperBox = 285,
	Prop_Mat_GarageDoorsSliding = 286,
	Horn08 = 287,
	Horn09 = 288,
	Horn02 = 289,
	Horn03 = 290,
	Horn01 = 291,
	Horn06 = 292,
	Horn07 = 293,
	Horn04 = 294,
	Horn05 = 295,
	Horn15 = 296,
	Horn14 = 297,
	Horn16 = 298,
	Horn11 = 299,
	Horn10 = 300,
	Horn13 = 301,
	Horn12 = 302,
	VentSmallDef2 = 303,
	VentSmallDef1 = 304,
	DrainCircular1 = 305,
	DrainCircularDef1 = 306,
	DrainPavement1 = 307,
	DrainPavementDef1 = 308,
	WeaponShotgunStriker = 309,
	WeaponCAP40 = 310,
	WeaponTazerShotgun = 311,
	WeaponSilencedPistol = 312,
	WeaponFrog = 313,
	WeaponLightMachineGun2 = 314,
	WeaponLightMachineGun3 = 315,
	WeaponAssaultRifle_ATAC_Silenced = 316,
	WeaponBeanBagGun = 317,
	WeaponSniperRifle2 = 318,
	WeaponSniperRifle3 = 319,
	WeaponDartGun = 320,
	WeaponShotgunAuto = 321,
	WeaponAssaultRifle_VASR2 = 322,
	WeaponUrbanLegend = 323,
	WeaponBurstFirePistol_Silenced = 324,
	WeaponFirework = 325,
	WeaponNorsemenSD = 326,
	WeaponRifle_PBR_SD = 327,
	WeaponAssaultRifle_AK12 = 328,
	WeaponSemiAutoRifle = 329,
	WeaponAssaultRifle_COBRA = 330,
	WeaponSMGCBMP = 331,
	WeaponSemiAutoPistol2 = 332,
	NoWeapon = 333,
	WeaponAssaultRifle_Criminal = 334,
	WeaponSniperRiflePSR = 335,
	WeaponSwarm = 336,
	WeaponNorsemen = 337,
	WeaponOgre = 338,
	WeaponRocketLauncher = 339,
	WeaponSMGC9SD = 340,
	WeaponRifle_01 = 341,
	WeaponRifle_02 = 342,
	WeaponRifle_03 = 343,
	WeaponOCSP = 344,
	WeaponMagnum02 = 345,
	WeaponLightMachineGunMedusa = 346,
	WeaponPDW57 = 347,
	WeaponLightMachineGun = 348,
	WeaponAces = 349,
	WeaponFrogSD = 350,
	WeaponAssaultRifle_Enforcer = 351,
	WeaponSMGSilenced = 352,
	WeaponSubMachineGun = 353,
	WeaponSniperRifle_Silenced = 354,
	WeaponAssaultRifle_HoneyBadger = 355,
	WeaponShotgun = 356,
	WeaponAssaultRifle_VASR2_SD = 357,
	WeaponAssaultRifle_ATAC = 358,
	WeaponHeavyMachineGun = 359,
	WeaponGasCanisters = 360,
	WeaponGrenadeLauncher = 361,
	WeaponSMGSilenced2 = 362,
	WeaponSnowballLauncher = 363,
	WeaponScar = 364,
	WeaponSubMachineGun2 = 365,
	WeaponSBSR = 366,
	WeaponSemiAutoPistol = 367,
	TEST_Loop = 368,
	WeaponApocCurse = 369,
	WeaponFlaregun = 370,
	WeaponSilencedPistol2 = 371,
	WeaponPDW57_Silenced = 372,
	WeaponGrenadeLauncher_COEL = 373,
	WeaponShotgun_Shredder = 374,
	TEST_Single = 375,
	WeaponSniperRifle_Vespa = 376,
	WeaponSmokeGrenade = 377,
	WeaponApocOblivion = 378,
	WeaponApocHarbinger = 379,
	WeaponTommyGun = 380,
	WeaponFFA4Shot = 381,
	WeaponSniperRifle = 382,
	WeaponSnubNoseRevolver = 383,
	WeaponApocMisery = 384,
	WeaponTAS20 = 385,
	WeaponUrbanLegend_SD = 386,
	WeaponSMG02 = 387,
	WeaponMissile_Firework = 388,
	WeaponAssaultRifle_ARX = 389,
	WeaponBattleRifle = 390,
	WeaponAssaultRifle_CR5 = 391,
	WeaponSMGCBMPSilenced = 392,
	WeaponTazerGun = 393,
	WeaponRifle_PBR = 394,
	WeaponBlowTorch = 395,
	WeaponShotgun2 = 396,
	WeaponSemiAutoRifle2 = 397,
	WeaponAssaultRifle_S1 = 398,
	WeaponFFA = 399,
	WeaponAssaultRifle_VAS = 400,
	WeaponFragGrenade = 401,
	WeaponGrenadeLauncher_SPECIAL = 402,
	WeaponApocWar = 403,
	WeaponISSRA = 404,
	WeaponSMGC9 = 405,
	WeaponBurstFirePistol = 406,
	WeaponMagnum = 407,
	WeaponColbyClassic = 408,
	WeaponSniperRiflePSRSilenced = 409,
	RoofVentCurvedDef2 = 410,
	RoofVentCurvedDef3 = 411,
	RoofVentCurvedDef1 = 412,
	DrainRect1 = 413,
	DrainRectDef1 = 414,
	SuspensionCarrying = 415,
	SuspensionPerformance = 416,
	SuspensionTruck = 417,
	SuspensionVan = 418,
	SuspensionSUV = 419,
	SuspensionCompact = 420,
	SuspensionLowRider = 421,
	SuspensionDefault = 422,
	RoofVentTowerHatDef3 = 423,
	RoofVentTowerHatDef2 = 424,
	RoofVentTowerHatDef1 = 425,
	FirstPerson = 426,
	ThirdPerson = 427,
	DrainSquare1 = 428,
	DrainSquareDef1 = 429,
	AmpLevel05 = 430,
	AmpLevel04 = 431,
	AmpLevel01 = 432,
	AmpLevel03 = 433,
	AmpLevel02 = 434,
	AmpLivingCity02 = 435,
	AmpLivingCity01 = 436,
	DispatcherPT = 437,
	StregaBloodrose = 438,
	Chiro = 439,
	Suji = 440,
	DarrylKent = 441,
	Chiza = 442,
	EvaOrlandez = 443,
	Ophelia = 444,
	SimonTran = 445,
	Birth = 446,
	Javez = 447,
	AkikoX = 448,
	Wilde = 449,
	StuPhoenix = 450,
	MichaelSimeone = 451,
	SaulLinklater = 452,
	ByronBloodrose = 453,
	ChungHee = 454,
	TyDurrant = 455,
	WilsonLeBoyce = 456,
	Sofia = 457,
	Tiptoe = 458,
	DispatcherP = 459,
	BonitaBenjamin = 460,
	OrlenzMoretti = 461,
	ErnstTempleton = 462,
	MirriKent = 463,
	Zombie = 464,
	HeaChoi = 465,
	JeungBloodrose = 466,
	LilithBloodrose = 467,
	ElfCrim = 468,
	JustinTeng = 469,
	VioletPrentiss = 470,
	VeronikaLee = 471,
	LaRocha = 472,
	Grissom = 473,
	ArlonBenjamin = 474,
	ByeongLee = 475,
	CharlotteBloodrose = 476,
	TerriQuan = 477,
	Gumball = 478,
	DevilDog = 479,
	Shift = 480,
	SeungBloodrose = 481,
	LucasVanRooyen = 482,
	BritneyBloodrose = 483,
	GraysonFell = 484,
	Speedball = 485,
	LynetteCasey = 486,
	AlettaCadagan = 487,
	TyronSennet = 488,
	PaganBloodrose = 489,
	HarmonBenjamin = 490,
	Sabbat = 491,
	DoubleB = 492,
	ElfEnf = 493,
	MiguelEstebano = 494,
	DispatcherGK = 495,
	DispatcherBR = 496,
	KasparDanko = 497,
	FS_LAM1 = 498,
	FS_LAM2 = 499,
	MK_KOR1 = 500,
	MK_KOR2 = 501,
	MK_KOR3 = 502,
	ME_AMM = 503,
	FE_LAM1 = 504,
	FK_KOR3 = 505,
	FK_KOR2 = 506,
	FK_KOR1 = 507,
	FE_IND1 = 508,
	ME_UKS1 = 509,
	FE_CHI = 510,
	ME_UAF1 = 511,
	FE_KOR1 = 512,
	MS_SPA3 = 513,
	MS_SPA1 = 514,
	MS_LAM2 = 515,
	MS_LAM3 = 516,
	MS_LAM1 = 517,
	FM_SPA1 = 518,
	FE_AME1 = 519,
	FE_AME2 = 520,
	FE_AME3 = 521,
	FE_AFA1 = 522,
	ME_AFA1 = 523,
	FE_AUS1 = 524,
	FE_AMJ1 = 525,
	ME_AMI1 = 526,
	ME_AMJ1 = 527,
	ME_AME3 = 528,
	ME_AME2 = 529,
	ME_AME1 = 530,
	Run = 531,
	Cower = 532,
	NPCDeathNearby = 533,
	Shot = 534,
	VehicleCollisionNearby = 535,
	LookAtNPCPanicing = 536,
	EventWithNoSpecificDialogue = 537,
	LookAtGeneral = 538,
	GunfireNearby = 539,
	LookAtPlayer = 540,
	BulletImpactNearby = 541,
	VehicleApproaching = 542,
	ExplosionNearby = 543,
	LookAtDead = 544,
	LookAtSiren = 545,
	etAudioSwitchValues_MAX = 546,
};
enum etAudioLocEventTypes
{
	Play_Contact_Pledge_Break_Hot = 0,
	Cancel_LC_Mug = 1,
	Play_ThemeMusicNonlinear = 2,
	Play_LC_MugStart = 3,
	Play_Contact_GreetingKnown = 4,
	Play_Player_Angry = 5,
	Play_Contact_Dispatch = 6,
	Play_Death = 7,
	Play_Player_Smoke = 8,
	Play_LC_EjectedUpset = 9,
	Play_Player_Exertion_Med = 10,
	Play_LC_CollidedWith = 11,
	Play_Player_Exertion_High = 12,
	Play_LC_Curse = 13,
	Play_LC_Help = 14,
	Play_Contact_Mission_Accepted = 15,
	Play_Player_Exertion_Low = 16,
	Play_Player_Cry = 17,
	Play_Contact_GreetingLiked = 18,
	Stop_LC_BeingEjected = 19,
	Play_Player_Celebrate = 20,
	Play_LC_BeingEjected = 21,
	Play_LC_BeingEjected_Offside = 22,
	Play_LC_MugPunch = 23,
	Stop_ThemeMusicNonlinear = 24,
	Play_LC_Police = 25,
	Play_Player_Chuckle = 26,
	Stop_LC_MugPunch = 27,
	Play_LC_Panic_MidSequence = 28,
	Play_Player_Death_High = 29,
	Play_Contact_Dispatch_Rival = 30,
	Play_Contact_ResponseFaction = 31,
	Play_Contact_Dispatch_Bounty = 32,
	Play_LC_Death = 33,
	Play_LC_MugEnd = 34,
	Play_LC_LookAt = 35,
	Stop_LC_Panic = 36,
	Play_LC_MobilePhone = 37,
	Play_Player_Death_Low = 38,
	Play_Player_HurtLow = 39,
	Play_LC_EjectedAngryCrim = 40,
	Play_LC_Panic = 41,
	Play_Contact_GoodbyeKnown = 42,
	Play_Player_HurtMed = 43,
	Play_LC_PunchedVehicle = 44,
	Play_LC_Hurt_Med = 45,
	Play_LC_EjectedAngryEnf = 46,
	Play_Player_HurtHigh = 47,
	Play_Contact_Dispatch_Backup = 48,
	Play_LC_Ejected_Initial = 49,
	Play_LC_PainNudgedByCar = 50,
	Play_Contact_Pledge_Break_Passes = 51,
	Stop_LC_MobilePhone = 52,
	Play_LC_PainBullet = 53,
	Play_Contact_ResponseLocked = 54,
	Play_LC_Hurt_Low = 55,
	Play_Player_Shock = 56,
	Stop_LC_Ejected_Initial = 57,
	etAudioLocEventTypes_MAX = 58,
};

/*
-----------------------------------------------------------------
 - Structs
-----------------------------------------------------------------
*/
//0x000018
//GroupMember[0x1DF2E728]
struct FGroupMember
{
	int                                                m_nCharacterUID;                                  		// 0x000000 (0x0004)              
	FVector3                                           m_LocationUnreliable;                             		// 0x000004 (0x000C)              
	unsigned char                                      m_nHealthUnreliable;                              		// 0x000010 (0x0001)              PROPERTY: 
	unsigned char                                      m_eStatus;                                        		// 0x000011 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000012[0x2];                                   		// 0x000012 (0x0002) MISSED OFFSET
	unsigned long                                      m_bHoldingTaskItem : 1;                           		// 0x000014 (0x0004) [0x00000001] 
};
//0x000083
//GroupPacket[0x1DF2E6C0]
struct FGroupPacket
{
	int                                                m_nCharacterUIDs[0x14];                           		// 0x000000 (0x0050)              
	unsigned char                                      m_nHealths[0x14];                                 		// 0x000050 (0x0014)              PROPERTY: 
	unsigned char                                      m_eStatuses[0x14];                                		// 0x000064 (0x0014)              PROPERTY: 
	int                                                m_nIdentifier;                                    		// 0x000078 (0x0004)              
	int                                                m_nLeaderUID;                                     		// 0x00007C (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x000080 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_nCollisionGroupID;                              		// 0x000081 (0x0001)              PROPERTY: 
	unsigned char                                      m_nNumMembers;                                    		// 0x000082 (0x0001)              PROPERTY: 
};
//0x000174
//UnreliableDataPacket[0x1DF2E790]
struct FUnreliableDataPacket
{
	int                                                m_nCharacterUIDs[0x14];                           		// 0x000000 (0x0050)              
	FVector3                                           m_Locations[0x14];                                		// 0x000050 (0x00F0)              
	unsigned char                                      m_nHealths[0x14];                                 		// 0x000140 (0x0014)              PROPERTY: 
	unsigned char                                      m_eStatuses[0x14];                                		// 0x000154 (0x0014)              PROPERTY: 
	int                                                m_nIdentifier;                                    		// 0x000168 (0x0004)              
	unsigned char                                      m_nNumMembers;                                    		// 0x00016C (0x0001)              PROPERTY: 
	unsigned char                                      m_nHoldingTaskItems;                              		// 0x00016D (0x0001)              PROPERTY: 
	unsigned char                                      _0x00016E[0x2];                                   		// 0x00016E (0x0002) MISSED OFFSET
	int                                                m_nChecksum;                                      		// 0x000170 (0x0004)              
};
//0x000018
//SideMember[0x1DF2E658]
struct FSideMember
{
	int                                                m_nCharacterUID;                                  		// 0x000000 (0x0004)              
	FVector3                                           m_LocationUnreliable;                             		// 0x000004 (0x000C)              
	unsigned char                                      m_nHealthUnreliable;                              		// 0x000010 (0x0001)              PROPERTY: 
	unsigned char                                      m_eStatus;                                        		// 0x000011 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000012[0x2];                                   		// 0x000012 (0x0002) MISSED OFFSET
	unsigned long                                      m_bHoldingTaskItem : 1;                           		// 0x000014 (0x0004) [0x00000001] 
};
//0x000068
//SidePacket[0x1DF2E5F0]
struct FSidePacket
{
	int                                                m_nCharacterUIDs[0x14];                           		// 0x000000 (0x0050)              
	int                                                m_nSideID;                                        		// 0x000050 (0x0004)              
	int                                                m_nOppositionID;                                  		// 0x000054 (0x0004)              
	int                                                m_nLeaderUID;                                     		// 0x000058 (0x0004)              
	int                                                m_nMissionID;                                     		// 0x00005C (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x000060 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_nTeamNameID;                                    		// 0x000061 (0x0001)              PROPERTY: 
	unsigned char                                      m_nCollisionGroupID;                              		// 0x000062 (0x0001)              PROPERTY: 
	unsigned char                                      m_nNumMembers;                                    		// 0x000063 (0x0001)              PROPERTY: 
	unsigned long                                      m_bFFASide : 1;                                   		// 0x000064 (0x0004) [0x00000001] 
	unsigned long                                      m_bShowGroupOnly : 1;                             		// 0x000064 (0x0004) [0x00000002] 
};
//0x000005
//CharacterStatus[0x1DF2E588]
struct FCharacterStatus
{
	int                                                m_eStatusIconCombo;                               		// 0x000000 (0x0004)              
	unsigned char                                      m_eCharacterStatus;                               		// 0x000004 (0x0001)              PROPERTY: etCharacterStatus
};
//0x000005
//OpenWorldConstant[0x1DF2E520]
struct FOpenWorldConstant
{
	float                                              m_fValue;                                         		// 0x000000 (0x0004)              
	unsigned char                                      m_eOpenWorldConstant;                             		// 0x000004 (0x0001)              PROPERTY: etOpenWorldConstant
};
//0x000011
//SkillRatingConstant[0x1DF2E4B8]
struct FSkillRatingConstant
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	float                                              m_fValue;                                         		// 0x00000C (0x0004)              
	unsigned char                                      m_eSkillRatingConstant;                           		// 0x000010 (0x0001)              PROPERTY: etSkillRatingConstant
};
//0x00005A
//tResupplyOperation[0x1DF2E450]
struct FtResupplyOperation
{
	double                                             m_fResupplyStartTime;                             		// 0x000000 (0x0008)              
	double                                             m_fLastUpdateTime;                                		// 0x000008 (0x0008)              
	int                                                m_nResupplyUnitSize;                              		// 0x000010 (0x0004)              
	float                                              m_fUnitResupplySeconds;                           		// 0x000014 (0x0004)              
	class AcAPBPlayerController*                       m_pPC;                                            		// 0x000018 (0x0004)              
	class AcWeapon*                                    m_pWeapon;                                        		// 0x00001C (0x0004)              
	class UiAmmoConsumer*                              m_pAmmoConsumer;                                  		// 0x000020 (0x0004)              
	unsigned char                                      _0x000024[0x4];                                   		// 0x000024 (0x0004) ALIGNEMENT
	class UiAmmoSupplier*                              m_pAmmoSupplier;                                  		// 0x000028 (0x0004)              
	unsigned char                                      _0x00002C[0x4];                                   		// 0x00002C (0x0004) ALIGNEMENT
	class UiAmmoCarrier*                               m_pAmmoCarrier;                                   		// 0x000030 (0x0004)              
	unsigned char                                      _0x000034[0x4];                                   		// 0x000034 (0x0004) ALIGNEMENT
	float                                              m_fAmmoResupplyRadius;                            		// 0x000038 (0x0004)              
	float                                              m_fProgress;                                      		// 0x00003C (0x0004)              
	int                                                m_nStartAmmoAmount;                               		// 0x000040 (0x0004)              
	int                                                m_nTotalAmmoSupplied;                             		// 0x000044 (0x0004)              
	int                                                m_nTotalAmmoSuppliedFromStorage;                  		// 0x000048 (0x0004)              
	int                                                m_nTotalAmmoBought;                               		// 0x00004C (0x0004)              
	int                                                m_nTotalCost;                                     		// 0x000050 (0x0004)              
	float                                              m_fFractionalCost;                                		// 0x000054 (0x0004)              
	unsigned char                                      m_eResupplyState;                                 		// 0x000058 (0x0001)              PROPERTY: etResupplyState
	unsigned char                                      m_eResupplyTarget;                                		// 0x000059 (0x0001)              PROPERTY: etResupplyTarget
};
//0x000010
//tPendingResupplyInfo[0x1DF2E3E8]
struct FtPendingResupplyInfo
{
	class AcAPBPlayerController*                       m_pPC;                                            		// 0x000000 (0x0004)              
	TArray<unsigned char>                              m_aWeaponTypes;                                   		// 0x000004 (0x000C)              
};
//0x000208
//VehicleSetupType[0x1DF2E380]
struct FVehicleSetupType
{
	struct FString                                     m_sDisplayName;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sGolemobileBase;                                		// 0x00000C (0x000C)              
	struct FString                                     m_sPhysicsAsset;                                  		// 0x000018 (0x000C)              
	struct FString                                     m_sSharedDataObject;                              		// 0x000024 (0x000C)              
	struct FString                                     m_sVehicleName;                                   		// 0x000030 (0x000C)              
	struct FString                                     m_sVehicleSetupAsset;                             		// 0x00003C (0x000C)              
	struct FString                                     m_sVFXPrefab;                                     		// 0x000048 (0x000C)              
	int                                                m_eAudioType;                                     		// 0x000054 (0x0004)              
	int                                                m_eExplosionType;                                 		// 0x000058 (0x0004)              
	int                                                m_eGameplayObject;                                		// 0x00005C (0x0004)              
	int                                                m_ePedestrianDriver;                              		// 0x000060 (0x0004)              
	int                                                m_eUIMeshViewerSetup;                             		// 0x000064 (0x0004)              
	int                                                m_eVehicleAnimationCategory;                      		// 0x000068 (0x0004)              
	int                                                m_eVehicleCategory;                               		// 0x00006C (0x0004)              
	float                                              m_f0msSteerAngle;                                 		// 0x000070 (0x0004)              
	float                                              m_f12msSteerAngle;                                		// 0x000074 (0x0004)              
	float                                              m_f22msSteerAngle;                                		// 0x000078 (0x0004)              
	float                                              m_f2500RpmTorque;                                 		// 0x00007C (0x0004)              
	float                                              m_f2ndGearSpeed;                                  		// 0x000080 (0x0004)              
	float                                              m_f3rdGearSpeed;                                  		// 0x000084 (0x0004)              
	float                                              m_f4500RpmTorque;                                 		// 0x000088 (0x0004)              
	float                                              m_f4thGearSpeed;                                  		// 0x00008C (0x0004)              
	float                                              m_f500RpmTorque;                                  		// 0x000090 (0x0004)              
	float                                              m_f5thGearSpeed;                                  		// 0x000094 (0x0004)              
	float                                              m_f7000RpmTorque;                                 		// 0x000098 (0x0004)              
	float                                              m_fBlobShadowScale[0x3];                          		// 0x00009C (0x000C)              
	float                                              m_fBlobShadowTranslate[0x3];                      		// 0x0000A8 (0x000C)              
	float                                              m_fBreakInCSADuration;                            		// 0x0000B4 (0x0004)              
	float                                              m_fCamBaseZFar;                                   		// 0x0000B8 (0x0004)              
	float                                              m_fCamBaseZNear;                                  		// 0x0000BC (0x0004)              
	float                                              m_fCargoHeightReductionFactor;                    		// 0x0000C0 (0x0004)              
	float                                              m_fCargoTorqueReductionFactor;                    		// 0x0000C4 (0x0004)              
	float                                              m_fChassisTorqueFactor;                           		// 0x0000C8 (0x0004)              
	float                                              m_fCollisionDamage;                               		// 0x0000CC (0x0004)              
	float                                              m_fCOMOffsetX;                                    		// 0x0000D0 (0x0004)              
	float                                              m_fCOMOffsetZ;                                    		// 0x0000D4 (0x0004)              
	float                                              m_fDriverCamFar;                                  		// 0x0000D8 (0x0004)              
	float                                              m_fDriverCamNear;                                 		// 0x0000DC (0x0004)              
	float                                              m_fEngineBrakingFactor;                           		// 0x0000E0 (0x0004)              
	float                                              m_fFinalDriveRatio;                               		// 0x0000E4 (0x0004)              
	float                                              m_fFrontLatFactor;                                		// 0x0000E8 (0x0004)              
	float                                              m_fFrontLongFactor;                               		// 0x0000EC (0x0004)              
	float                                              m_fFrontSuspensionSpeed;                          		// 0x0000F0 (0x0004)              
	float                                              m_fFrontSuspensionTravel;                         		// 0x0000F4 (0x0004)              
	float                                              m_fFrontWheelBoneOffset[0x3];                     		// 0x0000F8 (0x000C)              
	float                                              m_fFrontWheelMeshOffset[0x3];                     		// 0x000104 (0x000C)              
	float                                              m_fFrontWheelRadius;                              		// 0x000110 (0x0004)              
	float                                              m_fGearRatios[0x6];                               		// 0x000114 (0x0018)              
	float                                              m_fIdleRPM;                                       		// 0x00012C (0x0004)              
	float                                              m_fLSDFactor;                                     		// 0x000130 (0x0004)              
	float                                              m_fMaxBrakeTorque;                                		// 0x000134 (0x0004)              
	float                                              m_fMaxCargoHeightReduction;                       		// 0x000138 (0x0004)              
	float                                              m_fMaxCargoTorqueReduction;                       		// 0x00013C (0x0004)              
	float                                              m_fMaxDirt;                                       		// 0x000140 (0x0004)              
	float                                              m_fMaxDust;                                       		// 0x000144 (0x0004)              
	float                                              m_fMaxRepairTimeSecs;                             		// 0x000148 (0x0004)              
	float                                              m_fMaxReverseSpeed;                               		// 0x00014C (0x0004)              
	float                                              m_fMaxSpeed;                                      		// 0x000150 (0x0004)              
	float                                              m_fMinDirt;                                       		// 0x000154 (0x0004)              
	float                                              m_fMinDust;                                       		// 0x000158 (0x0004)              
	float                                              m_fPercentDirty;                                  		// 0x00015C (0x0004)              
	float                                              m_fPercentPerfectlyClean;                         		// 0x000160 (0x0004)              
	float                                              m_fRamraidDamageMultiplier;                       		// 0x000164 (0x0004)              
	float                                              m_fRearHandbrakeLat;                              		// 0x000168 (0x0004)              
	float                                              m_fRearHandbrakeLong;                             		// 0x00016C (0x0004)              
	float                                              m_fRearLatFactor;                                 		// 0x000170 (0x0004)              
	float                                              m_fRearLongFactor;                                		// 0x000174 (0x0004)              
	float                                              m_fRearSuspensionSpeed;                           		// 0x000178 (0x0004)              
	float                                              m_fRearSuspensionTravel;                          		// 0x00017C (0x0004)              
	float                                              m_fRearWheelBoneOffset[0x3];                      		// 0x000180 (0x000C)              
	float                                              m_fRearWheelMeshOffset[0x3];                      		// 0x00018C (0x000C)              
	float                                              m_fRearWheelRadius;                               		// 0x000198 (0x0004)              
	float                                              m_fRedlineRPM;                                    		// 0x00019C (0x0004)              
	float                                              m_fReverseThrottle;                               		// 0x0001A0 (0x0004)              
	float                                              m_fSteerAccel;                                    		// 0x0001A4 (0x0004)              
	float                                              m_fSteerSpeed;                                    		// 0x0001A8 (0x0004)              
	float                                              m_fSuspensionDamping;                             		// 0x0001AC (0x0004)              
	float                                              m_fSuspensionStiffness;                           		// 0x0001B0 (0x0004)              
	float                                              m_fWheelLatAsymptoteSlip;                         		// 0x0001B4 (0x0004)              
	float                                              m_fWheelLatAsymptoteValue;                        		// 0x0001B8 (0x0004)              
	float                                              m_fWheelLatExtremumSlip;                          		// 0x0001BC (0x0004)              
	float                                              m_fWheelLatExtremumValue;                         		// 0x0001C0 (0x0004)              
	float                                              m_fWheelLongAsymptoteSlip;                        		// 0x0001C4 (0x0004)              
	float                                              m_fWheelLongAsymptoteValue;                       		// 0x0001C8 (0x0004)              
	float                                              m_fWheelLongExtremumSlip;                         		// 0x0001CC (0x0004)              
	float                                              m_fWheelLongExtremumValue;                        		// 0x0001D0 (0x0004)              
	int                                                m_nCabinCargoPipCapacity;                         		// 0x0001D4 (0x0004)              
	int                                                m_nCameraPitchMax;                                		// 0x0001D8 (0x0004)              
	int                                                m_nCameraPitchMin;                                		// 0x0001DC (0x0004)              
	int                                                m_nCargoAreaSeatPositions;                        		// 0x0001E0 (0x0004)              
	int                                                m_nInitialCamPitch;                               		// 0x0001E4 (0x0004)              
	int                                                m_nMainCargoPipCapacity;                          		// 0x0001E8 (0x0004)              
	int                                                m_nMaxHealth;                                     		// 0x0001EC (0x0004)              
	int                                                m_nMaxRepairCost;                                 		// 0x0001F0 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x0001F4 (0x0004)              
	int                                                m_nSpawnCost;                                     		// 0x0001F8 (0x0004)              
	unsigned char                                      m_eDriveType;                                     		// 0x0001FC (0x0001)              PROPERTY: etVehicleDriveType
	unsigned char                                      m_eTempAssets;                                    		// 0x0001FD (0x0001)              PROPERTY: etVehicleTempSetup
	unsigned char                                      m_eUICategory;                                    		// 0x0001FE (0x0001)              PROPERTY: etVehicleUICategory
	unsigned char                                      m_eVehicleModelClass;                             		// 0x0001FF (0x0001)              PROPERTY: etVehicleModelClass
	unsigned char                                      m_eVehicleSetupType;                              		// 0x000200 (0x0001)              PROPERTY: etVehicleSetupType
	unsigned char                                      _0x000201[0x3];                                   		// 0x000201 (0x0003) MISSED OFFSET
	unsigned long                                      m_bHasAlarm : 1;                                  		// 0x000204 (0x0004) [0x00000001] 
	unsigned long                                      m_bHasRearSeats : 1;                              		// 0x000204 (0x0004) [0x00000002] 
	unsigned long                                      m_bHasTailLights : 1;                             		// 0x000204 (0x0004) [0x00000004] 
	unsigned long                                      m_bIsPlayerOnlyVehicle : 1;                       		// 0x000204 (0x0004) [0x00000008] 
};
//0x000019
//VehiclePositionInfo[0x1DF2E318]
struct FVehiclePositionInfo
{
	int                                                m_eVehicleAnimationCategory;                      		// 0x000000 (0x0004)              
	int                                                m_eVehicleDoorAnimationSet;                       		// 0x000004 (0x0004)              
	int                                                m_eVehicleNPCInsideAnimationSet;                  		// 0x000008 (0x0004)              
	int                                                m_eVehiclePlayerAnimationSet;                     		// 0x00000C (0x0004)              
	int                                                m_nVCPAngle;                                      		// 0x000010 (0x0004)              
	int                                                m_nVCPDirection;                                  		// 0x000014 (0x0004)              
	unsigned char                                      m_eVehiclePositionIndex;                          		// 0x000018 (0x0001)              PROPERTY: etVehiclePositionIndex
};
//0x00002C
//VehiclePlayerAnimationSet[0x1DF2E2B0]
struct FVehiclePlayerAnimationSet
{
	struct FString                                     m_sDriveSteer;                                    		// 0x000000 (0x000C)              
	struct FString                                     m_sPassengerIdle;                                 		// 0x00000C (0x000C)              
	int                                                m_eAnimTreeDecision;                              		// 0x000018 (0x0004)              
	int                                                m_eVehiclePlayerAnimationSet;                     		// 0x00001C (0x0004)              
	float                                              m_fLeanInDuration;                                		// 0x000020 (0x0004)              
	float                                              m_fLeanOutDuration;                               		// 0x000024 (0x0004)              
	unsigned long                                      m_bMirrorAnimations : 1;                          		// 0x000028 (0x0004) [0x00000001] 
	unsigned long                                      m_bReverseAim : 1;                                		// 0x000028 (0x0004) [0x00000002] 
};
//0x000074
//VehicleNPCInsideAnimationSet[0x1DF2E248]
struct FVehicleNPCInsideAnimationSet
{
	struct FString                                     m_sEjectInitialCriminal;                          		// 0x000000 (0x000C)              
	struct FString                                     m_sEjectInitialEnforcer;                          		// 0x00000C (0x000C)              
	struct FString                                     m_sEjectInitialFromPassengerSideCriminal;         		// 0x000018 (0x000C)              
	struct FString                                     m_sEjectInitialFromPassengerSideEnforcer;         		// 0x000024 (0x000C)              
	struct FString                                     m_sEjectLaterCriminal;                            		// 0x000030 (0x000C)              
	struct FString                                     m_sEjectLaterEnforcer;                            		// 0x00003C (0x000C)              
	struct FString                                     m_sEjectLaterFromPassengerSideCriminal;           		// 0x000048 (0x000C)              
	struct FString                                     m_sEjectLaterFromPassengerSideEnforcer;           		// 0x000054 (0x000C)              
	int                                                m_eVehicleNPCInsideAnimationSet;                  		// 0x000060 (0x0004)              
	float                                              m_fEjectDistanceDriverSideCriminal;               		// 0x000064 (0x0004)              
	float                                              m_fEjectDistanceDriverSideEnforcer;               		// 0x000068 (0x0004)              
	float                                              m_fEjectDistancePassengerSideCriminal;            		// 0x00006C (0x0004)              
	float                                              m_fEjectDistancePassengerSideEnforcer;            		// 0x000070 (0x0004)              
};
//0x000080
//VehicleDoorAnimationSet[0x1DF2E1E0]
struct FVehicleDoorAnimationSet
{
	struct FString                                     m_sClosedFrame;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sCloseFromInside;                               		// 0x00000C (0x000C)              
	struct FString                                     m_sCloseFromOutside;                              		// 0x000018 (0x000C)              
	struct FString                                     m_sCloseGetIn;                                    		// 0x000024 (0x000C)              
	struct FString                                     m_sOpenBailOut;                                   		// 0x000030 (0x000C)              
	struct FString                                     m_sOpenFrame;                                     		// 0x00003C (0x000C)              
	struct FString                                     m_sOpenFromOutside;                               		// 0x000048 (0x000C)              
	struct FString                                     m_sOpenGetOut;                                    		// 0x000054 (0x000C)              
	struct FString                                     m_sOpenSeatSlideEjectCriminal;                    		// 0x000060 (0x000C)              
	struct FString                                     m_sOpenSeatSlideEjectEnforcer;                    		// 0x00006C (0x000C)              
	int                                                m_eVehicleDoorAnimationSet;                       		// 0x000078 (0x0004)              
	unsigned long                                      m_bDoorOpenWhileInside : 1;                       		// 0x00007C (0x0004) [0x00000001] 
};
//0x000010
//VehicleInteractionAnimation[0x1DF2E178]
struct FVehicleInteractionAnimation
{
	float                                              m_fBlendInTime;                                   		// 0x000000 (0x0004)              
	float                                              m_fBlendOutTime;                                  		// 0x000004 (0x0004)              
	unsigned char                                      m_eVehicleInteractionAnimation;                   		// 0x000008 (0x0001)              PROPERTY: etVehicleInteractionAnimation
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	unsigned long                                      m_bMirror : 1;                                    		// 0x00000C (0x0004) [0x00000001] 
	unsigned long                                      m_bPauseAtEnd : 1;                                		// 0x00000C (0x0004) [0x00000002] 
	unsigned long                                      m_bScaleRoot : 1;                                 		// 0x00000C (0x0004) [0x00000004] 
	unsigned long                                      m_bStartAtOrigin : 1;                             		// 0x00000C (0x0004) [0x00000008] 
};
//0x000011
//VehicleInteractionSequence[0x1DF2E110]
struct FVehicleInteractionSequence
{
	struct FString                                     m_sSequenceName;                                  		// 0x000000 (0x000C)              
	int                                                m_eVehiclePlayerAnimationSet;                     		// 0x00000C (0x0004)              
	unsigned char                                      m_eVehicleInteractionAnimation;                   		// 0x000010 (0x0001)              PROPERTY: etVehicleInteractionAnimation
};
//0x00000C
//VehicleCritical[0x1DF2E0A8]
struct FVehicleCritical
{
	int                                                m_eHUDMessage;                                    		// 0x000000 (0x0004)              
	int                                                m_eVehicleCritical;                               		// 0x000004 (0x0004)              
	float                                              m_fWeight;                                        		// 0x000008 (0x0004)              
};
//0x00002C
//GolemPart[0x1DF2E040]
struct FGolemPart
{
	struct FString                                     m_sGolemPart;                                     		// 0x000000 (0x000C)              
	struct FString                                     m_sUsername;                                      		// 0x00000C (0x000C)              
	int                                                m_eClass;                                         		// 0x000018 (0x0004)              
	int                                                m_eClothingItemCategory;                          		// 0x00001C (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000020 (0x0004)              
	int                                                m_nVersatility;                                   		// 0x000024 (0x0004)              
	unsigned long                                      m_bStartup : 1;                                   		// 0x000028 (0x0004) [0x00000001] 
	unsigned long                                      m_bTestAsset : 1;                                 		// 0x000028 (0x0004) [0x00000002] 
};
//0x00000C
//GolemPartClass[0x1DF2DFD8]
struct FGolemPartClass
{
	int                                                m_eGolemPartClass;                                		// 0x000000 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000004 (0x0004)              
	unsigned long                                      m_bCoversBreasts : 1;                             		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      m_bCoversGenitalia : 1;                           		// 0x000008 (0x0004) [0x00000002] 
	unsigned long                                      m_bUseInClothingPreview : 1;                      		// 0x000008 (0x0004) [0x00000004] 
};
//0x00000D
//VehicleGear[0x1DF2DF70]
struct FVehicleGear
{
	struct FString                                     m_sPackageImageRef;                               		// 0x000000 (0x000C)              
	unsigned char                                      m_eVehicleGear;                                   		// 0x00000C (0x0001)              PROPERTY: etVehicleGear
};
//0x000094
//VehicleAudioPartDefaults[0x1DF2DF08]
struct FVehicleAudioPartDefaults
{
	struct FString                                     m_sDamageType;                                    		// 0x000000 (0x000C)              
	struct FString                                     m_sDoorEventCloseFront;                           		// 0x00000C (0x000C)              
	struct FString                                     m_sDoorEventCloseRearBack;                        		// 0x000018 (0x000C)              
	struct FString                                     m_sDoorEventCloseRearSide;                        		// 0x000024 (0x000C)              
	struct FString                                     m_sDoorEventOpenFront;                            		// 0x000030 (0x000C)              
	struct FString                                     m_sDoorEventOpenRearBack;                         		// 0x00003C (0x000C)              
	struct FString                                     m_sDoorEventOpenRearSide;                         		// 0x000048 (0x000C)              
	struct FString                                     m_sLC_VehicleType;                                		// 0x000054 (0x000C)              
	struct FString                                     m_sSuspensionType;                                		// 0x000060 (0x000C)              
	int                                                m_eDefaultAmp;                                    		// 0x00006C (0x0004)              
	int                                                m_eDefaultEngine;                                 		// 0x000070 (0x0004)              
	int                                                m_eDefaultExhaust;                                		// 0x000074 (0x0004)              
	int                                                m_eDefaultHorn;                                   		// 0x000078 (0x0004)              
	int                                                m_eDefaultSiren;                                  		// 0x00007C (0x0004)              
	int                                                m_eDefaultSpeaker;                                		// 0x000080 (0x0004)              
	int                                                m_eVehicleAudioPartDefaults;                      		// 0x000084 (0x0004)              
	float                                              m_fMaxEnclosedness;                               		// 0x000088 (0x0004)              
	float                                              m_fWheelForceEventThreshold;                      		// 0x00008C (0x0004)              
	float                                              m_fWheelForceMax;                                 		// 0x000090 (0x0004)              
};
//0x00000D
//VehicleUICategory[0x1DF2DEA0]
struct FVehicleUICategory
{
	struct FString                                     m_sDisplayName;                                   		// 0x000000 (0x000C)              
	unsigned char                                      m_eVehicleUICategory;                             		// 0x00000C (0x0001)              PROPERTY: etVehicleUICategory
};
//0x00000D
//VehicleTempSetup[0x1DF2DE38]
struct FVehicleTempSetup
{
	struct FString                                     m_sTempSetupInfo;                                 		// 0x000000 (0x000C)              
	unsigned char                                      m_eVehicleTempSetup;                              		// 0x00000C (0x0001)              PROPERTY: etVehicleTempSetup
};
//0x000010
//VehicleDamageLevel[0x1DF2DDD0]
struct FVehicleDamageLevel
{
	int                                                m_eHandlingEffect;                                		// 0x000000 (0x0004)              
	int                                                m_eVehicleCritical;                               		// 0x000004 (0x0004)              
	int                                                m_eVehicleDamageLevel;                            		// 0x000008 (0x0004)              
	float                                              m_fHealthThreshold;                               		// 0x00000C (0x0004)              
};
//0x00001C
//ContextSensitiveActionBase[0x1DF2DD68]
struct FContextSensitiveActionBase
{
	struct FString                                     m_sDisplayName;                                   		// 0x000000 (0x000C)              
	int                                                m_eBeginCSATutorialTrigger;                       		// 0x00000C (0x0004)              
	int                                                m_eEndCSATutorialTrigger;                         		// 0x000010 (0x0004)              
	unsigned char                                      m_eAnimType;                                      		// 0x000014 (0x0001)              PROPERTY: etCSAAnimType
	unsigned char                                      m_eContextSensitiveActionBase;                    		// 0x000015 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eInputType;                                     		// 0x000016 (0x0001)              PROPERTY: etCSAInputType
	unsigned char                                      m_eOpposingCSA;                                   		// 0x000017 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned long                                      m_bCanAbandon : 1;                                		// 0x000018 (0x0004) [0x00000001] 
	unsigned long                                      m_bCancelsCrouch : 1;                             		// 0x000018 (0x0004) [0x00000002] 
	unsigned long                                      m_bCanResume : 1;                                 		// 0x000018 (0x0004) [0x00000004] 
	unsigned long                                      m_bConsiderActive : 1;                            		// 0x000018 (0x0004) [0x00000008] 
	unsigned long                                      m_bIndefiniteDuration : 1;                        		// 0x000018 (0x0004) [0x00000010] 
	unsigned long                                      m_bInterruptInventory : 1;                        		// 0x000018 (0x0004) [0x00000020] 
	unsigned long                                      m_bInvoked : 1;                                   		// 0x000018 (0x0004) [0x00000040] 
	unsigned long                                      m_bMissionCSA : 1;                                		// 0x000018 (0x0004) [0x00000080] 
	unsigned long                                      m_bNoHideWeapon : 1;                              		// 0x000018 (0x0004) [0x00000100] 
	unsigned long                                      m_bProgressBar : 1;                               		// 0x000018 (0x0004) [0x00000200] 
	unsigned long                                      m_bSmallTargetVolume : 1;                         		// 0x000018 (0x0004) [0x00000400] 
	unsigned long                                      m_bTimedDuration : 1;                             		// 0x000018 (0x0004) [0x00000800] 
	unsigned long                                      m_bVolumeCSA : 1;                                 		// 0x000018 (0x0004) [0x00001000] 
};
//0x000034
//ContextSensitiveAction[0x1DF2DD00]
struct FContextSensitiveAction
{
	int                                                m_eDefaultAutoRouteData;                          		// 0x000000 (0x0004)              
	float                                              m_fAimDot;                                        		// 0x000004 (0x0004)              
	float                                              m_fCameraDirectionAimDotWeightingScalar;          		// 0x000008 (0x0004)              
	float                                              m_fDistanceWeightingScalar;                       		// 0x00000C (0x0004)              
	float                                              m_fHorizontalServerDistanceErrorMargin;           		// 0x000010 (0x0004)              
	float                                              m_fHUDHintDistance;                               		// 0x000014 (0x0004)              
	float                                              m_fInteractionDistance;                           		// 0x000018 (0x0004)              
	float                                              m_fPawnDirectionAimDotWeightingScalar;            		// 0x00001C (0x0004)              
	float                                              m_fVerticalInteractionDistance;                   		// 0x000020 (0x0004)              
	float                                              m_fVerticalServerDistanceErrorMargin;             		// 0x000024 (0x0004)              
	int                                                m_nPriorityLayer;                                 		// 0x000028 (0x0004)              
	unsigned char                                      m_eContextSensitiveAction;                        		// 0x00002C (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eDefaultAlignmentType;                          		// 0x00002D (0x0001)              PROPERTY: etCSAAlignmentType
	unsigned char                                      m_eLineCheckType;                                 		// 0x00002E (0x0001)              PROPERTY: etCSALineCheckType
	unsigned char                                      _0x00002F[0x1];                                   		// 0x00002F (0x0001) MISSED OFFSET
	unsigned long                                      m_bAimCheck : 1;                                  		// 0x000030 (0x0004) [0x00000001] 
	unsigned long                                      m_bAllowWhileFalling : 1;                         		// 0x000030 (0x0004) [0x00000002] 
	unsigned long                                      m_bChecksUseAutoRouteData : 1;                    		// 0x000030 (0x0004) [0x00000004] 
	unsigned long                                      m_bDefaultLineCheck : 1;                          		// 0x000030 (0x0004) [0x00000008] 
	unsigned long                                      m_bDistanceCheck : 1;                             		// 0x000030 (0x0004) [0x00000010] 
	unsigned long                                      m_bIsAnimationDrivenAction : 1;                   		// 0x000030 (0x0004) [0x00000020] 
	unsigned long                                      m_bIsTargetedCSA : 1;                             		// 0x000030 (0x0004) [0x00000040] 
	unsigned long                                      m_bLargeTaskItem : 1;                             		// 0x000030 (0x0004) [0x00000080] 
	unsigned long                                      m_bMediumTaskItem : 1;                            		// 0x000030 (0x0004) [0x00000100] 
	unsigned long                                      m_bSingleInteractionPoint : 1;                    		// 0x000030 (0x0004) [0x00000200] 
	unsigned long                                      m_bSingleProgressBar : 1;                         		// 0x000030 (0x0004) [0x00000400] 
	unsigned long                                      m_bSmallTaskItem : 1;                             		// 0x000030 (0x0004) [0x00000800] 
	unsigned long                                      m_bSprintPriority : 1;                            		// 0x000030 (0x0004) [0x00001000] 
};
//0x000005
//InvokedContextSensitiveAction[0x1DF2DC98]
struct FInvokedContextSensitiveAction
{
	float                                              m_fDuration;                                      		// 0x000000 (0x0004)              
	unsigned char                                      m_eContextSensitiveAction;                        		// 0x000004 (0x0001)              PROPERTY: etContextSensitiveActionBase
};
//0x000016
//CSA_ItemAssociation[0x1DF2DC30]
struct FCSA_ItemAssociation
{
	int                                                m_eCSA_ItemAssociation;                           		// 0x000000 (0x0004)              
	int                                                m_eDefaultEquipmentAnimationType;                 		// 0x000004 (0x0004)              
	int                                                m_eEquipmentType;                                 		// 0x000008 (0x0004)              
	int                                                m_eItemAssociationCategory;                       		// 0x00000C (0x0004)              
	float                                              m_fEffectivenessModifier;                         		// 0x000010 (0x0004)              
	unsigned char                                      m_eContextSensitiveAction;                        		// 0x000014 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eFaction;                                       		// 0x000015 (0x0001)              PROPERTY: etFaction
};
//0x000010
//CSA_ItemAssociationCategory[0x1DF2DBC8]
struct FCSA_ItemAssociationCategory
{
	struct FString                                     m_sEffect;                                        		// 0x000000 (0x000C)              
	int                                                m_eCSA_ItemAssociationCategory;                   		// 0x00000C (0x0004)              
};
//0x00000A
//CSA_IATState[0x1DF2DB60]
struct FCSA_IATState
{
	int                                                m_nMaxConcurrentUsersPerActor;                    		// 0x000000 (0x0004)              
	int                                                m_nMaxConcurrentUsersPerIP;                       		// 0x000004 (0x0004)              
	unsigned char                                      m_eCSA_IATState;                                  		// 0x000008 (0x0001)              PROPERTY: etCSA_IATState
	unsigned char                                      m_eInteractiveActorType;                          		// 0x000009 (0x0001)              PROPERTY: etInteractiveActorType
};
//0x000018
//CSA_IATStateAssociation[0x1DF2DAF8]
struct FCSA_IATStateAssociation
{
	int                                                m_eCSA_IATStateAssociation;                       		// 0x000000 (0x0004)              
	int                                                m_eInputMapping;                                  		// 0x000004 (0x0004)              
	float                                              m_fDuration;                                      		// 0x000008 (0x0004)              
	int                                                m_nPriorityLayer;                                 		// 0x00000C (0x0004)              
	unsigned char                                      m_eContextSensitiveAction;                        		// 0x000010 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eCSA_IATState;                                  		// 0x000011 (0x0001)              PROPERTY: etCSA_IATState
	unsigned char                                      _0x000012[0x2];                                   		// 0x000012 (0x0002) MISSED OFFSET
	unsigned long                                      m_bOverridePriority : 1;                          		// 0x000014 (0x0004) [0x00000001] 
};
//0x000006
//InteractiveActorType[0x1DF2DA90]
struct FInteractiveActorType
{
	float                                              m_Dummy;                                          		// 0x000000 (0x0004)              
	unsigned char                                      m_eInteractiveActorCategory;                      		// 0x000004 (0x0001)              PROPERTY: etInteractiveActorCategory
	unsigned char                                      m_eInteractiveActorType;                          		// 0x000005 (0x0001)              PROPERTY: etInteractiveActorType
};
//0x000058
//CSA_EquipmentAnimationType[0x1DF2DA28]
struct FCSA_EquipmentAnimationType
{
	struct FString                                     m_sIntroAnim;                                     		// 0x000000 (0x000C)              
	struct FString                                     m_sMainAnim1;                                     		// 0x00000C (0x000C)              
	struct FString                                     m_sMainAnim2;                                     		// 0x000018 (0x000C)              
	struct FString                                     m_sMainAnim3;                                     		// 0x000024 (0x000C)              
	struct FString                                     m_sOutroAnim;                                     		// 0x000030 (0x000C)              
	struct FString                                     m_sVFXClass;                                      		// 0x00003C (0x000C)              
	int                                                m_eCSA_EquipmentAnimationType;                    		// 0x000048 (0x0004)              
	float                                              m_fOutroDuration;                                 		// 0x00004C (0x0004)              
	unsigned char                                      m_eOutroEndPoint;                                 		// 0x000050 (0x0001)              PROPERTY: etCSAEndPoint
	unsigned char                                      _0x000051[0x3];                                   		// 0x000051 (0x0003) MISSED OFFSET
	unsigned long                                      m_bCanMirror : 1;                                 		// 0x000054 (0x0004) [0x00000001] 
	unsigned long                                      m_bUseRootMotion : 1;                             		// 0x000054 (0x0004) [0x00000002] 
};
//0x00000C
//CSA_EATVehicleAssociation[0x1DF2D9C0]
struct FCSA_EATVehicleAssociation
{
	int                                                m_eEquipmentAnimation;                            		// 0x000000 (0x0004)              
	int                                                m_eItemAssociation;                               		// 0x000004 (0x0004)              
	int                                                m_eVehicleAnimationType;                          		// 0x000008 (0x0004)              
};
//0x000018
//CSA_EATPropAssociation[0x1DF2D958]
struct FCSA_EATPropAssociation
{
	int                                                m_eAutoRouteData;                                 		// 0x000000 (0x0004)              
	int                                                m_eCSA_EATPropAssociation;                        		// 0x000004 (0x0004)              
	int                                                m_eEquipmentAnimation;                            		// 0x000008 (0x0004)              
	int                                                m_eItemAssociation;                               		// 0x00000C (0x0004)              
	int                                                m_ePropCategory;                                  		// 0x000010 (0x0004)              
	unsigned long                                      m_bChecksUseAutoRouteLocation : 1;                		// 0x000014 (0x0004) [0x00000001] 
	unsigned long                                      m_bUseSmallCollisionVolume : 1;                   		// 0x000014 (0x0004) [0x00000002] 
};
//0x000018
//CSA_TaskItemAnimationSet[0x1DF2D8F0]
struct FCSA_TaskItemAnimationSet
{
	struct FString                                     m_sAnimName;                                      		// 0x000000 (0x000C)              
	int                                                m_eCSA_TaskItemAnimationSet;                      		// 0x00000C (0x0004)              
	unsigned char                                      m_eCSA;                                           		// 0x000010 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eTaskItemSize;                                  		// 0x000011 (0x0001)              PROPERTY: etTaskItemSize
	unsigned char                                      _0x000012[0x2];                                   		// 0x000012 (0x0002) MISSED OFFSET
	unsigned long                                      m_bLogical : 1;                                   		// 0x000014 (0x0004) [0x00000001] 
	unsigned long                                      m_bUseAnimDuration : 1;                           		// 0x000014 (0x0004) [0x00000002] 
};
//0x000050
//CSA_AutoRouteData[0x1DF2D888]
struct FCSA_AutoRouteData
{
	struct FString                                     m_sSocketName[0x5];                               		// 0x000000 (0x003C)              
	int                                                m_eCSA_AutoRouteData;                             		// 0x00003C (0x0004)              
	float                                              m_fOffsetForward;                                 		// 0x000040 (0x0004)              
	float                                              m_fOffsetRight;                                   		// 0x000044 (0x0004)              
	unsigned char                                      m_eAlignmentType;                                 		// 0x000048 (0x0001)              PROPERTY: etCSAAlignmentType
	unsigned char                                      m_eAutoRouteType;                                 		// 0x000049 (0x0001)              PROPERTY: etCSAAutoRouteType
	unsigned char                                      _0x00004A[0x2];                                   		// 0x00004A (0x0002) MISSED OFFSET
	unsigned long                                      m_bRouteAlongNormal : 1;                          		// 0x00004C (0x0004) [0x00000001] 
};
//0x000010
//CSA_InputMapping[0x1DF2D820]
struct FCSA_InputMapping
{
	struct FString                                     m_sKeyBinding;                                    		// 0x000000 (0x000C)              
	int                                                m_eCSA_InputMapping;                              		// 0x00000C (0x0004)              
};
//0x000014
//OnFootDeathAnimation[0x1DF2D7B8]
struct FOnFootDeathAnimation
{
	struct FString                                     m_sAnimName;                                      		// 0x000000 (0x000C)              
	unsigned char                                      m_eOnFootDeathAnimation;                          		// 0x00000C (0x0001)              PROPERTY: etOnFootDeathAnimation
	unsigned char                                      _0x00000D[0x3];                                   		// 0x00000D (0x0003) MISSED OFFSET
	unsigned long                                      m_bRetainMomentum : 1;                            		// 0x000010 (0x0004) [0x00000001] 
};
//0x00000C
//tCarAnimation[0x1DF2D750]
struct FtCarAnimation
{
	class AcAPBVehicleBase*                            m_Vehicle;                                        		// 0x000000 (0x0004)              
	unsigned char                                      m_eVehicleSeat;                                   		// 0x000004 (0x0001)              PROPERTY: etVehiclePositionIndex
	unsigned char                                      m_eVehicleInteractionAnimation;                   		// 0x000005 (0x0001)              PROPERTY: etVehicleInteractionAnimation
	unsigned char                                      _0x000006[0x2];                                   		// 0x000006 (0x0002) MISSED OFFSET
	unsigned long                                      m_bMirror : 1;                                    		// 0x000008 (0x0004) [0x00000001] 
};
//0x00001D
//AnimationRequest[0x1DF2D6E8]
struct FAnimationRequest
{
	class UcAnimationDescriptor*                       m_Animation;                                      		// 0x000000 (0x0004)              
	class AcAnimationDrivenTrigger*                    m_Trigger;                                        		// 0x000004 (0x0004)              
	float                                              m_StartLocationX;                                 		// 0x000008 (0x0004)              
	float                                              m_StartLocationY;                                 		// 0x00000C (0x0004)              
	float                                              m_StartLocationZ;                                 		// 0x000010 (0x0004)              
	unsigned char                                      m_ePhysicsOverride;                               		// 0x000014 (0x0001)              PROPERTY: EPhysics
	unsigned char                                      _0x000015[0x3];                                   		// 0x000015 (0x0003) MISSED OFFSET
	int                                                m_NetworkTag;                                     		// 0x000018 (0x0004)              
	unsigned char                                      m_Action;                                         		// 0x00001C (0x0001)              PROPERTY: 
};
//0x000005
//ErrorCode[0x1DF2D680]
struct FErrorCode
{
	int                                                m_nDummy;                                         		// 0x000000 (0x0004)              
	unsigned char                                      m_eErrorCode;                                     		// 0x000004 (0x0001)              PROPERTY: etErrorCode
};
//0x000050
//InventoryItemType[0x1DF2D618]
struct FInventoryItemType
{
	struct FString                                     m_sCreatorName;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayName;                                   		// 0x00000C (0x000C)              
	int                                                m_eHUDImage;                                      		// 0x000018 (0x0004)              
	int                                                m_eInfraCategory;                                 		// 0x00001C (0x0004)              
	int                                                m_eInventoryItemType;                             		// 0x000020 (0x0004)              
	int                                                m_eLease;                                         		// 0x000024 (0x0004)              
	int                                                m_eUnlock;                                        		// 0x000028 (0x0004)              
	int                                                m_nArmasCategoryID;                               		// 0x00002C (0x0004)              
	int                                                m_nArmasProductID;                                		// 0x000030 (0x0004)              
	int                                                m_nArmasSubcategoryID;                            		// 0x000034 (0x0004)              
	int                                                m_nCostAPBCash;                                   		// 0x000038 (0x0004)              
	int                                                m_nCostRewardTokens;                              		// 0x00003C (0x0004)              
	int                                                m_nMinRating;                                     		// 0x000040 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000044 (0x0004)              
	unsigned char                                      m_eOrganisation;                                  		// 0x000048 (0x0001)              PROPERTY: etOrganisation
	unsigned char                                      m_eTrade;                                         		// 0x000049 (0x0001)              PROPERTY: 
	unsigned char                                      _0x00004A[0x2];                                   		// 0x00004A (0x0002) MISSED OFFSET
	unsigned long                                      m_bCanSellback : 1;                               		// 0x00004C (0x0004) [0x00000001] 
	unsigned long                                      m_bCriminal : 1;                                  		// 0x00004C (0x0004) [0x00000002] 
	unsigned long                                      m_bEnforcer : 1;                                  		// 0x00004C (0x0004) [0x00000004] 
	unsigned long                                      m_bGifted : 1;                                    		// 0x00004C (0x0004) [0x00000008] 
	unsigned long                                      m_bIgnoreSddValidation : 1;                       		// 0x00004C (0x0004) [0x00000010] 
	unsigned long                                      m_bIsArmas : 1;                                   		// 0x00004C (0x0004) [0x00000020] 
	unsigned long                                      m_bIsTestItem : 1;                                		// 0x00004C (0x0004) [0x00000040] 
	unsigned long                                      m_bNoDelete : 1;                                  		// 0x00004C (0x0004) [0x00000080] 
	unsigned long                                      m_bRussianOnly : 1;                               		// 0x00004C (0x0004) [0x00000100] 
};
//0x000015
//CapacityItemType[0x1DF2D5B0]
struct FCapacityItemType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00000C (0x0004)              
	int                                                m_nAmount;                                        		// 0x000010 (0x0004)              
	unsigned char                                      m_eInventoryItemCategory;                         		// 0x000014 (0x0001)              PROPERTY: etInventoryItemCategory
};
//0x000028
//ClothingItemType[0x1DF2D548]
struct FClothingItemType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sResource;                                      		// 0x00000C (0x000C)              
	int                                                m_eGolemPart;                                     		// 0x000018 (0x0004)              
	int                                                m_eInventoryItemType;                             		// 0x00001C (0x0004)              
	int                                                m_nReeditFee;                                     		// 0x000020 (0x0004)              
	unsigned long                                      m_bFemale : 1;                                    		// 0x000024 (0x0004) [0x00000001] 
	unsigned long                                      m_bMale : 1;                                      		// 0x000024 (0x0004) [0x00000002] 
};
//0x000004
//DefaultOutfitItem[0x1DF2D4E0]
struct FDefaultOutfitItem
{
	int                                                m_eClothingItemType;                              		// 0x000000 (0x0004)              
};
//0x000004
//EmoteItemType[0x1DF2D478]
struct FEmoteItemType
{
	int                                                m_eInventoryItemType;                             		// 0x000000 (0x0004)              
};
//0x000020
//EquipmentType[0x1DF2D410]
struct FEquipmentType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eEquipmentCategory;                             		// 0x00000C (0x0004)              
	int                                                m_eInventoryItemType;                             		// 0x000010 (0x0004)              
	int                                                m_eItemAttachment;                                		// 0x000014 (0x0004)              
	int                                                m_fDurationOfUse;                                 		// 0x000018 (0x0004)              
	int                                                m_nGradeOrdinal;                                  		// 0x00001C (0x0004)              
};
//0x000008
//BombEquipmentType[0x1DF2D3A8]
struct FBombEquipmentType
{
	int                                                m_eBombLevel;                                     		// 0x000000 (0x0004)              
	int                                                m_eInventoryItemType;                             		// 0x000004 (0x0004)              
};
//0x000010
//EquipmentCategory[0x1DF2D340]
struct FEquipmentCategory
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eEquipmentCategory;                             		// 0x00000C (0x0004)              
};
//0x000020
//ModifierItemType[0x1DF2D2D8]
struct FModifierItemType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00000C (0x0004)              
	int                                                m_eModifierItem;                                  		// 0x000010 (0x0004)              
	int                                                m_nApplicationCost;                               		// 0x000014 (0x0004)              
	int                                                m_nRemovalCost;                                   		// 0x000018 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x00001C (0x0004)              
};
//0x000004
//CharacterModifierItemType[0x1DF2D270]
struct FCharacterModifierItemType
{
	int                                                m_eInventoryItemType;                             		// 0x000000 (0x0004)              
};
//0x000004
//VehicleModifierItemType[0x1DF2D208]
struct FVehicleModifierItemType
{
	int                                                m_eInventoryItemType;                             		// 0x000000 (0x0004)              
};
//0x000004
//WeaponModifierItemType[0x1DF2D1A0]
struct FWeaponModifierItemType
{
	int                                                m_eInventoryItemType;                             		// 0x000000 (0x0004)              
};
//0x000048
//ModifierItem[0x1DF2D138]
struct FModifierItem
{
	struct FString                                     m_sTriggerSFX;                                    		// 0x000000 (0x000C)              
	struct FString                                     m_sTriggerVFX;                                    		// 0x00000C (0x000C)              
	int                                                m_eModifierCategory;                              		// 0x000018 (0x0004)              
	int                                                m_eModifierItem;                                  		// 0x00001C (0x0004)              
	int                                                m_eRulesetExclusion;                              		// 0x000020 (0x0004)              
	float                                              m_fCooldownTimeAtPremiumLevel[0x2];               		// 0x000024 (0x0008)              
	float                                              m_fDurationAtPremiumLevel[0x2];                   		// 0x00002C (0x0008)              
	float                                              m_fIntervalTimeAtPremiumLevel[0x2];               		// 0x000034 (0x0008)              
	int                                                m_nModifierLevel;                                 		// 0x00003C (0x0004)              
	unsigned char                                      m_eGiftBoxTheme;                                  		// 0x000040 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000041[0x3];                                   		// 0x000041 (0x0003) MISSED OFFSET
	unsigned long                                      m_bActivationEndsImmunity : 1;                    		// 0x000044 (0x0004) [0x00000001] 
	unsigned long                                      m_bBroadcastSFX : 1;                              		// 0x000044 (0x0004) [0x00000002] 
	unsigned long                                      m_bUnCancelable : 1;                              		// 0x000044 (0x0004) [0x00000004] 
};
//0x000010
//ModifierCategory[0x1DF2D0D0]
struct FModifierCategory
{
	int                                                m_eModifierCategory;                              		// 0x000000 (0x0004)              
	int                                                m_nSelectableSlot;                                		// 0x000004 (0x0004)              
	unsigned char                                      m_eModifierClass;                                 		// 0x000008 (0x0001)              PROPERTY: etModifierClass
	unsigned char                                      m_eModifierType;                                  		// 0x000009 (0x0001)              PROPERTY: etModifierType
	unsigned char                                      m_eStackingSlot;                                  		// 0x00000A (0x0001)              PROPERTY: etModifierStackingSlot
	unsigned char                                      _0x00000B[0x1];                                   		// 0x00000B (0x0001) MISSED OFFSET
	unsigned long                                      m_bAvailableAsPassenger : 1;                      		// 0x00000C (0x0004) [0x00000001] 
};
//0x000019
//ModifierEffect[0x1DF2D068]
struct FModifierEffect
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eModifierItem;                                  		// 0x00000C (0x0004)              
	float                                              m_fAddToResult;                                   		// 0x000010 (0x0004)              
	float                                              m_fEffectMultiplier;                              		// 0x000014 (0x0004)              
	unsigned char                                      m_eEffectType;                                    		// 0x000018 (0x0001)              PROPERTY: etModifierEffectType
};
//0x000015
//ModifierItemEffect[0x1DF2D000]
struct FModifierItemEffect
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eItem;                                          		// 0x00000C (0x0004)              
	int                                                m_eModifierItem;                                  		// 0x000010 (0x0004)              
	unsigned char                                      m_eEffect;                                        		// 0x000014 (0x0001)              PROPERTY: etModifierItemEffectType
};
//0x000018
//ModifierDeployableEffect[0x1DF2CF98]
struct FModifierDeployableEffect
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eModifierItem;                                  		// 0x00000C (0x0004)              
	int                                                m_eTaskItem;                                      		// 0x000010 (0x0004)              
	unsigned long                                      m_bDeployAtModifierEnd : 1;                       		// 0x000014 (0x0004) [0x00000001] 
};
//0x000010
//GrafittiItemType[0x1DF2CF30]
struct FGrafittiItemType
{
	int                                                m_eInventoryItemType;                             		// 0x000000 (0x0004)              
	struct FString                                     m_sResource;                                      		// 0x000004 (0x000C)              
};
//0x000010
//InstrumentItemType[0x1DF2CEC8]
struct FInstrumentItemType
{
	struct FString                                     m_sResource;                                      		// 0x000000 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00000C (0x0004)              
};
//0x000010
//OutfitItemType[0x1DF2CE60]
struct FOutfitItemType
{
	struct FString                                     m_sResource;                                      		// 0x000000 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00000C (0x0004)              
};
//0x000010
//SymbolItemType[0x1DF2CDF8]
struct FSymbolItemType
{
	struct FString                                     m_sResource;                                      		// 0x000000 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00000C (0x0004)              
};
//0x000018
//UnlockItemType[0x1DF2CD90]
struct FUnlockItemType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00000C (0x0004)              
	int                                                m_eUnlockItem;                                    		// 0x000010 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000014 (0x0004)              
};
//0x000008
//UnlockItemInfraCategory[0x1DF2CD28]
struct FUnlockItemInfraCategory
{
	int                                                m_eGameplayEvent;                                 		// 0x000000 (0x0004)              
	int                                                m_eInventoryItemInfraCategory;                    		// 0x000004 (0x0004)              
};
//0x00003C
//RewardPackageItemType[0x1DF2CCC0]
struct FRewardPackageItemType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sMailBody;                                      		// 0x00000C (0x000C)              
	struct FString                                     m_sMailSubject;                                   		// 0x000018 (0x000C)              
	int                                                m_eCheckUnlock;                                   		// 0x000024 (0x0004)              
	int                                                m_eInventoryItemType;                             		// 0x000028 (0x0004)              
	int                                                m_eRewardPackage;                                 		// 0x00002C (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000030 (0x0004)              
	unsigned char                                      m_eGenderRestriction;                             		// 0x000034 (0x0001)              PROPERTY: etGender
	unsigned char                                      _0x000035[0x3];                                   		// 0x000035 (0x0003) MISSED OFFSET
	unsigned long                                      m_bDescriptionShowsItems : 1;                     		// 0x000038 (0x0004) [0x00000001] 
};
//0x000020
//UsableTokenType[0x1DF2CC58]
struct FUsableTokenType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00000C (0x0004)              
	int                                                m_eModifierItem;                                  		// 0x000010 (0x0004)              
	int                                                m_nCharges;                                       		// 0x000014 (0x0004)              
	int                                                m_nMaxCharges;                                    		// 0x000018 (0x0004)              
	int                                                m_nMaxStacks;                                     		// 0x00001C (0x0004)              
};
//0x000028
//VehicleComponentUnlockItemType[0x1DF2CBF0]
struct FVehicleComponentUnlockItemType
{
	struct FString                                     m_sAlternateResource;                             		// 0x000000 (0x000C)              
	struct FString                                     m_sResource;                                      		// 0x00000C (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x000018 (0x0004)              
	int                                                m_eUIComponent;                                   		// 0x00001C (0x0004)              
	int                                                m_nApplicationCost;                               		// 0x000020 (0x0004)              
	int                                                m_nApplicationRating;                             		// 0x000024 (0x0004)              
};
//0x000008
//PrimitiveEntry[0x1DF2CB88]
struct FPrimitiveEntry
{
	int                                                m_ePage;                                          		// 0x000000 (0x0004)              
	int                                                m_ePrimitiveEntry;                                		// 0x000004 (0x0004)              
};
//0x000011
//PrimitivePage[0x1DF2CB20]
struct FPrimitivePage
{
	struct FString                                     m_sDisplayName;                                   		// 0x000000 (0x000C)              
	int                                                m_ePrimitivePage;                                 		// 0x00000C (0x0004)              
	unsigned char                                      m_eType;                                          		// 0x000010 (0x0001)              PROPERTY: etPrimitiveType
};
//0x000038
//VehicleItemType[0x1DF2CAB8]
struct FVehicleItemType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sResource;                                      		// 0x00000C (0x000C)              
	int                                                m_eFnMod[0x4];                                    		// 0x000018 (0x0010)              
	int                                                m_eInventoryItemType;                             		// 0x000028 (0x0004)              
	int                                                m_nReeditFee;                                     		// 0x00002C (0x0004)              
	unsigned char                                      m_eVehicle;                                       		// 0x000030 (0x0001)              PROPERTY: etVehicleSetupType
	unsigned char                                      _0x000031[0x3];                                   		// 0x000031 (0x0003) MISSED OFFSET
	unsigned long                                      m_bPreset : 1;                                    		// 0x000034 (0x0004) [0x00000001] 
};
//0x00002C
//WeaponItemType[0x1DF2CA50]
struct FWeaponItemType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eActivityMessageIcon;                           		// 0x00000C (0x0004)              
	int                                                m_eFnMod[0x3];                                    		// 0x000010 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00001C (0x0004)              
	int                                                m_eItemAttachment;                                		// 0x000020 (0x0004)              
	int                                                m_eWeaponTypeLink;                                		// 0x000024 (0x0004)              
	unsigned long                                      m_bCausesContagion : 1;                           		// 0x000028 (0x0004) [0x00000001] 
	unsigned long                                      m_bIsSkinnable : 1;                               		// 0x000028 (0x0004) [0x00000002] 
	unsigned long                                      m_bPreset : 1;                                    		// 0x000028 (0x0004) [0x00000004] 
};
//0x000010
//ThemeItemType[0x1DF2C9E8]
struct FThemeItemType
{
	struct FString                                     m_sResource;                                      		// 0x000000 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00000C (0x0004)              
};
//0x000008
//TitleUnlockItemType[0x1DF2C980]
struct FTitleUnlockItemType
{
	int                                                m_eInventoryItemType;                             		// 0x000000 (0x0004)              
	unsigned long                                      m_bFemale : 1;                                    		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      m_bHideUntilUnlocked : 1;                         		// 0x000004 (0x0004) [0x00000002] 
	unsigned long                                      m_bMale : 1;                                      		// 0x000004 (0x0004) [0x00000004] 
};
//0x000010
//SongItemType[0x1DF2C918]
struct FSongItemType
{
	struct FString                                     m_sResource;                                      		// 0x000000 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00000C (0x0004)              
};
//0x000020
//CameraSeatSetup[0x1DF2C8B0]
struct FCameraSeatSetup
{
	int                                                m_eCameraSeatSetup;                               		// 0x000000 (0x0004)              
	float                                              m_fFOV;                                           		// 0x000004 (0x0004)              
	float                                              m_fIdealLocOffset_X;                              		// 0x000008 (0x0004)              
	float                                              m_fIdealLocOffset_Y;                              		// 0x00000C (0x0004)              
	float                                              m_fIdealLocOffset_Z;                              		// 0x000010 (0x0004)              
	float                                              m_fWorstLocOffset_X;                              		// 0x000014 (0x0004)              
	float                                              m_fWorstLocOffset_Y;                              		// 0x000018 (0x0004)              
	float                                              m_fWorstLocOffset_Z;                              		// 0x00001C (0x0004)              
};
//0x00000A
//VehicleSeatCamera[0x1DF2C848]
struct FVehicleSeatCamera
{
	int                                                m_eLeanOutCamera;                                 		// 0x000000 (0x0004)              
	int                                                m_eSittingCamera;                                 		// 0x000004 (0x0004)              
	unsigned char                                      m_eVehiclePositionIndex;                          		// 0x000008 (0x0001)              PROPERTY: etVehiclePositionIndex
	unsigned char                                      m_eVehicleSetupType;                              		// 0x000009 (0x0001)              PROPERTY: etVehicleSetupType
};
//0x00000D
//WarningPromptGroup[0x1DF2C7E0]
struct FWarningPromptGroup
{
	struct FString                                     m_sWarningPromptGroupName;                        		// 0x000000 (0x000C)              
	unsigned char                                      m_eWarningPromptGroup;                            		// 0x00000C (0x0001)              PROPERTY: etWarningPromptGroup
};
//0x000008
//WeaponSkinUnlockItemType[0x1DF2C778]
struct FWeaponSkinUnlockItemType
{
	int                                                m_eInventoryItemType;                             		// 0x000000 (0x0004)              
	unsigned long                                      m_bHideUntilUnlocked : 1;                         		// 0x000004 (0x0004) [0x00000001] 
};
//0x000040
//InventoryItemCategory[0x1DF2C710]
struct FInventoryItemCategory
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayName;                                   		// 0x00000C (0x000C)              
	struct FString                                     m_sTableName;                                     		// 0x000018 (0x000C)              
	int                                                m_nByteSize;                                      		// 0x000024 (0x0004)              
	int                                                m_nByteSizeUI;                                    		// 0x000028 (0x0004)              
	int                                                m_nInitialStorageSpace;                           		// 0x00002C (0x0004)              
	int                                                m_nMaxStorageSpace;                               		// 0x000030 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000034 (0x0004)              
	unsigned char                                      m_eInventoryItemCategory;                         		// 0x000038 (0x0001)              PROPERTY: etInventoryItemCategory
	unsigned char                                      _0x000039[0x3];                                   		// 0x000039 (0x0003) MISSED OFFSET
	unsigned long                                      m_bCopyable : 1;                                  		// 0x00003C (0x0004) [0x00000001] 
	unsigned long                                      m_bCreatorWaivesRating : 1;                       		// 0x00003C (0x0004) [0x00000002] 
	unsigned long                                      m_bMarketplaceSearch : 1;                         		// 0x00003C (0x0004) [0x00000004] 
	unsigned long                                      m_bRenamable : 1;                                 		// 0x00003C (0x0004) [0x00000008] 
};
//0x00000C
//InventoryItemLease[0x1DF2C6A8]
struct FInventoryItemLease
{
	int                                                m_eInventoryItemLease;                            		// 0x000000 (0x0004)              
	float                                              m_fCostAPBCashMultiplier;                         		// 0x000004 (0x0004)              
	float                                              m_fExpiryTime;                                    		// 0x000008 (0x0004)              
};
//0x00001E
//InventoryItemSubCategory[0x1DF2C640]
struct FInventoryItemSubCategory
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayName;                                   		// 0x00000C (0x000C)              
	int                                                m_nSecondaryKey;                                  		// 0x000018 (0x0004)              
	unsigned char                                      m_eCategory;                                      		// 0x00001C (0x0001)              PROPERTY: etInventoryItemCategory
	unsigned char                                      m_eInventoryItemSubCategory;                      		// 0x00001D (0x0001)              PROPERTY: etInventoryItemSubCategory
};
//0x000050
//InventoryItemInfraCategory[0x1DF2C5D8]
struct FInventoryItemInfraCategory
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayName;                                   		// 0x00000C (0x000C)              
	struct FString                                     m_sIdentifier;                                    		// 0x000018 (0x000C)              
	struct FString                                     m_sSingularName;                                  		// 0x000024 (0x000C)              
	int                                                m_eInventoryItemInfraCategory;                    		// 0x000030 (0x0004)              
	int                                                m_nInitialAvail;                                  		// 0x000034 (0x0004)              
	int                                                m_nInitialRate;                                   		// 0x000038 (0x0004)              
	int                                                m_nMaxAvail;                                      		// 0x00003C (0x0004)              
	int                                                m_nMaxRate;                                       		// 0x000040 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000044 (0x0004)              
	unsigned char                                      m_eSubCategory;                                   		// 0x000048 (0x0001)              PROPERTY: etInventoryItemSubCategory
	unsigned char                                      _0x000049[0x3];                                   		// 0x000049 (0x0003) MISSED OFFSET
	unsigned long                                      m_bIsPublished : 1;                               		// 0x00004C (0x0004) [0x00000001] 
};
//0x000024
//ShopUIFilterRestriction[0x1DF2C570]
struct FShopUIFilterRestriction
{
	int                                                m_eItemInfraCategory;                             		// 0x000000 (0x0004)              
	int                                                m_eShopUIFilterRestriction;                       		// 0x000004 (0x0004)              
	int                                                m_eUnlockVehicleComponentCategory;                		// 0x000008 (0x0004)              
	int                                                m_eUnlockWeaponType;                              		// 0x00000C (0x0004)              
	int                                                m_eWeaponType;                                    		// 0x000010 (0x0004)              
	unsigned char                                      m_eCustomisable;                                  		// 0x000014 (0x0001)              PROPERTY: etYesNoEither
	unsigned char                                      m_eItemCategory;                                  		// 0x000015 (0x0001)              PROPERTY: etInventoryItemCategory
	unsigned char                                      m_eItemSubCategory;                               		// 0x000016 (0x0001)              PROPERTY: etInventoryItemSubCategory
	unsigned char                                      m_eModifierClass;                                 		// 0x000017 (0x0001)              PROPERTY: etModifierClass
	unsigned char                                      m_eModifierType;                                  		// 0x000018 (0x0001)              PROPERTY: etModifierType
	unsigned char                                      m_eUnlockItemCategory;                            		// 0x000019 (0x0001)              PROPERTY: etInventoryItemCategory
	unsigned char                                      m_eUnlockItemSubCategory;                         		// 0x00001A (0x0001)              PROPERTY: etInventoryItemSubCategory
	unsigned char                                      m_eUnlockModifierClass;                           		// 0x00001B (0x0001)              PROPERTY: etModifierClass
	unsigned char                                      m_eUnlockModifierType;                            		// 0x00001C (0x0001)              PROPERTY: etModifierType
	unsigned char                                      _0x00001D[0x3];                                   		// 0x00001D (0x0003) MISSED OFFSET
	unsigned long                                      m_bEmbeddedItem : 1;                              		// 0x000020 (0x0004) [0x00000001] 
	unsigned long                                      m_bEquipable : 1;                                 		// 0x000020 (0x0004) [0x00000002] 
	unsigned long                                      m_bNotDeployed : 1;                               		// 0x000020 (0x0004) [0x00000004] 
	unsigned long                                      m_bNoTimeLimits : 1;                              		// 0x000020 (0x0004) [0x00000008] 
	unsigned long                                      m_bTrade : 1;                                     		// 0x000020 (0x0004) [0x00000010] 
	unsigned long                                      m_bUnlockCapacity : 1;                            		// 0x000020 (0x0004) [0x00000020] 
	unsigned long                                      m_bUnlockEmote : 1;                               		// 0x000020 (0x0004) [0x00000040] 
	unsigned long                                      m_bUnlockSymbolPrimitive : 1;                     		// 0x000020 (0x0004) [0x00000080] 
	unsigned long                                      m_bUnlockVehicleComponent : 1;                    		// 0x000020 (0x0004) [0x00000100] 
	unsigned long                                      m_bUnused : 1;                                    		// 0x000020 (0x0004) [0x00000200] 
};
//0x00004C
//ShopUIFilter[0x1DF2C508]
struct FShopUIFilter
{
	struct FString                                     m_sName;                                          		// 0x000000 (0x000C)              
	int                                                m_eEnable[0x3];                                   		// 0x00000C (0x000C)              
	int                                                m_eOption[0x4];                                   		// 0x000018 (0x0010)              
	int                                                m_eParent;                                        		// 0x000028 (0x0004)              
	int                                                m_eShop[0x5];                                     		// 0x00002C (0x0014)              
	int                                                m_eShopUIFilter;                                  		// 0x000040 (0x0004)              
	int                                                m_nDefaultWeighting;                              		// 0x000044 (0x0004)              
	unsigned long                                      m_bDevOnly : 1;                                   		// 0x000048 (0x0004) [0x00000001] 
};
//0x000039
//Faction[0x1DF2C4A0]
struct FFaction
{
	struct FString                                     m_sDisplayName;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sFactionInfoDescription;                        		// 0x00000C (0x000C)              
	struct FString                                     m_sFactionInfoDisplayName;                        		// 0x000018 (0x000C)              
	struct FString                                     m_sSkinName;                                      		// 0x000024 (0x000C)              
	int                                                m_eSpawnZoneMarker;                               		// 0x000030 (0x0004)              
	int                                                m_eVolumeColour;                                  		// 0x000034 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x000038 (0x0001)              PROPERTY: etFaction
};
//0x000060
//ItemAttachmentVisual[0x1DF2C438]
struct FItemAttachmentVisual
{
	struct FString                                     m_sAnimSetAsset;                                  		// 0x000000 (0x000C)              
	struct FString                                     m_sAnimTreeAsset;                                 		// 0x00000C (0x000C)              
	struct FString                                     m_sAttachmentAsset;                               		// 0x000018 (0x000C)              
	struct FString                                     m_sAttachmentClass;                               		// 0x000024 (0x000C)              
	struct FString                                     m_sAudioType;                                     		// 0x000030 (0x000C)              
	struct FString                                     m_sPhysicsAsset;                                  		// 0x00003C (0x000C)              
	int                                                m_eAnimTreeDecision;                              		// 0x000048 (0x0004)              
	int                                                m_eItemAttachmentVisual;                          		// 0x00004C (0x0004)              
	int                                                m_eUIMeshViewerSetup;                             		// 0x000050 (0x0004)              
	int                                                m_eUIMeshViewerSetup_Inventory;                   		// 0x000054 (0x0004)              
	unsigned char                                      m_eTaskItemAnimationType;                         		// 0x000058 (0x0001)              PROPERTY: etTaskItemAnimationType
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	unsigned long                                      m_bLeftHandIKByDefault : 1;                       		// 0x00005C (0x0004) [0x00000001] 
	unsigned long                                      m_bLeftHandIKWhileAiming : 1;                     		// 0x00005C (0x0004) [0x00000002] 
	unsigned long                                      m_bSuppressRunAnimation : 1;                      		// 0x00005C (0x0004) [0x00000004] 
	unsigned long                                      m_bSuppressSprintAnimation : 1;                   		// 0x00005C (0x0004) [0x00000008] 
};
//0x000041
//WeaponAttachmentVisual[0x1DF2C3D0]
struct FWeaponAttachmentVisual
{
	struct FString                                     m_sImpactVFX;                                     		// 0x000000 (0x000C)              
	struct FString                                     m_sMuzzleFlashVFX;                                		// 0x00000C (0x000C)              
	struct FString                                     m_sNonTracerShotVFX;                              		// 0x000018 (0x000C)              
	struct FString                                     m_sTracerVFX;                                     		// 0x000024 (0x000C)              
	struct FString                                     m_sWindupAudioType;                               		// 0x000030 (0x000C)              
	int                                                m_eItemAttachmentVisual;                          		// 0x00003C (0x0004)              
	unsigned char                                      m_eImpactClass;                                   		// 0x000040 (0x0001)              PROPERTY: etWeaponImpactClass
};
//0x00000D
//FireOffset[0x1DF2C368]
struct FFireOffset
{
	float                                              m_fForwards;                                      		// 0x000000 (0x0004)              
	float                                              m_fRight;                                         		// 0x000004 (0x0004)              
	float                                              m_fUp;                                            		// 0x000008 (0x0004)              
	unsigned char                                      m_eFireOffset;                                    		// 0x00000C (0x0001)              PROPERTY: etFireOffset
};
//0x00000C
//Encumbrance[0x1DF2C300]
struct FEncumbrance
{
	int                                                m_nUIEncumbranceLevel;                            		// 0x000000 (0x0004)              
	unsigned char                                      m_eEncumbrance;                                   		// 0x000004 (0x0001)              PROPERTY: etEncumbrance
	unsigned char                                      _0x000005[0x3];                                   		// 0x000005 (0x0003) MISSED OFFSET
	unsigned long                                      m_bCanCrouchMove : 1;                             		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      m_bCanJump : 1;                                   		// 0x000008 (0x0004) [0x00000002] 
	unsigned long                                      m_bCanRun : 1;                                    		// 0x000008 (0x0004) [0x00000004] 
	unsigned long                                      m_bCanSprint : 1;                                 		// 0x000008 (0x0004) [0x00000008] 
};
//0x000004
//AnimTreeDecision_EquippedItem[0x1DF2C298]
struct FAnimTreeDecision_EquippedItem
{
	int                                                m_eAnimTreeDecision_EquippedItem;                 		// 0x000000 (0x0004)              
};
//0x000004
//AnimTreeDecision_Vehicle[0x1DF2C230]
struct FAnimTreeDecision_Vehicle
{
	int                                                m_eAnimTreeDecision_Vehicle;                      		// 0x000000 (0x0004)              
};
//0x000005
//PawnHitReaction[0x1DF2C1C8]
struct FPawnHitReaction
{
	int                                                m_ePawnHitReaction;                               		// 0x000000 (0x0004)              
	unsigned char                                      m_eType;                                          		// 0x000004 (0x0001)              PROPERTY: etPawnHitReactionType
};
//0x000058
//PawnHitReaction_BoneList[0x1DF2C160]
struct FPawnHitReaction_BoneList
{
	struct FString                                     m_sValue[0x7];                                    		// 0x000000 (0x0054)              
	int                                                m_ePawnHitReaction;                               		// 0x000054 (0x0004)              
};
//0x00001C
//PawnHitReaction_BoneRemapTable[0x1DF2C0F8]
struct FPawnHitReaction_BoneRemapTable
{
	struct FString                                     m_sBoneFrom;                                      		// 0x000000 (0x000C)              
	struct FString                                     m_sBoneTo;                                        		// 0x00000C (0x000C)              
	int                                                m_ePawnHitReaction;                               		// 0x000018 (0x0004)              
};
//0x000008
//PawnHitReaction_Bool[0x1DF2C090]
struct FPawnHitReaction_Bool
{
	int                                                m_ePawnHitReaction;                               		// 0x000000 (0x0004)              
	unsigned long                                      m_bValue : 1;                                     		// 0x000004 (0x0004) [0x00000001] 
};
//0x000034
//PawnHitReaction_ConstrainedBoneList[0x1DF2C028]
struct FPawnHitReaction_ConstrainedBoneList
{
	struct FString                                     m_sValue[0x4];                                    		// 0x000000 (0x0030)              
	int                                                m_ePawnHitReaction;                               		// 0x000030 (0x0004)              
};
//0x000008
//PawnHitReaction_Float[0x1DF2BFC0]
struct FPawnHitReaction_Float
{
	int                                                m_ePawnHitReaction;                               		// 0x000000 (0x0004)              
	float                                              m_fValue;                                         		// 0x000004 (0x0004)              
};
//0x00001C
//PawnHitReaction_SpringList[0x1DF2BF58]
struct FPawnHitReaction_SpringList
{
	struct FString                                     m_sValue[0x2];                                    		// 0x000000 (0x0018)              
	int                                                m_ePawnHitReaction;                               		// 0x000018 (0x0004)              
};
//0x00000C
//PawnHitReaction_Vector2D[0x1DF2BEF0]
struct FPawnHitReaction_Vector2D
{
	int                                                m_ePawnHitReaction;                               		// 0x000000 (0x0004)              
	float                                              m_fX;                                             		// 0x000004 (0x0004)              
	float                                              m_fY;                                             		// 0x000008 (0x0004)              
};
//0x00005D
//Explosion[0x1DF2BE88]
struct FExplosion
{
	struct FString                                     m_sAudioType;                                     		// 0x000000 (0x000C)              
	struct FString                                     m_sVFXAsset;                                      		// 0x00000C (0x000C)              
	struct FString                                     m_sVFXAsset_Airburst;                             		// 0x000018 (0x000C)              
	int                                                m_eCameraShake;                                   		// 0x000024 (0x0004)              
	int                                                m_eExplosion;                                     		// 0x000028 (0x0004)              
	float                                              m_fExplosionRadius;                               		// 0x00002C (0x0004)              
	float                                              m_fGroundZeroRadius;                              		// 0x000030 (0x0004)              
	float                                              m_fHardDamageModifier;                            		// 0x000034 (0x0004)              
	float                                              m_fImpulseZMax;                                   		// 0x000038 (0x0004)              
	float                                              m_fImpulseZMin;                                   		// 0x00003C (0x0004)              
	float                                              m_fLifetimeMaxDamageTime;                         		// 0x000040 (0x0004)              
	float                                              m_fLifetimeMinDamagePercentage;                   		// 0x000044 (0x0004)              
	float                                              m_fMinimumDamagePercentage;                       		// 0x000048 (0x0004)              
	float                                              m_fRagdollRadialImpulse;                          		// 0x00004C (0x0004)              
	float                                              m_fSoftDamageModifier;                            		// 0x000050 (0x0004)              
	int                                                m_nDamage;                                        		// 0x000054 (0x0004)              
	int                                                m_nStunDamage;                                    		// 0x000058 (0x0004)              
	unsigned char                                      m_eNPCWorldEvent;                                 		// 0x00005C (0x0001)              PROPERTY: etNPCWorldEvent
};
//0x000020
//GrenadeWeaponType[0x1DF2BE20]
struct FGrenadeWeaponType
{
	int                                                m_eRecoil;                                        		// 0x000000 (0x0004)              
	int                                                m_eWeaponProjectile;                              		// 0x000004 (0x0004)              
	int                                                m_eWeaponType;                                    		// 0x000008 (0x0004)              
	float                                              m_fFiringSpeed;                                   		// 0x00000C (0x0004)              
	float                                              m_fMaxAngleAdded;                                 		// 0x000010 (0x0004)              
	float                                              m_fPinPullTime;                                   		// 0x000014 (0x0004)              
	float                                              m_fThrowTime;                                     		// 0x000018 (0x0004)              
	unsigned long                                      m_bAffectedByGravity : 1;                         		// 0x00001C (0x0004) [0x00000001] 
};
//0x00000D
//WeaponClass[0x1DF2BDB8]
struct FWeaponClass
{
	struct FString                                     m_sUnrealClassName;                               		// 0x000000 (0x000C)              
	unsigned char                                      m_eWeaponClass;                                   		// 0x00000C (0x0001)              PROPERTY: etWeaponClass
};
//0x000040
//WeaponProjectile[0x1DF2BD50]
struct FWeaponProjectile
{
	struct FString                                     m_sFlightAudioEvent;                              		// 0x000000 (0x000C)              
	struct FString                                     m_sMesh;                                          		// 0x00000C (0x000C)              
	struct FString                                     m_sTrailVFX;                                      		// 0x000018 (0x000C)              
	int                                                m_eExplosion;                                     		// 0x000024 (0x0004)              
	int                                                m_eWeaponProjectile;                              		// 0x000028 (0x0004)              
	float                                              m_fArmingTimer;                                   		// 0x00002C (0x0004)              
	float                                              m_fBounceDamping;                                 		// 0x000030 (0x0004)              
	float                                              m_fFuseDelay;                                     		// 0x000034 (0x0004)              
	float                                              m_fGravityMultiplier;                             		// 0x000038 (0x0004)              
	unsigned long                                      m_bAudioWaitUntilFalling : 1;                     		// 0x00003C (0x0004) [0x00000001] 
	unsigned long                                      m_bImpactDetonated : 1;                           		// 0x00003C (0x0004) [0x00000002] 
	unsigned long                                      m_bTumble : 1;                                    		// 0x00003C (0x0004) [0x00000004] 
};
//0x000064
//AmmoCategory[0x1DF2BCE8]
struct FAmmoCategory
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sName;                                          		// 0x00000C (0x000C)              
	struct FString                                     m_sNameAbbreviated;                               		// 0x000018 (0x000C)              
	struct FString                                     m_sQuantityText;                                  		// 0x000024 (0x000C)              
	int                                                m_eAmmoCategory;                                  		// 0x000030 (0x0004)              
	int                                                m_eRequiresWeaponUnlocked;                        		// 0x000034 (0x0004)              
	int                                                m_nBoxCost;                                       		// 0x000038 (0x0004)              
	int                                                m_nBoxSize;                                       		// 0x00003C (0x0004)              
	int                                                m_nCapacity;                                      		// 0x000040 (0x0004)              
	int                                                m_nGiftedAmount;                                  		// 0x000044 (0x0004)              
	int                                                m_nPresetBoxQuantity[0x4];                        		// 0x000048 (0x0010)              
	int                                                m_nSecondaryKey;                                  		// 0x000058 (0x0004)              
	int                                                m_sHUDImage_Bullet;                               		// 0x00005C (0x0004)              
	unsigned long                                      m_bThrownGrenade : 1;                             		// 0x000060 (0x0004) [0x00000001] 
};
//0x000008
//SpeedModifier[0x1DF2BC80]
struct FSpeedModifier
{
	float                                              m_fMultiplier;                                    		// 0x000000 (0x0004)              
	float                                              m_fValueToAdd;                                    		// 0x000004 (0x0004)              
};
//0x000028
//SpeedModifiers[0x1DF2BC18]
struct FSpeedModifiers
{
	struct FSpeedModifier                              m_Crouch;                                         		// 0x000000 (0x0008)              
	struct FSpeedModifier                              m_Walk;                                           		// 0x000008 (0x0008)              
	struct FSpeedModifier                              m_Run;                                            		// 0x000010 (0x0008)              
	struct FSpeedModifier                              m_Sprint;                                         		// 0x000018 (0x0008)              
	struct FSpeedModifier                              m_Marksmanship;                                   		// 0x000020 (0x0008)              
};
//0x000010
//ModifierItemData[0x1DF2BBB0]
struct FModifierItemData
{
	int                                                nCategory;                                        		// 0x000000 (0x0004)              
	int                                                nModifierItem;                                    		// 0x000004 (0x0004)              
	float                                              m_fIntervalAccumulator;                           		// 0x000008 (0x0004)              
	int                                                m_nRemainingPeriodicCalls;                        		// 0x00000C (0x0004)              
};
//0x0000B0
//WeaponType[0x1DF2BB48]
struct FWeaponType
{
	int                                                m_eAmmoCategory;                                  		// 0x000000 (0x0004)              
	int                                                m_eDisabledRuleSets;                              		// 0x000004 (0x0004)              
	int                                                m_eTagger;                                        		// 0x000008 (0x0004)              
	int                                                m_eWeaponCurve;                                   		// 0x00000C (0x0004)              
	int                                                m_eWeaponProjectile;                              		// 0x000010 (0x0004)              
	int                                                m_eWeaponType;                                    		// 0x000014 (0x0004)              
	float                                              m_fAccuracyCooldown;                              		// 0x000018 (0x0004)              
	float                                              m_fBurstInterval;                                 		// 0x00001C (0x0004)              
	float                                              m_fCrouchSpeed;                                   		// 0x000020 (0x0004)              
	float                                              m_fEquipTime;                                     		// 0x000024 (0x0004)              
	float                                              m_fFireInterval;                                  		// 0x000028 (0x0004)              
	float                                              m_fHardDamageModifier;                            		// 0x00002C (0x0004)              
	float                                              m_fHealthDamage;                                  		// 0x000030 (0x0004)              
	float                                              m_fHolsterTime;                                   		// 0x000034 (0x0004)              
	float                                              m_fJumpZ;                                         		// 0x000038 (0x0004)              
	float                                              m_fMarksmanshipSpeed;                             		// 0x00003C (0x0004)              
	float                                              m_fPingDistance;                                  		// 0x000040 (0x0004)              
	float                                              m_fRagdollImpulseScale;                           		// 0x000044 (0x0004)              
	float                                              m_fReloadEndAnimDuration;                         		// 0x000048 (0x0004)              
	float                                              m_fReloadTime;                                    		// 0x00004C (0x0004)              
	float                                              m_fResupplyDelaySecs;                             		// 0x000050 (0x0004)              
	float                                              m_fRunSpeed;                                      		// 0x000054 (0x0004)              
	float                                              m_fSoftDamageModifier;                            		// 0x000058 (0x0004)              
	float                                              m_fSprintDelay;                                   		// 0x00005C (0x0004)              
	float                                              m_fSprintSpeed;                                   		// 0x000060 (0x0004)              
	float                                              m_fStaminaDamage;                                 		// 0x000064 (0x0004)              
	float                                              m_fTaggerDuration;                                		// 0x000068 (0x0004)              
	float                                              m_fUIHardDamageLevel;                             		// 0x00006C (0x0004)              
	float                                              m_fUIRangeLevel;                                  		// 0x000070 (0x0004)              
	float                                              m_fUIRateOfFire;                                  		// 0x000074 (0x0004)              
	float                                              m_fUISoftDamageLevel;                             		// 0x000078 (0x0004)              
	float                                              m_fUIStunDamageLevel;                             		// 0x00007C (0x0004)              
	float                                              m_fWalkSpeed;                                     		// 0x000080 (0x0004)              
	float                                              m_fWindUpTime;                                    		// 0x000084 (0x0004)              
	int                                                m_nAmmoPoolCapacity;                              		// 0x000088 (0x0004)              
	int                                                m_nBurstShots;                                    		// 0x00008C (0x0004)              
	int                                                m_nImpulseStrength;                               		// 0x000090 (0x0004)              
	int                                                m_nMagazineCapacity;                              		// 0x000094 (0x0004)              
	int                                                m_nMagazineWarningAmount;                         		// 0x000098 (0x0004)              
	int                                                m_nResupplyUnits;                                 		// 0x00009C (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x0000A0 (0x0004)              
	unsigned char                                      m_eClass;                                         		// 0x0000A4 (0x0001)              PROPERTY: etWeaponClass
	unsigned char                                      m_eEncumbrance;                                   		// 0x0000A5 (0x0001)              PROPERTY: etEncumbrance
	unsigned char                                      m_eHUDReticule;                                   		// 0x0000A6 (0x0001)              PROPERTY: etHUDReticule
	unsigned char                                      m_eHUDReticuleMarksmanship;                       		// 0x0000A7 (0x0001)              PROPERTY: etHUDReticule
	unsigned char                                      m_eNPCFiredEvent;                                 		// 0x0000A8 (0x0001)              PROPERTY: etNPCWorldEvent
	unsigned char                                      m_eNPCHitEvent;                                   		// 0x0000A9 (0x0001)              PROPERTY: etNPCWorldEvent
	unsigned char                                      m_eWeaponFiringState;                             		// 0x0000AA (0x0001)              PROPERTY: etWeaponFiringState
	unsigned char                                      _0x0000AB[0x1];                                   		// 0x0000AB (0x0001) MISSED OFFSET
	unsigned long                                      m_bAlwaysPlayReloadEndAnim : 1;                   		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      m_bAutoSingleShotAudio : 1;                       		// 0x0000AC (0x0004) [0x00000002] 
	unsigned long                                      m_bCanSprint : 1;                                 		// 0x0000AC (0x0004) [0x00000004] 
	unsigned long                                      m_bDisallowSwitchInRefireTimer : 1;               		// 0x0000AC (0x0004) [0x00000008] 
	unsigned long                                      m_bDontDrop : 1;                                  		// 0x0000AC (0x0004) [0x00000010] 
	unsigned long                                      m_bEquipInVehicle : 1;                            		// 0x0000AC (0x0004) [0x00000020] 
	unsigned long                                      m_bForceRagdollDeath : 1;                         		// 0x0000AC (0x0004) [0x00000040] 
	unsigned long                                      m_bHasReloadEndAnimation : 1;                     		// 0x0000AC (0x0004) [0x00000080] 
	unsigned long                                      m_bIsResuppliable : 1;                            		// 0x0000AC (0x0004) [0x00000100] 
	unsigned long                                      m_bLessLethal : 1;                                		// 0x0000AC (0x0004) [0x00000200] 
	unsigned long                                      m_bLoopedReload : 1;                              		// 0x0000AC (0x0004) [0x00000400] 
	unsigned long                                      m_bUsesStopAudioEvent : 1;                        		// 0x0000AC (0x0004) [0x00000800] 
	unsigned long                                      m_bWitnessing : 1;                                		// 0x0000AC (0x0004) [0x00001000] 
};
//0x000090
//RangedWeaponType[0x1DF2BAE0]
struct FRangedWeaponType
{
	int                                                m_eExplosionType;                                 		// 0x000000 (0x0004)              
	int                                                m_eRecoil;                                        		// 0x000004 (0x0004)              
	int                                                m_eWeaponType;                                    		// 0x000008 (0x0004)              
	float                                              m_fAccuracyCooldown;                              		// 0x00000C (0x0004)              
	float                                              m_fAccuracyPower;                                 		// 0x000010 (0x0004)              
	float                                              m_fCrouchModifier;                                		// 0x000014 (0x0004)              
	float                                              m_fInVehicleModifier;                             		// 0x000018 (0x0004)              
	float                                              m_fJumpModifier;                                  		// 0x00001C (0x0004)              
	float                                              m_fLeanModifier;                                  		// 0x000020 (0x0004)              
	float                                              m_fMarksmanshipFOV16;                             		// 0x000024 (0x0004)              
	float                                              m_fMarksmanshipFOV4;                              		// 0x000028 (0x0004)              
	float                                              m_fMarksmanshipModifier;                          		// 0x00002C (0x0004)              
	float                                              m_fMaxRange;                                      		// 0x000030 (0x0004)              
	float                                              m_fMaxTimeBetweenShots;                           		// 0x000034 (0x0004)              
	float                                              m_fMinDamageRange;                                		// 0x000038 (0x0004)              
	float                                              m_fMinimumCrosshairWidth;                         		// 0x00003C (0x0004)              
	float                                              m_fMinimumDamagePercentage;                       		// 0x000040 (0x0004)              
	float                                              m_fOverallShotModifierCap;                        		// 0x000044 (0x0004)              
	float                                              m_fPerShotModifier;                               		// 0x000048 (0x0004)              
	float                                              m_fPierceDamageReduction;                         		// 0x00004C (0x0004)              
	float                                              m_fPierceDamageScale;                             		// 0x000050 (0x0004)              
	float                                              m_fRadiusAtTenMetres;                             		// 0x000054 (0x0004)              
	float                                              m_fRampDistance;                                  		// 0x000058 (0x0004)              
	float                                              m_fRaySpreadAtTenMetres;                          		// 0x00005C (0x0004)              
	float                                              m_fRecoveryDelay;                                 		// 0x000060 (0x0004)              
	float                                              m_fRecoveryPerSecond;                             		// 0x000064 (0x0004)              
	float                                              m_fRunModifier;                                   		// 0x000068 (0x0004)              
	float                                              m_fSprintModifier;                                		// 0x00006C (0x0004)              
	float                                              m_fWalkModifier;                                  		// 0x000070 (0x0004)              
	float                                              m_fWeaponSwitchMinAccuracy;                       		// 0x000074 (0x0004)              
	int                                                m_nFreeAmmo;                                      		// 0x000078 (0x0004)              
	int                                                m_nMaxPierceCount;                                		// 0x00007C (0x0004)              
	int                                                m_nMinNumShots;                                   		// 0x000080 (0x0004)              
	int                                                m_nRaysPerShot;                                   		// 0x000084 (0x0004)              
	int                                                m_nTracerFrequency;                               		// 0x000088 (0x0004)              
	unsigned long                                      m_bCanHitOwnVehicle : 1;                          		// 0x00008C (0x0004) [0x00000001] 
};
//0x00004C
//WeaponRecoil[0x1DF2BA78]
struct FWeaponRecoil
{
	int                                                m_eWeaponRecoil;                                  		// 0x000000 (0x0004)              
	float                                              m_fRecoilExp;                                     		// 0x000004 (0x0004)              
	float                                              m_fRecoverExp;                                    		// 0x000008 (0x0004)              
	int                                                m_nMarksmanshipPitchPercentage;                   		// 0x00000C (0x0004)              
	int                                                m_nMarksmanshipYawPercentage;                     		// 0x000010 (0x0004)              
	int                                                m_nPitchMax;                                      		// 0x000014 (0x0004)              
	int                                                m_nPitchMin;                                      		// 0x000018 (0x0004)              
	int                                                m_nPitchRecoveryPercentageMax;                    		// 0x00001C (0x0004)              
	int                                                m_nPitchRecoveryPercentageMin;                    		// 0x000020 (0x0004)              
	int                                                m_nRecoilTime;                                    		// 0x000024 (0x0004)              
	int                                                m_nRecoverTime;                                   		// 0x000028 (0x0004)              
	int                                                m_nYawNegativeMax;                                		// 0x00002C (0x0004)              
	int                                                m_nYawNegativeMin;                                		// 0x000030 (0x0004)              
	int                                                m_nYawNegativeRecoveryPercentageMax;              		// 0x000034 (0x0004)              
	int                                                m_nYawNegativeRecoveryPercentageMin;              		// 0x000038 (0x0004)              
	int                                                m_nYawPositiveMax;                                		// 0x00003C (0x0004)              
	int                                                m_nYawPositiveMin;                                		// 0x000040 (0x0004)              
	int                                                m_nYawPositiveRecoveryPercentageMax;              		// 0x000044 (0x0004)              
	int                                                m_nYawPositiveRecoveryPercentageMin;              		// 0x000048 (0x0004)              
};
//0x0000B4
//WeaponCurve[0x1DF2BA10]
struct FWeaponCurve
{
	struct FString                                     m_sAccuracyRecovery;                              		// 0x000000 (0x000C)              
	struct FString                                     m_sBurstShots;                                    		// 0x00000C (0x000C)              
	struct FString                                     m_sEffectiveRange;                                		// 0x000018 (0x000C)              
	struct FString                                     m_sPerShotModifier;                               		// 0x000024 (0x000C)              
	struct FString                                     m_sPingDistance;                                  		// 0x000030 (0x000C)              
	struct FString                                     m_sPitch;                                         		// 0x00003C (0x000C)              
	struct FString                                     m_sRadiusAtTenMetres;                             		// 0x000048 (0x000C)              
	struct FString                                     m_sRecoveryPerSecond;                             		// 0x000054 (0x000C)              
	struct FString                                     m_sReloadTime;                                    		// 0x000060 (0x000C)              
	struct FString                                     m_sYawNegative;                                   		// 0x00006C (0x000C)              
	struct FString                                     m_sYawPositive;                                   		// 0x000078 (0x000C)              
	int                                                m_eWeaponCurve;                                   		// 0x000084 (0x0004)              
	float                                              m_fBurstShotsInc;                                 		// 0x000088 (0x0004)              
	float                                              m_fGeneralRecoveryDelay;                          		// 0x00008C (0x0004)              
	float                                              m_fGeneralRecoveryScale;                          		// 0x000090 (0x0004)              
	float                                              m_fPerShotModifierInc;                            		// 0x000094 (0x0004)              
	float                                              m_fPingDistanceInc;                               		// 0x000098 (0x0004)              
	float                                              m_fPitchInc;                                      		// 0x00009C (0x0004)              
	float                                              m_fRadiusAtTenMetresInc;                          		// 0x0000A0 (0x0004)              
	float                                              m_fReloadTimeInc;                                 		// 0x0000A4 (0x0004)              
	float                                              m_fYawNegativeInc;                                		// 0x0000A8 (0x0004)              
	float                                              m_fYawPositiveInc;                                		// 0x0000AC (0x0004)              
	unsigned long                                      m_bBurstShotsRecover : 1;                         		// 0x0000B0 (0x0004) [0x00000001] 
	unsigned long                                      m_bPerShotModifierRecover : 1;                    		// 0x0000B0 (0x0004) [0x00000002] 
	unsigned long                                      m_bPingDistanceRecovers : 1;                      		// 0x0000B0 (0x0004) [0x00000004] 
	unsigned long                                      m_bPitchRecover : 1;                              		// 0x0000B0 (0x0004) [0x00000008] 
	unsigned long                                      m_bRadiusAtTenMetresRecover : 1;                  		// 0x0000B0 (0x0004) [0x00000010] 
	unsigned long                                      m_bYawNegativeRecover : 1;                        		// 0x0000B0 (0x0004) [0x00000020] 
	unsigned long                                      m_bYawPositiveRecover : 1;                        		// 0x0000B0 (0x0004) [0x00000040] 
};
//0x000008
//ClampedWeaponCurve_Float[0x1DF2B9A8]
struct FClampedWeaponCurve_Float
{
	class UcDesignerCurve_Float*                       Curve;                                            		// 0x000000 (0x0004)              
	float                                              CurrentTime;                                      		// 0x000004 (0x0004)              
};
//0x00000C
//WeaponAmmoPool[0x1DF2B940]
struct FWeaponAmmoPool
{
	int                                                m_eAmmoCategory;                                  		// 0x000000 (0x0004)              
	int                                                m_nCapacity;                                      		// 0x000004 (0x0004)              
	int                                                m_nAmount;                                        		// 0x000008 (0x0004)              
};
//0x000008
//ShotSeedEntry[0x1DF2B8D8]
struct FShotSeedEntry
{
	int                                                m_nShotID;                                        		// 0x000000 (0x0004)              
	int                                                m_nNumberOfShots;                                 		// 0x000004 (0x0004)              
};
//0x000024
//MagazineStats[0x1DF2B870]
struct FMagazineStats
{
	double                                             m_fFirstFireTime;                                 		// 0x000000 (0x0008)              
	int                                                m_nNumShots;                                      		// 0x000008 (0x0004)              
	int                                                m_nNumHits;                                       		// 0x00000C (0x0004)              
	int                                                m_nNumHitsPlayer;                                 		// 0x000010 (0x0004)              
	int                                                m_nNumHitsVehicle;                                		// 0x000014 (0x0004)              
	int                                                m_nNumKills;                                      		// 0x000018 (0x0004)              
	int                                                m_nSoftDamage;                                    		// 0x00001C (0x0004)              
	int                                                m_nHardDamage;                                    		// 0x000020 (0x0004)              
};
//0x00000C
//PvPFlags[0x1DF2B808]
struct FPvPFlags
{
	int                                                m_nMissionID;                                     		// 0x000000 (0x0004)              
	unsigned char                                      m_nTeamIndex;                                     		// 0x000004 (0x0001)              PROPERTY: 
	unsigned char                                      m_nFriendlyIndices;                               		// 0x000005 (0x0001)              PROPERTY: 
	unsigned char                                      m_nHostileIndices;                                		// 0x000006 (0x0001)              PROPERTY: 
	unsigned char                                      m_ePvPType;                                       		// 0x000007 (0x0001)              PROPERTY: etPvPType
	unsigned long                                      m_bDamageByFriend : 1;                            		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      m_bDamageByEnemy : 1;                             		// 0x000008 (0x0004) [0x00000002] 
	unsigned long                                      m_bDamageByOwnFaction : 1;                        		// 0x000008 (0x0004) [0x00000004] 
	unsigned long                                      m_bDamageByOtherFaction : 1;                      		// 0x000008 (0x0004) [0x00000008] 
	unsigned long                                      m_bDamageByOutOfMission : 1;                      		// 0x000008 (0x0004) [0x00000010] 
	unsigned long                                      m_bCollisionDamageInvulnerable : 1;               		// 0x000008 (0x0004) [0x00000020] 
	unsigned long                                      m_bForceFactionFriendlyColours : 1;               		// 0x000008 (0x0004) [0x00000040] 
};
//0x000030
//CompactGolemDescriptor[0x1DF2B7A0]
struct FCompactGolemDescriptor
{
	struct FGuid                                       m_CharacterGuid;                                  		// 0x000000 (0x0010)              
	struct FGuid                                       m_StatueGuid;                                     		// 0x000010 (0x0010)              
	struct FGuid                                       m_AudioGUID;                                      		// 0x000020 (0x0010)              
};
//0x000020
//CompactGolemobileDescriptor[0x1DF2B738]
struct FCompactGolemobileDescriptor
{
	struct FGuid                                       m_VehicleGUID;                                    		// 0x000000 (0x0010)              
	struct FGuid                                       m_AudioGUID;                                      		// 0x000010 (0x0010)              
};
//0x000018
//tIKStrategySetting[0x1DF2B6D0]
struct FtIKStrategySetting
{
	unsigned char                                      Strategy;                                         		// 0x000000 (0x0001)              PROPERTY: etIKStrategy
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FName                                       SocketName;                                       		// 0x000004 (0x0008)              
	struct FName                                       FemaleSocketName;                                 		// 0x00000C (0x0008)              
	unsigned char                                      MatchAxis[0x3];                                   		// 0x000014 (0x0003)              PROPERTY: etMatchAxis
	unsigned char                                      EffectorRotation;                                 		// 0x000017 (0x0001)              PROPERTY: etEffectorRotation
};
//0x000005
//HUDMarkerState[0x1DF2B668]
struct FHUDMarkerState
{
	float                                              m_fUpdateDelay;                                   		// 0x000000 (0x0004)              
	unsigned char                                      m_eHUDMarkerState;                                		// 0x000004 (0x0001)              PROPERTY: etHUDMarkerState
};
//0x000020
//HUDMarkerData[0x1DF2B600]
struct FHUDMarkerData
{
	class AActor*                                      pLinkedActor;                                     		// 0x000000 (0x0004)              
	FVector3                                           Location;                                         		// 0x000004 (0x000C)              
	unsigned char                                      eOffsetOverride;                                  		// 0x000010 (0x0001)              PROPERTY: 
	unsigned char                                      eCSAAutoRouteData;                                		// 0x000011 (0x0001)              PROPERTY: 
	unsigned char                                      eType;                                            		// 0x000012 (0x0001)              PROPERTY: 
	unsigned char                                      eState;                                           		// 0x000013 (0x0001)              PROPERTY: etHUDMarkerState
	unsigned long                                      bIsBeingModified : 1;                             		// 0x000014 (0x0004) [0x00000001] 
	unsigned long                                      bIsCharacterName : 1;                             		// 0x000014 (0x0004) [0x00000002] 
	int                                                nUserData;                                        		// 0x000018 (0x0004)              
	int                                                nUserData2;                                       		// 0x00001C (0x0004)              
};
//0x000008
//HUDMarkerRadarJammer[0x1DF2B598]
struct FHUDMarkerRadarJammer
{
	int                                                m_nCharacterUID;                                  		// 0x000000 (0x0004)              
	float                                              m_nRangeSquared;                                  		// 0x000004 (0x0004)              
};
//0x000005
//APBPawnConstant[0x1DF2B530]
struct FAPBPawnConstant
{
	float                                              m_fValue;                                         		// 0x000000 (0x0004)              
	unsigned char                                      m_eAPBPawnConstant;                               		// 0x000004 (0x0001)              PROPERTY: etAPBPawnConstant
};
//0x000020
//DyingData[0x1DF2B4C8]
struct FDyingData
{
	unsigned char                                      eDyingState;                                      		// 0x000000 (0x0001)              PROPERTY: etDyingState
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	unsigned long                                      bForceRagdoll : 1;                                		// 0x000004 (0x0004) [0x00000001] 
	int                                                nControllerUID;                                   		// 0x000008 (0x0004)              
	float                                              fImpulseScale;                                    		// 0x00000C (0x0004)              
	int                                                nExplosionType;                                   		// 0x000010 (0x0004)              
	FVector3                                           vExplosionLocation;                               		// 0x000014 (0x000C)              
};
//0x000034
//HitReactionInfo[0x1DF2B460]
struct FHitReactionInfo
{
	FVector3                                           HitLocation;                                      		// 0x000000 (0x000C)              
	FVector3                                           Momentum;                                         		// 0x00000C (0x000C)              
	class UClass*                                      DamageType;                                       		// 0x000018 (0x0004)              
	class APawn*                                       InstigatedBy;                                     		// 0x00001C (0x0004)              
	struct FName                                       HitBone;                                          		// 0x000020 (0x0008)              
	class UPhysicalMaterial*                           PhysicalMaterial;                                 		// 0x000028 (0x0004)              
	double                                             HitTime;                                          		// 0x00002C (0x0008)              
};
//0x000010
//HitReactionBoneRemap[0x1DF2B3F8]
struct FHitReactionBoneRemap
{
	struct FName                                       BoneFrom;                                         		// 0x000000 (0x0008)              
	struct FName                                       BoneTo;                                           		// 0x000008 (0x0008)              
};
//0x000028
//CSAData[0x1DF2B390]
struct FCSAData
{
	class AActor*                                      pInteractiveActor;                                		// 0x000000 (0x0004)              
	float                                              fCSATotalDuration;                                		// 0x000004 (0x0004)              
	float                                              fCSATotalProgress;                                		// 0x000008 (0x0004)              
	int                                                nIPIndex;                                         		// 0x00000C (0x0004)              
	int                                                nAnimSeed;                                        		// 0x000010 (0x0004)              
	int                                                eAnimIndex;                                       		// 0x000014 (0x0004)              
	unsigned char                                      eCSA;                                             		// 0x000018 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      _0x000019[0x3];                                   		// 0x000019 (0x0003) MISSED OFFSET
	unsigned long                                      bCSAOutro : 1;                                    		// 0x00001C (0x0004) [0x00000001] 
	unsigned long                                      bSmallTargetVolume : 1;                           		// 0x00001C (0x0004) [0x00000002] 
	unsigned char                                      eInteractiveActorIATState;                        		// 0x000020 (0x0001)              PROPERTY: etCSA_IATState
	unsigned char                                      _0x000021[0x3];                                   		// 0x000021 (0x0003) MISSED OFFSET
	int                                                m_nCSAVFXSuccess_Initial;                         		// 0x000024 (0x0004)              
};
//0x000014
//CSAVFXData[0x1DF2B328]
struct FCSAVFXData
{
	unsigned char                                      eCSA;                                             		// 0x000000 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	class UClass*                                      pVFXEventClass;                                   		// 0x000004 (0x0004)              
	int                                                eVFXEquipmentCSAAnimType;                         		// 0x000008 (0x0004)              
	class AActor*                                      pVFXInteractiveActor;                             		// 0x00000C (0x0004)              
	unsigned long                                      bPlayedCSAOutroVFX : 1;                           		// 0x000010 (0x0004) [0x00000001] 
	unsigned long                                      bPlayedCSASuccessVFX : 1;                         		// 0x000010 (0x0004) [0x00000002] 
};
//0x000028
//VehicleUseData[0x1DF2B2C0]
struct FVehicleUseData
{
	int                                                m_nVehicleID;                                     		// 0x000000 (0x0004)              
	unsigned char                                      m_nUseID;                                         		// 0x000004 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000005[0x3];                                   		// 0x000005 (0x0003) MISSED OFFSET
	unsigned long                                      m_bInsideVehicle : 1;                             		// 0x000008 (0x0004) [0x00000001] 
	unsigned char                                      m_SeatPosition;                                   		// 0x00000C (0x0001)              PROPERTY: etVehiclePositionIndex
	unsigned char                                      _0x00000D[0x3];                                   		// 0x00000D (0x0003) MISSED OFFSET
	unsigned long                                      m_bSwitchingToAdjacentSeat : 1;                   		// 0x000010 (0x0004) [0x00000001] 
	unsigned long                                      m_bTeleportIn : 1;                                		// 0x000010 (0x0004) [0x00000002] 
	unsigned long                                      m_bOpenVehicleDoor : 1;                           		// 0x000010 (0x0004) [0x00000004] 
	unsigned long                                      m_bCloseVehicleDoor : 1;                          		// 0x000010 (0x0004) [0x00000008] 
	unsigned long                                      m_bGetInToVehicle : 1;                            		// 0x000010 (0x0004) [0x00000010] 
	unsigned long                                      m_bGetOutOfVehicle : 1;                           		// 0x000010 (0x0004) [0x00000020] 
	unsigned long                                      m_bBailOut : 1;                                   		// 0x000010 (0x0004) [0x00000040] 
	unsigned long                                      m_bRouteingToVAP : 1;                             		// 0x000010 (0x0004) [0x00000080] 
	unsigned long                                      m_bEnteringVCP : 1;                               		// 0x000010 (0x0004) [0x00000100] 
	unsigned long                                      m_bExitingVCP : 1;                                		// 0x000010 (0x0004) [0x00000200] 
	unsigned long                                      m_bExitingVCPDeath : 1;                           		// 0x000010 (0x0004) [0x00000400] 
	unsigned long                                      m_bDeath : 1;                                     		// 0x000010 (0x0004) [0x00000800] 
	unsigned long                                      m_bLeaningOut : 1;                                		// 0x000010 (0x0004) [0x00001000] 
	unsigned long                                      m_bEjectInitial : 1;                              		// 0x000010 (0x0004) [0x00002000] 
	unsigned long                                      m_bEjectLater : 1;                                		// 0x000010 (0x0004) [0x00004000] 
	unsigned long                                      m_bDoingDriverEjectFromPassengerSide : 1;         		// 0x000010 (0x0004) [0x00008000] 
	unsigned long                                      m_bCloseingDriverDoorFromInside : 1;              		// 0x000010 (0x0004) [0x00010000] 
	unsigned long                                      m_bCanDriveVehicle : 1;                           		// 0x000010 (0x0004) [0x00020000] 
	unsigned long                                      m_bEnforcer : 1;                                  		// 0x000010 (0x0004) [0x00040000] 
	int                                                m_nNPCTypeDriver;                                 		// 0x000014 (0x0004)              
	int                                                m_nDriverAssetIndex;                              		// 0x000018 (0x0004)              
	FVector3                                           m_LeaveVehiclePos;                                		// 0x00001C (0x000C)              
};
//0x000008
//AssistData[0x1DF2B258]
struct FAssistData
{
	int                                                Damage;                                           		// 0x000000 (0x0004)              
	unsigned long                                      bPrimaryHit : 1;                                  		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      bSecondaryHit : 1;                                		// 0x000004 (0x0004) [0x00000002] 
};
//0x000008
//StrafeFiring[0x1DF2B1F0]
struct FStrafeFiring
{
	int                                                Id;                                               		// 0x000000 (0x0004)              
	unsigned long                                      bStrafeFiring : 1;                                		// 0x000004 (0x0004) [0x00000001] 
};
//0x000028
//ItemAttachmentData[0x1DF2B188]
struct FItemAttachmentData
{
	int                                                m_eItemAttachmentVisual;                          		// 0x000000 (0x0004)              
	int                                                m_eEquipedInventoryItemType;                      		// 0x000004 (0x0004)              
	int                                                m_eAttachmentDamageState;                         		// 0x000008 (0x0004)              
	unsigned char                                      m_nSymbolMaterialIndex;                           		// 0x00000C (0x0001)              PROPERTY: 
	unsigned char                                      m_WeaponState;                                    		// 0x00000D (0x0001)              PROPERTY: etWeaponState
	unsigned char                                      _0x00000E[0x2];                                   		// 0x00000E (0x0002) MISSED OFFSET
	float                                              m_fReloadTime;                                    		// 0x000010 (0x0004)              
	float                                              m_fQuickReloadTime;                               		// 0x000014 (0x0004)              
	float                                              m_fEquipTime;                                     		// 0x000018 (0x0004)              
	float                                              m_fFireInterval;                                  		// 0x00001C (0x0004)              
	float                                              m_fProgress;                                      		// 0x000020 (0x0004)              
	unsigned long                                      m_bIsDamagable : 1;                               		// 0x000024 (0x0004) [0x00000001] 
	unsigned long                                      m_bIsActive : 1;                                  		// 0x000024 (0x0004) [0x00000002] 
	unsigned long                                      m_bUseMaterialData : 1;                           		// 0x000024 (0x0004) [0x00000004] 
};
//0x000008
//MissionTeamInfo[0x1DF2B120]
struct FMissionTeamInfo
{
	int                                                m_nMissionUID;                                    		// 0x000000 (0x0004)              
	int                                                m_nTeamID;                                        		// 0x000004 (0x0004)              
};
//0x00003C
//RecoilInfo[0x1DF2B0B8]
struct FRecoilInfo
{
	int                                                m_nCurrentX;                                      		// 0x000000 (0x0004)              
	int                                                m_nCurrentY;                                      		// 0x000004 (0x0004)              
	int                                                m_nFirstTargetX;                                  		// 0x000008 (0x0004)              
	int                                                m_nFirstTargetY;                                  		// 0x00000C (0x0004)              
	int                                                m_nFirstTime;                                     		// 0x000010 (0x0004)              
	int                                                m_nFirstExp;                                      		// 0x000014 (0x0004)              
	int                                                m_nEndTargetX;                                    		// 0x000018 (0x0004)              
	int                                                m_nEndTargetY;                                    		// 0x00001C (0x0004)              
	int                                                m_nEndTime;                                       		// 0x000020 (0x0004)              
	int                                                m_nEndExp;                                        		// 0x000024 (0x0004)              
	DWORD                                              m_WeaponRecoil;                                   		// 0x000028 (0x0004)              
	unsigned char                                      m_eCurrentPart;                                   		// 0x00002C (0x0001)              PROPERTY: etCurrentRecoilPart
	unsigned char                                      _0x00002D[0x3];                                   		// 0x00002D (0x0003) MISSED OFFSET
	float                                              m_fPitchMultiplier;                               		// 0x000030 (0x0004)              
	float                                              m_fYawNegativeMultiplier;                         		// 0x000034 (0x0004)              
	float                                              m_fYawPositiveMultiplier;                         		// 0x000038 (0x0004)              
};
//0x000008
//ModifierFXData[0x1DF2B050]
struct FModifierFXData
{
	int                                                m_ModifierItem;                                   		// 0x000000 (0x0004)              
	int                                                m_ReplicationIndex;                               		// 0x000004 (0x0004)              
};
//0x000010
//AnimationDescriptor[0x1DF2AFE8]
struct FAnimationDescriptor
{
	int                                                m_eAnimationDescriptor;                           		// 0x000000 (0x0004)              
	float                                              m_fStaminaDrain;                                  		// 0x000004 (0x0004)              
	unsigned char                                      m_eRCEType;                                       		// 0x000008 (0x0001)              PROPERTY: etRCEType
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	unsigned long                                      m_bFreezeCameraLoc : 1;                           		// 0x00000C (0x0004) [0x00000001] 
	unsigned long                                      m_bResetLocomotion : 1;                           		// 0x00000C (0x0004) [0x00000002] 
};
//0x000018
//tDecisionChild[0x1DF2AF80]
struct FtDecisionChild
{
	struct FEnumeratedName                             SDDRow;                                           		// 0x000000 (0x0010)              
	class UcAnimConfigureNode*                         ChildNode;                                        		// 0x000010 (0x0004)              
	int                                                m_nDrawY;                                         		// 0x000014 (0x0004)              
};
//0x000014
//tSelectEntry[0x1DF2AF18]
struct FtSelectEntry
{
	int                                                NodeIndex;                                        		// 0x000000 (0x0004)              
	struct FName                                       NodeName;                                         		// 0x000004 (0x0008)              
	struct FName                                       Setting;                                          		// 0x00000C (0x0008)              
};
//0x00003C
//tSelectIKEntry[0x1DF2AEB0]
struct FtSelectIKEntry
{
	int                                                SkelControlIndex;                                 		// 0x000000 (0x0004)              
	struct FName                                       SkelControlName;                                  		// 0x000004 (0x0008)              
	struct FtIKStrategySetting                         IKSetting;                                        		// 0x00000C (0x0018)              
	struct FtIKStrategySetting                         AimedIKSetting;                                   		// 0x000024 (0x0018)              
};
//0x000014
//tSelectConfigureEntry[0x1DF2AE48]
struct FtSelectConfigureEntry
{
	class UcAnimConfigureSelect*                       SelectNode;                                       		// 0x000000 (0x0004)              
	struct FName                                       NodeName;                                         		// 0x000004 (0x0008)              
	struct FName                                       Profile;                                          		// 0x00000C (0x0008)              
};
//0x00002C
//tSelectProfile[0x1DF2ADE0]
struct FtSelectProfile
{
	struct FName                                       ProfileName;                                      		// 0x000000 (0x0008)              
	TArray<struct FtSelectEntry>                       Select;                                           		// 0x000008 (0x000C)              
	TArray<struct FtSelectIKEntry>                     SelectIK;                                         		// 0x000014 (0x000C)              
	TArray<struct FtSelectConfigureEntry>              SelectConfigure;                                  		// 0x000020 (0x000C)              
};
//0x00000C
//tVignetteSequence[0x1DF2AD78]
struct FtVignetteSequence
{
	struct FName                                       m_sSequenceName;                                  		// 0x000000 (0x0008)              
	int                                                m_nRepetitions;                                   		// 0x000008 (0x0004)              
};
//0x000024
//ContactRotationAnim[0x1DF2AD10]
struct FContactRotationAnim
{
	struct FString                                     m_sLeftRotationAnim;                              		// 0x000000 (0x000C)              
	struct FString                                     m_sRightRotationAnim;                             		// 0x00000C (0x000C)              
	int                                                m_eContactRotationAnim;                           		// 0x000018 (0x0004)              
	int                                                m_nAngle;                                         		// 0x00001C (0x0004)              
	int                                                m_nAngleCutoff;                                   		// 0x000020 (0x0004)              
};
//0x000020
//tPerBoneProfile[0x1DF2ACA8]
struct FtPerBoneProfile
{
	struct FName                                       m_sProfileName;                                   		// 0x000000 (0x0008)              
	TArray<struct FName>                               m_asBranchStartBoneNames;                         		// 0x000008 (0x000C)              
	TArray<struct FName>                               m_asIndividualBoneNames;                          		// 0x000014 (0x000C)              
};
//0x000010
//tCombatAnimation[0x1DF2AC40]
struct FtCombatAnimation
{
	struct FName                                       m_sStandSequenceName;                             		// 0x000000 (0x0008)              
	struct FName                                       m_sCrouchSequenceName;                            		// 0x000008 (0x0008)              
};
//0x000038
//tCombatActionProfile[0x1DF2ABD8]
struct FtCombatActionProfile
{
	struct FName                                       m_sProfileName;                                   		// 0x000000 (0x0008)              
	struct FtCombatAnimation                           m_Fire;                                           		// 0x000008 (0x0010)              
	struct FtCombatAnimation                           m_PinPull;                                        		// 0x000018 (0x0010)              
	struct FtCombatAnimation                           m_Throw;                                          		// 0x000028 (0x0010)              
};
//0x000014
//tSelectSequenceOrProfile[0x1DF2AB70]
struct FtSelectSequenceOrProfile
{
	class UAnimNode*                                   m_AnimNode;                                       		// 0x000000 (0x0004)              
	struct FName                                       m_sNodeName;                                      		// 0x000004 (0x0008)              
	struct FName                                       m_sSequenceOrProfileName;                         		// 0x00000C (0x0008)              
};
//0x00003C
//tSelectIKStrategy[0x1DF2AB08]
struct FtSelectIKStrategy
{
	class UcAPBSkelControlLimbStrategy*                m_SkelControl;                                    		// 0x000000 (0x0004)              
	struct FName                                       m_sSkelControlName;                               		// 0x000004 (0x0008)              
	struct FtIKStrategySetting                         m_IKSetting;                                      		// 0x00000C (0x0018)              
	struct FtIKStrategySetting                         m_AimedIKSetting;                                 		// 0x000024 (0x0018)              
};
//0x000020
//tSelectSequencesProfile[0x1DF2AAA0]
struct FtSelectSequencesProfile
{
	struct FName                                       m_sProfileName;                                   		// 0x000000 (0x0008)              
	TArray<struct FtSelectSequenceOrProfile>           m_aSelectSequenceOrProfile;                       		// 0x000008 (0x000C)              
	TArray<struct FtSelectIKStrategy>                  m_aSelectIKStrategy;                              		// 0x000014 (0x000C)              
};
//0x00001C
//tUpperBodyActionWeaponAnimation[0x1DF2AA38]
struct FtUpperBodyActionWeaponAnimation
{
	unsigned char                                      m_eWeaponState;                                   		// 0x000000 (0x0001)              PROPERTY: etWeaponState
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FName                                       m_sStandSequenceName;                             		// 0x000004 (0x0008)              
	struct FName                                       m_sCrouchSequenceName;                            		// 0x00000C (0x0008)              
	float                                              m_fTransitionTime;                                		// 0x000014 (0x0004)              
	float                                              m_fTransitionTimeOut;                             		// 0x000018 (0x0004)              
};
//0x000014
//tUpperBodyActionProfile[0x1DF2A9D0]
struct FtUpperBodyActionProfile
{
	struct FName                                       m_sProfileName;                                   		// 0x000000 (0x0008)              
	TArray<struct FtUpperBodyActionWeaponAnimation>    m_aWeaponAnimations;                              		// 0x000008 (0x000C)              
};
//0x000020
//APBVehicleSeat[0x1DF2A968]
struct FAPBVehicleSeat
{
	class AcAPBPlayerController*                       Occupier;                                         		// 0x000000 (0x0004)              
	class AcAPBPawn*                                   OccupierPawn;                                     		// 0x000004 (0x0004)              
	struct FName                                       SeatSocket;                                       		// 0x000008 (0x0008)              
	unsigned char                                      eSeatUseState;                                    		// 0x000010 (0x0001)              PROPERTY: etSeatUseState
	unsigned char                                      _0x000011[0x3];                                   		// 0x000011 (0x0003) MISSED OFFSET
	struct FVehicleSeatCamera                          SeatCamera;                                       		// 0x000014 (0x000C)              
};
//0x000010
//APBVehicleDoor[0x1DF2A900]
struct FAPBVehicleDoor
{
	struct FName                                       CSADoorSocket;                                    		// 0x000000 (0x0008)              
	unsigned char                                      eDoorState;                                       		// 0x000008 (0x0001)              PROPERTY: etDoorState
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	unsigned long                                      bValid : 1;                                       		// 0x00000C (0x0004) [0x00000001] 
};
//0x00000C
//APBVehicleSocket[0x1DF2A898]
struct FAPBVehicleSocket
{
	struct FName                                       SocketName;                                       		// 0x000000 (0x0008)              
	unsigned long                                      bValid : 1;                                       		// 0x000008 (0x0004) [0x00000001] 
};
//0x00001C
//APBVehicleVCP[0x1DF2A830]
struct FAPBVehicleVCP
{
	struct FName                                       VCPSocket;                                        		// 0x000000 (0x0008)              
	float                                              VCPArcDistance;                                   		// 0x000008 (0x0004)              
	float                                              VCPYawDirection;                                  		// 0x00000C (0x0004)              
	float                                              LeanOutAnimTime;                                  		// 0x000010 (0x0004)              
	float                                              LeanInAnimTime;                                   		// 0x000014 (0x0004)              
	unsigned long                                      bValid : 1;                                       		// 0x000018 (0x0004) [0x00000001] 
};
//0x000010
//NPCDriverData[0x1DF2A7C8]
struct FNPCDriverData
{
	int                                                m_nNPCTypeDriver;                                 		// 0x000000 (0x0004)              
	int                                                m_nDriverAssetIndex;                              		// 0x000004 (0x0004)              
	unsigned long                                      m_bDriverPresent : 1;                             		// 0x000008 (0x0004) [0x00000001] 
	int                                                m_nDriverDataID;                                  		// 0x00000C (0x0004)              
};
//0x000008
//cRoutePosition[0x1DF2A760]
struct FcRoutePosition
{
	unsigned char                                      m_nPackedLaneIndexSectionIndex;                   		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      m_nPackedLaneIndexSectionIndex;                   		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000002[0x2];                                   		// 0x000002 (0x0002) MISSED OFFSET
	float                                              m_fDistance;                                      		// 0x000004 (0x0004)              
};
//0x000018
//LaneCommand[0x1DF2A6F8]
struct FLaneCommand
{
	unsigned char                                      m_eState;                                         		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      m_eLaneCommandID;                                 		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000002[0x2];                                   		// 0x000002 (0x0002) MISSED OFFSET
	struct FcRoutePosition                             m_CurrentPosition;                                		// 0x000004 (0x0008)              
	struct FcRoutePosition                             m_TargetPosition;                                 		// 0x00000C (0x0008)              
	float                                              m_fChangeLaneDistance;                            		// 0x000014 (0x0004)              
};
//0x000004
//SReactionIDReplicated[0x1DF2A690]
struct FSReactionIDReplicated
{
	unsigned char                                      m_eReactionID;                                    		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      m_eWorldEventID;                                  		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      m_eIncrementorToForceReplication;                 		// 0x000002 (0x0001)              PROPERTY: 
	unsigned char                                      m_ePaddingUpToThirtyTwoBits;                      		// 0x000003 (0x0001)              PROPERTY: 
};
//0x000040
//SPedStateReplicated[0x1DF2A628]
struct FSPedStateReplicated
{
	class URWTechNode*                                 m_pStartNode;                                     		// 0x000000 (0x0004)              
	class URWTechNode*                                 m_pTargetSDNode;                                  		// 0x000004 (0x0004)              
	class URWTechNode*                                 m_pVignetteNode;                                  		// 0x000008 (0x0004)              
	FVector3                                           m_vInitialPosition;                               		// 0x00000C (0x000C)              
	int                                                m_nDTRouteIndex;                                  		// 0x000018 (0x0004)              
	float                                              m_fDistanceAlongDTSegment;                        		// 0x00001C (0x0004)              
	FVector3                                           m_vDirection;                                     		// 0x000020 (0x000C)              
	FVector3                                           m_vFirstDTRouteNodeOffset;                        		// 0x00002C (0x000C)              
	float                                              m_fTimeSinceVignetteStarted;                      		// 0x000038 (0x0004)              
	struct FSReactionIDReplicated                      m_ReactionID_Replicated;                          		// 0x00003C (0x0004)              
};
//0x000006
//TTIReactionData[0x1DF2A5C0]
struct FTTIReactionData
{
	float                                              fDuration;                                        		// 0x000000 (0x0004)              
	unsigned char                                      eCSAIndex;                                        		// 0x000004 (0x0001)              PROPERTY: 
	unsigned char                                      eTTIState;                                        		// 0x000005 (0x0001)              PROPERTY: etTTIState
};
//0x00000E
//TTIReactionInProgressData[0x1DF2A558]
struct FTTIReactionInProgressData
{
	float                                              fAnimTimeElapsed;                                 		// 0x000000 (0x0004)              
	struct FTTIReactionData                            TTIData;                                          		// 0x000004 (0x0008)              
	unsigned char                                      eTTIStage;                                        		// 0x00000C (0x0001)              PROPERTY: etTTIStage
	unsigned char                                      eAnimationIndex;                                  		// 0x00000D (0x0001)              PROPERTY: 
};
//0x00000B
//cAPBMultiLaneRouteSection[0x1DF2A4F0]
struct FcAPBMultiLaneRouteSection
{
	class URWTechReachSpec*                            m_aLaneEdges[0x2];                                		// 0x000000 (0x0008)              
	unsigned char                                      nNumLanes;                                        		// 0x000008 (0x0001)              PROPERTY: 
	unsigned char                                      nDefaultLane;                                     		// 0x000009 (0x0001)              PROPERTY: 
	unsigned char                                      eTurnType;                                        		// 0x00000A (0x0001)              PROPERTY: etTurnType
};
//0x00001C
//NPCVehicleSpeed[0x1DF2A488]
struct FNPCVehicleSpeed
{
	int                                                m_eNPCVehicleCategory;                            		// 0x000000 (0x0004)              
	float                                              m_fMaxAcceleration;                               		// 0x000004 (0x0004)              
	float                                              m_fMaxDeceleration;                               		// 0x000008 (0x0004)              
	float                                              m_fMaxTopSpeedRatio;                              		// 0x00000C (0x0004)              
	float                                              m_fMinAcceleration;                               		// 0x000010 (0x0004)              
	float                                              m_fMinDeceleration;                               		// 0x000014 (0x0004)              
	float                                              m_fMinTopSpeedRatio;                              		// 0x000018 (0x0004)              
};
//0x000034
//SymbolLayer[0x1DF2A420]
struct FSymbolLayer
{
	FVector2                                           m_MatRows[0x3];                                   		// 0x000000 (0x0018)              
	struct FLinearColor                                m_HSLColour;                                      		// 0x000018 (0x0010)              
	unsigned char                                      m_nMaterialIndex;                                 		// 0x000028 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000029[0x3];                                   		// 0x000029 (0x0003) MISSED OFFSET
	int                                                m_nPrimitive;                                     		// 0x00002C (0x0004)              
	int                                                m_nGuid;                                          		// 0x000030 (0x0004)              
};
//0x000014
//GolemMorphNodeWithWeight[0x1DF2A3B8]
struct FGolemMorphNodeWithWeight
{
	float                                              Weight;                                           		// 0x000000 (0x0004)              
	struct FString                                     NodeName;                                         		// 0x000004 (0x000C)              
	int                                                Uid;                                              		// 0x000010 (0x0004)              
};
//0x000018
//GolemMakeupInfo[0x1DF2A350]
struct FGolemMakeupInfo
{
	unsigned char                                      Shape;                                            		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	float                                              Strength;                                         		// 0x000004 (0x0004)              
	struct FLinearColor                                HSLColour;                                        		// 0x000008 (0x0010)              
};
//0x000008
//ScarsLayer[0x1DF2A2E8]
struct FScarsLayer
{
	unsigned char                                      Type;                                             		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      ScarsPatternIndex;                                		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000002[0x2];                                   		// 0x000002 (0x0002) MISSED OFFSET
	float                                              Strength;                                         		// 0x000004 (0x0004)              
};
//0x000008
//PredefinedTattooLayer[0x1DF2A280]
struct FPredefinedTattooLayer
{
	unsigned char                                      TattooIndex;                                      		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	float                                              Strength;                                         		// 0x000004 (0x0004)              
};
//0x00001C
//GolemPartExternalData[0x1DF2A218]
struct FGolemPartExternalData
{
	struct FString                                     sName;                                            		// 0x000000 (0x000C)              
	struct FString                                     sGolemPartName;                                   		// 0x00000C (0x000C)              
	unsigned long                                      bEnabled : 1;                                     		// 0x000018 (0x0004) [0x00000001] 
	unsigned long                                      bLoaded : 1;                                      		// 0x000018 (0x0004) [0x00000002] 
};
//0x000030
//SegmentationDataLOD[0x1DF2A1B0]
struct FSegmentationDataLOD
{
	TArray<struct FString>                             aSegmentNames;                                    		// 0x000000 (0x000C)              
	TArray<int>                                        aSegmentMap;                                      		// 0x00000C (0x000C)              
	TArray<int>                                        aSegmentPerFace;                                  		// 0x000018 (0x000C)              
	TArray<int>                                        aChunkPerFace;                                    		// 0x000024 (0x000C)              
};
//0x000018
//GolemBaseTextureBlock[0x1DF2A148]
struct FGolemBaseTextureBlock
{
	int                                                nX;                                               		// 0x000000 (0x0004)              
	int                                                nY;                                               		// 0x000004 (0x0004)              
	float                                              fPriority;                                        		// 0x000008 (0x0004)              
	TArray<int>                                        aSegments;                                        		// 0x00000C (0x000C)              
};
//0x000008
//GolemBaseSkinTone[0x1DF2A0E0]
struct FGolemBaseSkinTone
{
	class UTexture2D*                                  ColourMap;                                        		// 0x000000 (0x0004)              
	float                                              Threshold;                                        		// 0x000004 (0x0004)              
};
//0x000008
//GolemBaseColourNormalMap[0x1DF2A078]
struct FGolemBaseColourNormalMap
{
	class UTexture2D*                                  ColourMap;                                        		// 0x000000 (0x0004)              
	class UTexture2D*                                  NormalMap;                                        		// 0x000004 (0x0004)              
};
//0x000018
//GolemScar[0x1DF2A010]
struct FGolemScar
{
	class UTexture2D*                                  OldColourMap;                                     		// 0x000000 (0x0004)              
	class UTexture2D*                                  NewColourMap;                                     		// 0x000004 (0x0004)              
	class UTexture2D*                                  NormalMap;                                        		// 0x000008 (0x0004)              
	struct FString                                     LocalisedNameTag;                                 		// 0x00000C (0x000C)              
};
//0x000024
//GolemBaseHairType[0x1DF29FA8]
struct FGolemBaseHairType
{
	struct FString                                     Name;                                             		// 0x000000 (0x000C)              
	class UTexture2D*                                  BaseColourTexture;                                		// 0x00000C (0x0004)              
	class UTexture2D*                                  BaseNormalMapTexture;                             		// 0x000010 (0x0004)              
	class UTexture2D*                                  MeshColourTexture;                                		// 0x000014 (0x0004)              
	class UTexture2D*                                  MeshNormalMapTexture;                             		// 0x000018 (0x0004)              
	float                                              SpecularExponent1;                                		// 0x00001C (0x0004)              
	float                                              SpecularExponent2;                                		// 0x000020 (0x0004)              
};
//0x000050
//GolemBaseHairShape[0x1DF29F40]
struct FGolemBaseHairShape
{
	struct FString                                     Name;                                             		// 0x000000 (0x000C)              
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x00000C (0x0004)              
	class UMorphTargetSet*                             BaseBodyMorph;                                    		// 0x000010 (0x0004)              
	TArray<struct FString>                             BodyMorphGroupsToDisable;                         		// 0x000014 (0x000C)              
	class UAnimTree*                                   AnimTree;                                         		// 0x000020 (0x0004)              
	TArray<class UAnimSet*>                            AnimSets;                                         		// 0x000024 (0x000C)              
	TArray<class UMorphTargetSet*>                     MorphSets;                                        		// 0x000030 (0x000C)              
	TArray<struct FGolemBaseHairType>                  Types;                                            		// 0x00003C (0x000C)              
	unsigned long                                      bDisabled : 1;                                    		// 0x000048 (0x0004) [0x00000001] 
	int                                                Guid;                                             		// 0x00004C (0x0004)              
};
//0x000040
//GolemProjectionArea[0x1DF29ED8]
struct FGolemProjectionArea
{
	unsigned char                                      nID;                                              		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FString                                     Name;                                             		// 0x000004 (0x000C)              
	class UTexture2D*                                  Mask;                                             		// 0x000010 (0x0004)              
	struct FString                                     Bone;                                             		// 0x000014 (0x000C)              
	float                                              fDefaultRadius;                                   		// 0x000020 (0x0004)              
	float                                              fDefaultHeight;                                   		// 0x000024 (0x0004)              
	FVector3                                           vBonePositionOffset;                              		// 0x000028 (0x000C)              
	FVector3                                           vBoneDirectionOffset;                             		// 0x000034 (0x000C)              
};
//0x000014
//GolemProjectionPose[0x1DF29E70]
struct FGolemProjectionPose
{
	struct FString                                     AnimSeqName;                                      		// 0x000000 (0x000C)              
	unsigned long                                      bStaticPose : 1;                                  		// 0x00000C (0x0004) [0x00000001] 
	float                                              Time;                                             		// 0x000010 (0x0004)              
};
//0x000010
//GolemMakeUpData[0x1DF29E08]
struct FGolemMakeUpData
{
	unsigned long                                      bGrayscale : 1;                                   		// 0x000000 (0x0004) [0x00000001] 
	class UTexture2D*                                  pTexture;                                         		// 0x000004 (0x0004)              
	int                                                nUIPriority;                                      		// 0x000008 (0x0004)              
	int                                                nOriginalIndex;                                   		// 0x00000C (0x0004)              
};
//0x000014
//ConditionalMorph[0x1DF29DA0]
struct FConditionalMorph
{
	class UMorphTargetSet*                             MorphSet;                                         		// 0x000000 (0x0004)              
	class UTexture2D*                                  NormalMap;                                        		// 0x000004 (0x0004)              
	TArray<int>                                        ItemClasses;                                      		// 0x000008 (0x000C)              
};
//0x000008
//VertexMap[0x1DF29D38]
struct FVertexMap
{
	int                                                BaseIndex;                                        		// 0x000000 (0x0004)              
	int                                                ExtraIndex;                                       		// 0x000004 (0x0004)              
};
//0x00000C
//VerticesMapLOD[0x1DF29CD0]
struct FVerticesMapLOD
{
	TArray<struct FVertexMap>                          VerticesMap;                                      		// 0x000000 (0x000C)              
};
//0x000008
//OverlayTextures[0x1DF29C68]
struct FOverlayTextures
{
	class UTexture2D*                                  BaseMeshOverlayMap;                               		// 0x000000 (0x0004)              
	class UTexture2D*                                  ExtraMeshOverlayMap;                              		// 0x000004 (0x0004)              
};
//0x00001C
//BaseExtraTextures[0x1DF29C00]
struct FBaseExtraTextures
{
	struct FString                                     Name;                                             		// 0x000000 (0x000C)              
	class UTexture2D*                                  BaseMeshColourMap;                                		// 0x00000C (0x0004)              
	class UTexture2D*                                  BaseMeshNormalMap;                                		// 0x000010 (0x0004)              
	class UTexture2D*                                  ExtraMeshColourMap;                               		// 0x000014 (0x0004)              
	class UTexture2D*                                  ExtraMeshNormalMap;                               		// 0x000018 (0x0004)              
};
//0x000030
//GolemBaseArea[0x1DF29B98]
struct FGolemBaseArea
{
	unsigned char                                      nID;                                              		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FString                                     Name;                                             		// 0x000004 (0x000C)              
	class UTexture2D*                                  BaseMeshMask;                                     		// 0x000010 (0x0004)              
	class UTexture2D*                                  ExtraMeshMask;                                    		// 0x000014 (0x0004)              
	unsigned long                                      CustomisableColour : 1;                           		// 0x000018 (0x0004) [0x00000001] 
	struct FLinearColor                                DefaultColour;                                    		// 0x00001C (0x0010)              
	unsigned long                                      AcceptProjection : 1;                             		// 0x00002C (0x0004) [0x00000001] 
};
//0x00000C
//GolemPartTextureBlock[0x1DF29B30]
struct FGolemPartTextureBlock
{
	int                                                nX;                                               		// 0x000000 (0x0004)              
	int                                                nY;                                               		// 0x000004 (0x0004)              
	float                                              fPriority;                                        		// 0x000008 (0x0004)              
};
//0x000018
//PartProjectionArea[0x1DF29AC8]
struct FPartProjectionArea
{
	unsigned char                                      nID;                                              		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FString                                     Name;                                             		// 0x000004 (0x000C)              
	float                                              fOverrideRadius;                                  		// 0x000010 (0x0004)              
	float                                              fOverrideHeight;                                  		// 0x000014 (0x0004)              
};
//0x000009
//PurchaseElementInfo[0x1DF29A60]
struct FPurchaseElementInfo
{
	int                                                nPrevArrayNum;                                    		// 0x000000 (0x0004)              
	int                                                nNewArrayNum;                                     		// 0x000004 (0x0004)              
	unsigned char                                      nPurchaseElement;                                 		// 0x000008 (0x0001)              PROPERTY: 
};
//0x000021
//VehicleDistricts[0x1DF299F8]
struct FVehicleDistricts
{
	struct FString                                     m_sHeightfield;                                   		// 0x000000 (0x000C)              
	float                                              m_fWorldOffsetX;                                  		// 0x00000C (0x0004)              
	float                                              m_fWorldOffsetY;                                  		// 0x000010 (0x0004)              
	float                                              m_fWorldOffsetZ;                                  		// 0x000014 (0x0004)              
	float                                              m_fWorldToTextureScaleXY;                         		// 0x000018 (0x0004)              
	float                                              m_fWorldToTextureScaleZ;                          		// 0x00001C (0x0004)              
	unsigned char                                      m_eVehicleDistricts;                              		// 0x000020 (0x0001)              PROPERTY: etVehicleDistricts
};
//0x000030
//GolemobileCommonData[0x1DF29990]
struct FGolemobileCommonData
{
	struct FLinearColor                                BasePaintColour;                                  		// 0x000000 (0x0010)              
	struct FLinearColor                                SecondPaintColour;                                		// 0x000010 (0x0010)              
	unsigned char                                      PaintType;                                        		// 0x000020 (0x0001)              PROPERTY: etPaintType
	unsigned char                                      _0x000021[0x3];                                   		// 0x000021 (0x0003) MISSED OFFSET
	TArray<int>                                        m_aLightPatternIndices;                           		// 0x000024 (0x000C)              
};
//0x000014
//PredefinedDecalLayer[0x1DF29928]
struct FPredefinedDecalLayer
{
	unsigned char                                      Type;                                             		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      Mode;                                             		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      DecalIndex;                                       		// 0x000002 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000003[0x1];                                   		// 0x000003 (0x0001) MISSED OFFSET
	struct FLinearColor                                VinylHSLColour;                                   		// 0x000004 (0x0010)              
};
//0x000009
//TESProjectionInfo[0x1DF298C0]
struct FTESProjectionInfo
{
	float                                              m_fMaxValueAtPremiumLevel[0x2];                   		// 0x000000 (0x0008)              
	unsigned char                                      m_eTESProjectionInfo;                             		// 0x000008 (0x0001)              PROPERTY: etTESProjectionInfo
};
//0x000024
//VehicleDamageHandlingEffect[0x1DF29858]
struct FVehicleDamageHandlingEffect
{
	int                                                m_eVehicleDamageHandlingEffect;                   		// 0x000000 (0x0004)              
	float                                              m_fBrakeEffectiveness;                            		// 0x000004 (0x0004)              
	float                                              m_fEngineTorqueScale;                             		// 0x000008 (0x0004)              
	float                                              m_fFrontLatGrip;                                  		// 0x00000C (0x0004)              
	float                                              m_fFrontLongGrip;                                 		// 0x000010 (0x0004)              
	float                                              m_fMaxSpeedScale;                                 		// 0x000014 (0x0004)              
	float                                              m_fRearLatGrip;                                   		// 0x000018 (0x0004)              
	float                                              m_fRearLongGrip;                                  		// 0x00001C (0x0004)              
	float                                              m_fSteeringSpeed;                                 		// 0x000020 (0x0004)              
};
//0x000030
//tVisualDamageAmounts[0x1DF297F0]
struct FtVisualDamageAmounts
{
	float                                              fDamage_FrontLeft;                                		// 0x000000 (0x0004)              
	float                                              fDamage_FrontRight;                               		// 0x000004 (0x0004)              
	float                                              fDamage_RearLeft;                                 		// 0x000008 (0x0004)              
	float                                              fDamage_RearRight;                                		// 0x00000C (0x0004)              
	float                                              fDamage_SideLeft;                                 		// 0x000010 (0x0004)              
	float                                              fDamage_SideRight;                                		// 0x000014 (0x0004)              
	float                                              fDamage_Top;                                      		// 0x000018 (0x0004)              
	float                                              fExtreme_Front;                                   		// 0x00001C (0x0004)              
	float                                              fExtreme_Rear;                                    		// 0x000020 (0x0004)              
	float                                              fExtreme_SideLeft;                                		// 0x000024 (0x0004)              
	float                                              fExtreme_SideRight;                               		// 0x000028 (0x0004)              
	float                                              fExtreme_Top;                                     		// 0x00002C (0x0004)              
};
//0x000054
//tRepairSession[0x1DF29788]
struct FtRepairSession
{
	class AcAPBVehicleBase*                            m_pVehicle;                                       		// 0x000000 (0x0004)              
	float                                              m_SecondsSinceLastManualRepair;                   		// 0x000004 (0x0004)              
	float                                              m_TimeSinceLastUpdate;                            		// 0x000008 (0x0004)              
	class UiVehicleRepairer*                           m_AutomatedRepairer;                              		// 0x00000C (0x0004)              
	unsigned char                                      _0x000010[0x4];                                   		// 0x000010 (0x0004) ALIGNEMENT
	struct FtVisualDamageAmounts                       m_ReferenceVisualDamage;                          		// 0x000014 (0x0030)              
	int                                                m_nReferenceHealth;                               		// 0x000044 (0x0004)              
	int                                                m_nInitialDamageAmount;                           		// 0x000048 (0x0004)              
	int                                                m_nDamageRepairedThisFrame;                       		// 0x00004C (0x0004)              
	int                                                m_nDamageTakenThisFrame;                          		// 0x000050 (0x0004)              
};
//0x00002C
//PositionAndOrientationInfo[0x1DF29720]
struct FPositionAndOrientationInfo
{
	float                                              RearAxleX;                                        		// 0x000000 (0x0004)              
	float                                              RearAxleY;                                        		// 0x000004 (0x0004)              
	float                                              RearAxleZ;                                        		// 0x000008 (0x0004)              
	struct Fuint                                       Packed_nRouteLUTIndex_DetourRouteLUTIndex;        		// 0x00000C (0x0004)              
	struct Fuint                                       Packed_nDetourRouteLUTIndex_1;                    		// 0x000010 (0x0004)              
	struct FLaneCommand                                LaneInfo;                                         		// 0x000014 (0x0018)              
};
//0x00003C
//SpeedInfo[0x1DF296B8]
struct FSpeedInfo
{
	unsigned char                                      eSpeedState;                                      		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      eSpeedCommandID;                                  		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000002[0x2];                                   		// 0x000002 (0x0002) MISSED OFFSET
	float                                              fAcceleration;                                    		// 0x000004 (0x0004)              
	float                                              fTargetSpeed;                                     		// 0x000008 (0x0004)              
	float                                              fSpeed;                                           		// 0x00000C (0x0004)              
	struct FPositionAndOrientationInfo                 PositionInfo;                                     		// 0x000010 (0x002C)              
};
//0x000009
//APBVehicleStateFSM[0x1DF29650]
struct FAPBVehicleStateFSM
{
	struct FName                                       sActorState;                                      		// 0x000000 (0x0008)              
	unsigned char                                      ePseudoKinCompState;                              		// 0x000008 (0x0001)              PROPERTY: EPKCState
};
//0x000020
//VehicleMusicPlaybackInfo[0x1DF295E8]
struct FVehicleMusicPlaybackInfo
{
	int                                                m_nOwnerCharacterUID;                             		// 0x000000 (0x0004)              
	unsigned long                                      m_bMp3Playing : 1;                                		// 0x000004 (0x0004) [0x00000001] 
	struct FGuid                                       m_MusicStudioSongGuid;                            		// 0x000008 (0x0010)              
	int                                                m_nInitialPlaybackServerTime;                     		// 0x000018 (0x0004)              
	int                                                m_nEventIndex;                                    		// 0x00001C (0x0004)              
};
//0x000030
//VehicleMusicNameInfo[0x1DF29580]
struct FVehicleMusicNameInfo
{
	struct FString                                     m_sTrackName;                                     		// 0x000000 (0x000C)              
	struct FString                                     m_sArtistName;                                    		// 0x00000C (0x000C)              
	struct FString                                     m_sAlbumName;                                     		// 0x000018 (0x000C)              
	struct FString                                     m_sGenre;                                         		// 0x000024 (0x000C)              
};
//0x000091
//ModifiedVehicleSetupType[0x1DF29518]
struct FModifiedVehicleSetupType
{
	float                                              m_fBreakInCSADuration;                            		// 0x000000 (0x0004)              
	float                                              m_fFrontWheelMeshOffsetHeight;                    		// 0x000004 (0x0004)              
	float                                              m_fRearWheelMeshOffsetHeight;                     		// 0x000008 (0x0004)              
	float                                              m_fFrontWheelBoneOffsetHeight;                    		// 0x00000C (0x0004)              
	float                                              m_fRearWheelBoneOffsetHeight;                     		// 0x000010 (0x0004)              
	float                                              m_fFrontLongFactor;                               		// 0x000014 (0x0004)              
	float                                              m_fRearLongFactor;                                		// 0x000018 (0x0004)              
	float                                              m_fFrontLatFactor;                                		// 0x00001C (0x0004)              
	float                                              m_fRearLatFactor;                                 		// 0x000020 (0x0004)              
	int                                                m_nMainCargoPipCapacity;                          		// 0x000024 (0x0004)              
	float                                              m_fRearHandbrakeLong;                             		// 0x000028 (0x0004)              
	float                                              m_fRearHandbrakeLat;                              		// 0x00002C (0x0004)              
	float                                              m_fFinalDriveRatio;                               		// 0x000030 (0x0004)              
	float                                              m_f500RpmTorque;                                  		// 0x000034 (0x0004)              
	float                                              m_f2500RpmTorque;                                 		// 0x000038 (0x0004)              
	float                                              m_f4500RpmTorque;                                 		// 0x00003C (0x0004)              
	float                                              m_f7000RpmTorque;                                 		// 0x000040 (0x0004)              
	float                                              m_fSuspensionDamping;                             		// 0x000044 (0x0004)              
	float                                              m_fSuspensionStiffness;                           		// 0x000048 (0x0004)              
	float                                              m_fChassisTorqueFactor;                           		// 0x00004C (0x0004)              
	float                                              m_fEngineBrakingFactor;                           		// 0x000050 (0x0004)              
	float                                              m_fMaxBrakeTorque;                                		// 0x000054 (0x0004)              
	float                                              m_fReverseThrottle;                               		// 0x000058 (0x0004)              
	float                                              m_fSteerSpeed;                                    		// 0x00005C (0x0004)              
	float                                              m_f0msSteerAngle;                                 		// 0x000060 (0x0004)              
	float                                              m_f12msSteerAngle;                                		// 0x000064 (0x0004)              
	float                                              m_f22msSteerAngle;                                		// 0x000068 (0x0004)              
	float                                              m_fCOMOffsetX;                                    		// 0x00006C (0x0004)              
	float                                              m_fCOMOffsetZ;                                    		// 0x000070 (0x0004)              
	float                                              m_fCollisionDamage;                               		// 0x000074 (0x0004)              
	float                                              m_fMaxDust;                                       		// 0x000078 (0x0004)              
	float                                              m_fMaxDirt;                                       		// 0x00007C (0x0004)              
	float                                              m_fMaxReverseSpeed;                               		// 0x000080 (0x0004)              
	float                                              m_fMaxSpeed;                                      		// 0x000084 (0x0004)              
	int                                                m_nMaxHealth;                                     		// 0x000088 (0x0004)              
	float                                              m_fMaxRepairTimeSecs;                             		// 0x00008C (0x0004)              
	unsigned char                                      m_eDriveType;                                     		// 0x000090 (0x0001)              PROPERTY: etVehicleDriveType
};
//0x000004
//VehicleSetupTypeSettings[0x1DF294B0]
struct FVehicleSetupTypeSettings
{
	unsigned char                                      eVehicleSetupType;                                		// 0x000000 (0x0001)              PROPERTY: etVehicleSetupType
	unsigned char                                      eReplicationIndex;                                		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      paddingToReachMinStructSize;                      		// 0x000002 (0x0001)              PROPERTY: 
	unsigned char                                      paddingToReachMinStructSize;                      		// 0x000003 (0x0001)              PROPERTY: 
};
//0x000099
//ModifiableVehicleSetupTypeSettings[0x1DF29448]
struct FModifiableVehicleSetupTypeSettings
{
	struct FModifiedVehicleSetupType                   Data;                                             		// 0x000000 (0x0094)              
	struct FVehicleSetupTypeSettings                   Settings;                                         		// 0x000094 (0x0004)              
	unsigned char                                      eReplicationIndex;                                		// 0x000098 (0x0001)              PROPERTY: 
};
//0x00003C
//VehicleStateDelta[0x1DF293E0]
struct FVehicleStateDelta
{
	double                                             fTimeStamp;                                       		// 0x000000 (0x0008)              
	float                                              fTimeDelta;                                       		// 0x000008 (0x0004)              
	FVector3                                           vPosDelta;                                        		// 0x00000C (0x000C)              
	FRotator                                           tRotDelta;                                        		// 0x000018 (0x000C)              
	FVector3                                           vLinVelDelta;                                     		// 0x000024 (0x000C)              
	FVector3                                           vAngVelDelta;                                     		// 0x000030 (0x000C)              
};
//0x000038
//VehicleStateInfo[0x1DF29378]
struct FVehicleStateInfo
{
	double                                             fTimeStamp;                                       		// 0x000000 (0x0008)              
	FVector3                                           vPos;                                             		// 0x000008 (0x000C)              
	FRotator                                           tRot;                                             		// 0x000014 (0x000C)              
	FVector3                                           vLinVel;                                          		// 0x000020 (0x000C)              
	FVector3                                           vAngVel;                                          		// 0x00002C (0x000C)              
};
//0x000014
//tDoor[0x1DF29310]
struct FtDoor
{
	unsigned char                                      m_eVehiclePositionIndex;                          		// 0x000000 (0x0001)              PROPERTY: etVehiclePositionIndex
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FName                                       m_sBoneName;                                      		// 0x000004 (0x0008)              
	unsigned char                                      m_eDoorState;                                     		// 0x00000C (0x0001)              PROPERTY: etDoorState
	unsigned char                                      _0x00000D[0x3];                                   		// 0x00000D (0x0003) MISSED OFFSET
	unsigned long                                      m_bPlayingDoorAnimation : 1;                      		// 0x000010 (0x0004) [0x00000001] 
	unsigned long                                      m_bDoorGotToFullyOpen : 1;                        		// 0x000010 (0x0004) [0x00000002] 
};
//0x000004
//CameraShakePresetExported[0x1DF292A8]
struct FCameraShakePresetExported
{
	int                                                m_eCameraShakePreset;                             		// 0x000000 (0x0004)              
};
//0x00003C
//HandyCamSetUpData[0x1DF29240]
struct FHandyCamSetUpData
{
	FRotator                                           m_RotMaximumDeviation;                            		// 0x000000 (0x000C)              
	float                                              m_fInterpToSpeedMin;                              		// 0x00000C (0x0004)              
	float                                              m_fInterpToSpeedMax;                              		// 0x000010 (0x0004)              
	float                                              m_fMovementSpeedMin;                              		// 0x000014 (0x0004)              
	float                                              m_fMovementSpeedMax;                              		// 0x000018 (0x0004)              
	float                                              m_fChangeInMovementSpeedPerSec;                   		// 0x00001C (0x0004)              
	float                                              m_fDelayMin;                                      		// 0x000020 (0x0004)              
	float                                              m_fDelayMax;                                      		// 0x000024 (0x0004)              
	float                                              m_fDuration;                                      		// 0x000028 (0x0004)              
	unsigned long                                      m_bAllowActivation : 1;                           		// 0x00002C (0x0004) [0x00000001] 
	int                                                m_nIDIterpolateTo;                                		// 0x000030 (0x0004)              
	float                                              m_fInterpToDelay;                                 		// 0x000034 (0x0004)              
	int                                                m_nID;                                            		// 0x000038 (0x0004)              
};
//0x00007C
//HandyCamStruct[0x1DF291D8]
struct FHandyCamStruct
{
	int                                                m_nHandyCamSetUpDataID;                           		// 0x000000 (0x0004)              
	struct FHandyCamSetUpData                          m_HandyCamInterpolatedData;                       		// 0x000004 (0x003C)              
	FRotator                                           m_TargetRotationOffset;                           		// 0x000040 (0x000C)              
	FRotator                                           m_MovingRotationOffset;                           		// 0x00004C (0x000C)              
	float                                              m_fCurrentMovementSpeed;                          		// 0x000058 (0x0004)              
	FRotator                                           m_InterpToRotationOffset;                         		// 0x00005C (0x000C)              
	float                                              m_fCurrentInterpToRotationSpeed;                  		// 0x000068 (0x0004)              
	float                                              m_fNextDelay;                                     		// 0x00006C (0x0004)              
	float                                              m_fCurrentDelay;                                  		// 0x000070 (0x0004)              
	float                                              m_fDurationActive;                                		// 0x000074 (0x0004)              
	unsigned long                                      m_bCurrentlyActive : 1;                           		// 0x000078 (0x0004) [0x00000001] 
};
//0x000004
//ShakeParams[0x1DF29170]
struct FShakeParams
{
	unsigned char                                      X;                                                		// 0x000000 (0x0001)              PROPERTY: EShakeParam
	unsigned char                                      Y;                                                		// 0x000001 (0x0001)              PROPERTY: EShakeParam
	unsigned char                                      Z;                                                		// 0x000002 (0x0001)              PROPERTY: EShakeParam
	unsigned char                                      Padding;                                          		// 0x000003 (0x0001)              PROPERTY: 
};
//0x000070
//ScreenShakeStruct[0x1DF29108]
struct FScreenShakeStruct
{
	float                                              TimeToGo;                                         		// 0x000000 (0x0004)              
	float                                              TimeDuration;                                     		// 0x000004 (0x0004)              
	FVector3                                           RotAmplitude;                                     		// 0x000008 (0x000C)              
	FVector3                                           RotFrequency;                                     		// 0x000014 (0x000C)              
	FVector3                                           RotSinOffset;                                     		// 0x000020 (0x000C)              
	struct FShakeParams                                RotParam;                                         		// 0x00002C (0x0004)              
	FVector3                                           LocAmplitude;                                     		// 0x000030 (0x000C)              
	FVector3                                           LocFrequency;                                     		// 0x00003C (0x000C)              
	FVector3                                           LocSinOffset;                                     		// 0x000048 (0x000C)              
	struct FShakeParams                                LocParam;                                         		// 0x000054 (0x0004)              
	float                                              FOVAmplitude;                                     		// 0x000058 (0x0004)              
	float                                              FOVFrequency;                                     		// 0x00005C (0x0004)              
	float                                              FOVSinOffset;                                     		// 0x000060 (0x0004)              
	unsigned char                                      FOVParam;                                         		// 0x000064 (0x0001)              PROPERTY: EShakeParam
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	int                                                ShakeID;                                          		// 0x000068 (0x0004)              
	unsigned long                                      bPlayContinuously : 1;                            		// 0x00006C (0x0004) [0x00000001] 
};
//0x000005
//CameraConstant[0x1DF290A0]
struct FCameraConstant
{
	float                                              m_fValue;                                         		// 0x000000 (0x0004)              
	unsigned char                                      m_eCameraConstant;                                		// 0x000004 (0x0001)              PROPERTY: etCameraConstant
};
//0x00000D
//APBViewportType[0x1DF29038]
struct FAPBViewportType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	unsigned char                                      m_eAPBViewportType;                               		// 0x00000C (0x0001)              PROPERTY: etAPBViewportType
};
//0x000044
//CameraShakePreset[0x1DF28FD0]
struct FCameraShakePreset
{
	int                                                m_eCameraShakePreset;                             		// 0x000000 (0x0004)              
	float                                              m_fDuration;                                      		// 0x000004 (0x0004)              
	float                                              m_fFOVAmplitude;                                  		// 0x000008 (0x0004)              
	float                                              m_fFOVFrequency;                                  		// 0x00000C (0x0004)              
	float                                              m_fLocationAmplitudeX;                            		// 0x000010 (0x0004)              
	float                                              m_fLocationAmplitudeY;                            		// 0x000014 (0x0004)              
	float                                              m_fLocationAmplitudeZ;                            		// 0x000018 (0x0004)              
	float                                              m_fLocationFrequencyX;                            		// 0x00001C (0x0004)              
	float                                              m_fLocationFrequencyY;                            		// 0x000020 (0x0004)              
	float                                              m_fLocationFrequencyZ;                            		// 0x000024 (0x0004)              
	float                                              m_fRotationAmplitudeX;                            		// 0x000028 (0x0004)              
	float                                              m_fRotationAmplitudeY;                            		// 0x00002C (0x0004)              
	float                                              m_fRotationAmplitudeZ;                            		// 0x000030 (0x0004)              
	float                                              m_fRotationFrequencyX;                            		// 0x000034 (0x0004)              
	float                                              m_fRotationFrequencyY;                            		// 0x000038 (0x0004)              
	float                                              m_fRotationFrequencyZ;                            		// 0x00003C (0x0004)              
	unsigned long                                      m_bRandomStartingFOV : 1;                         		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      m_bRandomStartingLocationX : 1;                   		// 0x000040 (0x0004) [0x00000002] 
	unsigned long                                      m_bRandomStartingLocationY : 1;                   		// 0x000040 (0x0004) [0x00000004] 
	unsigned long                                      m_bRandomStartingLocationZ : 1;                   		// 0x000040 (0x0004) [0x00000008] 
	unsigned long                                      m_bRandomStartingRotationX : 1;                   		// 0x000040 (0x0004) [0x00000010] 
	unsigned long                                      m_bRandomStartingRotationY : 1;                   		// 0x000040 (0x0004) [0x00000020] 
	unsigned long                                      m_bRandomStartingRotationZ : 1;                   		// 0x000040 (0x0004) [0x00000040] 
};
//0x00003C
//CameraHandyCamPreset[0x1DF28F68]
struct FCameraHandyCamPreset
{
	int                                                m_eCameraHandyCamPreset;                          		// 0x000000 (0x0004)              
	int                                                m_eInterpolateTo;                                 		// 0x000004 (0x0004)              
	float                                              m_fChangeInMovementSpeed;                         		// 0x000008 (0x0004)              
	float                                              m_fDelayMax;                                      		// 0x00000C (0x0004)              
	float                                              m_fDelayMin;                                      		// 0x000010 (0x0004)              
	float                                              m_fDuration;                                      		// 0x000014 (0x0004)              
	float                                              m_fInterpolationSpeedMax;                         		// 0x000018 (0x0004)              
	float                                              m_fInterpolationSpeedMin;                         		// 0x00001C (0x0004)              
	float                                              m_fInterpToDelay;                                 		// 0x000020 (0x0004)              
	float                                              m_fMovementSpeedMax;                              		// 0x000024 (0x0004)              
	float                                              m_fMovementSpeedMin;                              		// 0x000028 (0x0004)              
	int                                                m_nMaxDeviationPitch;                             		// 0x00002C (0x0004)              
	int                                                m_nMaxDeviationRoll;                              		// 0x000030 (0x0004)              
	int                                                m_nMaxDeviationYaw;                               		// 0x000034 (0x0004)              
	unsigned long                                      m_bAllowActivation : 1;                           		// 0x000038 (0x0004) [0x00000001] 
};
//0x000004
//CameraHandyCamPresetExported[0x1DF28F00]
struct FCameraHandyCamPresetExported
{
	int                                                m_eCameraHandyCamPreset;                          		// 0x000000 (0x0004)              
};
//0x000014
//APBViewAdjustmentData[0x1DF28E98]
struct FAPBViewAdjustmentData
{
	float                                              m_fBackAdjust;                                    		// 0x000000 (0x0004)              
	float                                              m_fHeightAdjust;                                  		// 0x000004 (0x0004)              
	float                                              m_fRightAdjust;                                   		// 0x000008 (0x0004)              
	float                                              m_fRightAdjustPitchScalar;                        		// 0x00000C (0x0004)              
	float                                              m_fRoll;                                          		// 0x000010 (0x0004)              
};
//0x000020
//PenetrationAvoidanceFeeler[0x1DF28E30]
struct FPenetrationAvoidanceFeeler
{
	FRotator                                           AdjustmentRot;                                    		// 0x000000 (0x000C)              
	float                                              WorldWeight;                                      		// 0x00000C (0x0004)              
	float                                              PawnWeight;                                       		// 0x000010 (0x0004)              
	FVector3                                           Extent;                                           		// 0x000014 (0x000C)              
};
//0x0000B0
//sTargetTypeSettings[0x1DF28DC8]
struct FsTargetTypeSettings
{
	struct FAPBViewAdjustmentData                      m_APBPrimaryViewAdjustmentsCloseIn[0x2];          		// 0x000000 (0x0028)              
	struct FAPBViewAdjustmentData                      m_APBPrimaryViewAdjustmentsFarOut[0x2];           		// 0x000028 (0x0028)              
	struct FAPBViewAdjustmentData                      m_APBSecondaryViewAdjustmentsCloseIn[0x2];        		// 0x000050 (0x0028)              
	struct FAPBViewAdjustmentData                      m_APBSecondaryViewAdjustmentsFarOut[0x2];         		// 0x000078 (0x0028)              
	unsigned char                                      m_eCurrentCameraPosition;                         		// 0x0000A0 (0x0001)              PROPERTY: etCameraPosition
	unsigned char                                      _0x0000A1[0x3];                                   		// 0x0000A1 (0x0003) MISSED OFFSET
	float                                              m_fViewScalar;                                    		// 0x0000A4 (0x0004)              
	float                                              m_fViewScalarUserDefined;                         		// 0x0000A8 (0x0004)              
	float                                              m_fZoomSpeedPerSec;                               		// 0x0000AC (0x0004)              
};
//0x00007C
//CCameraMode[0x1DF28D60]
struct FCCameraMode
{
	float                                              m_f16_9BackAdjust;                                		// 0x000000 (0x0004)              
	float                                              m_f16_9CrouchBackAdjust;                          		// 0x000004 (0x0004)              
	float                                              m_f16_9CrouchHeightAdjust;                        		// 0x000008 (0x0004)              
	float                                              m_f16_9CrouchRightAdjust;                         		// 0x00000C (0x0004)              
	float                                              m_f16_9CrouchRightAdjustPitchScalar;              		// 0x000010 (0x0004)              
	float                                              m_f16_9FOV;                                       		// 0x000014 (0x0004)              
	float                                              m_f16_9HeightAdjust;                              		// 0x000018 (0x0004)              
	float                                              m_f16_9RightAdjust;                               		// 0x00001C (0x0004)              
	float                                              m_f16_9RightAdjustPitchScalar;                    		// 0x000020 (0x0004)              
	float                                              m_f4_3BackAdjust;                                 		// 0x000024 (0x0004)              
	float                                              m_f4_3CrouchBackAdjust;                           		// 0x000028 (0x0004)              
	float                                              m_f4_3CrouchHeightAdjust;                         		// 0x00002C (0x0004)              
	float                                              m_f4_3CrouchRightAdjust;                          		// 0x000030 (0x0004)              
	float                                              m_f4_3CrouchRightAdjustPitchScalar;               		// 0x000034 (0x0004)              
	float                                              m_f4_3FOV;                                        		// 0x000038 (0x0004)              
	float                                              m_f4_3HeightAdjust;                               		// 0x00003C (0x0004)              
	float                                              m_f4_3RightAdjust;                                		// 0x000040 (0x0004)              
	float                                              m_f4_3RightAdjustPitchScalar;                     		// 0x000044 (0x0004)              
	float                                              m_fAdjustBlendSpeed;                              		// 0x000048 (0x0004)              
	float                                              m_fCameraOriginLagSpeed;                          		// 0x00004C (0x0004)              
	float                                              m_fCameraRollBlendSpeed;                          		// 0x000050 (0x0004)              
	float                                              m_fCameraRollDegrees;                             		// 0x000054 (0x0004)              
	float                                              m_fCrouchSafeLocX;                                		// 0x000058 (0x0004)              
	float                                              m_fCrouchSafeLocY;                                		// 0x00005C (0x0004)              
	float                                              m_fCrouchSafeLocZ;                                		// 0x000060 (0x0004)              
	float                                              m_fFOVBlendSpeed;                                 		// 0x000064 (0x0004)              
	float                                              m_fSafeLocX;                                      		// 0x000068 (0x0004)              
	float                                              m_fSafeLocY;                                      		// 0x00006C (0x0004)              
	float                                              m_fSafeLocZ;                                      		// 0x000070 (0x0004)              
	unsigned char                                      m_eCameraMode;                                    		// 0x000074 (0x0001)              PROPERTY: etCCameraMode
	unsigned char                                      _0x000075[0x3];                                   		// 0x000075 (0x0003) MISSED OFFSET
	unsigned long                                      m_bCanDoLookBehindCam : 1;                        		// 0x000078 (0x0004) [0x00000001] 
	unsigned long                                      m_bCrouchEnabled : 1;                             		// 0x000078 (0x0004) [0x00000002] 
	unsigned long                                      m_bUseDefaultCameraAdjustments : 1;               		// 0x000078 (0x0004) [0x00000004] 
};
//0x00000C
//tViewConeParams[0x1DF28CF8]
struct FtViewConeParams
{
	float                                              nConstViewResetZoneAngle;                         		// 0x000000 (0x0004)              
	float                                              fConstViewResetWaitTime;                          		// 0x000004 (0x0004)              
	float                                              fConstViewResetSpeed;                             		// 0x000008 (0x0004)              
};
//0x000008
//tLookBehindParams[0x1DF28C90]
struct FtLookBehindParams
{
	float                                              fConstViewLookbehindWaitTime;                     		// 0x000000 (0x0004)              
	float                                              fConstReversingMinVel;                            		// 0x000004 (0x0004)              
};
//0x000008
//tAutoRollParams[0x1DF28C28]
struct FtAutoRollParams
{
	float                                              fConstRollMultiplier;                             		// 0x000000 (0x0004)              
	float                                              fConstRollMaximum;                                		// 0x000004 (0x0004)              
};
//0x000008
//tLookBehindState[0x1DF28BC0]
struct FtLookBehindState
{
	unsigned long                                      bDoingLookbehind : 1;                             		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bWasDoingLookbehind : 1;                          		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      bDoingAutoLookbehind : 1;                         		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      bWasDoingAutoLookbehind : 1;                      		// 0x000000 (0x0004) [0x00000008] 
	float                                              fCurrentReverseTime;                              		// 0x000004 (0x0004)              
};
//0x000018
//tAutoRollState[0x1DF28B58]
struct FtAutoRollState
{
	FRotator                                           PrevCamRotatorValue;                              		// 0x000000 (0x000C)              
	float                                              fLastCameraYawAngle;                              		// 0x00000C (0x0004)              
	float                                              fTargetCameraRoll;                                		// 0x000010 (0x0004)              
	float                                              fLastCameraRoll;                                  		// 0x000014 (0x0004)              
};
//0x000014
//tDistrictMapState[0x1DF28AF0]
struct FtDistrictMapState
{
	float                                              fDistrictMapVisibleTime;                          		// 0x000000 (0x0004)              
	unsigned long                                      bAutoResetOverride : 1;                           		// 0x000004 (0x0004) [0x00000001] 
	FRotator                                           PrevCamRotationValue;                             		// 0x000008 (0x000C)              
};
//0x00000C
//STickTimesReplicated[0x1DF28A88]
struct FSTickTimesReplicated
{
	float                                              m_fClampedTickTime;                               		// 0x000000 (0x0004)              
	float                                              m_fActualTickTime;                                		// 0x000004 (0x0004)              
	int                                                m_nIncrementorToForceReplication;                 		// 0x000008 (0x0004)              
};
//0x000018
//ChaosScoreboardPlayer[0x1DF28A20]
struct FChaosScoreboardPlayer
{
	struct FString                                     m_PlayerName;                                     		// 0x000000 (0x000C)              
	int                                                m_nCharacterUID;                                  		// 0x00000C (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x000010 (0x0001)              PROPERTY: 
	unsigned char                                      m_nPlayerUpdateIndex;                             		// 0x000011 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000012[0x2];                                   		// 0x000012 (0x0002) MISSED OFFSET
	unsigned long                                      m_bSlotAllocated : 1;                             		// 0x000014 (0x0004) [0x00000001] 
	unsigned long                                      m_bIsFreeRider : 1;                               		// 0x000014 (0x0004) [0x00000002] 
};
//0x000024
//ChaosScoreboardData[0x1DF289B8]
struct FChaosScoreboardData
{
	unsigned char                                      m_PackedData[0x1D];                               		// 0x000000 (0x001D)              PROPERTY: 
	unsigned char                                      m_nPlayerUpdateIndex;                             		// 0x00001D (0x0001)              PROPERTY: 
	unsigned char                                      _0x00001E[0x2];                                   		// 0x00001E (0x0002) MISSED OFFSET
	int                                                m_nCurrentTimeAlive;                              		// 0x000020 (0x0004)              
};
//0x000008
//GrenadeBounceInfo[0x1DF28950]
struct FGrenadeBounceInfo
{
	float                                              m_fSpeed;                                         		// 0x000000 (0x0004)              
	int                                                m_nMaterial;                                      		// 0x000004 (0x0004)              
};
//0x000009
//UserData[0x1DF288E8]
struct FUserData
{
	class AcAPBPlayerController*                       UserController;                                   		// 0x000000 (0x0004)              
	float                                              fDuration;                                        		// 0x000004 (0x0004)              
	unsigned char                                      eCurrentCSA;                                      		// 0x000008 (0x0001)              PROPERTY: etContextSensitiveActionBase
};
//0x000011
//IPData[0x1DF28880]
struct FIPData
{
	TArray<struct FUserData>                           aUsers;                                           		// 0x000000 (0x000C)              
	float                                              fCachedProgress;                                  		// 0x00000C (0x0004)              
	unsigned char                                      eCachedCSA;                                       		// 0x000010 (0x0001)              PROPERTY: etContextSensitiveActionBase
};
//0x000010
//tPlayerDropOffPointsInfo[0x1DF28818]
struct FtPlayerDropOffPointsInfo
{
	int                                                nCharacterUID;                                    		// 0x000000 (0x0004)              
	float                                              fPoints;                                          		// 0x000004 (0x0004)              
	double                                             fPointsSubtractedTimeStamp;                       		// 0x000008 (0x0008)              
};
//0x00001C
//DisplayPointMusicPlaybackInfo[0x1DF287B0]
struct FDisplayPointMusicPlaybackInfo
{
	int                                                m_nOwnerCharacterUID;                             		// 0x000000 (0x0004)              
	struct FGuid                                       m_MusicStudioSongGuid;                            		// 0x000004 (0x0010)              
	int                                                m_nInitialPlaybackServerTime;                     		// 0x000014 (0x0004)              
	unsigned long                                      m_bMp3Playing : 1;                                		// 0x000018 (0x0004) [0x00000001] 
};
//0x000030
//DisplayPointMusicNameInfo[0x1DF28748]
struct FDisplayPointMusicNameInfo
{
	struct FString                                     m_sTrackName;                                     		// 0x000000 (0x000C)              
	struct FString                                     m_sArtistName;                                    		// 0x00000C (0x000C)              
	struct FString                                     m_sAlbumName;                                     		// 0x000018 (0x000C)              
	struct FString                                     m_sGenre;                                         		// 0x000024 (0x000C)              
};
//0x00005C
//MissionTemplate[0x1DF286E0]
struct FMissionTemplate
{
	struct FString                                     m_sMissionTitle;                                  		// 0x000000 (0x000C)              
	int                                                m_eMissionTemplate;                               		// 0x00000C (0x0004)              
	int                                                m_eMissionTypeFilter;                             		// 0x000010 (0x0004)              
	int                                                m_eMissionUIOppositionProfile;                    		// 0x000014 (0x0004)              
	int                                                m_eMissionUIOwnerProfile;                         		// 0x000018 (0x0004)              
	int                                                m_ePurpose;                                       		// 0x00001C (0x0004)              
	int                                                m_eRarity;                                        		// 0x000020 (0x0004)              
	int                                                m_eRewardPackage;                                 		// 0x000024 (0x0004)              
	float                                              m_fOwningSideBias;                                		// 0x000028 (0x0004)              
	int                                                m_nComplexity;                                    		// 0x00002C (0x0004)              
	int                                                m_nGroupSizeMax;                                  		// 0x000030 (0x0004)              
	int                                                m_nGroupSizeMin;                                  		// 0x000034 (0x0004)              
	int                                                m_nOpposingSideVIPLives;                          		// 0x000038 (0x0004)              
	int                                                m_nOwningSideVIPLives;                            		// 0x00003C (0x0004)              
	int                                                m_nRespawnTime;                                   		// 0x000040 (0x0004)              
	int                                                m_nRespawnTimeIncrement;                          		// 0x000044 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000048 (0x0004)              
	int                                                m_nSimultaneousCap;                               		// 0x00004C (0x0004)              
	int                                                m_nTakeoutCount;                                  		// 0x000050 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x000054 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eTimeOfDayAvailability;                         		// 0x000055 (0x0001)              PROPERTY: etTimeOfDayAvailability
	unsigned char                                      _0x000056[0x2];                                   		// 0x000056 (0x0002) MISSED OFFSET
	unsigned long                                      m_bBountyHunter : 1;                              		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      m_bCountArrestsAsTakeouts : 1;                    		// 0x000058 (0x0004) [0x00000002] 
	unsigned long                                      m_bCountArrestsAsVIPTakeouts : 1;                 		// 0x000058 (0x0004) [0x00000004] 
	unsigned long                                      m_bCountKillsAsTakeouts : 1;                      		// 0x000058 (0x0004) [0x00000008] 
	unsigned long                                      m_bCountKillsAsVIPTakeouts : 1;                   		// 0x000058 (0x0004) [0x00000010] 
	unsigned long                                      m_bDisabled : 1;                                  		// 0x000058 (0x0004) [0x00000020] 
	unsigned long                                      m_bNoCriminalOpposition : 1;                      		// 0x000058 (0x0004) [0x00000040] 
	unsigned long                                      m_bOppositionWinOnMaxTakeouts : 1;                		// 0x000058 (0x0004) [0x00000080] 
	unsigned long                                      m_bOwnerWinOnMaxTakeouts : 1;                     		// 0x000058 (0x0004) [0x00000100] 
	unsigned long                                      m_bTest : 1;                                      		// 0x000058 (0x0004) [0x00000200] 
	unsigned long                                      m_bUseTakeoutBar : 1;                             		// 0x000058 (0x0004) [0x00000400] 
};
//0x000050
//TaskObjective[0x1DF28678]
struct FTaskObjective
{
	struct FString                                     m_sDispatchBrief;                                 		// 0x000000 (0x000C)              
	struct FString                                     m_sOwnerBrief;                                    		// 0x00000C (0x000C)              
	int                                                m_eMissionTemplate;                               		// 0x000018 (0x0004)              
	int                                                m_eOperation;                                     		// 0x00001C (0x0004)              
	int                                                m_eTargetAllocation;                              		// 0x000020 (0x0004)              
	int                                                m_eTaskItemVariety;                               		// 0x000024 (0x0004)              
	int                                                m_eTaskObjective;                                 		// 0x000028 (0x0004)              
	int                                                m_eVehicleCategory;                               		// 0x00002C (0x0004)              
	int                                                m_nTargetsRequired;                               		// 0x000030 (0x0004)              
	int                                                m_nTaskItemsAvailable;                            		// 0x000034 (0x0004)              
	int                                                m_nTaskItemsRequired;                             		// 0x000038 (0x0004)              
	int                                                m_nTimeLimit;                                     		// 0x00003C (0x0004)              
	int                                                m_nVehiclesRequired;                              		// 0x000040 (0x0004)              
	unsigned char                                      m_eItemBatch;                                     		// 0x000044 (0x0001)              PROPERTY: etTaskItemBatch
	unsigned char                                      m_eOpposingSideVIPAssignment;                     		// 0x000045 (0x0001)              PROPERTY: etVIPAssignmentMethod
	unsigned char                                      m_eOwningSideVIPAssignment;                       		// 0x000046 (0x0001)              PROPERTY: etVIPAssignmentMethod
	unsigned char                                      m_eStage;                                         		// 0x000047 (0x0001)              PROPERTY: etTaskObjectiveStage
	unsigned char                                      m_eTaskItemSpecificationMethod;                   		// 0x000048 (0x0001)              PROPERTY: etTaskItemSpecificationMethod
	unsigned char                                      m_eVehicleBatch;                                  		// 0x000049 (0x0001)              PROPERTY: etVehicleBatch
	unsigned char                                      _0x00004A[0x2];                                   		// 0x00004A (0x0002) MISSED OFFSET
	unsigned long                                      m_bBonusTime : 1;                                 		// 0x00004C (0x0004) [0x00000001] 
	unsigned long                                      m_bClearOpposingSideVIPTakeoutsOnStart : 1;       		// 0x00004C (0x0004) [0x00000002] 
	unsigned long                                      m_bClearOwningSideVIPTakeoutsOnStart : 1;         		// 0x00004C (0x0004) [0x00000004] 
	unsigned long                                      m_bClearTakeoutsOnStart : 1;                      		// 0x00004C (0x0004) [0x00000008] 
	unsigned long                                      m_bCompletesConcurrentPair : 1;                   		// 0x00004C (0x0004) [0x00000010] 
	unsigned long                                      m_bDisableTakeouts : 1;                           		// 0x00004C (0x0004) [0x00000020] 
	unsigned long                                      m_bDrawOnTimeOut : 1;                             		// 0x00004C (0x0004) [0x00000040] 
	unsigned long                                      m_bEnabledPvP : 1;                                		// 0x00004C (0x0004) [0x00000080] 
	unsigned long                                      m_bEnableOpposingSideVIPTakeouts : 1;             		// 0x00004C (0x0004) [0x00000100] 
	unsigned long                                      m_bEnableOwningSideVIPTakeouts : 1;               		// 0x00004C (0x0004) [0x00000200] 
	unsigned long                                      m_bEndOnlyOnTimeOut : 1;                          		// 0x00004C (0x0004) [0x00000400] 
	unsigned long                                      m_bIsConcurrent : 1;                              		// 0x00004C (0x0004) [0x00000800] 
	unsigned long                                      m_bIsOpposition : 1;                              		// 0x00004C (0x0004) [0x00001000] 
	unsigned long                                      m_bLeaveRemainingTaskItems : 1;                   		// 0x00004C (0x0004) [0x00002000] 
	unsigned long                                      m_bOpenWorldCashPoolItem : 1;                     		// 0x00004C (0x0004) [0x00004000] 
	unsigned long                                      m_bOppositionWinOnTargetDestroyedByOwners : 1;    		// 0x00004C (0x0004) [0x00008000] 
	unsigned long                                      m_bOwnersWinOnTargetDestroyedByOpponent : 1;      		// 0x00004C (0x0004) [0x00010000] 
	unsigned long                                      m_bScorePointOnWin : 1;                           		// 0x00004C (0x0004) [0x00020000] 
	unsigned long                                      m_bSpawnInInventory : 1;                          		// 0x00004C (0x0004) [0x00040000] 
	unsigned long                                      m_bWinOnCompletion : 1;                           		// 0x00004C (0x0004) [0x00080000] 
	unsigned long                                      m_bWinOnUnopposedCompletion : 1;                  		// 0x00004C (0x0004) [0x00100000] 
};
//0x00004C
//TaskOperation[0x1DF28610]
struct FTaskOperation
{
	struct FString                                     m_sCriminalBrief;                                 		// 0x000000 (0x000C)              
	struct FString                                     m_sEnforcerBrief;                                 		// 0x00000C (0x000C)              
	struct FString                                     m_sUIDescription;                                 		// 0x000018 (0x000C)              
	int                                                m_eMissionUIProfile;                              		// 0x000024 (0x0004)              
	int                                                m_eMissionUIProfileOpposition;                    		// 0x000028 (0x0004)              
	int                                                m_eOppositionTargetHUDMarker;                     		// 0x00002C (0x0004)              
	int                                                m_eOutOfMissionTargetHUDMarker;                   		// 0x000030 (0x0004)              
	int                                                m_eTaskOperation;                                 		// 0x000034 (0x0004)              
	int                                                m_eTaskTargetHUDMarker;                           		// 0x000038 (0x0004)              
	int                                                m_nObjectiveHoldPointsTarget;                     		// 0x00003C (0x0004)              
	unsigned char                                      m_eNPCWorldEvent;                                 		// 0x000040 (0x0001)              PROPERTY: etNPCWorldEvent
	unsigned char                                      m_eOppositionItemVisibility;                      		// 0x000041 (0x0001)              PROPERTY: etTaskItemVisibility
	unsigned char                                      m_eOutOfMissionItemVisibility;                    		// 0x000042 (0x0001)              PROPERTY: etTaskItemVisibility
	unsigned char                                      m_eOwnerItemVisibility;                           		// 0x000043 (0x0001)              PROPERTY: etTaskItemVisibility
	unsigned char                                      m_eTaskOperationCategory;                         		// 0x000044 (0x0001)              PROPERTY: etTaskOperationCategory
	unsigned char                                      m_eTaskTargetClass;                               		// 0x000045 (0x0001)              PROPERTY: etTaskTargetClass
	unsigned char                                      _0x000046[0x2];                                   		// 0x000046 (0x0002) MISSED OFFSET
	unsigned long                                      m_bAnySideCanInitiate : 1;                        		// 0x000048 (0x0004) [0x00000001] 
	unsigned long                                      m_bCheckDeliverableProximity : 1;                 		// 0x000048 (0x0004) [0x00000002] 
	unsigned long                                      m_bCheckObjectiveProximity : 1;                   		// 0x000048 (0x0004) [0x00000004] 
	unsigned long                                      m_bHideAllDeliverablesFromOpposition : 1;         		// 0x000048 (0x0004) [0x00000008] 
	unsigned long                                      m_bHideAllDeliverablesFromOwners : 1;             		// 0x000048 (0x0004) [0x00000010] 
	unsigned long                                      m_bOppositionCanCarryTaskItems : 1;               		// 0x000048 (0x0004) [0x00000020] 
	unsigned long                                      m_bOppositionCanInteractWithVehicles : 1;         		// 0x000048 (0x0004) [0x00000040] 
	unsigned long                                      m_bOutOfMissionCanInteract : 1;                   		// 0x000048 (0x0004) [0x00000080] 
	unsigned long                                      m_bOwnersCanCarryTaskItems : 1;                   		// 0x000048 (0x0004) [0x00000100] 
	unsigned long                                      m_bOwnersCanInteractWithVehicles : 1;             		// 0x000048 (0x0004) [0x00000200] 
	unsigned long                                      m_bShowOppositionToTaskGroup : 1;                 		// 0x000048 (0x0004) [0x00000400] 
	unsigned long                                      m_bShowTaskGroupToOpposition : 1;                 		// 0x000048 (0x0004) [0x00000800] 
	unsigned long                                      m_bUseObjectiveHoldPoints : 1;                    		// 0x000048 (0x0004) [0x00001000] 
};
//0x000010
//TaskOperationCategory[0x1DF285A8]
struct FTaskOperationCategory
{
	int                                                m_eReticuleHint;                                  		// 0x000000 (0x0004)              
	float                                              m_fMinTakeoutMultiplier;                          		// 0x000004 (0x0004)              
	unsigned char                                      m_eTaskOperationCategory;                         		// 0x000008 (0x0001)              PROPERTY: etTaskOperationCategory
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	unsigned long                                      m_bAutoInstigateOpposition : 1;                   		// 0x00000C (0x0004) [0x00000001] 
};
//0x000008
//TaskOperationArson[0x1DF28540]
struct FTaskOperationArson
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fCSADuration;                                   		// 0x000004 (0x0004)              
};
//0x000018
//TaskOperationBombing[0x1DF284D8]
struct FTaskOperationBombing
{
	int                                                m_eBombLevel;                                     		// 0x000000 (0x0004)              
	int                                                m_eTaskOperation;                                 		// 0x000004 (0x0004)              
	float                                              m_fBombDisposalGuardTime;                         		// 0x000008 (0x0004)              
	float                                              m_fCSADuration;                                   		// 0x00000C (0x0004)              
	float                                              m_fFuseTimer;                                     		// 0x000010 (0x0004)              
	unsigned long                                      m_bIsBombDefusable : 1;                           		// 0x000014 (0x0004) [0x00000001] 
	unsigned long                                      m_bIsBombRearmable : 1;                           		// 0x000014 (0x0004) [0x00000002] 
	unsigned long                                      m_bTriggerOnAllBombsDefused : 1;                  		// 0x000014 (0x0004) [0x00000004] 
};
//0x000014
//TaskOperationBuildingBreakIn[0x1DF28470]
struct FTaskOperationBuildingBreakIn
{
	struct FString                                     m_sUseActionName;                                 		// 0x000000 (0x000C)              
	int                                                m_eTaskOperation;                                 		// 0x00000C (0x0004)              
	float                                              m_fCSADuration;                                   		// 0x000010 (0x0004)              
};
//0x00000C
//TaskOperationEscort[0x1DF28408]
struct FTaskOperationEscort
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fTriggerTime;                                   		// 0x000004 (0x0004)              
	unsigned long                                      m_bVIPOpponentCanCapture : 1;                     		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      m_bWinOnTimeout : 1;                              		// 0x000008 (0x0004) [0x00000002] 
};
//0x000020
//TaskOperationEscape[0x1DF283A0]
struct FTaskOperationEscape
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fArrestedPenaltySeconds;                        		// 0x000004 (0x0004)              
	float                                              m_fArrestOpponentPenaltySeconds;                  		// 0x000008 (0x0004)              
	float                                              m_fEscapeBarLimit;                                		// 0x00000C (0x0004)              
	float                                              m_fKilledPenaltySeconds;                          		// 0x000010 (0x0004)              
	float                                              m_fKillOpponentPenaltySeconds;                    		// 0x000014 (0x0004)              
	float                                              m_fTakeDamagePenaltySeconds;                      		// 0x000018 (0x0004)              
	float                                              m_fWeaponFirePenaltySeconds;                      		// 0x00001C (0x0004)              
};
//0x000008
//TaskOperationMovingTarget[0x1DF28338]
struct FTaskOperationMovingTarget
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	int                                                m_nPadding;                                       		// 0x000004 (0x0004)              
};
//0x000008
//TaskOperationArmedGuard[0x1DF282D0]
struct FTaskOperationArmedGuard
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fUnused;                                        		// 0x000004 (0x0004)              
};
//0x00000C
//TaskOperationGraffiti[0x1DF28268]
struct FTaskOperationGraffiti
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	int                                                m_nSprayDuration;                                 		// 0x000004 (0x0004)              
	unsigned long                                      m_bIsResprayable : 1;                             		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      m_bStartsNeutral : 1;                             		// 0x000008 (0x0004) [0x00000002] 
};
//0x00000C
//TaskOperationItemDelivery[0x1DF28200]
struct FTaskOperationItemDelivery
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fTriggerTime;                                   		// 0x000004 (0x0004)              
	unsigned long                                      m_bDeliverToAllTargets : 1;                       		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      m_bDeliverVehicle : 1;                            		// 0x000008 (0x0004) [0x00000002] 
	unsigned long                                      m_bDeliverVehicleCargo : 1;                       		// 0x000008 (0x0004) [0x00000004] 
	unsigned long                                      m_bRemoveDeliverables : 1;                        		// 0x000008 (0x0004) [0x00000008] 
};
//0x000009
//TaskOperationNPC[0x1DF28198]
struct FTaskOperationNPC
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fCSADuration;                                   		// 0x000004 (0x0004)              
	unsigned char                                      m_eCSAState;                                      		// 0x000008 (0x0001)              PROPERTY: etCSA_IATState
};
//0x00000C
//TaskOperationPickup[0x1DF28130]
struct FTaskOperationPickup
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	int                                                m_nPadding;                                       		// 0x000004 (0x0004)              
	unsigned long                                      m_bIsVehicleDeliverable : 1;                      		// 0x000008 (0x0004) [0x00000001] 
};
//0x000008
//TaskOperationRamRaid[0x1DF280C8]
struct FTaskOperationRamRaid
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	int                                                m_nHealthPool;                                    		// 0x000004 (0x0004)              
};
//0x000008
//TaskOperationSurvival[0x1DF28060]
struct FTaskOperationSurvival
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	int                                                m_nPadding;                                       		// 0x000004 (0x0004)              
};
//0x000008
//TaskOperationBust[0x1DF27FF8]
struct FTaskOperationBust
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	int                                                m_nHealthPool;                                    		// 0x000004 (0x0004)              
};
//0x00000C
//TaskOperationRendezvous[0x1DF27F90]
struct FTaskOperationRendezvous
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fTriggerTime;                                   		// 0x000004 (0x0004)              
	unsigned long                                      m_bAllSideMembers : 1;                            		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      m_bAllSimultaneously : 1;                         		// 0x000008 (0x0004) [0x00000002] 
	unsigned long                                      m_bIsCoopCheckpoint : 1;                          		// 0x000008 (0x0004) [0x00000004] 
	unsigned long                                      m_bVehicleRequired : 1;                           		// 0x000008 (0x0004) [0x00000008] 
};
//0x000008
//TaskOperationVandalism[0x1DF27F28]
struct FTaskOperationVandalism
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	int                                                m_nHealthPool;                                    		// 0x000004 (0x0004)              
};
//0x00000C
//TaskOperationVehicleLooting[0x1DF27EC0]
struct FTaskOperationVehicleLooting
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fCSADuration;                                   		// 0x000004 (0x0004)              
	unsigned long                                      m_bIsVehicleDeliverable : 1;                      		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      m_bVehicleLocked : 1;                             		// 0x000008 (0x0004) [0x00000002] 
};
//0x000010
//TaskOperationVehicleTheft[0x1DF27E58]
struct FTaskOperationVehicleTheft
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fCSADuration;                                   		// 0x000004 (0x0004)              
	int                                                m_nPointlessExtraPadding;                         		// 0x000008 (0x0004)              
	unsigned long                                      m_bIsVehicleDeliverable : 1;                      		// 0x00000C (0x0004) [0x00000001] 
	unsigned long                                      m_bVehicleLocked : 1;                             		// 0x00000C (0x0004) [0x00000002] 
};
//0x00000C
//TaskOperationVehicleCargo[0x1DF27DF0]
struct FTaskOperationVehicleCargo
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fCSADuration;                                   		// 0x000004 (0x0004)              
	unsigned long                                      m_bIsVehicleDeliverable : 1;                      		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      m_bVehicleLocked : 1;                             		// 0x000008 (0x0004) [0x00000002] 
};
//0x000008
//TaskOperationDeathmatch[0x1DF27D88]
struct FTaskOperationDeathmatch
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	int                                                m_nPadding;                                       		// 0x000004 (0x0004)              
};
//0x00000C
//TaskOperationTerritoryControl[0x1DF27D20]
struct FTaskOperationTerritoryControl
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fCaptureTime;                                   		// 0x000004 (0x0004)              
	float                                              m_fResetTime;                                     		// 0x000008 (0x0004)              
};
//0x000008
//TaskOperationCSI[0x1DF27CB8]
struct FTaskOperationCSI
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fCSADuration;                                   		// 0x000004 (0x0004)              
};
//0x000008
//TaskOperationSabotage[0x1DF27C50]
struct FTaskOperationSabotage
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fCSADuration;                                   		// 0x000004 (0x0004)              
};
//0x000008
//TaskOperationHacking[0x1DF27BE8]
struct FTaskOperationHacking
{
	int                                                m_eTaskOperation;                                 		// 0x000000 (0x0004)              
	float                                              m_fCSADuration;                                   		// 0x000004 (0x0004)              
};
//0x000040
//MissionUITrackedStateProfile[0x1DF27B80]
struct FMissionUITrackedStateProfile
{
	struct FString                                     m_sArmedIcon;                                     		// 0x000000 (0x000C)              
	struct FString                                     m_sNeutralIcon;                                   		// 0x00000C (0x000C)              
	struct FString                                     m_sOppositionClaimed;                             		// 0x000018 (0x000C)              
	struct FString                                     m_sOwnerClaimed;                                  		// 0x000024 (0x000C)              
	struct FString                                     m_sUnarmedIcon;                                   		// 0x000030 (0x000C)              
	int                                                m_eMissionUITrackedStateProfile;                  		// 0x00003C (0x0004)              
};
//0x000008
//MissionUISocket[0x1DF27B18]
struct FMissionUISocket
{
	int                                                m_eMissionUISocket;                               		// 0x000000 (0x0004)              
	int                                                m_nRow;                                           		// 0x000004 (0x0004)              
};
//0x00011C
//TaskOperationUIProfile[0x1DF27AB0]
struct FTaskOperationUIProfile
{
	struct FString                                     m_sCriminalBrief;                                 		// 0x000000 (0x000C)              
	struct FString                                     m_sEnforcerBrief;                                 		// 0x00000C (0x000C)              
	struct FString                                     m_sShortBrief;                                    		// 0x000018 (0x000C)              
	struct FString                                     m_sTrackedValueDescription[0x4];                  		// 0x000024 (0x0030)              
	struct FString                                     m_sTrackedValueImage[0x4];                        		// 0x000054 (0x0030)              
	int                                                m_eTaskOperationUIProfile;                        		// 0x000084 (0x0004)              
	int                                                m_eTrackedStateProfile[0x4];                      		// 0x000088 (0x0010)              
	int                                                m_eTrackedValueBarFgDisabled[0x4];                		// 0x000098 (0x0010)              
	int                                                m_eTrackedValueBg[0x4];                           		// 0x0000A8 (0x0010)              
	int                                                m_eTrackedValueFg[0x4];                           		// 0x0000B8 (0x0010)              
	int                                                m_eTrackedValueSocket[0x4];                       		// 0x0000C8 (0x0010)              
	int                                                m_nTrackedValueStageOffset[0x4];                  		// 0x0000D8 (0x0010)              
	unsigned char                                      m_eTrackedValue[0x4];                             		// 0x0000E8 (0x0004)              PROPERTY: etMissionUITrackedValue
	unsigned char                                      m_eTrackedValueDisplay[0x4];                      		// 0x0000EC (0x0004)              PROPERTY: etMissionUITrackedValueDisplay
	unsigned char                                      m_bFlashWhenChanged[0x4];                         		// 0x0000F0 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideAtMax[0x4];                                		// 0x0000F4 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideNameWhenDisabled[0x4];                     		// 0x0000F8 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenOne[0x4];                              		// 0x0000FC (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenOppositionVIPTakeoutsDisabled[0x4];    		// 0x000100 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenOwnerVIPTakeoutsDisabled[0x4];         		// 0x000104 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenPointsDisabled[0x4];                   		// 0x000108 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenTakeoutsDisabled[0x4];                 		// 0x00010C (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenUnopposed[0x4];                        		// 0x000110 (0x0004)              PROPERTY: 
	unsigned char                                      m_bTrackedValueInOverview[0x4];                   		// 0x000114 (0x0004)              PROPERTY: 
	unsigned char                                      m_bTrackedValueOnHUD[0x4];                        		// 0x000118 (0x0004)              PROPERTY: 
};
//0x0000D8
//MissionTemplateUIProfile[0x1DF27A48]
struct FMissionTemplateUIProfile
{
	struct FString                                     m_sTrackedValueDescription[0x4];                  		// 0x000000 (0x0030)              
	struct FString                                     m_sTrackedValueImage[0x4];                        		// 0x000030 (0x0030)              
	int                                                m_eMissionTemplateUIProfile;                      		// 0x000060 (0x0004)              
	int                                                m_eTrackedValueBarFgDisabled[0x4];                		// 0x000064 (0x0010)              
	int                                                m_eTrackedValueBg[0x4];                           		// 0x000074 (0x0010)              
	int                                                m_eTrackedValueFg[0x4];                           		// 0x000084 (0x0010)              
	int                                                m_eTrackedValueSocket[0x4];                       		// 0x000094 (0x0010)              
	unsigned char                                      m_eTrackedValue[0x4];                             		// 0x0000A4 (0x0004)              PROPERTY: etMissionUITrackedValue
	unsigned char                                      m_eTrackedValueDisplay[0x4];                      		// 0x0000A8 (0x0004)              PROPERTY: etMissionUITrackedValueDisplay
	unsigned char                                      m_bFlashWhenChanged[0x4];                         		// 0x0000AC (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideAtMax[0x4];                                		// 0x0000B0 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenOne[0x4];                              		// 0x0000B4 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenOppositionVIPTakeoutsDisabled[0x4];    		// 0x0000B8 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenOwnerVIPTakeoutsDisabled[0x4];         		// 0x0000BC (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenPointsDisabled[0x4];                   		// 0x0000C0 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenTakeoutsDisabled[0x4];                 		// 0x0000C4 (0x0004)              PROPERTY: 
	unsigned char                                      m_bHideWhenUnopposed[0x4];                        		// 0x0000C8 (0x0004)              PROPERTY: 
	unsigned char                                      m_bTrackedValueInLocalOverview[0x4];              		// 0x0000CC (0x0004)              PROPERTY: 
	unsigned char                                      m_bTrackedValueInRemoteOverview[0x4];             		// 0x0000D0 (0x0004)              PROPERTY: 
	unsigned char                                      m_bTrackedValueOnHUD[0x4];                        		// 0x0000D4 (0x0004)              PROPERTY: 
};
//0x00003C
//TaskTargetAllocation[0x1DF279E0]
struct FTaskTargetAllocation
{
	int                                                m_eLocationConstraint;                            		// 0x000000 (0x0004)              
	int                                                m_eMissionTemplate;                               		// 0x000004 (0x0004)              
	int                                                m_eTaskTargetAllocation;                          		// 0x000008 (0x0004)              
	int                                                m_eTaskTargetType;                                		// 0x00000C (0x0004)              
	int                                                m_eTheme[0x4];                                    		// 0x000010 (0x0010)              
	int                                                m_eVehicleCategory;                               		// 0x000020 (0x0004)              
	float                                              m_fLocationDistanceMax;                           		// 0x000024 (0x0004)              
	float                                              m_fLocationDistanceMin;                           		// 0x000028 (0x0004)              
	int                                                m_nMaxTargetsPerBlock;                            		// 0x00002C (0x0004)              
	int                                                m_nTargetCount;                                   		// 0x000030 (0x0004)              
	unsigned char                                      m_eTaskTargetSpecificationMethod;                 		// 0x000034 (0x0001)              PROPERTY: etTaskTargetSpecificationMethod
	unsigned char                                      _0x000035[0x3];                                   		// 0x000035 (0x0003) MISSED OFFSET
	unsigned long                                      m_bAllowDifferentBlock : 1;                       		// 0x000038 (0x0004) [0x00000001] 
	unsigned long                                      m_bAllowSameBlock : 1;                            		// 0x000038 (0x0004) [0x00000002] 
	unsigned long                                      m_bUniqueBlock : 1;                               		// 0x000038 (0x0004) [0x00000004] 
};
//0x000008
//TaskTargetClass[0x1DF27978]
struct FTaskTargetClass
{
	unsigned char                                      m_eTaskTargetClass;                               		// 0x000000 (0x0001)              PROPERTY: etTaskTargetClass
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	unsigned long                                      m_bCanBeUsedInDirectedMissions : 1;               		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      m_bLivingCity : 1;                                		// 0x000004 (0x0004) [0x00000002] 
};
//0x000038
//TaskTargetType[0x1DF27910]
struct FTaskTargetType
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayName;                                   		// 0x00000C (0x000C)              
	int                                                m_eGameplayObject;                                		// 0x000018 (0x0004)              
	int                                                m_eHUDMarkerOffsetOverride;                       		// 0x00001C (0x0004)              
	int                                                m_eOpenWorldTargetActivity;                       		// 0x000020 (0x0004)              
	int                                                m_eOWAItemSpawnRule;                              		// 0x000024 (0x0004)              
	int                                                m_eTaskTargetType;                                		// 0x000028 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x00002C (0x0004)              
	unsigned char                                      m_eTaskTargetClass;                               		// 0x000030 (0x0001)              PROPERTY: etTaskTargetClass
	unsigned char                                      m_eTimeOfDayAvailability;                         		// 0x000031 (0x0001)              PROPERTY: etTimeOfDayAvailability
	unsigned char                                      _0x000032[0x2];                                   		// 0x000032 (0x0002) MISSED OFFSET
	unsigned long                                      m_bAllowSimultaneousAllocations : 1;              		// 0x000034 (0x0004) [0x00000001] 
	unsigned long                                      m_bOpenWorldOnly : 1;                             		// 0x000034 (0x0004) [0x00000002] 
};
//0x00000C
//TaskTargetVehicle[0x1DF278A8]
struct FTaskTargetVehicle
{
	int                                                m_eTaskTargetType;                                		// 0x000000 (0x0004)              
	unsigned char                                      m_eVehicleSetupType;                              		// 0x000004 (0x0001)              PROPERTY: etVehicleSetupType
	unsigned char                                      _0x000005[0x3];                                   		// 0x000005 (0x0003) MISSED OFFSET
	int                                                m_nDummy;                                         		// 0x000008 (0x0004)              
};
//0x000008
//TaskTargetBuildingFeature[0x1DF27840]
struct FTaskTargetBuildingFeature
{
	int                                                m_eTaskTargetType;                                		// 0x000000 (0x0004)              
	unsigned long                                      m_bRamRaid : 1;                                   		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      m_bArson : 1;                                     		// 0x000004 (0x0004) [0x00000002] 
	unsigned long                                      m_bBurglary : 1;                                  		// 0x000004 (0x0004) [0x00000004] 
};
//0x000010
//TaskTargetCheckpoint[0x1DF277D8]
struct FTaskTargetCheckpoint
{
	int                                                m_eTaskTargetType;                                		// 0x000000 (0x0004)              
	int                                                m_nMaxPlayerSpaces;                               		// 0x000004 (0x0004)              
	int                                                m_nMaxVehicleSpaces;                              		// 0x000008 (0x0004)              
	unsigned long                                      m_bAllowDropOffs : 1;                             		// 0x00000C (0x0004) [0x00000001] 
};
//0x000008
//TaskTargetGraffiti[0x1DF27770]
struct FTaskTargetGraffiti
{
	int                                                m_eTaskTargetType;                                		// 0x000000 (0x0004)              
	int                                                m_nDummy;                                         		// 0x000004 (0x0004)              
};
//0x00000C
//TaskTargetNPC[0x1DF27708]
struct FTaskTargetNPC
{
	int                                                m_eNPCType;                                       		// 0x000000 (0x0004)              
	int                                                m_eTaskTargetType;                                		// 0x000004 (0x0004)              
	int                                                m_nTempLCType;                                    		// 0x000008 (0x0004)              
};
//0x00001C
//TaskTargetProp[0x1DF276A0]
struct FTaskTargetProp
{
	struct FString                                     m_sPropAssetName;                                 		// 0x000000 (0x000C)              
	int                                                m_ePropCategory;                                  		// 0x00000C (0x0004)              
	int                                                m_eTaskTargetType;                                		// 0x000010 (0x0004)              
	float                                              m_fArsonDamageDelaySeconds;                       		// 0x000014 (0x0004)              
	unsigned long                                      m_bArson : 1;                                     		// 0x000018 (0x0004) [0x00000001] 
	unsigned long                                      m_bBombDisposal : 1;                              		// 0x000018 (0x0004) [0x00000002] 
	unsigned long                                      m_bBombing : 1;                                   		// 0x000018 (0x0004) [0x00000004] 
	unsigned long                                      m_bBurglary : 1;                                  		// 0x000018 (0x0004) [0x00000008] 
	unsigned long                                      m_bBust : 1;                                      		// 0x000018 (0x0004) [0x00000010] 
	unsigned long                                      m_bCSI : 1;                                       		// 0x000018 (0x0004) [0x00000020] 
	unsigned long                                      m_bForcedEntry : 1;                               		// 0x000018 (0x0004) [0x00000040] 
	unsigned long                                      m_bHacking : 1;                                   		// 0x000018 (0x0004) [0x00000080] 
	unsigned long                                      m_bIsBuildingFeature : 1;                         		// 0x000018 (0x0004) [0x00000100] 
	unsigned long                                      m_bRamRaid : 1;                                   		// 0x000018 (0x0004) [0x00000200] 
	unsigned long                                      m_bSabotage : 1;                                  		// 0x000018 (0x0004) [0x00000400] 
	unsigned long                                      m_bVandalism : 1;                                 		// 0x000018 (0x0004) [0x00000800] 
};
//0x00000C
//BombLevel[0x1DF27638]
struct FBombLevel
{
	int                                                m_eBombLevel;                                     		// 0x000000 (0x0004)              
	int                                                m_eExplosionType;                                 		// 0x000004 (0x0004)              
	int                                                m_nLevel;                                         		// 0x000008 (0x0004)              
};
//0x000008
//Probability[0x1DF275D0]
struct FProbability
{
	int                                                m_eProbability;                                   		// 0x000000 (0x0004)              
	float                                              m_fCoefficient;                                   		// 0x000004 (0x0004)              
};
//0x00000C
//OpenWorldTargetActivity[0x1DF27568]
struct FOpenWorldTargetActivity
{
	int                                                m_eOpenWorldOperationCriminal;                    		// 0x000000 (0x0004)              
	int                                                m_eOpenWorldOperationEnforcer;                    		// 0x000004 (0x0004)              
	int                                                m_eOpenWorldTargetActivity;                       		// 0x000008 (0x0004)              
};
//0x00002C
//OpenWorldOperation[0x1DF27500]
struct FOpenWorldOperation
{
	struct FString                                     m_sUIDescription;                                 		// 0x000000 (0x000C)              
	struct FString                                     m_sUITitle;                                       		// 0x00000C (0x000C)              
	int                                                m_eOpenWorldOperation;                            		// 0x000018 (0x0004)              
	int                                                m_eUIIcon;                                        		// 0x00001C (0x0004)              
	int                                                m_nCSADuration;                                   		// 0x000020 (0x0004)              
	unsigned char                                      m_eNPCWorldEvent;                                 		// 0x000024 (0x0001)              PROPERTY: etNPCWorldEvent
	unsigned char                                      m_eOpenWorldCSA;                                  		// 0x000025 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eTaskOperationCategory;                         		// 0x000026 (0x0001)              PROPERTY: etTaskOperationCategory
	unsigned char                                      _0x000027[0x1];                                   		// 0x000027 (0x0001) MISSED OFFSET
	unsigned long                                      m_bAllowedOnMission : 1;                          		// 0x000028 (0x0004) [0x00000001] 
	unsigned long                                      m_bUIReticuleHighlight : 1;                       		// 0x000028 (0x0004) [0x00000002] 
};
//0x00001A
//OpenWorldDropOff[0x1DF27498]
struct FOpenWorldDropOff
{
	int                                                m_eHUDMarkerType;                                 		// 0x000000 (0x0004)              
	int                                                m_eOpenWorldDropOff;                              		// 0x000004 (0x0004)              
	float                                              m_fCycleDurationSeconds;                          		// 0x000008 (0x0004)              
	float                                              m_fPointReplenishmentPerCycle;                    		// 0x00000C (0x0004)              
	int                                                m_nDeliveryPoints;                                		// 0x000010 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x000014 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eFactionHUDMarkerFilter;                        		// 0x000015 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eTaskItemSize[0x4];                             		// 0x000016 (0x0004)              PROPERTY: etTaskItemSize
};
//0x000038
//OWAItemSpawnRule[0x1DF27430]
struct FOWAItemSpawnRule
{
	int                                                m_eItemMetaTag[0x5];                              		// 0x000000 (0x0014)              
	int                                                m_eOWAItemSpawnRule;                              		// 0x000014 (0x0004)              
	int                                                m_nLargeItemWeighting;                            		// 0x000018 (0x0004)              
	int                                                m_nLowerMidRange;                                 		// 0x00001C (0x0004)              
	int                                                m_nLowerRange;                                    		// 0x000020 (0x0004)              
	int                                                m_nMediumItemWeighting;                           		// 0x000024 (0x0004)              
	int                                                m_nPercentageChanceZeroItems;                     		// 0x000028 (0x0004)              
	int                                                m_nSmallItemWeighting;                            		// 0x00002C (0x0004)              
	int                                                m_nUpperMidRange;                                 		// 0x000030 (0x0004)              
	int                                                m_nUpperRange;                                    		// 0x000034 (0x0004)              
};
//0x00000C
//OpenWorldReward[0x1DF273C8]
struct FOpenWorldReward
{
	int                                                m_eOpenWorldReward;                               		// 0x000000 (0x0004)              
	int                                                m_nBaseCash;                                      		// 0x000004 (0x0004)              
	int                                                m_nBaseStanding;                                  		// 0x000008 (0x0004)              
};
//0x000025
//MissionResultReason[0x1DF27360]
struct FMissionResultReason
{
	struct FString                                     m_sDrawMessage;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sLoseMessage;                                   		// 0x00000C (0x000C)              
	struct FString                                     m_sWinMessage;                                    		// 0x000018 (0x000C)              
	unsigned char                                      m_eMissionResultReason;                           		// 0x000024 (0x0001)              PROPERTY: etMissionResultReason
};
//0x000008
//MissionTakeoutLookUp[0x1DF272F8]
struct FMissionTakeoutLookUp
{
	int                                                m_nMissionTakeoutLookUp;                          		// 0x000000 (0x0004)              
	int                                                m_nTakeoutLimit;                                  		// 0x000004 (0x0004)              
};
//0x000008
//CoopCheckpointMultipliers[0x1DF27290]
struct FCoopCheckpointMultipliers
{
	float                                              m_fMultiplier;                                    		// 0x000000 (0x0004)              
	int                                                m_nCoopCheckpointMultipliers;                     		// 0x000004 (0x0004)              
};
//0x000009
//TaskVIPState[0x1DF27228]
struct FTaskVIPState
{
	int                                                m_nKills;                                         		// 0x000000 (0x0004)              
	class AcAPBPlayerController*                       m_pCurrentVIP;                                    		// 0x000004 (0x0004)              
	unsigned char                                      m_eVIPAssignmentMethod;                           		// 0x000008 (0x0001)              PROPERTY: etVIPAssignmentMethod
};
//0x000008
//PlayerTimerPair[0x1DF271C0]
struct FPlayerTimerPair
{
	int                                                m_nPlayerUID;                                     		// 0x000000 (0x0004)              
	int                                                m_nTimer;                                         		// 0x000004 (0x0004)              
};
//0x000008
//tPlayerTriggerInfo[0x1DF27158]
struct FtPlayerTriggerInfo
{
	class AcAPBPlayerController*                       pPlayer;                                          		// 0x000000 (0x0004)              
	int                                                nNumberOfObjectivesTriggered;                     		// 0x000004 (0x0004)              
};
//0x000020
//PlayerLeftData[0x1DF270F0]
struct FPlayerLeftData
{
	double                                             fSkillRatingMean;                                 		// 0x000000 (0x0008)              
	double                                             fSkillRatingStdDev;                               		// 0x000008 (0x0008)              
	double                                             fSkillRatingConsRating;                           		// 0x000010 (0x0008)              
	float                                              fTimeInMission;                                   		// 0x000018 (0x0004)              
	int                                                nTotalScore;                                      		// 0x00001C (0x0004)              
};
//0x00000C
//TaskDescriptionObjectInstanceUseCounter[0x1DF27088]
struct FTaskDescriptionObjectInstanceUseCounter
{
	int                                                eGameplayEvent;                                   		// 0x000000 (0x0004)              
	class AActor*                                      pObj;                                             		// 0x000004 (0x0004)              
	int                                                nCounter;                                         		// 0x000008 (0x0004)              
};
//0x000010
//MinigameLocationData[0x1DF27020]
struct FMinigameLocationData
{
	DWORD                                              pMinigame;                                        		// 0x000000 (0x0004)              
	DWORD                                              pLocation;                                        		// 0x000004 (0x0004)              
	class AcDistrictBlock*                             pBlock;                                           		// 0x000008 (0x0004)              
	class AActor*                                      pActor;                                           		// 0x00000C (0x0004)              
};
//0x00000C
//MinigameCachedPlayer[0x1DF26FB8]
struct FMinigameCachedPlayer
{
	DWORD                                              pCachedScorerData;                                		// 0x000000 (0x0004)              
	double                                             fCacheTime;                                       		// 0x000004 (0x0008)              
};
//0x000008
//BlockFDM_PlayerData[0x1DF26F50]
struct FBlockFDM_PlayerData
{
	unsigned long                                      bWithinArea : 1;                                  		// 0x000000 (0x0004) [0x00000001] 
	float                                              fAreaTimeoutRemaining;                            		// 0x000004 (0x0004)              
};
//0x000010
//BlockFDM_ServerTeamData[0x1DF26EE8]
struct FBlockFDM_ServerTeamData
{
	DWORD                                              m_pTeam;                                          		// 0x000000 (0x0004)              
	float                                              m_fLowTeamTime;                                   		// 0x000004 (0x0004)              
	float                                              m_fPartialLive;                                   		// 0x000008 (0x0004)              
	unsigned long                                      m_bHasHadFullTeam : 1;                            		// 0x00000C (0x0004) [0x00000001] 
};
//0x000008
//BlockFDM_ReplicatedTeamData[0x1DF26E80]
struct FBlockFDM_ReplicatedTeamData
{
	int                                                m_nLivesLeft;                                     		// 0x000000 (0x0004)              
	unsigned long                                      m_bTeamOutOfArea : 1;                             		// 0x000004 (0x0004) [0x00000001] 
};
//0x000010
//CachedGunGamePlayerData[0x1DF26E18]
struct FCachedGunGamePlayerData
{
	int                                                nCurrentLevel;                                    		// 0x000000 (0x0004)              
	int                                                nScoreSinceLastLevel;                             		// 0x000004 (0x0004)              
	int                                                nKillsSinceLastLevel;                             		// 0x000008 (0x0004)              
	unsigned long                                      bHitScoreLimit : 1;                               		// 0x00000C (0x0004) [0x00000001] 
	unsigned long                                      bWinner : 1;                                      		// 0x00000C (0x0004) [0x00000002] 
	unsigned long                                      bHadLevelUpThisFrame : 1;                         		// 0x00000C (0x0004) [0x00000004] 
};
//0x000010
//MinigameWeaponDropLocationData[0x1DF26DB0]
struct FMinigameWeaponDropLocationData
{
	DWORD                                              m_pSettings;                                      		// 0x000000 (0x0004)              
	int                                                m_nActiveSpawns;                                  		// 0x000004 (0x0004)              
	int                                                m_nMaxSpawnCount;                                 		// 0x000008 (0x0004)              
	unsigned long                                      m_bNotificationPosted : 1;                        		// 0x00000C (0x0004) [0x00000001] 
};
//0x00000C
//MinigameWeaponDropLocation[0x1DF26D48]
struct FMinigameWeaponDropLocation
{
	TArray<struct FMinigameWeaponDropLocationData>     m_Options;                                        		// 0x000000 (0x000C)              
};
//0x00000C
//MinigameWeaponDropActiveSpawner[0x1DF26CE0]
struct FMinigameWeaponDropActiveSpawner
{
	class AcWeaponPickup*                              m_pPickup;                                        		// 0x000000 (0x0004)              
	DWORD                                              m_pSettings;                                      		// 0x000004 (0x0004)              
	int                                                m_nHUDMarkerID;                                   		// 0x000008 (0x0004)              
};
//0x000004
//MinigameWeaponDropTeamData[0x1DF26C78]
struct FMinigameWeaponDropTeamData
{
	DWORD                                              m_pTeam;                                          		// 0x000000 (0x0004)              
};
//0x000010
//MugCarrierData[0x1DF26C10]
struct FMugCarrierData
{
	int                                                m_nOutOfMissionHUDMarker;                         		// 0x000000 (0x0004)              
	int                                                m_nInMissionMarkerVisual;                         		// 0x000004 (0x0004)              
	int                                                m_nTypeIndex;                                     		// 0x000008 (0x0004)              
	unsigned long                                      m_bShownToFaction : 1;                            		// 0x00000C (0x0004) [0x00000001] 
};
//0x00000C
//MugNPCData[0x1DF26BA8]
struct FMugNPCData
{
	int                                                m_nOutOfMissionHUDMarker;                         		// 0x000000 (0x0004)              
	int                                                m_nTypeIndex;                                     		// 0x000004 (0x0004)              
	float                                              m_fImmuneTimeLeft;                                		// 0x000008 (0x0004)              
};
//0x000008
//MugNPCRequestData[0x1DF26B40]
struct FMugNPCRequestData
{
	int                                                m_nRequestCount;                                  		// 0x000000 (0x0004)              
	int                                                m_nTypeIndex;                                     		// 0x000004 (0x0004)              
};
//0x000008
//MugPlayerCacheData[0x1DF26AD8]
struct FMugPlayerCacheData
{
	int                                                m_nDeliveredItems;                                		// 0x000000 (0x0004)              
	int                                                m_nDeliveriesMade;                                		// 0x000004 (0x0004)              
};
//0x000034
//tRepairOperation[0x1DF26A70]
struct FtRepairOperation
{
	class UiRepairableVehicle*                         m_pVehicle;                                       		// 0x000000 (0x0004)              
	class AcAPBPlayerController*                       m_pPayingPlayer;                                  		// 0x000008 (0x0004)              
	class UiVehicleRepairer*                           m_pRepairPoint;                                   		// 0x00000C (0x0004)              
	unsigned char                                      _0x000010[0x4];                                   		// 0x000010 (0x0004) ALIGNEMENT
	double                                             m_fRepairStartTime;                               		// 0x000014 (0x0008)              
	double                                             m_fLastUpdateTime;                                		// 0x00001C (0x0008)              
	double                                             m_fNextUpdateTime;                                		// 0x000024 (0x0008)              
	float                                              m_fFractionalRepair;                              		// 0x00002C (0x0004)              
	float                                              m_fDamageRepairPerSecond;                         		// 0x000030 (0x0004)              
};
//0x000044
//DistrictBlock[0x1DF26A08]
struct FDistrictBlock
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayName;                                   		// 0x00000C (0x000C)              
	int                                                m_eDistrict;                                      		// 0x000018 (0x0004)              
	int                                                m_eDistrictBlock;                                 		// 0x00001C (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000020 (0x0004)              
	int                                                m_Themes[0x8];                                    		// 0x000024 (0x0020)              
};
//0x000008
//TaskTargetPoolEntry[0x1DF269A0]
struct FTaskTargetPoolEntry
{
	class AActor*                                      m_Actor;                                          		// 0x000000 (0x0004)              
	unsigned long                                      m_bReserved : 1;                                  		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      m_bPreferred : 1;                                 		// 0x000004 (0x0004) [0x00000002] 
};
//0x000014
//TaskTargetPool[0x1DF26938]
struct FTaskTargetPool
{
	TArray<struct FTaskTargetPoolEntry>                m_Storage;                                        		// 0x000000 (0x000C)              
	int                                                m_nFreeCount;                                     		// 0x00000C (0x0004)              
	int                                                m_nPreferredCount;                                		// 0x000010 (0x0004)              
};
//0x00000C
//AsyncObjectData[0x1DF268D0]
struct FAsyncObjectData
{
	struct FName                                       ObjectName;                                       		// 0x000000 (0x0008)              
	DWORD                                              ppOutputObject;                                   		// 0x000008 (0x0004)              
};
//0x00004C
//CollisionDebugInfo[0x1DF26868]
struct FCollisionDebugInfo
{
	int                                                m_nIdentifier;                                    		// 0x000000 (0x0004)              
	FVector3                                           m_vNormal;                                        		// 0x000004 (0x000C)              
	float                                              m_fPenetration;                                   		// 0x000010 (0x0004)              
	FVector3                                           m_vPosition;                                      		// 0x000014 (0x000C)              
	FVector3                                           m_vVelocityOur;                                   		// 0x000020 (0x000C)              
	FVector3                                           m_vVelocityOther;                                 		// 0x00002C (0x000C)              
	int                                                m_nMaterialOur;                                   		// 0x000038 (0x0004)              
	int                                                m_nMaterialOther;                                 		// 0x00003C (0x0004)              
	double                                             m_fLastTimeUsed;                                  		// 0x000040 (0x0008)              
	float                                              m_fPriority;                                      		// 0x000048 (0x0004)              
};
//0x000004
//VehicleAudioPart[0x1DF26800]
struct FVehicleAudioPart
{
	int                                                m_eVehicleAudioPart;                              		// 0x000000 (0x0004)              
};
//0x00001C
//AudioEngine[0x1DF26798]
struct FAudioEngine
{
	struct FString                                     m_sAudioEventName;                                		// 0x000000 (0x000C)              
	struct FString                                     m_sSimulationDataSet;                             		// 0x00000C (0x000C)              
	int                                                m_eVehicleAudioPart;                              		// 0x000018 (0x0004)              
};
//0x000010
//AudioExhaust[0x1DF26730]
struct FAudioExhaust
{
	struct FString                                     m_sAudioEventName;                                		// 0x000000 (0x000C)              
	int                                                m_eVehicleAudioPart;                              		// 0x00000C (0x0004)              
};
//0x000010
//AudioExhaustPops[0x1DF266C8]
struct FAudioExhaustPops
{
	struct FString                                     m_sAudioEventName;                                		// 0x000000 (0x000C)              
	int                                                m_eVehicleAudioPart;                              		// 0x00000C (0x0004)              
};
//0x000014
//AudioTransmission[0x1DF26660]
struct FAudioTransmission
{
	struct FString                                     m_sAudioEventName;                                		// 0x000000 (0x000C)              
	int                                                m_eVehicleAudioPart;                              		// 0x00000C (0x0004)              
	float                                              m_fPitchModifier;                                 		// 0x000010 (0x0004)              
};
//0x000034
//AudioTurbo[0x1DF265F8]
struct FAudioTurbo
{
	struct FString                                     m_sMainAudioEventName;                            		// 0x000000 (0x000C)              
	struct FString                                     m_sSecondAudioEventName;                          		// 0x00000C (0x000C)              
	int                                                m_eVehicleAudioPart;                              		// 0x000018 (0x0004)              
	float                                              m_fMainPitchModifier;                             		// 0x00001C (0x0004)              
	float                                              m_fMainVolumeFullRPM;                             		// 0x000020 (0x0004)              
	float                                              m_fMainVolumeStartRPM;                            		// 0x000024 (0x0004)              
	float                                              m_fSecondPitchModifier;                           		// 0x000028 (0x0004)              
	float                                              m_fSecondVolumeFullRPM;                           		// 0x00002C (0x0004)              
	float                                              m_fSecondVolumeStartRPM;                          		// 0x000030 (0x0004)              
};
//0x000010
//AudioDumpValve[0x1DF26590]
struct FAudioDumpValve
{
	struct FString                                     m_sAudioEventName;                                		// 0x000000 (0x000C)              
	int                                                m_eVehicleAudioPart;                              		// 0x00000C (0x0004)              
};
//0x000010
//AudioGearChange[0x1DF26528]
struct FAudioGearChange
{
	struct FString                                     m_sAudioEventName;                                		// 0x000000 (0x000C)              
	int                                                m_eVehicleAudioPart;                              		// 0x00000C (0x0004)              
};
//0x000014
//AudioHorn[0x1DF264C0]
struct FAudioHorn
{
	struct FString                                     m_sAudioType;                                     		// 0x000000 (0x000C)              
	int                                                m_eVehicleAudioPart;                              		// 0x00000C (0x0004)              
	float                                              m_fPitchModifier;                                 		// 0x000010 (0x0004)              
};
//0x000010
//AudioSiren[0x1DF26458]
struct FAudioSiren
{
	struct FString                                     m_sAudioType;                                     		// 0x000000 (0x000C)              
	int                                                m_eVehicleAudioPart;                              		// 0x00000C (0x0004)              
};
//0x000014
//AudioAmp[0x1DF263F0]
struct FAudioAmp
{
	struct FString                                     m_sAudioSwitchName;                               		// 0x000000 (0x000C)              
	int                                                m_eVehicleAudioPart;                              		// 0x00000C (0x0004)              
	float                                              m_fVolume;                                        		// 0x000010 (0x0004)              
};
//0x00000C
//AudioSpeaker[0x1DF26388]
struct FAudioSpeaker
{
	int                                                m_eVehicleAudioPart;                              		// 0x000000 (0x0004)              
	float                                              m_fEQParameter1;                                  		// 0x000004 (0x0004)              
	float                                              m_fEQParameter2;                                  		// 0x000008 (0x0004)              
};
//0x000010
//TESPrimitive[0x1DF26320]
struct FTESPrimitive
{
	class UTexture2D*                                  Texture;                                          		// 0x000000 (0x0004)              
	struct FString                                     sName;                                            		// 0x000004 (0x000C)              
};
//0x000008
//AudioCustomisationSwitch[0x1DF262B8]
struct FAudioCustomisationSwitch
{
	int                                                m_nGroup;                                         		// 0x000000 (0x0004)              
	int                                                m_nValue;                                         		// 0x000004 (0x0004)              
};
//0x000030
//GolemobileLicensePlateData[0x1DF26250]
struct FGolemobileLicensePlateData
{
	FVector2                                           BackDestTL;                                       		// 0x000000 (0x0008)              
	FVector2                                           BackDestBR;                                       		// 0x000008 (0x0008)              
	FVector2                                           BackSrcTL;                                        		// 0x000010 (0x0008)              
	FVector2                                           BackSrcBR;                                        		// 0x000018 (0x0008)              
	struct FLinearColor                                DigitColour;                                      		// 0x000020 (0x0010)              
};
//0x000044
//GolemobilePartType[0x1DF261E8]
struct FGolemobilePartType
{
	struct FString                                     sName;                                            		// 0x000000 (0x000C)              
	struct FString                                     sDisplayName;                                     		// 0x00000C (0x000C)              
	unsigned long                                      bCommon : 1;                                      		// 0x000018 (0x0004) [0x00000001] 
	int                                                NumParts;                                         		// 0x00001C (0x0004)              
	unsigned char                                      eCategory;                                        		// 0x000020 (0x0001)              PROPERTY: etGolemobilePartCategory
	unsigned char                                      _0x000021[0x3];                                   		// 0x000021 (0x0003) MISSED OFFSET
	int                                                DefaultPart;                                      		// 0x000024 (0x0004)              
	unsigned long                                      Optional : 1;                                     		// 0x000028 (0x0004) [0x00000001] 
	unsigned long                                      ColourCustomisable : 1;                           		// 0x000028 (0x0004) [0x00000002] 
	struct FName                                       sAttachToSocket;                                  		// 0x00002C (0x0008)              
	class UTexture2D*                                  ComponentMask;                                    		// 0x000034 (0x0004)              
	TArray<unsigned long>                              bExportToUI;                                      		// 0x000038 (0x000C)              
};
//0x00000C
//VehicleChunkTextures[0x1DF26180]
struct FVehicleChunkTextures
{
	class UTexture2D*                                  pDiffuse;                                         		// 0x000000 (0x0004)              
	class UTexture2D*                                  pNormal;                                          		// 0x000004 (0x0004)              
	class UTexture2D*                                  pEmissive;                                        		// 0x000008 (0x0004)              
};
//0x000020
//CC_PurchaseElement[0x1DF26118]
struct FCC_PurchaseElement
{
	struct FString                                     m_sAttributes;                                    		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayName;                                   		// 0x00000C (0x000C)              
	int                                                m_eCC_PurchaseElement;                            		// 0x000018 (0x0004)              
	int                                                m_nCost;                                          		// 0x00001C (0x0004)              
};
//0x000018
//CC_ArrayPurchaseElement[0x1DF260B0]
struct FCC_ArrayPurchaseElement
{
	struct FString                                     m_sAttributeArray;                                		// 0x000000 (0x000C)              
	int                                                m_eCC_PurchaseElement;                            		// 0x00000C (0x0004)              
	int                                                m_nAddCost;                                       		// 0x000010 (0x0004)              
	int                                                m_nDeleteCost;                                    		// 0x000014 (0x0004)              
};
//0x000024
//CartItem[0x1DF26048]
struct FCartItem
{
	int                                                eType;                                            		// 0x000000 (0x0004)              
	DWORD                                              pPurchaseElement;                                 		// 0x000004 (0x0004)              
	int                                                nCost;                                            		// 0x000008 (0x0004)              
	TArray<class UcAttribute*>                         aAttributes;                                      		// 0x00000C (0x000C)              
	class UcUIListProvider*                            pArrayListProvider;                               		// 0x000018 (0x0004)              
	int                                                nOldArrayIndex;                                   		// 0x00001C (0x0004)              
	int                                                nCurArrayIndex;                                   		// 0x000020 (0x0004)              
};
//0x000018
//ActivityMessageRecord[0x1DF25FE0]
struct FActivityMessageRecord
{
	int                                                m_nMessageTypeID;                                 		// 0x000000 (0x0004)              
	int                                                m_nParameter0;                                    		// 0x000004 (0x0004)              
	int                                                m_nParameter1;                                    		// 0x000008 (0x0004)              
	int                                                m_nParameter2;                                    		// 0x00000C (0x0004)              
	int                                                m_nParameter3;                                    		// 0x000010 (0x0004)              
	int                                                m_nParameter4;                                    		// 0x000014 (0x0004)              
};
//0x00007C
//ActivityMessageRecords[0x1DF25F78]
struct FActivityMessageRecords
{
	int                                                m_nCount;                                         		// 0x000000 (0x0004)              
	struct FActivityMessageRecord                      m_messages[0x5];                                  		// 0x000004 (0x0078)              
};
//0x000020
//ActivityMessageRecordWithTime[0x1DF25F10]
struct FActivityMessageRecordWithTime
{
	struct FActivityMessageRecord                      m_message;                                        		// 0x000000 (0x0018)              
	double                                             m_fReceivedTime;                                  		// 0x000018 (0x0008)              
};
//0x00007C
//MissionSideMembersPacket[0x1DF25EA8]
struct FMissionSideMembersPacket
{
	int                                                m_Data[0x1F];                                     		// 0x000000 (0x007C)              
};
//0x000038
//MissionStatsPacket[0x1DF25E40]
struct FMissionStatsPacket
{
	int                                                m_Data[0xE];                                      		// 0x000000 (0x0038)              
};
//0x00001C
//MedalsPacket[0x1DF25DD8]
struct FMedalsPacket
{
	int                                                m_Data[0x7];                                      		// 0x000000 (0x001C)              
};
//0x00000C
//ScorerKillInfo[0x1DF25D70]
struct FScorerKillInfo
{
	int                                                m_nCharacterUID;                                  		// 0x000000 (0x0004)              
	unsigned char                                      m_eKillInfoType;                                  		// 0x000004 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000005[0x3];                                   		// 0x000005 (0x0003) MISSED OFFSET
	int                                                m_nInventoryItemTypeID;                           		// 0x000008 (0x0004)              
};
//0x0001E4
//ScorerKillNotificationPacket[0x1DF25D08]
struct FScorerKillNotificationPacket
{
	struct FScorerKillInfo                             m_KillInfo[0x28];                                 		// 0x000000 (0x01E0)              
	int                                                m_nCount;                                         		// 0x0001E0 (0x0004)              
};
//0x00000A
//ContactStandingPacket[0x1DF25CA0]
struct FContactStandingPacket
{
	int                                                m_nContactID;                                     		// 0x000000 (0x0004)              
	int                                                m_nStanding;                                      		// 0x000004 (0x0004)              
	unsigned char                                      m_nLevel;                                         		// 0x000008 (0x0001)              PROPERTY: 
	unsigned char                                      m_nMaxLevel;                                      		// 0x000009 (0x0001)              PROPERTY: 
};
//0x000024
//CharacterStats[0x1DF25C38]
struct FCharacterStats
{
	float                                              m_fTotalTimeInSeconds;                            		// 0x000000 (0x0004)              
	int                                                m_nTotalKills;                                    		// 0x000004 (0x0004)              
	float                                              m_fSessionTimeInSeconds;                          		// 0x000008 (0x0004)              
	int                                                m_nSessionKills;                                  		// 0x00000C (0x0004)              
	int                                                m_nSessionMissionWon;                             		// 0x000010 (0x0004)              
	int                                                m_nSessionMissionLost;                            		// 0x000014 (0x0004)              
	int                                                m_nSessionPlayerArrested;                         		// 0x000018 (0x0004)              
	int                                                m_nSessionPlayerFreed;                            		// 0x00001C (0x0004)              
	int                                                m_nSessionMedals;                                 		// 0x000020 (0x0004)              
};
//0x000034
//HeatDebugInfo[0x1DF25BD0]
struct FHeatDebugInfo
{
	double                                             fServerTimestamp;                                 		// 0x000000 (0x0008)              
	int                                                nHeatAction;                                      		// 0x000008 (0x0004)              
	int                                                nWitnessableCrime;                                		// 0x00000C (0x0004)              
	unsigned char                                      eReason;                                          		// 0x000010 (0x0001)              PROPERTY: etHeatDebugInfoReason
	unsigned char                                      _0x000011[0x3];                                   		// 0x000011 (0x0003) MISSED OFFSET
	int                                                nCharacterUID;                                    		// 0x000014 (0x0004)              
	int                                                nParamX;                                          		// 0x000018 (0x0004)              
	int                                                nParamY;                                          		// 0x00001C (0x0004)              
	float                                              fPointsChange;                                    		// 0x000020 (0x0004)              
	int                                                nLevelChangeMin;                                  		// 0x000024 (0x0004)              
	int                                                nLevelChangeMax;                                  		// 0x000028 (0x0004)              
	float                                              fNewHeatAmount;                                   		// 0x00002C (0x0004)              
	int                                                nNewHeatLevel;                                    		// 0x000030 (0x0004)              
};
//0x000020
//ActiveCrimeDebugInfo[0x1DF25B68]
struct FActiveCrimeDebugInfo
{
	int                                                m_nUniqueID;                                      		// 0x000000 (0x0004)              
	double                                             m_fTimestamp;                                     		// 0x000004 (0x0008)              
	double                                             m_fExpiryTime;                                    		// 0x00000C (0x0008)              
	int                                                m_nWitnessableCrime;                              		// 0x000014 (0x0004)              
	unsigned char                                      m_eCSA;                                           		// 0x000018 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_nEnforcersWitnessed;                            		// 0x000019 (0x0001)              PROPERTY: 
	unsigned char                                      m_nNPCsWitnessed;                                 		// 0x00001A (0x0001)              PROPERTY: 
	unsigned char                                      _0x00001B[0x1];                                   		// 0x00001B (0x0001) MISSED OFFSET
	unsigned long                                      m_bInProgress : 1;                                		// 0x00001C (0x0004) [0x00000001] 
	unsigned long                                      m_bRemove : 1;                                    		// 0x00001C (0x0004) [0x00000002] 
};
//0x00003C
//CharacterTextureBuildData[0x1DF25B00]
struct FCharacterTextureBuildData
{
	unsigned char                                      eBuildState;                                      		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	int                                                nPartIndex;                                       		// 0x000004 (0x0004)              
	int                                                nStateIndex;                                      		// 0x000008 (0x0004)              
	unsigned char                                      eTextureType;                                     		// 0x00000C (0x0001)              PROPERTY: etTextureType
	unsigned char                                      _0x00000D[0x3];                                   		// 0x00000D (0x0003) MISSED OFFSET
	class UGolemDescriptor*                            pDescriptor;                                      		// 0x000010 (0x0004)              
	class UGolemSkeletalMesh*                          pSkeletalMesh;                                    		// 0x000014 (0x0004)              
	class UObject*                                     pOuter;                                           		// 0x000018 (0x0004)              
	DWORD                                              pOutput;                                          		// 0x00001C (0x0004)              
	class UAPBStudioCharacter*                         pStudio;                                          		// 0x000020 (0x0004)              
	unsigned long                                      bInGame : 1;                                      		// 0x000024 (0x0004) [0x00000001] 
	int                                                nIgnoreDecalLayer;                                		// 0x000028 (0x0004)              
	int                                                nIgnoreDecalPart;                                 		// 0x00002C (0x0004)              
	unsigned long                                      bGenerateMipLevels : 1;                           		// 0x000030 (0x0004) [0x00000001] 
	float                                              fStudioFootScale;                                 		// 0x000034 (0x0004)              
	unsigned long                                      bCompressTextures : 1;                            		// 0x000038 (0x0004) [0x00000001] 
	unsigned long                                      bIsAStatue : 1;                                   		// 0x000038 (0x0004) [0x00000002] 
	unsigned long                                      bLocalPlayer : 1;                                 		// 0x000038 (0x0004) [0x00000004] 
};
//0x000030
//tCheckpointPlayerInfo[0x1DF25A98]
struct FtCheckpointPlayerInfo
{
	class AActor*                                      m_pActor;                                         		// 0x000000 (0x0004)              
	class AcAPBPlayerController*                       m_pController;                                    		// 0x000004 (0x0004)              
	double                                             m_fTriggerTime;                                   		// 0x000008 (0x0008)              
	double                                             m_fTimeStart;                                     		// 0x000010 (0x0008)              
	double                                             m_fFillRate;                                      		// 0x000018 (0x0008)              
	double                                             m_fBaseTimeInterval;                              		// 0x000020 (0x0008)              
	double                                             m_fCheckpointProgressSeconds;                     		// 0x000028 (0x0008)              
};
//0x000008
//tContainedPlayerInfo[0x1DF25A30]
struct FtContainedPlayerInfo
{
	class AcAPBPawn*                                   m_pPawn;                                          		// 0x000000 (0x0004)              
	class AcAPBPlayerController*                       m_pPlayerController;                              		// 0x000004 (0x0004)              
};
//0x00000D
//PedestrianTempSetup[0x1DF259C8]
struct FPedestrianTempSetup
{
	struct FString                                     m_sTempSetupInfo;                                 		// 0x000000 (0x000C)              
	unsigned char                                      m_ePedestrianTempSetup;                           		// 0x00000C (0x0001)              PROPERTY: etGender
};
//0x000019
//PrimitiveUnlockItemType[0x1DF25960]
struct FPrimitiveUnlockItemType
{
	struct FString                                     m_sResource;                                      		// 0x000000 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x00000C (0x0004)              
	int                                                m_nLegacyData;                                    		// 0x000010 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000014 (0x0004)              
	unsigned char                                      m_eType;                                          		// 0x000018 (0x0001)              PROPERTY: etPrimitiveType
};
//0x000005
//FacialHairRandomGeneration[0x1DF258F8]
struct FFacialHairRandomGeneration
{
	float                                              m_fProbability;                                   		// 0x000000 (0x0004)              
	unsigned char                                      m_eFacialHairRandomGeneration;                    		// 0x000004 (0x0001)              PROPERTY: etFacialHairRandomGeneration
};
//0x000014
//ColourLookup[0x1DF25890]
struct FColourLookup
{
	int                                                m_nNumRows;                                       		// 0x000000 (0x0004)              
	int                                                m_nNumCols;                                       		// 0x000004 (0x0004)              
	TArray<DWORD>                                      m_aColours;                                       		// 0x000008 (0x000C)              
};
//0x00000C
//SymbolPrimitive[0x1DF25828]
struct FSymbolPrimitive
{
	DWORD                                              pPrimitiveType;                                   		// 0x000000 (0x0004)              
	DWORD                                              pInventoryItemType;                               		// 0x000004 (0x0004)              
	class UTexture2D*                                  pTexture;                                         		// 0x000008 (0x0004)              
};
//0x000018
//NamedBinaryData[0x1DF257C0]
struct FNamedBinaryData
{
	struct FString                                     Name;                                             		// 0x000000 (0x000C)              
	TArray<unsigned char>                              Data;                                             		// 0x00000C (0x000C)              
};
//0x000008
//tFilterEntry[0x1DF25758]
struct FtFilterEntry
{
	class UClass*                                      m_DamageType;                                     		// 0x000000 (0x0004)              
	unsigned long                                      m_bAllowDamage : 1;                               		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      m_bAllowHealing : 1;                              		// 0x000004 (0x0004) [0x00000002] 
};
//0x00001C
//tTimerEntry[0x1DF256F0]
struct FtTimerEntry
{
	class UClass*                                      m_DamageType;                                     		// 0x000000 (0x0004)              
	class AController*                                 m_Instigator;                                     		// 0x000004 (0x0004)              
	float                                              m_Duration;                                       		// 0x000008 (0x0004)              
	float                                              m_Remainder;                                      		// 0x00000C (0x0004)              
	int                                                m_UnitsTotal;                                     		// 0x000010 (0x0004)              
	int                                                m_UnitsApplied;                                   		// 0x000014 (0x0004)              
	unsigned long                                      m_bHeal : 1;                                      		// 0x000018 (0x0004) [0x00000001] 
};
//0x000020
//Tracer[0x1DF25688]
struct FTracer
{
	FVector3                                           m_vStart;                                         		// 0x000000 (0x000C)              
	FVector3                                           m_vEnd;                                           		// 0x00000C (0x000C)              
	float                                              m_fTime;                                          		// 0x000018 (0x0004)              
	unsigned long                                      m_bHitTarget : 1;                                 		// 0x00001C (0x0004) [0x00000001] 
};
//0x00005C
//DisplayPoint[0x1DF25620]
struct FDisplayPoint
{
	struct FGuid                                       m_nSecondaryKey;                                  		// 0x000000 (0x0010)              
	struct FString                                     m_sDescription;                                   		// 0x000010 (0x000C)              
	struct FString                                     m_sObtainedBy;                                    		// 0x00001C (0x000C)              
	struct FString                                     m_sScreenShot;                                    		// 0x000028 (0x000C)              
	struct FString                                     m_sShortTitle;                                    		// 0x000034 (0x000C)              
	struct FString                                     m_sTitle;                                         		// 0x000040 (0x000C)              
	int                                                m_eDisplayPoint;                                  		// 0x00004C (0x0004)              
	int                                                m_eDistrict;                                      		// 0x000050 (0x0004)              
	unsigned char                                      m_eActivationType;                                		// 0x000054 (0x0001)              PROPERTY: etDisplayPointActivationType
	unsigned char                                      m_eType;                                          		// 0x000055 (0x0001)              PROPERTY: etDisplayPointType
	unsigned char                                      _0x000056[0x2];                                   		// 0x000056 (0x0002) MISSED OFFSET
	unsigned long                                      m_bCriminal : 1;                                  		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      m_bEnforcer : 1;                                  		// 0x000058 (0x0004) [0x00000002] 
};
//0x000009
//GraffitiDisplayPoint[0x1DF255B8]
struct FGraffitiDisplayPoint
{
	int                                                m_eDisplayPoint;                                  		// 0x000000 (0x0004)              
	float                                              m_fSprayDurationOverride;                         		// 0x000004 (0x0004)              
	unsigned char                                      m_eInteractionType;                               		// 0x000008 (0x0001)              PROPERTY: etGraffitiInteractionType
};
//0x000010
//PropagatedDisplayPoint[0x1DF25550]
struct FPropagatedDisplayPoint
{
	class AActor*                                      DisplayPoint;                                     		// 0x000000 (0x0004)              
	int                                                nCharacterOwnerID;                                		// 0x000004 (0x0004)              
	int                                                nStartTime;                                       		// 0x000008 (0x0004)              
	int                                                nOwnershipDuration;                               		// 0x00000C (0x0004)              
};
//0x00003A
//DisplayPointData[0x1DF254E8]
struct FDisplayPointData
{
	struct FGuid                                       DisplayPointGUID;                                 		// 0x000000 (0x0010)              
	struct FString                                     sCharacterOwnerName;                              		// 0x000010 (0x000C)              
	int                                                nCharacterOwnerID;                                		// 0x00001C (0x0004)              
	int                                                nStartTime;                                       		// 0x000020 (0x0004)              
	int                                                nOwnershipDuration;                               		// 0x000024 (0x0004)              
	int                                                nDisplayPointAcheivementID;                       		// 0x000028 (0x0004)              
	int                                                nContextValue;                                    		// 0x00002C (0x0004)              
	int                                                nCustomDataSize;                                  		// 0x000030 (0x0004)              
	int                                                nCustomDataType;                                  		// 0x000034 (0x0004)              
	unsigned char                                      eCharacterFaction;                                		// 0x000038 (0x0001)              PROPERTY: etFaction
	unsigned char                                      eInteractionType;                                 		// 0x000039 (0x0001)              PROPERTY: etDisplayPointInteractionType
};
//0x000011
//PopulationTotal[0x1DF25480]
struct FPopulationTotal
{
	int                                                m_eDistrictType;                                  		// 0x000000 (0x0004)              
	int                                                m_nPopulationTotal;                               		// 0x000004 (0x0004)              
	int                                                m_nTotalPedestrians;                              		// 0x000008 (0x0004)              
	int                                                m_nTotalVehicles;                                 		// 0x00000C (0x0004)              
	unsigned char                                      m_eTOD;                                           		// 0x000010 (0x0001)              PROPERTY: etTimeofDayPeriod
};
//0x000012
//NPCType[0x1DF25418]
struct FNPCType
{
	int                                                m_eNPCType;                                       		// 0x000000 (0x0004)              
	float                                              m_fDebugColour_B;                                 		// 0x000004 (0x0004)              
	float                                              m_fDebugColour_G;                                 		// 0x000008 (0x0004)              
	float                                              m_fDebugColour_R;                                 		// 0x00000C (0x0004)              
	unsigned char                                      m_eGender;                                        		// 0x000010 (0x0001)              PROPERTY: etGender
	unsigned char                                      m_eNPCCategory;                                   		// 0x000011 (0x0001)              PROPERTY: etNPCCategory
};
//0x000009
//NPCType_TOD[0x1DF253B0]
struct FNPCType_TOD
{
	int                                                m_eNPCType;                                       		// 0x000000 (0x0004)              
	int                                                m_eNPCType_TOD;                                   		// 0x000004 (0x0004)              
	unsigned char                                      m_eTOD;                                           		// 0x000008 (0x0001)              PROPERTY: etTimeofDayPeriod
};
//0x000010
//NPCType_TOD_District[0x1DF25348]
struct FNPCType_TOD_District
{
	int                                                m_eDistrict;                                      		// 0x000000 (0x0004)              
	int                                                m_eNPCType_TOD;                                   		// 0x000004 (0x0004)              
	int                                                m_eNPCType_TOD_District;                          		// 0x000008 (0x0004)              
	float                                              m_fPopulationPercentage;                          		// 0x00000C (0x0004)              
};
//0x000014
//VignetteDescriptor[0x1DF252E0]
struct FVignetteDescriptor
{
	struct FString                                     m_sPackage;                                       		// 0x000000 (0x000C)              
	int                                                m_eVignetteDescriptor;                            		// 0x00000C (0x0004)              
	float                                              m_fMaxCancelDistanceFromVNode;                    		// 0x000010 (0x0004)              
};
//0x000018
//VehicleColour[0x1DF25278]
struct FVehicleColour
{
	float                                              m_fProbability;                                   		// 0x000000 (0x0004)              
	int                                                m_nBlueComponent;                                 		// 0x000004 (0x0004)              
	int                                                m_nGreenComponent;                                		// 0x000008 (0x0004)              
	int                                                m_nRedComponent;                                  		// 0x00000C (0x0004)              
	unsigned char                                      m_eVehicleColour;                                 		// 0x000010 (0x0001)              PROPERTY: etVehicleColour
	unsigned char                                      _0x000011[0x3];                                   		// 0x000011 (0x0003) MISSED OFFSET
	unsigned long                                      m_bIsMetallic : 1;                                		// 0x000014 (0x0004) [0x00000001] 
};
//0x000005
//NPCEvent[0x1DF25210]
struct FNPCEvent
{
	int                                                m_nIgnoreMe;                                      		// 0x000000 (0x0004)              
	unsigned char                                      m_eNPCEvent;                                      		// 0x000004 (0x0001)              PROPERTY: etNPCEvent
};
//0x000005
//NPCEvent_AllowedToOverride[0x1DF251A8]
struct FNPCEvent_AllowedToOverride
{
	int                                                m_nIgnoreMe;                                      		// 0x000000 (0x0004)              
	unsigned char                                      m_eNPCEvent;                                      		// 0x000004 (0x0001)              PROPERTY: etNPCEvent
};
//0x000005
//NPCReaction[0x1DF25140]
struct FNPCReaction
{
	int                                                m_nPriority;                                      		// 0x000000 (0x0004)              
	unsigned char                                      m_eNPCReaction;                                   		// 0x000004 (0x0001)              PROPERTY: etNPCReaction
};
//0x000005
//NPCReaction_AllowedToOverride[0x1DF250D8]
struct FNPCReaction_AllowedToOverride
{
	int                                                m_nPriority;                                      		// 0x000000 (0x0004)              
	unsigned char                                      m_eNPCReaction;                                   		// 0x000004 (0x0001)              PROPERTY: etNPCReaction
};
//0x000006
//TOD_Event[0x1DF25070]
struct FTOD_Event
{
	int                                                m_eTOD_Event;                                     		// 0x000000 (0x0004)              
	unsigned char                                      m_eEvent;                                         		// 0x000004 (0x0001)              PROPERTY: etNPCEvent
	unsigned char                                      m_eTOD;                                           		// 0x000005 (0x0001)              PROPERTY: etTimeofDayPeriod
};
//0x000009
//TOD_Event_AllowedToOverride[0x1DF25008]
struct FTOD_Event_AllowedToOverride
{
	int                                                m_eEvent_AllowedToOverride;                       		// 0x000000 (0x0004)              
	int                                                m_eTOD_Event;                                     		// 0x000004 (0x0004)              
	unsigned char                                      m_eTOD;                                           		// 0x000008 (0x0001)              PROPERTY: etTimeofDayPeriod
};
//0x000009
//Default_TOD_Behaviour[0x1DF24FA0]
struct FDefault_TOD_Behaviour
{
	int                                                m_eTOD_Event;                                     		// 0x000000 (0x0004)              
	float                                              m_fLikelihood;                                    		// 0x000004 (0x0004)              
	unsigned char                                      m_eReaction;                                      		// 0x000008 (0x0001)              PROPERTY: etNPCReaction
};
//0x00000C
//NPC_TOD_Behaviour[0x1DF24F38]
struct FNPC_TOD_Behaviour
{
	int                                                m_eNPC_TOD_Event;                                 		// 0x000000 (0x0004)              
	int                                                m_eReaction;                                      		// 0x000004 (0x0004)              
	float                                              m_fLikelihood;                                    		// 0x000008 (0x0004)              
};
//0x00000C
//NPC_TOD_Event[0x1DF24ED0]
struct FNPC_TOD_Event
{
	int                                                m_eNPC_TOD_Event;                                 		// 0x000000 (0x0004)              
	int                                                m_eNPCType;                                       		// 0x000004 (0x0004)              
	int                                                m_eTOD_Event;                                     		// 0x000008 (0x0004)              
};
//0x00000C
//PedestrianTypeRestriction[0x1DF24E68]
struct FPedestrianTypeRestriction
{
	int                                                m_eNPCType;                                       		// 0x000000 (0x0004)              
	int                                                m_nNumConcurrentSetupTypes;                       		// 0x000004 (0x0004)              
	int                                                m_nPedestrianTypeRestriction;                     		// 0x000008 (0x0004)              
};
//0x000014
//VehicleCategory[0x1DF24E00]
struct FVehicleCategory
{
	int                                                m_eVehicleCategory;                               		// 0x000000 (0x0004)              
	float                                              m_fHairSquash;                                    		// 0x000004 (0x0004)              
	float                                              m_fMaxHeight;                                     		// 0x000008 (0x0004)              
	float                                              m_fMaxLength;                                     		// 0x00000C (0x0004)              
	float                                              m_fMaxWidth;                                      		// 0x000010 (0x0004)              
};
//0x00000C
//VehicleCategoryRestriction[0x1DF24D98]
struct FVehicleCategoryRestriction
{
	int                                                m_eVehicleCategory;                               		// 0x000000 (0x0004)              
	int                                                m_nNumConcurrentSetupTypes;                       		// 0x000004 (0x0004)              
	int                                                m_nVehicleCategoryRestriction;                    		// 0x000008 (0x0004)              
};
//0x000028
//PedestrianAsset[0x1DF24D30]
struct FPedestrianAsset
{
	struct FString                                     m_sAsset;                                         		// 0x000000 (0x000C)              
	int                                                m_eAudioType;                                     		// 0x00000C (0x0004)              
	int                                                m_eNPCType;                                       		// 0x000010 (0x0004)              
	int                                                m_ePedestrianAsset;                               		// 0x000014 (0x0004)              
	int                                                m_eRaceType;                                      		// 0x000018 (0x0004)              
	int                                                m_eWalkStyle;                                     		// 0x00001C (0x0004)              
	unsigned char                                      m_ePedestrianPaletteType;                         		// 0x000020 (0x0001)              PROPERTY: etPedestrianPaletteType
	unsigned char                                      _0x000021[0x3];                                   		// 0x000021 (0x0003) MISSED OFFSET
	unsigned long                                      m_bHighHeels : 1;                                 		// 0x000024 (0x0004) [0x00000001] 
	unsigned long                                      m_bShoeLaces : 1;                                 		// 0x000024 (0x0004) [0x00000002] 
	unsigned long                                      m_bWristWatch : 1;                                		// 0x000024 (0x0004) [0x00000004] 
};
//0x000018
//RaceInfo[0x1DF24CC8]
struct FRaceInfo
{
	int                                                m_eRaceInfo;                                      		// 0x000000 (0x0004)              
	int                                                m_eRaceType;                                      		// 0x000004 (0x0004)              
	float                                              m_fB;                                             		// 0x000008 (0x0004)              
	float                                              m_fG;                                             		// 0x00000C (0x0004)              
	float                                              m_fR;                                             		// 0x000010 (0x0004)              
	int                                                m_nColourIndex;                                   		// 0x000014 (0x0004)              
};
//0x000010
//RaceType[0x1DF24C60]
struct FRaceType
{
	struct FString                                     m_sName;                                          		// 0x000000 (0x000C)              
	int                                                m_eRaceType;                                      		// 0x00000C (0x0004)              
};
//0x000040
//NPCAudioType[0x1DF24BF8]
struct FNPCAudioType
{
	struct FString                                     m_sClothingAccessoriesSwitchValue;                		// 0x000000 (0x000C)              
	struct FString                                     m_sClothingArmsSwitchValue;                       		// 0x00000C (0x000C)              
	struct FString                                     m_sClothingFootwearSwitchValue;                   		// 0x000018 (0x000C)              
	struct FString                                     m_sClothingLegsSwitchValue;                       		// 0x000024 (0x000C)              
	struct FString                                     m_sVoiceSwitchValue;                              		// 0x000030 (0x000C)              
	int                                                m_eNPCAudioType;                                  		// 0x00003C (0x0004)              
};
//0x000048
//TrafficLightDuration[0x1DF24B90]
struct FTrafficLightDuration
{
	int                                                m_eDistrict;                                      		// 0x000000 (0x0004)              
	int                                                m_eTrafficLightDuration;                          		// 0x000004 (0x0004)              
	float                                              m_fPed_FourLaneMax;                               		// 0x000008 (0x0004)              
	float                                              m_fPed_FourLaneMin;                               		// 0x00000C (0x0004)              
	float                                              m_fPed_OneLaneMax;                                		// 0x000010 (0x0004)              
	float                                              m_fPed_OneLaneMin;                                		// 0x000014 (0x0004)              
	float                                              m_fPed_ThreeLaneMax;                              		// 0x000018 (0x0004)              
	float                                              m_fPed_ThreeLaneMin;                              		// 0x00001C (0x0004)              
	float                                              m_fPed_TwoLaneMax;                                		// 0x000020 (0x0004)              
	float                                              m_fPed_TwoLaneMin;                                		// 0x000024 (0x0004)              
	float                                              m_fVehicle_FourLaneMax;                           		// 0x000028 (0x0004)              
	float                                              m_fVehicle_FourLaneMin;                           		// 0x00002C (0x0004)              
	float                                              m_fVehicle_OneLaneMax;                            		// 0x000030 (0x0004)              
	float                                              m_fVehicle_OneLaneMin;                            		// 0x000034 (0x0004)              
	float                                              m_fVehicle_ThreeLaneMax;                          		// 0x000038 (0x0004)              
	float                                              m_fVehicle_ThreeLaneMin;                          		// 0x00003C (0x0004)              
	float                                              m_fVehicle_TwoLaneMax;                            		// 0x000040 (0x0004)              
	float                                              m_fVehicle_TwoLaneMin;                            		// 0x000044 (0x0004)              
};
//0x000019
//PedWalkAndRunVariation[0x1DF24B28]
struct FPedWalkAndRunVariation
{
	struct FString                                     m_sAnimation;                                     		// 0x000000 (0x000C)              
	int                                                m_ePedAvoidAnimationCategory;                     		// 0x00000C (0x0004)              
	int                                                m_ePedWalkAndRunVariation;                        		// 0x000010 (0x0004)              
	float                                              m_fBaseSpeed;                                     		// 0x000014 (0x0004)              
	unsigned char                                      m_eGender;                                        		// 0x000018 (0x0001)              PROPERTY: etGender
};
//0x000011
//PedestrianPaletteColour[0x1DF24AC0]
struct FPedestrianPaletteColour
{
	float                                              m_fBlue;                                          		// 0x000000 (0x0004)              
	float                                              m_fGreen;                                         		// 0x000004 (0x0004)              
	float                                              m_fRed;                                           		// 0x000008 (0x0004)              
	int                                                m_nColourIndex;                                   		// 0x00000C (0x0004)              
	unsigned char                                      m_ePedestrianPaletteType;                         		// 0x000010 (0x0001)              PROPERTY: etPedestrianPaletteType
};
//0x00001C
//PedAvoidAnimation[0x1DF24A58]
struct FPedAvoidAnimation
{
	struct FString                                     m_sAvoidAnimationLeft;                            		// 0x000000 (0x000C)              
	struct FString                                     m_sAvoidAnimationRight;                           		// 0x00000C (0x000C)              
	int                                                m_eAvoidAnimationCategory;                        		// 0x000018 (0x0004)              
};
//0x000004
//PedAvoidAnimationCategory[0x1DF249F0]
struct FPedAvoidAnimationCategory
{
	int                                                m_ePedAvoidAnimationCategory;                     		// 0x000000 (0x0004)              
};
//0x000027
//PedestrianTTIReaction[0x1DF24988]
struct FPedestrianTTIReaction
{
	struct FString                                     m_sCancelAudioEvent;                              		// 0x000000 (0x000C)              
	struct FString                                     m_sCompleteAudioEvent;                            		// 0x00000C (0x000C)              
	struct FString                                     m_sStartAudioEvent;                               		// 0x000018 (0x000C)              
	unsigned char                                      m_ePedestrianTTIReaction;                         		// 0x000024 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eWhenCancelled;                                 		// 0x000025 (0x0001)              PROPERTY: etTTINPCEndingType
	unsigned char                                      m_eWhenCompleted;                                 		// 0x000026 (0x0001)              PROPERTY: etTTINPCEndingType
};
//0x00002B
//PedestrianTTIReactionOverride[0x1DF24920]
struct FPedestrianTTIReactionOverride
{
	struct FString                                     m_sCancelAudioEvent;                              		// 0x000000 (0x000C)              
	struct FString                                     m_sCompleteAudioEvent;                            		// 0x00000C (0x000C)              
	struct FString                                     m_sStartAudioEvent;                               		// 0x000018 (0x000C)              
	int                                                m_eNPCType;                                       		// 0x000024 (0x0004)              
	unsigned char                                      m_ePedestrianTTIReaction;                         		// 0x000028 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eWhenCancelled;                                 		// 0x000029 (0x0001)              PROPERTY: etTTINPCEndingType
	unsigned char                                      m_eWhenCompleted;                                 		// 0x00002A (0x0001)              PROPERTY: etTTINPCEndingType
};
//0x00000E
//PedestrianTTIAnimation[0x1DF248B8]
struct FPedestrianTTIAnimation
{
	struct FString                                     m_sNPCAnimation;                                  		// 0x000000 (0x000C)              
	unsigned char                                      m_ePedestrianTTIReaction;                         		// 0x00000C (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_ePlayerAnimType;                                		// 0x00000D (0x0001)              PROPERTY: etTTIPlayerAnimType
};
//0x000012
//PedestrianTTIAnimationOverride[0x1DF24850]
struct FPedestrianTTIAnimationOverride
{
	struct FString                                     m_sNPCAnimation;                                  		// 0x000000 (0x000C)              
	int                                                m_eNPCType;                                       		// 0x00000C (0x0004)              
	unsigned char                                      m_ePedestrianTTIReaction;                         		// 0x000010 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_ePlayerAnimType;                                		// 0x000011 (0x0001)              PROPERTY: etTTIPlayerAnimType
};
//0x000010
//LCData_Reaction[0x1DF247E8]
struct FLCData_Reaction
{
	int                                                m_eReaction;                                      		// 0x000000 (0x0004)              
	unsigned long                                      m_bIsOverride : 1;                                		// 0x000004 (0x0004) [0x00000001] 
	float                                              m_fLikelihood;                                    		// 0x000008 (0x0004)              
	int                                                m_nPriority;                                      		// 0x00000C (0x0004)              
};
//0x00000C
//LCData_Event[0x1DF24780]
struct FLCData_Event
{
	TArray<struct FLCData_Reaction>                    ReactionArr;                                      		// 0x000000 (0x000C)              
};
//0x00000C
//LCData_TOD[0x1DF24718]
struct FLCData_TOD
{
	TArray<struct FLCData_Event>                       EventArr;                                         		// 0x000000 (0x000C)              
};
//0x00000C
//LCData_NPC[0x1DF246B0]
struct FLCData_NPC
{
	TArray<struct FLCData_TOD>                         TODArr;                                           		// 0x000000 (0x000C)              
};
//0x000008
//cFeatureEmissivePeriod[0x1DF24648]
struct FcFeatureEmissivePeriod
{
	float                                              m_fStartTime;                                     		// 0x000000 (0x0004)              
	float                                              m_fOnFraction;                                    		// 0x000004 (0x0004)              
};
//0x000035
//CharacterInfoPacket[0x1DF245E0]
struct FCharacterInfoPacket
{
	int                                                m_nAccountUID;                                    		// 0x000000 (0x0004)              
	int                                                m_nCharacterUID;                                  		// 0x000004 (0x0004)              
	int                                                m_nClanUID;                                       		// 0x000008 (0x0004)              
	int                                                m_nGroupID;                                       		// 0x00000C (0x0004)              
	int                                                m_nTeamID;                                        		// 0x000010 (0x0004)              
	int                                                m_nTitleID;                                       		// 0x000014 (0x0004)              
	int                                                m_nRating;                                        		// 0x000018 (0x0004)              
	struct FString                                     m_sCharacterName;                                 		// 0x00001C (0x000C)              
	struct FString                                     m_sClanName;                                      		// 0x000028 (0x000C)              
	unsigned char                                      m_eFaction;                                       		// 0x000034 (0x0001)              PROPERTY: etFaction
};
//0x000198
//CharacterInfoMultiPacket[0x1DF24578]
struct FCharacterInfoMultiPacket
{
	unsigned char                                      m_eDataType;                                      		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	int                                                m_nCount;                                         		// 0x000004 (0x0004)              
	int                                                m_nCharacterUIDs[0x32];                           		// 0x000008 (0x00C8)              
	int                                                m_nData[0x32];                                    		// 0x0000D0 (0x00C8)              
};
//0x000005
//GraffitiTextureData[0x1DF24510]
struct FGraffitiTextureData
{
	int                                                m_nIndex;                                         		// 0x000000 (0x0004)              
	unsigned char                                      m_eType;                                          		// 0x000004 (0x0001)              PROPERTY: etGraffitiTextureType
};
//0x00000C
//tHeightAdjustmentStrategy[0x1DF244A8]
struct FtHeightAdjustmentStrategy
{
	class UcAnimNotifyPeriod_HeightAdjustment*         m_Notify;                                         		// 0x000000 (0x0004)              
	struct FName                                       m_sMatchBoneName;                                 		// 0x000004 (0x0008)              
};
//0x000014
//tHeightAdjustmentBlendChild[0x1DF24440]
struct FtHeightAdjustmentBlendChild
{
	struct FName                                       m_sName;                                          		// 0x000000 (0x0008)              
	class UcHeightAdjustmentNode*                      m_Child;                                          		// 0x000008 (0x0004)              
	float                                              m_fWeight;                                        		// 0x00000C (0x0004)              
	int                                                m_nDrawY;                                         		// 0x000010 (0x0004)              
};
//0x000014
//tHeldObject[0x1DF243D8]
struct FtHeldObject
{
	class AActor*                                      m_Archetype;                                      		// 0x000000 (0x0004)              
	struct FName                                       m_sSocketName;                                    		// 0x000004 (0x0008)              
	class UActorComponent*                             m_Component;                                      		// 0x00000C (0x0004)              
	int                                                m_nRefCount;                                      		// 0x000010 (0x0004)              
};
//0x00000C
//ModInfo[0x1DF24370]
struct FModInfo
{
	int                                                m_nFnMod;                                         		// 0x000000 (0x0004)              
	int                                                m_nStartTime;                                     		// 0x000004 (0x0004)              
	int                                                m_nExpiryTime;                                    		// 0x000008 (0x0004)              
};
//0x0000FE
//BlobChunk[0x1DF24308]
struct FBlobChunk
{
	int                                                nVersion;                                         		// 0x000000 (0x0004)              
	unsigned char                                      Data[0xFA];                                       		// 0x000004 (0x00FA)              PROPERTY: 
};
//0x000008
//ClothingItemCategory[0x1DF242A0]
struct FClothingItemCategory
{
	int                                                m_eClothingItemCategory;                          		// 0x000000 (0x0004)              
	int                                                m_eInventoryItemInfraCategory;                    		// 0x000004 (0x0004)              
};
//0x00000D
//InventoryItemCategoryLimited[0x1DF24238]
struct FInventoryItemCategoryLimited
{
	float                                              m_fCustomisationReplenishPeriod;                  		// 0x000000 (0x0004)              
	int                                                m_nCustomisationInitialAvailability;              		// 0x000004 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000008 (0x0004)              
	unsigned char                                      m_eInventoryItemCategory;                         		// 0x00000C (0x0001)              PROPERTY: etInventoryItemCategory
};
//0x000010
//DefaultCustomColour[0x1DF241D0]
struct FDefaultCustomColour
{
	int                                                m_eDefaultCustomColour;                           		// 0x000000 (0x0004)              
	int                                                m_nHue;                                           		// 0x000004 (0x0004)              
	int                                                m_nLum;                                           		// 0x000008 (0x0004)              
	int                                                m_nSat;                                           		// 0x00000C (0x0004)              
};
//0x000024
//InventoryItem[0x1DF24168]
struct FInventoryItem
{
	struct FGuid                                       m_nItemGuid;                                      		// 0x000000 (0x0010)              
	int                                                m_nCreatorUID;                                    		// 0x000010 (0x0004)              
	int                                                m_hInventoryItemTypeKey;                          		// 0x000014 (0x0004)              
	int                                                m_nStartTime;                                     		// 0x000018 (0x0004)              
	int                                                m_nExpiryTime;                                    		// 0x00001C (0x0004)              
	int                                                m_nPackedData;                                    		// 0x000020 (0x0004)              
};
//0x000030
//DeployedUsable[0x1DF24100]
struct FDeployedUsable
{
	struct FGuid                                       m_nItemGuid;                                      		// 0x000000 (0x0010)              
	double                                             m_fActivationEndTime;                             		// 0x000010 (0x0008)              
	unsigned long                                      m_bActiveForMissionDuration : 1;                  		// 0x000018 (0x0004) [0x00000001] 
	unsigned char                                      m_nFnModSlot;                                     		// 0x00001C (0x0001)              PROPERTY: 
	unsigned char                                      _0x00001D[0x3];                                   		// 0x00001D (0x0003) MISSED OFFSET
	int                                                m_nChargesRemaining;                              		// 0x000020 (0x0004)              
	int                                                m_nModifierItemIndex;                             		// 0x000024 (0x0004)              
	int                                                m_nModifierCategoryIndex;                         		// 0x000028 (0x0004)              
	int                                                m_nReuseGroupIndex;                               		// 0x00002C (0x0004)              
};
//0x000008
//ReuseGroupData[0x1DF24098]
struct FReuseGroupData
{
	double                                             m_fCoolDownTimeEnd;                               		// 0x000000 (0x0008)              
};
//0x000060
//CustomColours[0x1DF24030]
struct FCustomColours
{
	unsigned char                                      aDataBlob[0x60];                                  		// 0x000000 (0x0060)              PROPERTY: 
};
//0x000008
//CustomisationLimiterReplicationData[0x1DF23FC8]
struct FCustomisationLimiterReplicationData
{
	float                                              m_fReplenishDurationTimeStamp;                    		// 0x000000 (0x0004)              
	int                                                m_NumUsed;                                        		// 0x000004 (0x0004)              
};
//0x000028
//GameplayOverrideItem[0x1DF23F60]
struct FGameplayOverrideItem
{
	unsigned long                                      bOverridden : 1;                                  		// 0x000000 (0x0004) [0x00000001] 
	struct FInventoryItem                              Override;                                         		// 0x000004 (0x0024)              
};
//0x00001C
//ChatTag[0x1DF23EF8]
struct FChatTag
{
	struct FString                                     m_sTagText;                                       		// 0x000000 (0x000C)              
	int                                                m_eTagColour;                                     		// 0x00000C (0x0004)              
	int                                                m_nPriority;                                      		// 0x000010 (0x0004)              
	unsigned char                                      m_eChatTag;                                       		// 0x000014 (0x0001)              PROPERTY: etChatTag
	unsigned char                                      m_eRequiredPermission;                            		// 0x000015 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000016[0x2];                                   		// 0x000016 (0x0002) MISSED OFFSET
	unsigned long                                      m_bHiddenByDefault : 1;                           		// 0x000018 (0x0004) [0x00000001] 
};
//0x00000C
//ChatMonitorTestResult[0x1DF23E90]
struct FChatMonitorTestResult
{
	unsigned char                                      m_Result;                                         		// 0x000000 (0x0001)              PROPERTY: etChatMonitorTestResult
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	unsigned long                                      m_bDisallowed : 1;                                		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      m_bException : 1;                                 		// 0x000004 (0x0004) [0x00000002] 
	float                                              m_fRegexTime;                                     		// 0x000008 (0x0004)              
};
//0x000001
//etLoginType[0x1DF23E28]
struct FetLoginType
{
	unsigned char                                      Value;                                            		// 0x000000 (0x0001)              PROPERTY: 
};
//0x000030
//tHostingConfigFile[0x1DF23DC0]
struct FtHostingConfigFile
{
	unsigned char                                      m_eSDDKey;                                        		// 0x000000 (0x0001)              PROPERTY: etHostingConfigFile
	unsigned char                                      m_eType;                                          		// 0x000001 (0x0001)              PROPERTY: etHostingConfigFileType
	unsigned char                                      _0x000002[0x2];                                   		// 0x000002 (0x0002) MISSED OFFSET
	int                                                m_nPersistentId;                                  		// 0x000004 (0x0004)              
	struct FString                                     m_sFilename;                                      		// 0x000008 (0x000C)              
	struct FString                                     m_sPathname;                                      		// 0x000014 (0x000C)              
	int                                                m_nClientVersion;                                 		// 0x000020 (0x0004)              
	int                                                m_nServerVersion;                                 		// 0x000024 (0x0004)              
	unsigned long                                      m_bLoaded : 1;                                    		// 0x000028 (0x0004) [0x00000001] 
	int                                                m_nAttempts;                                      		// 0x00002C (0x0004)              
};
//0x000008
//tHostingDistrictInfo[0x1DF23D58]
struct FtHostingDistrictInfo
{
	int                                                m_nDistrictUID;                                   		// 0x000000 (0x0004)              
	int                                                m_nDistrictInstanceTypeSDD;                       		// 0x000004 (0x0004)              
};
//0x00001C
//tHostingInstanceInfo[0x1DF23CF0]
struct FtHostingInstanceInfo
{
	int                                                m_nDistrictUID;                                   		// 0x000000 (0x0004)              
	int                                                m_nInstanceNo;                                    		// 0x000004 (0x0004)              
	int                                                m_nEnforcers;                                     		// 0x000008 (0x0004)              
	int                                                m_nCriminals;                                     		// 0x00000C (0x0004)              
	int                                                m_nDistrictStatus;                                		// 0x000010 (0x0004)              
	int                                                m_nQueueSize;                                     		// 0x000014 (0x0004)              
	int                                                m_nThreat;                                        		// 0x000018 (0x0004)              
};
//0x000034
//tHostingFriendListMember[0x1DF23C88]
struct FtHostingFriendListMember
{
	int                                                m_nCharacterUID;                                  		// 0x000000 (0x0004)              
	struct FString                                     m_sCharacterName;                                 		// 0x000004 (0x000C)              
	int                                                m_nStatus;                                        		// 0x000010 (0x0004)              
	unsigned long                                      m_bLookingForGroup : 1;                           		// 0x000014 (0x0004) [0x00000001] 
	int                                                m_nGroupStatus;                                   		// 0x000018 (0x0004)              
	int                                                m_nGroupPublic;                                   		// 0x00001C (0x0004)              
	int                                                m_nGroupInvite;                                   		// 0x000020 (0x0004)              
	int                                                m_nDistrictUID;                                   		// 0x000024 (0x0004)              
	int                                                m_nInstanceNo;                                    		// 0x000028 (0x0004)              
	int                                                m_nDistrictStatus;                                		// 0x00002C (0x0004)              
	int                                                m_nFaction;                                       		// 0x000030 (0x0004)              
};
//0x00003C
//tHostingGroupMember[0x1DF23C20]
struct FtHostingGroupMember
{
	int                                                m_nAccountUID;                                    		// 0x000000 (0x0004)              
	int                                                m_nCharacterUID;                                  		// 0x000004 (0x0004)              
	struct FString                                     m_sCharacterName;                                 		// 0x000008 (0x000C)              
	int                                                m_nStatus;                                        		// 0x000014 (0x0004)              
	int                                                m_nDistrictUID;                                   		// 0x000018 (0x0004)              
	int                                                m_nInstanceNo;                                    		// 0x00001C (0x0004)              
	int                                                m_nDistrictStatus;                                		// 0x000020 (0x0004)              
	int                                                m_nRating;                                        		// 0x000024 (0x0004)              
	int                                                m_nThreat;                                        		// 0x000028 (0x0004)              
	int                                                m_nQueueDistrictUID;                              		// 0x00002C (0x0004)              
	int                                                m_nQueueInstanceNo;                               		// 0x000030 (0x0004)              
	int                                                m_nQueueSize;                                     		// 0x000034 (0x0004)              
	int                                                m_nQueuePosition;                                 		// 0x000038 (0x0004)              
};
//0x00001C
//tHostingGroupInfo[0x1DF23BB8]
struct FtHostingGroupInfo
{
	int                                                m_nCharacterUID;                                  		// 0x000000 (0x0004)              
	struct FString                                     m_sCharacterName;                                 		// 0x000004 (0x000C)              
	int                                                m_nMembers;                                       		// 0x000010 (0x0004)              
	int                                                m_nRating;                                        		// 0x000014 (0x0004)              
	int                                                m_nThreat;                                        		// 0x000018 (0x0004)              
};
//0x000010
//tHostingIgnoreListMember[0x1DF23B50]
struct FtHostingIgnoreListMember
{
	int                                                m_nCharacterUID;                                  		// 0x000000 (0x0004)              
	struct FString                                     m_sCharacterName;                                 		// 0x000004 (0x000C)              
};
//0x00001C
//DatabaseTimestamp[0x1DF23AE8]
struct FDatabaseTimestamp
{
	int                                                Year;                                             		// 0x000000 (0x0004)              
	int                                                Month;                                            		// 0x000004 (0x0004)              
	int                                                Day;                                              		// 0x000008 (0x0004)              
	int                                                Hour;                                             		// 0x00000C (0x0004)              
	int                                                Minute;                                           		// 0x000010 (0x0004)              
	int                                                Second;                                           		// 0x000014 (0x0004)              
	int                                                Fraction;                                         		// 0x000018 (0x0004)              
};
//0x000078
//tHostingLobbyCharacter[0x1DF23A80]
struct FtHostingLobbyCharacter
{
	int                                                m_nSlotNumber;                                    		// 0x000000 (0x0004)              
	struct FString                                     m_sCharacterName;                                 		// 0x000004 (0x000C)              
	unsigned char                                      m_eFaction;                                       		// 0x000010 (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x000011[0x3];                                   		// 0x000011 (0x0003) MISSED OFFSET
	int                                                m_nWorldUID;                                      		// 0x000014 (0x0004)              
	struct FString                                     m_sWorldName;                                     		// 0x000018 (0x000C)              
	int                                                m_nWorldStatus;                                   		// 0x000024 (0x0004)              
	unsigned char                                      m_eGender;                                        		// 0x000028 (0x0001)              PROPERTY: etGender
	unsigned char                                      _0x000029[0x3];                                   		// 0x000029 (0x0003) MISSED OFFSET
	int                                                m_nPlayTime;                                      		// 0x00002C (0x0004)              
	int                                                m_nRating;                                        		// 0x000030 (0x0004)              
	int                                                m_nThreat;                                        		// 0x000034 (0x0004)              
	int                                                m_nCash;                                          		// 0x000038 (0x0004)              
	int                                                m_nRewardTokens;                                  		// 0x00003C (0x0004)              
	struct FString                                     m_sClanName;                                      		// 0x000040 (0x000C)              
	TArray<unsigned char>                              m_aCustomisation;                                 		// 0x00004C (0x000C)              
	struct FDatabaseTimestamp                          m_LastLoginTime;                                  		// 0x000058 (0x001C)              
	unsigned long                                      m_bDeleteMe : 1;                                  		// 0x000074 (0x0004) [0x00000001] 
};
//0x000034
//tHostingLobbyWorld[0x1DF23A18]
struct FtHostingLobbyWorld
{
	int                                                m_nWorldUID;                                      		// 0x000000 (0x0004)              
	struct FString                                     m_sWorldName;                                     		// 0x000004 (0x000C)              
	int                                                m_nStatus;                                        		// 0x000010 (0x0004)              
	int                                                m_nPingMS;                                        		// 0x000014 (0x0004)              
	int                                                m_ePingStatus;                                    		// 0x000018 (0x0004)              
	unsigned char                                      m_eWorldPopulation;                               		// 0x00001C (0x0001)              PROPERTY: etPopulation
	unsigned char                                      m_eEnfFaction;                                    		// 0x00001D (0x0001)              PROPERTY: etWorldFaction
	unsigned char                                      m_eCrimFaction;                                   		// 0x00001E (0x0001)              PROPERTY: etWorldFaction
	unsigned char                                      _0x00001F[0x1];                                   		// 0x00001F (0x0001) MISSED OFFSET
	int                                                m_nPremiumOnly;                                   		// 0x000020 (0x0004)              
	struct FString                                     m_sServerRegion;                                  		// 0x000024 (0x000C)              
	int                                                m_nPingIPAddress;                                 		// 0x000030 (0x0004)              
};
//0x000005
//MailConstant[0x1DF239B0]
struct FMailConstant
{
	int                                                m_nValue;                                         		// 0x000000 (0x0004)              
	unsigned char                                      m_eMailConstant;                                  		// 0x000004 (0x0001)              PROPERTY: etMailConstant
};
//0x000005
//MailDuration[0x1DF23948]
struct FMailDuration
{
	int                                                m_nMinutes;                                       		// 0x000000 (0x0004)              
	unsigned char                                      m_eMailDuration;                                  		// 0x000004 (0x0001)              PROPERTY: etMailDuration
};
//0x00003C
//RedeemableReward[0x1DF238E0]
struct FRedeemableReward
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sMailBody;                                      		// 0x00000C (0x000C)              
	struct FString                                     m_sMailSubject;                                   		// 0x000018 (0x000C)              
	int                                                m_eHUDIcon;                                       		// 0x000024 (0x0004)              
	int                                                m_eRedeemableReward;                              		// 0x000028 (0x0004)              
	int                                                m_eReward;                                        		// 0x00002C (0x0004)              
	int                                                m_nKey;                                           		// 0x000030 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x000034 (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x000035[0x3];                                   		// 0x000035 (0x0003) MISSED OFFSET
	unsigned long                                      m_bIgnoreSddValidation : 1;                       		// 0x000038 (0x0004) [0x00000001] 
};
//0x000006
//tHostingDate[0x1DF23878]
struct FtHostingDate
{
	int                                                m_nYear;                                          		// 0x000000 (0x0004)              
	unsigned char                                      m_nMonth;                                         		// 0x000004 (0x0001)              PROPERTY: 
	unsigned char                                      m_nDay;                                           		// 0x000005 (0x0001)              PROPERTY: 
};
//0x000004
//tHostingTime[0x1DF23810]
struct FtHostingTime
{
	unsigned char                                      m_nHour;                                          		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      m_nMinute;                                        		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      m_nSecond;                                        		// 0x000002 (0x0001)              PROPERTY: 
	unsigned char                                      UNUSED;                                           		// 0x000003 (0x0001)              PROPERTY: 
};
//0x00000C
//tHostingDateTime[0x1DF237A8]
struct FtHostingDateTime
{
	struct FtHostingDate                               m_Date;                                           		// 0x000000 (0x0008)              
	struct FtHostingTime                               m_Time;                                           		// 0x000008 (0x0004)              
};
//0x000054
//tHostingMail[0x1DF23740]
struct FtHostingMail
{
	int                                                m_nMailUID;                                       		// 0x000000 (0x0004)              
	int                                                m_nFromUID;                                       		// 0x000004 (0x0004)              
	struct FString                                     m_sFrom;                                          		// 0x000008 (0x000C)              
	struct FString                                     m_sSubject;                                       		// 0x000014 (0x000C)              
	struct FString                                     m_sBody;                                          		// 0x000020 (0x000C)              
	struct FString                                     m_sItem;                                          		// 0x00002C (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x000038 (0x0004)              
	int                                                m_nCash;                                          		// 0x00003C (0x0004)              
	struct FtHostingDateTime                           m_sent;                                           		// 0x000040 (0x000C)              
	int                                                m_nRemainingTime;                                 		// 0x00004C (0x0004)              
	unsigned long                                      m_bRead : 1;                                      		// 0x000050 (0x0004) [0x00000001] 
	unsigned long                                      m_bHasBody : 1;                                   		// 0x000050 (0x0004) [0x00000002] 
	unsigned long                                      m_bHasItem : 1;                                   		// 0x000050 (0x0004) [0x00000004] 
	unsigned long                                      m_bFromGM : 1;                                    		// 0x000050 (0x0004) [0x00000008] 
	unsigned long                                      m_bReturned : 1;                                  		// 0x000050 (0x0004) [0x00000010] 
};
//0x000005
//MarketplaceConstant[0x1DF236D8]
struct FMarketplaceConstant
{
	float                                              m_fValue;                                         		// 0x000000 (0x0004)              
	unsigned char                                      m_eMarketplaceConstant;                           		// 0x000004 (0x0001)              PROPERTY: etMarketplaceConstant
};
//0x000011
//MarketplaceDuration[0x1DF23670]
struct FMarketplaceDuration
{
	struct FString                                     m_sDisplayString;                                 		// 0x000000 (0x000C)              
	int                                                m_nMinutes;                                       		// 0x00000C (0x0004)              
	unsigned char                                      m_eMarketplaceDuration;                           		// 0x000010 (0x0001)              PROPERTY: etMarketplaceDuration
};
//0x000011
//MarketplaceTimeLeft[0x1DF23608]
struct FMarketplaceTimeLeft
{
	struct FString                                     m_sDisplayString;                                 		// 0x000000 (0x000C)              
	int                                                m_nMinutes;                                       		// 0x00000C (0x0004)              
	unsigned char                                      m_eMarketplaceTimeLeft;                           		// 0x000010 (0x0001)              PROPERTY: etMarketplaceTimeLeft
};
//0x000050
//tHostingMarketplaceAuction[0x1DF235A0]
struct FtHostingMarketplaceAuction
{
	int                                                m_nAuctionUID;                                    		// 0x000000 (0x0004)              
	struct FString                                     m_sItemName;                                      		// 0x000004 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x000010 (0x0004)              
	int                                                m_nRatingOrCash;                                  		// 0x000014 (0x0004)              
	unsigned char                                      m_nItemFaction;                                   		// 0x000018 (0x0001)              PROPERTY: 
	unsigned char                                      m_nGender;                                        		// 0x000019 (0x0001)              PROPERTY: 
	unsigned char                                      _0x00001A[0x2];                                   		// 0x00001A (0x0002) MISSED OFFSET
	struct FString                                     m_sSellerName;                                    		// 0x00001C (0x000C)              
	int                                                m_nCurrentBid;                                    		// 0x000028 (0x0004)              
	int                                                m_nBuyoutPrice;                                   		// 0x00002C (0x0004)              
	int                                                m_nRemainingTime;                                 		// 0x000030 (0x0004)              
	unsigned long                                      m_bMyBid : 1;                                     		// 0x000034 (0x0004) [0x00000001] 
	unsigned char                                      m_nCamera;                                        		// 0x000038 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000039[0x3];                                   		// 0x000039 (0x0003) MISSED OFFSET
	struct FQWord                                      m_nMinimumBid;                                    		// 0x00003C (0x0008)              
	struct FString                                     m_sCharacterRestriction;                          		// 0x000044 (0x000C)              
};
//0x000044
//tHostingMarketplaceMyAuction[0x1DF23538]
struct FtHostingMarketplaceMyAuction
{
	int                                                m_nAuctionUID;                                    		// 0x000000 (0x0004)              
	struct FString                                     m_sItemName;                                      		// 0x000004 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x000010 (0x0004)              
	int                                                m_nRatingOrCash;                                  		// 0x000014 (0x0004)              
	unsigned char                                      m_nItemFaction;                                   		// 0x000018 (0x0001)              PROPERTY: 
	unsigned char                                      m_nGender;                                        		// 0x000019 (0x0001)              PROPERTY: 
	unsigned char                                      _0x00001A[0x2];                                   		// 0x00001A (0x0002) MISSED OFFSET
	struct FString                                     m_sSellerName;                                    		// 0x00001C (0x000C)              
	int                                                m_nCurrentBid;                                    		// 0x000028 (0x0004)              
	int                                                m_nBuyoutPrice;                                   		// 0x00002C (0x0004)              
	int                                                m_nRemainingTime;                                 		// 0x000030 (0x0004)              
	unsigned char                                      m_nCamera;                                        		// 0x000034 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000035[0x3];                                   		// 0x000035 (0x0003) MISSED OFFSET
	struct FString                                     m_sCharacterRestriction;                          		// 0x000038 (0x000C)              
};
//0x000048
//tHostingMarketplaceMyBid[0x1DF234D0]
struct FtHostingMarketplaceMyBid
{
	int                                                m_nAuctionUID;                                    		// 0x000000 (0x0004)              
	struct FString                                     m_sItemName;                                      		// 0x000004 (0x000C)              
	int                                                m_eInventoryItemType;                             		// 0x000010 (0x0004)              
	int                                                m_nRatingOrCash;                                  		// 0x000014 (0x0004)              
	unsigned char                                      m_nItemFaction;                                   		// 0x000018 (0x0001)              PROPERTY: 
	unsigned char                                      m_nGender;                                        		// 0x000019 (0x0001)              PROPERTY: 
	unsigned char                                      _0x00001A[0x2];                                   		// 0x00001A (0x0002) MISSED OFFSET
	struct FString                                     m_sSellerName;                                    		// 0x00001C (0x000C)              
	int                                                m_nCurrentBid;                                    		// 0x000028 (0x0004)              
	int                                                m_nMyBid;                                         		// 0x00002C (0x0004)              
	int                                                m_nBuyoutPrice;                                   		// 0x000030 (0x0004)              
	int                                                m_nRemainingTime;                                 		// 0x000034 (0x0004)              
	unsigned char                                      m_nCamera;                                        		// 0x000038 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000039[0x3];                                   		// 0x000039 (0x0003) MISSED OFFSET
	struct FString                                     m_sCharacterRestriction;                          		// 0x00003C (0x000C)              
};
//0x000020
//tHostingMarketplaceAuctionListSearchParams[0x1DF23468]
struct FtHostingMarketplaceAuctionListSearchParams
{
	unsigned char                                      m_eSort;                                          		// 0x000000 (0x0001)              PROPERTY: etMarketplaceSort
	unsigned char                                      m_eSearch;                                        		// 0x000001 (0x0001)              PROPERTY: etMarketplaceSearch
	unsigned char                                      _0x000002[0x2];                                   		// 0x000002 (0x0002) MISSED OFFSET
	struct FString                                     m_sSearch;                                        		// 0x000004 (0x000C)              
	int                                                m_nCategory;                                      		// 0x000010 (0x0004)              
	int                                                m_nSubCategory;                                   		// 0x000014 (0x0004)              
	int                                                m_nRatingOrCashStart;                             		// 0x000018 (0x0004)              
	int                                                m_nRatingOrCashEnd;                               		// 0x00001C (0x0004)              
};
//0x00000C
//tHostingMarketplaceListPos[0x1DF23400]
struct FtHostingMarketplaceListPos
{
	unsigned char                                      m_eListType;                                      		// 0x000000 (0x0001)              PROPERTY: etMarketplaceListType
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	int                                                m_nCurIndex;                                      		// 0x000004 (0x0004)              
	int                                                m_nLastIndex;                                     		// 0x000008 (0x0004)              
};
//0x000014
//tAuthenticationKey[0x1DF23398]
struct FtAuthenticationKey
{
	unsigned char                                      m_array[0x14];                                    		// 0x000000 (0x0014)              PROPERTY: 
};
//0x0000F8
//DataChunk[0x1DF23330]
struct FDataChunk
{
	unsigned char                                      Data[0xF8];                                       		// 0x000000 (0x00F8)              PROPERTY: 
};
//0x000020
//MusicStudioDataChunk[0x1DF232C8]
struct FMusicStudioDataChunk
{
	unsigned char                                      Data[0x20];                                       		// 0x000000 (0x0020)              PROPERTY: 
};
//0x000040
//MusicStudioDataChunk[0x1DF23260]
struct FMusicStudioDataChunk
{
	unsigned char                                      Data[0x40];                                       		// 0x000000 (0x0040)              PROPERTY: 
};
//0x000060
//MusicStudioDataChunk[0x1DF231F8]
struct FMusicStudioDataChunk
{
	unsigned char                                      Data[0x60];                                       		// 0x000000 (0x0060)              PROPERTY: 
};
//0x000080
//MusicStudioDataChunk[0x1DF23190]
struct FMusicStudioDataChunk
{
	unsigned char                                      Data[0x80];                                       		// 0x000000 (0x0080)              PROPERTY: 
};
//0x0000A0
//MusicStudioDataChunk[0x1DF23128]
struct FMusicStudioDataChunk
{
	unsigned char                                      Data[0xA0];                                       		// 0x000000 (0x00A0)              PROPERTY: 
};
//0x0000C0
//MusicStudioDataChunk[0x1DF230C0]
struct FMusicStudioDataChunk
{
	unsigned char                                      Data[0xC0];                                       		// 0x000000 (0x00C0)              PROPERTY: 
};
//0x0000E0
//MusicStudioDataChunk[0x1DF23058]
struct FMusicStudioDataChunk
{
	unsigned char                                      Data[0xE0];                                       		// 0x000000 (0x00E0)              PROPERTY: 
};
//0x0000F8
//MusicStudioDataChunk[0x1DF22FF0]
struct FMusicStudioDataChunk
{
	unsigned char                                      Data[0xF8];                                       		// 0x000000 (0x00F8)              PROPERTY: 
};
//0x00003C
//UploadItemCustomisationInfo[0x1DF22F88]
struct FUploadItemCustomisationInfo
{
	struct FGuid                                       nGuid;                                            		// 0x000000 (0x0010)              
	struct FGuid                                       nOriginalItemGuid;                                		// 0x000010 (0x0010)              
	int                                                eCategory;                                        		// 0x000020 (0x0004)              
	int                                                nDataSize;                                        		// 0x000024 (0x0004)              
	int                                                nCurrentChunk;                                    		// 0x000028 (0x0004)              
	unsigned long                                      bComplete : 1;                                    		// 0x00002C (0x0004) [0x00000001] 
	TArray<unsigned char>                              aData;                                            		// 0x000030 (0x000C)              
};
//0x000008
//tChunk[0x1DF22F20]
struct FtChunk
{
	int                                                m_nCharacterUID;                                  		// 0x000000 (0x0004)              
	int                                                m_nIndex;                                         		// 0x000004 (0x0004)              
};
//0x0000ED
//FXMaterialImpact[0x1DF22EB8]
struct FFXMaterialImpact
{
	struct FString                                     m_sExplosiveImpactVFX;                            		// 0x000000 (0x000C)              
	struct FString                                     m_sHeavyExitVFX;                                  		// 0x00000C (0x000C)              
	struct FString                                     m_sHeavyFootfallVFX;                              		// 0x000018 (0x000C)              
	struct FString                                     m_sHeavyImpactVFX;                                		// 0x000024 (0x000C)              
	struct FString                                     m_sLightFootfallVFX;                              		// 0x000030 (0x000C)              
	struct FString                                     m_sMaterialDescription;                           		// 0x00003C (0x000C)              
	struct FString                                     m_sMediumExitVFX;                                 		// 0x000048 (0x000C)              
	struct FString                                     m_sMediumFootfallVFX;                             		// 0x000054 (0x000C)              
	struct FString                                     m_sMediumImpactVFX;                               		// 0x000060 (0x000C)              
	struct FString                                     m_sMeleeImpactVFX;                                		// 0x00006C (0x000C)              
	struct FString                                     m_sNonLethalImpactVFX;                            		// 0x000078 (0x000C)              
	struct FString                                     m_sRBCollisionLargeVFX;                           		// 0x000084 (0x000C)              
	struct FString                                     m_sRBCollisionSmallVFX;                           		// 0x000090 (0x000C)              
	struct FString                                     m_sRBCollisionVFX;                                		// 0x00009C (0x000C)              
	struct FString                                     m_sRBScrapeVFX;                                   		// 0x0000A8 (0x000C)              
	struct FString                                     m_sShotImpactVFX;                                 		// 0x0000B4 (0x000C)              
	struct FString                                     m_sSmallExitVFX;                                  		// 0x0000C0 (0x000C)              
	struct FString                                     m_sSmallImpactVFX;                                		// 0x0000CC (0x000C)              
	struct FString                                     m_sWheelSmokeVFX;                                 		// 0x0000D8 (0x000C)              
	float                                              m_fHardnessLower;                                 		// 0x0000E4 (0x0004)              
	float                                              m_fHardnessUpper;                                 		// 0x0000E8 (0x0004)              
	unsigned char                                      m_eFXMaterialImpact;                              		// 0x0000EC (0x0001)              PROPERTY: etFXMaterialImpact
};
//0x000005
//SpawnConstant[0x1DF22E50]
struct FSpawnConstant
{
	float                                              m_fValue;                                         		// 0x000000 (0x0004)              
	unsigned char                                      m_eSpawnConstant;                                 		// 0x000004 (0x0001)              PROPERTY: etSpawnConstant
};
//0x00003E
//SpawnVariable[0x1DF22DE8]
struct FSpawnVariable
{
	float                                              m_fSpawnDistanceAFK;                              		// 0x000000 (0x0004)              
	float                                              m_fSpawnDistanceObjectiveMaximum;                 		// 0x000004 (0x0004)              
	float                                              m_fSpawnDistanceObjectiveMinimum;                 		// 0x000008 (0x0004)              
	float                                              m_fSpawnDistanceOpponentIgnored;                  		// 0x00000C (0x0004)              
	float                                              m_fSpawnDistanceOpponentInvalid;                  		// 0x000010 (0x0004)              
	float                                              m_fSpawnDistanceOppositionSpawnZone;              		// 0x000014 (0x0004)              
	float                                              m_fSpawnDistanceOtherSpawnZone;                   		// 0x000018 (0x0004)              
	float                                              m_fSpawnDistancePlayer;                           		// 0x00001C (0x0004)              
	float                                              m_fSpawnDistanceTeamMateLiving;                   		// 0x000020 (0x0004)              
	float                                              m_fSpawnVehicleDistanceOpponent;                  		// 0x000024 (0x0004)              
	float                                              m_fSpawnVehicleDistancePlayerMaximum;             		// 0x000028 (0x0004)              
	float                                              m_fSpawnVehicleDistancePlayerMinimum;             		// 0x00002C (0x0004)              
	float                                              m_fSpawnVehicleHeightMaximum;                     		// 0x000030 (0x0004)              
	float                                              m_fSpawnWo;                                       		// 0x000034 (0x0004)              
	float                                              m_fSpawnWp;                                       		// 0x000038 (0x0004)              
	unsigned char                                      m_eRelaxationRule;                                		// 0x00003C (0x0001)              PROPERTY: etSpawnVariable
	unsigned char                                      m_eSpawnVariable;                                 		// 0x00003D (0x0001)              PROPERTY: etSpawnVariable
};
//0x000011
//FeedbackMessage[0x1DF22D80]
struct FFeedbackMessage
{
	struct FString                                     m_sFeedbackMessage;                               		// 0x000000 (0x000C)              
	int                                                m_nSecondaryKey;                                  		// 0x00000C (0x0004)              
	unsigned char                                      m_eFeedbackMessage;                               		// 0x000010 (0x0001)              PROPERTY: etFeedbackMessage
};
//0x00006C
//CharacterData[0x1DF22D18]
struct FCharacterData
{
	int                                                m_aCharacterFnMods[0x3];                          		// 0x000000 (0x000C)              
	int                                                m_nEquipedUsable;                                 		// 0x00000C (0x0004)              
	int                                                m_nWeaponPrimary;                                 		// 0x000010 (0x0004)              
	int                                                m_aWeaponPrimaryFnMods[0x3];                      		// 0x000014 (0x000C)              
	int                                                m_nWeaponSecondary;                               		// 0x000020 (0x0004)              
	int                                                m_aWeaponSecondaryFnMods[0x3];                    		// 0x000024 (0x000C)              
	int                                                m_nWeaponGrenade;                                 		// 0x000030 (0x0004)              
	struct FString                                     m_sGraffitiSymbolName;                            		// 0x000034 (0x000C)              
	struct FString                                     m_sThemeName;                                     		// 0x000040 (0x000C)              
	struct FGuid                                       m_nGraffitiCustomisationGuid;                     		// 0x00004C (0x0010)              
	struct FGuid                                       m_nThemeGuid;                                     		// 0x00005C (0x0010)              
};
//0x000030
//VehicleData[0x1DF22CB0]
struct FVehicleData
{
	int                                                m_nBaseVehicleType;                               		// 0x000000 (0x0004)              
	struct FString                                     m_sVehicleName;                                   		// 0x000004 (0x000C)              
	int                                                m_aVehicleFnMods[0x4];                            		// 0x000010 (0x0010)              
	struct FGuid                                       m_nVehicleCustomisationGuid;                      		// 0x000020 (0x0010)              
};
//0x000014
//SymbolData[0x1DF22C48]
struct FSymbolData
{
	int                                                m_nCharacterUID;                                  		// 0x000000 (0x0004)              
	struct FGuid                                       m_nGraffitiCustomisationGuid;                     		// 0x000004 (0x0010)              
};
//0x000168
//CharacterMedalData[0x1DF22BE0]
struct FCharacterMedalData
{
	int                                                m_aMedalProgress[0x5A];                           		// 0x000000 (0x0168)              
};
//0x000010
//ReticuleLinePickInfo[0x1DF22B78]
struct FReticuleLinePickInfo
{
	class AActor*                                      m_Actor;                                          		// 0x000000 (0x0004)              
	FVector3                                           m_Location;                                       		// 0x000004 (0x000C)              
};
//0x000184
//SteamAuthBlobChunk[0x1DF22B10]
struct FSteamAuthBlobChunk
{
	unsigned char                                      m_BlobData[0x180];                                		// 0x000000 (0x0180)              PROPERTY: 
	int                                                m_nTotalBlobLength;                               		// 0x000180 (0x0004)              
};
//0x000004
//PackedHitNormal[0x1DF22AA8]
struct FPackedHitNormal
{
	unsigned char                                      X;                                                		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      Y;                                                		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      Z;                                                		// 0x000002 (0x0001)              PROPERTY: 
	unsigned char                                      m_vfxMaterialIndex;                               		// 0x000003 (0x0001)              PROPERTY: 
};
//0x000038
//SharedHitData[0x1DF22A40]
struct FSharedHitData
{
	FVector3                                           m_HitStart;                                       		// 0x000000 (0x000C)              
	FVector3                                           m_HitEnd;                                         		// 0x00000C (0x000C)              
	struct FPackedHitNormal                            m_HitNormal;                                      		// 0x000018 (0x0004)              
	class AcAPBPawn*                                   m_HitInstigator;                                  		// 0x00001C (0x0004)              
	int                                                m_AudioMaterialIndex;                             		// 0x000020 (0x0004)              
	float                                              m_AudioSilencerRange;                             		// 0x000024 (0x0004)              
	int                                                m_nInventoryItemType;                             		// 0x000028 (0x0004)              
	int                                                m_nItemAttachementVisual;                         		// 0x00002C (0x0004)              
	unsigned char                                      m_nHealthDamageAmount;                            		// 0x000030 (0x0001)              PROPERTY: 
	unsigned char                                      m_nStaminaDamageAmount;                           		// 0x000031 (0x0001)              PROPERTY: 
	unsigned char                                      m_nBurstShots;                                    		// 0x000032 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000033[0x1];                                   		// 0x000033 (0x0001) MISSED OFFSET
	unsigned long                                      m_bTracer : 1;                                    		// 0x000034 (0x0004) [0x00000001] 
	unsigned long                                      m_bHitTarget : 1;                                 		// 0x000034 (0x0004) [0x00000002] 
	unsigned long                                      m_bDynamic : 1;                                   		// 0x000034 (0x0004) [0x00000004] 
	unsigned long                                      m_bFirstShot : 1;                                 		// 0x000034 (0x0004) [0x00000008] 
};
//0x000010
//DynamicHitData[0x1DF229D8]
struct FDynamicHitData
{
	FVector3                                           m_HitOffset;                                      		// 0x000000 (0x000C)              
	class AActor*                                      m_HitTarget;                                      		// 0x00000C (0x0004)              
};
//0x000058
//HitNotificationRecord[0x1DF22970]
struct FHitNotificationRecord
{
	int                                                m_ShotID;                                         		// 0x000000 (0x0004)              
	double                                             m_TimeStamp;                                      		// 0x000004 (0x0008)              
	float                                              m_Priority;                                       		// 0x00000C (0x0004)              
	struct FSharedHitData                              m_HitData;                                        		// 0x000010 (0x0038)              
	struct FDynamicHitData                             m_DynamicData;                                    		// 0x000048 (0x0010)              
};
//0x000020
//MusicPlaybackInfo[0x1DF22908]
struct FMusicPlaybackInfo
{
	int                                                m_nOwnerCharacterUID;                             		// 0x000000 (0x0004)              
	struct FGuid                                       m_MusicStudioSongGuid;                            		// 0x000004 (0x0010)              
	int                                                m_nInitialPlaybackServerTime;                     		// 0x000014 (0x0004)              
	unsigned long                                      m_bMp3Playing : 1;                                		// 0x000018 (0x0004) [0x00000001] 
	int                                                m_nEventIndex;                                    		// 0x00001C (0x0004)              
};
//0x000030
//MusicNameInfo[0x1DF228A0]
struct FMusicNameInfo
{
	struct FString                                     m_sTrackName;                                     		// 0x000000 (0x000C)              
	struct FString                                     m_sArtistName;                                    		// 0x00000C (0x000C)              
	struct FString                                     m_sAlbumName;                                     		// 0x000018 (0x000C)              
	struct FString                                     m_sGenre;                                         		// 0x000024 (0x000C)              
};
//0x00001C
//PredictedADAInfo[0x1DF22838]
struct FPredictedADAInfo
{
	double                                             m_TimeStamp;                                      		// 0x000000 (0x0008)              
	class AcAnimationDrivenTrigger*                    m_pTrigger;                                       		// 0x000008 (0x0004)              
	class UcAnimationDescriptor*                       m_pAnimation;                                     		// 0x00000C (0x0004)              
	float                                              m_ClientLocationX;                                		// 0x000010 (0x0004)              
	float                                              m_ClientLocationY;                                		// 0x000014 (0x0004)              
	float                                              m_ClientLocationZ;                                		// 0x000018 (0x0004)              
};
//0x00005C
//RespawnInfo[0x1DF227D0]
struct FRespawnInfo
{
	int                                                m_nKillerCharacterUID;                            		// 0x000000 (0x0004)              
	int                                                m_nInventoryItemTypeID;                           		// 0x000004 (0x0004)              
	int                                                m_nWeaponFnModIDs[0x3];                           		// 0x000008 (0x000C)              
	int                                                m_nCharacterFnModIDs[0x4];                        		// 0x000014 (0x0010)              
	unsigned long                                      m_bSuicide : 1;                                   		// 0x000024 (0x0004) [0x00000001] 
	unsigned long                                      m_bTeamKill : 1;                                  		// 0x000024 (0x0004) [0x00000002] 
	unsigned long                                      m_bArrested : 1;                                  		// 0x000024 (0x0004) [0x00000004] 
	unsigned long                                      m_bElectiveSpawn : 1;                             		// 0x000024 (0x0004) [0x00000008] 
	float                                              m_fCorpseTime;                                    		// 0x000028 (0x0004)              
	FVector3                                           vMissionSpawnZoneLocation;                        		// 0x00002C (0x000C)              
	FRotator                                           vMissionSpawnZoneRotation;                        		// 0x000038 (0x000C)              
	FVector3                                           vNormalSpawnZoneLocation;                         		// 0x000044 (0x000C)              
	FRotator                                           vNormalSpawnZoneRotation;                         		// 0x000050 (0x000C)              
};
//0x000014
//ContactPair[0x1DF22768]
struct FContactPair
{
	struct FGuid                                       m_nGuid;                                          		// 0x000000 (0x0010)              
	int                                                m_nStanding;                                      		// 0x000010 (0x0004)              
};
//0x000064
//ContactPairPacket[0x1DF22700]
struct FContactPairPacket
{
	struct FContactPair                                m_aUnlockedContacts[0x5];                         		// 0x000000 (0x0064)              
};
//0x000014
//ClientItemOperationInfo[0x1DF22698]
struct FClientItemOperationInfo
{
	unsigned long                                      bInUse : 1;                                       		// 0x000000 (0x0004) [0x00000001] 
	DWORD                                              pUserData;                                        		// 0x000004 (0x0004)              
	TArray<unsigned char>                              aData;                                            		// 0x000008 (0x000C)              
};
//0x000024
//QueuedItemOperation[0x1DF22630]
struct FQueuedItemOperation
{
	unsigned char                                      eCategory;                                        		// 0x000000 (0x0001)              PROPERTY: etInventoryItemCategory
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FGuid                                       nItemGuid;                                        		// 0x000004 (0x0010)              
	unsigned char                                      eOperation;                                       		// 0x000014 (0x0001)              PROPERTY: etItemOperation
	unsigned char                                      _0x000015[0x3];                                   		// 0x000015 (0x0003) MISSED OFFSET
	struct FString                                     sParam;                                           		// 0x000018 (0x000C)              
};
//0x00001C
//ProfilingSequenceEntry[0x1DF225C8]
struct FProfilingSequenceEntry
{
	FVector3                                           Location;                                         		// 0x000000 (0x000C)              
	FRotator                                           Rotation;                                         		// 0x00000C (0x000C)              
	float                                              Duration;                                         		// 0x000018 (0x0004)              
};
//0x000020
//CameraView[0x1DF22560]
struct FCameraView
{
	FVector3                                           Position;                                         		// 0x000000 (0x000C)              
	FVector3                                           Target;                                           		// 0x00000C (0x000C)              
	float                                              MaxTiltAngle;                                     		// 0x000018 (0x0004)              
	float                                              FOV;                                              		// 0x00001C (0x0004)              
};
//0x000008
//InputData[0x1DF224F8]
struct FInputData
{
	float                                              DeltaXAxis;                                       		// 0x000000 (0x0004)              
	unsigned long                                      bKeyWasReleased : 1;                              		// 0x000004 (0x0004) [0x00000001] 
};
//0x000008
//SceneLayer[0x1DF22490]
struct FSceneLayer
{
	int                                                m_eSceneLayer;                                    		// 0x000000 (0x0004)              
	unsigned long                                      m_bLimitOpenFrequency : 1;                        		// 0x000004 (0x0004) [0x00000001] 
};
//0x000020
//HUDScenes[0x1DF22428]
struct FHUDScenes
{
	struct FString                                     m_sDataStoreTag;                                  		// 0x000000 (0x000C)              
	struct FString                                     m_sPackageRef;                                    		// 0x00000C (0x000C)              
	int                                                m_eHUDScenes;                                     		// 0x000018 (0x0004)              
	unsigned long                                      m_bOpenInLoginLevel : 1;                          		// 0x00001C (0x0004) [0x00000001] 
	unsigned long                                      m_bStartHidden : 1;                               		// 0x00001C (0x0004) [0x00000002] 
	unsigned long                                      m_bUpdateWhileDead : 1;                           		// 0x00001C (0x0004) [0x00000004] 
};
//0x000019
//HUDReticule[0x1DF223C0]
struct FHUDReticule
{
	struct FString                                     m_sPackageRef;                                    		// 0x000000 (0x000C)              
	int                                                m_eColourDefault;                                 		// 0x00000C (0x0004)              
	int                                                m_eColourEnemy;                                   		// 0x000010 (0x0004)              
	int                                                m_eColourFriend;                                  		// 0x000014 (0x0004)              
	unsigned char                                      m_eHUDReticule;                                   		// 0x000018 (0x0001)              PROPERTY: etHUDReticule
};
//0x00005C
//HUDMessage[0x1DF22358]
struct FHUDMessage
{
	struct FString                                     m_sAudioCue;                                      		// 0x000000 (0x000C)              
	struct FString                                     m_sChatText;                                      		// 0x00000C (0x000C)              
	struct FString                                     m_sDisplayText;                                   		// 0x000018 (0x000C)              
	struct FString                                     m_sFemaleText;                                    		// 0x000024 (0x000C)              
	int                                                m_eCategory;                                      		// 0x000030 (0x0004)              
	int                                                m_eHUDMessage;                                    		// 0x000034 (0x0004)              
	int                                                m_eNextMessage;                                   		// 0x000038 (0x0004)              
	int                                                m_ePopupDialogOverride;                           		// 0x00003C (0x0004)              
	int                                                m_ePosition;                                      		// 0x000040 (0x0004)              
	int                                                m_eScene;                                         		// 0x000044 (0x0004)              
	int                                                m_eUIStyle;                                       		// 0x000048 (0x0004)              
	float                                              m_fDisplayTime;                                   		// 0x00004C (0x0004)              
	float                                              m_fQueueTimeout;                                  		// 0x000050 (0x0004)              
	unsigned char                                      m_ePriority;                                      		// 0x000054 (0x0001)              PROPERTY: etHUDMessageRank
	unsigned char                                      _0x000055[0x3];                                   		// 0x000055 (0x0003) MISSED OFFSET
	unsigned long                                      m_bAllowMultiples : 1;                            		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      m_bForAction : 1;                                 		// 0x000058 (0x0004) [0x00000002] 
	unsigned long                                      m_bForCeremony : 1;                               		// 0x000058 (0x0004) [0x00000004] 
	unsigned long                                      m_bForChat : 1;                                   		// 0x000058 (0x0004) [0x00000008] 
	unsigned long                                      m_bForCombat : 1;                                 		// 0x000058 (0x0004) [0x00000010] 
	unsigned long                                      m_bForDistrictMap : 1;                            		// 0x000058 (0x0004) [0x00000020] 
	unsigned long                                      m_bSuppressMain : 1;                              		// 0x000058 (0x0004) [0x00000040] 
};
//0x000015
//HUDMessageCategory[0x1DF222F0]
struct FHUDMessageCategory
{
	struct FString                                     m_sDisplayText;                                   		// 0x000000 (0x000C)              
	int                                                m_eHUDMessageCategory;                            		// 0x00000C (0x0004)              
	int                                                m_eIcon;                                          		// 0x000010 (0x0004)              
	unsigned char                                      m_eChatCategory;                                  		// 0x000014 (0x0001)              PROPERTY: etChatMessageCategory
};
//0x000010
//HUDMessageScene[0x1DF22288]
struct FHUDMessageScene
{
	struct FString                                     m_sPackageRef;                                    		// 0x000000 (0x000C)              
	int                                                m_eHUDMessageScene;                               		// 0x00000C (0x0004)              
};
//0x00000D
//HUDInfoBrowser[0x1DF22220]
struct FHUDInfoBrowser
{
	struct FString                                     m_sPackageRef;                                    		// 0x000000 (0x000C)              
	unsigned char                                      m_eHUDInfoBrowser;                                		// 0x00000C (0x0001)              PROPERTY: etHUDInfoBrowser
};
//0x00000C
//HUDIcon[0x1DF221B8]
struct FHUDIcon
{
	int                                                m_eHUDIcon;                                       		// 0x000000 (0x0004)              
	int                                                m_nIconColumn;                                    		// 0x000004 (0x0004)              
	int                                                m_nIconRow;                                       		// 0x000008 (0x0004)              
};
//0x000010
//HUDIconCombo[0x1DF22150]
struct FHUDIconCombo
{
	int                                                m_eHUDIconCombo;                                  		// 0x000000 (0x0004)              
	int                                                m_eLayer1;                                        		// 0x000004 (0x0004)              
	int                                                m_eLayer2;                                        		// 0x000008 (0x0004)              
	int                                                m_eLayer3;                                        		// 0x00000C (0x0004)              
};
//0x000020
//CharacterInteractionMenu[0x1DF220E8]
struct FCharacterInteractionMenu
{
	struct FString                                     m_sIcon;                                          		// 0x000000 (0x000C)              
	struct FString                                     m_sID;                                            		// 0x00000C (0x000C)              
	int                                                m_nPosition;                                      		// 0x000018 (0x0004)              
	unsigned long                                      m_bSameDistrict : 1;                              		// 0x00001C (0x0004) [0x00000001] 
	unsigned long                                      m_bSameFaction : 1;                               		// 0x00001C (0x0004) [0x00000002] 
};
//0x000034
//HUDPopUpMenuItem[0x1DF22080]
struct FHUDPopUpMenuItem
{
	struct FString                                     m_sConsoleCommand;                                		// 0x000000 (0x000C)              
	struct FString                                     m_sKeyPress;                                      		// 0x00000C (0x000C)              
	struct FString                                     m_sLocalisationText;                              		// 0x000018 (0x000C)              
	int                                                m_eHUDPopUpMenuItem;                              		// 0x000024 (0x0004)              
	int                                                m_eImage;                                         		// 0x000028 (0x0004)              
	unsigned char                                      m_eEnabledRule;                                   		// 0x00002C (0x0001)              PROPERTY: etHUDPopUpItemRule
	unsigned char                                      _0x00002D[0x3];                                   		// 0x00002D (0x0003) MISSED OFFSET
	unsigned long                                      m_bDisplayKeyBinding : 1;                         		// 0x000030 (0x0004) [0x00000001] 
	unsigned long                                      m_bEnableWhenDead : 1;                            		// 0x000030 (0x0004) [0x00000002] 
};
//0x000018
//HUDColour[0x1DF22018]
struct FHUDColour
{
	int                                                m_eHUDColour;                                     		// 0x000000 (0x0004)              
	int                                                m_eOverrideColour;                                		// 0x000004 (0x0004)              
	int                                                m_nA;                                             		// 0x000008 (0x0004)              
	int                                                m_nB;                                             		// 0x00000C (0x0004)              
	int                                                m_nG;                                             		// 0x000010 (0x0004)              
	int                                                m_nR;                                             		// 0x000014 (0x0004)              
};
//0x000018
//HUDRadarMarker[0x1DF21FB0]
struct FHUDRadarMarker
{
	int                                                m_eHUDRadarMarker;                                		// 0x000000 (0x0004)              
	int                                                m_eIcon;                                          		// 0x000004 (0x0004)              
	int                                                m_eIconSurround;                                  		// 0x000008 (0x0004)              
	int                                                m_nIconSize;                                      		// 0x00000C (0x0004)              
	int                                                m_nIconSurroundSize;                              		// 0x000010 (0x0004)              
	unsigned long                                      m_bShowOnElectiveSpawnMap : 1;                    		// 0x000014 (0x0004) [0x00000001] 
	unsigned long                                      m_bValidInMission : 1;                            		// 0x000014 (0x0004) [0x00000002] 
	unsigned long                                      m_bValidOutOfMission : 1;                         		// 0x000014 (0x0004) [0x00000004] 
};
//0x000030
//HUDTextureIcon[0x1DF21F48]
struct FHUDTextureIcon
{
	struct FString                                     m_sIconSetName;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sMovieName;                                     		// 0x00000C (0x000C)              
	struct FString                                     m_sPackageRef;                                    		// 0x000018 (0x000C)              
	int                                                m_eHUDTextureIcon;                                		// 0x000024 (0x0004)              
	int                                                m_eTexturePageIcon;                               		// 0x000028 (0x0004)              
	int                                                m_nFrameNumber;                                   		// 0x00002C (0x0004)              
};
//0x000010
//HUDTexturePage[0x1DF21EE0]
struct FHUDTexturePage
{
	struct FString                                     m_sPackageName;                                   		// 0x000000 (0x000C)              
	int                                                m_eHUDTexturePage;                                		// 0x00000C (0x0004)              
};
//0x000018
//HUDTexturePageIcon[0x1DF21E78]
struct FHUDTexturePageIcon
{
	int                                                m_eHUDTexturePageIcon;                            		// 0x000000 (0x0004)              
	int                                                m_eTexturePage;                                   		// 0x000004 (0x0004)              
	int                                                m_nU;                                             		// 0x000008 (0x0004)              
	int                                                m_nUL;                                            		// 0x00000C (0x0004)              
	int                                                m_nV;                                             		// 0x000010 (0x0004)              
	int                                                m_nVL;                                            		// 0x000014 (0x0004)              
};
//0x000010
//HUDEffect[0x1DF21E10]
struct FHUDEffect
{
	struct FString                                     m_sMaterialRef;                                   		// 0x000000 (0x000C)              
	int                                                m_eHUDEffect;                                     		// 0x00000C (0x0004)              
};
//0x000011
//HUDConstant[0x1DF21DA8]
struct FHUDConstant
{
	struct FString                                     m_sComment;                                       		// 0x000000 (0x000C)              
	float                                              m_fValue;                                         		// 0x00000C (0x0004)              
	unsigned char                                      m_eHUDConstant;                                   		// 0x000010 (0x0001)              PROPERTY: etHUDConstant
};
//0x000014
//HUDConstantBool[0x1DF21D40]
struct FHUDConstantBool
{
	struct FString                                     m_sComment;                                       		// 0x000000 (0x000C)              
	unsigned char                                      m_eHUDConstantBool;                               		// 0x00000C (0x0001)              PROPERTY: etHUDConstantBool
	unsigned char                                      _0x00000D[0x3];                                   		// 0x00000D (0x0003) MISSED OFFSET
	unsigned long                                      m_bValue : 1;                                     		// 0x000010 (0x0004) [0x00000001] 
};
//0x00001C
//HUDConstantString[0x1DF21CD8]
struct FHUDConstantString
{
	struct FString                                     m_sComment;                                       		// 0x000000 (0x000C)              
	struct FString                                     m_sText;                                          		// 0x00000C (0x000C)              
	int                                                m_eHUDConstantString;                             		// 0x000018 (0x0004)              
};
//0x000020
//HUDMarkerVisual[0x1DF21C70]
struct FHUDMarkerVisual
{
	int                                                m_eColourProfile;                                 		// 0x000000 (0x0004)              
	int                                                m_eDistrictMapMarker;                             		// 0x000004 (0x0004)              
	int                                                m_eHUDMarkerOffset;                               		// 0x000008 (0x0004)              
	int                                                m_eHUDMarkerVisual;                               		// 0x00000C (0x0004)              
	int                                                m_eRadarMarker;                                   		// 0x000010 (0x0004)              
	int                                                m_eTaskMarker;                                    		// 0x000014 (0x0004)              
	unsigned char                                      m_eCategory;                                      		// 0x000018 (0x0001)              PROPERTY: etHUDMarkerCategory
	unsigned char                                      _0x000019[0x3];                                   		// 0x000019 (0x0003) MISSED OFFSET
	unsigned long                                      m_bContainsPlayerData : 1;                        		// 0x00001C (0x0004) [0x00000001] 
	unsigned long                                      m_bPreventPawnVisibilityChecks : 1;               		// 0x00001C (0x0004) [0x00000002] 
	unsigned long                                      m_bUseIndividualState : 1;                        		// 0x00001C (0x0004) [0x00000004] 
};
//0x000010
//HUDMarkerOffset[0x1DF21C08]
struct FHUDMarkerOffset
{
	int                                                m_eHUDMarkerOffset;                               		// 0x000000 (0x0004)              
	float                                              m_fOffset_X;                                      		// 0x000004 (0x0004)              
	float                                              m_fOffset_Y;                                      		// 0x000008 (0x0004)              
	float                                              m_fOffset_Z;                                      		// 0x00000C (0x0004)              
};
//0x000005
//HUDWSCharInfo[0x1DF21BA0]
struct FHUDWSCharInfo
{
	int                                                m_eColourProfile;                                 		// 0x000000 (0x0004)              
	unsigned char                                      m_eHUDWSCharInfo;                                 		// 0x000004 (0x0001)              PROPERTY: etHUDWSCharInfo
};
//0x00002C
//HUDTaskMarker[0x1DF21B38]
struct FHUDTaskMarker
{
	int                                                m_eArrowIcon;                                     		// 0x000000 (0x0004)              
	int                                                m_eArrowIconEllipse;                              		// 0x000004 (0x0004)              
	int                                                m_eArrowIconOcc;                                  		// 0x000008 (0x0004)              
	int                                                m_eEllipseIcon;                                   		// 0x00000C (0x0004)              
	int                                                m_eHUDTaskMarker;                                 		// 0x000010 (0x0004)              
	int                                                m_eOccludedIcon;                                  		// 0x000014 (0x0004)              
	int                                                m_eScene;                                         		// 0x000018 (0x0004)              
	int                                                m_eVisibleIcon;                                   		// 0x00001C (0x0004)              
	float                                              m_fMaxVisibleDistance;                            		// 0x000020 (0x0004)              
	int                                                m_nPriority;                                      		// 0x000024 (0x0004)              
	unsigned long                                      m_bHideDistance : 1;                              		// 0x000028 (0x0004) [0x00000001] 
	unsigned long                                      m_bHideWhenOccluded : 1;                          		// 0x000028 (0x0004) [0x00000002] 
	unsigned long                                      m_bInteractOnDistrictMap : 1;                     		// 0x000028 (0x0004) [0x00000004] 
	unsigned long                                      m_bShowByDefault : 1;                             		// 0x000028 (0x0004) [0x00000008] 
	unsigned long                                      m_bShowInWorld : 1;                               		// 0x000028 (0x0004) [0x00000010] 
	unsigned long                                      m_bShowOnEdge : 1;                                		// 0x000028 (0x0004) [0x00000020] 
	unsigned long                                      m_bShowOnSelf : 1;                                		// 0x000028 (0x0004) [0x00000040] 
	unsigned long                                      m_bValidInMission : 1;                            		// 0x000028 (0x0004) [0x00000080] 
	unsigned long                                      m_bValidOutOfMission : 1;                         		// 0x000028 (0x0004) [0x00000100] 
};
//0x000010
//HUDTaskMarkerScene[0x1DF21AD0]
struct FHUDTaskMarkerScene
{
	struct FString                                     m_sPackageRef;                                    		// 0x000000 (0x000C)              
	int                                                m_eHUDTaskMarkerScene;                            		// 0x00000C (0x0004)              
};
//0x000008
//HUDColourProfile[0x1DF21A68]
struct FHUDColourProfile
{
	int                                                m_eHUDColourProfile;                              		// 0x000000 (0x0004)              
	int                                                m_ePrimaryColour;                                 		// 0x000004 (0x0004)              
};
//0x000020
//HUDMarkerStateColour[0x1DF21A00]
struct FHUDMarkerStateColour
{
	int                                                m_eDefault;                                       		// 0x000000 (0x0004)              
	int                                                m_eHUDMarkerStateColour;                          		// 0x000004 (0x0004)              
	int                                                m_eTask_Misc;                                     		// 0x000008 (0x0004)              
	int                                                m_eTask_Neutral;                                  		// 0x00000C (0x0004)              
	int                                                m_eTask_OppositionAttack;                         		// 0x000010 (0x0004)              
	int                                                m_eTask_OppositionDefend;                         		// 0x000014 (0x0004)              
	int                                                m_eTask_OwnerAttack;                              		// 0x000018 (0x0004)              
	int                                                m_eTask_OwnerDefend;                              		// 0x00001C (0x0004)              
};
//0x000024
//HUDDistrictMapMarker[0x1DF21998]
struct FHUDDistrictMapMarker
{
	struct FString                                     m_sLegendName;                                    		// 0x000000 (0x000C)              
	int                                                m_eHUDDistrictMapMarker;                          		// 0x00000C (0x0004)              
	int                                                m_eIconCombo;                                     		// 0x000010 (0x0004)              
	float                                              m_fMaxVisibleDistance;                            		// 0x000014 (0x0004)              
	int                                                m_nDrawOrder;                                     		// 0x000018 (0x0004)              
	int                                                m_nSize;                                          		// 0x00001C (0x0004)              
	unsigned long                                      m_bDisableWaypoints : 1;                          		// 0x000020 (0x0004) [0x00000001] 
	unsigned long                                      m_bInLegend : 1;                                  		// 0x000020 (0x0004) [0x00000002] 
	unsigned long                                      m_bInteractOnMap : 1;                             		// 0x000020 (0x0004) [0x00000004] 
	unsigned long                                      m_bIsAesthetic : 1;                               		// 0x000020 (0x0004) [0x00000008] 
	unsigned long                                      m_bShowOnElectiveSpawnMap : 1;                    		// 0x000020 (0x0004) [0x00000010] 
	unsigned long                                      m_bShowOnSpawnMap : 1;                            		// 0x000020 (0x0004) [0x00000020] 
};
//0x00001C
//HUDReticuleHintIcon[0x1DF21930]
struct FHUDReticuleHintIcon
{
	struct FString                                     m_sDisplayText;                                   		// 0x000000 (0x000C)              
	int                                                m_eColour;                                        		// 0x00000C (0x0004)              
	int                                                m_eHUDReticuleHintIcon;                           		// 0x000010 (0x0004)              
	int                                                m_eIcon;                                          		// 0x000014 (0x0004)              
	float                                              m_fMaxDistance;                                   		// 0x000018 (0x0004)              
};
//0x000005
//HUDZoneNotifier[0x1DF218C8]
struct FHUDZoneNotifier
{
	int                                                m_eIcon;                                          		// 0x000000 (0x0004)              
	unsigned char                                      m_eHUDZoneNotifier;                               		// 0x000004 (0x0001)              PROPERTY: etHUDZoneNotifier
};
//0x00004C
//HUDMarkerVisualText[0x1DF21860]
struct FHUDMarkerVisualText
{
	struct FString                                     m_sMisc;                                          		// 0x000000 (0x000C)              
	struct FString                                     m_sNeutral;                                       		// 0x00000C (0x000C)              
	struct FString                                     m_sOppositionAttack;                              		// 0x000018 (0x000C)              
	struct FString                                     m_sOppositionDefend;                              		// 0x000024 (0x000C)              
	struct FString                                     m_sOwnerAttack;                                   		// 0x000030 (0x000C)              
	struct FString                                     m_sOwnerDefend;                                   		// 0x00003C (0x000C)              
	int                                                m_eHUDMarkerVisual;                               		// 0x000048 (0x0004)              
};
//0x000019
//HUDCeremonyMsg[0x1DF217F8]
struct FHUDCeremonyMsg
{
	struct FString                                     m_sTitle;                                         		// 0x000000 (0x000C)              
	int                                                m_eHUDMessage;                                    		// 0x00000C (0x0004)              
	int                                                m_eIconFallback;                                  		// 0x000010 (0x0004)              
	int                                                m_eTitleBGColour;                                 		// 0x000014 (0x0004)              
	unsigned char                                      m_eType;                                          		// 0x000018 (0x0001)              PROPERTY: etHUDCeremonyMsgType
};
//0x00002C
//HUDCombatMessage[0x1DF21790]
struct FHUDCombatMessage
{
	struct FString                                     m_sLine0;                                         		// 0x000000 (0x000C)              
	struct FString                                     m_sLine1;                                         		// 0x00000C (0x000C)              
	struct FString                                     m_sLine2;                                         		// 0x000018 (0x000C)              
	int                                                m_eHUDMessage;                                    		// 0x000024 (0x0004)              
	int                                                m_eIcon;                                          		// 0x000028 (0x0004)              
};
//0x00000C
//HUDMessagePosition[0x1DF21728]
struct FHUDMessagePosition
{
	int                                                m_eHUDMessagePosition;                            		// 0x000000 (0x0004)              
	float                                              m_fYPercent;                                      		// 0x000004 (0x0004)              
	int                                                m_nYOffset;                                       		// 0x000008 (0x0004)              
};
//0x000005
//CharacterVOIPStatus[0x1DF216C0]
struct FCharacterVOIPStatus
{
	int                                                m_eVOIPIconCombo;                                 		// 0x000000 (0x0004)              
	unsigned char                                      m_eCharacterVOIPStatus;                           		// 0x000004 (0x0001)              PROPERTY: etCharacterVOIPStatus
};
//0x000010
//UUIStyle[0x1DF21658]
struct FUUIStyle
{
	struct FString                                     m_sName;                                          		// 0x000000 (0x000C)              
	int                                                m_eUIStyle;                                       		// 0x00000C (0x0004)              
};
//0x000098
//RatingTexture[0x1DF215F0]
struct FRatingTexture
{
	struct FString                                     m_sDisplayNameCrim;                               		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayNameEnf;                                		// 0x00000C (0x000C)              
	int                                                m_eHUDIconComboCriminal[0x5];                     		// 0x000018 (0x0014)              
	int                                                m_eHUDIconComboEnforcer[0x5];                     		// 0x00002C (0x0014)              
	int                                                m_eHUDTextureIconCriminal[0x5];                   		// 0x000040 (0x0014)              
	int                                                m_eHUDTextureIconEnforcer[0x5];                   		// 0x000054 (0x0014)              
	int                                                m_eRatingTexture;                                 		// 0x000068 (0x0004)              
	int                                                m_eScaleformIconCriminal[0x5];                    		// 0x00006C (0x0014)              
	int                                                m_eScaleformIconEnforcer[0x5];                    		// 0x000080 (0x0014)              
	int                                                m_nRating;                                        		// 0x000094 (0x0004)              
};
//0x000020
//ScaleformIcon[0x1DF21588]
struct FScaleformIcon
{
	struct FString                                     m_sIconSetName;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sMovieName;                                     		// 0x00000C (0x000C)              
	int                                                m_eScaleformIcon;                                 		// 0x000018 (0x0004)              
	int                                                m_nFrameNumber;                                   		// 0x00001C (0x0004)              
};
//0x000010
//HealthInfo[0x1DF21520]
struct FHealthInfo
{
	class AActor*                                      A;                                                		// 0x000000 (0x0004)              
	unsigned char                                      Alpha;                                            		// 0x000004 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000005[0x3];                                   		// 0x000005 (0x0003) MISSED OFFSET
	double                                             m_DestroyTime;                                    		// 0x000008 (0x0008)              
};
//0x000008
//NPCWaitingRecord[0x1DF214B8]
struct FNPCWaitingRecord
{
	class UcNPCBrain*                                  pWaitingNPC;                                      		// 0x000000 (0x0004)              
	float                                              fWaitingTime;                                     		// 0x000004 (0x0004)              
};
//0x000010
//JunctionStage[0x1DF21450]
struct FJunctionStage
{
	float                                              fCurPriority;                                     		// 0x000000 (0x0004)              
	float                                              fWaitingTime;                                     		// 0x000004 (0x0004)              
	float                                              fMinTime;                                         		// 0x000008 (0x0004)              
	float                                              fMaxTime;                                         		// 0x00000C (0x0004)              
};
//0x000034
//tTrafficLightPair[0x1DF213E8]
struct FtTrafficLightPair
{
	class AActor*                                      pTLProp1;                                         		// 0x000000 (0x0004)              
	class AActor*                                      pTLProp2;                                         		// 0x000004 (0x0004)              
	struct FName                                       sTLName1;                                         		// 0x000008 (0x0008)              
	struct FName                                       sTLName2;                                         		// 0x000010 (0x0008)              
	class APrefabInstance*                             pTLPrefabInstance1;                               		// 0x000018 (0x0004)              
	class APrefabInstance*                             pTLPrefabInstance2;                               		// 0x00001C (0x0004)              
	class URWTechReachSpec*                            pEdge1;                                           		// 0x000020 (0x0004)              
	class URWTechReachSpec*                            pEdge2;                                           		// 0x000024 (0x0004)              
	TArray<struct FNPCWaitingRecord>                   m_aVehiclesWaiting;                               		// 0x000028 (0x000C)              
};
//0x000018
//LCRacialColourVariations[0x1DF21380]
struct FLCRacialColourVariations
{
	TArray<struct FLinearColor>                        m_Colour1;                                        		// 0x000000 (0x000C)              
	TArray<struct FLinearColor>                        m_Colour2;                                        		// 0x00000C (0x000C)              
};
//0x000024
//STypeOrCategoryStaticData[0x1DF21318]
struct FSTypeOrCategoryStaticData
{
	int                                                m_nTypeID;                                        		// 0x000000 (0x0004)              
	unsigned char                                      m_eGender;                                        		// 0x000004 (0x0001)              PROPERTY: 
	unsigned char                                      m_eNPCClass;                                      		// 0x000005 (0x0001)              PROPERTY: etNPCClass
	unsigned char                                      _0x000006[0x2];                                   		// 0x000006 (0x0002) MISSED OFFSET
	struct FString                                     m_sTypeDescription;                               		// 0x000008 (0x000C)              
	struct FLinearColor                                m_DebugColour;                                    		// 0x000014 (0x0010)              
};
//0x00000C
//STypeOrCategoryDynamicData[0x1DF212B0]
struct FSTypeOrCategoryDynamicData
{
	int                                                m_nTypeID;                                        		// 0x000000 (0x0004)              
	float                                              m_fProportion;                                    		// 0x000004 (0x0004)              
	int                                                m_nAllocationLimit;                               		// 0x000008 (0x0004)              
};
//0x000035
//NPCWorldEvent[0x1DF21248]
struct FNPCWorldEvent
{
	struct FString                                     m_sPedestrianAudioReason;                         		// 0x000000 (0x000C)              
	int                                                m_ePedestrianBlastEvent;                          		// 0x00000C (0x0004)              
	int                                                m_ePedestrianDangerEvent;                         		// 0x000010 (0x0004)              
	int                                                m_ePedestrianWitnessEvent;                        		// 0x000014 (0x0004)              
	int                                                m_eVehicleBlastEvent;                             		// 0x000018 (0x0004)              
	int                                                m_eVehicleDangerEvent;                            		// 0x00001C (0x0004)              
	int                                                m_eVehicleWitnessEvent;                           		// 0x000020 (0x0004)              
	float                                              m_fAudibilityDistance;                            		// 0x000024 (0x0004)              
	float                                              m_fBlastDistance;                                 		// 0x000028 (0x0004)              
	float                                              m_fDangerDistance;                                		// 0x00002C (0x0004)              
	float                                              m_fVisibilityDistance;                            		// 0x000030 (0x0004)              
	unsigned char                                      m_eNPCWorldEvent;                                 		// 0x000034 (0x0001)              PROPERTY: etNPCWorldEvent
};
//0x000005
//PedestrianEvent[0x1DF211E0]
struct FPedestrianEvent
{
	int                                                m_nIgnoreMe;                                      		// 0x000000 (0x0004)              
	unsigned char                                      m_eNPCEvent;                                      		// 0x000004 (0x0001)              PROPERTY: etNPCEvent
};
//0x000005
//VehicleEvent[0x1DF21178]
struct FVehicleEvent
{
	int                                                m_nIgnoreMe;                                      		// 0x000000 (0x0004)              
	unsigned char                                      m_eNPCEvent;                                      		// 0x000004 (0x0001)              PROPERTY: etNPCEvent
};
//0x000014
//StreetName[0x1DF21110]
struct FStreetName
{
	struct FString                                     m_sDisplayedStreetName;                           		// 0x000000 (0x000C)              
	int                                                m_eDistrict;                                      		// 0x00000C (0x0004)              
	int                                                m_eStreetNameID;                                  		// 0x000010 (0x0004)              
};
//0x000014
//LocationBeaconInstance[0x1DF210A8]
struct FLocationBeaconInstance
{
	struct FString                                     m_sLocalisedName;                                 		// 0x000000 (0x000C)              
	int                                                m_eDistrict;                                      		// 0x00000C (0x0004)              
	int                                                m_eLocationBeaconInstance;                        		// 0x000010 (0x0004)              
};
//0x00000C
//ArrayOfRWTechNodes[0x1DF21040]
struct FArrayOfRWTechNodes
{
	TArray<class URWTechNode*>                         m_aNodes;                                         		// 0x000000 (0x000C)              
};
//0x000008
//NPCDriverInfo[0x1DF20FD8]
struct FNPCDriverInfo
{
	int                                                m_nNPCType;                                       		// 0x000000 (0x0004)              
	float                                              m_fAccumulatedTime;                               		// 0x000004 (0x0004)              
};
//0x00000C
//SNPCTypeOrCategoryTrackingRecord[0x1DF20F70]
struct FSNPCTypeOrCategoryTrackingRecord
{
	int                                                m_nTypeOrCategoryIndex;                           		// 0x000000 (0x0004)              
	int                                                m_nNumActive;                                     		// 0x000004 (0x0004)              
	int                                                m_nNumInSpawnQueue;                               		// 0x000008 (0x0004)              
};
//0x000030
//PathOffsetData[0x1DF20F08]
struct FPathOffsetData
{
	FVector3                                           vCenter;                                          		// 0x000000 (0x000C)              
	FVector2                                           vDirection;                                       		// 0x00000C (0x0008)              
	float                                              fLimitLo;                                         		// 0x000014 (0x0004)              
	float                                              fLimitHi;                                         		// 0x000018 (0x0004)              
	float                                              fAmount;                                          		// 0x00001C (0x0004)              
	FVector2                                           vOffsetPos;                                       		// 0x000020 (0x0008)              
	FVector2                                           vDirectionToNextOffset;                           		// 0x000028 (0x0008)              
};
//0x000008
//WeaponPickupItemData[0x1DF20EA0]
struct FWeaponPickupItemData
{
	int                                                m_nInventoryItemType;                             		// 0x000000 (0x0004)              
	int                                                m_nSkin;                                          		// 0x000004 (0x0004)              
};
//0x00001C
//CSAAnimationData[0x1DF20E38]
struct FCSAAnimationData
{
	int                                                eAnimIndex;                                       		// 0x000000 (0x0004)              
	int                                                eItemType;                                        		// 0x000004 (0x0004)              
	float                                              fItemEffectivenessModifier;                       		// 0x000008 (0x0004)              
	unsigned long                                      bAnimDuration : 1;                                		// 0x00000C (0x0004) [0x00000001] 
	int                                                eOverriddenAutoRouteData;                         		// 0x000010 (0x0004)              
	float                                              m_fLogicalOutroDuration;                          		// 0x000014 (0x0004)              
	unsigned long                                      bOverridenChecksUseAutoRouteData : 1;             		// 0x000018 (0x0004) [0x00000001] 
	unsigned long                                      bUseSmallCollisionVolume : 1;                     		// 0x000018 (0x0004) [0x00000002] 
};
//0x00004C
//InteractionData[0x1DF20DD0]
struct FInteractionData
{
	DWORD                                              BaseCSAAttributes;                                		// 0x000000 (0x0004)              
	DWORD                                              CSAAttributes;                                    		// 0x000004 (0x0004)              
	struct FCSAAnimationData                           AnimData;                                         		// 0x000008 (0x001C)              
	FVector3                                           vInteractionLocation;                             		// 0x000024 (0x000C)              
	FVector3                                           vLookAtLocation;                                  		// 0x000030 (0x000C)              
	float                                              fDuration;                                        		// 0x00003C (0x0004)              
	int                                                nIPIndex;                                         		// 0x000040 (0x0004)              
	class AActor*                                      InteractiveActor;                                 		// 0x000044 (0x0004)              
	int                                                nPriorityLayer;                                   		// 0x000048 (0x0004)              
};
//0x00001D
//tUseAction[0x1DF20D68]
struct FtUseAction
{
	struct FName                                       m_sUseTagName;                                    		// 0x000000 (0x0008)              
	int                                                m_iMeshVariant;                                   		// 0x000008 (0x0004)              
	struct FName                                       m_sAnimationName;                                 		// 0x00000C (0x0008)              
	unsigned char                                      m_eNewPropState;                                  		// 0x000014 (0x0001)              PROPERTY: EPropState
	unsigned char                                      _0x000015[0x3];                                   		// 0x000015 (0x0003) MISSED OFFSET
	unsigned long                                      m_bLoop : 1;                                      		// 0x000018 (0x0004) [0x00000001] 
	unsigned char                                      m_eGameplayEventCategory;                         		// 0x00001C (0x0001)              PROPERTY: etGameplayEventCategory
};
//0x00000C
//StPlayingAnimation[0x1DF20D00]
struct FStPlayingAnimation
{
	struct FName                                       sAnimationName;                                   		// 0x000000 (0x0008)              
	unsigned long                                      bLoop : 1;                                        		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      bReachedEnd : 1;                                  		// 0x000008 (0x0004) [0x00000002] 
};
//0x000030
//NPCHitData[0x1DF20C98]
struct FNPCHitData
{
	FVector3                                           TakeHitLocation;                                  		// 0x000000 (0x000C)              
	class UClass*                                      HitDamageType;                                    		// 0x00000C (0x0004)              
	FVector3                                           TearOffMomentum;                                  		// 0x000010 (0x000C)              
	FVector3                                           vExplosionLocation;                               		// 0x00001C (0x000C)              
	unsigned char                                      nExplosionType;                                   		// 0x000028 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000029[0x3];                                   		// 0x000029 (0x0003) MISSED OFFSET
	class AcAPBVehicleBase*                            KillingVehicle;                                   		// 0x00002C (0x0004)              
};
//0x00000C
//DriverEjectData[0x1DF20C30]
struct FDriverEjectData
{
	class AcAPBVehicleBase*                            pVehicleEjectedFrom;                              		// 0x000000 (0x0004)              
	class AcAPBPawn*                                   pEjectingPawn;                                    		// 0x000004 (0x0004)              
	unsigned long                                      bEjectedByEnforcer : 1;                           		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      bEjectedFromPassengerSide : 1;                    		// 0x000008 (0x0004) [0x00000002] 
};
//0x000010
//NPCPedestrianAnimation[0x1DF20BC8]
struct FNPCPedestrianAnimation
{
	struct FString                                     m_sNPCPedestrianAnimation;                        		// 0x000000 (0x000C)              
	int                                                m_eAnimationCategory;                             		// 0x00000C (0x0004)              
};
//0x000004
//NPCAnimationCategory[0x1DF20B60]
struct FNPCAnimationCategory
{
	int                                                m_eNPCAnimationCategory;                          		// 0x000000 (0x0004)              
};
//0x000014
//NPCVehicleAnimation[0x1DF20AF8]
struct FNPCVehicleAnimation
{
	struct FString                                     m_sNPCVehicleAnimation;                           		// 0x000000 (0x000C)              
	int                                                m_eAnimationCategory;                             		// 0x00000C (0x0004)              
	int                                                m_eVehicleNPCInsideAnimationSet;                  		// 0x000010 (0x0004)              
};
//0x000005
//CustomisedAssetPriority[0x1DF20A90]
struct FCustomisedAssetPriority
{
	float                                              m_fPriority;                                      		// 0x000000 (0x0004)              
	unsigned char                                      m_eCustomisedAssetPriority;                       		// 0x000004 (0x0001)              PROPERTY: etCustomisedAssetPriority
};
//0x000004
//GameplayPriorityInfo[0x1DF20A28]
struct FGameplayPriorityInfo
{
	unsigned long                                      m_bIsOwnCharacter : 1;                            		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      m_bIsOwnVehicle : 1;                              		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      m_bIsGroupMate : 1;                               		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      m_bIsOnSameTeam : 1;                              		// 0x000000 (0x0004) [0x00000008] 
	unsigned long                                      m_bIsFriend : 1;                                  		// 0x000000 (0x0004) [0x00000010] 
	unsigned long                                      m_bIsInTheSameMission : 1;                        		// 0x000000 (0x0004) [0x00000020] 
};
//0x000010
//ReactionRequest[0x1DF209C0]
struct FReactionRequest
{
	int                                                nReactionID;                                      		// 0x000000 (0x0004)              
	DWORD                                              pEvent;                                           		// 0x000004 (0x0004)              
	int                                                nWorldEventID;                                    		// 0x000008 (0x0004)              
	unsigned long                                      bOverridePriority : 1;                            		// 0x00000C (0x0004) [0x00000001] 
};
//0x000015
//HUDMarkerUpdateInfo[0x1DF20958]
struct FHUDMarkerUpdateInfo
{
	int                                                nServerID;                                        		// 0x000000 (0x0004)              
	FVector3                                           Location;                                         		// 0x000004 (0x000C)              
	class AActor*                                      pLinkedActor;                                     		// 0x000010 (0x0004)              
	unsigned char                                      eState;                                           		// 0x000014 (0x0001)              PROPERTY: etHUDMarkerState
};
//0x000005
//ChatConstant[0x1DF208F0]
struct FChatConstant
{
	float                                              m_fValue;                                         		// 0x000000 (0x0004)              
	unsigned char                                      m_eChatConstant;                                  		// 0x000004 (0x0001)              PROPERTY: etChatConstant
};
//0x000018
//ClanRank[0x1DF20888]
struct FClanRank
{
	struct FString                                     m_sName;                                          		// 0x000000 (0x000C)              
	int                                                m_eIcon;                                          		// 0x00000C (0x0004)              
	unsigned char                                      m_eClanRank;                                      		// 0x000010 (0x0001)              PROPERTY: etClanRank
	unsigned char                                      _0x000011[0x3];                                   		// 0x000011 (0x0003) MISSED OFFSET
	unsigned long                                      m_bAssignRank : 1;                                		// 0x000014 (0x0004) [0x00000001] 
	unsigned long                                      m_bClanChatListen : 1;                            		// 0x000014 (0x0004) [0x00000002] 
	unsigned long                                      m_bClanChatSpeak : 1;                             		// 0x000014 (0x0004) [0x00000004] 
	unsigned long                                      m_bContact : 1;                                   		// 0x000014 (0x0004) [0x00000008] 
	unsigned long                                      m_bEditClanBio : 1;                               		// 0x000014 (0x0004) [0x00000010] 
	unsigned long                                      m_bEditClanInformation : 1;                       		// 0x000014 (0x0004) [0x00000020] 
	unsigned long                                      m_bEditClanSymbol : 1;                            		// 0x000014 (0x0004) [0x00000040] 
	unsigned long                                      m_bEditClanTheme : 1;                             		// 0x000014 (0x0004) [0x00000080] 
	unsigned long                                      m_bEditMotd : 1;                                  		// 0x000014 (0x0004) [0x00000100] 
	unsigned long                                      m_bEditPrivateNote : 1;                           		// 0x000014 (0x0004) [0x00000200] 
	unsigned long                                      m_bEditPublicNote : 1;                            		// 0x000014 (0x0004) [0x00000400] 
	unsigned long                                      m_bInviteMember : 1;                              		// 0x000014 (0x0004) [0x00000800] 
	unsigned long                                      m_bOfficerChatListen : 1;                         		// 0x000014 (0x0004) [0x00001000] 
	unsigned long                                      m_bOfficerChatSpeak : 1;                          		// 0x000014 (0x0004) [0x00002000] 
	unsigned long                                      m_bRemoveMember : 1;                              		// 0x000014 (0x0004) [0x00004000] 
	unsigned long                                      m_bReuseMe : 1;                                   		// 0x000014 (0x0004) [0x00008000] 
	unsigned long                                      m_bViewPrivateNote : 1;                           		// 0x000014 (0x0004) [0x00010000] 
};
//0x000058
//Contact[0x1DF20820]
struct FContact
{
	struct FGuid                                       m_nSecondaryKey;                                  		// 0x000000 (0x0010)              
	struct FString                                     m_sAudioType;                                     		// 0x000010 (0x000C)              
	struct FString                                     m_sDescription;                                   		// 0x00001C (0x000C)              
	struct FString                                     m_sTitle;                                         		// 0x000028 (0x000C)              
	int                                                m_eContact;                                       		// 0x000034 (0x0004)              
	int                                                m_eContactIcon;                                   		// 0x000038 (0x0004)              
	int                                                m_eDistrict;                                      		// 0x00003C (0x0004)              
	int                                                m_eHUDMarkerOverride;                             		// 0x000040 (0x0004)              
	int                                                m_eMissionPurpose;                                		// 0x000044 (0x0004)              
	int                                                m_ePurchaseShopType;                              		// 0x000048 (0x0004)              
	int                                                m_nPartialUnlocks;                                		// 0x00004C (0x0004)              
	unsigned char                                      m_eContactType;                                   		// 0x000050 (0x0001)              PROPERTY: etContactType
	unsigned char                                      m_eDealsInRewardTokenItems;                       		// 0x000051 (0x0001)              PROPERTY: etYesNoEither
	unsigned char                                      m_eOrganisation;                                  		// 0x000052 (0x0001)              PROPERTY: etOrganisation
	unsigned char                                      _0x000053[0x1];                                   		// 0x000053 (0x0001) MISSED OFFSET
	unsigned long                                      m_bBuysCrossOrganisation : 1;                     		// 0x000054 (0x0004) [0x00000001] 
	unsigned long                                      m_bDealsInCommonItems : 1;                        		// 0x000054 (0x0004) [0x00000002] 
	unsigned long                                      m_bDefaultAssets : 1;                             		// 0x000054 (0x0004) [0x00000004] 
	unsigned long                                      m_bExcludeFromTrackedActivities : 1;              		// 0x000054 (0x0004) [0x00000008] 
	unsigned long                                      m_bFemale : 1;                                    		// 0x000054 (0x0004) [0x00000010] 
	unsigned long                                      m_bHidden : 1;                                    		// 0x000054 (0x0004) [0x00000020] 
	unsigned long                                      m_bInitiallyUnlocked : 1;                         		// 0x000054 (0x0004) [0x00000040] 
	unsigned long                                      m_bLeftAlignName : 1;                             		// 0x000054 (0x0004) [0x00000080] 
	unsigned long                                      m_bTest : 1;                                      		// 0x000054 (0x0004) [0x00000100] 
	unsigned long                                      m_bTutor : 1;                                     		// 0x000054 (0x0004) [0x00000200] 
};
//0x000038
//ContactLevel[0x1DF207B8]
struct FContactLevel
{
	struct FString                                     m_sRewardMailBody;                                		// 0x000000 (0x000C)              
	struct FString                                     m_sRewardMailSubject;                             		// 0x00000C (0x000C)              
	int                                                m_eContact;                                       		// 0x000018 (0x0004)              
	int                                                m_eContactLevel;                                  		// 0x00001C (0x0004)              
	int                                                m_eRewardPackage;                                 		// 0x000020 (0x0004)              
	float                                              m_fOrganisationRewardMultiplier;                  		// 0x000024 (0x0004)              
	int                                                m_nContactScore;                                  		// 0x000028 (0x0004)              
	int                                                m_nLevel;                                         		// 0x00002C (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000030 (0x0004)              
	int                                                m_nStandingThreshold;                             		// 0x000034 (0x0004)              
};
//0x00000C
//ContactReferral[0x1DF20750]
struct FContactReferral
{
	int                                                m_eContactLevel;                                  		// 0x000000 (0x0004)              
	int                                                m_eUnlockedContact;                               		// 0x000004 (0x0004)              
	int                                                m_nPartialUnlockIndex;                            		// 0x000008 (0x0004)              
};
//0x00002A
//Organisation[0x1DF206E8]
struct FOrganisation
{
	struct FString                                     m_sName;                                          		// 0x000000 (0x000C)              
	struct FString                                     m_sPicture;                                       		// 0x00000C (0x000C)              
	int                                                m_eHUDIcon;                                       		// 0x000018 (0x0004)              
	int                                                m_eOrganisationContact;                           		// 0x00001C (0x0004)              
	int                                                m_eOrganisationIcon;                              		// 0x000020 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000024 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x000028 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eOrganisation;                                  		// 0x000029 (0x0001)              PROPERTY: etOrganisation
};
//0x000008
//NotorietyLevel[0x1DF20680]
struct FNotorietyLevel
{
	int                                                m_eHeatLevel;                                     		// 0x000000 (0x0004)              
	int                                                m_eNotorietyLevel;                                		// 0x000004 (0x0004)              
};
//0x00001C
//NotorietyEffect[0x1DF20618]
struct FNotorietyEffect
{
	int                                                m_eForceMaxLevel;                                 		// 0x000000 (0x0004)              
	int                                                m_eForceMinLevel;                                 		// 0x000004 (0x0004)              
	int                                                m_eNotorietyEffect;                               		// 0x000008 (0x0004)              
	int                                                m_eNotorietyLevelLimit;                           		// 0x00000C (0x0004)              
	float                                              m_fQuantity;                                      		// 0x000010 (0x0004)              
	int                                                m_nEnforcerWitnessersCap;                         		// 0x000014 (0x0004)              
	int                                                m_nNPCWitnessersCap;                              		// 0x000018 (0x0004)              
};
//0x000008
//PrestigeLevel[0x1DF205B0]
struct FPrestigeLevel
{
	int                                                m_eHeatLevel;                                     		// 0x000000 (0x0004)              
	int                                                m_ePrestigeLevel;                                 		// 0x000004 (0x0004)              
};
//0x000014
//PrestigeEffect[0x1DF20548]
struct FPrestigeEffect
{
	int                                                m_eForceMaxLevel;                                 		// 0x000000 (0x0004)              
	int                                                m_eForceMinLevel;                                 		// 0x000004 (0x0004)              
	int                                                m_ePrestigeEffect;                                		// 0x000008 (0x0004)              
	int                                                m_ePrestigeLevelLimit;                            		// 0x00000C (0x0004)              
	float                                              m_fQuantity;                                      		// 0x000010 (0x0004)              
};
//0x000024
//HeatLevel[0x1DF204E0]
struct FHeatLevel
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	int                                                m_eHeatLevel;                                     		// 0x00000C (0x0004)              
	int                                                m_eHUDTexture;                                    		// 0x000010 (0x0004)              
	float                                              m_fRewardMultiplier;                              		// 0x000014 (0x0004)              
	float                                              m_fThreshold;                                     		// 0x000018 (0x0004)              
	int                                                m_nLevel;                                         		// 0x00001C (0x0004)              
	unsigned long                                      m_bBreaksContactPledges : 1;                      		// 0x000020 (0x0004) [0x00000001] 
	unsigned long                                      m_bDispatchBounty : 1;                            		// 0x000020 (0x0004) [0x00000002] 
	unsigned long                                      m_bDispatchMission : 1;                           		// 0x000020 (0x0004) [0x00000004] 
	unsigned long                                      m_bPVPUnlockedToAllOpposingFaction : 1;           		// 0x000020 (0x0004) [0x00000008] 
};
//0x000010
//HeatActionAffect[0x1DF20478]
struct FHeatActionAffect
{
	int                                                m_eHeatActionAffect;                              		// 0x000000 (0x0004)              
	int                                                m_eNotorietyEffect;                               		// 0x000004 (0x0004)              
	int                                                m_ePrestigeEffect;                                		// 0x000008 (0x0004)              
	float                                              m_fEscapePenaltyTimer;                            		// 0x00000C (0x0004)              
};
//0x000020
//WitnessableCrime[0x1DF20410]
struct FWitnessableCrime
{
	int                                                m_eNotorietyForBeingWitnessed;                    		// 0x000000 (0x0004)              
	int                                                m_ePrestigeForWitnessing;                         		// 0x000004 (0x0004)              
	int                                                m_eWitnessableCrime;                              		// 0x000008 (0x0004)              
	float                                              m_fEscapePenaltyTimer;                            		// 0x00000C (0x0004)              
	float                                              m_fHotListDuration;                               		// 0x000010 (0x0004)              
	float                                              m_fNPCWitnessableDuration;                        		// 0x000014 (0x0004)              
	unsigned char                                      m_eTriggeredNPCWorldEvent;                        		// 0x000018 (0x0001)              PROPERTY: etNPCWorldEvent
	unsigned char                                      _0x000019[0x3];                                   		// 0x000019 (0x0003) MISSED OFFSET
	unsigned long                                      m_bContinuous : 1;                                		// 0x00001C (0x0004) [0x00000001] 
	unsigned long                                      m_bNoDirectWitness : 1;                           		// 0x00001C (0x0004) [0x00000002] 
};
//0x000015
//HeatConstant[0x1DF203A8]
struct FHeatConstant
{
	struct FString                                     m_sComment;                                       		// 0x000000 (0x000C)              
	float                                              m_fCriminalValue;                                 		// 0x00000C (0x0004)              
	float                                              m_fEnforcerValue;                                 		// 0x000010 (0x0004)              
	unsigned char                                      m_eHeatConstant;                                  		// 0x000014 (0x0001)              PROPERTY: etHeatConstant
};
//0x000018
//HostingConfigFile[0x1DF20340]
struct FHostingConfigFile
{
	struct FString                                     m_sFilename;                                      		// 0x000000 (0x000C)              
	int                                                m_nPersistentId;                                  		// 0x00000C (0x0004)              
	unsigned char                                      m_eHostingConfigFile;                             		// 0x000010 (0x0001)              PROPERTY: etHostingConfigFile
	unsigned char                                      m_eType;                                          		// 0x000011 (0x0001)              PROPERTY: etHostingConfigFileType
	unsigned char                                      _0x000012[0x2];                                   		// 0x000012 (0x0002) MISSED OFFSET
	unsigned long                                      m_bPersistent : 1;                                		// 0x000014 (0x0004) [0x00000001] 
};
//0x000019
//UIInteractionPoint[0x1DF202D8]
struct FUIInteractionPoint
{
	struct FString                                     m_sInfoBrowserText;                               		// 0x000000 (0x000C)              
	int                                                m_eHUDMarker;                                     		// 0x00000C (0x0004)              
	int                                                m_eInfoBrowserIcon;                               		// 0x000010 (0x0004)              
	int                                                m_eUIInteractionPoint;                            		// 0x000014 (0x0004)              
	unsigned char                                      m_eCSA;                                           		// 0x000018 (0x0001)              PROPERTY: etContextSensitiveActionBase
};
//0x000018
//MissionOfCriminalContact[0x1DF20270]
struct FMissionOfCriminalContact
{
	int                                                m_eContact;                                       		// 0x000000 (0x0004)              
	int                                                m_eMission;                                       		// 0x000004 (0x0004)              
	int                                                m_eMissionOfCriminalContact;                      		// 0x000008 (0x0004)              
	int                                                m_nMaxLevel;                                      		// 0x00000C (0x0004)              
	int                                                m_nMinLevel;                                      		// 0x000010 (0x0004)              
	unsigned long                                      m_bDisabled : 1;                                  		// 0x000014 (0x0004) [0x00000001] 
};
//0x000018
//MissionOfEnforcerContact[0x1DF20208]
struct FMissionOfEnforcerContact
{
	int                                                m_eContact;                                       		// 0x000000 (0x0004)              
	int                                                m_eMission;                                       		// 0x000004 (0x0004)              
	int                                                m_eMissionOfEnforcerContact;                      		// 0x000008 (0x0004)              
	int                                                m_nMaxLevel;                                      		// 0x00000C (0x0004)              
	int                                                m_nMinLevel;                                      		// 0x000010 (0x0004)              
	unsigned long                                      m_bDisabled : 1;                                  		// 0x000014 (0x0004) [0x00000001] 
};
//0x00000C
//PreloadCommon[0x1DF201A0]
struct FPreloadCommon
{
	struct FString                                     m_sPreloadCommon;                                 		// 0x000000 (0x000C)              
};
//0x00000C
//PreloadAction[0x1DF20138]
struct FPreloadAction
{
	struct FString                                     m_sPreloadAction;                                 		// 0x000000 (0x000C)              
};
//0x00000C
//PreloadSocial[0x1DF200D0]
struct FPreloadSocial
{
	struct FString                                     m_sPreloadSocial;                                 		// 0x000000 (0x000C)              
};
//0x00001C
//PreloadCustomisation[0x1DF20068]
struct FPreloadCustomisation
{
	struct FString                                     m_sPackage;                                       		// 0x000000 (0x000C)              
	struct FString                                     m_sPreloadCustomisation;                          		// 0x00000C (0x000C)              
	unsigned long                                      m_bCoversBreasts : 1;                             		// 0x000018 (0x0004) [0x00000001] 
	unsigned long                                      m_bCoversGenitalia : 1;                           		// 0x000018 (0x0004) [0x00000002] 
};
//0x000019
//TaskItemCategory[0x1DF20000]
struct FTaskItemCategory
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayName;                                   		// 0x00000C (0x000C)              
	unsigned char                                      m_eTaskItemCategory;                              		// 0x000018 (0x0001)              PROPERTY: etTaskItemCategory
};
//0x000018
//TaskItemSize[0x1FE6FF88]
struct FTaskItemSize
{
	struct FString                                     m_sDisplayName;                                   		// 0x000000 (0x000C)              
	int                                                m_nCargoPips;                                     		// 0x00000C (0x0004)              
	unsigned char                                      m_eEncumbrance;                                   		// 0x000010 (0x0001)              PROPERTY: etEncumbrance
	unsigned char                                      m_eTaskItemSize;                                  		// 0x000011 (0x0001)              PROPERTY: etTaskItemSize
	unsigned char                                      _0x000012[0x2];                                   		// 0x000012 (0x0002) MISSED OFFSET
	unsigned long                                      m_bCanCarry : 1;                                  		// 0x000014 (0x0004) [0x00000001] 
	unsigned long                                      m_bSlowPickup : 1;                                		// 0x000014 (0x0004) [0x00000002] 
};
//0x000022
//TaskItemSubCategory[0x1FE6FF20]
struct FTaskItemSubCategory
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayName;                                   		// 0x00000C (0x000C)              
	int                                                m_eGameplayObject;                                		// 0x000018 (0x0004)              
	int                                                m_eTaskItemSubCategory;                           		// 0x00001C (0x0004)              
	unsigned char                                      m_eTaskItemCategory;                              		// 0x000020 (0x0001)              PROPERTY: etTaskItemCategory
	unsigned char                                      m_eTaskItemSize;                                  		// 0x000021 (0x0001)              PROPERTY: etTaskItemSize
};
//0x00005C
//TaskItemVariety[0x1FE6FEB8]
struct FTaskItemVariety
{
	struct FString                                     m_sDescription;                                   		// 0x000000 (0x000C)              
	struct FString                                     m_sDisplayName;                                   		// 0x00000C (0x000C)              
	int                                                m_eEffect;                                        		// 0x000018 (0x0004)              
	int                                                m_eGiftBox;                                       		// 0x00001C (0x0004)              
	int                                                m_eHUDIconCombo;                                  		// 0x000020 (0x0004)              
	int                                                m_eHUDMarkerVisual;                               		// 0x000024 (0x0004)              
	int                                                m_eMetaTag[0x3];                                  		// 0x000028 (0x000C)              
	int                                                m_eTaskItemSubCategory;                           		// 0x000034 (0x0004)              
	int                                                m_eTaskItemVariety;                               		// 0x000038 (0x0004)              
	int                                                m_eTaskItemVisual;                                		// 0x00003C (0x0004)              
	float                                              m_fGiftBoxOffsetX;                                		// 0x000040 (0x0004)              
	float                                              m_fGiftBoxOffsetY;                                		// 0x000044 (0x0004)              
	float                                              m_fGiftBoxOffsetZ;                                		// 0x000048 (0x0004)              
	float                                              m_fVehicleHeightReductionAmount;                  		// 0x00004C (0x0004)              
	float                                              m_fVehicleTorqueReductionFactor;                  		// 0x000050 (0x0004)              
	int                                                m_nExpenseTariff;                                 		// 0x000054 (0x0004)              
	unsigned long                                      m_bHideHUDMarkerWhileCarried : 1;                 		// 0x000058 (0x0004) [0x00000001] 
};
//0x000048
//TaskItemVisual[0x1FE6FE50]
struct FTaskItemVisual
{
	struct FString                                     m_sPickupAnimSetAsset;                            		// 0x000000 (0x000C)              
	struct FString                                     m_sPickupAnimTreeAsset;                           		// 0x00000C (0x000C)              
	struct FString                                     m_sPickupAssetName;                               		// 0x000018 (0x000C)              
	struct FString                                     m_sPickupPhysicsAsset;                            		// 0x000024 (0x000C)              
	int                                                m_eItemAttachmentVisual;                          		// 0x000030 (0x0004)              
	int                                                m_eTaskItemVisual;                                		// 0x000034 (0x0004)              
	float                                              m_fCollisionHeight;                               		// 0x000038 (0x0004)              
	float                                              m_fPickupOffsetX;                                 		// 0x00003C (0x0004)              
	float                                              m_fPickupOffsetY;                                 		// 0x000040 (0x0004)              
	float                                              m_fPickupOffsetZ;                                 		// 0x000044 (0x0004)              
};
//0x000011
//TimeofDayPeriod[0x1FE6FDE8]
struct FTimeofDayPeriod
{
	int                                                m_nEndTimeHours;                                  		// 0x000000 (0x0004)              
	int                                                m_nEndTimeMins;                                   		// 0x000004 (0x0004)              
	int                                                m_nStartTimeHours;                                		// 0x000008 (0x0004)              
	int                                                m_nStartTimeMins;                                 		// 0x00000C (0x0004)              
	unsigned char                                      m_eTimeofDayPeriod;                               		// 0x000010 (0x0001)              PROPERTY: etTimeofDayPeriod
};
//0x000008
//TimeOfDayAvailability[0x1FE6FD80]
struct FTimeOfDayAvailability
{
	unsigned char                                      m_eTimeOfDayAvailability;                         		// 0x000000 (0x0001)              PROPERTY: etTimeOfDayAvailability
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	unsigned long                                      m_bAfternoon : 1;                                 		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      m_bEvening : 1;                                   		// 0x000004 (0x0004) [0x00000002] 
	unsigned long                                      m_bMorning : 1;                                   		// 0x000004 (0x0004) [0x00000004] 
	unsigned long                                      m_bNight : 1;                                     		// 0x000004 (0x0004) [0x00000008] 
};
//0x000020
//VFXAssociation[0x1FE6FD18]
struct FVFXAssociation
{
	struct FString                                     m_sVFXPrefabName;                                 		// 0x000000 (0x000C)              
	struct FString                                     m_sVFXReplacedActor;                              		// 0x00000C (0x000C)              
	int                                                m_eVFXAssociation;                                		// 0x000018 (0x0004)              
	int                                                m_eVFXType;                                       		// 0x00001C (0x0004)              
};
//0x000004
//VFXType[0x1FE6FCB0]
struct FVFXType
{
	int                                                m_eVFXType;                                       		// 0x000000 (0x0004)              
};
//0x000008
//TargetingMarkerReplicationData[0x1FE6FC48]
struct FTargetingMarkerReplicationData
{
	int                                                m_nTargetingRule;                                 		// 0x000000 (0x0004)              
	unsigned long                                      m_bShowWeaponPing : 1;                            		// 0x000004 (0x0004) [0x00000001] 
};
//0x000019
//VehicleUISetup[0x1FE6FBE0]
struct FVehicleUISetup
{
	float                                              m_fAcceleration;                                  		// 0x000000 (0x0004)              
	float                                              m_fCollisionDamage;                               		// 0x000004 (0x0004)              
	float                                              m_fHandling;                                      		// 0x000008 (0x0004)              
	float                                              m_fHealth;                                        		// 0x00000C (0x0004)              
	float                                              m_fSuspensionOffsetHack;                          		// 0x000010 (0x0004)              
	float                                              m_fTopSpeed;                                      		// 0x000014 (0x0004)              
	unsigned char                                      m_eVehicleSetupType;                              		// 0x000018 (0x0001)              PROPERTY: etVehicleSetupType
};
//0x000008
//VehicleUIComponentInfo[0x1FE6FB78]
struct FVehicleUIComponentInfo
{
	int                                                m_eCameraAngle;                                   		// 0x000000 (0x0004)              
	int                                                m_eCategory;                                      		// 0x000004 (0x0004)              
};
//0x000014
//VehicleUIComponentCategory[0x1FE6FB10]
struct FVehicleUIComponentCategory
{
	struct FString                                     m_sDisplayName;                                   		// 0x000000 (0x000C)              
	int                                                m_eVehicleUIComponentCategory;                    		// 0x00000C (0x0004)              
	int                                                m_nSortingPriority;                               		// 0x000010 (0x0004)              
};
//0x00001C
//SPedestrianSetupType[0x1FE6FAA8]
struct FSPedestrianSetupType
{
	struct FString                                     m_Name;                                           		// 0x000000 (0x000C)              
	int                                                m_nAssetSDDIndex;                                 		// 0x00000C (0x0004)              
	int                                                m_nNPCTypeSDDIndex;                               		// 0x000010 (0x0004)              
	int                                                m_nRaceType;                                      		// 0x000014 (0x0004)              
	class UcPedestrianSetupInfo*                       m_pSetupInfo;                                     		// 0x000018 (0x0004)              
};
//0x000018
//SVehicleSetupType[0x1FE6FA40]
struct FSVehicleSetupType
{
	struct FString                                     m_Name;                                           		// 0x000000 (0x000C)              
	int                                                m_nAssetSDDIndex;                                 		// 0x00000C (0x0004)              
	int                                                m_nVehicleCategorySDDIndex;                       		// 0x000010 (0x0004)              
	class UcVehicleSetupInfo*                          m_pSetupInfo;                                     		// 0x000014 (0x0004)              
};
//0x00008C
//STypeAndCategoryRecord[0x1FE6F9D8]
struct FSTypeAndCategoryRecord
{
	int                                                m_nSDDIndex;                                      		// 0x000000 (0x0004)              
	TArray<int>                                        m_aSetupTypeIndexes;                              		// 0x000004 (0x000C)              
	int                                                m_nConcurrentSetupTypes;                          		// 0x000010 (0x0004)              
	int                                                m_nActiveIndexStart;                              		// 0x000014 (0x0004)              
	int                                                m_nActiveIndexEnd;                                		// 0x000018 (0x0004)              
	int                                                m_nDeprecatedIndex;                               		// 0x00001C (0x0004)              
	TArray<int>                                        m_aAssetsWaiting;                                 		// 0x000020 (0x000C)              
	TArray<int>                                        m_aAssetsStreaming;                               		// 0x00002C (0x000C)              
	TArray<int>                                        m_aAssetsInMemory;                                		// 0x000038 (0x000C)              
	TArray<int>                                        m_aAssetsToGC;                                    		// 0x000044 (0x000C)              
	unsigned char                                      m_mActiveInstances[0x3C];                         		// 0x000050 (0x003C)              UNKNOWN PROPERTY: MapProperty
};
//0x000008
//SActorWithSetupTypeRecord[0x1FE6F970]
struct FSActorWithSetupTypeRecord
{
	class AActor*                                      m_pActor;                                         		// 0x000000 (0x0004)              
	int                                                m_nAssetIndex;                                    		// 0x000004 (0x0004)              
};
//0x00000C
//SActiveAssetIndexes[0x1FE6F908]
struct FSActiveAssetIndexes
{
	int                                                m_nStart;                                         		// 0x000000 (0x0004)              
	int                                                m_nEnd;                                           		// 0x000004 (0x0004)              
	int                                                m_nTypeOrCategoryIndex;                           		// 0x000008 (0x0004)              
};
//0x000008
//spawnEdgeEvaluationInfo[0x1FE6F8A0]
struct FspawnEdgeEvaluationInfo
{
	class URWTechReachSpec*                            edgeToEvaluate;                                   		// 0x000000 (0x0004)              
	float                                              fitnessValue;                                     		// 0x000004 (0x0004)              
};
//0x000008
//destroyNodeEvaluationInfo[0x1FE6F838]
struct FdestroyNodeEvaluationInfo
{
	class URWTechNode*                                 nodeToEvaluate;                                   		// 0x000000 (0x0004)              
	float                                              distanceToSpawnPoint;                             		// 0x000004 (0x0004)              
};
//0x000014
//tStreamedComponent[0x1FE6F7D0]
struct FtStreamedComponent
{
	struct FName                                       m_sName;                                          		// 0x000000 (0x0008)              
	unsigned long                                      m_bIsPermanant : 1;                               		// 0x000008 (0x0004) [0x00000001] 
	class UActorComponent*                             m_pPermanant;                                     		// 0x00000C (0x0004)              
	class UActorComponent*                             m_pStreamed;                                      		// 0x000010 (0x0004)              
};
//0x00000C
//cDeferredDetachment[0x1FE6F768]
struct FcDeferredDetachment
{
	int                                                ComponentIndex;                                   		// 0x000000 (0x0004)              
	double                                             Time;                                             		// 0x000004 (0x0008)              
};
//0x00000C
//cStreamedShadowMap1D[0x1FE6F700]
struct FcStreamedShadowMap1D
{
	struct FName                                       m_Name;                                           		// 0x000000 (0x0008)              
	class UObject*                                     m_ShadowMap;                                      		// 0x000008 (0x0004)              
};
//0x000018
//cStreamedLightingLODInfo[0x1FE6F698]
struct FcStreamedLightingLODInfo
{
	struct FcStreamedShadowMap1D                       AOMap1D;                                          		// 0x000000 (0x000C)              
	TArray<struct FcStreamedShadowMap1D>               ShadowMaps;                                       		// 0x00000C (0x000C)              
};
//0x000010
//MaterialInstanceList[0x1FE6F630]
struct FMaterialInstanceList
{
	unsigned long                                      m_bInitialised : 1;                               		// 0x000000 (0x0004) [0x00000001] 
	TArray<class UMaterialInstance*>                   m_Materials;                                      		// 0x000004 (0x000C)              
};
//0x000050
//BoomBoxPlaybackInfo[0x1FE6F5C8]
struct FBoomBoxPlaybackInfo
{
	int                                                m_nOwnerCharacterUID;                             		// 0x000000 (0x0004)              
	unsigned long                                      m_bMp3Playing : 1;                                		// 0x000004 (0x0004) [0x00000001] 
	struct FGuid                                       m_MusicStudioSongGuid;                            		// 0x000008 (0x0010)              
	int                                                m_nInitialPlaybackServerTime;                     		// 0x000018 (0x0004)              
	int                                                m_nEventIndex;                                    		// 0x00001C (0x0004)              
	struct FString                                     m_sTrackName;                                     		// 0x000020 (0x000C)              
	struct FString                                     m_sArtistName;                                    		// 0x00002C (0x000C)              
	struct FString                                     m_sAlbumName;                                     		// 0x000038 (0x000C)              
	struct FString                                     m_sGenre;                                         		// 0x000044 (0x000C)              
};
//0x000020
//AllocatedTaskTarget[0x1FE6F560]
struct FAllocatedTaskTarget
{
	class AActor*                                      m_pTarget;                                        		// 0x000000 (0x0004)              
	class AcDistrictBlock*                             m_pDistrictBlock;                                 		// 0x000004 (0x0004)              
	unsigned long                                      m_bPendingReallocate : 1;                         		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      m_bReallocateUseDistanceCheck : 1;                		// 0x000008 (0x0004) [0x00000002] 
	FVector3                                           m_vecReallocateDistanceCheckLocation;             		// 0x00000C (0x000C)              
	float                                              m_fMinReallocationDistance;                       		// 0x000018 (0x0004)              
	float                                              m_fMaxReallocationDistance;                       		// 0x00001C (0x0004)              
};
//0x000004
//RefCountPtr_Mirror[0x1FE6F4F8]
struct FRefCountPtr_Mirror
{
	DWORD                                              Reference;                                        		// 0x000000 (0x0004)              
};
//0x000014
//TextureStats[0x1FE6F490]
struct FTextureStats
{
	int                                                nTotalMipChanges;                                 		// 0x000000 (0x0004)              
	int                                                nTotalResidentMips;                               		// 0x000004 (0x0004)              
	int                                                nNumFrames;                                       		// 0x000008 (0x0004)              
	int                                                nPrevResidentMips;                                		// 0x00000C (0x0004)              
	int                                                nTotalMips;                                       		// 0x000010 (0x0004)              
};
//0x000008
//cWeatherData[0x1FE6F428]
struct FcWeatherData
{
	int                                                m_PreviousWeather;                                		// 0x000000 (0x0004)              
	int                                                m_CurrentWeather;                                 		// 0x000004 (0x0004)              
};
//0x00002D
//LoadingMovieConfig[0x1FE6F3C0]
struct FLoadingMovieConfig
{
	struct FString                                     m_sLoadingMovie;                                  		// 0x000000 (0x000C)              
	struct FString                                     m_sUIScene;                                       		// 0x00000C (0x000C)              
	int                                                m_eDistrict;                                      		// 0x000018 (0x0004)              
	int                                                m_eLoadingMovieConfig;                            		// 0x00001C (0x0004)              
	int                                                m_nNumAudioTracks;                                		// 0x000020 (0x0004)              
	int                                                m_nNumberOfPages;                                 		// 0x000024 (0x0004)              
	int                                                m_nPageLength;                                    		// 0x000028 (0x0004)              
	unsigned char                                      m_eTransitionType;                                		// 0x00002C (0x0001)              PROPERTY: etLoadingMovieTransitionType
};
//0x000009
//LoadingMovieAudioBank[0x1FE6F358]
struct FLoadingMovieAudioBank
{
	int                                                m_nBankEnd;                                       		// 0x000000 (0x0004)              
	int                                                m_nBankStart;                                     		// 0x000004 (0x0004)              
	unsigned char                                      m_eLoadingMovieAudioBanks;                        		// 0x000008 (0x0001)              PROPERTY: etLoadingMovieTransitionType
};
//0x00001A
//LoadingMovieTip[0x1FE6F2F0]
struct FLoadingMovieTip
{
	struct FString                                     m_sMessage;                                       		// 0x000000 (0x000C)              
	int                                                m_eLoadingMovieTip;                               		// 0x00000C (0x0004)              
	int                                                m_nMaximumRating;                                 		// 0x000010 (0x0004)              
	int                                                m_nMinimumRating;                                 		// 0x000014 (0x0004)              
	unsigned char                                      m_eDistrictRestriction;                           		// 0x000018 (0x0001)              PROPERTY: etLoadingScreenHintDomain
	unsigned char                                      m_eFaction;                                       		// 0x000019 (0x0001)              PROPERTY: etFaction
};
//0x000014
//UVBleedBuildData[0x1FE6F288]
struct FUVBleedBuildData
{
	unsigned char                                      eBuildState;                                      		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	int                                                nStateIndex;                                      		// 0x000004 (0x0004)              
	class UGolemSkeletalMesh*                          pCustomisedMesh;                                  		// 0x000008 (0x0004)              
	class UGolemSkeletalMesh*                          pUVBleedMesh;                                     		// 0x00000C (0x0004)              
	DWORD                                              pSeamExtState;                                    		// 0x000010 (0x0004)              
};
//0x000004
//CargoTaskItem[0x1FE6F220]
struct FCargoTaskItem
{
	class AcEquipableTaskItem*                         m_TaskItem;                                       		// 0x000000 (0x0004)              
};
//0x000014
//cObjectAhead[0x1FE6F1B8]
struct FcObjectAhead
{
	unsigned char                                      m_eType;                                          		// 0x000000 (0x0001)              PROPERTY: etObjectAheadType
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	float                                              m_fDistance;                                      		// 0x000004 (0x0004)              
	struct FcRoutePosition                             m_Position;                                       		// 0x000008 (0x0008)              
	class UObject*                                     m_pObject;                                        		// 0x000010 (0x0004)              
};
//0x00000C
//NPCDriverType[0x1FE6F150]
struct FNPCDriverType
{
	int                                                m_eNPCDriverType;                                 		// 0x000000 (0x0004)              
	int                                                m_eNPCTypeFemale;                                 		// 0x000004 (0x0004)              
	int                                                m_eNPCTypeMale;                                   		// 0x000008 (0x0004)              
};
//0x000008
//RouteInfo[0x1FE6F0E8]
struct FRouteInfo
{
	class URWTechNode*                                 pStartNode;                                       		// 0x000000 (0x0004)              
	class URWTechNode*                                 pEndNode;                                         		// 0x000004 (0x0004)              
};
//0x000028
//VehicleTextureBuildData[0x1FE6F080]
struct FVehicleTextureBuildData
{
	unsigned char                                      eBuildState;                                      		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	int                                                nStateIndex;                                      		// 0x000004 (0x0004)              
	unsigned char                                      eTextureType;                                     		// 0x000008 (0x0001)              PROPERTY: etGolemobilePartCategory
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	class UGolemobileDescriptor*                       pDescriptor;                                      		// 0x00000C (0x0004)              
	class USkeletalMesh*                               pSkeletalMesh;                                    		// 0x000010 (0x0004)              
	class UObject*                                     pOuter;                                           		// 0x000014 (0x0004)              
	DWORD                                              pOutput;                                          		// 0x000018 (0x0004)              
	class UAPBStudioVehicle*                           pStudio;                                          		// 0x00001C (0x0004)              
	int                                                nDecalLayerToSkip;                                		// 0x000020 (0x0004)              
	unsigned long                                      bGenerateMipLevels : 1;                           		// 0x000024 (0x0004) [0x00000001] 
	unsigned long                                      bInGame : 1;                                      		// 0x000024 (0x0004) [0x00000002] 
	unsigned long                                      bCompressTextures : 1;                            		// 0x000024 (0x0004) [0x00000004] 
	unsigned long                                      bLocalPlayer : 1;                                 		// 0x000024 (0x0004) [0x00000008] 
};
//0x00001C
//VFXBombSecondaryExplosion[0x1FE6F018]
struct FVFXBombSecondaryExplosion
{
	class UParticleSystemComponent*                    m_ExplosionComponent;                             		// 0x000000 (0x0004)              
	float                                              m_fPostExplosionDelay;                            		// 0x000004 (0x0004)              
	struct FString                                     m_sSFX;                                           		// 0x000008 (0x000C)              
	unsigned long                                      m_bAttachToBomb : 1;                              		// 0x000014 (0x0004) [0x00000001] 
	float                                              m_fTimer;                                         		// 0x000018 (0x0004)              
};
//0x000010
//cFogSettings[0x1FE6EFB0]
struct FcFogSettings
{
	float                                              Density;                                          		// 0x000000 (0x0004)              
	float                                              StartDistance;                                    		// 0x000004 (0x0004)              
	float                                              LightBrightness;                                  		// 0x000008 (0x0004)              
	DWORD                                              LightColor;                                       		// 0x00000C (0x0004)              
};
//0x00000C
//cMaterialScalarParamValue[0x1FE6EF48]
struct FcMaterialScalarParamValue
{
	struct FName                                       Name;                                             		// 0x000000 (0x0008)              
	float                                              Value;                                            		// 0x000008 (0x0004)              
};
//0x000018
//cMaterialVectorParamValue[0x1FE6EEE0]
struct FcMaterialVectorParamValue
{
	struct FName                                       Name;                                             		// 0x000000 (0x0008)              
	struct FLinearColor                                Value;                                            		// 0x000008 (0x0010)              
};
//0x000020
//cMatInstanceOverrides[0x1FE6EE78]
struct FcMatInstanceOverrides
{
	struct FName                                       Name;                                             		// 0x000000 (0x0008)              
	TArray<struct FcMaterialScalarParamValue>          ScalarParams;                                     		// 0x000008 (0x000C)              
	TArray<struct FcMaterialVectorParamValue>          VectorParams;                                     		// 0x000014 (0x000C)              
};
//0x000014
//cLightingSettings[0x1FE6EE10]
struct FcLightingSettings
{
	DWORD                                              DirectionalLightColour;                           		// 0x000000 (0x0004)              
	float                                              DirectionalLightBrightness;                       		// 0x000004 (0x0004)              
	DWORD                                              SkyLightColour;                                   		// 0x000008 (0x0004)              
	float                                              SkyLightBrightness;                               		// 0x00000C (0x0004)              
	float                                              LightMapMultiplier;                               		// 0x000010 (0x0004)              
};
//0x000100
//cWeatherKeyframe[0x1FE6EDA8]
struct FcWeatherKeyframe
{
	float                                              TimeOfDay;                                        		// 0x000000 (0x0004)              
	struct FcFogSettings                               FogSettings;                                      		// 0x000004 (0x0010)              
	TArray<struct FcMatInstanceOverrides>              MaterialParameters;                               		// 0x000014 (0x000C)              
	struct FPostProcessSettings                        PostProcessSettings;                              		// 0x000020 (0x00CC)              
	struct FcLightingSettings                          LightingSettings;                                 		// 0x0000EC (0x0014)              
};
//0x00001C
//cWeatherType[0x1FE6ED40]
struct FcWeatherType
{
	struct FString                                     Name;                                             		// 0x000000 (0x000C)              
	float                                              Probability;                                      		// 0x00000C (0x0004)              
	TArray<struct FcWeatherKeyframe>                   KeyFrames;                                        		// 0x000010 (0x000C)              
};
//0x00000C
//cWeatherConstants[0x1FE6ECD8]
struct FcWeatherConstants
{
	float                                              DirectionalLightBrightnessMultiplier;             		// 0x000000 (0x0004)              
	float                                              SkyLightBrightnessMultiplier;                     		// 0x000004 (0x0004)              
	float                                              SkyLightLowerBrightnessScalar;                    		// 0x000008 (0x0004)              
};
//0x00000C
//cStreamedShadowMap1D[0x1FE6EC70]
struct FcStreamedShadowMap1D
{
	struct FName                                       m_Name;                                           		// 0x000000 (0x0008)              
	class UObject*                                     m_ShadowMap;                                      		// 0x000008 (0x0004)              
};
//0x000098
//cFeatureInfo[0x1FE6EC08]
struct FcFeatureInfo
{
	FMatrix                                            m_LocalToWorld;                                   		// 0x000000 (0x0040)              
	class UStaticMesh*                                 m_pMesh;                                          		// 0x000040 (0x0004)              
	TArray<struct FGuid>                               m_aIrrelevantLights;                              		// 0x000044 (0x000C)              
	DWORD                                              m_pLightMap;                                      		// 0x000050 (0x0004)              
	TArray<struct FcStreamedShadowMap1D>               m_aStreamedShadowMaps;                            		// 0x000054 (0x000C)              
	struct FcStreamedShadowMap1D                       m_StreamedAOMap1D;                                		// 0x000060 (0x000C)              
	TArray<class UObject*>                             m_aShadowMaps;                                    		// 0x00006C (0x000C)              
	class UObject*                                     m_AOMap1D;                                        		// 0x000078 (0x0004)              
	int                                                m_nEmissiveIndex;                                 		// 0x00007C (0x0004)              
	TArray<class UMaterialInterface*>                  m_aDiscreteMaterials;                             		// 0x000080 (0x000C)              
	TArray<class UMaterialInterface*>                  m_aMergedMaterials;                               		// 0x00008C (0x000C)              
};
//0x000038
//BlockTransform[0x1FE6EBA0]
struct FBlockTransform
{
	FVector3                                           m_SourceOrigin;                                   		// 0x000000 (0x000C)              
	FVector3                                           m_SourceEnd;                                      		// 0x00000C (0x000C)              
	FVector3                                           m_TargetOrigin;                                   		// 0x000018 (0x000C)              
	FVector3                                           m_TargetEnd;                                      		// 0x000024 (0x000C)              
	int                                                m_nSourceID;                                      		// 0x000030 (0x0004)              
	int                                                m_nBlock;                                         		// 0x000034 (0x0004)              
};
//0x00000C
//TextureTransform[0x1FE6EB38]
struct FTextureTransform
{
	TArray<struct FBlockTransform>                     aBlocks;                                          		// 0x000000 (0x000C)              
};
//0x00000C
//MorphVertex[0x1FE6EAD0]
struct FMorphVertex
{
	DWORD                                              PositionDelta;                                    		// 0x000000 (0x0004)              
	int                                                MorphMode;                                        		// 0x000004 (0x0004)              
	int                                                NormalDelta;                                      		// 0x000008 (0x0004)              
};
//0x00001C
//HairMorphVertex[0x1FE6EA68]
struct FHairMorphVertex
{
	FVector3                                           PositionDelta;                                    		// 0x000000 (0x000C)              
	FVector3                                           NormalDelta;                                      		// 0x00000C (0x000C)              
	unsigned long                                      bValid : 1;                                       		// 0x000018 (0x0004) [0x00000001] 
	unsigned long                                      bLocked : 1;                                      		// 0x000018 (0x0004) [0x00000002] 
};
//0x00000C
//FaceMapping[0x1FE6EA00]
struct FFaceMapping
{
	TArray<int>                                        m_aMapping;                                       		// 0x000000 (0x000C)              
};
//0x000088
//MeshBuildData[0x1FE6E998]
struct FMeshBuildData
{
	unsigned char                                      eState;                                           		// 0x000000 (0x0001)              PROPERTY: etMeshBuildState
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	int                                                nStateIndex;                                      		// 0x000004 (0x0004)              
	int                                                nStateIndex2;                                     		// 0x000008 (0x0004)              
	class UObject*                                     pDescriptor;                                      		// 0x00000C (0x0004)              
	class UGolemSkeletalMesh*                          pDestSkeletalMesh;                                		// 0x000010 (0x0004)              
	class UMorphTargetSet*                             pDestMorphSet;                                    		// 0x000014 (0x0004)              
	int                                                nLOD;                                             		// 0x000018 (0x0004)              
	int                                                nMaxLOD;                                          		// 0x00001C (0x0004)              
	TArray<unsigned long>                              aSegmentRemovedFlags;                             		// 0x000020 (0x000C)              
	TArray<struct FFaceMapping>                        aLODFaceMapping;                                  		// 0x00002C (0x000C)              
	class USkeletalMeshComponent*                      pTempSkelMeshComponent;                           		// 0x000038 (0x0004)              
	TArray<struct FHairMorphVertex>                    aHairVertsMorphs;                                 		// 0x00003C (0x000C)              
	unsigned long                                      bInGame : 1;                                      		// 0x000048 (0x0004) [0x00000001] 
	unsigned long                                      bFirstLOD : 1;                                    		// 0x000048 (0x0004) [0x00000002] 
	unsigned long                                      bRemoveSourceData : 1;                            		// 0x000048 (0x0004) [0x00000004] 
	unsigned long                                      bBakeShapeMorphsAndScale : 1;                     		// 0x000048 (0x0004) [0x00000008] 
	TArray<struct FName>                               aMorphTargetsModified;                            		// 0x00004C (0x000C)              
	TArray<struct FMorphVertex>                        aBaseOffsets;                                     		// 0x000058 (0x000C)              
	TArray<struct FMorphVertex>                        aShapeOffsets;                                    		// 0x000064 (0x000C)              
	TArray<class UMorphTargetSet*>                     aMorphSetsToClone;                                		// 0x000070 (0x000C)              
	TArray<class UMorphTarget*>                        aStreamedMorphs;                                  		// 0x00007C (0x000C)              
};
//0x00000C
//DescriptorDataStream[0x1FE6E930]
struct FDescriptorDataStream
{
	TArray<unsigned char>                              Data;                                             		// 0x000000 (0x000C)              
};
//0x000018
//ActorDescriptorMap[0x1FE6E8C8]
struct FActorDescriptorMap
{
	class AActor*                                      assetActor;                                       		// 0x000000 (0x0004)              
	int                                                descriptorIndex;                                  		// 0x000004 (0x0004)              
	struct FString                                     emoteName;                                        		// 0x000008 (0x000C)              
	unsigned long                                      bIsEmotePlaying : 1;                              		// 0x000014 (0x0004) [0x00000001] 
};
//0x000008
//AssetTraceResult[0x1FE6E860]
struct FAssetTraceResult
{
	unsigned char                                      AssetType;                                        		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	int                                                AssetIndex;                                       		// 0x000004 (0x0004)              
};
//0x00000C
//MatInstanceArray[0x1FE6E7F8]
struct FMatInstanceArray
{
	TArray<class UMaterialInstanceConstant*>           A;                                                		// 0x000000 (0x000C)              
};
//0x000030
//ProjectionParameters[0x1FE6E790]
struct FProjectionParameters
{
	unsigned char                                      ProjectionMode;                                   		// 0x000000 (0x0001)              PROPERTY: etProjectionMode
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	FVector3                                           Location;                                         		// 0x000004 (0x000C)              
	FVector3                                           Direction;                                        		// 0x000010 (0x000C)              
	float                                              FOV;                                              		// 0x00001C (0x0004)              
	float                                              Zoom;                                             		// 0x000020 (0x0004)              
	float                                              Height;                                           		// 0x000024 (0x0004)              
	float                                              Radius;                                           		// 0x000028 (0x0004)              
	float                                              Offset;                                           		// 0x00002C (0x0004)              
};
//0x000014
//TransformsParameters[0x1FE6E728]
struct FTransformsParameters
{
	float                                              Rotation;                                         		// 0x000000 (0x0004)              
	FVector2                                           Scale;                                            		// 0x000004 (0x0008)              
	FVector2                                           Skew;                                             		// 0x00000C (0x0008)              
};

/*
-----------------------------------------------------------------
 - Classes
-----------------------------------------------------------------
*/
//0x0000AF (0x000108 - 0x000059)
//cTaskTargetComponent[0x026BEFE0]
class UcTaskTargetComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	DWORD                                              VfTable_IiBombTarget;                             		// 0x00005C (0x0004)              
	int                                                m_eTaskTargetType;                                		// 0x000060 (0x0004)              
	class AcMission*                                   m_pMission;                                       		// 0x000064 (0x0004)              
	class UMissionObjective*                           m_pMissionObjective;                              		// 0x000068 (0x0004)              
	unsigned char                                      _0x00006C[0x4];                                   		// 0x00006C (0x0004) ALIGNEMENT
	int                                                m_nTaskOperationID;                               		// 0x000070 (0x0004)              
	int                                                m_nTaskOperationID_Pending;                       		// 0x000074 (0x0004)              
	unsigned long                                      m_bTaskItemsSpawned : 1;                          		// 0x000078 (0x0004) [0x00000001] 
	unsigned long                                      m_bOwnerHUDMarkerEnabled : 1;                     		// 0x000078 (0x0004) [0x00000002] 
	unsigned long                                      m_bOppositionHUDMarkerEnabled : 1;                		// 0x000078 (0x0004) [0x00000004] 
	unsigned long                                      m_bOutOfMissionHUDMarkerEnabled : 1;              		// 0x000078 (0x0004) [0x00000008] 
	unsigned long                                      m_bOwnerHUDMarkerIsBeingModified : 1;             		// 0x000078 (0x0004) [0x00000010] 
	unsigned long                                      m_bOppositionHUDMarkerIsBeingModified : 1;        		// 0x000078 (0x0004) [0x00000020] 
	unsigned long                                      m_bOutOfMissionHUDMarkerIsBeingModified : 1;      		// 0x000078 (0x0004) [0x00000040] 
	unsigned long                                      m_bLocalPlayerRelevant : 1;                       		// 0x000078 (0x0004) [0x00000080] 
	unsigned long                                      m_bLocalPlayerTriggerable : 1;                    		// 0x000078 (0x0004) [0x00000100] 
	unsigned long                                      m_bSafeSpawnLocationChecked : 1;                  		// 0x000078 (0x0004) [0x00000200] 
	unsigned long                                      m_bSafeSpawnLocationFound : 1;                    		// 0x000078 (0x0004) [0x00000400] 
	unsigned long                                      m_bEnableSpawnLocationDebug : 1;                  		// 0x000078 (0x0004) [0x00000800] 
	int                                                m_nHUDMarkerID;                                   		// 0x00007C (0x0004)              
	int                                                m_nOppositionHUDMarkerID;                         		// 0x000080 (0x0004)              
	int                                                m_nOutOfMissionHUDMarkerID;                       		// 0x000084 (0x0004)              
	unsigned char                                      m_eOwnerHUDMarkerState;                           		// 0x000088 (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      m_eOppositionHUDMarkerState;                      		// 0x000089 (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      m_eOutOfMissionHUDMarkerState;                    		// 0x00008A (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      m_nOwnerHUDMarkerType;                            		// 0x00008B (0x0001)              PROPERTY: 
	unsigned char                                      m_nOppositionHUDMarkerType;                       		// 0x00008C (0x0001)              PROPERTY: 
	unsigned char                                      m_nOutOfMissionHUDMarkerType;                     		// 0x00008D (0x0001)              PROPERTY: 
	unsigned char                                      m_eTaskTargetTriggerState;                        		// 0x00008E (0x0001)              PROPERTY: etTriggerState
	unsigned char                                      m_ePreviousTaskTargetTriggerState;                		// 0x00008F (0x0001)              PROPERTY: etTriggerState
	unsigned char                                      m_eServerTaskTargetState;                         		// 0x000090 (0x0001)              PROPERTY: etTaskTargetVFXState
	unsigned char                                      m_eClientTaskTargetState;                         		// 0x000091 (0x0001)              PROPERTY: etTaskTargetVFXState
	unsigned char                                      _0x000092[0x2];                                   		// 0x000092 (0x0002) MISSED OFFSET
	int                                                m_nHUDMarkerIndex;                                		// 0x000094 (0x0004)              
	class AcAPBPlayerController*                       m_pBomberPC;                                      		// 0x000098 (0x0004)              
	class AcAPBPlayerController*                       m_pDefuserPC;                                     		// 0x00009C (0x0004)              
	int                                                m_nBombState;                                     		// 0x0000A0 (0x0004)              
	int                                                m_nBombTimer;                                     		// 0x0000A4 (0x0004)              
	FVector3                                           m_vecBombLocation;                                		// 0x0000A8 (0x000C)              
	DWORD                                              m_pSddBombLevelInfo;                              		// 0x0000B4 (0x0004)              
	DWORD                                              m_pSddTaskTargetClass;                            		// 0x0000B8 (0x0004)              
	DWORD                                              m_pSddTaskTargetType;                             		// 0x0000BC (0x0004)              
	DWORD                                              m_pSddOpenWorldActivityInfo;                      		// 0x0000C0 (0x0004)              
	int                                                m_nTaskRandomSeed;                                		// 0x0000C4 (0x0004)              
	DWORD                                              m_pTriggerTeam;                                   		// 0x0000C8 (0x0004)              
	DWORD                                              m_pPreviousTriggerTeam;                           		// 0x0000CC (0x0004)              
	class AActor*                                      m_TaskTargetActor;                                		// 0x0000D0 (0x0004)              
	TArray<class AcAPBPlayerController*>               m_aPlayersCurrentlyAttempting;                    		// 0x0000D4 (0x000C)              
	TArray<class AcAPBPlayerController*>               m_aLastPlayersToTriggerOrReset;                   		// 0x0000E0 (0x000C)              
	DWORD                                              m_pOwningTeam;                                    		// 0x0000EC (0x0004)              
	FVector3                                           m_vecSafeSpawnLocation;                           		// 0x0000F0 (0x000C)              
	struct FScriptDelegate                             __OnTaskItemSpawned__Delegate;                    		// 0x0000FC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskTargetComponent");
		return pClassPointer;
	};

public:
	unsigned char GetTaskTargetVFXStateForClient(class AcAPBPlayerController* i_pPC);//APBGame.cTaskTargetComponent.GetTaskTargetVFXStateForClient
	bool IsValidUntriggeredTarget(class AcAPBPlayerController* pPC);//APBGame.cTaskTargetComponent.IsValidUntriggeredTarget
	void ClientNotifyBombLocationChanged(FVector3 vecLocation);//APBGame.cTaskTargetComponent.ClientNotifyBombLocationChanged
	bool IsResetable();//APBGame.cTaskTargetComponent.IsResetable
	void NotifyBombDisposalSuccessful();//APBGame.cTaskTargetComponent.NotifyBombDisposalSuccessful
	int RetBombState();//APBGame.cTaskTargetComponent.RetBombState
	void ClientPendingVFXUpdate();//APBGame.cTaskTargetComponent.ClientPendingVFXUpdate
	void ClientSetPlayerCanTrigger(bool i_bCanTrigger);//APBGame.cTaskTargetComponent.ClientSetPlayerCanTrigger
	void NotifyBombFuseTriggered();//APBGame.cTaskTargetComponent.NotifyBombFuseTriggered
	class UiBombTarget* RetBombTarget();//APBGame.cTaskTargetComponent.RetBombTarget
	unsigned char GetTaskTargetVFXState();//APBGame.cTaskTargetComponent.GetTaskTargetVFXState
	void ClientNotifyBombTimerUpdated(int nBombTimeRemaining);//APBGame.cTaskTargetComponent.ClientNotifyBombTimerUpdated
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cTaskTargetComponent.PartiallyTriggerTaskTarget
	void NotifyBombExploded();//APBGame.cTaskTargetComponent.NotifyBombExploded
	void DeactivateTaskTarget();//APBGame.cTaskTargetComponent.DeactivateTaskTarget
	void ClientSetPlayerRelevant(bool i_bRelevant);//APBGame.cTaskTargetComponent.ClientSetPlayerRelevant
	int GetTriggeredTeamID();//APBGame.cTaskTargetComponent.GetTriggeredTeamID
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cTaskTargetComponent.ResetTaskTarget
	void ServerSetTaskTargetVFXState(unsigned char eTaskTargetState);//APBGame.cTaskTargetComponent.ServerSetTaskTargetVFXState
	class AcAPBPlayerController* RetBomber();//APBGame.cTaskTargetComponent.RetBomber
	void CleanUpTaskTarget();//APBGame.cTaskTargetComponent.CleanUpTaskTarget
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cTaskTargetComponent.TriggerTaskTarget
	unsigned char GetTriggerState();//APBGame.cTaskTargetComponent.GetTriggerState
	bool IsTriggerableByOpposition();//APBGame.cTaskTargetComponent.IsTriggerableByOpposition
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.cTaskTargetComponent.ActivateTaskTarget
	void NotifyBombStateChanged(int nBombState);//APBGame.cTaskTargetComponent.NotifyBombStateChanged
	bool IsPartiallyTriggered();//APBGame.cTaskTargetComponent.IsPartiallyTriggered
	void PlantBomb(class AcAPBPlayerController* pBomberPC);//APBGame.cTaskTargetComponent.PlantBomb
	void ActivateProxyTaskTarget(class UMissionObjective* i_pMissionObjective,class AActor* i_pRealTaskTarget);//APBGame.cTaskTargetComponent.ActivateProxyTaskTarget
	bool IsBombExplodeTimerSet();//APBGame.cTaskTargetComponent.IsBombExplodeTimerSet
	bool IsBombExploded();//APBGame.cTaskTargetComponent.IsBombExploded
	void OnTaskItemSpawned(class AcTaskItem* pSpawnedTaskItem);//APBGame.cTaskTargetComponent.OnTaskItemSpawned
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.cTaskTargetComponent.InitTaskTarget
	class AcAPBPlayerController* RetDefuser();//APBGame.cTaskTargetComponent.RetDefuser
	bool IsBombPlanted();//APBGame.cTaskTargetComponent.IsBombPlanted
	void UpdateBombTimer();//APBGame.cTaskTargetComponent.UpdateBombTimer
	void ClientNotifyTaskVFXStateChanged(unsigned char eTriggeredState);//APBGame.cTaskTargetComponent.ClientNotifyTaskVFXStateChanged
	bool IsBombDefused();//APBGame.cTaskTargetComponent.IsBombDefused
	void ClientNotifyBombStateChanged(int nBombState,bool bAllowTransitionEffects);//APBGame.cTaskTargetComponent.ClientNotifyBombStateChanged
	void DefuseBomb(class AcAPBPlayerController* pDefuserPC);//APBGame.cTaskTargetComponent.DefuseBomb
	bool ClientIsLocalPlayerRelevant();//APBGame.cTaskTargetComponent.ClientIsLocalPlayerRelevant
	void ClientNotifyTaskOperationChanged(int nTaskOperationIndex);//APBGame.cTaskTargetComponent.ClientNotifyTaskOperationChanged
	void StartBombExplodeTimer(float fDelay);//APBGame.cTaskTargetComponent.StartBombExplodeTimer
	bool ClientCanLocalPlayerTrigger();//APBGame.cTaskTargetComponent.ClientCanLocalPlayerTrigger
	unsigned char GetClientTaskTargetVFXState();//APBGame.cTaskTargetComponent.GetClientTaskTargetVFXState
	void ClearBombExplodeTimer();//APBGame.cTaskTargetComponent.ClearBombExplodeTimer
	bool IsOpenWorldTarget();//APBGame.cTaskTargetComponent.IsOpenWorldTarget
	void MoveTargetState(class AActor* targetActor);//APBGame.cTaskTargetComponent.MoveTargetState
	bool IsTriggered();//APBGame.cTaskTargetComponent.IsTriggered
};
UClass* UcTaskTargetComponent::pClassPointer = NULL;

//0x000004 (0x00010C - 0x000108)
//cTaskTargetComponentNPC[0x026BF110]
class UcTaskTargetComponentNPC : public UcTaskTargetComponent
{
public:
	int                                                m_nTaskOperationInstanceID;                       		// 0x000108 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskTargetComponentNPC");
		return pClassPointer;
	};

public:
	void CleanUpTaskTarget();//APBGame.cTaskTargetComponentNPC.CleanUpTaskTarget
	void DeactivateTaskTarget();//APBGame.cTaskTargetComponentNPC.DeactivateTaskTarget
	bool OnBeginUse(class APawn* User,unsigned char eCSA);//APBGame.cTaskTargetComponentNPC.OnBeginUse
	void OnEndUse(class AcAPBPlayerController* pPC,unsigned char eCSA,unsigned char eCSAState);//APBGame.cTaskTargetComponentNPC.OnEndUse
};
UClass* UcTaskTargetComponentNPC::pClassPointer = NULL;

//0x0000D0 (0x000129 - 0x000059)
//cAPBUsableComponent[0x026BF240]
class UcAPBUsableComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	struct FIPData                                     m_aIPData[0x5];                                   		// 0x00005C (0x0064)              
	struct FIPData                                     m_aPendingIPData[0x5];                            		// 0x0000C0 (0x0064)              
	float                                              m_fCentralCachedProgress;                         		// 0x000124 (0x0004)              
	unsigned char                                      m_eCentralCachedCSA;                              		// 0x000128 (0x0001)              PROPERTY: etContextSensitiveActionBase

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBUsableComponent");
		return pClassPointer;
	};

public:
	void ResetAllPendingUsers(unsigned char eCSA);//APBGame.cAPBUsableComponent.ResetAllPendingUsers
	void ResetAllUsers(unsigned char eCSA);//APBGame.cAPBUsableComponent.ResetAllUsers
	void ResetAllCSAUsers(unsigned char eCSA);//APBGame.cAPBUsableComponent.ResetAllCSAUsers
};
UClass* UcAPBUsableComponent::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cDesignerCurve[0x10354E60]
class UcDesignerCurve : public UObject
{
public:
	float                                              m_fMaxValue;                                      		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDesignerCurve");
		return pClassPointer;
	};
};
UClass* UcDesignerCurve::pClassPointer = NULL;

//0x00001C (0x000060 - 0x000044)
//cDesignerCurve_Float[0x10354D30]
class UcDesignerCurve_Float : public UcDesignerCurve
{
public:
	struct FRawDistributionFloat                       m_Distribution;                                   		// 0x000044 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDesignerCurve_Float");
		return pClassPointer;
	};
};
UClass* UcDesignerCurve_Float::pClassPointer = NULL;

//0x00001C (0x000060 - 0x000044)
//cDesignerCurve_Vector[0x10354C00]
class UcDesignerCurve_Vector : public UcDesignerCurve
{
public:
	struct FRawDistributionVector                      m_Distribution;                                   		// 0x000044 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDesignerCurve_Vector");
		return pClassPointer;
	};
};
UClass* UcDesignerCurve_Vector::pClassPointer = NULL;

//0x00000C (0x0002A0 - 0x000294)
//cPausedParticleSystemComponent[0x10354AD0]
class UcPausedParticleSystemComponent : public UParticleSystemComponent
{
public:
	float                                              TargetTime;                                       		// 0x000294 (0x0004)              
	int                                                TargetLODLevel;                                   		// 0x000298 (0x0004)              
	unsigned long                                      m_bAtTargetTime : 1;                              		// 0x00029C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPausedParticleSystemComponent");
		return pClassPointer;
	};
};
UClass* UcPausedParticleSystemComponent::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cEnums[0x103549A0]
class UcEnums : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEnums");
		return pClassPointer;
	};
};
UClass* UcEnums::pClassPointer = NULL;

//0x000030 (0x000070 - 0x000040)
//cDelegates[0x10354870]
class UcDelegates : public UObject
{
public:
	struct FScriptDelegate                             __OnConsumerUseRequestReceived__Delegate;         		// 0x000040 (0x000C)              
	struct FScriptDelegate                             __OnCarrierUseRequestReceived__Delegate;          		// 0x00004C (0x000C)              
	struct FScriptDelegate                             __OnConsumerLeftZone__Delegate;                   		// 0x000058 (0x000C)              
	struct FScriptDelegate                             __OnCarrierLeftZone__Delegate;                    		// 0x000064 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDelegates");
		return pClassPointer;
	};

public:
	void OnConsumerLeftZone(class UiAmmoConsumer* consumer);//APBGame.cDelegates.OnConsumerLeftZone
	bool OnConsumerUseRequestReceived(class UiAmmoConsumer* consumer);//APBGame.cDelegates.OnConsumerUseRequestReceived
	bool OnCarrierUseRequestReceived(class UiAmmoCarrier* carrier);//APBGame.cDelegates.OnCarrierUseRequestReceived
	void OnCarrierLeftZone(class UiAmmoCarrier* carrier);//APBGame.cDelegates.OnCarrierLeftZone
};
UClass* UcDelegates::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDD[0x10354740]
class UcSDD : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDD");
		return pClassPointer;
	};

public:
	unsigned char CastTrackedActivityOperation(int I);//APBGame.cSDD.CastTrackedActivityOperation
	unsigned char CastHUDMarkerUsage(int I);//APBGame.cSDD.CastHUDMarkerUsage
	unsigned char CastTaskItemBatch(int I);//APBGame.cSDD.CastTaskItemBatch
	unsigned char CastClanRank(int I);//APBGame.cSDD.CastClanRank
	unsigned char CastWitnessingFunctionality(int I);//APBGame.cSDD.CastWitnessingFunctionality
	unsigned char CastWeaponFiringState(int I);//APBGame.cSDD.CastWeaponFiringState
	unsigned char CastCapacityItemType(int I);//APBGame.cSDD.CastCapacityItemType
	unsigned char CastWorldFaction(int I);//APBGame.cSDD.CastWorldFaction
	unsigned char CastVehicleTempSetup(int I);//APBGame.cSDD.CastVehicleTempSetup
	unsigned char CastModifierType(int I);//APBGame.cSDD.CastModifierType
	unsigned char CastNPCReaction(int I);//APBGame.cSDD.CastNPCReaction
	unsigned char CastCameraHandyCamPresetExported(int I);//APBGame.cSDD.CastCameraHandyCamPresetExported
	unsigned char CastCrimeTargetType(int I);//APBGame.cSDD.CastCrimeTargetType
	unsigned char CastTESProjectionInfo(int I);//APBGame.cSDD.CastTESProjectionInfo
	unsigned char CastWeaponPickupAvailability(int I);//APBGame.cSDD.CastWeaponPickupAvailability
	unsigned char CastInventoryItemCategoryLimited(int I);//APBGame.cSDD.CastInventoryItemCategoryLimited
	unsigned char CastTaskObjectiveStage(int I);//APBGame.cSDD.CastTaskObjectiveStage
	unsigned char CastRCEType(int I);//APBGame.cSDD.CastRCEType
	unsigned char CastLocaleTypePriority(int I);//APBGame.cSDD.CastLocaleTypePriority
	unsigned char CastHeatFunctionality(int I);//APBGame.cSDD.CastHeatFunctionality
	unsigned char CastVehiclePositionIndex(int I);//APBGame.cSDD.CastVehiclePositionIndex
	unsigned char CastCSAInputType(int I);//APBGame.cSDD.CastCSAInputType
	unsigned char CastCSALineCheckType(int I);//APBGame.cSDD.CastCSALineCheckType
	unsigned char CastNPCEvent(int I);//APBGame.cSDD.CastNPCEvent
	unsigned char CastCSAAnimEvent(int I);//APBGame.cSDD.CastCSAAnimEvent
	unsigned char CastMarketplaceAuctionType(int I);//APBGame.cSDD.CastMarketplaceAuctionType
	unsigned char CastOrganisation(int I);//APBGame.cSDD.CastOrganisation
	unsigned char CastCSAAnimType(int I);//APBGame.cSDD.CastCSAAnimType
	unsigned char CastTrackedActivityUnitConversion(int I);//APBGame.cSDD.CastTrackedActivityUnitConversion
	unsigned char CastPawnHitReaction_ConstrainedBoneList(int I);//APBGame.cSDD.CastPawnHitReaction_ConstrainedBoneList
	unsigned char CastEncumbrance(int I);//APBGame.cSDD.CastEncumbrance
	unsigned char CastNameQuery(int I);//APBGame.cSDD.CastNameQuery
	unsigned char CastCSAAlignmentType(int I);//APBGame.cSDD.CastCSAAlignmentType
	unsigned char CastHUDInfoBrowser(int I);//APBGame.cSDD.CastHUDInfoBrowser
	unsigned char CastDisplayPointActivationType(int I);//APBGame.cSDD.CastDisplayPointActivationType
	unsigned char CastVIPAssignmentMethod(int I);//APBGame.cSDD.CastVIPAssignmentMethod
	unsigned char CastHUDCeremonyMsgType(int I);//APBGame.cSDD.CastHUDCeremonyMsgType
	unsigned char CastVehicleDamageVFXState(int I);//APBGame.cSDD.CastVehicleDamageVFXState
	unsigned char CastFXMaterialImpact(int I);//APBGame.cSDD.CastFXMaterialImpact
	unsigned char CastCameraShakePresetExported(int I);//APBGame.cSDD.CastCameraShakePresetExported
	unsigned char CastPedestrianTTIReaction(int I);//APBGame.cSDD.CastPedestrianTTIReaction
	unsigned char CastMissionCriminalDispatchTypes(int I);//APBGame.cSDD.CastMissionCriminalDispatchTypes
	unsigned char CastHostingConfigFileCharacterPersistentId(int I);//APBGame.cSDD.CastHostingConfigFileCharacterPersistentId
	unsigned char CastHUDZoneNotifier(int I);//APBGame.cSDD.CastHUDZoneNotifier
	unsigned char CastMissionUITrackedValueDisplay(int I);//APBGame.cSDD.CastMissionUITrackedValueDisplay
	unsigned char CastMarketplaceSearch(int I);//APBGame.cSDD.CastMarketplaceSearch
	unsigned char CastCustomisedAssetPriority(int I);//APBGame.cSDD.CastCustomisedAssetPriority
	unsigned char CastTaskItemAnimationType(int I);//APBGame.cSDD.CastTaskItemAnimationType
	unsigned char CastTaskTargetGraffiti(int I);//APBGame.cSDD.CastTaskTargetGraffiti
	unsigned char CastMailDuration(int I);//APBGame.cSDD.CastMailDuration
	unsigned char CastYesNoEither(int I);//APBGame.cSDD.CastYesNoEither
	unsigned char CastHUDMessageRank(int I);//APBGame.cSDD.CastHUDMessageRank
	unsigned char CastPlayerRadarPings(int I);//APBGame.cSDD.CastPlayerRadarPings
	unsigned char CastMissionEnforcerDispatchTypes(int I);//APBGame.cSDD.CastMissionEnforcerDispatchTypes
	unsigned char CastTTINPCEndingType(int I);//APBGame.cSDD.CastTTINPCEndingType
	unsigned char CastVehicleSpecificationMethod(int I);//APBGame.cSDD.CastVehicleSpecificationMethod
	unsigned char CastWeaponOverrideType(int I);//APBGame.cSDD.CastWeaponOverrideType
	unsigned char CastDirection(int I);//APBGame.cSDD.CastDirection
	unsigned char CastCameraConstant(int I);//APBGame.cSDD.CastCameraConstant
	unsigned char CastVehicleGear(int I);//APBGame.cSDD.CastVehicleGear
	unsigned char CastChatTag(int I);//APBGame.cSDD.CastChatTag
	unsigned char CastNPCWorldEvent(int I);//APBGame.cSDD.CastNPCWorldEvent
	unsigned char CastMarketplaceTimeLeft(int I);//APBGame.cSDD.CastMarketplaceTimeLeft
	unsigned char CastCrimeType(int I);//APBGame.cSDD.CastCrimeType
	unsigned char CastPvPRule(int I);//APBGame.cSDD.CastPvPRule
	unsigned char CastTaskTargetCategory(int I);//APBGame.cSDD.CastTaskTargetCategory
	unsigned char CastVehicleDistricts(int I);//APBGame.cSDD.CastVehicleDistricts
	unsigned char CastFacialHairRandomGeneration(int I);//APBGame.cSDD.CastFacialHairRandomGeneration
	unsigned char CastCSAType(int I);//APBGame.cSDD.CastCSAType
	unsigned char CastCCameraMode(int I);//APBGame.cSDD.CastCCameraMode
	unsigned char CastTaskOperationCategory(int I);//APBGame.cSDD.CastTaskOperationCategory
	unsigned char CastVehicleSetupType(int I);//APBGame.cSDD.CastVehicleSetupType
	unsigned char CastSpawnDestroyData(int I);//APBGame.cSDD.CastSpawnDestroyData
	unsigned char CastHUDMarkerCategory(int I);//APBGame.cSDD.CastHUDMarkerCategory
	unsigned char CastActivityMessageLocation(int I);//APBGame.cSDD.CastActivityMessageLocation
	unsigned char CastVehicleBatch(int I);//APBGame.cSDD.CastVehicleBatch
	unsigned char CastLoadingMovieTransitionType(int I);//APBGame.cSDD.CastLoadingMovieTransitionType
	unsigned char CastTTIPlayerAnimType(int I);//APBGame.cSDD.CastTTIPlayerAnimType
	unsigned char CastChatState(int I);//APBGame.cSDD.CastChatState
	unsigned char CastMarketplaceListType(int I);//APBGame.cSDD.CastMarketplaceListType
	unsigned char CastSpawnConstant(int I);//APBGame.cSDD.CastSpawnConstant
	unsigned char CastMailDetach(int I);//APBGame.cSDD.CastMailDetach
	unsigned char CastPawnHitReaction_Bool(int I);//APBGame.cSDD.CastPawnHitReaction_Bool
	unsigned char CastHUDMarkerState(int I);//APBGame.cSDD.CastHUDMarkerState
	unsigned char CastMarketplaceDuration(int I);//APBGame.cSDD.CastMarketplaceDuration
	unsigned char CastCharacterStatus(int I);//APBGame.cSDD.CastCharacterStatus
	unsigned char CastContextSensitiveActionBase(int I);//APBGame.cSDD.CastContextSensitiveActionBase
	unsigned char CastFeedbackMessage(int I);//APBGame.cSDD.CastFeedbackMessage
	unsigned char CastHUDConstantBool(int I);//APBGame.cSDD.CastHUDConstantBool
	unsigned char CastPedestrianTempSetup(int I);//APBGame.cSDD.CastPedestrianTempSetup
	unsigned char CastCrimeTargetCategory(int I);//APBGame.cSDD.CastCrimeTargetCategory
	unsigned char CastMarketplaceSort(int I);//APBGame.cSDD.CastMarketplaceSort
	unsigned char CastFaction(int I);//APBGame.cSDD.CastFaction
	unsigned char CastTutorialType(int I);//APBGame.cSDD.CastTutorialType
	unsigned char CastFireOffset(int I);//APBGame.cSDD.CastFireOffset
	unsigned char CastTaskItemSpecificationMethod(int I);//APBGame.cSDD.CastTaskItemSpecificationMethod
	unsigned char CastTimeofDayPeriod(int I);//APBGame.cSDD.CastTimeofDayPeriod
	unsigned char CastInteractiveActorType(int I);//APBGame.cSDD.CastInteractiveActorType
	unsigned char CastContactType(int I);//APBGame.cSDD.CastContactType
	unsigned char CastPrimitiveType(int I);//APBGame.cSDD.CastPrimitiveType
	unsigned char CastModifierClass(int I);//APBGame.cSDD.CastModifierClass
	unsigned char CastMailConstant(int I);//APBGame.cSDD.CastMailConstant
	unsigned char CastMailSort(int I);//APBGame.cSDD.CastMailSort
	unsigned char CastCharacterVOIPStatus(int I);//APBGame.cSDD.CastCharacterVOIPStatus
	unsigned char CastTaskItemSize(int I);//APBGame.cSDD.CastTaskItemSize
	unsigned char CastOnFootDeathAnimation(int I);//APBGame.cSDD.CastOnFootDeathAnimation
	unsigned char CastDisplayPointType(int I);//APBGame.cSDD.CastDisplayPointType
	unsigned char CastErrorCode(int I);//APBGame.cSDD.CastErrorCode
	unsigned char CastTutorialPosition(int I);//APBGame.cSDD.CastTutorialPosition
	unsigned char CastMarketplaceConstant(int I);//APBGame.cSDD.CastMarketplaceConstant
	unsigned char CastCrimeTargetZone(int I);//APBGame.cSDD.CastCrimeTargetZone
	unsigned char CastVehicleColour(int I);//APBGame.cSDD.CastVehicleColour
	unsigned char CastPawnHitReaction_Vector2D(int I);//APBGame.cSDD.CastPawnHitReaction_Vector2D
	unsigned char CastModifierItemEffectType(int I);//APBGame.cSDD.CastModifierItemEffectType
	unsigned char CastDeployedUsableArray(int I);//APBGame.cSDD.CastDeployedUsableArray
	unsigned char CastHUDConstant(int I);//APBGame.cSDD.CastHUDConstant
	unsigned char CastOpenWorldConstant(int I);//APBGame.cSDD.CastOpenWorldConstant
	unsigned char CastWarningPromptGroup(int I);//APBGame.cSDD.CastWarningPromptGroup
	unsigned char CastMarketplaceInfo(int I);//APBGame.cSDD.CastMarketplaceInfo
	unsigned char CastAPBViewportType(int I);//APBGame.cSDD.CastAPBViewportType
	unsigned char CastInteractiveActorCategory(int I);//APBGame.cSDD.CastInteractiveActorCategory
	unsigned char CastModifierStackingSlot(int I);//APBGame.cSDD.CastModifierStackingSlot
	unsigned char CastNPCCategory(int I);//APBGame.cSDD.CastNPCCategory
	unsigned char CastChatConstant(int I);//APBGame.cSDD.CastChatConstant
	unsigned char CastSkillRatingConstant(int I);//APBGame.cSDD.CastSkillRatingConstant
	unsigned char CastPvPType(int I);//APBGame.cSDD.CastPvPType
	unsigned char CastTaskItemVisibility(int I);//APBGame.cSDD.CastTaskItemVisibility
	unsigned char CastVehicleDriveType(int I);//APBGame.cSDD.CastVehicleDriveType
	unsigned char CastHUDWSCharInfo(int I);//APBGame.cSDD.CastHUDWSCharInfo
	unsigned char CastPawnHitReaction_Float(int I);//APBGame.cSDD.CastPawnHitReaction_Float
	unsigned char CastHUDReticule(int I);//APBGame.cSDD.CastHUDReticule
	unsigned char CastMailInfo(int I);//APBGame.cSDD.CastMailInfo
	unsigned char CastGraffitiInteractionType(int I);//APBGame.cSDD.CastGraffitiInteractionType
	unsigned char CastTaskItemCategory(int I);//APBGame.cSDD.CastTaskItemCategory
	unsigned char CastTaskTargetSpecificationMethod(int I);//APBGame.cSDD.CastTaskTargetSpecificationMethod
	unsigned char CastWeaponClass(int I);//APBGame.cSDD.CastWeaponClass
	unsigned char CastGameplayEventCategory2(int I);//APBGame.cSDD.CastGameplayEventCategory2
	unsigned char CastFormulaOperation(int I);//APBGame.cSDD.CastFormulaOperation
	unsigned char CastCSAAutoRouteType(int I);//APBGame.cSDD.CastCSAAutoRouteType
	unsigned char CastPawnHitReaction_BoneRemapTable(int I);//APBGame.cSDD.CastPawnHitReaction_BoneRemapTable
	unsigned char CastGameplayEventMutuallyExclusiveGroup(int I);//APBGame.cSDD.CastGameplayEventMutuallyExclusiveGroup
	unsigned char CastCSAEndPoint(int I);//APBGame.cSDD.CastCSAEndPoint
	unsigned char CastMissionResultReason(int I);//APBGame.cSDD.CastMissionResultReason
	unsigned char CastHostingConfigFileAccountPersistentId(int I);//APBGame.cSDD.CastHostingConfigFileAccountPersistentId
	unsigned char CastCrimeTargetEnvironmental(int I);//APBGame.cSDD.CastCrimeTargetEnvironmental
	unsigned char CastVehicleUICategory(int I);//APBGame.cSDD.CastVehicleUICategory
	unsigned char CastInventoryItemSubCategory(int I);//APBGame.cSDD.CastInventoryItemSubCategory
	unsigned char CastHeatConstant(int I);//APBGame.cSDD.CastHeatConstant
	unsigned char CastTaskTargetClass(int I);//APBGame.cSDD.CastTaskTargetClass
	unsigned char CastLoadingScreenHintDomain(int I);//APBGame.cSDD.CastLoadingScreenHintDomain
	unsigned char CastPedestrianPaletteType(int I);//APBGame.cSDD.CastPedestrianPaletteType
	unsigned char CastCSA_IATState(int I);//APBGame.cSDD.CastCSA_IATState
	unsigned char CastAPBPawnConstant(int I);//APBGame.cSDD.CastAPBPawnConstant
	unsigned char CastPawnHitReaction_BoneList(int I);//APBGame.cSDD.CastPawnHitReaction_BoneList
	unsigned char CastVehicleModelClass(int I);//APBGame.cSDD.CastVehicleModelClass
	unsigned char CastVehicleInteractionAnimation(int I);//APBGame.cSDD.CastVehicleInteractionAnimation
	unsigned char CastMarketplaceCashType(int I);//APBGame.cSDD.CastMarketplaceCashType
	unsigned char CastModifierEffectType(int I);//APBGame.cSDD.CastModifierEffectType
	unsigned char CastCSAState(int I);//APBGame.cSDD.CastCSAState
	unsigned char CastTutorialBypassBehaviour(int I);//APBGame.cSDD.CastTutorialBypassBehaviour
	unsigned char CastHUDPopUpItemRule(int I);//APBGame.cSDD.CastHUDPopUpItemRule
	unsigned char CastWeaponImpactClass(int I);//APBGame.cSDD.CastWeaponImpactClass
	unsigned char CastTaskMemberRequirement(int I);//APBGame.cSDD.CastTaskMemberRequirement
	unsigned char CastPawnHitReactionType(int I);//APBGame.cSDD.CastPawnHitReactionType
	unsigned char CastPopulation(int I);//APBGame.cSDD.CastPopulation
	unsigned char CastHUDMessageType(int I);//APBGame.cSDD.CastHUDMessageType
	unsigned char CastGameplayEventCategory(int I);//APBGame.cSDD.CastGameplayEventCategory
	unsigned char CastInventoryItemCategory(int I);//APBGame.cSDD.CastInventoryItemCategory
	unsigned char CastPawnHitReaction_SpringList(int I);//APBGame.cSDD.CastPawnHitReaction_SpringList
	unsigned char CastActivityMessageParameterConversion(int I);//APBGame.cSDD.CastActivityMessageParameterConversion
	unsigned char CastDifficultyRating(int I);//APBGame.cSDD.CastDifficultyRating
	unsigned char CastTimeOfDayAvailability(int I);//APBGame.cSDD.CastTimeOfDayAvailability
	unsigned char CastMissionUITrackedValue(int I);//APBGame.cSDD.CastMissionUITrackedValue
	unsigned char CastSpawnVariable(int I);//APBGame.cSDD.CastSpawnVariable
};
UClass* UcSDD::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDTask[0x10354610]
class UcSDDTask : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDTask");
		return pClassPointer;
	};
};
UClass* UcSDDTask::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDItem[0x103544E0]
class UcSDDItem : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDItem");
		return pClassPointer;
	};
};
UClass* UcSDDItem::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDVehicle[0x103543B0]
class UcSDDVehicle : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDVehicle");
		return pClassPointer;
	};
};
UClass* UcSDDVehicle::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDContact[0x10354280]
class UcSDDContact : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDContact");
		return pClassPointer;
	};
};
UClass* UcSDDContact::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDTimeOfDay[0x10354150]
class UcSDDTimeOfDay : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDTimeOfDay");
		return pClassPointer;
	};
};
UClass* UcSDDTimeOfDay::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDTaskItem[0x10354020]
class UcSDDTaskItem : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDTaskItem");
		return pClassPointer;
	};
};
UClass* UcSDDTaskItem::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDWeapon[0x10353EF0]
class UcSDDWeapon : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDWeapon");
		return pClassPointer;
	};
};
UClass* UcSDDWeapon::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDPreload[0x10353DC0]
class UcSDDPreload : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDPreload");
		return pClassPointer;
	};
};
UClass* UcSDDPreload::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDPawnAttachment[0x10353C90]
class UcSDDPawnAttachment : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDPawnAttachment");
		return pClassPointer;
	};
};
UClass* UcSDDPawnAttachment::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cSDDVFX[0x10353B60]
class UcSDDVFX : public UObject
{
public:
	unsigned long                                      m_bDebugVFX : 1;                                  		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      m_bSetupSDDVFX : 1;                               		// 0x000040 (0x0004) [0x00000002] 
	unsigned long                                      m_bSetupDefaultVFX : 1;                           		// 0x000040 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDVFX");
		return pClassPointer;
	};
};
UClass* UcSDDVFX::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDHeat[0x10353A30]
class UcSDDHeat : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDHeat");
		return pClassPointer;
	};
};
UClass* UcSDDHeat::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDInteractionPoint[0x10353900]
class UcSDDInteractionPoint : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDInteractionPoint");
		return pClassPointer;
	};
};
UClass* UcSDDInteractionPoint::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAPBPawnDeclarations[0x103537D0]
class UcAPBPawnDeclarations : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBPawnDeclarations");
		return pClassPointer;
	};
};
UClass* UcAPBPawnDeclarations::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cGolemTypes[0x103536A0]
class UcGolemTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGolemTypes");
		return pClassPointer;
	};
};
UClass* UcGolemTypes::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cGroupTypes[0x10353570]
class UcGroupTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGroupTypes");
		return pClassPointer;
	};
};
UClass* UcGroupTypes::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cVehicleTypes[0x10353440]
class UcVehicleTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleTypes");
		return pClassPointer;
	};
};
UClass* UcVehicleTypes::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//cAPBInterfacesDummy[0x10353310]
class AcAPBInterfacesDummy : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBInterfacesDummy");
		return pClassPointer;
	};
};
UClass* AcAPBInterfacesDummy::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iAmmoContainer[0x103531E0]
class UiAmmoContainer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iAmmoContainer");
		return pClassPointer;
	};

public:
	bool IsEmpty(int eCategory);//APBGame.iAmmoContainer.IsEmpty
	int RetCapacity(int eCategory);//APBGame.iAmmoContainer.RetCapacity
	bool IsFull(int eCategory);//APBGame.iAmmoContainer.IsFull
	int RetAmmoAmount(int eCategory);//APBGame.iAmmoContainer.RetAmmoAmount
	bool IsAmmoCategorySupported(int eCategory);//APBGame.iAmmoContainer.IsAmmoCategorySupported
	int StoreAmmo(int eCategory,int eTarget,int nAmount);//APBGame.iAmmoContainer.StoreAmmo
	int WithdrawAmmo(int eCategory,int nAmount);//APBGame.iAmmoContainer.WithdrawAmmo
};
UClass* UiAmmoContainer::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iAmmoConsumer[0x103530B0]
class UiAmmoConsumer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iAmmoConsumer");
		return pClassPointer;
	};

public:
	void NotifyEndInventoryAccess(bool bCancel);//APBGame.iAmmoConsumer.NotifyEndInventoryAccess
	bool IsResupplyingAmmo();//APBGame.iAmmoConsumer.IsResupplyingAmmo
	float RetAmmoResupplyProgress();//APBGame.iAmmoConsumer.RetAmmoResupplyProgress
	void CancelInventoryAccess();//APBGame.iAmmoConsumer.CancelInventoryAccess
	class UiAmmoSupplier* RetInteractingAmmoSupplier();//APBGame.iAmmoConsumer.RetInteractingAmmoSupplier
	unsigned char CheckCanBeginInventoryAccess(class UiAmmoSupplier* pSupplier);//APBGame.iAmmoConsumer.CheckCanBeginInventoryAccess
	void NotifyBeginInventoryAccess(unsigned char eType,class UiAmmoSupplier* supplier);//APBGame.iAmmoConsumer.NotifyBeginInventoryAccess
	bool IsAccessingInventory();//APBGame.iAmmoConsumer.IsAccessingInventory
	class AActor* RetAmmoConsumerActor();//APBGame.iAmmoConsumer.RetAmmoConsumerActor
	void UpdateAmmoResupplyProgress(float fProgress);//APBGame.iAmmoConsumer.UpdateAmmoResupplyProgress
	unsigned char RetInventoryAccessType();//APBGame.iAmmoConsumer.RetInventoryAccessType
	void NotifyBeginAmmoResupply(class UiAmmoSupplier* supplier);//APBGame.iAmmoConsumer.NotifyBeginAmmoResupply
	unsigned char CheckCanBeginAmmoResupply();//APBGame.iAmmoConsumer.CheckCanBeginAmmoResupply
	void NotifyEndAmmoResupply(bool bCancel);//APBGame.iAmmoConsumer.NotifyEndAmmoResupply
	void CancelAmmoResupply(unsigned char eWeaponType);//APBGame.iAmmoConsumer.CancelAmmoResupply
};
UClass* UiAmmoConsumer::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iAmmoSupplier[0x10352F80]
class UiAmmoSupplier : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iAmmoSupplier");
		return pClassPointer;
	};

public:
	bool IsAmmoCarrier();//APBGame.iAmmoSupplier.IsAmmoCarrier
	bool IsResupplyingPlayer(class AcAPBPlayerController* pPlayer);//APBGame.iAmmoSupplier.IsResupplyingPlayer
	bool IsRangeBasedAmmoSupplier();//APBGame.iAmmoSupplier.IsRangeBasedAmmoSupplier
	bool CanPlayerAccessInventory(class AcAPBPlayerController* pPlayer);//APBGame.iAmmoSupplier.CanPlayerAccessInventory
	void BeginResupply(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType);//APBGame.iAmmoSupplier.BeginResupply
	float RetAmmoResupplyRange();//APBGame.iAmmoSupplier.RetAmmoResupplyRange
	void NotifyConsumerAttributesModified(class UiAmmoConsumer* pConsumer);//APBGame.iAmmoSupplier.NotifyConsumerAttributesModified
	void EndResupply(class AcAPBPlayerController* pPlayer,bool bCancel,unsigned char eWeaponType);//APBGame.iAmmoSupplier.EndResupply
	bool IsLimitedAmmoSupplier();//APBGame.iAmmoSupplier.IsLimitedAmmoSupplier
	void BeginInventoryAccess(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.iAmmoSupplier.BeginInventoryAccess
	FVector3 RetAmmoResupplyLocation();//APBGame.iAmmoSupplier.RetAmmoResupplyLocation
	void NotifySupplierAttributesModified();//APBGame.iAmmoSupplier.NotifySupplierAttributesModified
	void EndInventoryAccess(class AcAPBPlayerController* pPlayer,bool bCancel);//APBGame.iAmmoSupplier.EndInventoryAccess
	unsigned char CheckCanPlayerAccessInventory(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.iAmmoSupplier.CheckCanPlayerAccessInventory
	class UcAmmoDepotComponent* RetAmmoDepotComponent();//APBGame.iAmmoSupplier.RetAmmoDepotComponent
	bool CanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.iAmmoSupplier.CanResupplyPlayer
	int AmmoClipsLeft();//APBGame.iAmmoSupplier.AmmoClipsLeft
	void CancelAllResupplyOperations();//APBGame.iAmmoSupplier.CancelAllResupplyOperations
	bool WithdrawAmmoClip();//APBGame.iAmmoSupplier.WithdrawAmmoClip
	unsigned char CheckCanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.iAmmoSupplier.CheckCanResupplyPlayer
	class AActor* RetAmmoSupplierActor();//APBGame.iAmmoSupplier.RetAmmoSupplierActor
};
UClass* UiAmmoSupplier::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iAmmoCarrier[0x10352E50]
class UiAmmoCarrier : public UiAmmoSupplier
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iAmmoCarrier");
		return pClassPointer;
	};

public:
	class AcAPBPlayerController* RetAmmoCarrierOwner();//APBGame.iAmmoCarrier.RetAmmoCarrierOwner
	bool IsAmmoCarrierDepotDeployed();//APBGame.iAmmoCarrier.IsAmmoCarrierDepotDeployed
	unsigned char CanPlayerInteractWithAmmoCarrier(class AcAPBPlayerController* i_pController);//APBGame.iAmmoCarrier.CanPlayerInteractWithAmmoCarrier
	bool IsAmmoCarrierModifierActive();//APBGame.iAmmoCarrier.IsAmmoCarrierModifierActive
	bool CanDeployAmmoCarrierDepot(bool i_bActivationCheck);//APBGame.iAmmoCarrier.CanDeployAmmoCarrierDepot
};
UClass* UiAmmoCarrier::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iBombTarget[0x10352D20]
class UiBombTarget : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iBombTarget");
		return pClassPointer;
	};

public:
	void ClientNotifyBombLocationChanged(FVector3 vecLocation);//APBGame.iBombTarget.ClientNotifyBombLocationChanged
	void NotifyBombFuseTriggered();//APBGame.iBombTarget.NotifyBombFuseTriggered
	void ClientNotifyBombTimerUpdated(int nBombTimeRemaining);//APBGame.iBombTarget.ClientNotifyBombTimerUpdated
	bool IsBombDefused();//APBGame.iBombTarget.IsBombDefused
	bool IsBombPlanted();//APBGame.iBombTarget.IsBombPlanted
	void NotifyBombExploded();//APBGame.iBombTarget.NotifyBombExploded
	class UiBombTarget* RetBombTarget();//APBGame.iBombTarget.RetBombTarget
	int RetBombState();//APBGame.iBombTarget.RetBombState
	void DefuseBomb(class AcAPBPlayerController* pDefuserPC);//APBGame.iBombTarget.DefuseBomb
	class AcAPBPlayerController* RetDefuser();//APBGame.iBombTarget.RetDefuser
	void NotifyBombDisposalSuccessful();//APBGame.iBombTarget.NotifyBombDisposalSuccessful
	class AcAPBPlayerController* RetBomber();//APBGame.iBombTarget.RetBomber
	void ClientNotifyBombStateChanged(int nBombState,bool bAllowTransitionEffects);//APBGame.iBombTarget.ClientNotifyBombStateChanged
	void PlantBomb(class AcAPBPlayerController* pBomberPC);//APBGame.iBombTarget.PlantBomb
	bool IsBombExploded();//APBGame.iBombTarget.IsBombExploded
};
UClass* UiBombTarget::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//CombatTargetingInterface[0x10352BF0]
class UCombatTargetingInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.CombatTargetingInterface");
		return pClassPointer;
	};

public:
	void RetExplosionOcclusionExtents(TArray<FVector3>* Verts,FVector3* ExplosionLocation);//APBGame.CombatTargetingInterface.RetExplosionOcclusionExtents
	bool IsStaticTarget();//APBGame.CombatTargetingInterface.IsStaticTarget
	bool CanBeTargeted(class AcAPBPlayerController* PC);//APBGame.CombatTargetingInterface.CanBeTargeted
	bool CanBeDamaged(class AcAPBPlayerController* PC);//APBGame.CombatTargetingInterface.CanBeDamaged
	bool IsDynamicTarget();//APBGame.CombatTargetingInterface.IsDynamicTarget
};
UClass* UCombatTargetingInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iCustomisedActor[0x10352AC0]
class UiCustomisedActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iCustomisedActor");
		return pClassPointer;
	};

public:
	void CustomisationDownloadComplete(class UcCompressedAssetCustomisation* Data,int nUserData);//APBGame.iCustomisedActor.CustomisationDownloadComplete
};
UClass* UiCustomisedActor::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//DamageInterface[0x10352990]
class UDamageInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.DamageInterface");
		return pClassPointer;
	};

public:
	bool Restore(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.DamageInterface.Restore
	bool IsHard();//APBGame.DamageInterface.IsHard
	bool IsSoft();//APBGame.DamageInterface.IsSoft
};
UClass* UDamageInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iDeliverable[0x10352860]
class UiDeliverable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iDeliverable");
		return pClassPointer;
	};

public:
	unsigned char RetDeliverableState();//APBGame.iDeliverable.RetDeliverableState
	void SetDeliverableHUDMarkerVisibility(bool bHideAllFromOwners,bool bHideAllFromOpposition,bool bHideFromOutOfMission);//APBGame.iDeliverable.SetDeliverableHUDMarkerVisibility
};
UClass* UiDeliverable::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//TaskTargetInterface[0x10352730]
class UTaskTargetInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.TaskTargetInterface");
		return pClassPointer;
	};

public:
	void DeactivateTaskTarget();//APBGame.TaskTargetInterface.DeactivateTaskTarget
	void MoveTargetState(class AActor* targetActor);//APBGame.TaskTargetInterface.MoveTargetState
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.TaskTargetInterface.PartiallyTriggerTaskTarget
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.TaskTargetInterface.TriggerTaskTarget
	void CleanUpTaskTarget();//APBGame.TaskTargetInterface.CleanUpTaskTarget
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.TaskTargetInterface.InitTaskTarget
	class UcTaskTargetComponent* GetTaskTargetComponent();//APBGame.TaskTargetInterface.GetTaskTargetComponent
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.TaskTargetInterface.ResetTaskTarget
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.TaskTargetInterface.ActivateTaskTarget
};
UClass* UTaskTargetInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iRepairableVehicle[0x10352600]
class UiRepairableVehicle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iRepairableVehicle");
		return pClassPointer;
	};

public:
	float RetDamagePercentage();//APBGame.iRepairableVehicle.RetDamagePercentage
	void OnAutomatedRepairEnd(class UiVehicleRepairer* repairer);//APBGame.iRepairableVehicle.OnAutomatedRepairEnd
	int RetMaxHealth();//APBGame.iRepairableVehicle.RetMaxHealth
	void OnAutomatedRepairBegin(class UiVehicleRepairer* repairer);//APBGame.iRepairableVehicle.OnAutomatedRepairBegin
	float RetDamageLevel(unsigned char eDamageIndex);//APBGame.iRepairableVehicle.RetDamageLevel
	float RetExtremeDamageLevel(unsigned char eDamageIndex);//APBGame.iRepairableVehicle.RetExtremeDamageLevel
	class UiVehicleRepairer* RetRepairer();//APBGame.iRepairableVehicle.RetRepairer
	double RetLastDamageTimeStamp();//APBGame.iRepairableVehicle.RetLastDamageTimeStamp
	void SetExtremeDamageLevel(unsigned char eDamageIndex,float fAmount);//APBGame.iRepairableVehicle.SetExtremeDamageLevel
	void SetDamageLevel(unsigned char eDamageIndex,float fAmount);//APBGame.iRepairableVehicle.SetDamageLevel
	bool IsRepairing();//APBGame.iRepairableVehicle.IsRepairing
	int RepairDamage(int nAmount,bool i_bIsManualRepair);//APBGame.iRepairableVehicle.RepairDamage
	int RetHealth();//APBGame.iRepairableVehicle.RetHealth
	int RetDamageAmount();//APBGame.iRepairableVehicle.RetDamageAmount
	void UpdateVisualDamageAmounts();//APBGame.iRepairableVehicle.UpdateVisualDamageAmounts
	void OnRepairSessionUpdated(float fRepairPercentage);//APBGame.iRepairableVehicle.OnRepairSessionUpdated
	float RetMaxRepairTimeSecs();//APBGame.iRepairableVehicle.RetMaxRepairTimeSecs
};
UClass* UiRepairableVehicle::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iVehicleRepairer[0x103524D0]
class UiVehicleRepairer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iVehicleRepairer");
		return pClassPointer;
	};

public:
	bool IsCurrentlyRepairing(class UiRepairableVehicle* Vehicle);//APBGame.iVehicleRepairer.IsCurrentlyRepairing
	bool CanBeginRepair(class UiRepairableVehicle* Vehicle,class AcAPBPlayerController* payingPlayer);//APBGame.iVehicleRepairer.CanBeginRepair
	void EndRepair(class UiRepairableVehicle* Vehicle,bool bCancel);//APBGame.iVehicleRepairer.EndRepair
	bool BeginRepair(class UiRepairableVehicle* Vehicle,class AcAPBPlayerController* payingPlayer);//APBGame.iVehicleRepairer.BeginRepair
	void OnRepairAttributesModified(class UiRepairableVehicle* Vehicle);//APBGame.iVehicleRepairer.OnRepairAttributesModified
};
UClass* UiVehicleRepairer::pClassPointer = NULL;

//0x000018 (0x000278 - 0x000260)
//cPickupBase[0x103523A0]
class AcPickupBase : public AActor
{
public:
	DWORD                                              VfTable_IUseInterface;                            		// 0x000260 (0x0004)              
	class USkeletalMeshComponent*                      m_pMesh;                                          		// 0x000264 (0x0004)              
	class UCylinderComponent*                          m_pCollisionCylinder;                             		// 0x000268 (0x0004)              
	class UcAPBUsableComponent*                        m_pUseComponent;                                  		// 0x00026C (0x0004)              
	class ULightEnvironmentComponent*                  m_pLightEnvironment;                              		// 0x000270 (0x0004)              
	float                                              m_fSafeHeightTimer;                               		// 0x000274 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPickupBase");
		return pClassPointer;
	};

public:
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cPickupBase.BeginUse
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cPickupBase.EndUse
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cPickupBase.IsCSASupported
};
UClass* AcPickupBase::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UseInterface[0x10352270]
class UUseInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.UseInterface");
		return pClassPointer;
	};

public:
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.UseInterface.IsCSASupported
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.UseInterface.EndUse
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.UseInterface.BeginUse
};
UClass* UUseInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iNPCLookAt[0x10352140]
class UiNPCLookAt : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iNPCLookAt");
		return pClassPointer;
	};

public:
	int GetLookAtPriority();//APBGame.iNPCLookAt.GetLookAtPriority
	FVector3 GetLookAtPosition();//APBGame.iNPCLookAt.GetLookAtPosition
	void SetLookAtPriority(int pr_nLookAtPriority);//APBGame.iNPCLookAt.SetLookAtPriority
};
UClass* UiNPCLookAt::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cTaskTargetTypes[0x10352010]
class UcTaskTargetTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskTargetTypes");
		return pClassPointer;
	};
};
UClass* UcTaskTargetTypes::pClassPointer = NULL;

//0x000024 (0x000284 - 0x000260)
//cMission[0x10351DB0]
class AcMission : public AActor
{
public:
	int                                                m_nUniqueID;                                      		// 0x000260 (0x0004)              
	struct FGuid                                       m_GloballyUniqueID;                               		// 0x000264 (0x0010)              
	int                                                m_nNextTaskTargetMarkerIndex;                     		// 0x000274 (0x0004)              
	TArray<class UiModifiable*>                        m_ParticipationModifiables;                       		// 0x000278 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMission");
		return pClassPointer;
	};

public:
	void RefreshShouldShowLeaveMissionOnUI();//APBGame.cMission.RefreshShouldShowLeaveMissionOnUI
	void SimulateTimeout();//APBGame.cMission.SimulateTimeout
};
UClass* AcMission::pClassPointer = NULL;

//0x000310 (0x000594 - 0x000284)
//cLegacyMission[0x10351EE0]
class AcLegacyMission : public AcMission
{
public:
	unsigned char                                      m_eMovingTargetPossession;                        		// 0x000284 (0x0001)              PROPERTY: etMovingTargetPossessionType
	unsigned char                                      m_TaskStatus;                                     		// 0x000285 (0x0001)              PROPERTY: 
	unsigned char                                      m_nCallingForBackup;                              		// 0x000286 (0x0001)              PROPERTY: 
	unsigned char                                      m_eMissionResult;                                 		// 0x000287 (0x0001)              PROPERTY: etMissionResult
	unsigned char                                      m_eMissionResultReason;                           		// 0x000288 (0x0001)              PROPERTY: etMissionResultReason
	unsigned char                                      _0x000289[0x3];                                   		// 0x000289 (0x0003) MISSED OFFSET
	struct FTaskVIPState                               m_OwningSideVIPState;                             		// 0x00028C (0x000C)              
	struct FTaskVIPState                               m_OpposingSideVIPState;                           		// 0x000298 (0x000C)              
	TArray<struct FtPlayerTriggerInfo>                 m_aOwnerObjectiveCompletingPlayers;               		// 0x0002A4 (0x000C)              
	TArray<struct FtPlayerTriggerInfo>                 m_aOppositionObjectiveCompletingPlayers;          		// 0x0002B0 (0x000C)              
	int                                                m_nMissionTemplateID;                             		// 0x0002BC (0x0004)              
	struct FMissionTemplate                            m_MissionTemplate;                                		// 0x0002C0 (0x005C)              
	TArray<class AcLegacyMissionObjective*>            m_OwnerObjectives;                                		// 0x00031C (0x000C)              
	TArray<class AcLegacyMissionObjective*>            m_OppositionObjectives;                           		// 0x000328 (0x000C)              
	TArray<class AcTaskTargetAllocation*>              m_TaskTargetAllocations;                          		// 0x000334 (0x000C)              
	int                                                m_nOwningSideID;                                  		// 0x000340 (0x0004)              
	int                                                m_nOpposingSideID;                                		// 0x000344 (0x0004)              
	int                                                m_nCurrentObjective;                              		// 0x000348 (0x0004)              
	int                                                m_nConcurrentObjective;                           		// 0x00034C (0x0004)              
	int                                                m_nCurrentStage;                                  		// 0x000350 (0x0004)              
	int                                                m_nStageObjectivesCompleted;                      		// 0x000354 (0x0004)              
	int                                                m_nStageObjectiveCount;                           		// 0x000358 (0x0004)              
	int                                                m_nNextStageObjectiveIndex;                       		// 0x00035C (0x0004)              
	int                                                m_nOwnerObjectivePoints;                          		// 0x000360 (0x0004)              
	int                                                m_nOppositionObjectivePoints;                     		// 0x000364 (0x0004)              
	int                                                m_nOwnerTakeouts;                                 		// 0x000368 (0x0004)              
	int                                                m_nOppositionTakeouts;                            		// 0x00036C (0x0004)              
	int                                                m_nOwnerTakeoutLimit;                             		// 0x000370 (0x0004)              
	int                                                m_nOppositionTakeoutLimit;                        		// 0x000374 (0x0004)              
	int                                                m_nVIPOwnerTakeoutLimit;                          		// 0x000378 (0x0004)              
	int                                                m_nVIPOppositionTakeoutLimit;                     		// 0x00037C (0x0004)              
	int                                                m_nLargestPlayerCount;                            		// 0x000380 (0x0004)              
	int                                                m_nMissionTimeRemaining;                          		// 0x000384 (0x0004)              
	class AcLegacyMissionObjective*                    m_OwnerObjectivesMirror[0x28];                    		// 0x000388 (0x00A0)              
	int                                                m_nOwnerObjectivesMirrorLength;                   		// 0x000428 (0x0004)              
	class AcLegacyMissionObjective*                    m_OppositionObjectivesMirror[0x28];               		// 0x00042C (0x00A0)              
	int                                                m_nOppositionObjectivesMirrorLength;              		// 0x0004CC (0x0004)              
	int                                                m_nNextRandSeed;                                  		// 0x0004D0 (0x0004)              
	int                                                m_nMissionTimeLimit;                              		// 0x0004D4 (0x0004)              
	int                                                m_nTimeMissionStart;                              		// 0x0004D8 (0x0004)              
	int                                                m_nTimeMissionEnd;                                		// 0x0004DC (0x0004)              
	unsigned long                                      m_bInstigated : 1;                                		// 0x0004E0 (0x0004) [0x00000001] 
	unsigned long                                      m_bPendingNPCTargetRequest : 1;                   		// 0x0004E0 (0x0004) [0x00000002] 
	unsigned long                                      m_bPendingBeginTask : 1;                          		// 0x0004E0 (0x0004) [0x00000004] 
	unsigned long                                      m_bPendingBeginTaskOpposition : 1;                		// 0x0004E0 (0x0004) [0x00000008] 
	unsigned long                                      m_bHideAllDeliverablesFromOwners : 1;             		// 0x0004E0 (0x0004) [0x00000010] 
	unsigned long                                      m_bHideAllDeliverablesFromOpposition : 1;         		// 0x0004E0 (0x0004) [0x00000020] 
	unsigned long                                      m_bWasEndedByKills : 1;                           		// 0x0004E0 (0x0004) [0x00000040] 
	unsigned long                                      m_bPendingOwnerTakeoutLimitReached : 1;           		// 0x0004E0 (0x0004) [0x00000080] 
	unsigned long                                      m_bPendingOppositionTakeoutLimitReached : 1;      		// 0x0004E0 (0x0004) [0x00000100] 
	unsigned long                                      m_bPendingOwnerVIPTakeoutLimitReached : 1;        		// 0x0004E0 (0x0004) [0x00000200] 
	unsigned long                                      m_bPendingOppositionVIPTakeoutLimitReached : 1;   		// 0x0004E0 (0x0004) [0x00000400] 
	unsigned long                                      m_bPendingWinOnUnopposed : 1;                     		// 0x0004E0 (0x0004) [0x00000800] 
	unsigned long                                      m_bInOvertime : 1;                                		// 0x0004E0 (0x0004) [0x00001000] 
	unsigned long                                      m_bOvertimeCausedByOwners : 1;                    		// 0x0004E0 (0x0004) [0x00002000] 
	TArray<struct FTaskDescriptionObjectInstanceUseCounter> m_TaskItemObjectInstanceUseCounters;              		// 0x0004E4 (0x000C)              
	int                                                m_nAbandonTimerExpiryTime;                        		// 0x0004F0 (0x0004)              
	TArray<class UiDeliverable*>                       m_aActiveDeliverables;                            		// 0x0004F4 (0x000C)              
	TArray<int>                                        m_nObjectiveToDisplayStage;                       		// 0x000500 (0x000C)              
	DWORD                                              m_pLogInfo;                                       		// 0x00050C (0x0004)              
	class AcAPBPlayerController*                       m_pCreator;                                       		// 0x000510 (0x0004)              
	struct FMap_Mirror                                 m_OwningPlayersWhoLeftMission;                    		// 0x000514 (0x003C)              
	struct FMap_Mirror                                 m_OpposingPlayersWhoLeftMission;                  		// 0x000550 (0x003C)              
	int                                                m_AbandonCash;                                    		// 0x00058C (0x0004)              
	int                                                m_nLastObjectiveHoldTickTime;                     		// 0x000590 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLegacyMission");
		return pClassPointer;
	};

public:
	void SimulateTimeout();//APBGame.cLegacyMission.SimulateTimeout
	void ClientUpdateMissionTemplate();//APBGame.cLegacyMission.ClientUpdateMissionTemplate
	void NotifyOvertimeStartedClient();//APBGame.cLegacyMission.NotifyOvertimeStartedClient
	void DelayedCallOnTaskEnded();//APBGame.cLegacyMission.DelayedCallOnTaskEnded
	void ObjectiveProximityTick();//APBGame.cLegacyMission.ObjectiveProximityTick
	void ReplicatedEvent(struct FName VarName);//APBGame.cLegacyMission.ReplicatedEvent
};
UClass* AcLegacyMission::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//cObservers[0x10351C80]
class UcObservers : public UObject
{
public:
	TArray<struct FScriptDelegate>                     m_aObservers;                                     		// 0x000040 (0x000C)              
	struct FScriptDelegate                             __OnNotify__Delegate;                             		// 0x00004C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cObservers");
		return pClassPointer;
	};

public:
	void Notify(int nMessage,int nParam);//APBGame.cObservers.Notify
	void Remove(struct FScriptDelegate Observer);//APBGame.cObservers.Remove
	void Add(struct FScriptDelegate Observer);//APBGame.cObservers.Add
	void OnNotify(int nMessage,int nParam,class AActor* Emitter);//APBGame.cObservers.OnNotify
};
UClass* UcObservers::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAPBMath[0x10351B50]
class UcAPBMath : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBMath");
		return pClassPointer;
	};

public:
	float RandFloat(int* X);//APBGame.cAPBMath.RandFloat
	int RandSeedFromClock();//APBGame.cAPBMath.RandSeedFromClock
	void RandGetArrayOfUnique(int* X,int A,int B,int Count,TArray<int>* intArray);//APBGame.cAPBMath.RandGetArrayOfUnique
	int RandClampSeed(int* X);//APBGame.cAPBMath.RandClampSeed
	int RandGetMax();//APBGame.cAPBMath.RandGetMax
	bool RandUnitTests();//APBGame.cAPBMath.RandUnitTests
	void VectorQuantize(FVector3* inOut);//APBGame.cAPBMath.VectorQuantize
	int RandIntRange(int* X,int A,int B);//APBGame.cAPBMath.RandIntRange
	float RandFloatRange(int* X,float A,float B);//APBGame.cAPBMath.RandFloatRange
	bool RandPercentageChance(int* X,float percentageChance);//APBGame.cAPBMath.RandPercentageChance
	float RandFloatSigned(int* X);//APBGame.cAPBMath.RandFloatSigned
	float RandFloatTrapezium(int* X,float A,float B,float C,float D);//APBGame.cAPBMath.RandFloatTrapezium
};
UClass* UcAPBMath::pClassPointer = NULL;

//0x000058 (0x000460 - 0x000408)
//APBGameInfo[0x10351A20]
class AAPBGameInfo : public AGameInfo
{
public:
	int                                                m_nRandomSeed;                                    		// 0x000408 (0x0004)              
	DWORD                                              m_CollisionGroupFreeList;                         		// 0x00040C (0x0004)              
	unsigned long                                      m_bLevelLoadsComplete : 1;                        		// 0x000410 (0x0004) [0x00000001] 
	unsigned long                                      m_bAllowInstantPlayerRestart : 1;                 		// 0x000410 (0x0004) [0x00000002] 
	unsigned long                                      m_bAllowGrenades : 1;                             		// 0x000410 (0x0004) [0x00000004] 
	unsigned long                                      m_cfg_bEnablePlayerDataLogging : 1;               		// 0x000410 (0x0004) [0x00000008] 
	unsigned long                                      m_cfg_bEnableLCDataLogging_Ped : 1;               		// 0x000410 (0x0004) [0x00000010] 
	unsigned long                                      m_cfg_bEnableLCDataLogging_Vehicle : 1;           		// 0x000410 (0x0004) [0x00000020] 
	unsigned long                                      m_bMatchmakingPreviousOppositionPenalty : 1;      		// 0x000410 (0x0004) [0x00000040] 
	unsigned long                                      m_bMatchmakingSameFactionPenalty : 1;             		// 0x000410 (0x0004) [0x00000080] 
	unsigned long                                      m_bAlwaysUseMissionCache : 1;                     		// 0x000410 (0x0004) [0x00000100] 
	unsigned long                                      m_bMetagroupingMissionOffering : 1;               		// 0x000410 (0x0004) [0x00000200] 
	unsigned long                                      m_bMissionsSuspended : 1;                         		// 0x000410 (0x0004) [0x00000400] 
	int                                                m_cfg_nPlayerDataLogVersion;                      		// 0x000414 (0x0004)              
	float                                              m_cfg_fPlayerPostionDataLogTime;                  		// 0x000418 (0x0004)              
	float                                              m_cfg_fPlayerDataLogFlushTime;                    		// 0x00041C (0x0004)              
	float                                              m_cfg_fLCDataLoggingTime;                         		// 0x000420 (0x0004)              
	struct FString                                     m_sFeedbackMessageRow;                            		// 0x000424 (0x000C)              
	float                                              m_fGameplayLoggingPeriod;                         		// 0x000430 (0x0004)              
	double                                             m_fGameplayPeriodicLastLogTime;                   		// 0x000434 (0x0008)              
	int                                                m_nMetagroupingInterval;                          		// 0x00043C (0x0004)              
	int                                                m_nNumVisibilityRays;                             		// 0x000440 (0x0004)              
	double                                             m_fTimeBetweenBounceUpdates;                      		// 0x000444 (0x0008)              
	int                                                m_nMaxBounceUpdates;                              		// 0x00044C (0x0004)              
	TArray<DWORD>                                      m_MissionManagers;                                		// 0x000450 (0x000C)              
	DWORD                                              m_pTimeLimitedRewardsManager;                     		// 0x00045C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBGameInfo");
		return pClassPointer;
	};

public:
	void StartHumans();//APBGame.APBGameInfo.StartHumans
	struct FString GetEntryLevelName();//APBGame.APBGameInfo.GetEntryLevelName
	void OnTimerLogTaskTargets();//APBGame.APBGameInfo.OnTimerLogTaskTargets
	void CallStartMatchBase();//APBGame.APBGameInfo.CallStartMatchBase
	void AddInactivePRI(class APlayerReplicationInfo* PRI,class APlayerController* PC);//APBGame.APBGameInfo.AddInactivePRI
	void StartMatchNative();//APBGame.APBGameInfo.StartMatchNative
	void StartPlayer(class AController* NewPlayer,class AcPlayerCharacterSpawnZone* SpawnZone);//APBGame.APBGameInfo.StartPlayer
	void PostLogin(class APlayerController* NewPlayer);//APBGame.APBGameInfo.PostLogin
	class APlayerController* Login(struct FString Portal,struct FString Options,struct FString* ErrorMessage);//APBGame.APBGameInfo.Login
	void PostBeginPlay();//APBGame.APBGameInfo.PostBeginPlay
	void SetGroupLeader(int nGroupUID,class AcAPBPlayerController* PC,int nLeaderUID);//APBGame.APBGameInfo.SetGroupLeader
	bool IsEntryLevel();//APBGame.APBGameInfo.IsEntryLevel
	void SetPlayerDefaults(class APawn* PlayerPawn);//APBGame.APBGameInfo.SetPlayerDefaults
	void Killed(class AController* KillerC,class AController* DeadC,class APawn* DeadPawn,class UClass* DamageType,int nInventoryItemTypeID);//APBGame.APBGameInfo.Killed
	void ExitDistrict(class AcAPBPlayerController* PC);//APBGame.APBGameInfo.ExitDistrict
	void ResetMaxRepFreqs();//APBGame.APBGameInfo.ResetMaxRepFreqs
	bool AllowCheats(class APlayerController* P);//APBGame.APBGameInfo.AllowCheats
	class AcPlayerCharacterSpawnZone* GetRandomBotSpawnZone();//APBGame.APBGameInfo.GetRandomBotSpawnZone
	bool RestartPlayer(class AController* NewPlayer);//APBGame.APBGameInfo.RestartPlayer
	bool RetAllowGrenades();//APBGame.APBGameInfo.RetAllowGrenades
	void EnterDistrict(class AcAPBPlayerController* PC);//APBGame.APBGameInfo.EnterDistrict
	class APlayerController* SpawnPlayerController(class UClass* i_pClass);//APBGame.APBGameInfo.SpawnPlayerController
	void OnTimerPlayerLog();//APBGame.APBGameInfo.OnTimerPlayerLog
	bool PlayerCanRestartGame(class APlayerController* aPlayer);//APBGame.APBGameInfo.PlayerCanRestartGame
	void OnTick();//APBGame.APBGameInfo.OnTick
	bool CanPlayerInstantRestart();//APBGame.APBGameInfo.CanPlayerInstantRestart
	void SuspendMissions();//APBGame.APBGameInfo.SuspendMissions
	void PostSeamlessTravel();//APBGame.APBGameInfo.PostSeamlessTravel
	void LevelLoadsComplete();//APBGame.APBGameInfo.LevelLoadsComplete
	void CallKilledBase(class AController* KillerC,class AController* DeadC,class APawn* DeadPawn,class UClass* DamageType,int nWeaponType);//APBGame.APBGameInfo.CallKilledBase
};
UClass* AAPBGameInfo::pClassPointer = NULL;

//0x000118 (0x000584 - 0x00046C)
//cAPBPawnAnimation[0x103518F0]
class AcAPBPawnAnimation : public APawn
{
public:
	struct FtCarAnimation                              m_CurrentCarAnimation;                            		// 0x00046C (0x000C)              
	TArray<class AActor*>                              m_aInteractingWith;                               		// 0x000478 (0x000C)              
	struct FAnimationRequest                           m_AnimationRequest;                               		// 0x000484 (0x0020)              
	struct FAnimationRequest                           m_CurrentAnimation;                               		// 0x0004A4 (0x0020)              
	struct FAnimationRequest                           m_UnconfirmedPrediction;                          		// 0x0004C4 (0x0020)              
	class UcInterpComponent*                           InterpComp;                                       		// 0x0004E4 (0x0004)              
	FVector3                                           LastReceivedLocation;                             		// 0x0004E8 (0x000C)              
	FRotator                                           LastReceivedRotation;                             		// 0x0004F4 (0x000C)              
	FVector3                                           LastReceivedVelocity;                             		// 0x000500 (0x000C)              
	class AActor*                                      LastReceivedBase;                                 		// 0x00050C (0x0004)              
	unsigned long                                      LastReceivedCollideWorld : 1;                     		// 0x000510 (0x0004) [0x00000001] 
	unsigned long                                      LastReceivedCollideActors : 1;                    		// 0x000510 (0x0004) [0x00000002] 
	unsigned long                                      EmoteInterrupted : 1;                             		// 0x000510 (0x0004) [0x00000004] 
	unsigned long                                      bFastTurn : 1;                                    		// 0x000510 (0x0004) [0x00000008] 
	unsigned long                                      bWasFiring : 1;                                   		// 0x000510 (0x0004) [0x00000010] 
	unsigned long                                      m_bWeaponWasShown : 1;                            		// 0x000510 (0x0004) [0x00000020] 
	unsigned long                                      m_bWasMirroring : 1;                              		// 0x000510 (0x0004) [0x00000040] 
	unsigned long                                      m_bPendingReequipRequest : 1;                     		// 0x000510 (0x0004) [0x00000080] 
	unsigned long                                      m_bIsPlayingCosmeticReequip : 1;                  		// 0x000510 (0x0004) [0x00000100] 
	float                                              FiringQuickBlendTimeToGo;                         		// 0x000514 (0x0004)              
	FRotator                                           TargetRotation;                                   		// 0x000518 (0x000C)              
	FRotator                                           InterpolatedRotation;                             		// 0x000524 (0x000C)              
	FRotator                                           InterpolatedAim;                                  		// 0x000530 (0x000C)              
	float                                              QuickBlendTimeToGo;                               		// 0x00053C (0x0004)              
	float                                              CrouchWeight;                                     		// 0x000540 (0x0004)              
	float                                              FallWeight;                                       		// 0x000544 (0x0004)              
	TArray<struct FAnimationRequest>                   ChainedEmotes;                                    		// 0x000548 (0x000C)              
	TArray<class UcAnimNotifyPeriod*>                  m_aShowHideNotifiers;                             		// 0x000554 (0x000C)              
	int                                                m_nNotifierTotal;                                 		// 0x000560 (0x0004)              
	struct FName                                       m_sNotifierSocket;                                		// 0x000564 (0x0008)              
	float                                              m_fHideDuringMirroringCountdown;                  		// 0x00056C (0x0004)              
	class UAnimNode*                                   m_LastAnimRoot;                                   		// 0x000570 (0x0004)              
	TArray<class UAnimNode*>                           m_aCommonAnimNodes;                               		// 0x000574 (0x000C)              
	class UcPlayerAnimSetup*                           m_pPlayerAnimSetup;                               		// 0x000580 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBPawnAnimation");
		return pClassPointer;
	};

public:
	void PlayCSAAnimation(struct FName sSequenceName,bool bLogical);//APBGame.cAPBPawnAnimation.PlayCSAAnimation
	bool InFreeCam();//APBGame.cAPBPawnAnimation.InFreeCam
	void PlayEquipmentCSAOutro();//APBGame.cAPBPawnAnimation.PlayEquipmentCSAOutro
	void UpdateWeights(float fDeltaSeconds);//APBGame.cAPBPawnAnimation.UpdateWeights
	bool PlayAnimationLocal(struct FAnimationRequest Req);//APBGame.cAPBPawnAnimation.PlayAnimationLocal
	void PlayAnimationFromDescriptor(class UcAnimationDescriptor* Animation,bool bLooping);//APBGame.cAPBPawnAnimation.PlayAnimationFromDescriptor
	unsigned char GetVehiclePlayerAnimationSet(class AcAPBVehicleBase* Vehicle,unsigned char eVehicleSeat);//APBGame.cAPBPawnAnimation.GetVehiclePlayerAnimationSet
	void RootMotionExtracted(class USkeletalMeshComponent* pSkelComp,struct FBoneAtom* outExtractedRootMotionDelta);//APBGame.cAPBPawnAnimation.RootMotionExtracted
	void ProcessAnimationRequest(struct FAnimationRequest Req);//APBGame.cAPBPawnAnimation.ProcessAnimationRequest
	bool IsPlayingCarAnimation();//APBGame.cAPBPawnAnimation.IsPlayingCarAnimation
	void SnapWeights(float fQuickBlendTime);//APBGame.cAPBPawnAnimation.SnapWeights
	FRotator RetTargetRotation();//APBGame.cAPBPawnAnimation.RetTargetRotation
	void MakeAnimationRequest(class UcAnimationDescriptor* Req,class AcAnimationDrivenTrigger* Trigger,FVector3 StartLocation,unsigned char ePhysicsOverride,unsigned char Action);//APBGame.cAPBPawnAnimation.MakeAnimationRequest
	void NotifyAnimationEnd(class UcAnimationDescriptor* Animation,class AcAnimationDrivenTrigger* Trigger,bool bInterrupted);//APBGame.cAPBPawnAnimation.NotifyAnimationEnd
	bool IsUsingRouteControlElement();//APBGame.cAPBPawnAnimation.IsUsingRouteControlElement
	float RetCrouchWeight();//APBGame.cAPBPawnAnimation.RetCrouchWeight
	class UcAnimationDescriptor* GetAnimation();//APBGame.cAPBPawnAnimation.GetAnimation
	bool IsAnimationMirroringRequired();//APBGame.cAPBPawnAnimation.IsAnimationMirroringRequired
	class AcAnimationDrivenTrigger* GetAnimationTrigger();//APBGame.cAPBPawnAnimation.GetAnimationTrigger
	void SetupCarAnimationOffsetsAndExtraMotion(struct FName sSequenceName,bool bStartAtRoot,FVector3 StartOrEndPosition);//APBGame.cAPBPawnAnimation.SetupCarAnimationOffsetsAndExtraMotion
	void StopCSAAnimation();//APBGame.cAPBPawnAnimation.StopCSAAnimation
	void CancelCarAnimation(float Blend);//APBGame.cAPBPawnAnimation.CancelCarAnimation
	void BaseChange();//APBGame.cAPBPawnAnimation.BaseChange
	void PlayAnimationFromTrigger(class AcAnimationDrivenTrigger* Trigger,class UcAnimationDescriptor* Animation,FVector3 StartLocation);//APBGame.cAPBPawnAnimation.PlayAnimationFromTrigger
	void NotifyCSAAnimationEnd();//APBGame.cAPBPawnAnimation.NotifyCSAAnimationEnd
	bool IsTurningRight();//APBGame.cAPBPawnAnimation.IsTurningRight
	FRotator GetCosmeticRotation();//APBGame.cAPBPawnAnimation.GetCosmeticRotation
	void NotifyCarDoorRequest(class AcAPBVehicleBase* Vehicle,unsigned char eVehicleSeat,unsigned char eVehicleInteractionAnimation);//APBGame.cAPBPawnAnimation.NotifyCarDoorRequest
	void PlayThrowAnimation();//APBGame.cAPBPawnAnimation.PlayThrowAnimation
	void OnAnimEnd(class UAnimNodeSequence* SeqNode,float PlayedTime,float ExcessTime);//APBGame.cAPBPawnAnimation.OnAnimEnd
	struct FName GetVehicleInteractionSequenceFromSDD(unsigned char eVehiclePlayerAnimationSet,unsigned char eVehicleInteractionAnimation);//APBGame.cAPBPawnAnimation.GetVehicleInteractionSequenceFromSDD
	bool IsEmoting();//APBGame.cAPBPawnAnimation.IsEmoting
	void StopEmoting();//APBGame.cAPBPawnAnimation.StopEmoting
	void PlayFireAnimation();//APBGame.cAPBPawnAnimation.PlayFireAnimation
	void EndInteractingWith();//APBGame.cAPBPawnAnimation.EndInteractingWith
	float RetLocomotionSpeed(unsigned char eLocomotionType);//APBGame.cAPBPawnAnimation.RetLocomotionSpeed
	void AimInterp(float fX,float fY);//APBGame.cAPBPawnAnimation.AimInterp
	FRotator RetInterpolatedAim();//APBGame.cAPBPawnAnimation.RetInterpolatedAim
	class UcSkelControlTurntable* GetTurntableNode();//APBGame.cAPBPawnAnimation.GetTurntableNode
	void SetInteractingWith(class AcAnimationDrivenTrigger* Trigger);//APBGame.cAPBPawnAnimation.SetInteractingWith
	void StopAnimation(unsigned char ePhysicsOverride);//APBGame.cAPBPawnAnimation.StopAnimation
	void PlayOnFootDeathAnimation(unsigned char eDeathAnimation);//APBGame.cAPBPawnAnimation.PlayOnFootDeathAnimation
	void NotifyCarAnimationEnd(class AcAPBVehicleBase* Vehicle,unsigned char eVehicleSeat,unsigned char eVehicleInteractionAnimation);//APBGame.cAPBPawnAnimation.NotifyCarAnimationEnd
	void OnNotifyPlayEquipmentCSAAnimation(class UAnimNodeSequence* SequenceNode,bool bRootMotion);//APBGame.cAPBPawnAnimation.OnNotifyPlayEquipmentCSAAnimation
	void ShowHideNotifier(class UcAnimNotifyPeriod* pNotifier,bool bAdd);//APBGame.cAPBPawnAnimation.ShowHideNotifier
	class AcItemAttachment* RetAttachedItem();//APBGame.cAPBPawnAnimation.RetAttachedItem
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cAPBPawnAnimation.ReplicatedEvent
	void UpdateTurntabling(float fDeltaSeconds);//APBGame.cAPBPawnAnimation.UpdateTurntabling
	bool GetAimStrafeMode();//APBGame.cAPBPawnAnimation.GetAimStrafeMode
	bool GetMarksManShipMode();//APBGame.cAPBPawnAnimation.GetMarksManShipMode
	bool IsTurningLeft();//APBGame.cAPBPawnAnimation.IsTurningLeft
	void StopAnimationLocal(struct FAnimationRequest Req);//APBGame.cAPBPawnAnimation.StopAnimationLocal
	bool IsUnconscious();//APBGame.cAPBPawnAnimation.IsUnconscious
	void PlayCarAnimation(class AcAPBVehicleBase* Vehicle,unsigned char eVehicleSeat,unsigned char eVehicleInteractionAnimation,FVector3 StartOrEndPosition);//APBGame.cAPBPawnAnimation.PlayCarAnimation
	void PredictAnimationFromTrigger(class AcAnimationDrivenTrigger* Trigger,class UcAnimationDescriptor* Animation,FVector3 StartLocation);//APBGame.cAPBPawnAnimation.PredictAnimationFromTrigger
	void FaceRotation(FRotator NewRotation,float fDeltaTime);//APBGame.cAPBPawnAnimation.FaceRotation
	struct FName AdjustSocket(struct FName Socket);//APBGame.cAPBPawnAnimation.AdjustSocket
	void PlayEquipmentCSA(int eEquipmentCSAAnimType,int nSeed);//APBGame.cAPBPawnAnimation.PlayEquipmentCSA
	void PostBeginPlay();//APBGame.cAPBPawnAnimation.PostBeginPlay
	void ResetToMainIdle();//APBGame.cAPBPawnAnimation.ResetToMainIdle
	FRotator GetCosmeticAim();//APBGame.cAPBPawnAnimation.GetCosmeticAim
	void QuickAnimTreeBlends();//APBGame.cAPBPawnAnimation.QuickAnimTreeBlends
	class AActor* GetAnimationInteractingActor();//APBGame.cAPBPawnAnimation.GetAnimationInteractingActor
	void GetOnFootDeathSequence(unsigned char eDeathAnimation,struct FOnFootDeathAnimation* SDDRow);//APBGame.cAPBPawnAnimation.GetOnFootDeathSequence
	void StopEquipmentCSA();//APBGame.cAPBPawnAnimation.StopEquipmentCSA
	void PlayPinPullAnimation();//APBGame.cAPBPawnAnimation.PlayPinPullAnimation
	void SnapTurntabling();//APBGame.cAPBPawnAnimation.SnapTurntabling
	void UpdateAttachmentDisplay();//APBGame.cAPBPawnAnimation.UpdateAttachmentDisplay
	void SnapAnimTreeBlends(float Blend);//APBGame.cAPBPawnAnimation.SnapAnimTreeBlends
	bool IsUsingRootMotion();//APBGame.cAPBPawnAnimation.IsUsingRootMotion
	bool ShouldShowAttachedItemForReequip();//APBGame.cAPBPawnAnimation.ShouldShowAttachedItemForReequip
	FRotator RetInterpolatedRotation();//APBGame.cAPBPawnAnimation.RetInterpolatedRotation
	void OnNotifyStopEquipmentCSAAnimation(class UAnimNodeSequence* SequenceNode);//APBGame.cAPBPawnAnimation.OnNotifyStopEquipmentCSAAnimation
	void CancelPredictedAnimation();//APBGame.cAPBPawnAnimation.CancelPredictedAnimation
	void Turntable(struct FString sParameterName,float fValue);//APBGame.cAPBPawnAnimation.Turntable
	void SetAnimSetup(class UcPlayerAnimSetup* pPlayerAnimSetup);//APBGame.cAPBPawnAnimation.SetAnimSetup
	struct FVehicleInteractionAnimation GetVehicleInteractionAnimationFromSDD(unsigned char eVehicleInteractionAnimation);//APBGame.cAPBPawnAnimation.GetVehicleInteractionAnimationFromSDD
	void EncroachedBy(class AActor* Other);//APBGame.cAPBPawnAnimation.EncroachedBy
	struct FVehiclePlayerAnimationSet GetVehiclePlayerAnimationSetFromSDD(unsigned char eVehiclePlayerAnimationSet);//APBGame.cAPBPawnAnimation.GetVehiclePlayerAnimationSetFromSDD
	void AutonomousPhysicsPhysNone(float fDeltaSeconds);//APBGame.cAPBPawnAnimation.AutonomousPhysicsPhysNone
	float RetFallWeight();//APBGame.cAPBPawnAnimation.RetFallWeight
	bool IsInAnimationDrivenAction();//APBGame.cAPBPawnAnimation.IsInAnimationDrivenAction
	FRotator GetWeaponAimDirn();//APBGame.cAPBPawnAnimation.GetWeaponAimDirn
	bool ShouldShowAttachedItem(bool bShouldShowAttachedItemForReequip);//APBGame.cAPBPawnAnimation.ShouldShowAttachedItem
};
UClass* AcAPBPawnAnimation::pClassPointer = NULL;

//0x0006E0 (0x000C64 - 0x000584)
//cAPBPawn[0x103517C0]
class AcAPBPawn : public AcAPBPawnAnimation
{
public:
	DWORD                                              VfTable_ICombatTargetingInterface;                		// 0x000584 (0x0004)              
	DWORD                                              VfTable_IiAmmoCarrier;                            		// 0x000588 (0x0004)              
	DWORD                                              VfTable_IiAmmoConsumer;                           		// 0x00058C (0x0004)              
	DWORD                                              VfTable_IUseInterface;                            		// 0x000590 (0x0004)              
	DWORD                                              VfTable_IDamageInterface;                         		// 0x000594 (0x0004)              
	DWORD                                              VfTable_IiModifiable;                             		// 0x000598 (0x0004)              
	DWORD                                              VfTable_IiNPCLookAt;                              		// 0x00059C (0x0004)              
	struct FDyingData                                  m_DyingData;                                      		// 0x0005A0 (0x0020)              
	FVector3                                           m_vLastExplosionLocation;                         		// 0x0005C0 (0x000C)              
	int                                                m_nLastExplosionType;                             		// 0x0005CC (0x0004)              
	float                                              MaxJumpZ;                                         		// 0x0005D0 (0x0004)              
	struct FHitReactionInfo                            m_HitReactionInfo;                                		// 0x0005D4 (0x0034)              
	float                                              m_fHitReactionBlendTimeRemaining;                 		// 0x000608 (0x0004)              
	TArray<struct FName>                               m_aHitReactionBoneList;                           		// 0x00060C (0x000C)              
	TArray<struct FName>                               m_aHitReactionConstrainedBoneList;                		// 0x000618 (0x000C)              
	TArray<struct FName>                               m_aHitReactionSpringList;                         		// 0x000624 (0x000C)              
	float                                              m_fHitReactionImpulseScale;                       		// 0x000630 (0x0004)              
	float                                              m_fHitReactionImpulseScaleWalking;                		// 0x000634 (0x0004)              
	float                                              m_fHitReactionImpulseScaleRunning;                		// 0x000638 (0x0004)              
	float                                              m_fHitReactionImpulseScaleSprinting;              		// 0x00063C (0x0004)              
	float                                              m_fHitReactionImpulseScaleLocalPlayer;            		// 0x000640 (0x0004)              
	float                                              m_fHitReactionBlendOutTime;                       		// 0x000644 (0x0004)              
	float                                              m_fHitReactionMassEffectScale;                    		// 0x000648 (0x0004)              
	FVector2                                           m_vHitReactionMotorStrength;                      		// 0x00064C (0x0008)              
	FVector2                                           m_vHitReactionSpringStrength;                     		// 0x000654 (0x0008)              
	unsigned long                                      m_bEnableHitReactionBoneSprings : 1;              		// 0x00065C (0x0004) [0x00000001] 
	unsigned long                                      m_bHasMovedSinceLastUpdate : 1;                   		// 0x00065C (0x0004) [0x00000002] 
	unsigned long                                      m_bHitReactionAngleConstraintBroken : 1;          		// 0x00065C (0x0004) [0x00000004] 
	unsigned long                                      m_bDisplayCSAProgressBar : 1;                     		// 0x00065C (0x0004) [0x00000008] 
	unsigned long                                      m_bIgnoreMoveInputForCSA : 1;                     		// 0x00065C (0x0004) [0x00000010] 
	unsigned long                                      m_bDisableCSAs : 1;                               		// 0x00065C (0x0004) [0x00000020] 
	unsigned long                                      m_bBlockCamera : 1;                               		// 0x00065C (0x0004) [0x00000040] 
	unsigned long                                      m_bDoingDriverEjectFromDriverSide : 1;            		// 0x00065C (0x0004) [0x00000080] 
	unsigned long                                      m_bSwitchingSeatToGetOut : 1;                     		// 0x00065C (0x0004) [0x00000100] 
	unsigned long                                      m_bSwitchingSeatToGetIn : 1;                      		// 0x00065C (0x0004) [0x00000200] 
	unsigned long                                      m_bEjectLaterNetInitial : 1;                      		// 0x00065C (0x0004) [0x00000400] 
	unsigned long                                      m_bInteractingWithVehicle : 1;                    		// 0x00065C (0x0004) [0x00000800] 
	unsigned long                                      m_bStunned : 1;                                   		// 0x00065C (0x0004) [0x00001000] 
	unsigned long                                      m_bHealthCanRegenerate : 1;                       		// 0x00065C (0x0004) [0x00002000] 
	unsigned long                                      m_bStaminaCanRegenerate : 1;                      		// 0x00065C (0x0004) [0x00004000] 
	unsigned long                                      m_bDiedFriendlyAssist : 1;                        		// 0x00065C (0x0004) [0x00008000] 
	unsigned long                                      m_bDiedEnemyAssist : 1;                           		// 0x00065C (0x0004) [0x00010000] 
	unsigned long                                      m_bDiedAssistCountedAsKill : 1;                   		// 0x00065C (0x0004) [0x00020000] 
	unsigned long                                      m_bHasFallDamage : 1;                             		// 0x00065C (0x0004) [0x00040000] 
	unsigned long                                      m_bImmuneToStaminaDamage : 1;                     		// 0x00065C (0x0004) [0x00080000] 
	unsigned long                                      m_bImmuneToDamage : 1;                            		// 0x00065C (0x0004) [0x00100000] 
	unsigned long                                      m_bIsMissionImmunity : 1;                         		// 0x00065C (0x0004) [0x00200000] 
	unsigned long                                      m_bIsResupplyingAmmo : 1;                         		// 0x00065C (0x0004) [0x00400000] 
	unsigned long                                      m_bShowAmmoResupplyProgressBar : 1;               		// 0x00065C (0x0004) [0x00800000] 
	unsigned long                                      m_bIsAmmoCarrierDepotDeployed : 1;                		// 0x00065C (0x0004) [0x01000000] 
	unsigned long                                      m_bIsAmmoCarrierTaskItem : 1;                     		// 0x00065C (0x0004) [0x02000000] 
	unsigned long                                      m_bIsAmmoCarrierModifierActive : 1;               		// 0x00065C (0x0004) [0x04000000] 
	unsigned long                                      m_bWasLastResupplierAPerson : 1;                  		// 0x00065C (0x0004) [0x08000000] 
	unsigned long                                      m_bWasLastResupplierAVehicle : 1;                 		// 0x00065C (0x0004) [0x10000000] 
	unsigned long                                      m_bUnconscious : 1;                               		// 0x00065C (0x0004) [0x20000000] 
	unsigned long                                      m_bArrested : 1;                                  		// 0x00065C (0x0004) [0x40000000] 
	unsigned long                                      m_bArrestedAsPVPUnlockedToAll : 1;                		// 0x00065C (0x0004) [0x80000000] 
	unsigned long                                      m_bArrestTimeExpired : 1;                         		// 0x000660 (0x0004) [0x00000001] 
	unsigned long                                      m_bArrestedRecently : 1;                          		// 0x000660 (0x0004) [0x00000002] 
	unsigned long                                      m_bRescuedRecently : 1;                           		// 0x000660 (0x0004) [0x00000004] 
	unsigned long                                      m_bIsVIP : 1;                                     		// 0x000660 (0x0004) [0x00000008] 
	unsigned long                                      m_bPerformingUIInteraction : 1;                   		// 0x000660 (0x0004) [0x00000010] 
	unsigned long                                      m_bLimitAPBPawnReplication : 1;                   		// 0x000660 (0x0004) [0x00000020] 
	unsigned long                                      m_bRequireController : 1;                         		// 0x000660 (0x0004) [0x00000040] 
	unsigned long                                      m_bIsRunning : 1;                                 		// 0x000660 (0x0004) [0x00000080] 
	unsigned long                                      m_bCanRun : 1;                                    		// 0x000660 (0x0004) [0x00000100] 
	unsigned long                                      m_bCanSprint : 1;                                 		// 0x000660 (0x0004) [0x00000200] 
	unsigned long                                      m_bCanCrouchMove : 1;                             		// 0x000660 (0x0004) [0x00000400] 
	unsigned long                                      m_bIsStaticCrouchSize : 1;                        		// 0x000660 (0x0004) [0x00000800] 
	unsigned long                                      m_bSavedIsStaticCrouchSize : 1;                   		// 0x000660 (0x0004) [0x00001000] 
	unsigned long                                      m_bIsInStaticCrouchMode : 1;                      		// 0x000660 (0x0004) [0x00002000] 
	unsigned long                                      m_bMarksManShipMode : 1;                          		// 0x000660 (0x0004) [0x00004000] 
	unsigned long                                      m_bIsWinded : 1;                                  		// 0x000660 (0x0004) [0x00008000] 
	unsigned long                                      m_bIsCurrentlySprinting : 1;                      		// 0x000660 (0x0004) [0x00010000] 
	unsigned long                                      m_bIsCurrentlyRunning : 1;                        		// 0x000660 (0x0004) [0x00020000] 
	unsigned long                                      m_bIsCurrentlyWalking : 1;                        		// 0x000660 (0x0004) [0x00040000] 
	unsigned long                                      m_bDeathAnimations : 1;                           		// 0x000660 (0x0004) [0x00080000] 
	unsigned long                                      m_bDebugWeaponAimDirection : 1;                   		// 0x000660 (0x0004) [0x00100000] 
	unsigned long                                      m_bActivateEdgeUsage : 1;                         		// 0x000660 (0x0004) [0x00200000] 
	unsigned long                                      m_replicatePendingVFX : 1;                        		// 0x000660 (0x0004) [0x00400000] 
	unsigned long                                      m_bIsCustomising : 1;                             		// 0x000660 (0x0004) [0x00800000] 
	unsigned long                                      m_bIsJumping : 1;                                 		// 0x000660 (0x0004) [0x01000000] 
	unsigned long                                      m_bSameMissionCanBeMugged : 1;                    		// 0x000660 (0x0004) [0x02000000] 
	unsigned long                                      m_bOutOfMissionCanBeMugged : 1;                   		// 0x000660 (0x0004) [0x04000000] 
	unsigned long                                      m_bCanBeFound : 1;                                		// 0x000660 (0x0004) [0x08000000] 
	unsigned long                                      m_DEBUG_ShowDebugForOtherPawn : 1;                		// 0x000660 (0x0004) [0x10000000] 
	unsigned long                                      m_DEBUG_DisableIK : 1;                            		// 0x000660 (0x0004) [0x20000000] 
	unsigned long                                      m_bCanDoResupplyOperations : 1;                   		// 0x000660 (0x0004) [0x40000000] 
	unsigned long                                      m_bStaminaExhausted : 1;                          		// 0x000660 (0x0004) [0x80000000] 
	unsigned long                                      m_bTutorialComplete : 1;                          		// 0x000664 (0x0004) [0x00000001] 
	unsigned long                                      m_bGMFrozen : 1;                                  		// 0x000664 (0x0004) [0x00000002] 
	unsigned long                                      m_bMarksmanshipModeChanged : 1;                   		// 0x000664 (0x0004) [0x00000004] 
	unsigned long                                      m_bIsWindingUp : 1;                               		// 0x000664 (0x0004) [0x00000008] 
	FVector3                                           m_vOldRotation;                                   		// 0x000668 (0x000C)              
	FVector3                                           m_vOldLocation;                                   		// 0x000674 (0x000C)              
	unsigned char                                      m_ePhysicsBeforeReplication;                      		// 0x000680 (0x0001)              PROPERTY: EPhysics
	unsigned char                                      m_GrenadeWeaponState;                             		// 0x000681 (0x0001)              PROPERTY: etGrenadeWeaponState
	unsigned char                                      m_nStaminaRechargePercent;                        		// 0x000682 (0x0001)              PROPERTY: 
	unsigned char                                      m_eInventoryAccessType;                           		// 0x000683 (0x0001)              PROPERTY: etInventoryAccessType
	unsigned char                                      m_nMarksManShipModeRequestID;                     		// 0x000684 (0x0001)              PROPERTY: 
	unsigned char                                      m_eWantsToLean;                                   		// 0x000685 (0x0001)              PROPERTY: etCharacterLeanState
	unsigned char                                      m_eIsLeaning;                                     		// 0x000686 (0x0001)              PROPERTY: etCharacterLeanState
	unsigned char                                      m_eFaction;                                       		// 0x000687 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eGender;                                        		// 0x000688 (0x0001)              PROPERTY: etGender
	unsigned char                                      m_eChatState;                                     		// 0x000689 (0x0001)              PROPERTY: etChatState
	unsigned char                                      m_pendingVFX;                                     		// 0x00068A (0x0001)              PROPERTY: 
	unsigned char                                      m_LocomotionOnPhysFalling;                        		// 0x00068B (0x0001)              PROPERTY: etLocomotionType
	unsigned char                                      m_LocomotionOnPhysFallingPredicted;               		// 0x00068C (0x0001)              PROPERTY: etLocomotionType
	unsigned char                                      m_nHeatLevel;                                     		// 0x00068D (0x0001)              PROPERTY: 
	unsigned char                                      m_eMaterialImpactType;                            		// 0x00068E (0x0001)              PROPERTY: etFXMaterialImpact
	unsigned char                                      _0x00068F[0x1];                                   		// 0x00068F (0x0001) MISSED OFFSET
	TArray<struct FHitReactionBoneRemap>               m_aHitReactionBoneRemapTable;                     		// 0x000690 (0x000C)              
	struct FCSAVFXData                                 m_CSAVFXData;                                     		// 0x00069C (0x0014)              
	int                                                m_nCSAVFXSuccess;                                 		// 0x0006B0 (0x0004)              
	struct FCSAData                                    m_CurrentCSAData;                                 		// 0x0006B4 (0x0028)              
	struct FCSAData                                    m_OldCSAData;                                     		// 0x0006DC (0x0028)              
	FRotator                                           m_AimRotation;                                    		// 0x000704 (0x000C)              
	float                                              m_LeanOutCollisionHeight;                         		// 0x000710 (0x0004)              
	float                                              m_LeanOutCollisionRadius;                         		// 0x000714 (0x0004)              
	float                                              m_LeanOutIntersectRadius;                         		// 0x000718 (0x0004)              
	class AcAPBVehicleBase*                            m_VehicleUseReplicated;                           		// 0x00071C (0x0004)              
	class AcAPBVehicleBase*                            m_VehicleUse;                                     		// 0x000720 (0x0004)              
	class AcAPBVehicleBase*                            m_VehicleUseOld;                                  		// 0x000724 (0x0004)              
	struct FVehicleUseData                             m_VehicleUseData;                                 		// 0x000728 (0x0028)              
	struct FVehicleUseData                             m_VehicleUseDataOld;                              		// 0x000750 (0x0028)              
	class AcAPBVehicleBase*                            m_LastVehicleUsed;                                		// 0x000778 (0x0004)              
	double                                             m_fTimeLastVehicleUsedSet;                        		// 0x00077C (0x0008)              
	class UcDebugPage*                                 m_MyDebugPage;                                    		// 0x000784 (0x0004)              
	int                                                m_MaxHealth;                                      		// 0x000788 (0x0004)              
	float                                              m_HealthRemainder;                                		// 0x00078C (0x0004)              
	float                                              m_fHealthRegenerationDuration;                    		// 0x000790 (0x0004)              
	int                                                m_nHealthRegenerated;                             		// 0x000794 (0x0004)              
	float                                              m_fHealthRegenerationDelay;                       		// 0x000798 (0x0004)              
	int                                                m_MaxStamina;                                     		// 0x00079C (0x0004)              
	int                                                m_Stamina;                                        		// 0x0007A0 (0x0004)              
	int                                                m_StaminaBuffer;                                  		// 0x0007A4 (0x0004)              
	float                                              m_StaminaRemainder;                               		// 0x0007A8 (0x0004)              
	float                                              m_fStaminaRegenerationDuration;                   		// 0x0007AC (0x0004)              
	float                                              m_fStaminaRegenerationDelay;                      		// 0x0007B0 (0x0004)              
	float                                              m_fEnableStaminaActionsFraction;                  		// 0x0007B4 (0x0004)              
	unsigned char                                      m_RecentAssists[0x3C];                            		// 0x0007B8 (0x003C)              UNKNOWN PROPERTY: MapProperty
	int                                                m_nLastHitByInventoryID;                          		// 0x0007F4 (0x0004)              
	int                                                m_nHealthBeforeLastHit;                           		// 0x0007F8 (0x0004)              
	FVector3                                           m_vLastHitLocation;                               		// 0x0007FC (0x000C)              
	FVector3                                           m_vSpawnLocation;                                 		// 0x000808 (0x000C)              
	float                                              m_fImmunityCheckTimeAccumulator;                  		// 0x000814 (0x0004)              
	float                                              m_fRemainingImmunityTime;                         		// 0x000818 (0x0004)              
	class UiAmmoSupplier*                              m_pInteractingAmmoSupplier;                       		// 0x00081C (0x0004)              
	unsigned char                                      _0x000820[0x4];                                   		// 0x000820 (0x0004) ALIGNEMENT
	float                                              m_fAmmoResupplyProgress;                          		// 0x000824 (0x0004)              
	class UcAmmoDepotComponent*                        m_AmmoCarrierDepotComponent;                      		// 0x000828 (0x0004)              
	float                                              m_ArrestTime;                                     		// 0x00082C (0x0004)              
	double                                             m_ArrestedTimerExpiry;                            		// 0x000830 (0x0008)              
	float                                              m_fArrestTimeRemaining;                           		// 0x000838 (0x0004)              
	double                                             m_fWitnessableCrimeServerTimestamp;               		// 0x00083C (0x0008)              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x000844 (0x0004)              
	struct FStrafeFiring                               m_StrafeFiring;                                   		// 0x000848 (0x0008)              
	float                                              m_StrafeFiringTime;                               		// 0x000850 (0x0004)              
	float                                              m_StrafeReloadTime;                               		// 0x000854 (0x0004)              
	class UMaterialInstanceConstant*                   m_BodyMatInst;                                    		// 0x000858 (0x0004)              
	class UMaterial*                                   m_pParentBodyMaterial;                            		// 0x00085C (0x0004)              
	class UMaterial*                                   m_pParentBodyMaterialCompressedNM;                		// 0x000860 (0x0004)              
	int                                                m_nCharacterCustomisationOverride;                		// 0x000864 (0x0004)              
	DWORD                                              m_pSDDCustomisationOverride;                      		// 0x000868 (0x0004)              
	class UcVisualFXBase*                              m_pOverrideVFXTemplate;                           		// 0x00086C (0x0004)              
	class USkeletalMesh*                               m_pCustomisedMesh;                                		// 0x000870 (0x0004)              
	int                                                m_nCustomisationVersion;                          		// 0x000874 (0x0004)              
	int                                                m_nVehicleCustomisationVersion;                   		// 0x000878 (0x0004)              
	float                                              m_fCharacterHeightFactor;                         		// 0x00087C (0x0004)              
	float                                              m_fCharacterHeightFactorNormalised;               		// 0x000880 (0x0004)              
	float                                              m_fSafeHeightTimer;                               		// 0x000884 (0x0004)              
	struct FItemAttachmentData                         m_ItemAttachmentData;                             		// 0x000888 (0x0028)              
	struct FItemAttachmentData                         m_OldItemAttachmentData;                          		// 0x0008B0 (0x0028)              
	class AcItemAttachment*                            m_ItemAttachment;                                 		// 0x0008D8 (0x0004)              
	float                                              m_fRunningPct;                                    		// 0x0008DC (0x0004)              
	float                                              m_fMarksmanshipPct;                               		// 0x0008E0 (0x0004)              
	float                                              m_fStationaryCrouchRadius;                        		// 0x0008E4 (0x0004)              
	float                                              m_fStationaryCrouchHeight;                        		// 0x0008E8 (0x0004)              
	int                                                m_nCrouchRequestID;                               		// 0x0008EC (0x0004)              
	class ULightEnvironmentComponent*                  m_LightEnvironment;                               		// 0x0008F0 (0x0004)              
	struct FCompactGolemDescriptor                     m_CustomisationGuids;                             		// 0x0008F4 (0x0030)              
	struct FGuid                                       m_SymbolCustomisationGUID;                        		// 0x000924 (0x0010)              
	struct FGuid                                       m_PreviousSymbolCustomisationGUID;                		// 0x000934 (0x0010)              
	struct FCompactGolemDescriptor                     m_PreviousCustomisationGuids;                     		// 0x000944 (0x0030)              
	FRotator                                           m_WeaponAimDirn;                                  		// 0x000974 (0x000C)              
	float                                              m_CurrentAccuracy;                                		// 0x000980 (0x0004)              
	float                                              m_TargetAccuracy;                                 		// 0x000984 (0x0004)              
	float                                              m_fAccuracyRecoveryCurveX;                        		// 0x000988 (0x0004)              
	float                                              m_fWindedSpeed;                                   		// 0x00098C (0x0004)              
	float                                              m_fWindedTime;                                    		// 0x000990 (0x0004)              
	float                                              m_fFallingDamageSpeedThreshold;                   		// 0x000994 (0x0004)              
	float                                              m_fMaxFallSpeedScaleToDamage;                     		// 0x000998 (0x0004)              
	float                                              m_fFallingDamageMultiplier;                       		// 0x00099C (0x0004)              
	float                                              m_fFallingDamageStaminaMultiplier;                		// 0x0009A0 (0x0004)              
	float                                              m_fExplosionDamageMultiplier;                     		// 0x0009A4 (0x0004)              
	float                                              m_fFriendlyExplosiveDamageMultiplier;             		// 0x0009A8 (0x0004)              
	float                                              m_fFriendlyWeaponDamageMultiplier;                		// 0x0009AC (0x0004)              
	float                                              m_fSelfExplosiveDamageMultiplier;                 		// 0x0009B0 (0x0004)              
	float                                              m_fSelfWeaponDamageMultiplier;                    		// 0x0009B4 (0x0004)              
	float                                              m_fEnvironmentDamageMultiplier;                   		// 0x0009B8 (0x0004)              
	float                                              m_VCPRaycastClampSpeed;                           		// 0x0009BC (0x0004)              
	float                                              m_fSprintStaminaPart;                             		// 0x0009C0 (0x0004)              
	float                                              m_fSprintStaminaDrainPerSec;                      		// 0x0009C4 (0x0004)              
	float                                              m_fCrouchingStaminaRechargeScalar;                		// 0x0009C8 (0x0004)              
	float                                              m_fJumpStaminaDrain;                              		// 0x0009CC (0x0004)              
	float                                              m_fDistanceSprinted;                              		// 0x0009D0 (0x0004)              
	int                                                m_nNumParticipationEffects;                       		// 0x0009D4 (0x0004)              
	class UcAudioCharacterInterface*                   m_AudioCharacterInterface;                        		// 0x0009D8 (0x0004)              
	double                                             m_fTimeOfDeath;                                   		// 0x0009DC (0x0008)              
	float                                              m_fDespawnDelay;                                  		// 0x0009E4 (0x0004)              
	float                                              m_fDespawnDelayMax;                               		// 0x0009E8 (0x0004)              
	int                                                m_nMaxDeadRagDollPawns;                           		// 0x0009EC (0x0004)              
	int                                                m_nTimeToPlayDeathAnimInVehicle;                  		// 0x0009F0 (0x0004)              
	TArray<class URWTechReachSpec*>                    m_aRegisteredEdgeList;                            		// 0x0009F4 (0x000C)              
	DWORD                                              m_pLCBroadBoundingVolume;                         		// 0x000A00 (0x0004)              
	DWORD                                              m_pLCNarrowBoundingVolume;                        		// 0x000A04 (0x0004)              
	int                                                m_nTickCount;                                     		// 0x000A08 (0x0004)              
	float                                              m_fMinCharacterHeight;                            		// 0x000A0C (0x0004)              
	float                                              m_fMaxCharacterHeight;                            		// 0x000A10 (0x0004)              
	float                                              m_fRunSpeed;                                      		// 0x000A14 (0x0004)              
	float                                              m_fWalkSpeed;                                     		// 0x000A18 (0x0004)              
	float                                              m_fCrouchSpeed;                                   		// 0x000A1C (0x0004)              
	float                                              m_fMarksmanshipSpeed;                             		// 0x000A20 (0x0004)              
	struct FSpeedModifiers                             m_SpeedModifiers;                                 		// 0x000A24 (0x0028)              
	int                                                m_RemoteClientJumpAnimCount;                      		// 0x000A4C (0x0004)              
	int                                                m_nThreat;                                        		// 0x000A50 (0x0004)              
	int                                                m_nRating;                                        		// 0x000A54 (0x0004)              
	float                                              m_fTagetingLeanOffset;                            		// 0x000A58 (0x0004)              
	int                                                m_nControllerCharacterUID;                        		// 0x000A5C (0x0004)              
	struct FString                                     m_sClanName;                                      		// 0x000A60 (0x000C)              
	int                                                m_customisationRequestCount;                      		// 0x000A6C (0x0004)              
	int                                                m_lastCustomisationRequestCount;                  		// 0x000A70 (0x0004)              
	int                                                m_customisationRequestTotal;                      		// 0x000A74 (0x0004)              
	int                                                m_nNPCLookAtEventID;                              		// 0x000A78 (0x0004)              
	int                                                m_nNPCLookAtPriority;                             		// 0x000A7C (0x0004)              
	int                                                m_nThrowingGrenadeWorldEventID;                   		// 0x000A80 (0x0004)              
	struct FMissionTeamInfo                            m_MissionTeamInfo;                                		// 0x000A84 (0x0008)              
	float                                              m_fInRangeForMuggingTime;                         		// 0x000A8C (0x0004)              
	unsigned char                                      m_aActiveModifierItems[0x3C];                     		// 0x000A90 (0x003C)              UNKNOWN PROPERTY: MapProperty
	struct FMap_Mirror                                 m_ActiveModifierEffects;                          		// 0x000ACC (0x003C)              
	struct FMap_Mirror                                 m_ActiveModifierItemEffects;                      		// 0x000B08 (0x003C)              
	class AcItem*                                      m_ForceEquipedItem;                               		// 0x000B44 (0x0004)              
	class AcAPBVehicleBase*                            m_RecentVehicleBase;                              		// 0x000B48 (0x0004)              
	float                                              m_fHeatAmount;                                    		// 0x000B4C (0x0004)              
	struct FPvPFlags                                   m_PvPFlags;                                       		// 0x000B50 (0x000C)              
	class UiAmmoSupplier*                              m_CurrentAmmoSupplier;                            		// 0x000B5C (0x0004)              
	unsigned char                                      _0x000B60[0x4];                                   		// 0x000B60 (0x0004) ALIGNEMENT
	int                                                m_nMaxHeatCriminalHUDMarkerID;                    		// 0x000B64 (0x0004)              
	int                                                m_nMaxHeatEnforcerHUDMarkerID;                    		// 0x000B68 (0x0004)              
	class AcAPBPlayerController*                       m_ControllerLastConnected;                        		// 0x000B6C (0x0004)              
	float                                              m_fAccumulatedDeltaSeconds;                       		// 0x000B70 (0x0004)              
	int                                                m_nHealthDebug;                                   		// 0x000B74 (0x0004)              
	int                                                m_nMaxHealthDebug;                                		// 0x000B78 (0x0004)              
	int                                                m_nStaminaDebug;                                  		// 0x000B7C (0x0004)              
	int                                                m_nMaxStaminaDebug;                               		// 0x000B80 (0x0004)              
	int                                                m_nWitnessingCashAmount;                          		// 0x000B84 (0x0004)              
	int                                                m_bOnOpposedMission;                              		// 0x000B88 (0x0004)              
	struct FRecoilInfo                                 m_RecoilInfo;                                     		// 0x000B8C (0x003C)              
	float                                              m_fFieldSupplierRadius;                           		// 0x000BC8 (0x0004)              
	float                                              m_fCarSurfingMinSpeed;                            		// 0x000BCC (0x0004)              
	float                                              m_fVehicleHitDeathSpeed;                          		// 0x000BD0 (0x0004)              
	float                                              m_fFallingDamangeModifier;                        		// 0x000BD4 (0x0004)              
	unsigned char                                      m_PlayerVisibilityCache[0x3C];                    		// 0x000BD8 (0x003C)              UNKNOWN PROPERTY: MapProperty
	float                                              m_fVisibilityChecksFrameTimeLimit;                		// 0x000C14 (0x0004)              
	class AcMapVolume*                                 m_pMapVolume;                                     		// 0x000C18 (0x0004)              
	class AcAmmoVolume*                                m_pAmmoVolume;                                    		// 0x000C1C (0x0004)              
	TArray<class AcAPBPlayerController*>               m_aPlayersAccessingInventory;                     		// 0x000C20 (0x000C)              
	struct FModifierFXData                             m_ModifierFX;                                     		// 0x000C2C (0x0008)              
	float                                              m_JumpOffBaseDamage;                              		// 0x000C34 (0x0004)              
	float                                              m_JumpOffDamageVelocityMultiplier;                		// 0x000C38 (0x0004)              
	float                                              m_JumpOffFailDamage;                              		// 0x000C3C (0x0004)              
	struct FScriptDelegate                             __OnPayForHeatSuccess__Delegate;                  		// 0x000C40 (0x000C)              
	struct FScriptDelegate                             __OnPayForHeatFailure__Delegate;                  		// 0x000C4C (0x000C)              
	struct FScriptDelegate                             __OnCSAAnimationFinished__Delegate;               		// 0x000C58 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBPawn");
		return pClassPointer;
	};

public:
	void BeginInventoryAccess(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cAPBPawn.BeginInventoryAccess
	void StunnedTimer();//APBGame.cAPBPawn.StunnedTimer
	bool IsArrested();//APBGame.cAPBPawn.IsArrested
	float RetGlobalRagdollImpulseScale();//APBGame.cAPBPawn.RetGlobalRagdollImpulseScale
	void BeginVehicleDeath();//APBGame.cAPBPawn.BeginVehicleDeath
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cAPBPawn.Touch
	void SetWalkSpeed(float fNewWalkSpeed);//APBGame.cAPBPawn.SetWalkSpeed
	void StrafeFiringTimer();//APBGame.cAPBPawn.StrafeFiringTimer
	void ShowAmmoResupplyProgressBar();//APBGame.cAPBPawn.ShowAmmoResupplyProgressBar
	bool LeaveVehicle(bool bForceLeave,bool bGetOut,bool bAnimateDoorClosedIfPossible);//APBGame.cAPBPawn.LeaveVehicle
	void Rescued(class AcAPBPlayerController* pRescuerPC);//APBGame.cAPBPawn.Rescued
	bool IsAccessingInventory();//APBGame.cAPBPawn.IsAccessingInventory
	void ClientPlayEquipmentCSASuccessfulVFX();//APBGame.cAPBPawn.ClientPlayEquipmentCSASuccessfulVFX
	bool ShouldStopPlayingEmote();//APBGame.cAPBPawn.ShouldStopPlayingEmote
	unsigned char RetCSAAnimationType();//APBGame.cAPBPawn.RetCSAAnimationType
	void NotifyEndInventoryAccessCSA(bool bCancel);//APBGame.cAPBPawn.NotifyEndInventoryAccessCSA
	void ClientNotifyEndInventoryAccess(bool bCancel);//APBGame.cAPBPawn.ClientNotifyEndInventoryAccess
	float RetRemainingUnconsciousTime();//APBGame.cAPBPawn.RetRemainingUnconsciousTime
	void PlayRagDollDeath(class UClass* DamageType,FVector3 HitLoc);//APBGame.cAPBPawn.PlayRagDollDeath
	void StartDriving(class AcAPBVehicleBase* V);//APBGame.cAPBPawn.StartDriving
	class AcHoldableItemManager* RetHoldableItemManager();//APBGame.cAPBPawn.RetHoldableItemManager
	FRotator GetWeaponAimDirn();//APBGame.cAPBPawn.GetWeaponAimDirn
	void ChangedItemAttachmentData();//APBGame.cAPBPawn.ChangedItemAttachmentData
	bool EncroachingOn(class AActor* Other);//APBGame.cAPBPawn.EncroachingOn
	int AmmoClipsLeft();//APBGame.cAPBPawn.AmmoClipsLeft
	bool CanReloadWeapon();//APBGame.cAPBPawn.CanReloadWeapon
	float GetBailOutSpeed();//APBGame.cAPBPawn.GetBailOutSpeed
	void BeginOnFootDeathSequence(class UClass* DamageType,FVector3 HitLoc);//APBGame.cAPBPawn.BeginOnFootDeathSequence
	unsigned char CheckCanBeginAmmoResupply();//APBGame.cAPBPawn.CheckCanBeginAmmoResupply
	float RetFallDeathMomentumScale();//APBGame.cAPBPawn.RetFallDeathMomentumScale
	void PlayEmote(class UcAnimationDescriptor* Descriptor,bool Loop);//APBGame.cAPBPawn.PlayEmote
	class AActor* RetCurrentCSAInteractiveActor();//APBGame.cAPBPawn.RetCurrentCSAInteractiveActor
	void BaseChanged();//APBGame.cAPBPawn.BaseChanged
	void OnTimerEndCSA();//APBGame.cAPBPawn.OnTimerEndCSA
	bool CanPlayerAccessInventory(class AcAPBPlayerController* pPlayer);//APBGame.cAPBPawn.CanPlayerAccessInventory
	void SetUnconscious(bool bUnconsciousNew);//APBGame.cAPBPawn.SetUnconscious
	void InitiateEnterVehicle(class AcAPBVehicleBase* VehicleEnter,unsigned char eVPIPositionEnter,bool bCanDriveWhenEntered,bool bEnterImmediately);//APBGame.cAPBPawn.InitiateEnterVehicle
	void EnterStrafeFiringState();//APBGame.cAPBPawn.EnterStrafeFiringState
	void EndCrouch(float HeightAdjust);//APBGame.cAPBPawn.EndCrouch
	void ArrestRespawnQuestionCallback(unsigned char Answer);//APBGame.cAPBPawn.ArrestRespawnQuestionCallback
	bool StartPhysicsBodyImpact(struct FName HitBoneName,bool bUseMotors);//APBGame.cAPBPawn.StartPhysicsBodyImpact
	void RenderDebugPage(class UCanvas* Canvas);//APBGame.cAPBPawn.RenderDebugPage
	float RetUseableStamina();//APBGame.cAPBPawn.RetUseableStamina
	void UnPossessedNative();//APBGame.cAPBPawn.UnPossessedNative
	bool IsDead();//APBGame.cAPBPawn.IsDead
	void GetActiveAimNodes(TArray<class UcAPBAnimNodeAimOffsetAnimSetProfile*>* aResults);//APBGame.cAPBPawn.GetActiveAimNodes
	class UcAmmoDepotComponent* RetAmmoDepotComponent();//APBGame.cAPBPawn.RetAmmoDepotComponent
	bool RetEnterLeaveVCP();//APBGame.cAPBPawn.RetEnterLeaveVCP
	void PossessedBy(class AController* C,bool bVehicleTransition);//APBGame.cAPBPawn.PossessedBy
	void NotifyControllerCharacterUIDChanged();//APBGame.cAPBPawn.NotifyControllerCharacterUIDChanged
	bool IsFiringWeapon();//APBGame.cAPBPawn.IsFiringWeapon
	float RetEstimatedCSAProgress();//APBGame.cAPBPawn.RetEstimatedCSAProgress
	bool AdjustFloorPositionForHeightAndCollision(FVector3* outVehiclePosition,bool bAlterHeightForCollisionIfNoFindFloor,float fRayCastDown,float RayCastFromAbove);//APBGame.cAPBPawn.AdjustFloorPositionForHeightAndCollision
	void SetWeaponState(unsigned char WeaponState);//APBGame.cAPBPawn.SetWeaponState
	void SetCSADataStartOutro();//APBGame.cAPBPawn.SetCSADataStartOutro
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cAPBPawn.BeginUse
	unsigned char RetInventoryAccessType();//APBGame.cAPBPawn.RetInventoryAccessType
	int RetHealth();//APBGame.cAPBPawn.RetHealth
	void SetControllerLastConnected(class AcAPBPlayerController* ControllerLastConnected);//APBGame.cAPBPawn.SetControllerLastConnected
	float RetAmmoResupplyRange();//APBGame.cAPBPawn.RetAmmoResupplyRange
	void UnPossessed();//APBGame.cAPBPawn.UnPossessed
	void InitVFX();//APBGame.cAPBPawn.InitVFX
	void SetLookAtPriority(int pr_nLookAtPriority);//APBGame.cAPBPawn.SetLookAtPriority
	void PollEncumbranceSettings();//APBGame.cAPBPawn.PollEncumbranceSettings
	void StartLeanOut();//APBGame.cAPBPawn.StartLeanOut
	bool VCPRaycastVelocityCheck();//APBGame.cAPBPawn.VCPRaycastVelocityCheck
	struct FName RetRandomHitReactionBoneName();//APBGame.cAPBPawn.RetRandomHitReactionBoneName
	void StartLeanIn();//APBGame.cAPBPawn.StartLeanIn
	bool CanPlayEmoteCommon();//APBGame.cAPBPawn.CanPlayEmoteCommon
	bool CanDeployAmmoCarrierDepot(bool i_bActivationCheck);//APBGame.cAPBPawn.CanDeployAmmoCarrierDepot
	void ChangedVehicleUseReplicated();//APBGame.cAPBPawn.ChangedVehicleUseReplicated
	void OnPayForHeat(bool bSuccess);//APBGame.cAPBPawn.OnPayForHeat
	void NotifyMarksManShipModeChanged();//APBGame.cAPBPawn.NotifyMarksManShipModeChanged
	void ChangedVehicleUseDataCloseDoorIfAppropriateOldVehicleUse();//APBGame.cAPBPawn.ChangedVehicleUseDataCloseDoorIfAppropriateOldVehicleUse
	void ResumeStaminaRegeneration();//APBGame.cAPBPawn.ResumeStaminaRegeneration
	int RetMaxHealth();//APBGame.cAPBPawn.RetMaxHealth
	void ResetVehicleUseData();//APBGame.cAPBPawn.ResetVehicleUseData
	void OnLeanOutAnimEnd();//APBGame.cAPBPawn.OnLeanOutAnimEnd
	void DefaultPlayDeath();//APBGame.cAPBPawn.DefaultPlayDeath
	bool CanBeBaseForPawn(class APawn* aPawn);//APBGame.cAPBPawn.CanBeBaseForPawn
	void SetIsWinded(bool bNewWinded);//APBGame.cAPBPawn.SetIsWinded
	void NotifyConsumerAttributesModified(class UiAmmoConsumer* pConsumer);//APBGame.cAPBPawn.NotifyConsumerAttributesModified
	void OnLeanInAnimEnd();//APBGame.cAPBPawn.OnLeanInAnimEnd
	void BeginRespawnDeath();//APBGame.cAPBPawn.BeginRespawnDeath
	bool IsSprinting();//APBGame.cAPBPawn.IsSprinting
	void ClientPlayEquipmentCSACancelledVFX();//APBGame.cAPBPawn.ClientPlayEquipmentCSACancelledVFX
	class ULightEnvironmentComponent* RetLightEnvironment();//APBGame.cAPBPawn.RetLightEnvironment
	void SetBaseEyeheight();//APBGame.cAPBPawn.SetBaseEyeheight
	void ClientUpdateVIPVFX();//APBGame.cAPBPawn.ClientUpdateVIPVFX
	void ClientUpdateVFXOnGroupMemberLeave(bool bThisPlayerLeft);//APBGame.cAPBPawn.ClientUpdateVFXOnGroupMemberLeave
	void RemoveArrestRespawnQuestion();//APBGame.cAPBPawn.RemoveArrestRespawnQuestion
	bool InWeaponRange(class AActor* Target);//APBGame.cAPBPawn.InWeaponRange
	bool IsHard();//APBGame.cAPBPawn.IsHard
	void ChangedCurrentCSAData();//APBGame.cAPBPawn.ChangedCurrentCSAData
	void UpdateTargetingCylinderSize();//APBGame.cAPBPawn.UpdateTargetingCylinderSize
	void SelectOnFootDeathAnimation(class UClass* DamageType,FVector3 HitLoc);//APBGame.cAPBPawn.SelectOnFootDeathAnimation
	void CancelStrafeFireing();//APBGame.cAPBPawn.CancelStrafeFireing
	bool CloseDoorIfAppropriate(class AcAPBVehicleBase* Vehicle,unsigned char ePosition);//APBGame.cAPBPawn.CloseDoorIfAppropriate
	void EndResupply(class AcAPBPlayerController* pPlayer,bool bCancel,unsigned char eWeaponType);//APBGame.cAPBPawn.EndResupply
	unsigned char RetDyingState();//APBGame.cAPBPawn.RetDyingState
	void LeanOut();//APBGame.cAPBPawn.LeanOut
	class AcItemAttachment* RetItemAttachment();//APBGame.cAPBPawn.RetItemAttachment
	void LeanIn();//APBGame.cAPBPawn.LeanIn
	void StartPassenger(class AcAPBVehicleBase* V);//APBGame.cAPBPawn.StartPassenger
	int RetPayForHeatPrice(int nNewLevel);//APBGame.cAPBPawn.RetPayForHeatPrice
	FVector3 GetLookAtPosition();//APBGame.cAPBPawn.GetLookAtPosition
	bool GetMarksManShipMode();//APBGame.cAPBPawn.GetMarksManShipMode
	void StopAllAnimations();//APBGame.cAPBPawn.StopAllAnimations
	bool IsJumping();//APBGame.cAPBPawn.IsJumping
	void RegisterCSAAnimationFinishedCallback(struct FScriptDelegate Callback);//APBGame.cAPBPawn.RegisterCSAAnimationFinishedCallback
	void CallSetFiringMode(unsigned char FiringModeNum);//APBGame.cAPBPawn.CallSetFiringMode
	void ClientPlayEquipmentCSAIntroVFX();//APBGame.cAPBPawn.ClientPlayEquipmentCSAIntroVFX
	FVector3 GetPhysicsImpulse(class UClass* DamageType,FVector3 HitLoc,FVector3 Momentum,struct FTraceHitInfo* OutHitInfo,bool bIsHitReaction);//APBGame.cAPBPawn.GetPhysicsImpulse
	void DebugRescue();//APBGame.cAPBPawn.DebugRescue
	bool CanFireWeapon();//APBGame.cAPBPawn.CanFireWeapon
	void GetHoldableItemManagerEncumbranceSettings(struct FEncumbrance* EncumbranceSettings);//APBGame.cAPBPawn.GetHoldableItemManagerEncumbranceSettings
	void SetUIInteraction(bool bInteraction);//APBGame.cAPBPawn.SetUIInteraction
	int RetMaxStamina();//APBGame.cAPBPawn.RetMaxStamina
	void SetCSADataSucceeded();//APBGame.cAPBPawn.SetCSADataSucceeded
	float RetCSADurationOnStart();//APBGame.cAPBPawn.RetCSADurationOnStart
	bool IsResupplyingPlayer(class AcAPBPlayerController* pPlayer);//APBGame.cAPBPawn.IsResupplyingPlayer
	class AcAPBVehicleBase* GetRecentVehicleBase();//APBGame.cAPBPawn.GetRecentVehicleBase
	void BeginTeleFragDeath();//APBGame.cAPBPawn.BeginTeleFragDeath
	void ClientPlayEquipmentCSALoopVFX(int nLoopAnimationIndex);//APBGame.cAPBPawn.ClientPlayEquipmentCSALoopVFX
	bool CanLeanOut();//APBGame.cAPBPawn.CanLeanOut
	void StopPassenger(class AVehicle* V,unsigned char eSeatLeaving);//APBGame.cAPBPawn.StopPassenger
	void WindedTimer();//APBGame.cAPBPawn.WindedTimer
	void TickEyelashes();//APBGame.cAPBPawn.TickEyelashes
	void CancelInventoryAccess();//APBGame.cAPBPawn.CancelInventoryAccess
	void ChangedEquipmentCSAAnimationData(int eAnimIndex,int nSeed);//APBGame.cAPBPawn.ChangedEquipmentCSAAnimationData
	unsigned char CanPhysicallyUseVehicleDoor(class AcAPBVehicleBase* VehicleUse,unsigned char eVehiclePoistionUse);//APBGame.cAPBPawn.CanPhysicallyUseVehicleDoor
	void LogItemAttachmentStatus();//APBGame.cAPBPawn.LogItemAttachmentStatus
	class AcAPBPlayerController* RetControllerLastConnected();//APBGame.cAPBPawn.RetControllerLastConnected
	bool DoesVehicleCollisionTakeDamage(class AcAPBVehicleBase* APBVehicle);//APBGame.cAPBPawn.DoesVehicleCollisionTakeDamage
	void ChangedDyingData();//APBGame.cAPBPawn.ChangedDyingData
	void DiedCommon(class AController* Killer,class UClass* DamageType,FVector3 HitLocation,int nInventoryItemTypeID);//APBGame.cAPBPawn.DiedCommon
	void CloseDoorFromInsideAnimNotify();//APBGame.cAPBPawn.CloseDoorFromInsideAnimNotify
	void OnEndADA();//APBGame.cAPBPawn.OnEndADA
	void OnPayForHeatSuccess();//APBGame.cAPBPawn.OnPayForHeatSuccess
	void DebugEnterStrafeFiringState();//APBGame.cAPBPawn.DebugEnterStrafeFiringState
	void EndRescuedCSA(unsigned char eCSAState,class AcAPBPlayerController* pRescuerPC);//APBGame.cAPBPawn.EndRescuedCSA
	void SetIsCustomising(bool bIsCustomising);//APBGame.cAPBPawn.SetIsCustomising
	void ShowDebugForOtherPawn();//APBGame.cAPBPawn.ShowDebugForOtherPawn
	void SetRunSpeed(float fNewRunSpeed);//APBGame.cAPBPawn.SetRunSpeed
	void PossessedByNative(class AController* C,bool bVehicleTransition);//APBGame.cAPBPawn.PossessedByNative
	bool CanPassTaskItem(class AcAPBPawn* Receiver);//APBGame.cAPBPawn.CanPassTaskItem
	FVector3 GetPawnViewLocation();//APBGame.cAPBPawn.GetPawnViewLocation
	void TriggerDriverCower(class AcAPBVehicleBase* pr_pVehicle);//APBGame.cAPBPawn.TriggerDriverCower
	void SetMarksManShipModeRequestID(unsigned char nMarksManShipModeRequestID);//APBGame.cAPBPawn.SetMarksManShipModeRequestID
	void TryToRescue();//APBGame.cAPBPawn.TryToRescue
	void PlayInVehicleDeathAnimation(class AcAPBVehicleBase* Vehicle,unsigned char eVehicleSeat,bool bLeanOut);//APBGame.cAPBPawn.PlayInVehicleDeathAnimation
	void GetMarksManShipModeEncumbranceSettings(struct FEncumbrance* EncumbranceSettings);//APBGame.cAPBPawn.GetMarksManShipModeEncumbranceSettings
	float GetPawnViewHeightAdjustNoCrouch();//APBGame.cAPBPawn.GetPawnViewHeightAdjustNoCrouch
	void Native_PostBeginPlay();//APBGame.cAPBPawn.Native_PostBeginPlay
	void UpdateCurrentlySprintingRunningOrWalking();//APBGame.cAPBPawn.UpdateCurrentlySprintingRunningOrWalking
	void UpdateAmmoResupplyProgress(float fProgress);//APBGame.cAPBPawn.UpdateAmmoResupplyProgress
	unsigned char CanPlayerInteractWithAmmoCarrier(class AcAPBPlayerController* i_pController);//APBGame.cAPBPawn.CanPlayerInteractWithAmmoCarrier
	void NotifySupplierAttributesModified();//APBGame.cAPBPawn.NotifySupplierAttributesModified
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//APBGame.cAPBPawn.DisplayDebug
	void SetGrenadeWeaponState(unsigned char GrenadeWeaponState);//APBGame.cAPBPawn.SetGrenadeWeaponState
	void InitHitReaction(FVector3 HitLocation,FVector3 Momentum,class UClass* DamageType,struct FTraceHitInfo HitInfo);//APBGame.cAPBPawn.InitHitReaction
	void ClientNotifyPlayerClosedInventory();//APBGame.cAPBPawn.ClientNotifyPlayerClosedInventory
	void PassTaskItemAnimNotify();//APBGame.cAPBPawn.PassTaskItemAnimNotify
	unsigned char CheckCanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cAPBPawn.CheckCanResupplyPlayer
	void ClientIllegalLocation_APB(struct FString sErrorMessage);//APBGame.cAPBPawn.ClientIllegalLocation_APB
	bool CanPerformAmmoCarrierInteraction(class AcAPBPawn* pUser);//APBGame.cAPBPawn.CanPerformAmmoCarrierInteraction
	void EndArrestedCSA(unsigned char eCSAState,class AcAPBPlayerController* pArresterPC);//APBGame.cAPBPawn.EndArrestedCSA
	void OnStartADA(float fStaminaDrain);//APBGame.cAPBPawn.OnStartADA
	void SetLastVehicleUsed(class AcAPBVehicleBase* APBVehicle);//APBGame.cAPBPawn.SetLastVehicleUsed
	void ClientUpdateArrestedVFX();//APBGame.cAPBPawn.ClientUpdateArrestedVFX
	void SetCSAAnimationData(unsigned char eCSA,int eAnimIndex,unsigned char eCSAState);//APBGame.cAPBPawn.SetCSAAnimationData
	bool CanEnterMarksManShipMode();//APBGame.cAPBPawn.CanEnterMarksManShipMode
	double RetArrestedTimerExpiry();//APBGame.cAPBPawn.RetArrestedTimerExpiry
	void EndInvokedMissionCSA(unsigned char eCSA,unsigned char eCSAState,class AActor* InteractiveActor);//APBGame.cAPBPawn.EndInvokedMissionCSA
	bool IsLimitedAmmoSupplier();//APBGame.cAPBPawn.IsLimitedAmmoSupplier
	void UpdateMeshTranslation();//APBGame.cAPBPawn.UpdateMeshTranslation
	void JumpOffPawn();//APBGame.cAPBPawn.JumpOffPawn
	class AcItemAttachment* RetAttachedItem();//APBGame.cAPBPawn.RetAttachedItem
	float RetArrestTime();//APBGame.cAPBPawn.RetArrestTime
	class AcItem* RetCurrentItem();//APBGame.cAPBPawn.RetCurrentItem
	void TurnOnRagdoll();//APBGame.cAPBPawn.TurnOnRagdoll
	void BlendDeathAnimToRagDoll();//APBGame.cAPBPawn.BlendDeathAnimToRagDoll
	float GetDefaultJumpZ();//APBGame.cAPBPawn.GetDefaultJumpZ
	void HealthDown();//APBGame.cAPBPawn.HealthDown
	void SetMarksmanshipSpeed(float fNewSpeed);//APBGame.cAPBPawn.SetMarksmanshipSpeed
	float RetStaminaPercent();//APBGame.cAPBPawn.RetStaminaPercent
	void BeginAmmoCarrierInteraction(unsigned char eCSA,class AcAPBPawn* pUser);//APBGame.cAPBPawn.BeginAmmoCarrierInteraction
	void ClientPlaySound(class USoundCue* ASound);//APBGame.cAPBPawn.ClientPlaySound
	class AcEquipableTaskItem* RetCarriedTaskItem();//APBGame.cAPBPawn.RetCarriedTaskItem
	class AActor* RetAmmoSupplierActor();//APBGame.cAPBPawn.RetAmmoSupplierActor
	bool RetLeavingVCP();//APBGame.cAPBPawn.RetLeavingVCP
	void UpdateArrestTimeRemaining();//APBGame.cAPBPawn.UpdateArrestTimeRemaining
	int GetLookAtPriority();//APBGame.cAPBPawn.GetLookAtPriority
	bool RetInVehicle();//APBGame.cAPBPawn.RetInVehicle
	void ChangedPlayEquipmentCSAOutro(bool bCSAOutro);//APBGame.cAPBPawn.ChangedPlayEquipmentCSAOutro
	void CancelCSAAutoRoute();//APBGame.cAPBPawn.CancelCSAAutoRoute
	bool IsInvokedCSASupported(unsigned char eCSA,class AActor* InteractiveActor);//APBGame.cAPBPawn.IsInvokedCSASupported
	bool WithdrawAmmoClip();//APBGame.cAPBPawn.WithdrawAmmoClip
	bool RetLeaningOutReverseAim();//APBGame.cAPBPawn.RetLeaningOutReverseAim
	void SetCrouchSpeed(float fNewCrouchSpeed);//APBGame.cAPBPawn.SetCrouchSpeed
	void ServerIllegalLocation_APB(struct FString sErrorMessage);//APBGame.cAPBPawn.ServerIllegalLocation_APB
	void CallSuperReplicated(struct FName VarName);//APBGame.cAPBPawn.CallSuperReplicated
	void DeathAnimBlendToMotors();//APBGame.cAPBPawn.DeathAnimBlendToMotors
	void OnRescued(class AcAPBPlayerController* pRescuerPC);//APBGame.cAPBPawn.OnRescued
	class AcAPBPlayerController* GetHighestDamageAssistingPlayer();//APBGame.cAPBPawn.GetHighestDamageAssistingPlayer
	void CollisionChanged();//APBGame.cAPBPawn.CollisionChanged
	void NotifyBeginAmmoResupply(class UiAmmoSupplier* supplier);//APBGame.cAPBPawn.NotifyBeginAmmoResupply
	float RetAmmoResupplyProgress();//APBGame.cAPBPawn.RetAmmoResupplyProgress
	bool HasFallDamage();//APBGame.cAPBPawn.HasFallDamage
	void SetTaskItemCSAAnimationData(int eAnimIndex,unsigned char eCSAState);//APBGame.cAPBPawn.SetTaskItemCSAAnimationData
	void GetStaminaEncumbranceSettings(struct FEncumbrance* EncumbranceSettings);//APBGame.cAPBPawn.GetStaminaEncumbranceSettings
	void UseProp(struct FName sUseTagName);//APBGame.cAPBPawn.UseProp
	bool RetIsCustomising();//APBGame.cAPBPawn.RetIsCustomising
	void ReplicatedPlayHitReaction();//APBGame.cAPBPawn.ReplicatedPlayHitReaction
	int RetStamina();//APBGame.cAPBPawn.RetStamina
	bool IsPawnImmobile();//APBGame.cAPBPawn.IsPawnImmobile
	bool CanInitiateEnterVehicle(class AcAPBVehicleBase* VehicleEnter,unsigned char eVPIPositionEnter);//APBGame.cAPBPawn.CanInitiateEnterVehicle
	void KilledBy(class APawn* EventInstigator);//APBGame.cAPBPawn.KilledBy
	void SetAimRotation(FRotator* NewRotation);//APBGame.cAPBPawn.SetAimRotation
	void ForceLeaveVehicleAndDestroy();//APBGame.cAPBPawn.ForceLeaveVehicleAndDestroy
	bool ShouldShowAttachedItemForReequip();//APBGame.cAPBPawn.ShouldShowAttachedItemForReequip
	void BeginInvokedMissionCSA(unsigned char eCSA,class AActor* InteractiveActor);//APBGame.cAPBPawn.BeginInvokedMissionCSA
	void BeginArrestedCSA();//APBGame.cAPBPawn.BeginArrestedCSA
	void BeginResupply(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType);//APBGame.cAPBPawn.BeginResupply
	void SetStrafeFiringReloadTimer();//APBGame.cAPBPawn.SetStrafeFiringReloadTimer
	void SetAmmoCarrierDepotDeployed(bool bDeployed,bool bIsHeldTaskItem);//APBGame.cAPBPawn.SetAmmoCarrierDepotDeployed
	bool IsInSeatAndIdle();//APBGame.cAPBPawn.IsInSeatAndIdle
	void PostBeginPlay();//APBGame.cAPBPawn.PostBeginPlay
	bool IsCarryingWeaponPickup();//APBGame.cAPBPawn.IsCarryingWeaponPickup
	void ServerSetStrafeFiring(int Id);//APBGame.cAPBPawn.ServerSetStrafeFiring
	class AActor* RetAmmoConsumerActor();//APBGame.cAPBPawn.RetAmmoConsumerActor
	void ClientUpdateVFXOnOppositionChanged(int nOldID,int nNewID);//APBGame.cAPBPawn.ClientUpdateVFXOnOppositionChanged
	void DrawString(class AHUD* HUD,float X,float Y,struct FString Text);//APBGame.cAPBPawn.DrawString
	void ChangedVehicleUseDataCloseDoorIfAppropriateVehicleUse();//APBGame.cAPBPawn.ChangedVehicleUseDataCloseDoorIfAppropriateVehicleUse
	void OpenPlayerInteractionMenu(class AcAPBPawn* pPawn);//APBGame.cAPBPawn.OpenPlayerInteractionMenu
	void TornOff();//APBGame.cAPBPawn.TornOff
	void ChangedArrestStatus();//APBGame.cAPBPawn.ChangedArrestStatus
	bool CheckRescueRespawn();//APBGame.cAPBPawn.CheckRescueRespawn
	bool IsCurrentlyCarSurfing();//APBGame.cAPBPawn.IsCurrentlyCarSurfing
	float GetStandingCollisionHeight();//APBGame.cAPBPawn.GetStandingCollisionHeight
	void PlayJumpAnimation();//APBGame.cAPBPawn.PlayJumpAnimation
	void BaseChange();//APBGame.cAPBPawn.BaseChange
	void ClientReStartNative();//APBGame.cAPBPawn.ClientReStartNative
	void NotifyEndAmmoResupply(bool bCancel);//APBGame.cAPBPawn.NotifyEndAmmoResupply
	bool CanVehicleExplosionKillPawn(class AcAPBVehicleBase* pVehicle,class AController* EventInstigator,class UClass* DamageType);//APBGame.cAPBPawn.CanVehicleExplosionKillPawn
	void SetReloadTime(float fReloadTime);//APBGame.cAPBPawn.SetReloadTime
	bool CanTakeDamage(int DamageAmount,class AController* EventInstigator,FVector3* HitLocation,FVector3* Momentum,class UClass* DamageType,struct FTraceHitInfo* HitInfo,class AActor* DamageCauser);//APBGame.cAPBPawn.CanTakeDamage
	void DeRegisterWithPGEdges();//APBGame.cAPBPawn.DeRegisterWithPGEdges
	bool RetLeaningOutForAnimation();//APBGame.cAPBPawn.RetLeaningOutForAnimation
	void ArrestedTimer();//APBGame.cAPBPawn.ArrestedTimer
	bool Restore(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.cAPBPawn.Restore
	float GetDownRayPlacePlayerExtent();//APBGame.cAPBPawn.GetDownRayPlacePlayerExtent
	void HealthUp();//APBGame.cAPBPawn.HealthUp
	bool CanBeDamaged(class AcAPBPlayerController* PC);//APBGame.cAPBPawn.CanBeDamaged
	void KnockOut(class AcAPBPlayerController* pAttacker,int nInventoryTypeID);//APBGame.cAPBPawn.KnockOut
	void AddSymbolToAttachment();//APBGame.cAPBPawn.AddSymbolToAttachment
	bool IsCarryingLargeTaskItem();//APBGame.cAPBPawn.IsCarryingLargeTaskItem
	float RetImmuneToStaminaDamageTime();//APBGame.cAPBPawn.RetImmuneToStaminaDamageTime
	void StopAnimationLocal(struct FAnimationRequest Req);//APBGame.cAPBPawn.StopAnimationLocal
	void NotifyAnimationEnd(class UcAnimationDescriptor* Animation,class AcAnimationDrivenTrigger* Trigger,bool bInterrupted);//APBGame.cAPBPawn.NotifyAnimationEnd
	bool CanInitiateCSARadiusCheck();//APBGame.cAPBPawn.CanInitiateCSARadiusCheck
	void SetMarksManShipMode(unsigned char nMarksManShipModeRequestID,bool bClientPredicted,bool bCorrectlyPredicted,bool bNewMarksManShipMode);//APBGame.cAPBPawn.SetMarksManShipMode
	bool DoPayForHeatServerNative(int nNewLevel);//APBGame.cAPBPawn.DoPayForHeatServerNative
	void AttachToSocket(class APawn* SocketOwner,struct FName SocketName);//APBGame.cAPBPawn.AttachToSocket
	void StartImmuneToStaminaDamage();//APBGame.cAPBPawn.StartImmuneToStaminaDamage
	void ClearAssistingPlayers();//APBGame.cAPBPawn.ClearAssistingPlayers
	unsigned char CheckCanPlayerAccessInventory(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cAPBPawn.CheckCanPlayerAccessInventory
	void GetInAndCloseDoorAnimNotify();//APBGame.cAPBPawn.GetInAndCloseDoorAnimNotify
	bool CanRotateCharacter();//APBGame.cAPBPawn.CanRotateCharacter
	void NotifyEndInventoryAccess(bool bCancel);//APBGame.cAPBPawn.NotifyEndInventoryAccess
	void DoPayForHeat(int nNewLevel);//APBGame.cAPBPawn.DoPayForHeat
	void NotifyReceiveTaskItemFromPlayer(class AcEquipableTaskItem* pEquipableTaskItem,class AcAPBPawn* pOther);//APBGame.cAPBPawn.NotifyReceiveTaskItemFromPlayer
	void StartCrouch(float HeightAdjust);//APBGame.cAPBPawn.StartCrouch
	void CloseDoorAnimNotify();//APBGame.cAPBPawn.CloseDoorAnimNotify
	void ClientRemoveStrafeFiring(int Id);//APBGame.cAPBPawn.ClientRemoveStrafeFiring
	void GetActorEyesViewPoint(FVector3* out_Location,FRotator* out_Rotation);//APBGame.cAPBPawn.GetActorEyesViewPoint
	unsigned char GetMarksManShipModeRequestID();//APBGame.cAPBPawn.GetMarksManShipModeRequestID
	void OnBump(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitNormal);//APBGame.cAPBPawn.OnBump
	void ToggleIK();//APBGame.cAPBPawn.ToggleIK
	void CancelAmmoResupply(unsigned char eWeaponType);//APBGame.cAPBPawn.CancelAmmoResupply
	void NativeReplicatedEvent(struct FName VarName);//APBGame.cAPBPawn.NativeReplicatedEvent
	void SetEquipmentCSAAnimationData(int eAnimIndex,unsigned char eCSAState);//APBGame.cAPBPawn.SetEquipmentCSAAnimationData
	class AcAPBVehicleBase* GetAntiCarSurfingVehicle();//APBGame.cAPBPawn.GetAntiCarSurfingVehicle
	void DisplayDebugIKController(class AHUD* HUD,float* out_YL,float* out_YPos,class UcAPBSkelControlLimbStrategy* IKController);//APBGame.cAPBPawn.DisplayDebugIKController
	void DisplayDebugDamageAreas(class AHUD* HUD);//APBGame.cAPBPawn.DisplayDebugDamageAreas
	void OnNotifyAggressiveAction();//APBGame.cAPBPawn.OnNotifyAggressiveAction
	int RetCSAEquipmentAnimationType();//APBGame.cAPBPawn.RetCSAEquipmentAnimationType
	void ChangedCurrentCSA(unsigned char eCSA);//APBGame.cAPBPawn.ChangedCurrentCSA
	void Falling();//APBGame.cAPBPawn.Falling
	float GetAPBPawnConstantFromSDD(unsigned char eAPBPawnConstant);//APBGame.cAPBPawn.GetAPBPawnConstantFromSDD
	float RetRagdollSpeedThreshold();//APBGame.cAPBPawn.RetRagdollSpeedThreshold
	bool CanWitness();//APBGame.cAPBPawn.CanWitness
	bool IsVehicleGoingAboveCarSurfingSpeed(class AcAPBVehicleBase* APBVehicleBaseTest,float fCarSurfingMinSpeed);//APBGame.cAPBPawn.IsVehicleGoingAboveCarSurfingSpeed
	void ShouldCrouch(bool bCrouch,bool bFromServer);//APBGame.cAPBPawn.ShouldCrouch
	class AcStorageInventory* RetStorageInventory();//APBGame.cAPBPawn.RetStorageInventory
	void ClientTriggerDespawnVFX();//APBGame.cAPBPawn.ClientTriggerDespawnVFX
	unsigned char RetCarriedTaskItemSize();//APBGame.cAPBPawn.RetCarriedTaskItemSize
	void Bump(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitNormal);//APBGame.cAPBPawn.Bump
	void SetQuickReloadTime(float fQuickReloadTime);//APBGame.cAPBPawn.SetQuickReloadTime
	class AcAPBPlayerController* RetAmmoCarrierOwner();//APBGame.cAPBPawn.RetAmmoCarrierOwner
	bool GetCanSprint();//APBGame.cAPBPawn.GetCanSprint
	void GetActiveSelectionNodes(TArray<class UcAnimConfigureSelect*>* aResults);//APBGame.cAPBPawn.GetActiveSelectionNodes
	bool RetSDDWeaponIsLessLethal(int WeaponID);//APBGame.cAPBPawn.RetSDDWeaponIsLessLethal
	bool CanLeanIn();//APBGame.cAPBPawn.CanLeanIn
	bool HealDamage(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.cAPBPawn.HealDamage
	void ServerForceEndPerformCSA(unsigned char eCSAState);//APBGame.cAPBPawn.ServerForceEndPerformCSA
	float GetZNormalFloorPlacePlayer();//APBGame.cAPBPawn.GetZNormalFloorPlacePlayer
	void NotifyBeginInventoryAccess(unsigned char eType,class UiAmmoSupplier* supplier);//APBGame.cAPBPawn.NotifyBeginInventoryAccess
	bool IsAmmoCarrierModifierActive();//APBGame.cAPBPawn.IsAmmoCarrierModifierActive
	void SetSprintSpeed(float fNewSprintSpeed);//APBGame.cAPBPawn.SetSprintSpeed
	unsigned char IsCSAAnimationMirrored();//APBGame.cAPBPawn.IsCSAAnimationMirrored
	void NotifyReceiveTaskItemFromVehicle(class AcEquipableTaskItem* pEquipableTaskItem,class AcAPBVehicleBase* pOther);//APBGame.cAPBPawn.NotifyReceiveTaskItemFromVehicle
	bool VCPRadiusOverlapCheck(FVector3 VCPLocation);//APBGame.cAPBPawn.VCPRadiusOverlapCheck
	bool CanBeTargeted(class AcAPBPlayerController* PC);//APBGame.cAPBPawn.CanBeTargeted
	void RemoveItemAttachment();//APBGame.cAPBPawn.RemoveItemAttachment
	void PortLeanIn();//APBGame.cAPBPawn.PortLeanIn
	void RetExplosionOcclusionExtents(TArray<FVector3>* Verts,FVector3* ExplosionLocation);//APBGame.cAPBPawn.RetExplosionOcclusionExtents
	void Destroyed();//APBGame.cAPBPawn.Destroyed
	void HideAmmoResupplyProgressBar();//APBGame.cAPBPawn.HideAmmoResupplyProgressBar
	void BeginRescuedCSA();//APBGame.cAPBPawn.BeginRescuedCSA
	void ChangedVehicleUseData();//APBGame.cAPBPawn.ChangedVehicleUseData
	void ChangedGrenadeWeaponState();//APBGame.cAPBPawn.ChangedGrenadeWeaponState
	void ProcessViewRotation(float DeltaTime,FRotator* out_PlayerControllerRotation,FRotator* out_DeltaRot);//APBGame.cAPBPawn.ProcessViewRotation
	void ClientNotifyBeginInventoryAccess(unsigned char eType,class AActor* pSupplier);//APBGame.cAPBPawn.ClientNotifyBeginInventoryAccess
	void ChangedCSADuration(unsigned char eCSA,float fCSADuration,float fCSAProgress);//APBGame.cAPBPawn.ChangedCSADuration
	unsigned char RetTaskItemAnimationType();//APBGame.cAPBPawn.RetTaskItemAnimationType
	float GetSprintTolerance();//APBGame.cAPBPawn.GetSprintTolerance
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//APBGame.cAPBPawn.TakeRadiusDamage
	float RetLocomotionSpeed(unsigned char eLocomotionType);//APBGame.cAPBPawn.RetLocomotionSpeed
	bool IsCarryingTaskItem();//APBGame.cAPBPawn.IsCarryingTaskItem
	void OpenDoorAndBailOutAnimNotify();//APBGame.cAPBPawn.OpenDoorAndBailOutAnimNotify
	void PlayPendingVFX();//APBGame.cAPBPawn.PlayPendingVFX
	bool IsAmmoCarrierDepotDeployed();//APBGame.cAPBPawn.IsAmmoCarrierDepotDeployed
	void RecentVehicleBaseChangeTimer();//APBGame.cAPBPawn.RecentVehicleBaseChangeTimer
	void GetAnimationBlendResults(TArray<class UAnimNodeSequence*>* aResults);//APBGame.cAPBPawn.GetAnimationBlendResults
	void OpenDoorAnimNotify();//APBGame.cAPBPawn.OpenDoorAnimNotify
	void BeginOnFootDeath(class UClass* DamageType,FVector3 HitLoc);//APBGame.cAPBPawn.BeginOnFootDeath
	void NotifyCSAAnimationEnd();//APBGame.cAPBPawn.NotifyCSAAnimationEnd
	void SetupItemAttachment();//APBGame.cAPBPawn.SetupItemAttachment
	void ClientNotifyEmoteAnimationEnd(struct FString sEmoteName,struct FString sResultMarkup);//APBGame.cAPBPawn.ClientNotifyEmoteAnimationEnd
	void ChangedVehicleUseDataCleanUpFailedRouteingToVAPOrOpeningDoor();//APBGame.cAPBPawn.ChangedVehicleUseDataCleanUpFailedRouteingToVAPOrOpeningDoor
	void PlayHitReaction(class APawn* InstigatedBy,FVector3 HitLocation,class UClass* DamageType,FVector3 Momentum,struct FTraceHitInfo HitInfo);//APBGame.cAPBPawn.PlayHitReaction
	bool IsPawnImmobileIgnoreCSA();//APBGame.cAPBPawn.IsPawnImmobileIgnoreCSA
	int GetCSARand();//APBGame.cAPBPawn.GetCSARand
	bool Died(class AController* Killer,class UClass* DamageType,FVector3 HitLocation,int nInventoryItemTypeID);//APBGame.cAPBPawn.Died
	void CallClientNotifyEmoteAnimationEnd(struct FString sEmoteName,struct FString sResultMarkup);//APBGame.cAPBPawn.CallClientNotifyEmoteAnimationEnd
	int RetCurrentCSAInteractionPoint();//APBGame.cAPBPawn.RetCurrentCSAInteractionPoint
	void RegainConsciousness();//APBGame.cAPBPawn.RegainConsciousness
	void SwitchVehiclePositions(unsigned char eVPISwitchTo);//APBGame.cAPBPawn.SwitchVehiclePositions
	bool IsPlayingEquipmentCSAAnimation();//APBGame.cAPBPawn.IsPlayingEquipmentCSAAnimation
	void NotifyCustomisationChanged();//APBGame.cAPBPawn.NotifyCustomisationChanged
	void NotifyCarDoorRequest(class AcAPBVehicleBase* Vehicle,unsigned char eVehicleSeat,unsigned char eVehicleInteractionAnimation);//APBGame.cAPBPawn.NotifyCarDoorRequest
	FRotator GetViewRotation();//APBGame.cAPBPawn.GetViewRotation
	bool CanBeginInvokedMissionCSA(unsigned char eCSA,class AActor* InteractiveActor);//APBGame.cAPBPawn.CanBeginInvokedMissionCSA
	FVector3 RetAmmoResupplyLocation();//APBGame.cAPBPawn.RetAmmoResupplyLocation
	bool SourceActorAllowCameraBlockingTest();//APBGame.cAPBPawn.SourceActorAllowCameraBlockingTest
	bool IsInLookBehindCamera();//APBGame.cAPBPawn.IsInLookBehindCamera
	bool ForceEndPerformCSA(unsigned char eCSAState);//APBGame.cAPBPawn.ForceEndPerformCSA
	float RetCSAProgressOnStart();//APBGame.cAPBPawn.RetCSAProgressOnStart
	bool GetAimStrafeMode();//APBGame.cAPBPawn.GetAimStrafeMode
	bool IsUnconscious();//APBGame.cAPBPawn.IsUnconscious
	bool DoJump(bool bUpdating);//APBGame.cAPBPawn.DoJump
	bool IsPerformingCSAAutoRoute();//APBGame.cAPBPawn.IsPerformingCSAAutoRoute
	void StopDriving(class AVehicle* V);//APBGame.cAPBPawn.StopDriving
	bool IsSoft();//APBGame.cAPBPawn.IsSoft
	bool IsDynamicTarget();//APBGame.cAPBPawn.IsDynamicTarget
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);//APBGame.cAPBPawn.GetDefaultCameraMode
	void DetachFromPawn();//APBGame.cAPBPawn.DetachFromPawn
	bool RetLeaningOut();//APBGame.cAPBPawn.RetLeaningOut
	void CancelAllResupplyOperations();//APBGame.cAPBPawn.CancelAllResupplyOperations
	void NotifyCarAnimationEnd(class AcAPBVehicleBase* Vehicle,unsigned char eVehicleSeat,unsigned char eVehicleInteractionAnimation);//APBGame.cAPBPawn.NotifyCarAnimationEnd
	void ChangedTaskItemCSAAnimationData(int eAnimIndex);//APBGame.cAPBPawn.ChangedTaskItemCSAAnimationData
	void GetActorEyesViewPointNoCrouch(FVector3* out_Location,FRotator* out_Rotation);//APBGame.cAPBPawn.GetActorEyesViewPointNoCrouch
	class AcAPBPlayerController* GetLivingAssistPlayer(class AcMission* i_pMission);//APBGame.cAPBPawn.GetLivingAssistPlayer
	void SetCSADataEnd(unsigned char eCSAState);//APBGame.cAPBPawn.SetCSADataEnd
	bool IsPerformingCSAOutro();//APBGame.cAPBPawn.IsPerformingCSAOutro
	void AttachToPawn(class APawn* PawnAttach,FVector3 AttachLocation,FRotator AttachRotation,bool bSetCollisionAndPhysics);//APBGame.cAPBPawn.AttachToPawn
	bool CanInitiateCSA();//APBGame.cAPBPawn.CanInitiateCSA
	void SetCurrentCSA(unsigned char eCSA);//APBGame.cAPBPawn.SetCurrentCSA
	void DebugArrest();//APBGame.cAPBPawn.DebugArrest
	bool IsAnimationMirroringRequired();//APBGame.cAPBPawn.IsAnimationMirroringRequired
	class AcAPBPlayerController* GetCharacterPlayerController();//APBGame.cAPBPawn.GetCharacterPlayerController
	bool ForceEndCSA(unsigned char eCSAState);//APBGame.cAPBPawn.ForceEndCSA
	void EndStrafeFiring();//APBGame.cAPBPawn.EndStrafeFiring
	void OnCSAAnimationFinished();//APBGame.cAPBPawn.OnCSAAnimationFinished
	void ServerNotifyPlayerClosedInventory();//APBGame.cAPBPawn.ServerNotifyPlayerClosedInventory
	bool IsRangeBasedAmmoSupplier();//APBGame.cAPBPawn.IsRangeBasedAmmoSupplier
	void ClientUpdateStunnedVFX();//APBGame.cAPBPawn.ClientUpdateStunnedVFX
	void IncrementVehicleUseID();//APBGame.cAPBPawn.IncrementVehicleUseID
	void Native_PreBeginPlay();//APBGame.cAPBPawn.Native_PreBeginPlay
	void ClientCancelCrouchRequest(bool bCrouch,int nCrouchRequestID);//APBGame.cAPBPawn.ClientCancelCrouchRequest
	float GetDesignerConstantFromSDD(int eDesignerConstant);//APBGame.cAPBPawn.GetDesignerConstantFromSDD
	bool RetArrestedWhilstPVPUnlockedToAll();//APBGame.cAPBPawn.RetArrestedWhilstPVPUnlockedToAll
	void ClientTriggerSpawnVFX();//APBGame.cAPBPawn.ClientTriggerSpawnVFX
	void OnBeginFire(class AcWeapon* Weapon);//APBGame.cAPBPawn.OnBeginFire
	void ChangedStunned();//APBGame.cAPBPawn.ChangedStunned
	void ClientPlayEquipmentCSAOutroVFX();//APBGame.cAPBPawn.ClientPlayEquipmentCSAOutroVFX
	bool RetTargetInVehicleFiringArc();//APBGame.cAPBPawn.RetTargetInVehicleFiringArc
	bool EnterVehicle();//APBGame.cAPBPawn.EnterVehicle
	void SetRunning(bool bNewIsRunning);//APBGame.cAPBPawn.SetRunning
	void ServerCrouchRequest(bool bCrouch,int nCrouchRequestID);//APBGame.cAPBPawn.ServerCrouchRequest
	struct FName GetHitReactionRemappedBone(struct FName InBoneName);//APBGame.cAPBPawn.GetHitReactionRemappedBone
	float RetItemEffectivenessModifier();//APBGame.cAPBPawn.RetItemEffectivenessModifier
	bool IsAlive();//APBGame.cAPBPawn.IsAlive
	void PlayDying(class UClass* DamageType,FVector3 HitLoc);//APBGame.cAPBPawn.PlayDying
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cAPBPawn.ReplicatedEvent
	bool IsStaticTarget();//APBGame.cAPBPawn.IsStaticTarget
	void OnBeginVehicleInteraction();//APBGame.cAPBPawn.OnBeginVehicleInteraction
	void NotifyEmoteAnimationEnd(class UcAnimationDescriptor* Descriptor);//APBGame.cAPBPawn.NotifyEmoteAnimationEnd
	void Stun();//APBGame.cAPBPawn.Stun
	unsigned char GetLocomotionTypeInAir();//APBGame.cAPBPawn.GetLocomotionTypeInAir
	void AddArrestRespawnQuestion();//APBGame.cAPBPawn.AddArrestRespawnQuestion
	bool RetEnteringVCP();//APBGame.cAPBPawn.RetEnteringVCP
	void ReceiveTaskItemAnimNotify();//APBGame.cAPBPawn.ReceiveTaskItemAnimNotify
	void EndImmuneToStaminaDamage();//APBGame.cAPBPawn.EndImmuneToStaminaDamage
	void ServerNotifyLeftVCP();//APBGame.cAPBPawn.ServerNotifyLeftVCP
	bool ShouldShowAttachedItem(bool bShouldShowAttachedItemForReequip);//APBGame.cAPBPawn.ShouldShowAttachedItem
	void EndInventoryAccess(class AcAPBPlayerController* pPlayer,bool bCancel);//APBGame.cAPBPawn.EndInventoryAccess
	void SetKillAssistingPlayer(class AcAPBPlayerController* Assisting,int pr_nDamageAmount,int i_nWeaponType);//APBGame.cAPBPawn.SetKillAssistingPlayer
	bool ScriptDiedBase(class AController* Killer,class UClass* DamageType,FVector3 HitLocation,int nInventoryItemTypeID);//APBGame.cAPBPawn.ScriptDiedBase
	void BeginInvokedCSA(unsigned char eCSA,class AActor* InteractiveActor);//APBGame.cAPBPawn.BeginInvokedCSA
	bool CanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cAPBPawn.CanResupplyPlayer
	float GetPawnViewHeightAdjust();//APBGame.cAPBPawn.GetPawnViewHeightAdjust
	void ChangedCSAAnimationData(unsigned char eCSA,int eAnimIndex,int nSeed);//APBGame.cAPBPawn.ChangedCSAAnimationData
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cAPBPawn.IsCSASupported
	void EndInvokedCSA(unsigned char eCSA,class AActor* InteractiveActor,unsigned char eCSAState);//APBGame.cAPBPawn.EndInvokedCSA
	unsigned char RetCurrentCSA();//APBGame.cAPBPawn.RetCurrentCSA
	void DropTaskItemAnimNotify();//APBGame.cAPBPawn.DropTaskItemAnimNotify
	void DoPlayAnimationNative(struct FAnimationRequest Req);//APBGame.cAPBPawn.DoPlayAnimationNative
	void OnArrested(class AcAPBPlayerController* pArresterPC);//APBGame.cAPBPawn.OnArrested
	unsigned char CheckCanBeginInventoryAccess(class UiAmmoSupplier* pSupplier);//APBGame.cAPBPawn.CheckCanBeginInventoryAccess
	float RetCurrentCSADuration();//APBGame.cAPBPawn.RetCurrentCSADuration
	void SetWalking(bool bNewIsWalking);//APBGame.cAPBPawn.SetWalking
	float RetCurrentCSAProgress();//APBGame.cAPBPawn.RetCurrentCSAProgress
	void ClientOnTimerEndCSA();//APBGame.cAPBPawn.ClientOnTimerEndCSA
	void EndArrest();//APBGame.cAPBPawn.EndArrest
	void PreBeginPlay();//APBGame.cAPBPawn.PreBeginPlay
	void OpenDoorAndGetOutAnimNotify();//APBGame.cAPBPawn.OpenDoorAndGetOutAnimNotify
	bool IsResupplyingAmmo();//APBGame.cAPBPawn.IsResupplyingAmmo
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cAPBPawn.EndUse
	void ChangedConsciousness();//APBGame.cAPBPawn.ChangedConsciousness
	void ChangedVIPStatus();//APBGame.cAPBPawn.ChangedVIPStatus
	void PauseStaminaRegeneration(float Duration);//APBGame.cAPBPawn.PauseStaminaRegeneration
	void SetCameraAimRotPawn(FRotator* NewRotation);//APBGame.cAPBPawn.SetCameraAimRotPawn
	void OnEndVehicleInteraction();//APBGame.cAPBPawn.OnEndVehicleInteraction
	void ResumeHealthRegeneration();//APBGame.cAPBPawn.ResumeHealthRegeneration
	bool RetIsDrivingVehicle();//APBGame.cAPBPawn.RetIsDrivingVehicle
	bool IsPerformingLogicalCSA();//APBGame.cAPBPawn.IsPerformingLogicalCSA
	bool PlayAnimationLocal(struct FAnimationRequest Req);//APBGame.cAPBPawn.PlayAnimationLocal
	void ClientUpdateChatStateVFX();//APBGame.cAPBPawn.ClientUpdateChatStateVFX
	bool IsPerformingCSA();//APBGame.cAPBPawn.IsPerformingCSA
	class UiAmmoSupplier* RetInteractingAmmoSupplier();//APBGame.cAPBPawn.RetInteractingAmmoSupplier
	bool CanAbandonCSA();//APBGame.cAPBPawn.CanAbandonCSA
	void OnPayForHeatFailure();//APBGame.cAPBPawn.OnPayForHeatFailure
	bool CanInitiatePlayingEmote();//APBGame.cAPBPawn.CanInitiatePlayingEmote
	int RetStaminaBuffer();//APBGame.cAPBPawn.RetStaminaBuffer
	void BodyImpactBlendOutNotify(bool bKeepPhysicsAsset);//APBGame.cAPBPawn.BodyImpactBlendOutNotify
	bool ShouldBeAbleToCrouch();//APBGame.cAPBPawn.ShouldBeAbleToCrouch
	void ReplicateVFX(unsigned char pawnVfxType);//APBGame.cAPBPawn.ReplicateVFX
	bool IsAmmoCarrier();//APBGame.cAPBPawn.IsAmmoCarrier
	void InitArrestedExpiryTime();//APBGame.cAPBPawn.InitArrestedExpiryTime
	bool TryToInitiateLeaveVehicle(bool bLeaveImmediately,bool bForceLeave,bool bGetOut);//APBGame.cAPBPawn.TryToInitiateLeaveVehicle
};
UClass* AcAPBPawn::pClassPointer = NULL;

//0x000014 (0x000C78 - 0x000C64)
//cAPBDummyPawn[0x10351690]
class AcAPBDummyPawn : public AcAPBPawn
{
public:
	class APlayerController*                           m_MyController;                                   		// 0x000C64 (0x0004)              
	class APawn*                                       m_TheRealPawn;                                    		// 0x000C68 (0x0004)              
	unsigned long                                      m_bAckFakeMove : 1;                               		// 0x000C6C (0x0004) [0x00000001] 
	unsigned long                                      m_bSimulateControllerTraffic : 1;                 		// 0x000C6C (0x0004) [0x00000002] 
	unsigned long                                      m_bUseMeasuredWorkTimeToSleep : 1;                		// 0x000C6C (0x0004) [0x00000004] 
	int                                                m_nNumAcks;                                       		// 0x000C70 (0x0004)              
	int                                                m_nFakeWorkLoops;                                 		// 0x000C74 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBDummyPawn");
		return pClassPointer;
	};

public:
	void ProcessMove(float DeltaTime,FVector3 newAccel,FRotator DeltaRot);//APBGame.cAPBDummyPawn.ProcessMove
	void FakeMoveAck(float fFakeTimeStamp);//APBGame.cAPBDummyPawn.FakeMoveAck
	void FakeServerMove(float FakeTimeStamp,FVector3 FakeInAccel,FVector3 FakeClientLoc,unsigned char FakeMoveFlags,unsigned char FakeClientRoll,int FakeView);//APBGame.cAPBDummyPawn.FakeServerMove
	void DoSomeFakeWork(double FakeTimeStamp,FVector3 FakeInAccel,FVector3 FakeClientLoc,unsigned char FakeMoveFlags,unsigned char FakeClientRoll,int FakeView);//APBGame.cAPBDummyPawn.DoSomeFakeWork
	void FakeServerMoveStat_Start();//APBGame.cAPBDummyPawn.FakeServerMoveStat_Start
	void TakeFallingDamage();//APBGame.cAPBDummyPawn.TakeFallingDamage
	void PostBeginPlay();//APBGame.cAPBDummyPawn.PostBeginPlay
	void SleepForRealServerMoveTime();//APBGame.cAPBDummyPawn.SleepForRealServerMoveTime
	void FakeServerMoveStat_End();//APBGame.cAPBDummyPawn.FakeServerMoveStat_End
	void MoveAutonomous(float DeltaTime,unsigned char CompressedFlags,FVector3 newAccel,FRotator DeltaRot);//APBGame.cAPBDummyPawn.MoveAutonomous
	void QuickSetLocation(FVector3 vNewLocation);//APBGame.cAPBDummyPawn.QuickSetLocation
	void FakeServerUpdateViewRotation(int View);//APBGame.cAPBDummyPawn.FakeServerUpdateViewRotation
	class AcItem* RetCurrentItem();//APBGame.cAPBDummyPawn.RetCurrentItem
	void Tick(float DeltaTime);//APBGame.cAPBDummyPawn.Tick
	bool Died(class AController* Killer,class UClass* DamageType,FVector3 HitLocation,int nWeaponType);//APBGame.cAPBDummyPawn.Died
};
UClass* AcAPBDummyPawn::pClassPointer = NULL;

//0x000004 (0x000C68 - 0x000C64)
//cAPBTargetingDummy[0x10351560]
class AcAPBTargetingDummy : public AcAPBPawn
{
public:
	class AcTargetingDummySpawner*                     m_pSpawner;                                       		// 0x000C64 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBTargetingDummy");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cAPBTargetingDummy.ReplicatedEvent
	void DiedCommon(class AController* Killer,class UClass* DamageType,FVector3 HitLocation,int nInventoryItemTypeID);//APBGame.cAPBTargetingDummy.DiedCommon
	void SetupTargetingDummy(class AcTargetingDummySpawner* i_pSpawner);//APBGame.cAPBTargetingDummy.SetupTargetingDummy
};
UClass* AcAPBTargetingDummy::pClassPointer = NULL;

//0x000004 (0x0000CC - 0x0000C8)
//cAPBSeqEvent_TargetingDummy[0x10351430]
class UcAPBSeqEvent_TargetingDummy : public USequenceEvent
{
public:
	class AcAPBTargetingDummy*                         SpawnedPawn;                                      		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSeqEvent_TargetingDummy");
		return pClassPointer;
	};
};
UClass* UcAPBSeqEvent_TargetingDummy::pClassPointer = NULL;

//0x000018 (0x0001F8 - 0x0001E0)
//cInterpComponent[0x10351300]
class UcInterpComponent : public UPrimitiveComponent
{
public:
	class APrefabInstance*                             PrefabInst;                                       		// 0x0001E0 (0x0004)              
	class USeqAct_Interp*                              InterpAction;                                     		// 0x0001E4 (0x0004)              
	class UInterpTrackMove*                            MoveTrack;                                        		// 0x0001E8 (0x0004)              
	class UInterpTrackInstMove*                        MoveInst;                                         		// 0x0001EC (0x0004)              
	unsigned long                                      bPerformedPhysics : 1;                            		// 0x0001F0 (0x0004) [0x00000001] 
	float                                              fTimeShift;                                       		// 0x0001F4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cInterpComponent");
		return pClassPointer;
	};
};
UClass* UcInterpComponent::pClassPointer = NULL;

//0x000058 (0x0002B8 - 0x000260)
//cTargetingDummySpawner[0x103511D0]
class AcTargetingDummySpawner : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                		// 0x000260 (0x0004)              
	class AcAPBTargetingDummy*                         m_pSpawnedPawn;                                   		// 0x000264 (0x0004)              
	class UClass*                                      m_pPawnType;                                      		// 0x000268 (0x0004)              
	class USkeletalMesh*                               m_pSkeletalMesh;                                  		// 0x00026C (0x0004)              
	unsigned char                                      m_eGender;                                        		// 0x000270 (0x0001)              PROPERTY: etGender
	unsigned char                                      m_eFaction;                                       		// 0x000271 (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x000272[0x2];                                   		// 0x000272 (0x0002) MISSED OFFSET
	struct FEnumeratedName                             m_eModifications[0x4];                            		// 0x000274 (0x0040)              
	float                                              m_fRespawnTime;                                   		// 0x0002B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTargetingDummySpawner");
		return pClassPointer;
	};

public:
	void SpawnNewPawn();//APBGame.cTargetingDummySpawner.SpawnNewPawn
};
UClass* AcTargetingDummySpawner::pClassPointer = NULL;

//0x000048 (0x000088 - 0x000040)
//cAnimationDescriptor[0x103510A0]
class UcAnimationDescriptor : public UObject
{
public:
	struct FName                                       m_sAnimationName;                                 		// 0x000040 (0x0008)              
	struct FEnumeratedName                             m_AnimationDescriptorType;                        		// 0x000048 (0x0010)              
	int                                                m_AnimationDesctiptorOrdinal;                     		// 0x000058 (0x0004)              
	TArray<class UAnimSet*>                            m_AnimSets;                                       		// 0x00005C (0x000C)              
	unsigned long                                      m_bUseRootMotion : 1;                             		// 0x000068 (0x0004) [0x00000001] 
	unsigned long                                      m_bSnap : 1;                                      		// 0x000068 (0x0004) [0x00000002] 
	unsigned long                                      m_bPreventMovement : 1;                           		// 0x000068 (0x0004) [0x00000004] 
	unsigned long                                      m_bAllowCancel : 1;                               		// 0x000068 (0x0004) [0x00000008] 
	unsigned long                                      m_bEmote : 1;                                     		// 0x000068 (0x0004) [0x00000010] 
	struct FName                                       m_sUseTagNameOverride;                            		// 0x00006C (0x0008)              
	float                                              m_fPlayRate;                                      		// 0x000074 (0x0004)              
	float                                              m_fBlendInTime;                                   		// 0x000078 (0x0004)              
	float                                              m_fBlendOutTime;                                  		// 0x00007C (0x0004)              
	unsigned char                                      m_eBlendOutToLocomotion;                          		// 0x000080 (0x0001)              PROPERTY: etLocomotionType
	unsigned char                                      _0x000081[0x3];                                   		// 0x000081 (0x0003) MISSED OFFSET
	float                                              m_fCancelImpulse;                                 		// 0x000084 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimationDescriptor");
		return pClassPointer;
	};

public:
	void GetAnimationDescriptorAttributes(struct FAnimationDescriptor* Attribs);//APBGame.cAnimationDescriptor.GetAnimationDescriptorAttributes
};
UClass* UcAnimationDescriptor::pClassPointer = NULL;

//0x00000C (0x000064 - 0x000058)
//cAnimCameraShake[0x10350F70]
class UcAnimCameraShake : public UcAnimCameraNode
{
public:
	int                                                OutDrawY;                                         		// 0x000058 (0x0004)              
	int                                                InDrawY;                                          		// 0x00005C (0x0004)              
	class UAnimNodeSequence*                           ChildNode;                                        		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimCameraShake");
		return pClassPointer;
	};
};
UClass* UcAnimCameraShake::pClassPointer = NULL;

//0x000010 (0x0000F4 - 0x0000E4)
//cAnimNodeBlendAvoidCharacter[0x10350E40]
class UcAnimNodeBlendAvoidCharacter : public UAnimNodeBlendBase
{
public:
	float                                              m_fCurrentRotation;                               		// 0x0000E4 (0x0004)              
	float                                              m_fTargetRotation;                                		// 0x0000E8 (0x0004)              
	float                                              m_fMaxRotationSpeed;                              		// 0x0000EC (0x0004)              
	float                                              m_fMaxRotationResetSpeed;                         		// 0x0000F0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNodeBlendAvoidCharacter");
		return pClassPointer;
	};
};
UClass* UcAnimNodeBlendAvoidCharacter::pClassPointer = NULL;

//0x000004 (0x0000FC - 0x0000F8)
//cAnimNodeLCCustomEject[0x10350D10]
class UcAnimNodeLCCustomEject : public UAnimNodePlayCustomAnim
{
public:
	unsigned long                                      m_bPauseAtEnd : 1;                                		// 0x0000F8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNodeLCCustomEject");
		return pClassPointer;
	};

public:
	void SetPauseAtEnd(bool bPauseAtEnd);//APBGame.cAnimNodeLCCustomEject.SetPauseAtEnd
	void StopCustomAnim(float fBlendOutTime);//APBGame.cAnimNodeLCCustomEject.StopCustomAnim
};
UClass* UcAnimNodeLCCustomEject::pClassPointer = NULL;

//0x000000 (0x0000F8 - 0x0000F8)
//cAnimNodeLCDriverOutside[0x10350BE0]
class UcAnimNodeLCDriverOutside : public UAnimNodePlayCustomAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNodeLCDriverOutside");
		return pClassPointer;
	};
};
UClass* UcAnimNodeLCDriverOutside::pClassPointer = NULL;

//0x000000 (0x0000F8 - 0x0000F8)
//cAnimNodeLCDrivingInside[0x10350AB0]
class UcAnimNodeLCDrivingInside : public UAnimNodePlayCustomAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNodeLCDrivingInside");
		return pClassPointer;
	};
};
UClass* UcAnimNodeLCDrivingInside::pClassPointer = NULL;

//0x000038 (0x000138 - 0x000100)
//cAnimNodePlayEquipmentCSA[0x10350980]
class UcAnimNodePlayEquipmentCSA : public UAnimNodeBlendList
{
public:
	class AcAPBPawn*                                   m_pPawnOwner;                                     		// 0x000100 (0x0004)              
	unsigned char                                      m_eCurrentCSAPhase;                               		// 0x000104 (0x0001)              PROPERTY: etCSAPhase
	unsigned char                                      _0x000105[0x3];                                   		// 0x000105 (0x0003) MISSED OFFSET
	struct FName                                       m_sIntroSequence;                                 		// 0x000108 (0x0008)              
	struct FName                                       m_sOutroSequence;                                 		// 0x000110 (0x0008)              
	TArray<struct FName>                               m_aMainSequences;                                 		// 0x000118 (0x000C)              
	unsigned long                                      m_bUseRootMotion : 1;                             		// 0x000124 (0x0004) [0x00000001] 
	int                                                m_nSeed;                                          		// 0x000128 (0x0004)              
	float                                              m_fOutroBlendTime;                                		// 0x00012C (0x0004)              
	float                                              m_fIntroBlendTime;                                		// 0x000130 (0x0004)              
	float                                              m_fBlendOutTime;                                  		// 0x000134 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNodePlayEquipmentCSA");
		return pClassPointer;
	};

public:
	bool StopEquipmentCSA();//APBGame.cAnimNodePlayEquipmentCSA.StopEquipmentCSA
	void OnEquipmentCSAAnimEnd();//APBGame.cAnimNodePlayEquipmentCSA.OnEquipmentCSAAnimEnd
	void PlayEquipmentCSAOutro();//APBGame.cAnimNodePlayEquipmentCSA.PlayEquipmentCSAOutro
	bool PlayEquipmentCSA(int eEquipmentCSAAnimType,int nSeed);//APBGame.cAnimNodePlayEquipmentCSA.PlayEquipmentCSA
};
UClass* UcAnimNodePlayEquipmentCSA::pClassPointer = NULL;

//0x00001C (0x000114 - 0x0000F8)
//cAnimNodePlayVignette[0x10350850]
class UcAnimNodePlayVignette : public UAnimNodePlayCustomAnim
{
public:
	TArray<struct FtVignetteSequence>                  m_aSequences;                                     		// 0x0000F8 (0x000C)              
	float                                              m_fBlendTime;                                     		// 0x000104 (0x0004)              
	struct FString                                     m_sLastVignetteName;                              		// 0x000108 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNodePlayVignette");
		return pClassPointer;
	};

public:
	void PlayVignette(int nSeed,class UcVignetteDescriptor* Vignette,float fInitialPlaybackPosition);//APBGame.cAnimNodePlayVignette.PlayVignette
	void StopVignette();//APBGame.cAnimNodePlayVignette.StopVignette
};
UClass* UcAnimNodePlayVignette::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//cAnimNotify_Audio[0x10350720]
class UcAnimNotify_Audio : public UAnimNotify_Scripted
{
public:
	struct FEnumeratedName                             AudioEventType;                                   		// 0x000040 (0x0010)              
	float                                              m_fMaxDistance;                                   		// 0x000050 (0x0004)              
	unsigned long                                      m_bIsFootstep : 1;                                		// 0x000054 (0x0004) [0x00000001] 
	int                                                m_iOrdinal;                                       		// 0x000058 (0x0004)              
	struct FString                                     m_strArgument;                                    		// 0x00005C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_Audio");
		return pClassPointer;
	};
};
UClass* UcAnimNotify_Audio::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//cAnimNotify_AudioLCDialogue[0x103505F0]
class UcAnimNotify_AudioLCDialogue : public UAnimNotify_Scripted
{
public:
	struct FEnumeratedName                             AudioEventType;                                   		// 0x000040 (0x0010)              
	int                                                m_nLCDialogueAudioEventTypeOrdinal;               		// 0x000050 (0x0004)              
	float                                              m_fMaxDistance;                                   		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_AudioLCDialogue");
		return pClassPointer;
	};
};
UClass* UcAnimNotify_AudioLCDialogue::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//cAnimNotify_AudioLoc[0x103504C0]
class UcAnimNotify_AudioLoc : public UAnimNotify_Scripted
{
public:
	struct FEnumeratedName                             AudioEventType;                                   		// 0x000040 (0x0010)              
	int                                                m_nAudioLocAudioEventTypeOrdinal;                 		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_AudioLoc");
		return pClassPointer;
	};
};
UClass* UcAnimNotify_AudioLoc::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAnimNotify_DoorFullyOpen[0x10350390]
class UcAnimNotify_DoorFullyOpen : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_DoorFullyOpen");
		return pClassPointer;
	};
};
UClass* UcAnimNotify_DoorFullyOpen::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//cAnimNotify_HeldObjectAnimation[0x10350260]
class UcAnimNotify_HeldObjectAnimation : public UAnimNotify
{
public:
	class AActor*                                      m_Archetype;                                      		// 0x000040 (0x0004)              
	struct FName                                       m_sSocketName;                                    		// 0x000044 (0x0008)              
	struct FName                                       m_sAnimationName;                                 		// 0x00004C (0x0008)              
	unsigned long                                      m_bAnimationLooping : 1;                          		// 0x000054 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_HeldObjectAnimation");
		return pClassPointer;
	};
};
UClass* UcAnimNotify_HeldObjectAnimation::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAnimNotify_LookAtDisable[0x10350130]
class UcAnimNotify_LookAtDisable : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_LookAtDisable");
		return pClassPointer;
	};
};
UClass* UcAnimNotify_LookAtDisable::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAnimNotify_LookAtEnable[0x10350000]
class UcAnimNotify_LookAtEnable : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_LookAtEnable");
		return pClassPointer;
	};
};
UClass* UcAnimNotify_LookAtEnable::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAnimNotifyActiveInterface[0x1038FE20]
class UcAnimNotifyActiveInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyActiveInterface");
		return pClassPointer;
	};

public:
	void NotifyActive(bool bIsEditorPreview);//APBGame.cAnimNotifyActiveInterface.NotifyActive
	void NotifyInactive();//APBGame.cAnimNotifyActiveInterface.NotifyInactive
};
UClass* UcAnimNotifyActiveInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAnimNotifyLogical_CarDoorRequest[0x1038FCF0]
class UcAnimNotifyLogical_CarDoorRequest : public UcAnimNotifyLogical
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyLogical_CarDoorRequest");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotifyLogical_CarDoorRequest.Notify
};
UClass* UcAnimNotifyLogical_CarDoorRequest::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//cAnimNotifyLogical_ContactPoint[0x1038FBC0]
class UcAnimNotifyLogical_ContactPoint : public UcAnimNotifyLogical
{
public:
	struct FName                                       m_sContactBoneName;                               		// 0x000040 (0x0008)              
	FVector3                                           m_RootMotionOffset;                               		// 0x000048 (0x000C)              
	FVector3                                           m_ConstantOffset;                                 		// 0x000054 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyLogical_ContactPoint");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotifyLogical_ContactPoint.Notify
};
UClass* UcAnimNotifyLogical_ContactPoint::pClassPointer = NULL;

//0x000001 (0x000041 - 0x000040)
//cAnimNotifyLogical_CSA[0x1038FA90]
class UcAnimNotifyLogical_CSA : public UcAnimNotifyLogical
{
public:
	unsigned char                                      m_eCSAAnimEvent;                                  		// 0x000040 (0x0001)              PROPERTY: etCSAAnimEvent

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyLogical_CSA");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotifyLogical_CSA.Notify
};
UClass* UcAnimNotifyLogical_CSA::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//cAnimNotifyLogical_RMThreshold[0x1038F960]
class UcAnimNotifyLogical_RMThreshold : public UcAnimNotifyLogical
{
public:
	FVector3                                           RootMotionThreshold;                              		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyLogical_RMThreshold");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotifyLogical_RMThreshold.Notify
};
UClass* UcAnimNotifyLogical_RMThreshold::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//cAnimNotifyPeriod[0x1038F830]
class UcAnimNotifyPeriod : public UAnimNotify
{
public:
	float                                              m_fDuration;                                      		// 0x000040 (0x0004)              
	unsigned long                                      m_bEntireSequence : 1;                            		// 0x000044 (0x0004) [0x00000001] 
	unsigned long                                      m_bEndPeriodOnBlendOut : 1;                       		// 0x000044 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyPeriod");
		return pClassPointer;
	};
};
UClass* UcAnimNotifyPeriod::pClassPointer = NULL;

//0x000010 (0x000058 - 0x000048)
//cAnimNotifyPeriod_HeightAdjustment[0x1038F700]
class UcAnimNotifyPeriod_HeightAdjustment : public UcAnimNotifyPeriod
{
public:
	struct FName                                       m_sMatchBoneName;                                 		// 0x000048 (0x0008)              
	float                                              m_fEaseInTime;                                    		// 0x000050 (0x0004)              
	float                                              m_fEaseOutTime;                                   		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyPeriod_HeightAdjustment");
		return pClassPointer;
	};
};
UClass* UcAnimNotifyPeriod_HeightAdjustment::pClassPointer = NULL;

//0x000018 (0x000060 - 0x000048)
//cAnimNotifyPeriod_HeldObject[0x1038F5D0]
class UcAnimNotifyPeriod_HeldObject : public UcAnimNotifyPeriod
{
public:
	class AActor*                                      m_Archetype;                                      		// 0x000048 (0x0004)              
	struct FName                                       m_sSocketName;                                    		// 0x00004C (0x0008)              
	struct FName                                       m_sAnimationName;                                 		// 0x000054 (0x0008)              
	unsigned long                                      m_bAnimationLooping : 1;                          		// 0x00005C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyPeriod_HeldObject");
		return pClassPointer;
	};
};
UClass* UcAnimNotifyPeriod_HeldObject::pClassPointer = NULL;

//0x000000 (0x000048 - 0x000048)
//cAnimNotifyPeriod_HideAttachedItem[0x1038F4A0]
class UcAnimNotifyPeriod_HideAttachedItem : public UcAnimNotifyPeriod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyPeriod_HideAttachedItem");
		return pClassPointer;
	};
};
UClass* UcAnimNotifyPeriod_HideAttachedItem::pClassPointer = NULL;

//0x000000 (0x000048 - 0x000048)
//cAnimNotifyPeriod_HideWeaponClip[0x1038F370]
class UcAnimNotifyPeriod_HideWeaponClip : public UcAnimNotifyPeriod
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyPeriod_HideWeaponClip");
		return pClassPointer;
	};
};
UClass* UcAnimNotifyPeriod_HideWeaponClip::pClassPointer = NULL;

//0x000021 (0x000069 - 0x000048)
//cAnimNotifyPeriod_IK[0x1038F240]
class UcAnimNotifyPeriod_IK : public UcAnimNotifyPeriod
{
public:
	struct FName                                       SkelControlName;                                  		// 0x000048 (0x0008)              
	struct FtIKStrategySetting                         Setting;                                          		// 0x000050 (0x0018)              
	unsigned char                                      m_Strategy;                                       		// 0x000068 (0x0001)              PROPERTY: etIKStrategy

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyPeriod_IK");
		return pClassPointer;
	};
};
UClass* UcAnimNotifyPeriod_IK::pClassPointer = NULL;

//0x000014 (0x00005C - 0x000048)
//cAnimNotifyPeriod_ShowAttachedItem[0x1038F110]
class UcAnimNotifyPeriod_ShowAttachedItem : public UcAnimNotifyPeriod
{
public:
	struct FName                                       m_sSocketName;                                    		// 0x000048 (0x0008)              
	struct FName                                       m_sAnimationName;                                 		// 0x000050 (0x0008)              
	unsigned long                                      m_bAnimationLooping : 1;                          		// 0x000058 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyPeriod_ShowAttachedItem");
		return pClassPointer;
	};
};
UClass* UcAnimNotifyPeriod_ShowAttachedItem::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAnimProfileInterface[0x1038EFE0]
class UcAnimProfileInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimProfileInterface");
		return pClassPointer;
	};

public:
	struct FName RetActiveProfileName();//APBGame.cAnimProfileInterface.RetActiveProfileName
	void SetActiveProfileByName(struct FName sNewProfileName);//APBGame.cAnimProfileInterface.SetActiveProfileByName
};
UClass* UcAnimProfileInterface::pClassPointer = NULL;

//0x000010 (0x000110 - 0x000100)
//cAPBAnimNodeActionState[0x1038EEB0]
class UcAPBAnimNodeActionState : public UAnimNodeBlendList
{
public:
	float                                              m_fTransitionTime;                                		// 0x000100 (0x0004)              
	float                                              m_fTransitionTimeOut;                             		// 0x000104 (0x0004)              
	unsigned long                                      m_bAllowStrafingWithoutAWeapon : 1;               		// 0x000108 (0x0004) [0x00000001] 
	unsigned long                                      m_bIsWeapon : 1;                                  		// 0x000108 (0x0004) [0x00000002] 
	int                                                m_nPreviousItemType;                              		// 0x00010C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeActionState");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeActionState::pClassPointer = NULL;

//0x00001C (0x00011C - 0x000100)
//cAPBAnimNodeAim360[0x1038ED80]
class UcAPBAnimNodeAim360 : public UAnimNodeBlendList
{
public:
	float                                              m_InterpolateSpeed;                               		// 0x000100 (0x0004)              
	float                                              m_fTransitionTime;                                		// 0x000104 (0x0004)              
	float                                              m_fTransitionTimeLeft;                            		// 0x000108 (0x0004)              
	FRotator                                           Aim;                                              		// 0x00010C (0x000C)              
	unsigned long                                      m_IsActive : 1;                                   		// 0x000118 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeAim360");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeAim360::pClassPointer = NULL;

//0x000014 (0x000140 - 0x00012C)
//cAPBAnimNodeAimOffsetAnimSetProfile[0x1038EC50]
class UcAPBAnimNodeAimOffsetAnimSetProfile : public UAnimNodeAimOffset
{
public:
	DWORD                                              VfTable_IcAnimProfileInterface;                   		// 0x00012C (0x0004)              
	struct FName                                       ProfileName;                                      		// 0x000130 (0x0008)              
	class UAnimSet*                                    m_pAnimSet;                                       		// 0x000138 (0x0004)              
	int                                                m_nCurrentProfileIndex;                           		// 0x00013C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeAimOffsetAnimSetProfile");
		return pClassPointer;
	};

public:
	struct FName RetActiveProfileName();//APBGame.cAPBAnimNodeAimOffsetAnimSetProfile.RetActiveProfileName
	void SetActiveProfileByName(struct FName sNewProfileName);//APBGame.cAPBAnimNodeAimOffsetAnimSetProfile.SetActiveProfileByName
};
UClass* UcAPBAnimNodeAimOffsetAnimSetProfile::pClassPointer = NULL;

//0x000020 (0x000160 - 0x000140)
//cAPBAnimNodeAimOffset[0x1038EB20]
class UcAPBAnimNodeAimOffset : public UcAPBAnimNodeAimOffsetAnimSetProfile
{
public:
	FVector2                                           m_MaximumRange;                                   		// 0x000140 (0x0008)              
	float                                              m_InterpolateSpeed;                               		// 0x000148 (0x0004)              
	unsigned long                                      m_bClamp : 1;                                     		// 0x00014C (0x0004) [0x00000001] 
	unsigned long                                      m_bDoAimLeanCompensation : 1;                     		// 0x00014C (0x0004) [0x00000002] 
	unsigned long                                      m_bWasZeroed : 1;                                 		// 0x00014C (0x0004) [0x00000004] 
	unsigned long                                      m_bInterpolating : 1;                             		// 0x00014C (0x0004) [0x00000008] 
	float                                              m_fLeanRightStandingOffset;                       		// 0x000150 (0x0004)              
	float                                              m_fLeanRightCrouchingOffset;                      		// 0x000154 (0x0004)              
	float                                              m_fLeanLeftStandingOffset;                        		// 0x000158 (0x0004)              
	float                                              m_fLeanLeftCrouchingOffset;                       		// 0x00015C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeAimOffset");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeAimOffset::pClassPointer = NULL;

//0x000009 (0x000149 - 0x000140)
//cAPBAnimNodeAimOffsetLean[0x1038E9F0]
class UcAPBAnimNodeAimOffsetLean : public UcAPBAnimNodeAimOffsetAnimSetProfile
{
public:
	float                                              m_fInterpolateSpeed;                              		// 0x000140 (0x0004)              
	float                                              m_fInterpolateSpeedUse;                           		// 0x000144 (0x0004)              
	unsigned char                                      m_eLastLean;                                      		// 0x000148 (0x0001)              PROPERTY: etCharacterLeanState

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeAimOffsetLean");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeAimOffsetLean::pClassPointer = NULL;

//0x000008 (0x000108 - 0x000100)
//cAPBAnimNodeArrested[0x1038E8C0]
class UcAPBAnimNodeArrested : public UAnimNodeBlendList
{
public:
	float                                              m_fTransitionTime;                                		// 0x000100 (0x0004)              
	float                                              m_fTransitionTimeOut;                             		// 0x000104 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeArrested");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeArrested::pClassPointer = NULL;

//0x000010 (0x000110 - 0x000100)
//cAPBAnimNodeBlendByStamina[0x1038E790]
class UcAPBAnimNodeBlendByStamina : public UAnimNodeBlendList
{
public:
	float                                              m_fTransitionTime;                                		// 0x000100 (0x0004)              
	TArray<float>                                      m_afBlendPercent;                                 		// 0x000104 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeBlendByStamina");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeBlendByStamina::pClassPointer = NULL;

//0x00001C (0x00011C - 0x000100)
//cAPBAnimNodeBlendByWalkType[0x1038E660]
class UcAPBAnimNodeBlendByWalkType : public UAnimNodeBlendList
{
public:
	int                                                LastChannel;                                      		// 0x000100 (0x0004)              
	float                                              BlendUpTime;                                      		// 0x000104 (0x0004)              
	float                                              BlendDownTime;                                    		// 0x000108 (0x0004)              
	float                                              BlendDownPerc;                                    		// 0x00010C (0x0004)              
	float                                              MaxIdleSpeedSquared;                              		// 0x000110 (0x0004)              
	float                                              MaxWalkSpeedSquared;                              		// 0x000114 (0x0004)              
	float                                              MaxRunSpeedSquared;                               		// 0x000118 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeBlendByWalkType");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeBlendByWalkType::pClassPointer = NULL;

//0x000014 (0x000114 - 0x000100)
//cAPBAnimNodeBlendContactState[0x1038E530]
class UcAPBAnimNodeBlendContactState : public UAnimNodeBlendList
{
public:
	class AcContact*                                   m_Contact;                                        		// 0x000100 (0x0004)              
	unsigned char                                      m_eContactInteractionState;                       		// 0x000104 (0x0001)              PROPERTY: etContactInteractionState
	unsigned char                                      _0x000105[0x3];                                   		// 0x000105 (0x0003) MISSED OFFSET
	TArray<float>                                      BlendTime;                                        		// 0x000108 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeBlendContactState");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeBlendContactState::pClassPointer = NULL;

//0x000000 (0x0000F4 - 0x0000F4)
//cAPBAnimNodeBlendDirectional[0x1038E400]
class UcAPBAnimNodeBlendDirectional : public UAnimNodeBlendDirectional
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeBlendDirectional");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeBlendDirectional::pClassPointer = NULL;

//0x000004 (0x000104 - 0x000100)
//cAPBAnimNodeBlendFootShuffle[0x1038E2D0]
class UcAPBAnimNodeBlendFootShuffle : public UAnimNodeBlendList
{
public:
	float                                              TransitionTime;                                   		// 0x000100 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeBlendFootShuffle");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeBlendFootShuffle::pClassPointer = NULL;

//0x00000C (0x00010C - 0x000100)
//cAPBAnimNodeBlendList[0x1038E1A0]
class UcAPBAnimNodeBlendList : public UAnimNodeBlendList
{
public:
	int                                                m_nIndexInParentList;                             		// 0x000100 (0x0004)              
	int                                                m_nPlayCount;                                     		// 0x000104 (0x0004)              
	unsigned long                                      m_bWarnAnimInterruptions : 1;                     		// 0x000108 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeBlendList");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeBlendList::pClassPointer = NULL;

//0x000014 (0x00012C - 0x000118)
//cAPBAnimNodeBlendPerBone[0x1038E070]
class UcAPBAnimNodeBlendPerBone : public UAnimNodeBlendPerBone
{
public:
	DWORD                                              VfTable_IcAnimProfileInterface;                   		// 0x000118 (0x0004)              
	int                                                m_nProfileIndex;                                  		// 0x00011C (0x0004)              
	TArray<struct FtPerBoneProfile>                    m_aProfiles;                                      		// 0x000120 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeBlendPerBone");
		return pClassPointer;
	};

public:
	struct FName RetActiveProfileName();//APBGame.cAPBAnimNodeBlendPerBone.RetActiveProfileName
	void SetActiveProfileByName(struct FName sProfileName);//APBGame.cAPBAnimNodeBlendPerBone.SetActiveProfileByName
};
UClass* UcAPBAnimNodeBlendPerBone::pClassPointer = NULL;

//0x000004 (0x0000FC - 0x0000F8)
//cAPBAnimNodeCarAction[0x1038DF40]
class UcAPBAnimNodeCarAction : public UAnimNodePlayCustomAnim
{
public:
	unsigned long                                      m_bPauseAtEnd : 1;                                		// 0x0000F8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeCarAction");
		return pClassPointer;
	};

public:
	void SetPauseAtEnd(bool bPauseAtEnd);//APBGame.cAPBAnimNodeCarAction.SetPauseAtEnd
	void StopCustomAnim(float fBlendOutTime);//APBGame.cAPBAnimNodeCarAction.StopCustomAnim
};
UClass* UcAPBAnimNodeCarAction::pClassPointer = NULL;

//0x000028 (0x000128 - 0x000100)
//cAPBAnimNodeCombatAction[0x1038DE10]
class UcAPBAnimNodeCombatAction : public UAnimNodeBlendList
{
public:
	DWORD                                              VfTable_IcAnimProfileInterface;                   		// 0x000100 (0x0004)              
	float                                              m_fTransitionTime;                                		// 0x000104 (0x0004)              
	float                                              m_fTransitionTimeOut;                             		// 0x000108 (0x0004)              
	int                                                m_nProfileIndex;                                  		// 0x00010C (0x0004)              
	TArray<struct FtCombatActionProfile>               m_aProfiles;                                      		// 0x000110 (0x000C)              
	class UcAPBAnimNodeActionSequence*                 m_ActionSequence;                                 		// 0x00011C (0x0004)              
	unsigned long                                      m_bPlaying : 1;                                   		// 0x000120 (0x0004) [0x00000001] 
	int                                                m_nCurrentSwingType;                              		// 0x000124 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeCombatAction");
		return pClassPointer;
	};

public:
	struct FName RetActiveProfileName();//APBGame.cAPBAnimNodeCombatAction.RetActiveProfileName
	bool RetIsPlaying();//APBGame.cAPBAnimNodeCombatAction.RetIsPlaying
	void SetActiveProfileByName(struct FName sProfileName);//APBGame.cAPBAnimNodeCombatAction.SetActiveProfileByName
	void PlayThrowAnimation();//APBGame.cAPBAnimNodeCombatAction.PlayThrowAnimation
	void PlayFireAnimation();//APBGame.cAPBAnimNodeCombatAction.PlayFireAnimation
	void PlayPinPullAnimation();//APBGame.cAPBAnimNodeCombatAction.PlayPinPullAnimation
};
UClass* UcAPBAnimNodeCombatAction::pClassPointer = NULL;

//0x000000 (0x0000E4 - 0x0000E4)
//cAPBAnimNodeCrouched[0x1038DCE0]
class UcAPBAnimNodeCrouched : public UAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeCrouched");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeCrouched::pClassPointer = NULL;

//0x000008 (0x000108 - 0x000100)
//cAPBAnimNodeDecision[0x1038DBB0]
class UcAPBAnimNodeDecision : public UAnimNodeBlendList
{
public:
	DWORD                                              VfTable_IcAnimNotifyActiveInterface;              		// 0x000100 (0x0004)              
	unsigned long                                      m_bDecisionRoot : 1;                              		// 0x000104 (0x0004) [0x00000001] 
	unsigned long                                      m_bActive : 1;                                    		// 0x000104 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeDecision");
		return pClassPointer;
	};

public:
	void NotifyInactive();//APBGame.cAPBAnimNodeDecision.NotifyInactive
	void SetActiveChild(int iChildIndex,float fBlendTime);//APBGame.cAPBAnimNodeDecision.SetActiveChild
	void NotifyActive(bool bIsEditorPreview);//APBGame.cAPBAnimNodeDecision.NotifyActive
};
UClass* UcAPBAnimNodeDecision::pClassPointer = NULL;

//0x000018 (0x000120 - 0x000108)
//cAPBAnimNodeDecisionFromSDD[0x1038DA80]
class UcAPBAnimNodeDecisionFromSDD : public UcAPBAnimNodeDecision
{
public:
	float                                              m_fTransitionTime;                                		// 0x000108 (0x0004)              
	TArray<struct FEnumeratedName>                     m_aeCurrentMapping;                               		// 0x00010C (0x000C)              
	int                                                m_iDecisionNone;                                  		// 0x000118 (0x0004)              
	int                                                m_iDecisionInvalid;                               		// 0x00011C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeDecisionFromSDD");
		return pClassPointer;
	};

public:
	struct FName GetDecisionName();//APBGame.cAPBAnimNodeDecisionFromSDD.GetDecisionName
};
UClass* UcAPBAnimNodeDecisionFromSDD::pClassPointer = NULL;

//0x000000 (0x000120 - 0x000120)
//cAPBAnimNodeDecisionEquippedItem[0x1038D950]
class UcAPBAnimNodeDecisionEquippedItem : public UcAPBAnimNodeDecisionFromSDD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeDecisionEquippedItem");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeDecisionEquippedItem::pClassPointer = NULL;

//0x000000 (0x000120 - 0x000120)
//cAPBAnimNodeDecisionFaction[0x1038D820]
class UcAPBAnimNodeDecisionFaction : public UcAPBAnimNodeDecisionFromSDD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeDecisionFaction");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeDecisionFaction::pClassPointer = NULL;

//0x000000 (0x000120 - 0x000120)
//cAPBAnimNodeDecisionTaskItem[0x1038D6F0]
class UcAPBAnimNodeDecisionTaskItem : public UcAPBAnimNodeDecisionFromSDD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeDecisionTaskItem");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeDecisionTaskItem::pClassPointer = NULL;

//0x000000 (0x000120 - 0x000120)
//cAPBAnimNodeDecisionVehicle[0x1038D5C0]
class UcAPBAnimNodeDecisionVehicle : public UcAPBAnimNodeDecisionFromSDD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeDecisionVehicle");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeDecisionVehicle::pClassPointer = NULL;

//0x000010 (0x0000F4 - 0x0000E4)
//cAPBAnimNodeExhausted[0x1038D490]
class UcAPBAnimNodeExhausted : public UAnimNodeBlendBase
{
public:
	float                                              StaminaPercent;                                   		// 0x0000E4 (0x0004)              
	float                                              BlendTime;                                        		// 0x0000E8 (0x0004)              
	unsigned long                                      bExhaustedWhenMoving : 1;                         		// 0x0000EC (0x0004) [0x00000001] 
	float                                              QuickBlendTimeToGo;                               		// 0x0000F0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeExhausted");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeExhausted::pClassPointer = NULL;

//0x000000 (0x0000E4 - 0x0000E4)
//cAPBAnimNodeFalling[0x1038D360]
class UcAPBAnimNodeFalling : public UAnimNodeBlendBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeFalling");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeFalling::pClassPointer = NULL;

//0x000008 (0x000108 - 0x000100)
//cAPBAnimNodeInCar[0x1038D230]
class UcAPBAnimNodeInCar : public UAnimNodeBlendList
{
public:
	unsigned char                                      m_eVehicleSetupType;                              		// 0x000100 (0x0001)              PROPERTY: etVehicleSetupType
	unsigned char                                      m_eVehiclePositionIndex;                          		// 0x000101 (0x0001)              PROPERTY: etVehiclePositionIndex
	unsigned char                                      _0x000102[0x2];                                   		// 0x000102 (0x0002) MISSED OFFSET
	unsigned long                                      m_bMirror : 1;                                    		// 0x000104 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeInCar");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeInCar::pClassPointer = NULL;

//0x000008 (0x000108 - 0x000100)
//cAPBAnimNodeInterruption[0x1038D100]
class UcAPBAnimNodeInterruption : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x000100 (0x0004)              
	unsigned long                                      bWasStunnedRecovery : 1;                          		// 0x000104 (0x0004) [0x00000001] 
	unsigned long                                      bWasHeavyLanding : 1;                             		// 0x000104 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeInterruption");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeInterruption::pClassPointer = NULL;

//0x000004 (0x000104 - 0x000100)
//cAPBAnimNodeJump[0x1038CFD0]
class UcAPBAnimNodeJump : public UAnimNodeBlendList
{
public:
	float                                              BlendTime;                                        		// 0x000100 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeJump");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeJump::pClassPointer = NULL;

//0x000004 (0x000104 - 0x000100)
//cAPBAnimNodeLocomotionState[0x1038CEA0]
class UcAPBAnimNodeLocomotionState : public UAnimNodeBlendList
{
public:
	float                                              m_fTransitionTime;                                		// 0x000100 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeLocomotionState");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeLocomotionState::pClassPointer = NULL;

//0x000004 (0x000118 - 0x000114)
//cAPBAnimNodeRandomIdle[0x1038CD70]
class UcAPBAnimNodeRandomIdle : public UAnimNodeRandom
{
public:
	int                                                MainIdleIndex;                                    		// 0x000114 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeRandomIdle");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeRandomIdle::pClassPointer = NULL;

//0x00001C (0x000100 - 0x0000E4)
//cAPBAnimNodeSelectSequences[0x1038CC40]
class UcAPBAnimNodeSelectSequences : public UAnimNodeBlendBase
{
public:
	DWORD                                              VfTable_IcAnimNotifyActiveInterface;              		// 0x0000E4 (0x0004)              
	DWORD                                              VfTable_IcAnimProfileInterface;                   		// 0x0000E8 (0x0004)              
	int                                                m_nProfileIndex;                                  		// 0x0000EC (0x0004)              
	TArray<struct FtSelectSequencesProfile>            m_aProfiles;                                      		// 0x0000F0 (0x000C)              
	unsigned long                                      m_bActive : 1;                                    		// 0x0000FC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeSelectSequences");
		return pClassPointer;
	};

public:
	void SetActiveProfileByName(struct FName sProfileName);//APBGame.cAPBAnimNodeSelectSequences.SetActiveProfileByName
	void NotifyInactive();//APBGame.cAPBAnimNodeSelectSequences.NotifyInactive
	void NotifyActive(bool bIsEditorPreview);//APBGame.cAPBAnimNodeSelectSequences.NotifyActive
	struct FName RetActiveProfileName();//APBGame.cAPBAnimNodeSelectSequences.RetActiveProfileName
};
UClass* UcAPBAnimNodeSelectSequences::pClassPointer = NULL;

//0x000036 (0x000158 - 0x000122)
//cAPBAnimNodeSequence[0x1038CB10]
class UcAPBAnimNodeSequence : public UAnimNodeSequence
{
public:
	unsigned char                                      _0x000122[0x2];                                   		// 0x000122 (0x0002) MISSED OFFSET
	DWORD                                              VfTable_IcAnimProfileInterface;                   		// 0x000124 (0x0004)              
	class UAnimSequence*                               m_PrevAnimSeq;                                    		// 0x000128 (0x0004)              
	int                                                m_PrevAnimLinkupIndex;                            		// 0x00012C (0x0004)              
	float                                              m_fPrevAnimCurrentTime;                           		// 0x000130 (0x0004)              
	float                                              m_fPrevAnimWeight;                                		// 0x000134 (0x0004)              
	double                                             m_fAnimChangeGlobalTime;                          		// 0x000138 (0x0008)              
	float                                              m_fContextBlendTime;                              		// 0x000140 (0x0004)              
	unsigned long                                      m_bEndAnimWhenBlendOut : 1;                       		// 0x000144 (0x0004) [0x00000001] 
	unsigned long                                      RestartOnBecomeRelevant : 1;                      		// 0x000144 (0x0004) [0x00000002] 
	TArray<class UcAnimNotifyPeriod*>                  m_aPeriods;                                       		// 0x000148 (0x000C)              
	float                                              HeadAimLeanScale;                                 		// 0x000154 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeSequence");
		return pClassPointer;
	};

public:
	struct FName RetActiveProfileName();//APBGame.cAPBAnimNodeSequence.RetActiveProfileName
	void SetActiveProfileByName(struct FName sNewProfileName);//APBGame.cAPBAnimNodeSequence.SetActiveProfileByName
	void SetAnim(struct FName sSeqName);//APBGame.cAPBAnimNodeSequence.SetAnim
};
UClass* UcAPBAnimNodeSequence::pClassPointer = NULL;

//0x000018 (0x000170 - 0x000158)
//cAPBAnimNodeActionSequence[0x1038C9E0]
class UcAPBAnimNodeActionSequence : public UcAPBAnimNodeSequence
{
public:
	struct FName                                       CrouchedAnimSeqName;                              		// 0x000158 (0x0008)              
	class UAnimSequence*                               CrouchedAnimSeq;                                  		// 0x000160 (0x0004)              
	int                                                CrouchedAnimLinkupIndex;                          		// 0x000164 (0x0004)              
	class UAnimSequence*                               PrevCrouchedAnimSeq;                              		// 0x000168 (0x0004)              
	int                                                PrevCrouchedAnimLinkupIndex;                      		// 0x00016C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeActionSequence");
		return pClassPointer;
	};

public:
	void SetActionAnim(struct FName sSeqName,struct FName sCrouchedSeqName);//APBGame.cAPBAnimNodeActionSequence.SetActionAnim
};
UClass* UcAPBAnimNodeActionSequence::pClassPointer = NULL;

//0x000008 (0x000160 - 0x000158)
//cAPBAnimNodeSteeringScrub[0x1038C8B0]
class UcAPBAnimNodeSteeringScrub : public UcAPBAnimNodeSequence
{
public:
	float                                              m_fInterpolateSpeed;                              		// 0x000158 (0x0004)              
	float                                              m_fRangeDegrees;                                  		// 0x00015C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeSteeringScrub");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNodeSteeringScrub::pClassPointer = NULL;

//0x00005C (0x00015C - 0x000100)
//cAPBAnimNodeUpperBodyAction[0x1038C780]
class UcAPBAnimNodeUpperBodyAction : public UAnimNodeBlendList
{
public:
	DWORD                                              VfTable_IcAnimProfileInterface;                   		// 0x000100 (0x0004)              
	float                                              m_fTransitionTime;                                		// 0x000104 (0x0004)              
	float                                              m_fTransitionTimeOut;                             		// 0x000108 (0x0004)              
	float                                              m_fTransitionBodySplit;                           		// 0x00010C (0x0004)              
	struct FName                                       m_sSwitchToUnarmedStanding;                       		// 0x000110 (0x0008)              
	struct FName                                       m_sSwitchToUnarmedCrouched;                       		// 0x000118 (0x0008)              
	struct FtUpperBodyActionWeaponAnimation            m_SwitchToUnarmed;                                		// 0x000120 (0x001C)              
	int                                                m_nProfileIndex;                                  		// 0x00013C (0x0004)              
	TArray<struct FtUpperBodyActionProfile>            m_aProfiles;                                      		// 0x000140 (0x000C)              
	class UcAPBAnimNodeActionSequence*                 m_ActionSequence;                                 		// 0x00014C (0x0004)              
	int                                                m_eEquippedInventoryItemType;                     		// 0x000150 (0x0004)              
	unsigned long                                      m_bEquippedItemIsWeapon : 1;                      		// 0x000154 (0x0004) [0x00000001] 
	unsigned long                                      m_bIsPlayingCosmeticReequip : 1;                  		// 0x000154 (0x0004) [0x00000002] 
	float                                              m_fPreviousTransitionTimeOut;                     		// 0x000158 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeUpperBodyAction");
		return pClassPointer;
	};

public:
	void SetActiveProfileByName(struct FName sProfileName);//APBGame.cAPBAnimNodeUpperBodyAction.SetActiveProfileByName
	struct FName RetActiveProfileName();//APBGame.cAPBAnimNodeUpperBodyAction.RetActiveProfileName
};
UClass* UcAPBAnimNodeUpperBodyAction::pClassPointer = NULL;

//0x000018 (0x0000FC - 0x0000E4)
//cAPBAnimNodeVehicleDoors[0x1038C650]
class UcAPBAnimNodeVehicleDoors : public UAnimNodeBlendBase
{
public:
	TArray<struct FtDoor>                              m_aDoors;                                         		// 0x0000E4 (0x000C)              
	TArray<int>                                        m_anPerBoneSource;                                		// 0x0000F0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNodeVehicleDoors");
		return pClassPointer;
	};

public:
	void AnimateDoorClosed(unsigned char eVehiclePositionIndex);//APBGame.cAPBAnimNodeVehicleDoors.AnimateDoorClosed
	void PlayDoorAnimation(unsigned char eVehiclePositionIndex,unsigned char eDoorInteractionAnimation,bool bReTriggerIfAlreadyPlaying,float fRate);//APBGame.cAPBAnimNodeVehicleDoors.PlayDoorAnimation
	void OpenDoorNotifyReached(unsigned char eVehiclePositionIndex);//APBGame.cAPBAnimNodeVehicleDoors.OpenDoorNotifyReached
};
UClass* UcAPBAnimNodeVehicleDoors::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//cAPBSkelControlEyes[0x1038C520]
class UcAPBSkelControlEyes : public USkelControlSingleBone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSkelControlEyes");
		return pClassPointer;
	};
};
UClass* UcAPBSkelControlEyes::pClassPointer = NULL;

//0x000008 (0x0000D0 - 0x0000C8)
//cAPBSkelControlLimb[0x1038C3F0]
class UcAPBSkelControlLimb : public USkelControlLimb
{
public:
	unsigned char                                      SideOfTheBody;                                    		// 0x0000C8 (0x0001)              PROPERTY: etSideOfTheBody
	unsigned char                                      _0x0000C9[0x3];                                   		// 0x0000C9 (0x0003) MISSED OFFSET
	unsigned long                                      bFixTwistBone : 1;                                		// 0x0000CC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSkelControlLimb");
		return pClassPointer;
	};
};
UClass* UcAPBSkelControlLimb::pClassPointer = NULL;

//0x0000B8 (0x000188 - 0x0000D0)
//cAPBSkelControlLimbStrategy[0x1038C2C0]
class UcAPBSkelControlLimbStrategy : public UcAPBSkelControlLimb
{
public:
	struct FtIKStrategySetting                         m_DefaultSetting;                                 		// 0x0000D0 (0x0018)              
	struct FtIKStrategySetting                         m_AimedSetting;                                   		// 0x0000E8 (0x0018)              
	float                                              m_fBlendTime;                                     		// 0x000100 (0x0004)              
	TArray<class UcAnimNotifyPeriod_IK*>               m_aStrategyStack;                                 		// 0x000104 (0x000C)              
	unsigned long                                      m_bUseAimedSetting : 1;                           		// 0x000110 (0x0004) [0x00000001] 
	struct FtIKStrategySetting                         m_BlendOutSetting;                                		// 0x000114 (0x0018)              
	float                                              m_fBlendOutWeight;                                		// 0x00012C (0x0004)              
	float                                              m_fBlendOutTimeToGo;                              		// 0x000130 (0x0004)              
	unsigned char                                      CachedStrategy;                                   		// 0x000134 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000135[0x3];                                   		// 0x000135 (0x0003) MISSED OFFSET
	struct FName                                       CachedVehicleSocket;                              		// 0x000138 (0x0008)              
	FMatrix                                            CachedVehicleTransform;                           		// 0x000140 (0x0040)              
	class USkeletalMeshComponent*                      CachedVehicle;                                    		// 0x000180 (0x0004)              
	class AcAPBPawn*                                   CachedVehiclePawn;                                		// 0x000184 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSkelControlLimbStrategy");
		return pClassPointer;
	};

public:
	void DebugGetSetting(struct FtIKStrategySetting* Setting,class UcAnimNotifyPeriod_IK** notifier);//APBGame.cAPBSkelControlLimbStrategy.DebugGetSetting
};
UClass* UcAPBSkelControlLimbStrategy::pClassPointer = NULL;

//0x000000 (0x000098 - 0x000098)
//cAPBSkelControlTwistBoneHACK[0x1038C190]
class UcAPBSkelControlTwistBoneHACK : public USkelControlBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSkelControlTwistBoneHACK");
		return pClassPointer;
	};
};
UClass* UcAPBSkelControlTwistBoneHACK::pClassPointer = NULL;

//0x000004 (0x0001E4 - 0x0001E0)
//cEdgeHighlightComponent[0x1038C060]
class UcEdgeHighlightComponent : public UPrimitiveComponent
{
public:
	class AcAnimationDrivenTrigger*                    m_Trigger;                                        		// 0x0001E0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEdgeHighlightComponent");
		return pClassPointer;
	};
};
UClass* UcEdgeHighlightComponent::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cHeightAdjustmentNode[0x1038BF30]
class UcHeightAdjustmentNode : public UObject
{
public:
	struct FName                                       m_sNodeName;                                      		// 0x000040 (0x0008)              
	int                                                m_nNodePosX;                                      		// 0x000048 (0x0004)              
	int                                                m_nNodePosY;                                      		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHeightAdjustmentNode");
		return pClassPointer;
	};
};
UClass* UcHeightAdjustmentNode::pClassPointer = NULL;

//0x000018 (0x000068 - 0x000050)
//cHeightAdjustmentNodeBlendBase[0x1038BE00]
class UcHeightAdjustmentNodeBlendBase : public UcHeightAdjustmentNode
{
public:
	TArray<struct FtHeightAdjustmentBlendChild>        m_aChildren;                                      		// 0x000050 (0x000C)              
	unsigned long                                      m_bFixNumChildren : 1;                            		// 0x00005C (0x0004) [0x00000001] 
	int                                                m_nOutDrawY;                                      		// 0x000060 (0x0004)              
	int                                                m_nDrawWidth;                                     		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHeightAdjustmentNodeBlendBase");
		return pClassPointer;
	};
};
UClass* UcHeightAdjustmentNodeBlendBase::pClassPointer = NULL;

//0x000008 (0x000070 - 0x000068)
//cHeightAdjustmentNodeBlend[0x1038BCD0]
class UcHeightAdjustmentNodeBlend : public UcHeightAdjustmentNodeBlendBase
{
public:
	float                                              m_fWeightChangePerSecond;                         		// 0x000068 (0x0004)              
	int                                                m_nTargetChild;                                   		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHeightAdjustmentNodeBlend");
		return pClassPointer;
	};

public:
	void BlendToChild(int nTargetChild,float fTime);//APBGame.cHeightAdjustmentNodeBlend.BlendToChild
};
UClass* UcHeightAdjustmentNodeBlend::pClassPointer = NULL;

//0x000014 (0x00007C - 0x000068)
//cHeightAdjustmentNodeSmooth[0x1038BBA0]
class UcHeightAdjustmentNodeSmooth : public UcHeightAdjustmentNodeBlendBase
{
public:
	float                                              m_fMaxDeltaPerSecond;                             		// 0x000068 (0x0004)              
	float                                              m_fLastTickTime;                                  		// 0x00006C (0x0004)              
	FVector3                                           m_HeightAdjustment;                               		// 0x000070 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHeightAdjustmentNodeSmooth");
		return pClassPointer;
	};
};
UClass* UcHeightAdjustmentNodeSmooth::pClassPointer = NULL;

//0x000014 (0x000064 - 0x000050)
//cHeightAdjustmentNodeCalculate[0x1038BA70]
class UcHeightAdjustmentNodeCalculate : public UcHeightAdjustmentNode
{
public:
	unsigned char                                      m_eUnscaledBoneSelection;                         		// 0x000050 (0x0001)              PROPERTY: etBoneSelectionMethod
	unsigned char                                      m_eScaledBoneSelection;                           		// 0x000051 (0x0001)              PROPERTY: etBoneSelectionMethod
	unsigned char                                      m_aeAffectAxis[0x3];                              		// 0x000052 (0x0003)              PROPERTY: etAffectAxis
	unsigned char                                      _0x000055[0x3];                                   		// 0x000055 (0x0003) MISSED OFFSET
	struct FName                                       m_sBoneName;                                      		// 0x000058 (0x0008)              
	int                                                m_nOutDrawY;                                      		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHeightAdjustmentNodeCalculate");
		return pClassPointer;
	};
};
UClass* UcHeightAdjustmentNodeCalculate::pClassPointer = NULL;

//0x00000F (0x000068 - 0x000059)
//cHeldObjectComponent[0x1038B940]
class UcHeldObjectComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	TArray<struct FtHeldObject>                        m_aHeldObjects;                                   		// 0x00005C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHeldObjectComponent");
		return pClassPointer;
	};
};
UClass* UcHeldObjectComponent::pClassPointer = NULL;

//0x000010 (0x0000A8 - 0x000098)
//cSkelControl_HairSquash[0x1038B810]
class UcSkelControl_HairSquash : public USkelControlBase
{
public:
	int                                                State;                                            		// 0x000098 (0x0004)              
	float                                              TimeLeft;                                         		// 0x00009C (0x0004)              
	float                                              ScaleFrom;                                        		// 0x0000A0 (0x0004)              
	float                                              ScaleTo;                                          		// 0x0000A4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkelControl_HairSquash");
		return pClassPointer;
	};
};
UClass* UcSkelControl_HairSquash::pClassPointer = NULL;

//0x00029C (0x000364 - 0x0000C8)
//cSkelControlBodyRoll[0x1038B6E0]
class UcSkelControlBodyRoll : public USkelControlSingleBone
{
public:
	FVector3                                           m_vAccelVectorUsed;                               		// 0x0000C8 (0x000C)              
	FVector3                                           m_vLastAccel[0x28];                               		// 0x0000D4 (0x01E0)              
	float                                              m_fLastAccelTimeDeltas[0x28];                     		// 0x0002B4 (0x00A0)              
	int                                                m_nNextAccelIndex;                                		// 0x000354 (0x0004)              
	FVector3                                           m_vLastVelocity;                                  		// 0x000358 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkelControlBodyRoll");
		return pClassPointer;
	};
};
UClass* UcSkelControlBodyRoll::pClassPointer = NULL;

//0x000068 (0x000100 - 0x000098)
//cSkelControlHeightAdjustment[0x1038B5B0]
class UcSkelControlHeightAdjustment : public USkelControlBase
{
public:
	struct FtHeightAdjustmentStrategy                  m_DefaultStrategy;                                		// 0x000098 (0x000C)              
	TArray<struct FtHeightAdjustmentStrategy>          m_aStrategyStack;                                 		// 0x0000A4 (0x000C)              
	class USkeletalMesh*                               m_MaleUnscaledMesh;                               		// 0x0000B0 (0x0004)              
	class USkeletalMesh*                               m_FemaleUnscaledMesh;                             		// 0x0000B4 (0x0004)              
	float                                              m_fMaxDeltaPerSecond;                             		// 0x0000B8 (0x0004)              
	struct FName                                       m_sMatchBoneName;                                 		// 0x0000BC (0x0008)              
	float                                              m_fMatchLowestAdjustment;                         		// 0x0000C4 (0x0004)              
	float                                              m_fLastTickTime;                                  		// 0x0000C8 (0x0004)              
	float                                              m_fMatchBoneWeight;                               		// 0x0000CC (0x0004)              
	float                                              m_fWeightChangePerSecond;                         		// 0x0000D0 (0x0004)              
	class USkeletalMesh*                               m_CachedScaledMesh;                               		// 0x0000D4 (0x0004)              
	class USkeletalMesh*                               m_CachedUnscaledMesh;                             		// 0x0000D8 (0x0004)              
	TArray<unsigned char>                              m_aUnscaledToScaled;                              		// 0x0000DC (0x000C)              
	TArray<FMatrix>                                    m_aUnscaledSpaceBases;                            		// 0x0000E8 (0x000C)              
	FVector3                                           m_HeightAdjustment;                               		// 0x0000F4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkelControlHeightAdjustment");
		return pClassPointer;
	};
};
UClass* UcSkelControlHeightAdjustment::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//cSkelControlLCBodyRotation[0x1038B480]
class UcSkelControlLCBodyRotation : public USkelControlSingleBone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkelControlLCBodyRotation");
		return pClassPointer;
	};
};
UClass* UcSkelControlLCBodyRotation::pClassPointer = NULL;

//0x000020 (0x0000B8 - 0x000098)
//cSkelControlTurntable[0x1038B350]
class UcSkelControlTurntable : public USkelControlBase
{
public:
	float                                              TurnSpeed;                                        		// 0x000098 (0x0004)              
	float                                              FastTurnTolerance;                                		// 0x00009C (0x0004)              
	float                                              FastTurnSpeed;                                    		// 0x0000A0 (0x0004)              
	FVector2                                           AimSpeed;                                         		// 0x0000A4 (0x0008)              
	float                                              AimTolerance;                                     		// 0x0000AC (0x0004)              
	float                                              AimMaximum;                                       		// 0x0000B0 (0x0004)              
	float                                              FiringQuickBlendTime;                             		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkelControlTurntable");
		return pClassPointer;
	};
};
UClass* UcSkelControlTurntable::pClassPointer = NULL;

//0x00000C (0x0000D4 - 0x0000C8)
//cSkelControlWheelOrientation[0x1038B220]
class UcSkelControlWheelOrientation : public USkelControlSingleBone
{
public:
	float                                              WheelRoll;                                        		// 0x0000C8 (0x0004)              
	unsigned char                                      WheelRollAxis;                                    		// 0x0000CC (0x0001)              PROPERTY: EAxis
	unsigned char                                      _0x0000CD[0x3];                                   		// 0x0000CD (0x0003) MISSED OFFSET
	unsigned long                                      bInvertWheelRoll : 1;                             		// 0x0000D0 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkelControlWheelOrientation");
		return pClassPointer;
	};
};
UClass* UcSkelControlWheelOrientation::pClassPointer = NULL;

//0x000020 (0x0000E8 - 0x0000C8)
//cSkelControlWheelSuspension[0x1038B0F0]
class UcSkelControlWheelSuspension : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                		// 0x0000C8 (0x0004)              
	FVector3                                           WheelBoneOffset;                                  		// 0x0000CC (0x000C)              
	float                                              WheelMaxRenderDisplacement;                       		// 0x0000D8 (0x0004)              
	float                                              WheelSteering;                                    		// 0x0000DC (0x0004)              
	unsigned char                                      WheelSteeringAxis;                                		// 0x0000E0 (0x0001)              PROPERTY: EAxis
	unsigned char                                      _0x0000E1[0x3];                                   		// 0x0000E1 (0x0003) MISSED OFFSET
	unsigned long                                      bInvertWheelSteering : 1;                         		// 0x0000E4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkelControlWheelSuspension");
		return pClassPointer;
	};
};
UClass* UcSkelControlWheelSuspension::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cVignetteDescriptor[0x1038AFC0]
class UcVignetteDescriptor : public UObject
{
public:
	TArray<class UcVignetteDescriptorNode*>            m_aNext;                                          		// 0x000040 (0x000C)              
	unsigned long                                      m_bBeingEdited : 1;                               		// 0x00004C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVignetteDescriptor");
		return pClassPointer;
	};

public:
	void CollapseVignette(int nSeed,TArray<struct FtVignetteSequence>* aSequences);//APBGame.cVignetteDescriptor.CollapseVignette
};
UClass* UcVignetteDescriptor::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//cVignetteDescriptorNode[0x1038AE90]
class UcVignetteDescriptorNode : public UObject
{
public:
	struct FName                                       m_sSequenceName;                                  		// 0x000040 (0x0008)              
	int                                                m_nMinRepetitions;                                		// 0x000048 (0x0004)              
	int                                                m_nMaxRepetitions;                                		// 0x00004C (0x0004)              
	float                                              m_fWeight;                                        		// 0x000050 (0x0004)              
	TArray<class UcVignetteDescriptorNode*>            m_aNext;                                          		// 0x000054 (0x000C)              
	int                                                m_nNodeX;                                         		// 0x000060 (0x0004)              
	int                                                m_nNodeY;                                         		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVignetteDescriptorNode");
		return pClassPointer;
	};
};
UClass* UcVignetteDescriptorNode::pClassPointer = NULL;

//0x000014 (0x00006C - 0x000058)
//cAnimConfigureDecision[0x1038AD60]
class UcAnimConfigureDecision : public UcAnimConfigureNode
{
public:
	TArray<struct FtDecisionChild>                     Children;                                         		// 0x000058 (0x000C)              
	int                                                m_nOutDrawY;                                      		// 0x000064 (0x0004)              
	float                                              m_fSliderPos;                                     		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimConfigureDecision");
		return pClassPointer;
	};

public:
	struct FName RetDecisionName(class UAnimTree* pAnimTree);//APBGame.cAnimConfigureDecision.RetDecisionName
};
UClass* UcAnimConfigureDecision::pClassPointer = NULL;

//0x000000 (0x00006C - 0x00006C)
//cAnimConfigureDecisionEquippedItem[0x1038AC30]
class UcAnimConfigureDecisionEquippedItem : public UcAnimConfigureDecision
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimConfigureDecisionEquippedItem");
		return pClassPointer;
	};

public:
	struct FName RetDecisionName(class UAnimTree* pAnimTree);//APBGame.cAnimConfigureDecisionEquippedItem.RetDecisionName
};
UClass* UcAnimConfigureDecisionEquippedItem::pClassPointer = NULL;

//0x000000 (0x00006C - 0x00006C)
//cAnimConfigureDecisionFaction[0x1038AB00]
class UcAnimConfigureDecisionFaction : public UcAnimConfigureDecision
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimConfigureDecisionFaction");
		return pClassPointer;
	};

public:
	struct FName RetDecisionName(class UAnimTree* pAnimTree);//APBGame.cAnimConfigureDecisionFaction.RetDecisionName
};
UClass* UcAnimConfigureDecisionFaction::pClassPointer = NULL;

//0x000000 (0x00006C - 0x00006C)
//cAnimConfigureDecisionTaskItem[0x1038A9D0]
class UcAnimConfigureDecisionTaskItem : public UcAnimConfigureDecision
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimConfigureDecisionTaskItem");
		return pClassPointer;
	};

public:
	struct FName RetDecisionName(class UAnimTree* pAnimTree);//APBGame.cAnimConfigureDecisionTaskItem.RetDecisionName
};
UClass* UcAnimConfigureDecisionTaskItem::pClassPointer = NULL;

//0x000000 (0x00006C - 0x00006C)
//cAnimConfigureDecisionVehicle[0x1038A8A0]
class UcAnimConfigureDecisionVehicle : public UcAnimConfigureDecision
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimConfigureDecisionVehicle");
		return pClassPointer;
	};

public:
	struct FName RetDecisionName(class UAnimTree* pAnimTree);//APBGame.cAnimConfigureDecisionVehicle.RetDecisionName
};
UClass* UcAnimConfigureDecisionVehicle::pClassPointer = NULL;

//0x000018 (0x000070 - 0x000058)
//cAnimConfigureSelect[0x1038A770]
class UcAnimConfigureSelect : public UcAnimConfigureNode
{
public:
	TArray<struct FtSelectProfile>                     Profiles;                                         		// 0x000058 (0x000C)              
	class UcAnimConfigureNode*                         ChildNode;                                        		// 0x000064 (0x0004)              
	int                                                m_nOutDrawY;                                      		// 0x000068 (0x0004)              
	int                                                m_nInDrawY;                                       		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimConfigureSelect");
		return pClassPointer;
	};

public:
	struct FName RetProfileName(class UAnimTree* pAnimTree);//APBGame.cAnimConfigureSelect.RetProfileName
};
UClass* UcAnimConfigureSelect::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//cAssetCustomisation[0x1038A510]
class UcAssetCustomisation : public UObject
{
public:
	class UcAsyncPackages*                             m_AsyncPackages;                                  		// 0x000040 (0x0004)              
	struct FString                                     m_sDevelopmentFolder;                             		// 0x000044 (0x000C)              
	unsigned long                                      m_bPostAsyncLoadCalled : 1;                       		// 0x000050 (0x0004) [0x00000001] 
	TArray<DWORD>                                      m_aComplexityCols;                                		// 0x000054 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAssetCustomisation");
		return pClassPointer;
	};

public:
	void StartLoading();//APBGame.cAssetCustomisation.StartLoading
	bool LoadFromDisk(struct FString sName);//APBGame.cAssetCustomisation.LoadFromDisk
	bool IsReady();//APBGame.cAssetCustomisation.IsReady
	bool SaveToDisk(struct FString sName);//APBGame.cAssetCustomisation.SaveToDisk
	bool LoadFromMemory(TArray<unsigned char> Data);//APBGame.cAssetCustomisation.LoadFromMemory
};
UClass* UcAssetCustomisation::pClassPointer = NULL;

//0x000164 (0x0001C4 - 0x000060)
//GolemBodyDescriptor[0x1038A640]
class UGolemBodyDescriptor : public UcAssetCustomisation
{
public:
	class UGolemBase*                                  Base;                                             		// 0x000060 (0x0004)              
	unsigned long                                      bNeedsMorphFixup : 1;                             		// 0x000064 (0x0004) [0x00000001] 
	float                                              fHeightFactor;                                    		// 0x000068 (0x0004)              
	TArray<struct FGolemMorphNodeWithWeight>           aBodyMorphs;                                      		// 0x00006C (0x000C)              
	unsigned char                                      BrowsNormalMap;                                   		// 0x000078 (0x0001)              PROPERTY: 
	unsigned char                                      EyeLidNormalMap;                                  		// 0x000079 (0x0001)              PROPERTY: 
	unsigned char                                      EyebrowsShape;                                    		// 0x00007A (0x0001)              PROPERTY: 
	unsigned char                                      EyebrowsColourIndex;                              		// 0x00007B (0x0001)              PROPERTY: 
	unsigned char                                      NoseShape;                                        		// 0x00007C (0x0001)              PROPERTY: 
	unsigned char                                      LipDetailNormalMap;                               		// 0x00007D (0x0001)              PROPERTY: 
	unsigned char                                      ChinDetail;                                       		// 0x00007E (0x0001)              PROPERTY: 
	unsigned char                                      ForeheadDetail;                                   		// 0x00007F (0x0001)              PROPERTY: 
	unsigned char                                      CheekDetail;                                      		// 0x000080 (0x0001)              PROPERTY: 
	unsigned char                                      EarShape;                                         		// 0x000081 (0x0001)              PROPERTY: 
	unsigned char                                      IrisColour;                                       		// 0x000082 (0x0001)              PROPERTY: 
	unsigned char                                      PupilShape;                                       		// 0x000083 (0x0001)              PROPERTY: 
	unsigned char                                      MolesPatternIndex;                                		// 0x000084 (0x0001)              PROPERTY: 
	unsigned char                                      FrecklesPatternIndex;                             		// 0x000085 (0x0001)              PROPERTY: 
	unsigned char                                      MusclesPatternIndex;                              		// 0x000086 (0x0001)              PROPERTY: 
	unsigned char                                      VeinsPatternIndex;                                		// 0x000087 (0x0001)              PROPERTY: 
	unsigned char                                      SkinninessPatternIndex;                           		// 0x000088 (0x0001)              PROPERTY: 
	unsigned char                                      WrinklesPatternIndex;                             		// 0x000089 (0x0001)              PROPERTY: 
	unsigned char                                      AgeMarksPatternIndex;                             		// 0x00008A (0x0001)              PROPERTY: 
	unsigned char                                      HairShape;                                        		// 0x00008B (0x0001)              PROPERTY: 
	unsigned char                                      HairType;                                         		// 0x00008C (0x0001)              PROPERTY: 
	unsigned char                                      HairColourIndex;                                  		// 0x00008D (0x0001)              PROPERTY: 
	unsigned char                                      _0x00008E[0x2];                                   		// 0x00008E (0x0002) MISSED OFFSET
	float                                              EyeLidStrength;                                   		// 0x000090 (0x0004)              
	int                                                BodyHairPattern;                                  		// 0x000094 (0x0004)              
	float                                              LipDetailStrength;                                		// 0x000098 (0x0004)              
	float                                              ChinDetailStrength;                               		// 0x00009C (0x0004)              
	float                                              ForeheadDetailStrength;                           		// 0x0000A0 (0x0004)              
	float                                              CheekDetailStrength;                              		// 0x0000A4 (0x0004)              
	float                                              SkinTone;                                         		// 0x0000A8 (0x0004)              
	float                                              SkinPigment1Level;                                		// 0x0000AC (0x0004)              
	float                                              SkinPigment2Level;                                		// 0x0000B0 (0x0004)              
	struct FGolemMakeupInfo                            EyeShadow;                                        		// 0x0000B4 (0x0018)              
	struct FGolemMakeupInfo                            EyeLiner;                                         		// 0x0000CC (0x0018)              
	struct FGolemMakeupInfo                            Lipstick;                                         		// 0x0000E4 (0x0018)              
	struct FGolemMakeupInfo                            Blusher;                                          		// 0x0000FC (0x0018)              
	struct FGolemMakeupInfo                            NailVarnish;                                      		// 0x000114 (0x0018)              
	struct FGolemMakeupInfo                            BodyPaint;                                        		// 0x00012C (0x0018)              
	struct FGolemMakeupInfo                            FacePaint;                                        		// 0x000144 (0x0018)              
	float                                              MolesFactor;                                      		// 0x00015C (0x0004)              
	float                                              FrecklesFactor;                                   		// 0x000160 (0x0004)              
	float                                              Muscularity;                                      		// 0x000164 (0x0004)              
	float                                              VeinsFactor;                                      		// 0x000168 (0x0004)              
	float                                              Skinniness;                                       		// 0x00016C (0x0004)              
	float                                              WrinklesFactor;                                   		// 0x000170 (0x0004)              
	float                                              AgeMarksFactor;                                   		// 0x000174 (0x0004)              
	TArray<struct FScarsLayer>                         ScarsLayers;                                      		// 0x000178 (0x000C)              
	TArray<struct FPredefinedTattooLayer>              PredefinedTattooLayers;                           		// 0x000184 (0x000C)              
	class UTESTexture*                                 BodyTESTattoo;                                    		// 0x000190 (0x0004)              
	TArray<unsigned char>                              LayerProjectionArea;                              		// 0x000194 (0x000C)              
	TArray<unsigned char>                              LayerProjectionMask;                              		// 0x0001A0 (0x000C)              
	TArray<unsigned long>                              LayerProjectionInvertMask;                        		// 0x0001AC (0x000C)              
	TArray<class UGolemPartDescriptor*>                FacialHairDescriptors;                            		// 0x0001B8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemBodyDescriptor");
		return pClassPointer;
	};
};
UClass* UGolemBodyDescriptor::pClassPointer = NULL;

//0x000060 (0x0000C0 - 0x000060)
//GolemDescriptor[0x1038A3E0]
class UGolemDescriptor : public UcAssetCustomisation
{
public:
	struct FCompactGolemDescriptor                     m_CompactDescriptor;                              		// 0x000060 (0x0030)              
	class UGolemBodyDescriptor*                        BodyDescriptor;                                   		// 0x000090 (0x0004)              
	TArray<class UGolemPartDescriptor*>                PartDescriptors;                                  		// 0x000094 (0x000C)              
	TArray<int>                                        aLayerData;                                       		// 0x0000A0 (0x000C)              
	TArray<struct FPurchaseElementInfo>                aPurchaseElements;                                		// 0x0000AC (0x000C)              
	unsigned long                                      m_bPrecacheStatue : 1;                            		// 0x0000B8 (0x0004) [0x00000001] 
	unsigned long                                      m_bUILobbyCharacterMesh : 1;                      		// 0x0000B8 (0x0004) [0x00000002] 
	unsigned long                                      m_bUIClothingPreviewCharacterMesh : 1;            		// 0x0000B8 (0x0004) [0x00000004] 
	class USkeletalMeshComponent*                      m_pBaseMeshComponent;                             		// 0x0000BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemDescriptor");
		return pClassPointer;
	};

public:
	void Randomise(bool bMale);//APBGame.GolemDescriptor.Randomise
};
UClass* UGolemDescriptor::pClassPointer = NULL;

//0x0000A0 (0x000100 - 0x000060)
//GolemobileDescriptor[0x1038A2B0]
class UGolemobileDescriptor : public UcAssetCustomisation
{
public:
	struct FCompactGolemobileDescriptor                m_CompactDescriptor;                              		// 0x000060 (0x0020)              
	class UGolemobileBase*                             Base;                                             		// 0x000080 (0x0004)              
	TArray<class UGolemobilePartDescriptor*>           aParts;                                           		// 0x000084 (0x000C)              
	struct FLinearColor                                HSLBasePaintColour;                               		// 0x000090 (0x0010)              
	struct FLinearColor                                HSLSecondPaintColour;                             		// 0x0000A0 (0x0010)              
	unsigned char                                      PaintType;                                        		// 0x0000B0 (0x0001)              PROPERTY: etPaintType
	unsigned char                                      _0x0000B1[0x3];                                   		// 0x0000B1 (0x0003) MISSED OFFSET
	class UTESTexture*                                 TESDecals;                                        		// 0x0000B4 (0x0004)              
	class UTESTextureClass*                            m_pDecalsTextureClass;                            		// 0x0000B8 (0x0004)              
	TArray<unsigned char>                              LayerProjectionArea;                              		// 0x0000BC (0x000C)              
	int                                                LicencePlateBackground;                           		// 0x0000C8 (0x0004)              
	TArray<int>                                        LicencePlateDigits;                               		// 0x0000CC (0x000C)              
	int                                                PaintMaterialIndex;                               		// 0x0000D8 (0x0004)              
	int                                                InteriorMaterialIndex;                            		// 0x0000DC (0x0004)              
	int                                                WheelMaterialIndex;                               		// 0x0000E0 (0x0004)              
	int                                                GlassMaterialIndex;                               		// 0x0000E4 (0x0004)              
	class UTexture*                                    DamagedNormal;                                    		// 0x0000E8 (0x0004)              
	class UTexture*                                    ScratchMask;                                      		// 0x0000EC (0x0004)              
	class UTexture*                                    ScratchDiffuse_DirtDamageDustMask;                		// 0x0000F0 (0x0004)              
	TArray<int>                                        PartLightsPatterns;                               		// 0x0000F4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemobileDescriptor");
		return pClassPointer;
	};

public:
	void SetBase(class UGolemobileBase* pBase);//APBGame.GolemobileDescriptor.SetBase
	void Init();//APBGame.GolemobileDescriptor.Init
	void Randomise(int nNumDecals,int nNumLayersPerDecal);//APBGame.GolemobileDescriptor.Randomise
};
UClass* UGolemobileDescriptor::pClassPointer = NULL;

//0x000050 (0x0000B0 - 0x000060)
//GolemPartDescriptor[0x1038A180]
class UGolemPartDescriptor : public UcAssetCustomisation
{
public:
	class UcGolemPart*                                 part;                                             		// 0x000060 (0x0004)              
	int                                                nGolemPartKey;                                    		// 0x000064 (0x0004)              
	TArray<struct FLinearColor>                        aHSLColours;                                      		// 0x000068 (0x000C)              
	unsigned char                                      OverlayIndex;                                     		// 0x000074 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000075[0x3];                                   		// 0x000075 (0x0003) MISSED OFFSET
	float                                              OverlayStrength;                                  		// 0x000078 (0x0004)              
	TArray<struct FPredefinedDecalLayer>               PredefinedDecals;                                 		// 0x00007C (0x000C)              
	TArray<unsigned char>                              ProjectionAreas;                                  		// 0x000088 (0x000C)              
	TArray<unsigned char>                              ProjectionMasks;                                  		// 0x000094 (0x000C)              
	TArray<unsigned long>                              LayerProjectionInvertMask;                        		// 0x0000A0 (0x000C)              
	class UTESTexture*                                 PartTESDecals;                                    		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemPartDescriptor");
		return pClassPointer;
	};
};
UClass* UGolemPartDescriptor::pClassPointer = NULL;

//0x000018 (0x000078 - 0x000060)
//TESTexture[0x1038A050]
class UTESTexture : public UcAssetCustomisation
{
public:
	class USkeletalMeshComponent*                      ReceiverMesh;                                     		// 0x000060 (0x0004)              
	int                                                MaterialIndex;                                    		// 0x000064 (0x0004)              
	DWORD                                              MeshProxy;                                        		// 0x000068 (0x0004)              
	TArray<class UTESLayer*>                           Layers;                                           		// 0x00006C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.TESTexture");
		return pClassPointer;
	};

public:
	void SetReceiverMesh(class USkeletalMeshComponent* pReceiverMesh,int nMaterialIndex);//APBGame.TESTexture.SetReceiverMesh
	void End();//APBGame.TESTexture.End
	class UTESTexture* Create(int NumLayers,class UObject* Package);//APBGame.TESTexture.Create
	void Begin(class UcGolemRenderTarget* TargetTexture,bool bWriteAlpha,bool bEnableDepthPass);//APBGame.TESTexture.Begin
	void RenderNextLayer();//APBGame.TESTexture.RenderNextLayer
	void Render(bool bClearRT,int LayerMinIdx,int LayerMaxIdx);//APBGame.TESTexture.Render
};
UClass* UTESTexture::pClassPointer = NULL;

//0x000008 (0x00027C - 0x000274)
//cFlythroughSkeletalMeshActor[0x10389F20]
class AcFlythroughSkeletalMeshActor : public ASkeletalMeshActor
{
public:
	unsigned char                                      m_ActorType;                                      		// 0x000274 (0x0001)              PROPERTY: EFlythroughActorType
	unsigned char                                      _0x000275[0x3];                                   		// 0x000275 (0x0003) MISSED OFFSET
	int                                                m_meshIndex;                                      		// 0x000278 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cFlythroughSkeletalMeshActor");
		return pClassPointer;
	};

public:
	void NativeReplicatedEvent(struct FName VarName);//APBGame.cFlythroughSkeletalMeshActor.NativeReplicatedEvent
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cFlythroughSkeletalMeshActor.ReplicatedEvent
};
UClass* AcFlythroughSkeletalMeshActor::pClassPointer = NULL;

//0x000100 (0x000140 - 0x000040)
//cGolemPart[0x10389DF0]
class UcGolemPart : public UObject
{
public:
	int                                                ClassID;                                          		// 0x000040 (0x0004)              
	class UGolemBase*                                  Base;                                             		// 0x000044 (0x0004)              
	struct FString                                     UserName;                                         		// 0x000048 (0x000C)              
	unsigned long                                      EnabledByDefault : 1;                             		// 0x000054 (0x0004) [0x00000001] 
	unsigned long                                      ShareUVLayout : 1;                                		// 0x000054 (0x0004) [0x00000002] 
	unsigned long                                      bPseudoWeldOnAutoBuild : 1;                       		// 0x000054 (0x0004) [0x00000004] 
	unsigned long                                      bCullHairMesh : 1;                                		// 0x000054 (0x0004) [0x00000008] 
	TArray<struct FString>                             BodyMorphGroupsToDisable;                         		// 0x000058 (0x000C)              
	struct FEnumeratedName                             AudioSwitchGroup;                                 		// 0x000064 (0x0010)              
	struct FEnumeratedName                             AudioSwitchValue;                                 		// 0x000074 (0x0010)              
	TArray<struct FConditionalMorph>                   Morphs;                                           		// 0x000084 (0x000C)              
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x000090 (0x0004)              
	TArray<int>                                        ExtraMeshSegments;                                		// 0x000094 (0x000C)              
	TArray<struct FConditionalMorph>                   ExtraMeshVariants;                                		// 0x0000A0 (0x000C)              
	unsigned char                                      FindFMVariantMethod;                              		// 0x0000AC (0x0001)              PROPERTY: EFindFMVariantMethod
	unsigned char                                      _0x0000AD[0x3];                                   		// 0x0000AD (0x0003) MISSED OFFSET
	TArray<int>                                        OccludedSegments;                                 		// 0x0000B0 (0x000C)              
	TArray<struct FVerticesMapLOD>                     CoincidentVerticesLOD;                            		// 0x0000BC (0x000C)              
	class UTexture2D*                                  NormalMap;                                        		// 0x0000C8 (0x0004)              
	class UTexture2D*                                  ColourMap;                                        		// 0x0000CC (0x0004)              
	class UTexture2D*                                  ExtraMeshNormalMap;                               		// 0x0000D0 (0x0004)              
	class UTexture2D*                                  ExtraMeshColourMap;                               		// 0x0000D4 (0x0004)              
	class UTexture2D*                                  BRDFMask;                                         		// 0x0000D8 (0x0004)              
	TArray<struct FOverlayTextures>                    Overlays;                                         		// 0x0000DC (0x000C)              
	TArray<struct FBaseExtraTextures>                  PredefinedVinyls;                                 		// 0x0000E8 (0x000C)              
	TArray<struct FBaseExtraTextures>                  PredefinedDecals;                                 		// 0x0000F4 (0x000C)              
	TArray<struct FGolemBaseArea>                      CustomisableAreas;                                		// 0x000100 (0x000C)              
	int                                                nTextureDivisor;                                  		// 0x00010C (0x0004)              
	int                                                nMaxTextureDivisor;                               		// 0x000110 (0x0004)              
	TArray<struct FGolemPartTextureBlock>              aTextureBlocks;                                   		// 0x000114 (0x000C)              
	struct FString                                     HairFittingMorph;                                 		// 0x000120 (0x000C)              
	float                                              MaximumOverlayStrength;                           		// 0x00012C (0x0004)              
	float                                              ShoeHeight;                                       		// 0x000130 (0x0004)              
	TArray<struct FPartProjectionArea>                 aSupportedProjectionAreas;                        		// 0x000134 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGolemPart");
		return pClassPointer;
	};
};
UClass* UcGolemPart::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//cGolemRenderTarget[0x10389CC0]
class UcGolemRenderTarget : public UObject
{
public:
	FVector2                                           m_Offset;                                         		// 0x000040 (0x0008)              
	FVector2                                           m_Scale;                                          		// 0x000048 (0x0008)              
	class UTextureRenderTarget2D*                      m_pRenderTarget;                                  		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGolemRenderTarget");
		return pClassPointer;
	};

public:
	int GetWidth();//APBGame.cGolemRenderTarget.GetWidth
	void SetDesiredSize(int nWidth,int nHeight);//APBGame.cGolemRenderTarget.SetDesiredSize
	int GetHeight();//APBGame.cGolemRenderTarget.GetHeight
};
UClass* UcGolemRenderTarget::pClassPointer = NULL;

//0x000024 (0x000064 - 0x000040)
//cVehicleValidator[0x10389B90]
class UcVehicleValidator : public UObject
{
public:
	unsigned char                                      m_eVehicleValidatorState;                         		// 0x000040 (0x0001)              PROPERTY: etVehicleValidatorState
	unsigned char                                      m_eFaction;                                       		// 0x000041 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eVehicleValidatorType;                          		// 0x000042 (0x0001)              PROPERTY: etVehicleValidatorType
	unsigned char                                      _0x000043[0x1];                                   		// 0x000043 (0x0001) MISSED OFFSET
	struct FGuid                                       m_InventoryItemGuid;                              		// 0x000044 (0x0010)              
	class UGolemobileDescriptor*                       m_pGolemobileDescriptor;                          		// 0x000054 (0x0004)              
	class AcAPBPlayerController*                       m_pPC;                                            		// 0x000058 (0x0004)              
	int                                                m_nNumPartsValidated;                             		// 0x00005C (0x0004)              
	unsigned long                                      m_bFactionValid : 1;                              		// 0x000060 (0x0004) [0x00000001] 
	unsigned long                                      m_bFixupCommonSirens : 1;                         		// 0x000060 (0x0004) [0x00000002] 
	unsigned long                                      m_bBackwardsCompatibilityFixupApplied : 1;        		// 0x000060 (0x0004) [0x00000004] 
	unsigned long                                      m_bMandatoryComponentsFixupApplied : 1;           		// 0x000060 (0x0004) [0x00000008] 
	unsigned long                                      m_bWrongFactionComponentsRemoved : 1;             		// 0x000060 (0x0004) [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleValidator");
		return pClassPointer;
	};
};
UClass* UcVehicleValidator::pClassPointer = NULL;

//0x00000C (0x0001EC - 0x0001E0)
//DrawTESLayerComponent[0x10389A60]
class UDrawTESLayerComponent : public UPrimitiveComponent
{
public:
	class UTESTexture*                                 TextureDescriptor;                                		// 0x0001E0 (0x0004)              
	int                                                LayerIndex;                                       		// 0x0001E4 (0x0004)              
	DWORD                                              ProjectionVolumeColour;                           		// 0x0001E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.DrawTESLayerComponent");
		return pClassPointer;
	};
};
UClass* UDrawTESLayerComponent::pClassPointer = NULL;

//0x00029C (0x0002DC - 0x000040)
//GolemBase[0x10389930]
class UGolemBase : public UObject
{
public:
	int                                                Id;                                               		// 0x000040 (0x0004)              
	struct FString                                     UserName;                                         		// 0x000044 (0x000C)              
	TArray<struct FGolemPartExternalData>              aParts;                                           		// 0x000050 (0x000C)              
	class UcItemRestrictionTree*                       ItemRestrictionTree;                              		// 0x00005C (0x0004)              
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x000060 (0x0004)              
	class UAnimTree*                                   StudioAnimTree;                                   		// 0x000064 (0x0004)              
	TArray<class UAnimSet*>                            StudioAnimSets;                                   		// 0x000068 (0x000C)              
	struct FName                                       AnimSetupName;                                    		// 0x000074 (0x0008)              
	struct FName                                       SocialAnimSetupName;                              		// 0x00007C (0x0008)              
	TArray<class UMorphTargetSet*>                     MorphSets;                                        		// 0x000084 (0x000C)              
	TArray<struct FSegmentationDataLOD>                aSegmentationData;                                		// 0x000090 (0x000C)              
	int                                                nTextureDivisor;                                  		// 0x00009C (0x0004)              
	int                                                nMaxTextureDivisor;                               		// 0x0000A0 (0x0004)              
	TArray<struct FGolemBaseSkinTone>                  SkinTones;                                        		// 0x0000A4 (0x000C)              
	class UTexture2D*                                  SkinToneMask;                                     		// 0x0000B0 (0x0004)              
	DWORD                                              Pigmentation1;                                    		// 0x0000B4 (0x0004)              
	DWORD                                              Pigmentation2;                                    		// 0x0000B8 (0x0004)              
	TArray<class UTexture2D*>                          FrecklesMap;                                      		// 0x0000BC (0x000C)              
	TArray<class UTexture2D*>                          AgeMarks;                                         		// 0x0000C8 (0x000C)              
	TArray<struct FGolemBaseColourNormalMap>           BodyHair;                                         		// 0x0000D4 (0x000C)              
	TArray<struct FGolemBaseColourNormalMap>           MolesMap;                                         		// 0x0000E0 (0x000C)              
	TArray<struct FGolemScar>                          Scars;                                            		// 0x0000EC (0x000C)              
	TArray<class UTexture2D*>                          Tattoos;                                          		// 0x0000F8 (0x000C)              
	TArray<struct FGolemProjectionArea>                ProjectionAreas;                                  		// 0x000104 (0x000C)              
	TArray<struct FGolemProjectionPose>                ProjectionPoses;                                  		// 0x000110 (0x000C)              
	class UTexture2D*                                  BaseNormalMap;                                    		// 0x00011C (0x0004)              
	TArray<class UTexture2D*>                          MuscleNormalMap;                                  		// 0x000120 (0x000C)              
	TArray<class UTexture2D*>                          VeinsNormalMap;                                   		// 0x00012C (0x000C)              
	TArray<class UTexture2D*>                          SkinnyNormalMap;                                  		// 0x000138 (0x000C)              
	TArray<class UTexture2D*>                          WrinklesNormalMap;                                		// 0x000144 (0x000C)              
	TArray<class UTexture2D*>                          aEyeLidShapes;                                    		// 0x000150 (0x000C)              
	TArray<class UTexture2D*>                          aEyePupils;                                       		// 0x00015C (0x000C)              
	TArray<class UTexture2D*>                          aEyeIris;                                         		// 0x000168 (0x000C)              
	TArray<class UTexture2D*>                          aLipDetail;                                       		// 0x000174 (0x000C)              
	TArray<class UTexture2D*>                          aChinDetail;                                      		// 0x000180 (0x000C)              
	TArray<class UTexture2D*>                          aForeheadDetail;                                  		// 0x00018C (0x000C)              
	TArray<class UTexture2D*>                          aCheeksDetail;                                    		// 0x000198 (0x000C)              
	TArray<struct FGolemBaseColourNormalMap>           aEyebrows;                                        		// 0x0001A4 (0x000C)              
	TArray<class UTexture2D*>                          aEyeShadow;                                       		// 0x0001B0 (0x000C)              
	TArray<class UTexture2D*>                          aEyeLiner;                                        		// 0x0001BC (0x000C)              
	TArray<class UTexture2D*>                          aLipstick;                                        		// 0x0001C8 (0x000C)              
	TArray<class UTexture2D*>                          aBlusher;                                         		// 0x0001D4 (0x000C)              
	TArray<class UTexture2D*>                          aNailVarnish;                                     		// 0x0001E0 (0x000C)              
	TArray<class UTexture2D*>                          aBodyPaint;                                       		// 0x0001EC (0x000C)              
	TArray<class UTexture2D*>                          aFacePaint;                                       		// 0x0001F8 (0x000C)              
	TArray<class UTexture2D*>                          aGreyscaleEyeShadow;                              		// 0x000204 (0x000C)              
	TArray<class UTexture2D*>                          aGreyscaleEyeLiner;                               		// 0x000210 (0x000C)              
	TArray<class UTexture2D*>                          aGreyscaleLipstick;                               		// 0x00021C (0x000C)              
	TArray<class UTexture2D*>                          aGreyscaleBlusher;                                		// 0x000228 (0x000C)              
	TArray<class UTexture2D*>                          aGreyscaleNailVarnish;                            		// 0x000234 (0x000C)              
	TArray<class UTexture2D*>                          aGreyscaleBodyPaint;                              		// 0x000240 (0x000C)              
	TArray<class UTexture2D*>                          aGreyscaleFacePaint;                              		// 0x00024C (0x000C)              
	TArray<struct FGolemMakeUpData>                    aDataEyeShadow;                                   		// 0x000258 (0x000C)              
	TArray<struct FGolemMakeUpData>                    aDataEyeLiner;                                    		// 0x000264 (0x000C)              
	TArray<struct FGolemMakeUpData>                    aDataLipstick;                                    		// 0x000270 (0x000C)              
	TArray<struct FGolemMakeUpData>                    aDataBlusher;                                     		// 0x00027C (0x000C)              
	TArray<struct FGolemMakeUpData>                    aDataNailVarnish;                                 		// 0x000288 (0x000C)              
	TArray<struct FGolemMakeUpData>                    aDataBodyPaint;                                   		// 0x000294 (0x000C)              
	TArray<struct FGolemMakeUpData>                    aDataFacePaint;                                   		// 0x0002A0 (0x000C)              
	TArray<struct FGolemBaseHairShape>                 aShapes;                                          		// 0x0002AC (0x000C)              
	DWORD                                              DefaultBaseColor;                                 		// 0x0002B8 (0x0004)              
	float                                              DeltaSpecularLightness1;                          		// 0x0002BC (0x0004)              
	float                                              DeltaSpecularLightness2;                          		// 0x0002C0 (0x0004)              
	TArray<struct FString>                             aHairFittingMorphTargets;                         		// 0x0002C4 (0x000C)              
	TArray<struct FGolemBaseTextureBlock>              aTextureBlocks;                                   		// 0x0002D0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemBase");
		return pClassPointer;
	};
};
UClass* UGolemBase::pClassPointer = NULL;

//0x000004 (0x0004B4 - 0x0004B0)
//GolemHairSkeletalMeshComponent[0x10389800]
class UGolemHairSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	class UGolemDescriptor*                            m_pDescriptor;                                    		// 0x0004B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemHairSkeletalMeshComponent");
		return pClassPointer;
	};
};
UClass* UGolemHairSkeletalMeshComponent::pClassPointer = NULL;

//0x0001A4 (0x0001E4 - 0x000040)
//GolemMeshBaker[0x103896D0]
class UGolemMeshBaker : public UObject
{
public:
	struct FMeshBuildData                              m_AsyncBuildData;                                 		// 0x000040 (0x0088)              
	float                                              m_AverageStepTimes[0x15];                         		// 0x0000C8 (0x0054)              
	float                                              m_LastStepTimes[0x15];                            		// 0x00011C (0x0054)              
	float                                              m_LastStepMaxOverBudgetTime[0x15];                		// 0x000170 (0x0054)              
	float                                              m_fMeshDuplicationTime;                           		// 0x0001C4 (0x0004)              
	float                                              m_fTotalTime;                                     		// 0x0001C8 (0x0004)              
	float                                              m_fTotalStepsTime;                                		// 0x0001CC (0x0004)              
	DWORD                                              m_pRenderFence;                                   		// 0x0001D0 (0x0004)              
	class UMaterial*                                   m_pParentHairMaterial;                            		// 0x0001D4 (0x0004)              
	TArray<class UTexture*>                            m_HairTextures;                                   		// 0x0001D8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemMeshBaker");
		return pClassPointer;
	};
};
UClass* UGolemMeshBaker::pClassPointer = NULL;

//0x000000 (0x0001E4 - 0x0001E4)
//GolemobileMeshBaker[0x103895A0]
class UGolemobileMeshBaker : public UGolemMeshBaker
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemobileMeshBaker");
		return pClassPointer;
	};
};
UClass* UGolemobileMeshBaker::pClassPointer = NULL;

//0x000148 (0x000188 - 0x000040)
//Golemobile[0x10389470]
class UGolemobile : public UObject
{
public:
	class UGolemSkeletalMesh*                          VehicleSkelMesh;                                  		// 0x000040 (0x0004)              
	class UMorphTargetSet*                             VehicleMorphTargetSet;                            		// 0x000044 (0x0004)              
	class USkeletalMeshComponent*                      VehicleSkelComp;                                  		// 0x000048 (0x0004)              
	class UTexture2D*                                  Textures[0xB];                                    		// 0x00004C (0x002C)              
	int                                                PaintMaterialIndex;                               		// 0x000078 (0x0004)              
	int                                                InteriorMaterialIndex;                            		// 0x00007C (0x0004)              
	int                                                GlassMaterialIndex;                               		// 0x000080 (0x0004)              
	int                                                WheelMaterialIndex;                               		// 0x000084 (0x0004)              
	class UMaterialInstanceConstant*                   PaintMaterialInst;                                		// 0x000088 (0x0004)              
	class UMaterialInstanceConstant*                   GlassMaterialInst;                                		// 0x00008C (0x0004)              
	class UMaterialInstanceConstant*                   InteriorMaterialInst;                             		// 0x000090 (0x0004)              
	class UMaterialInstanceConstant*                   WheelMaterialInst;                                		// 0x000094 (0x0004)              
	class UMaterial*                                   m_PaintMaterialParent;                            		// 0x000098 (0x0004)              
	class UMaterial*                                   m_GlassMaterialParent;                            		// 0x00009C (0x0004)              
	class UMaterial*                                   m_InteriorMaterialParent;                         		// 0x0000A0 (0x0004)              
	class UMaterial*                                   m_WheelMaterialParent;                            		// 0x0000A4 (0x0004)              
	class UMaterial*                                   m_InteriorMaterialCompressedNMParent;             		// 0x0000A8 (0x0004)              
	class UMaterial*                                   m_WheelMaterialCompressedNMParent;                		// 0x0000AC (0x0004)              
	class UMaterial*                                   m_SimplePaintMaterialParent;                      		// 0x0000B0 (0x0004)              
	class UMaterial*                                   m_SimpleGlassMaterialParent;                      		// 0x0000B4 (0x0004)              
	class UMaterial*                                   m_SimpleInteriorMaterialParent;                   		// 0x0000B8 (0x0004)              
	class UMaterial*                                   m_SimpleWheelMaterialParent;                      		// 0x0000BC (0x0004)              
	class UMaterial*                                   m_SimpleInteriorMaterialCompressedNMParent;       		// 0x0000C0 (0x0004)              
	class UMaterial*                                   m_SimpleWheelMaterialCompressedNMParent;          		// 0x0000C4 (0x0004)              
	class UTextureDynamicLookup*                       TextureLookups[0x2];                              		// 0x0000C8 (0x0008)              
	struct FGolemobileCommonData                       CommonData;                                       		// 0x0000D0 (0x0030)              
	float                                              DustIntensity;                                    		// 0x000100 (0x0004)              
	struct FLinearColor                                DustColour;                                       		// 0x000104 (0x0010)              
	float                                              DirtIntensity;                                    		// 0x000114 (0x0004)              
	struct FLinearColor                                DirtColour;                                       		// 0x000118 (0x0010)              
	TArray<struct FGolemMorphNodeWithWeight>           aDamageMorphs;                                    		// 0x000128 (0x000C)              
	unsigned long                                      bEmissiveTexDirty : 1;                            		// 0x000134 (0x0004) [0x00000001] 
	unsigned long                                      bDamageTexDirty : 1;                              		// 0x000134 (0x0004) [0x00000002] 
	unsigned long                                      bDamageMeshDirty : 1;                             		// 0x000134 (0x0004) [0x00000004] 
	unsigned long                                      m_bLightsPatternDirty : 1;                        		// 0x000134 (0x0004) [0x00000008] 
	unsigned long                                      m_qualityChangePending : 1;                       		// 0x000134 (0x0004) [0x00000010] 
	unsigned long                                      m_usingProperAsset : 1;                           		// 0x000134 (0x0004) [0x00000020] 
	float                                              m_aExtremeDamage[0x5];                            		// 0x000138 (0x0014)              
	class UVehicleMaskTemplate*                        m_pDamageAreasMask;                               		// 0x00014C (0x0004)              
	class UVehicleMaskTemplate*                        m_pEmissiveAreasMask;                             		// 0x000150 (0x0004)              
	unsigned char                                      m_eCurrentLightsToD;                              		// 0x000154 (0x0001)              PROPERTY: etTimeofDayPeriod
	unsigned char                                      _0x000155[0x3];                                   		// 0x000155 (0x0003) MISSED OFFSET
	TArray<class UcVehicleLightsPattern*>              m_aCurrentLightPatterns;                          		// 0x000158 (0x000C)              
	class UTexture*                                    m_districtHeightfield;                            		// 0x000164 (0x0004)              
	FVector3                                           m_worldToTextureOffsetXY;                         		// 0x000168 (0x000C)              
	FVector3                                           m_worldToTextureScaleXY;                          		// 0x000174 (0x000C)              
	float                                              m_worldToTextureOffsetZ;                          		// 0x000180 (0x0004)              
	float                                              m_worldToTextureScaleZ;                           		// 0x000184 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.Golemobile");
		return pClassPointer;
	};

public:
	class UMaterial* WheelMaterialParent();//APBGame.Golemobile.WheelMaterialParent
	class UMaterial* PaintMaterialParent();//APBGame.Golemobile.PaintMaterialParent
	void Tick();//APBGame.Golemobile.Tick
	void ChangeMaterialQuality();//APBGame.Golemobile.ChangeMaterialQuality
	float GetDamageLevel(int nDamageIndex);//APBGame.Golemobile.GetDamageLevel
	class UMaterial* GlassMaterialParent();//APBGame.Golemobile.GlassMaterialParent
	float GetExtremeDamageLevel(int nIndex);//APBGame.Golemobile.GetExtremeDamageLevel
	void LightsToDChange();//APBGame.Golemobile.LightsToDChange
	void UpdateMaterials();//APBGame.Golemobile.UpdateMaterials
	void TickEmissiveTextureLookups();//APBGame.Golemobile.TickEmissiveTextureLookups
	void SetExtremeDamageLevel(int nIndex,float fLevel);//APBGame.Golemobile.SetExtremeDamageLevel
	float GetEmissiveLevel(int nEmissiveIndex);//APBGame.Golemobile.GetEmissiveLevel
	void TickLightPatterns();//APBGame.Golemobile.TickLightPatterns
	void Init(class USkeletalMeshComponent* pSkeletalMeshComp);//APBGame.Golemobile.Init
	void SetTexture(unsigned char eTextureType,class UTexture* pTexture);//APBGame.Golemobile.SetTexture
	void SetEmissiveLevel(int nEmissiveIndex,float fLevel);//APBGame.Golemobile.SetEmissiveLevel
	void UpdateParentMaterials();//APBGame.Golemobile.UpdateParentMaterials
	void CopyLogicalStateFrom(class UGolemobile* pOther);//APBGame.Golemobile.CopyLogicalStateFrom
	void SetDamageLevel(int nDamageIndex,float fLevel);//APBGame.Golemobile.SetDamageLevel
	void UpdateLightPatterns(float fDeltaSeconds);//APBGame.Golemobile.UpdateLightPatterns
	class UMaterial* InteriorMaterialParent();//APBGame.Golemobile.InteriorMaterialParent
	void UpdateLightsToD();//APBGame.Golemobile.UpdateLightsToD
	void CopySettingsFrom(class UGolemobile* pOther,class USkeletalMeshComponent* pMesh);//APBGame.Golemobile.CopySettingsFrom
};
UClass* UGolemobile::pClassPointer = NULL;

//0x0000B4 (0x0000F4 - 0x000040)
//GolemobileBase[0x10389340]
class UGolemobileBase : public UObject
{
public:
	int                                                NumTextureSets;                                   		// 0x000040 (0x0004)              
	int                                                LastPartID;                                       		// 0x000044 (0x0004)              
	TArray<struct FGolemobilePartType>                 aPartTypes;                                       		// 0x000048 (0x000C)              
	TArray<struct FString>                             aCommonPartTypes;                                 		// 0x000054 (0x000C)              
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x000060 (0x0004)              
	class UAnimTree*                                   LobbyAnimTree;                                    		// 0x000064 (0x0004)              
	TArray<class UMorphTargetSet*>                     MorphSets;                                        		// 0x000068 (0x000C)              
	class UTexture2D*                                  DiffuseMap;                                       		// 0x000074 (0x0004)              
	class UTexture2D*                                  NormalMap;                                        		// 0x000078 (0x0004)              
	class UTexture2D*                                  EmissiveMap;                                      		// 0x00007C (0x0004)              
	class UTexture2D*                                  DamagedNormal_ScratchMask;                        		// 0x000080 (0x0004)              
	class UTexture2D*                                  ScratchMask;                                      		// 0x000084 (0x0004)              
	class UTexture2D*                                  ScratchDiffuse_DirtDamageDustMask;                		// 0x000088 (0x0004)              
	class UTexture2D*                                  InteriorDiffuseMap;                               		// 0x00008C (0x0004)              
	class UTexture2D*                                  InteriorNormalMap;                                		// 0x000090 (0x0004)              
	class UTexture2D*                                  InteriorEmissiveMap;                              		// 0x000094 (0x0004)              
	int                                                MaterialMapLODBase[0x4];                          		// 0x000098 (0x0010)              
	int                                                MaterialMapLOD1[0x4];                             		// 0x0000A8 (0x0010)              
	int                                                MaterialMapLOD2[0x4];                             		// 0x0000B8 (0x0010)              
	class UcGolemobileShared*                          SharedData;                                       		// 0x0000C8 (0x0004)              
	TArray<struct FGolemProjectionArea>                ProjectionAreas;                                  		// 0x0000CC (0x000C)              
	TArray<struct FGolemobileLicensePlateData>         LicensePlates;                                    		// 0x0000D8 (0x000C)              
	class UTESTexture*                                 GlassPresetDecals;                                		// 0x0000E4 (0x0004)              
	float                                              LOD1Distance;                                     		// 0x0000E8 (0x0004)              
	float                                              LOD2Distance;                                     		// 0x0000EC (0x0004)              
	unsigned long                                      m_bDoubleSizeDiffuse : 1;                         		// 0x0000F0 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemobileBase");
		return pClassPointer;
	};
};
UClass* UGolemobileBase::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//GolemobileCommonParts[0x10389210]
class UGolemobileCommonParts : public UObject
{
public:
	TArray<struct FGolemobilePartType>                 aPartTypes;                                       		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemobileCommonParts");
		return pClassPointer;
	};
};
UClass* UGolemobileCommonParts::pClassPointer = NULL;

//0x000070 (0x0000B0 - 0x000040)
//GolemobilePart[0x103890E0]
class UGolemobilePart : public UObject
{
public:
	struct FString                                     UserName;                                         		// 0x000040 (0x000C)              
	struct FString                                     LinkedPartName;                                   		// 0x00004C (0x000C)              
	int                                                LinkedPartIndex;                                  		// 0x000058 (0x0004)              
	class UMorphTargetSet*                             ShapeMorphs;                                      		// 0x00005C (0x0004)              
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x000060 (0x0004)              
	class UTexture2D*                                  DiffuseMap;                                       		// 0x000064 (0x0004)              
	class UTexture2D*                                  NormalMap;                                        		// 0x000068 (0x0004)              
	class UTexture2D*                                  EmissiveMap;                                      		// 0x00006C (0x0004)              
	class USkeletalMesh*                               DamageSkeletalMesh;                               		// 0x000070 (0x0004)              
	class UTexture2D*                                  DamageDiffuseMap;                                 		// 0x000074 (0x0004)              
	class UTexture2D*                                  DamageNormalMap;                                  		// 0x000078 (0x0004)              
	int                                                m_nLightsPattern;                                 		// 0x00007C (0x0004)              
	TArray<class USkeletalMesh*>                       a_WheelSkeletalMeshes;                            		// 0x000080 (0x000C)              
	TArray<struct FName>                               a_sWheelSocketNames;                              		// 0x00008C (0x000C)              
	unsigned char                                      m_eAudioPartCategory;                             		// 0x000098 (0x0001)              PROPERTY: etAudioPartCategory
	unsigned char                                      _0x000099[0x3];                                   		// 0x000099 (0x0003) MISSED OFFSET
	int                                                m_nAudioPartIndex;                                		// 0x00009C (0x0004)              
	unsigned long                                      m_bColourCustomisable : 1;                        		// 0x0000A0 (0x0004) [0x00000001] 
	struct FString                                     PartTypeName;                                     		// 0x0000A4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemobilePart");
		return pClassPointer;
	};
};
UClass* UGolemobilePart::pClassPointer = NULL;

//0x000040 (0x000080 - 0x000040)
//GolemobilePartDescriptor[0x10388FB0]
class UGolemobilePartDescriptor : public UObject
{
public:
	struct FString                                     sObjectName;                                      		// 0x000040 (0x000C)              
	struct FString                                     sName;                                            		// 0x00004C (0x000C)              
	struct FString                                     sDisplayName;                                     		// 0x000058 (0x000C)              
	int                                                Index;                                            		// 0x000064 (0x0004)              
	class UGolemobilePart*                             part;                                             		// 0x000068 (0x0004)              
	unsigned long                                      bCommon : 1;                                      		// 0x00006C (0x0004) [0x00000001] 
	unsigned long                                      UseBaseColour : 1;                                		// 0x00006C (0x0004) [0x00000002] 
	struct FLinearColor                                HSLColour;                                        		// 0x000070 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemobilePartDescriptor");
		return pClassPointer;
	};
};
UClass* UGolemobilePartDescriptor::pClassPointer = NULL;

//0x000018 (0x000334 - 0x00031C)
//GolemSkeletalMesh[0x10388E80]
class UGolemSkeletalMesh : public USkeletalMesh
{
public:
	struct FTextureTransform                           aUVLayoutTransforms;                              		// 0x00031C (0x000C)              
	TArray<int>                                        aLODSizes;                                        		// 0x000328 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemSkeletalMesh");
		return pClassPointer;
	};
};
UClass* UGolemSkeletalMesh::pClassPointer = NULL;

//0x0000E8 (0x000348 - 0x000260)
//GolemSpawnerActor[0x10388D50]
class AGolemSpawnerActor : public AActor
{
public:
	class UClass*                                      characterPawnClass;                               		// 0x000260 (0x0004)              
	TArray<struct FActorDescriptorMap>                 spawnedCharacters;                                		// 0x000264 (0x000C)              
	int                                                nNumCharacterDescriptors;                         		// 0x000270 (0x0004)              
	struct FString                                     sCharacterDescriptorPrefix;                       		// 0x000274 (0x000C)              
	TArray<struct FDescriptorDataStream>               CharacterCompressedDescriptors;                   		// 0x000280 (0x000C)              
	TArray<struct FString>                             aEmotesAvailable;                                 		// 0x00028C (0x000C)              
	int                                                nMinRandomCharacterDescriptorRange;               		// 0x000298 (0x0004)              
	int                                                nMaxRandomCharacterDescriptorRange;               		// 0x00029C (0x0004)              
	float                                              fRandomCharacterSpawnRadius;                      		// 0x0002A0 (0x0004)              
	float                                              fRandomCharacterSpawnFrequency;                   		// 0x0002A4 (0x0004)              
	float                                              fRandomCharacterDespawnFrequency;                 		// 0x0002A8 (0x0004)              
	int                                                nNumMaxRandomCharacters;                          		// 0x0002AC (0x0004)              
	int                                                nRandomCharactersSpawned;                         		// 0x0002B0 (0x0004)              
	int                                                nRandomCharacterLastDescriptorUsed;               		// 0x0002B4 (0x0004)              
	float                                              fRandomCharacterTimeSinceLastSpawn;               		// 0x0002B8 (0x0004)              
	float                                              fRandomCharacterTimeSinceLastDespawn;             		// 0x0002BC (0x0004)              
	FVector3                                           vRandomCharacterSpawnCentreLocation;              		// 0x0002C0 (0x000C)              
	TArray<class UcCompressedAssetCustomisation*>      m_aCompressedCharacterData;                       		// 0x0002CC (0x000C)              
	class UClass*                                      vehiclePawnClass;                                 		// 0x0002D8 (0x0004)              
	TArray<struct FActorDescriptorMap>                 spawnedVehicles;                                  		// 0x0002DC (0x000C)              
	int                                                nNumVehicleDescriptors;                           		// 0x0002E8 (0x0004)              
	struct FString                                     sVehicleDescriptorPrefix;                         		// 0x0002EC (0x000C)              
	TArray<struct FDescriptorDataStream>               VehicleCompressedDescriptors;                     		// 0x0002F8 (0x000C)              
	int                                                nMinRandomVehicleDescriptorRange;                 		// 0x000304 (0x0004)              
	int                                                nMaxRandomVehicleDescriptorRange;                 		// 0x000308 (0x0004)              
	float                                              fRandomVehicleSpawnRadius;                        		// 0x00030C (0x0004)              
	float                                              fRandomVehicleSpawnFrequency;                     		// 0x000310 (0x0004)              
	float                                              fRandomVehicleDespawnFrequency;                   		// 0x000314 (0x0004)              
	int                                                nNumMaxRandomVehicles;                            		// 0x000318 (0x0004)              
	int                                                nRandomVehiclesSpawned;                           		// 0x00031C (0x0004)              
	int                                                nRandomVehicleLastDescriptorUsed;                 		// 0x000320 (0x0004)              
	float                                              fRandomVehicleTimeSinceLastSpawn;                 		// 0x000324 (0x0004)              
	float                                              fRandomVehicleTimeSinceLastDespawn;               		// 0x000328 (0x0004)              
	FVector3                                           vRandomVehicleSpawnCentreLocation;                		// 0x00032C (0x000C)              
	TArray<class UcCompressedAssetCustomisation*>      m_aCompressedVehicleData;                         		// 0x000338 (0x000C)              
	class AcAPBPlayerController*                       m_OwnerPC;                                        		// 0x000344 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemSpawnerActor");
		return pClassPointer;
	};

public:
	void SpawnRandomVehicles(int nNumVehicles,float fSpawnRadius,float fSpawnFrequency,float fDespawnFrequency);//APBGame.GolemSpawnerActor.SpawnRandomVehicles
	void SetVehicleRotation(int nVehicleIndex,FRotator vehicleRotation);//APBGame.GolemSpawnerActor.SetVehicleRotation
	void SetRandomCharacterDescriptorRange(int nMin,int nMax);//APBGame.GolemSpawnerActor.SetRandomCharacterDescriptorRange
	void SetRandomEmotes(bool bPlay);//APBGame.GolemSpawnerActor.SetRandomEmotes
	void DestroyAllCharacters();//APBGame.GolemSpawnerActor.DestroyAllCharacters
	void SpawnCharacterAtPlayerLocation(int nDescriptorIndex);//APBGame.GolemSpawnerActor.SpawnCharacterAtPlayerLocation
	void FindEmotes();//APBGame.GolemSpawnerActor.FindEmotes
	void SetAssetDescriptorTrace(int nDescriptorIndex);//APBGame.GolemSpawnerActor.SetAssetDescriptorTrace
	void SetCharacterRandomEmoteTrace(bool bPlay);//APBGame.GolemSpawnerActor.SetCharacterRandomEmoteTrace
	void SetEmoteStatus(bool bPlay);//APBGame.GolemSpawnerActor.SetEmoteStatus
	void SetCharacterPosition(int nCharacterIndex,FVector3 characterLocation);//APBGame.GolemSpawnerActor.SetCharacterPosition
	void SetCharacterRandomEmote(int nCharacterIndex,bool bPlay);//APBGame.GolemSpawnerActor.SetCharacterRandomEmote
	void Tick(float DeltaTime);//APBGame.GolemSpawnerActor.Tick
	struct FAssetTraceResult GetAssetTrace();//APBGame.GolemSpawnerActor.GetAssetTrace
	void PostBeginPlay();//APBGame.GolemSpawnerActor.PostBeginPlay
	void SpawnVehicleAtPlayerLocation(int nDescriptorIndex);//APBGame.GolemSpawnerActor.SpawnVehicleAtPlayerLocation
	void SpawnVehicleAtRandomLocation();//APBGame.GolemSpawnerActor.SpawnVehicleAtRandomLocation
	void SetRandomVehicleDescriptorRange(int nMin,int nMax);//APBGame.GolemSpawnerActor.SetRandomVehicleDescriptorRange
	void SetCharacterCustomisation(class AcAPBPawn* pPawn,class UcCompressedAssetCustomisation* pCAC);//APBGame.GolemSpawnerActor.SetCharacterCustomisation
	int SpawnCharacter(FVector3 characterLocation,FRotator characterRotation,int nDescriptorIndex,struct FString emoteName,bool bPlayEmote);//APBGame.GolemSpawnerActor.SpawnCharacter
	void SetVehicleDescriptor(int nVehicleIndex,int nDescriptorIndex);//APBGame.GolemSpawnerActor.SetVehicleDescriptor
	void SetCharacterEmoteStatus(int nCharacterIndex,bool bPlay);//APBGame.GolemSpawnerActor.SetCharacterEmoteStatus
	void SetCharacterEmote(int nCharacterIndex,struct FString emoteName,bool bPlay);//APBGame.GolemSpawnerActor.SetCharacterEmote
	void SetCharacterRotation(int nCharacterIndex,FRotator characterRotation);//APBGame.GolemSpawnerActor.SetCharacterRotation
	void DestroyVehicle(int nVehicleIndex);//APBGame.GolemSpawnerActor.DestroyVehicle
	void SpawnRandomCharacters(int nNumCharacters,float fSpawnRadius,float fSpawnFrequency,float fDespawnFrequency);//APBGame.GolemSpawnerActor.SpawnRandomCharacters
	class UcCompressedAssetCustomisation* LoadCustomisationFromDisk(unsigned char eType,struct FString sFileName);//APBGame.GolemSpawnerActor.LoadCustomisationFromDisk
	void DestroyAllVehicles();//APBGame.GolemSpawnerActor.DestroyAllVehicles
	void DestroyCharacter(int nCharacterIndex);//APBGame.GolemSpawnerActor.DestroyCharacter
	int SpawnVehicle(FVector3 vehicleLocation,FRotator vehicleRotation,int nDescriptorIndex);//APBGame.GolemSpawnerActor.SpawnVehicle
	void SetCharacterEmoteStatusTrace(bool bPlay);//APBGame.GolemSpawnerActor.SetCharacterEmoteStatusTrace
	void SetVehiclePosition(int nVehicleIndex,FVector3 vehicleLocation);//APBGame.GolemSpawnerActor.SetVehiclePosition
	void SetCharacterEmoteTrace(struct FString emoteName,bool bPlay);//APBGame.GolemSpawnerActor.SetCharacterEmoteTrace
	bool FindValidSpawnHeight(FVector3 vGolemLocation,FVector3* vSpawnLocation,int* nFailedPositionMidAir);//APBGame.GolemSpawnerActor.FindValidSpawnHeight
	void SpawnCharacterAtRandomLocation();//APBGame.GolemSpawnerActor.SpawnCharacterAtRandomLocation
	void DestroyAssetTrace();//APBGame.GolemSpawnerActor.DestroyAssetTrace
	void SetCharacterDescriptor(int nCharacterIndex,int nDescriptorIndex);//APBGame.GolemSpawnerActor.SetCharacterDescriptor
	void SetVehicleCustomisation(class AcAPBVehicleBase* pVehicle,class UcCompressedAssetCustomisation* pCAC);//APBGame.GolemSpawnerActor.SetVehicleCustomisation
};
UClass* AGolemSpawnerActor::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//GolemTextureBaker[0x10388C20]
class UGolemTextureBaker : public UObject
{
public:
	class UcGolemRenderTarget*                         m_pWorkTex;                                       		// 0x000040 (0x0004)              
	unsigned long                                      m_bIsBaking : 1;                                  		// 0x000044 (0x0004) [0x00000001] 
	DWORD                                              m_pCanvas;                                        		// 0x000048 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.GolemTextureBaker");
		return pClassPointer;
	};

public:
	void End();//APBGame.GolemTextureBaker.End
	void SetRenderTarget(class UcGolemRenderTarget* pTexture);//APBGame.GolemTextureBaker.SetRenderTarget
	void RenderFull(class UMaterialInterface* pMaterial,int nBorderSize);//APBGame.GolemTextureBaker.RenderFull
	bool IsBaking();//APBGame.GolemTextureBaker.IsBaking
	void Render(struct FTextureTransform* Transform,class UObject* pElement,class UMaterialInterface* pMaterial,bool SetMaterialParameters);//APBGame.GolemTextureBaker.Render
	void Begin(class UcGolemRenderTarget* pTexture);//APBGame.GolemTextureBaker.Begin
	void Clear(struct FLinearColor Col);//APBGame.GolemTextureBaker.Clear
};
UClass* UGolemTextureBaker::pClassPointer = NULL;

//0x000084 (0x0000C4 - 0x000040)
//TESLayer[0x10388AF0]
class UTESLayer : public UObject
{
public:
	TArray<FVector2>                                   m_MatRows;                                        		// 0x000040 (0x000C)              
	class UcSymbolDescriptor*                          Symbol;                                           		// 0x00004C (0x0004)              
	int                                                nPrimitive;                                       		// 0x000050 (0x0004)              
	int                                                nPrimitiveGuid;                                   		// 0x000054 (0x0004)              
	class UTexture*                                    Mask;                                             		// 0x000058 (0x0004)              
	unsigned long                                      bInvertMask : 1;                                  		// 0x00005C (0x0004) [0x00000001] 
	struct FLinearColor                                HSLColour;                                        		// 0x000060 (0x0010)              
	struct FString                                     sDisplayName;                                     		// 0x000070 (0x000C)              
	unsigned char                                      TextureAddressMode;                               		// 0x00007C (0x0001)              PROPERTY: etTextureAddress
	unsigned char                                      TextureBlendMode;                                 		// 0x00007D (0x0001)              PROPERTY: etTextureBlend
	unsigned char                                      _0x00007E[0x2];                                   		// 0x00007E (0x0002) MISSED OFFSET
	struct FProjectionParameters                       Projection;                                       		// 0x000080 (0x0030)              
	struct FTransformsParameters                       Transforms;                                       		// 0x0000B0 (0x0014)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.TESLayer");
		return pClassPointer;
	};
};
UClass* UTESLayer::pClassPointer = NULL;

//0x00001C (0x00005C - 0x000040)
//TESTextureBuilder[0x103889C0]
class UTESTextureBuilder : public UObject
{
public:
	DWORD                                              m_pDepthRenderTarget;                             		// 0x000040 (0x0004)              
	int                                                m_nDepthTextureResolution;                        		// 0x000044 (0x0004)              
	class UTESTexture*                                 m_pTESTexture;                                    		// 0x000048 (0x0004)              
	unsigned long                                      m_bBuildInProgress : 1;                           		// 0x00004C (0x0004) [0x00000001] 
	class UcGolemRenderTarget*                         m_pRenderTarget;                                  		// 0x000050 (0x0004)              
	int                                                m_nLastLayerRendered;                             		// 0x000054 (0x0004)              
	DWORD                                              m_pRenderingThreadData;                           		// 0x000058 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.TESTextureBuilder");
		return pClassPointer;
	};

public:
	void Begin(class UTESTexture* TextureDescriptor,class UcGolemRenderTarget* TargetTexture,bool bWriteAlpha,bool bEnableDepthPass);//APBGame.TESTextureBuilder.Begin
	bool RenderNextLayer();//APBGame.TESTextureBuilder.RenderNextLayer
	class UTESTextureBuilder* RetTextureBuilder();//APBGame.TESTextureBuilder.RetTextureBuilder
	void RenderAll();//APBGame.TESTextureBuilder.RenderAll
	void End();//APBGame.TESTextureBuilder.End
	void Render(bool bClearRT,int LayerMinIdx,int LayerMaxIdx);//APBGame.TESTextureBuilder.Render
	void DilateTexture(class UcGolemRenderTarget* pTargetTexture,class UcGolemRenderTarget* pMaskTexture,class UcGolemRenderTarget* pTempTexture,int nNumPixels);//APBGame.TESTextureBuilder.DilateTexture
};
UClass* UTESTextureBuilder::pClassPointer = NULL;

//0x00003C (0x00007C - 0x000040)
//TESTextureClass[0x10388890]
class UTESTextureClass : public UObject
{
public:
	struct FString                                     m_sName;                                          		// 0x000040 (0x000C)              
	unsigned char                                      m_eType;                                          		// 0x00004C (0x0001)              PROPERTY: etTESPrimitiveType
	unsigned char                                      _0x00004D[0x3];                                   		// 0x00004D (0x0003) MISSED OFFSET
	TArray<class UTexture2D*>                          Textures;                                         		// 0x000050 (0x000C)              
	TArray<struct FTESPrimitive>                       m_aPrimitives;                                    		// 0x00005C (0x000C)              
	TArray<class UMaterialInterface*>                  m_aFillEffects;                                   		// 0x000068 (0x000C)              
	int                                                m_nCostAPBCash;                                   		// 0x000074 (0x0004)              
	int                                                m_nCostRewardTokens;                              		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.TESTextureClass");
		return pClassPointer;
	};

public:
	int GetCostRewardTokens();//APBGame.TESTextureClass.GetCostRewardTokens
	int GetCostAPBCash();//APBGame.TESTextureClass.GetCostAPBCash
};
UClass* UTESTextureClass::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//VehicleMaskTemplate[0x10388760]
class UVehicleMaskTemplate : public UObject
{
public:
	TArray<struct FString>                             MaskSlots;                                        		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.VehicleMaskTemplate");
		return pClassPointer;
	};
};
UClass* UVehicleMaskTemplate::pClassPointer = NULL;

//0x00003C (0x00007C - 0x000040)
//cGolemobileShared[0x10388630]
class UcGolemobileShared : public UObject
{
public:
	class UTexture2D*                                  DamagedNormal;                                    		// 0x000040 (0x0004)              
	class UTexture2D*                                  ScratchMask;                                      		// 0x000044 (0x0004)              
	class UTexture2D*                                  ScratchDiffuse_DirtDamageDustMask;                		// 0x000048 (0x0004)              
	int                                                MaterialMapLODBase[0x4];                          		// 0x00004C (0x0010)              
	int                                                MaterialMapLOD1[0x4];                             		// 0x00005C (0x0010)              
	int                                                MaterialMapLOD2[0x4];                             		// 0x00006C (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGolemobileShared");
		return pClassPointer;
	};
};
UClass* UcGolemobileShared::pClassPointer = NULL;

//0x000024 (0x000064 - 0x000040)
//cFeatureEmissiveManager[0x10388500]
class UcFeatureEmissiveManager : public UcFeatureEmissiveManagerBase
{
public:
	TArray<struct FcFeatureEmissivePeriod>             m_aPeriods;                                       		// 0x000040 (0x000C)              
	float                                              m_fTransitionTime;                                		// 0x00004C (0x0004)              
	int                                                m_nIncidentalTransitionsPerDay;                   		// 0x000050 (0x0004)              
	TArray<class AcStreamedBuildingActor*>             m_aBuildings;                                     		// 0x000054 (0x000C)              
	int                                                m_nUpdateIndex;                                   		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cFeatureEmissiveManager");
		return pClassPointer;
	};
};
UClass* UcFeatureEmissiveManager::pClassPointer = NULL;

//0x00000C (0x00026C - 0x000260)
//cFeatureGroupCollectionActor[0x103883D0]
class AcFeatureGroupCollectionActor : public AActor
{
public:
	TArray<class UFeatureGroupComponent*>              FeatureGroupComponents;                           		// 0x000260 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cFeatureGroupCollectionActor");
		return pClassPointer;
	};
};
UClass* AcFeatureGroupCollectionActor::pClassPointer = NULL;

//0x000004 (0x0004B4 - 0x0004B0)
//cSkeletalMeshComponentActiveFeature[0x103882A0]
class UcSkeletalMeshComponentActiveFeature : public USkeletalMeshComponent
{
public:
	class AcStreamedBuildingActor*                     m_Building;                                       		// 0x0004B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkeletalMeshComponentActiveFeature");
		return pClassPointer;
	};
};
UClass* UcSkeletalMeshComponentActiveFeature::pClassPointer = NULL;

//0x000018 (0x00027C - 0x000264)
//cStreamedLightingStaticMeshActor[0x10388170]
class AcStreamedLightingStaticMeshActor : public AStaticMeshActor
{
public:
	DWORD                                              VfTable_cObjectStreamingCallback;                 		// 0x000264 (0x0004)              
	DWORD                                              VfTable_iLightweightStreamedObject;               		// 0x000268 (0x0004)              
	unsigned long                                      m_bStreamedIn : 1;                                		// 0x00026C (0x0004) [0x00000001] 
	unsigned long                                      m_bModifiedAndUnsaved : 1;                        		// 0x00026C (0x0004) [0x00000002] 
	TArray<struct FcStreamedLightingLODInfo>           LODData;                                          		// 0x000270 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStreamedLightingStaticMeshActor");
		return pClassPointer;
	};
};
UClass* AcStreamedLightingStaticMeshActor::pClassPointer = NULL;

//0x000040 (0x000080 - 0x000040)
//cTextureStreamingTracker[0x10388040]
class UcTextureStreamingTracker : public UObject
{
public:
	unsigned long                                      m_bTracking : 1;                                  		// 0x000040 (0x0004) [0x00000001] 
	struct FMap_Mirror                                 m_TrackedTextures;                                		// 0x000044 (0x003C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTextureStreamingTracker");
		return pClassPointer;
	};
};
UClass* UcTextureStreamingTracker::pClassPointer = NULL;

//0x000040 (0x0002A8 - 0x000268)
//CurveLight[0x10387F10]
class ACurveLight : public ALight
{
public:
	struct FRawDistributionVector                      m_ColourCurve;                                    		// 0x000268 (0x001C)              
	unsigned long                                      m_bNormaliseColours : 1;                          		// 0x000284 (0x0004) [0x00000001] 
	struct FRawDistributionFloat                       m_BrightnessCurve;                                		// 0x000288 (0x001C)              
	float                                              m_fBrightnessFactor;                              		// 0x0002A4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.CurveLight");
		return pClassPointer;
	};
};
UClass* ACurveLight::pClassPointer = NULL;

//0x000004 (0x0002AC - 0x0002A8)
//SkyCurveLight[0x10387DE0]
class ASkyCurveLight : public ACurveLight
{
public:
	float                                              m_fLowerBrightnessScalar;                         		// 0x0002A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.SkyCurveLight");
		return pClassPointer;
	};
};
UClass* ASkyCurveLight::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//FeatureGroupActor[0x10387CB0]
class AFeatureGroupActor : public AActor
{
public:
	class UFeatureGroupComponent*                      m_FeatureGroupComponent;                          		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.FeatureGroupActor");
		return pClassPointer;
	};
};
UClass* AFeatureGroupActor::pClassPointer = NULL;

//0x000090 (0x000270 - 0x0001E0)
//FeatureGroupComponent[0x10387B80]
class UFeatureGroupComponent : public UPrimitiveComponent
{
public:
	DWORD                                              VfTable_cObjectStreamingCallback;                 		// 0x0001E0 (0x0004)              
	DWORD                                              VfTable_iLightweightStreamedObject;               		// 0x0001E4 (0x0004)              
	TArray<struct FcFeatureInfo>                       m_aFeatures;                                      		// 0x0001E8 (0x000C)              
	int                                                m_nMergedLOD;                                     		// 0x0001F4 (0x0004)              
	float                                              m_fMergeDistance;                                 		// 0x0001F8 (0x0004)              
	class ABuildingActor*                              m_Building;                                       		// 0x0001FC (0x0004)              
	class AcStreamedBuildingActor*                     m_StreamedBuilding;                               		// 0x000200 (0x0004)              
	DWORD                                              m_MergedWireframeColour;                          		// 0x000204 (0x0004)              
	DWORD                                              m_DiscreteWireframeColour;                        		// 0x000208 (0x0004)              
	int                                                SubDivisionStepSize;                              		// 0x00020C (0x0004)              
	int                                                MinSubDivisions;                                  		// 0x000210 (0x0004)              
	int                                                MaxSubDivisions;                                  		// 0x000214 (0x0004)              
	unsigned long                                      bUseSubDivisions : 1;                             		// 0x000218 (0x0004) [0x00000001] 
	int                                                m_nForcedLOD;                                     		// 0x00021C (0x0004)              
	DWORD                                              m_pLightMap;                                      		// 0x000220 (0x0004)              
	TArray<struct FcStreamedShadowMap1D>               m_aStreamedShadowMaps;                            		// 0x000224 (0x000C)              
	struct FcStreamedShadowMap1D                       m_StreamedAOMap1D;                                		// 0x000230 (0x000C)              
	TArray<class UObject*>                             m_aShadowMaps;                                    		// 0x00023C (0x000C)              
	class UObject*                                     m_AOMap1D;                                        		// 0x000248 (0x0004)              
	DWORD                                              m_pVertexFactory;                                 		// 0x00024C (0x0004)              
	DWORD                                              m_pPositionBuffer;                                		// 0x000250 (0x0004)              
	DWORD                                              m_pVertexBuffer;                                  		// 0x000254 (0x0004)              
	DWORD                                              m_pIndexBuffer;                                   		// 0x000258 (0x0004)              
	int                                                m_ReleaseResourcesFence;                          		// 0x00025C (0x0004)              
	TArray<int>                                        m_aElements;                                      		// 0x000260 (0x000C)              
	unsigned long                                      m_bStreamedIn : 1;                                		// 0x00026C (0x0004) [0x00000001] 
	unsigned long                                      m_bModifiedAndUnsaved : 1;                        		// 0x00026C (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.FeatureGroupComponent");
		return pClassPointer;
	};
};
UClass* UFeatureGroupComponent::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//PointNightLight[0x10387A50]
class APointNightLight : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.PointNightLight");
		return pClassPointer;
	};
};
UClass* APointNightLight::pClassPointer = NULL;

//0x00000C (0x0004BC - 0x0004B0)
//SkeletalMeshDLODComponent[0x10387920]
class USkeletalMeshDLODComponent : public USkeletalMeshComponent
{
public:
	TArray<float>                                      m_afLODDistances;                                 		// 0x0004B0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.SkeletalMeshDLODComponent");
		return pClassPointer;
	};
};
UClass* USkeletalMeshDLODComponent::pClassPointer = NULL;

//0x000024 (0x000298 - 0x000274)
//SkeletalPropActor[0x103877F0]
class ASkeletalPropActor : public ASkeletalMeshActor
{
public:
	TArray<class USkeletalMesh*>                       m_aVariantMeshes;                                 		// 0x000274 (0x000C)              
	TArray<struct FMatInstanceArray>                   m_aMaterialInstances;                             		// 0x000280 (0x000C)              
	int                                                m_nCurrentVariant;                                		// 0x00028C (0x0004)              
	float                                              m_fCurrentMatDamage;                              		// 0x000290 (0x0004)              
	float                                              m_fCurrentEmissive;                               		// 0x000294 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.SkeletalPropActor");
		return pClassPointer;
	};

public:
	int RetVariant();//APBGame.SkeletalPropActor.RetVariant
	float RetMaterialDamageLevel();//APBGame.SkeletalPropActor.RetMaterialDamageLevel
	float RetEmissiveLevel();//APBGame.SkeletalPropActor.RetEmissiveLevel
	void SetEmissiveLevel(float fLevel);//APBGame.SkeletalPropActor.SetEmissiveLevel
	void SetVariant(int nVariant);//APBGame.SkeletalPropActor.SetVariant
	void SetMaterialDamageLevel(float fLevel);//APBGame.SkeletalPropActor.SetMaterialDamageLevel
};
UClass* ASkeletalPropActor::pClassPointer = NULL;

//0x000024 (0x000284 - 0x000260)
//SMPropActor[0x103876C0]
class ASMPropActor : public AActor
{
public:
	TArray<class UStaticMeshComponent*>                m_aVariants;                                      		// 0x000260 (0x000C)              
	TArray<class UMaterialInstanceConstant*>           m_aMaterialInstances;                             		// 0x00026C (0x000C)              
	int                                                m_nCurrentVariant;                                		// 0x000278 (0x0004)              
	float                                              m_fCurrentMatDamage;                              		// 0x00027C (0x0004)              
	float                                              m_fCurrentEmissive;                               		// 0x000280 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.SMPropActor");
		return pClassPointer;
	};

public:
	void SetVariant(int nVariant);//APBGame.SMPropActor.SetVariant
	float RetMaterialDamageLevel();//APBGame.SMPropActor.RetMaterialDamageLevel
	int RetVariant();//APBGame.SMPropActor.RetVariant
	void SetEmissiveLevel(float fLevel);//APBGame.SMPropActor.SetEmissiveLevel
	void SetMaterialDamageLevel(float fLevel);//APBGame.SMPropActor.SetMaterialDamageLevel
	float RetEmissiveLevel();//APBGame.SMPropActor.RetEmissiveLevel
};
UClass* ASMPropActor::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//SpotNightLight[0x10387590]
class ASpotNightLight : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.SpotNightLight");
		return pClassPointer;
	};
};
UClass* ASpotNightLight::pClassPointer = NULL;

//0x000000 (0x000264 - 0x000264)
//StaticMeshDLODActor[0x10387460]
class AStaticMeshDLODActor : public AStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.StaticMeshDLODActor");
		return pClassPointer;
	};
};
UClass* AStaticMeshDLODActor::pClassPointer = NULL;

//0x000010 (0x000274 - 0x000264)
//BuildingActor[0x10387330]
class ABuildingActor : public AStaticMeshDLODActor
{
public:
	class UTextureDynamicLookup*                       m_EmissiveLookupTexture;                          		// 0x000264 (0x0004)              
	unsigned long                                      m_bEmissiveLookupCreated : 1;                     		// 0x000268 (0x0004) [0x00000001] 
	class UMaterialInstanceConstant*                   m_FeatureMaterialInstance;                        		// 0x00026C (0x0004)              
	int                                                m_nNumFeatures;                                   		// 0x000270 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.BuildingActor");
		return pClassPointer;
	};

public:
	void SetFeatureEmissive(int nIndex,float fLevel);//APBGame.BuildingActor.SetFeatureEmissive
};
UClass* ABuildingActor::pClassPointer = NULL;

//0x000000 (0x000264 - 0x000264)
//RoadActor[0x10387200]
class ARoadActor : public AStaticMeshDLODActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RoadActor");
		return pClassPointer;
	};
};
UClass* ARoadActor::pClassPointer = NULL;

//0x000000 (0x000264 - 0x000264)
//TerrainActor[0x103870D0]
class ATerrainActor : public AStaticMeshDLODActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.TerrainActor");
		return pClassPointer;
	};
};
UClass* ATerrainActor::pClassPointer = NULL;

//0x00000C (0x00025C - 0x000250)
//StaticMeshDLODComponent[0x10386FA0]
class UStaticMeshDLODComponent : public UStaticMeshComponent
{
public:
	TArray<float>                                      m_afLODDistances;                                 		// 0x000250 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.StaticMeshDLODComponent");
		return pClassPointer;
	};
};
UClass* UStaticMeshDLODComponent::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//cActorFactoryAPBVehicle[0x10386E70]
class UcActorFactoryAPBVehicle : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                   		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cActorFactoryAPBVehicle");
		return pClassPointer;
	};
};
UClass* UcActorFactoryAPBVehicle::pClassPointer = NULL;

//0x000708 (0x000D50 - 0x000648)
//cAPBVehicleBase[0x10386D40]
class AcAPBVehicleBase : public ASVehicle
{
public:
	DWORD                                              VfTable_ICombatTargetingInterface;                		// 0x000648 (0x0004)              
	DWORD                                              VfTable_IDamageInterface;                         		// 0x00064C (0x0004)              
	DWORD                                              VfTable_IiAmmoCarrier;                            		// 0x000650 (0x0004)              
	DWORD                                              VfTable_IiRepairableVehicle;                      		// 0x000654 (0x0004)              
	DWORD                                              VfTable_IUseInterface;                            		// 0x000658 (0x0004)              
	DWORD                                              VfTable_IiModifiable;                             		// 0x00065C (0x0004)              
	DWORD                                              VfTable_IiNPCLookAt;                              		// 0x000660 (0x0004)              
	DWORD                                              VfTable_IiDeliverable;                            		// 0x000664 (0x0004)              
	DWORD                                              VfTable_ISpawnPointInterface;                     		// 0x000668 (0x0004)              
	unsigned char                                      m_eDriverPosition;                                		// 0x00066C (0x0001)              PROPERTY: etVehiclePositionIndex
	unsigned char                                      m_IndicatorLightActive;                           		// 0x00066D (0x0001)              PROPERTY: etIndicatorLightType
	unsigned char                                      m_NextIndicatorLightActive;                       		// 0x00066E (0x0001)              PROPERTY: etIndicatorLightType
	unsigned char                                      m_DriverIndicator;                                		// 0x00066F (0x0001)              PROPERTY: etIndicatorLightType
	unsigned char                                      m_maxExplodingTime;                               		// 0x000670 (0x0001)              PROPERTY: 
	unsigned char                                      vehicleType;                                      		// 0x000671 (0x0001)              PROPERTY: EVehicleType
	unsigned char                                      m_eOldVehicleSetupType;                           		// 0x000672 (0x0001)              PROPERTY: etVehicleSetupType
	unsigned char                                      m_eOldVehicleType;                                		// 0x000673 (0x0001)              PROPERTY: EVehicleType
	unsigned char                                      m_eBrainAndPhysRepState;                          		// 0x000674 (0x0001)              PROPERTY: etBrainAndPhysRepState
	unsigned char                                      m_eBrainAndPhysRepState_Replicated;               		// 0x000675 (0x0001)              PROPERTY: etBrainAndPhysRepState
	unsigned char                                      m_eStoppingReason;                                		// 0x000676 (0x0001)              PROPERTY: 
	unsigned char                                      m_LastUsedPositionID;                             		// 0x000677 (0x0001)              PROPERTY: 
	unsigned char                                      m_LastUsedSpeedID;                                		// 0x000678 (0x0001)              PROPERTY: 
	unsigned char                                      m_eInitialTheftFaction;                           		// 0x000679 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_nTaskOwningCollisionGroupID;                    		// 0x00067A (0x0001)              PROPERTY: 
	unsigned char                                      m_nMissionTaskItemInsideOwningCollisionGroupID;   		// 0x00067B (0x0001)              PROPERTY: 
	unsigned char                                      m_nUsingCollisionGroupID;                         		// 0x00067C (0x0001)              PROPERTY: 
	unsigned char                                      m_eSpawnState;                                    		// 0x00067D (0x0001)              PROPERTY: etVehicleSpawnState
	unsigned char                                      _0x00067E[0x2];                                   		// 0x00067E (0x0002) MISSED OFFSET
	struct FName                                       m_aWindowNames[0x4];                              		// 0x000680 (0x0020)              
	int                                                m_aWindowOpen[0x4];                               		// 0x0006A0 (0x0010)              
	TArray<struct FAPBVehicleSeat>                     m_aSeats;                                         		// 0x0006B0 (0x000C)              
	TArray<struct FAPBVehicleDoor>                     m_aDoors;                                         		// 0x0006BC (0x000C)              
	TArray<struct FAPBVehicleSocket>                   m_aVAPs;                                          		// 0x0006C8 (0x000C)              
	TArray<struct FAPBVehicleSocket>                   m_aCSAGroundPositions;                            		// 0x0006D4 (0x000C)              
	TArray<struct FAPBVehicleVCP>                      m_aVCPs;                                          		// 0x0006E0 (0x000C)              
	class AcAPBPawn*                                   m_aSeatPawnsForWitnessing[0x4];                   		// 0x0006EC (0x0010)              
	class AcVehicleCargoInventory*                     m_CargoInventory;                                 		// 0x0006FC (0x0004)              
	unsigned long                                      m_bIsStoringTaskItems : 1;                        		// 0x000700 (0x0004) [0x00000001] 
	unsigned long                                      m_bHasExploded : 1;                               		// 0x000700 (0x0004) [0x00000002] 
	unsigned long                                      m_bDEBUGIsGoingToRespawn : 1;                     		// 0x000700 (0x0004) [0x00000004] 
	unsigned long                                      m_bClientHUDMarkerEnabled : 1;                    		// 0x000700 (0x0004) [0x00000008] 
	unsigned long                                      m_bIsAmmoCarrierDeployed : 1;                     		// 0x000700 (0x0004) [0x00000010] 
	unsigned long                                      m_bIsRepairing : 1;                               		// 0x000700 (0x0004) [0x00000020] 
	unsigned long                                      m_bTouchingRepairPoint : 1;                       		// 0x000700 (0x0004) [0x00000040] 
	unsigned long                                      m_bNPCDriverComponentInitialised : 1;             		// 0x000700 (0x0004) [0x00000080] 
	unsigned long                                      m_bShowingHeightTimer : 1;                        		// 0x000700 (0x0004) [0x00000100] 
	unsigned long                                      m_bUsingProperAsset : 1;                          		// 0x000700 (0x0004) [0x00000200] 
	unsigned long                                      m_bEnableSpecialLights : 1;                       		// 0x000700 (0x0004) [0x00000400] 
	unsigned long                                      m_bEnableVehicleHorn : 1;                         		// 0x000700 (0x0004) [0x00000800] 
	unsigned long                                      m_bVehicleHasTailLights : 1;                      		// 0x000700 (0x0004) [0x00001000] 
	unsigned long                                      m_bVehicleDelivered : 1;                          		// 0x000700 (0x0004) [0x00002000] 
	unsigned long                                      m_bDeliveredVehicleCleanUpTimerElapsed : 1;       		// 0x000700 (0x0004) [0x00004000] 
	unsigned long                                      m_bMissionVehicleCleanUpTimerElapsed : 1;         		// 0x000700 (0x0004) [0x00008000] 
	unsigned long                                      m_bVehicleBrokenInto : 1;                         		// 0x000700 (0x0004) [0x00010000] 
	unsigned long                                      m_bVehicleHotwired : 1;                           		// 0x000700 (0x0004) [0x00020000] 
	unsigned long                                      m_bVehicleNeedsHotwiring : 1;                     		// 0x000700 (0x0004) [0x00040000] 
	unsigned long                                      m_bIsLocked : 1;                                  		// 0x000700 (0x0004) [0x00080000] 
	unsigned long                                      m_bDisallowAllUse : 1;                            		// 0x000700 (0x0004) [0x00100000] 
	unsigned long                                      m_bHasAlarm : 1;                                  		// 0x000700 (0x0004) [0x00200000] 
	unsigned long                                      m_bAlarmGoingOff : 1;                             		// 0x000700 (0x0004) [0x00400000] 
	unsigned long                                      m_bDoOldAlarm : 1;                                		// 0x000700 (0x0004) [0x00800000] 
	unsigned long                                      m_bIsRecycleComplete : 1;                         		// 0x000700 (0x0004) [0x01000000] 
	unsigned long                                      m_bDeployedOwnerValid : 1;                        		// 0x000700 (0x0004) [0x02000000] 
	unsigned long                                      m_bIsGameplayOverrideVehicle : 1;                 		// 0x000700 (0x0004) [0x04000000] 
	unsigned long                                      m_bTransientRecycleTimerElapsed : 1;              		// 0x000700 (0x0004) [0x08000000] 
	unsigned long                                      m_bRecycleDeployedVehicleByTelefrag : 1;          		// 0x000700 (0x0004) [0x10000000] 
	unsigned long                                      m_bAllowAutoAssignCollisionCategory : 1;          		// 0x000700 (0x0004) [0x20000000] 
	unsigned long                                      m_bAllowUseInAllDistricts : 1;                    		// 0x000700 (0x0004) [0x40000000] 
	unsigned long                                      m_bInsideSpawnBlockingVolume : 1;                 		// 0x000700 (0x0004) [0x80000000] 
	unsigned long                                      m_bHasBeenUsedByPlayer : 1;                       		// 0x000704 (0x0004) [0x00000001] 
	unsigned long                                      m_bHasBeenPlayerCollisionCategory : 1;            		// 0x000704 (0x0004) [0x00000002] 
	unsigned long                                      m_bVehicleFieldSupplierModifierActive : 1;        		// 0x000704 (0x0004) [0x00000004] 
	unsigned long                                      m_bBrickOnAccelerator : 1;                        		// 0x000704 (0x0004) [0x00000008] 
	unsigned long                                      m_bVehicleSpawningModifierActive : 1;             		// 0x000704 (0x0004) [0x00000010] 
	unsigned long                                      m_bRemoteDetonationActive : 1;                    		// 0x000704 (0x0004) [0x00000020] 
	unsigned long                                      m_bMufflerActive : 1;                             		// 0x000704 (0x0004) [0x00000040] 
	unsigned long                                      m_bCriticallyDamaged : 1;                         		// 0x000704 (0x0004) [0x00000080] 
	class UGolemobile*                                 m_pGolemobile;                                    		// 0x000708 (0x0004)              
	TArray<float>                                      m_afDamage;                                       		// 0x00070C (0x000C)              
	TArray<float>                                      m_afExtremeDamage;                                		// 0x000718 (0x000C)              
	TArray<unsigned long>                              m_abWheelDamage;                                  		// 0x000724 (0x000C)              
	int                                                m_ExplosionType;                                  		// 0x000730 (0x0004)              
	class AcAPBPlayerController*                       m_LastDamageController;                           		// 0x000734 (0x0004)              
	class AcAPBPlayerController*                       m_LastDriverController;                           		// 0x000738 (0x0004)              
	float                                              m_fLastDamageTimer;                               		// 0x00073C (0x0004)              
	float                                              m_fNeutralDamageTimer;                            		// 0x000740 (0x0004)              
	class AcAPBPlayerController*                       m_LastRBInstigatorController;                     		// 0x000744 (0x0004)              
	float                                              m_fLastRBInstigatorTimer;                         		// 0x000748 (0x0004)              
	int                                                m_DamageVFX_FinalStateOverride;                   		// 0x00074C (0x0004)              
	int                                                m_nMaxHealth;                                     		// 0x000750 (0x0004)              
	int                                                m_eDamageHandlingEffectIndex;                     		// 0x000754 (0x0004)              
	DWORD                                              m_pCurrentDamageHandlingEffect;                   		// 0x000758 (0x0004)              
	double                                             m_fLastTimeIndicatorLightToggled;                 		// 0x00075C (0x0008)              
	float                                              m_fCriticalDamageRate;                            		// 0x000764 (0x0004)              
	float                                              m_fDamageRemainder;                               		// 0x000768 (0x0004)              
	int                                                m_nVisualDamage;                                  		// 0x00076C (0x0004)              
	int                                                m_nVisualDamageMisc;                              		// 0x000770 (0x0004)              
	float                                              m_fVisualDamageArmour;                            		// 0x000774 (0x0004)              
	float                                              m_fFinalDamageArmour;                             		// 0x000778 (0x0004)              
	float                                              m_fLightDamageThreshold;                          		// 0x00077C (0x0004)              
	float                                              m_fCollisionDamageThreshold;                      		// 0x000780 (0x0004)              
	int                                                m_nLastHealth;                                    		// 0x000784 (0x0004)              
	double                                             m_lastExternalDamageTime;                         		// 0x000788 (0x0008)              
	class UcPseudoKinematicComponent*                  pseudoKinComp;                                    		// 0x000790 (0x0004)              
	unsigned char                                      _0x000794[0xC];                                   		// 0x000794 (0x000C) MISSED OFFSET
	struct FRigidBodyState                             replicatedRBState;                                		// 0x0007A0 (0x0040)              
	float                                              fTimeDisable;                                     		// 0x0007E0 (0x0004)              
	float                                              fTimeRespawn;                                     		// 0x0007E4 (0x0004)              
	float                                              fTimeCleanUp;                                     		// 0x0007E8 (0x0004)              
	float                                              m_fViewingAngle;                                  		// 0x0007EC (0x0004)              
	float                                              m_fViewingDistance;                               		// 0x0007F0 (0x0004)              
	int                                                m_nHUDMarkerID;                                   		// 0x0007F4 (0x0004)              
	struct FName                                       m_sCurrentState;                                  		// 0x0007F8 (0x0008)              
	struct FAPBVehicleStateFSM                         stReplicatedStateFSM;                             		// 0x000800 (0x000C)              
	FVector3                                           InitialLocation;                                  		// 0x00080C (0x000C)              
	FRotator                                           InitialRotation;                                  		// 0x000818 (0x000C)              
	FVector3                                           m_VehicleExtents;                                 		// 0x000824 (0x000C)              
	class UcAmmoDepotComponent*                        m_AmmoCarrierComponent;                           		// 0x000830 (0x0004)              
	double                                             m_fLastTakeDamageTimeStamp;                       		// 0x000834 (0x0008)              
	float                                              m_fRepairPercentage;                              		// 0x00083C (0x0004)              
	int                                                m_nPointsRepaired;                                		// 0x000840 (0x0004)              
	DWORD                                              m_pActiveRepairSession;                           		// 0x000844 (0x0004)              
	class UcNPCDriverSkeletalMeshComponent*            NPCDriverMesh;                                    		// 0x000848 (0x0004)              
	int                                                m_nID;                                            		// 0x00084C (0x0004)              
	int                                                m_nTypeID;                                        		// 0x000850 (0x0004)              
	float                                              m_fLocomotionSpeed;                               		// 0x000854 (0x0004)              
	struct FSReactionIDReplicated                      m_ReactionID_Replicated;                          		// 0x000858 (0x0004)              
	class UcNPCVehicleBrain*                           m_pBrain;                                         		// 0x00085C (0x0004)              
	int                                                m_bNPCDriverUsingProperAsset;                     		// 0x000860 (0x0004)              
	int                                                m_nVehicleCategory;                               		// 0x000864 (0x0004)              
	float                                              m_fSafeHeightTimer;                               		// 0x000868 (0x0004)              
	class UcAudioNPCInterface*                         m_AudioNPCInterface;                              		// 0x00086C (0x0004)              
	struct FSpeedInfo                                  m_SpeedData_Replicated;                           		// 0x000870 (0x003C)              
	struct FSpeedInfo                                  m_SpeedData_ReplicatedInitial;                    		// 0x0008AC (0x003C)              
	struct FPositionAndOrientationInfo                 m_PositionAndOrientation_ReplicatedInitial;       		// 0x0008E8 (0x002C)              
	struct FPositionAndOrientationInfo                 m_PositionAndOrientation_Replicated;              		// 0x000914 (0x002C)              
	float                                              m_fOffsetFromLaneCenter;                          		// 0x000940 (0x0004)              
	struct Fuint                                       m_LastReplicatedRouteIndex;                       		// 0x000944 (0x0004)              
	struct Fuint                                       m_LastReplicatedDetourRouteIndices[0x3];          		// 0x000948 (0x000C)              
	FVector3                                           m_vFarOffset;                                     		// 0x000954 (0x000C)              
	FVector3                                           m_vWorstOffset;                                   		// 0x000960 (0x000C)              
	float                                              m_fFarCamDist;                                    		// 0x00096C (0x0004)              
	class UTexture2D*                                  WreckedVehicleDiffuse;                            		// 0x000970 (0x0004)              
	class UTexture2D*                                  WreckedVehicleDiffuseNoAlpha;                     		// 0x000974 (0x0004)              
	class UTexture2D*                                  WreckedVehicleNormal;                             		// 0x000978 (0x0004)              
	class UTexture2D*                                  OriginalExteriorDiffuse;                          		// 0x00097C (0x0004)              
	class UTexture2D*                                  OriginalExteriorNormal;                           		// 0x000980 (0x0004)              
	class UTexture2D*                                  OriginalWheelDiffuse;                             		// 0x000984 (0x0004)              
	class UTexture2D*                                  OriginalWheelNormal;                              		// 0x000988 (0x0004)              
	class UTexture2D*                                  OriginalInteriorDiffuse;                          		// 0x00098C (0x0004)              
	class UTexture2D*                                  OriginalInteriorNormal;                           		// 0x000990 (0x0004)              
	int                                                m_nAudioEngineType;                               		// 0x000994 (0x0004)              
	int                                                m_nAudioExhaustType;                              		// 0x000998 (0x0004)              
	int                                                m_nAudioTurboType;                                		// 0x00099C (0x0004)              
	int                                                m_nAudioTransmissionType;                         		// 0x0009A0 (0x0004)              
	int                                                m_nAudioDumpValveType;                            		// 0x0009A4 (0x0004)              
	int                                                m_nAudioGearChangeType;                           		// 0x0009A8 (0x0004)              
	int                                                m_nAudioHornType;                                 		// 0x0009AC (0x0004)              
	int                                                m_nAudioSirenType;                                		// 0x0009B0 (0x0004)              
	int                                                m_nAudioAmpType;                                  		// 0x0009B4 (0x0004)              
	int                                                m_nAudioSpeakerType;                              		// 0x0009B8 (0x0004)              
	float                                              m_fAudioWheelForceThreshold;                      		// 0x0009BC (0x0004)              
	float                                              m_fAudioWheelForceMax;                            		// 0x0009C0 (0x0004)              
	int                                                m_nMangledWwiseIDDoorOpenFront;                   		// 0x0009C4 (0x0004)              
	int                                                m_nMangledWwiseIDDoorOpenRearSide;                		// 0x0009C8 (0x0004)              
	int                                                m_nMangledWwiseIDDoorOpenBack;                    		// 0x0009CC (0x0004)              
	int                                                m_nMangledWwiseIDDoorCloseFront;                  		// 0x0009D0 (0x0004)              
	int                                                m_nMangledWwiseIDDoorCloseRearSide;               		// 0x0009D4 (0x0004)              
	int                                                m_nMangledWwiseIDDoorCloseBack;                   		// 0x0009D8 (0x0004)              
	int                                                m_nMangledWwiseIDSuspensionType;                  		// 0x0009DC (0x0004)              
	float                                              m_fAudioEnclosednessMax;                          		// 0x0009E0 (0x0004)              
	int                                                m_nMangledWwiseID_LC_VehicleType;                 		// 0x0009E4 (0x0004)              
	int                                                m_nMangledWwiseID_DamageType;                     		// 0x0009E8 (0x0004)              
	class UcAudioVehicleInterface*                     m_AudioVehicleInterface;                          		// 0x0009EC (0x0004)              
	float                                              m_fCargoRearWheelHeightReduction;                 		// 0x0009F0 (0x0004)              
	float                                              m_fUnclampedCargoRearWheelHeightReduction;        		// 0x0009F4 (0x0004)              
	struct FModifiableVehicleSetupTypeSettings         m_VehicleSetupTypeSettings;                       		// 0x0009F8 (0x009C)              
	struct FVehicleSetupTypeSettings                   m_ReplicatedVehicleSetupTypeSettingsNoMods;       		// 0x000A94 (0x0004)              
	int                                                m_nExplosionDamage;                               		// 0x000A98 (0x0004)              
	float                                              m_fExplosionRadius;                               		// 0x000A9C (0x0004)              
	float                                              m_fExplosionGroundZeroRadius;                     		// 0x000AA0 (0x0004)              
	float                                              m_fExplosionHardDamageModifier;                   		// 0x000AA4 (0x0004)              
	int                                                m_nExplosionStunDamage;                           		// 0x000AA8 (0x0004)              
	struct FVehicleMusicPlaybackInfo                   m_MusicPlaybackInfo;                              		// 0x000AAC (0x0020)              
	struct FVehicleMusicNameInfo                       m_MusicNameInfo;                                  		// 0x000ACC (0x0030)              
	class AcAPBPlayerController*                       m_pMusicOwner;                                    		// 0x000AFC (0x0004)              
	int                                                m_nTrackID;                                       		// 0x000B00 (0x0004)              
	float                                              m_fStyleVectorDistance;                           		// 0x000B04 (0x0004)              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x000B08 (0x0004)              
	DWORD                                              m_pSddVehicleSetupType;                           		// 0x000B0C (0x0004)              
	DWORD                                              m_pNPCDriverActor;                                		// 0x000B10 (0x0004)              
	class UMissionObjective*                           m_pMissionObjective;                              		// 0x000B14 (0x0004)              
	unsigned char                                      _0x000B18[0x4];                                   		// 0x000B18 (0x0004) ALIGNEMENT
	int                                                m_eDeliverableBatch;                              		// 0x000B1C (0x0004)              
	class AcTaskTargetVehicleSpawner*                  m_VehicleSpawner;                                 		// 0x000B20 (0x0004)              
	int                                                m_nMaxHealthOld;                                  		// 0x000B24 (0x0004)              
	int                                                m_eTaskOperationID;                               		// 0x000B28 (0x0004)              
	float                                              m_fTimeSinceLastRecycleCheck;                     		// 0x000B2C (0x0004)              
	float                                              m_fTimeSinceLastForcedRecycleCheck;               		// 0x000B30 (0x0004)              
	class UiDisplayPoint*                              m_OwningDisplayPoint;                             		// 0x000B34 (0x0004)              
	unsigned char                                      _0x000B38[0x4];                                   		// 0x000B38 (0x0004) ALIGNEMENT
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x000B3C (0x0004)              
	class UcBlobShadowComponent*                       BlobShadow;                                       		// 0x000B40 (0x0004)              
	class UcParticleDecalComponent*                    DecalTest;                                        		// 0x000B44 (0x0004)              
	struct FCompactGolemobileDescriptor                m_CustomisationGuids;                             		// 0x000B48 (0x0020)              
	struct FCompactGolemobileDescriptor                m_PreviousCustomisationGuids;                     		// 0x000B68 (0x0020)              
	int                                                m_nIncrementalID;                                 		// 0x000B88 (0x0004)              
	struct FNPCDriverData                              m_NPCDriverData;                                  		// 0x000B8C (0x0010)              
	struct FNPCDriverData                              m_NPCDriverDataOld;                               		// 0x000B9C (0x0010)              
	float                                              m_fAlarmFlashDelta;                               		// 0x000BAC (0x0004)              
	class AcAPBPlayerController*                       m_DeployedOwner;                                  		// 0x000BB0 (0x0004)              
	class AcAPBPlayerController*                       m_DeployedOwnerLastVaild;                         		// 0x000BB4 (0x0004)              
	float                                              m_fAbandonedTime;                                 		// 0x000BB8 (0x0004)              
	unsigned char                                      m_aActiveModifierItems[0x3C];                     		// 0x000BBC (0x003C)              UNKNOWN PROPERTY: MapProperty
	struct FMap_Mirror                                 m_ActiveModifierEffects;                          		// 0x000BF8 (0x003C)              
	struct FMap_Mirror                                 m_ActiveModifierItemEffects;                      		// 0x000C34 (0x003C)              
	float                                              m_fFurtherVAPAdjustAmount;                        		// 0x000C70 (0x0004)              
	int                                                m_nNPCLookAtEventID;                              		// 0x000C74 (0x0004)              
	int                                                m_nSirenWorldEventID;                             		// 0x000C78 (0x0004)              
	int                                                m_nHornWorldEventID;                              		// 0x000C7C (0x0004)              
	int                                                m_nNPCLookAtPriority;                             		// 0x000C80 (0x0004)              
	int                                                m_nNPCAvoidVehicleEventID;                        		// 0x000C84 (0x0004)              
	struct FPvPFlags                                   m_PvPFlags;                                       		// 0x000C88 (0x000C)              
	class UMaterialInstanceConstant*                   m_pDriverClothingMatInst;                         		// 0x000C94 (0x0004)              
	class UMaterialInstanceConstant*                   m_pDriverRacialMatInst;                           		// 0x000C98 (0x0004)              
	class UcSkelControlLCBodyRotation*                 m_pLCBodyRotationControl;                         		// 0x000C9C (0x0004)              
	double                                             m_fLastOutOfSyncReplicationTime;                  		// 0x000CA0 (0x0008)              
	float                                              m_fVehicleFieldSupplierRadius;                    		// 0x000CA8 (0x0004)              
	float                                              m_fDamageThresholdMultiplier;                     		// 0x000CAC (0x0004)              
	float                                              m_fVehicleCriticalMinDuration;                    		// 0x000CB0 (0x0004)              
	float                                              m_fVehicleCriticalMaxDuration;                    		// 0x000CB4 (0x0004)              
	float                                              m_fWeaponDamageMultiplier;                        		// 0x000CB8 (0x0004)              
	float                                              m_fCollisionDamageMultiplier;                     		// 0x000CBC (0x0004)              
	TArray<class AcTaskItem*>                          m_aTaskItemsSlowingDownTorque;                    		// 0x000CC0 (0x000C)              
	TArray<int>                                        m_aVIPsSlowingDownTorque;                         		// 0x000CCC (0x000C)              
	float                                              m_fNitroMultiplierApplied;                        		// 0x000CD8 (0x0004)              
	float                                              m_fPreviousNitroMultiplierApplied;                		// 0x000CDC (0x0004)              
	TArray<class AcAPBPlayerController*>               m_aPlayersAccessingInventory;                     		// 0x000CE0 (0x000C)              
	int                                                m_nSpawnPointHUDMarkerID;                         		// 0x000CEC (0x0004)              
	int                                                m_nNumElections;                                  		// 0x000CF0 (0x0004)              
	float                                              m_RemoteDetonationTimeLeft;                       		// 0x000CF4 (0x0004)              
	int                                                m_nMobileRadarTowerHUDMarkerID;                   		// 0x000CF8 (0x0004)              
	float                                              m_fMobileRadarTowerDistance;                      		// 0x000CFC (0x0004)              
	TArray<int>                                        m_arrMobileRadarTowerOpponentUIDs;                		// 0x000D00 (0x000C)              
	float                                              m_fCoastingTime;                                  		// 0x000D0C (0x0004)              
	float                                              m_fRadarRadius;                                   		// 0x000D10 (0x0004)              
	DWORD                                              m_pPointsOfInterest;                              		// 0x000D14 (0x0004)              
	TArray<int>                                        m_arrDamageableModifier;                          		// 0x000D18 (0x000C)              
	int                                                m_aVehicleFnMods[0x4];                            		// 0x000D24 (0x0010)              
	int                                                m_nFriendlyBrickHUDMarkerID;                      		// 0x000D34 (0x0004)              
	int                                                m_nOppositionBrickHUDMarkerID;                    		// 0x000D38 (0x0004)              
	int                                                m_nBrickTeamID;                                   		// 0x000D3C (0x0004)              
	TArray<int>                                        m_nBrickOpposingTeamIDs;                          		// 0x000D40 (0x000C)              
	float                                              m_fDistanceDriven;                                		// 0x000D4C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBVehicleBase");
		return pClassPointer;
	};

public:
	void GetAxleOffsets(float* fFrontAxleOffset,float* fRearAxleOffset);//APBGame.cAPBVehicleBase.GetAxleOffsets
	void ApplyRequiredSlowdownForItem(class AcTaskItem* pr_pTaskItem);//APBGame.cAPBVehicleBase.ApplyRequiredSlowdownForItem
	void SetVehicleType(unsigned char eNewType);//APBGame.cAPBVehicleBase.SetVehicleType
	void OnRepairSessionUpdated(float fRepairPercentage);//APBGame.cAPBVehicleBase.OnRepairSessionUpdated
	void RenderSeatSockets();//APBGame.cAPBVehicleBase.RenderSeatSockets
	void TickPointsOfInterest();//APBGame.cAPBVehicleBase.TickPointsOfInterest
	void RenderViewCones();//APBGame.cAPBVehicleBase.RenderViewCones
	void ProcessBrainAndPhysRepStateChange(unsigned char pr_State);//APBGame.cAPBVehicleBase.ProcessBrainAndPhysRepStateChange
	void RemoveNPCDriverComponent();//APBGame.cAPBVehicleBase.RemoveNPCDriverComponent
	class UcAmmoDepotComponent* RetAmmoDepotComponent();//APBGame.cAPBVehicleBase.RetAmmoDepotComponent
	void SwitchSeats(class AcAPBPawn* ApbPawn,unsigned char eVPISwitchTo,unsigned char eSeatActionEnum);//APBGame.cAPBVehicleBase.SwitchSeats
	void RenderVAPAdjustedSockets(class AcAPBPawn* ApbPawn);//APBGame.cAPBVehicleBase.RenderVAPAdjustedSockets
	bool IsBeingUsedBy(int nCollisionGroupID,class AcAPBPawn* APBPawnException);//APBGame.cAPBVehicleBase.IsBeingUsedBy
	bool CanPerformVehicleAmmoCarrierInteraction(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cAPBVehicleBase.CanPerformVehicleAmmoCarrierInteraction
	bool TryExitPos(class APawn* ExitingDriver,FVector3 ExitPos,bool bMustFindGround);//APBGame.cAPBVehicleBase.TryExitPos
	void ResetInvertedFlag();//APBGame.cAPBVehicleBase.ResetInvertedFlag
	float RetAmmoResupplyRange();//APBGame.cAPBVehicleBase.RetAmmoResupplyRange
	void TriggerHackingEvent(class AcAPBPlayerController* pHacker);//APBGame.cAPBVehicleBase.TriggerHackingEvent
	void ReplicatedEvent(struct FName VarName);//APBGame.cAPBVehicleBase.ReplicatedEvent
	class AcEquipableTaskItem* TryRetrieveCargoTaskItem(class AcAPBPlayerController* pRetrievingPlayer);//APBGame.cAPBVehicleBase.TryRetrieveCargoTaskItem
	int GetPlayersInsideCount();//APBGame.cAPBVehicleBase.GetPlayersInsideCount
	void UpdateIndicatorLights();//APBGame.cAPBVehicleBase.UpdateIndicatorLights
	void ServerEmptyVehicle();//APBGame.cAPBVehicleBase.ServerEmptyVehicle
	void ShowWindow(unsigned char Window);//APBGame.cAPBVehicleBase.ShowWindow
	void InitSeatCameraSetups();//APBGame.cAPBVehicleBase.InitSeatCameraSetups
	unsigned char CanPlayerInteractWithAmmoCarrier(class AcAPBPlayerController* i_pController);//APBGame.cAPBVehicleBase.CanPlayerInteractWithAmmoCarrier
	FVector3 RetAmmoResupplyLocation();//APBGame.cAPBVehicleBase.RetAmmoResupplyLocation
	void serverIndicateLeft();//APBGame.cAPBVehicleBase.serverIndicateLeft
	bool Died(class AController* Killer,class UClass* DamageType,FVector3 HitLocation,int nWeaponType);//APBGame.cAPBVehicleBase.Died
	bool GetVAPAdjusted(FVector3* outVAP,unsigned char eVehiclePositionIndex,class AcAPBPawn* PawnExiting);//APBGame.cAPBVehicleBase.GetVAPAdjusted
	void ResetToZero();//APBGame.cAPBVehicleBase.ResetToZero
	void SetSeatUse(unsigned char eSeat,unsigned char eSeatUse,class AcAPBPlayerController* Occupier,class AcAPBPawn* OccupierPawn);//APBGame.cAPBVehicleBase.SetSeatUse
	void OnDeliveryCleanupTimerElapsed();//APBGame.cAPBVehicleBase.OnDeliveryCleanupTimerElapsed
	void LogVehicleDestroyedNative(int nDamage,int nWeaponType);//APBGame.cAPBVehicleBase.LogVehicleDestroyedNative
	void RemoveVehicleMissionTaskItemInsideGroup();//APBGame.cAPBVehicleBase.RemoveVehicleMissionTaskItemInsideGroup
	bool Restore(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.cAPBVehicleBase.Restore
	void BeginParkedVehicleTask(class AcTaskTargetVehicleSpawner* VehicleSpawner,class UMissionObjective* i_pMissionObjective);//APBGame.cAPBVehicleBase.BeginParkedVehicleTask
	void ClientNotifyChangedSpawnState();//APBGame.cAPBVehicleBase.ClientNotifyChangedSpawnState
	void BrainAndPhysRepStateInit();//APBGame.cAPBVehicleBase.BrainAndPhysRepStateInit
	void serverStartVehicleHorn();//APBGame.cAPBVehicleBase.serverStartVehicleHorn
	bool GetVCPSocketName(struct FName* SocketName,unsigned char eVehiclePositionIndex);//APBGame.cAPBVehicleBase.GetVCPSocketName
	bool IsVehicleEmptyAndSeatUseNone(bool bCountTaskItems);//APBGame.cAPBVehicleBase.IsVehicleEmptyAndSeatUseNone
	bool IsAmmoCarrier();//APBGame.cAPBVehicleBase.IsAmmoCarrier
	bool IsDelivered();//APBGame.cAPBVehicleBase.IsDelivered
	void Explode();//APBGame.cAPBVehicleBase.Explode
	bool CanPerformCargoInteraction(class APawn* User,int nIPIndex);//APBGame.cAPBVehicleBase.CanPerformCargoInteraction
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cAPBVehicleBase.IsCSASupported
	void RenderDebugSockets();//APBGame.cAPBVehicleBase.RenderDebugSockets
	void UpdateVisualDamageAmounts();//APBGame.cAPBVehicleBase.UpdateVisualDamageAmounts
	void NotifyHotwired(class AcAPBPlayerController* StealingController);//APBGame.cAPBVehicleBase.NotifyHotwired
	void RenderDoorSockets();//APBGame.cAPBVehicleBase.RenderDoorSockets
	void NotifyLCSirenStarted();//APBGame.cAPBVehicleBase.NotifyLCSirenStarted
	void ClientTriggerDespawnVFX();//APBGame.cAPBVehicleBase.ClientTriggerDespawnVFX
	void RenderCSAGroundPositionSockets();//APBGame.cAPBVehicleBase.RenderCSAGroundPositionSockets
	class UiVehicleRepairer* RetRepairer();//APBGame.cAPBVehicleBase.RetRepairer
	bool CanUseSeatFromOutside(class AcAPBPawn* ApbPawn,unsigned char eSeat);//APBGame.cAPBVehicleBase.CanUseSeatFromOutside
	bool CanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cAPBVehicleBase.CanResupplyPlayer
	void StopVehicleHorn();//APBGame.cAPBVehicleBase.StopVehicleHorn
	void ClearNPCDriverComponent();//APBGame.cAPBVehicleBase.ClearNPCDriverComponent
	unsigned char RetSpawnState();//APBGame.cAPBVehicleBase.RetSpawnState
	void EndInventoryAccess(class AcAPBPlayerController* pPlayer,bool bCancel);//APBGame.cAPBVehicleBase.EndInventoryAccess
	void HideWindow(unsigned char Window);//APBGame.cAPBVehicleBase.HideWindow
	bool CanBeBaseForPawn(class APawn* aPawn);//APBGame.cAPBVehicleBase.CanBeBaseForPawn
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cAPBVehicleBase.EndUse
	float RetDeliverCleanupTimerDuration();//APBGame.cAPBVehicleBase.RetDeliverCleanupTimerDuration
	void UpdateClientState();//APBGame.cAPBVehicleBase.UpdateClientState
	void ClientTriggerSpawnVFX();//APBGame.cAPBVehicleBase.ClientTriggerSpawnVFX
	float GetLeanInAnimTime(unsigned char eVehiclePositionIndex);//APBGame.cAPBVehicleBase.GetLeanInAnimTime
	void ExplodeWreck();//APBGame.cAPBVehicleBase.ExplodeWreck
	int RetMaxHealth();//APBGame.cAPBVehicleBase.RetMaxHealth
	FVector3 GetLookAtPosition();//APBGame.cAPBVehicleBase.GetLookAtPosition
	void UseInteractionPoint(class APawn* P,int nIPIndex);//APBGame.cAPBVehicleBase.UseInteractionPoint
	float GetTimeDurationLastDamageIsValid();//APBGame.cAPBVehicleBase.GetTimeDurationLastDamageIsValid
	void ForceCriticalDamage();//APBGame.cAPBVehicleBase.ForceCriticalDamage
	bool FindRepairer(class UiVehicleRepairer** repairer);//APBGame.cAPBVehicleBase.FindRepairer
	void OnTaskCSACancelled(class AcAPBPlayerController* pPC,unsigned char eCSA,int nIPIndex);//APBGame.cAPBVehicleBase.OnTaskCSACancelled
	bool IsLimitedAmmoSupplier();//APBGame.cAPBVehicleBase.IsLimitedAmmoSupplier
	void CancelDoorAnimation();//APBGame.cAPBVehicleBase.CancelDoorAnimation
	void UpdateVisualDamage();//APBGame.cAPBVehicleBase.UpdateVisualDamage
	void DefuseBomb(class AcAPBPlayerController* pDefuserPC);//APBGame.cAPBVehicleBase.DefuseBomb
	void CleanUpDisabledVehicle();//APBGame.cAPBVehicleBase.CleanUpDisabledVehicle
	void VehicleSubscribeToToDManager(class AcToDManager* ToDManager);//APBGame.cAPBVehicleBase.VehicleSubscribeToToDManager
	void TriggerArsonEvent(class AcAPBPlayerController* DamageInstigator);//APBGame.cAPBVehicleBase.TriggerArsonEvent
	struct FString GetArchetypeAssetNameFor(unsigned char eVehicleSetupType);//APBGame.cAPBVehicleBase.GetArchetypeAssetNameFor
	void AnimateDoorClosed(unsigned char eVehiclePositionIndex);//APBGame.cAPBVehicleBase.AnimateDoorClosed
	bool CanTakeDamage(int DamageAmount,class AController* EventInstigator,FVector3* HitLocation,FVector3* Momentum,class UClass* DamageType,struct FTraceHitInfo* HitInfo,class AActor* DamageCauser);//APBGame.cAPBVehicleBase.CanTakeDamage
	class AcAPBPawn* RetSeatOccupyingPawn(unsigned char eSeat);//APBGame.cAPBVehicleBase.RetSeatOccupyingPawn
	void SetMaxSpeed(float SpeedInMPH);//APBGame.cAPBVehicleBase.SetMaxSpeed
	void VehicleOnToDEvent(int nMessage,int nParam,class AActor* Emitter);//APBGame.cAPBVehicleBase.VehicleOnToDEvent
	void DoorOpenAnimNotify(unsigned char VehiclePosition);//APBGame.cAPBVehicleBase.DoorOpenAnimNotify
	void Destroyed_HandleDriver();//APBGame.cAPBVehicleBase.Destroyed_HandleDriver
	void VehicleTransientRecycleTimer();//APBGame.cAPBVehicleBase.VehicleTransientRecycleTimer
	void RemoveVehicleUsingGroup(class AcAPBPawn* APBPawnException,bool bCheckGroupUsing);//APBGame.cAPBVehicleBase.RemoveVehicleUsingGroup
	void NotifyLCHornStarted();//APBGame.cAPBVehicleBase.NotifyLCHornStarted
	void CallSuperReplicated(struct FName VarName);//APBGame.cAPBVehicleBase.CallSuperReplicated
	void OnTaskCSAStarted(class AcAPBPlayerController* pPC,unsigned char eCSA,int nIPIndex);//APBGame.cAPBVehicleBase.OnTaskCSAStarted
	void OnAutomatedRepairBegin(class UiVehicleRepairer* repairer);//APBGame.cAPBVehicleBase.OnAutomatedRepairBegin
	float RetMaxRepairTimeSecs();//APBGame.cAPBVehicleBase.RetMaxRepairTimeSecs
	void SetRandomVehicleColour();//APBGame.cAPBVehicleBase.SetRandomVehicleColour
	int GetNumPlayersUsingGroupVehicle();//APBGame.cAPBVehicleBase.GetNumPlayersUsingGroupVehicle
	void SetVehicleDamageEffect(int nDamageHandlingEffect);//APBGame.cAPBVehicleBase.SetVehicleDamageEffect
	void PerformCargoInteraction(class APawn* P,int nIPIndex);//APBGame.cAPBVehicleBase.PerformCargoInteraction
	void GetSeatLocation(FVector3* OutLocation,FRotator* OutRotation,unsigned char eVehiclePositionIndex);//APBGame.cAPBVehicleBase.GetSeatLocation
	void SetUnusable(bool bUnusable);//APBGame.cAPBVehicleBase.SetUnusable
	void ClientUpdateVisualDamage();//APBGame.cAPBVehicleBase.ClientUpdateVisualDamage
	void SetEmissiveLightValue(unsigned char eType,float fAmount);//APBGame.cAPBVehicleBase.SetEmissiveLightValue
	float RetDamageLevel(unsigned char eDamageIndex);//APBGame.cAPBVehicleBase.RetDamageLevel
	void Dying_DisableMe();//APBGame.cAPBVehicleBase.Dying_DisableMe
	void JumpOffPawn();//APBGame.cAPBVehicleBase.JumpOffPawn
	int GetNPCInsideVehicleAnimationSet(unsigned char eVehicleSeat);//APBGame.cAPBVehicleBase.GetNPCInsideVehicleAnimationSet
	void TelefraggedWrapper();//APBGame.cAPBVehicleBase.TelefraggedWrapper
	bool IsPawnUsingAnySeatInVehicle(class AcAPBPawn* ApbPawn);//APBGame.cAPBVehicleBase.IsPawnUsingAnySeatInVehicle
	double RetLastDamageTimeStamp();//APBGame.cAPBVehicleBase.RetLastDamageTimeStamp
	void NotifyBombPlanted();//APBGame.cAPBVehicleBase.NotifyBombPlanted
	class UcVehicleSetupInfo* GetTempAsset();//APBGame.cAPBVehicleBase.GetTempAsset
	bool CanPerformFreeVehicleBreakInInteraction(class APawn* User,int nIPIndex);//APBGame.cAPBVehicleBase.CanPerformFreeVehicleBreakInInteraction
	void SetVehicleBatch(int eDeliverableBatch);//APBGame.cAPBVehicleBase.SetVehicleBatch
	bool WithdrawAmmoClip();//APBGame.cAPBVehicleBase.WithdrawAmmoClip
	void GetActualVelocity(FVector3* OutActualVelocity);//APBGame.cAPBVehicleBase.GetActualVelocity
	bool IsTaskVehicleAllowedToRespawn();//APBGame.cAPBVehicleBase.IsTaskVehicleAllowedToRespawn
	unsigned char GetVehicleType();//APBGame.cAPBVehicleBase.GetVehicleType
	void TookExternalDamage();//APBGame.cAPBVehicleBase.TookExternalDamage
	void OnDestroy(class USeqAct_Destroy* Action);//APBGame.cAPBVehicleBase.OnDestroy
	void Dying_ExplodeMe();//APBGame.cAPBVehicleBase.Dying_ExplodeMe
	bool CheckUsingCollisionGroupConsistency();//APBGame.cAPBVehicleBase.CheckUsingCollisionGroupConsistency
	bool DisconnectBrain(bool bSetTimer);//APBGame.cAPBVehicleBase.DisconnectBrain
	void CreateAudioNPCInterface();//APBGame.cAPBVehicleBase.CreateAudioNPCInterface
	void DBGEmptyVehicle();//APBGame.cAPBVehicleBase.DBGEmptyVehicle
	void EndResupply(class AcAPBPlayerController* pPlayer,bool bCancel,unsigned char eWeaponType);//APBGame.cAPBVehicleBase.EndResupply
	void NotifySupplierAttributesModified();//APBGame.cAPBVehicleBase.NotifySupplierAttributesModified
	void OnVandalismDamageEnd();//APBGame.cAPBVehicleBase.OnVandalismDamageEnd
	void CreateClientSideHUDMarker();//APBGame.cAPBVehicleBase.CreateClientSideHUDMarker
	class UcVehicleSetupInfo* GetTempAssetForType(unsigned char eVehicleSetupType);//APBGame.cAPBVehicleBase.GetTempAssetForType
	int GetIncrementalID();//APBGame.cAPBVehicleBase.GetIncrementalID
	void RenderVCPSockets();//APBGame.cAPBVehicleBase.RenderVCPSockets
	bool IsRepairing();//APBGame.cAPBVehicleBase.IsRepairing
	void EndParkedVehicleTask();//APBGame.cAPBVehicleBase.EndParkedVehicleTask
	bool PassengerLeave(class AcAPBPawn* P,bool bForceLeave,bool bGetOut,bool bAnimateDoorClosedIfPossible,bool bResetVehicleUseData);//APBGame.cAPBVehicleBase.PassengerLeave
	void SetDoorsLocked(bool bIsLocked);//APBGame.cAPBVehicleBase.SetDoorsLocked
	void TriggerSabotageEvent(class AcAPBPlayerController* pSaboteur);//APBGame.cAPBVehicleBase.TriggerSabotageEvent
	bool IsTaskCSA(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex);//APBGame.cAPBVehicleBase.IsTaskCSA
	bool IsPawnUsingAnySeatInVehicleExceptSeat(class AcAPBPawn* ApbPawn,unsigned char eSeatExempt);//APBGame.cAPBVehicleBase.IsPawnUsingAnySeatInVehicleExceptSeat
	void WreckVehicle();//APBGame.cAPBVehicleBase.WreckVehicle
	void DrivingStatusChanged();//APBGame.cAPBVehicleBase.DrivingStatusChanged
	void NotifyLCSirenStopped();//APBGame.cAPBVehicleBase.NotifyLCSirenStopped
	bool TryExitPosAPB(class APawn* ExitingPawn,unsigned char eVehiclePosition,bool bInsideVehicle,FVector3 ExitPos,bool bMustFindGround,bool bAllowTeleportDownToGround,bool bAnimateOut);//APBGame.cAPBVehicleBase.TryExitPosAPB
	void AddNPCDriverComponent(int nNPCTypeDriver,int nAssetIndex);//APBGame.cAPBVehicleBase.AddNPCDriverComponent
	int InitVCPInfo(TArray<struct FName> Names);//APBGame.cAPBVehicleBase.InitVCPInfo
	bool GetVCPLocation(FVector3* OutLocation,FRotator* OutRotation,unsigned char eVehiclePositionIndex);//APBGame.cAPBVehicleBase.GetVCPLocation
	void BeginResupply(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType);//APBGame.cAPBVehicleBase.BeginResupply
	bool IsStaticTarget();//APBGame.cAPBVehicleBase.IsStaticTarget
	int RetHealth();//APBGame.cAPBVehicleBase.RetHealth
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cAPBVehicleBase.BeginUse
	void TakeVisualDamage(FVector3 Direction,float fDamage,float fFinalDamage);//APBGame.cAPBVehicleBase.TakeVisualDamage
	void UpdateWindowState();//APBGame.cAPBVehicleBase.UpdateWindowState
	bool CanSwitchSeats(class AcAPBPawn* ApbPawn,unsigned char eVPIFrom,unsigned char eVPISwitchTo,unsigned char eSeatActionEnum);//APBGame.cAPBVehicleBase.CanSwitchSeats
	void VehicleUnSubscribeToToDManager(class AcToDManager* ToDManager);//APBGame.cAPBVehicleBase.VehicleUnSubscribeToToDManager
	void RemoveRequiredSlowdownForPlayer(class AcAPBPawn* pr_pPawn);//APBGame.cAPBVehicleBase.RemoveRequiredSlowdownForPlayer
	int GetCollisionDamageTriggerAlarm();//APBGame.cAPBVehicleBase.GetCollisionDamageTriggerAlarm
	bool CanBeTargeted(class AcAPBPlayerController* PC);//APBGame.cAPBVehicleBase.CanBeTargeted
	void UpdateClientHUDMarkerState();//APBGame.cAPBVehicleBase.UpdateClientHUDMarkerState
	void OnSpawned();//APBGame.cAPBVehicleBase.OnSpawned
	bool CanEnterVehicleDoor(class AcAPBPawn* PawnEnter,unsigned char eDoorIndexEnter,bool bInitialCheckBeforeVehicleInteraction);//APBGame.cAPBVehicleBase.CanEnterVehicleDoor
	void CancelAutomatedRepair();//APBGame.cAPBVehicleBase.CancelAutomatedRepair
	void UnWreckVehicle();//APBGame.cAPBVehicleBase.UnWreckVehicle
	unsigned char RetDeliverableState();//APBGame.cAPBVehicleBase.RetDeliverableState
	void serverIndicateRight();//APBGame.cAPBVehicleBase.serverIndicateRight
	void NotifyBombDefused();//APBGame.cAPBVehicleBase.NotifyBombDefused
	void RecycleDeployedVehicle(bool bTelefrag);//APBGame.cAPBVehicleBase.RecycleDeployedVehicle
	bool FindClosestSeatIndex(FVector3 vecLocation,unsigned char* eSeatPosition);//APBGame.cAPBVehicleBase.FindClosestSeatIndex
	void ApplyRequiredSlowdownForPlayer(class AcAPBPawn* pr_pPawn);//APBGame.cAPBVehicleBase.ApplyRequiredSlowdownForPlayer
	void IndicatorLeft();//APBGame.cAPBVehicleBase.IndicatorLeft
	void RemoveVehicleTaskGroup();//APBGame.cAPBVehicleBase.RemoveVehicleTaskGroup
	void OnMissionCleanupTimerElapsed();//APBGame.cAPBVehicleBase.OnMissionCleanupTimerElapsed
	void BrainAndPhysRepStateActive();//APBGame.cAPBVehicleBase.BrainAndPhysRepStateActive
	unsigned char RetSeatUse(unsigned char eSeat);//APBGame.cAPBVehicleBase.RetSeatUse
	void NotifyConsumerAttributesModified(class UiAmmoConsumer* pConsumer);//APBGame.cAPBVehicleBase.NotifyConsumerAttributesModified
	float RetMissionCleanupTimerDuration();//APBGame.cAPBVehicleBase.RetMissionCleanupTimerDuration
	bool GetSeatSocketName(struct FName* SocketName,unsigned char eVehiclePositionIndex);//APBGame.cAPBVehicleBase.GetSeatSocketName
	int FindClosestEmptySeatIndex(FVector3 vecLocation,bool bCanDriveVehicle);//APBGame.cAPBVehicleBase.FindClosestEmptySeatIndex
	void SetSpawnState(unsigned char eNewState);//APBGame.cAPBVehicleBase.SetSpawnState
	void SuicideWrapper();//APBGame.cAPBVehicleBase.SuicideWrapper
	class AcAPBPlayerController* RetSeatOccupyingController(unsigned char eSeat);//APBGame.cAPBVehicleBase.RetSeatOccupyingController
	bool CanBeDamagedBy(class AcAPBPlayerController* Player);//APBGame.cAPBVehicleBase.CanBeDamagedBy
	void PostRenderFor(class APlayerController* PC,class UCanvas* Canvas,FVector3 CameraPosition,FVector3 CameraDir);//APBGame.cAPBVehicleBase.PostRenderFor
	void OnTaskCSACompleted(class AcAPBPlayerController* pPC,unsigned char eCSA,int nIPIndex);//APBGame.cAPBVehicleBase.OnTaskCSACompleted
	void ReplicateVehicleImpactEffect(FVector3 hitPosition,FVector3 Normal,FVector3 impactVelocity,bool scrape,class AActor* Other);//APBGame.cAPBVehicleBase.ReplicateVehicleImpactEffect
	unsigned char GetAdjacentSeat(unsigned char eVPIFrom);//APBGame.cAPBVehicleBase.GetAdjacentSeat
	void AlarmTimer();//APBGame.cAPBVehicleBase.AlarmTimer
	void TickAutoResupplier();//APBGame.cAPBVehicleBase.TickAutoResupplier
	void NotifyBreakInBegin(class AcAPBPlayerController* BreakinController);//APBGame.cAPBVehicleBase.NotifyBreakInBegin
	void OnTeleport(class USeqAct_Teleport* inAction);//APBGame.cAPBVehicleBase.OnTeleport
	class AcNPCDriverSkeletalMeshActor* GetNPCDriverActor();//APBGame.cAPBVehicleBase.GetNPCDriverActor
	void PlayDoorAnimation(unsigned char eVehiclePositionIndex,unsigned char eDoorInteractionAnimation);//APBGame.cAPBVehicleBase.PlayDoorAnimation
	void SetAllSeatUse(unsigned char eSeatExempt,unsigned char eSeatUse,class AcAPBPlayerController* Occupier,class AcAPBPawn* OccupierPawn);//APBGame.cAPBVehicleBase.SetAllSeatUse
	float RetTimeToDisabled();//APBGame.cAPBVehicleBase.RetTimeToDisabled
	void GetNPCInsideVehicleAnimationSequences(unsigned char eVehicleSeat,struct FVehicleNPCInsideAnimationSet* SDDRow);//APBGame.cAPBVehicleBase.GetNPCInsideVehicleAnimationSequences
	float RetExtremeDamageLevel(unsigned char eDamageIndex);//APBGame.cAPBVehicleBase.RetExtremeDamageLevel
	unsigned char FindVehicleExit(class AcAPBPawn* APBPawnExiting,unsigned char eVehiclePosition,bool bInsideVehicle,bool bAllowTeleportDownToGround,bool bAnimateOut);//APBGame.cAPBVehicleBase.FindVehicleExit
	unsigned char RetTaskOperationCategory();//APBGame.cAPBVehicleBase.RetTaskOperationCategory
	void BeginInventoryAccess(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cAPBVehicleBase.BeginInventoryAccess
	void OnTrackInfoUpdated();//APBGame.cAPBVehicleBase.OnTrackInfoUpdated
	void Tick(float DeltaTime);//APBGame.cAPBVehicleBase.Tick
	bool IsHard();//APBGame.cAPBVehicleBase.IsHard
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//APBGame.cAPBVehicleBase.TakeRadiusDamage
	void NPCDriverDataChanged();//APBGame.cAPBVehicleBase.NPCDriverDataChanged
	bool IsVehicleEmpty();//APBGame.cAPBVehicleBase.IsVehicleEmpty
	bool CanPhysicallyEjectNPCDriver(class AcAPBPawn* PawnEjecting,unsigned char pr_eVehiclePositionIndex);//APBGame.cAPBVehicleBase.CanPhysicallyEjectNPCDriver
	class UcNPCVehicleBrain* GetBrain();//APBGame.cAPBVehicleBase.GetBrain
	void DriverDied();//APBGame.cAPBVehicleBase.DriverDied
	void NativeReplicatedEvent(struct FName VarName);//APBGame.cAPBVehicleBase.NativeReplicatedEvent
	bool CanBeDamaged(class AcAPBPlayerController* PC);//APBGame.cAPBVehicleBase.CanBeDamaged
	bool DriverLeave(bool bForceLeave,bool bGetOut,bool bAnimateDoorClosedIfPossible,bool bResetVehicleUseData);//APBGame.cAPBVehicleBase.DriverLeave
	void SetTouchingRepairPoint(bool bTouching);//APBGame.cAPBVehicleBase.SetTouchingRepairPoint
	void PlantBomb(class AcAPBPlayerController* pBomberPC);//APBGame.cAPBVehicleBase.PlantBomb
	class AcVehicleCargoInventory* RetCargoInventory();//APBGame.cAPBVehicleBase.RetCargoInventory
	void DoToDStateChange();//APBGame.cAPBVehicleBase.DoToDStateChange
	int RepairDamage(int nAmount,bool i_bIsManualRepair);//APBGame.cAPBVehicleBase.RepairDamage
	bool CanDeployAmmoCarrierDepot(bool i_bActivationCheck);//APBGame.cAPBVehicleBase.CanDeployAmmoCarrierDepot
	void NotifyTaskVehicleSpawnFailed();//APBGame.cAPBVehicleBase.NotifyTaskVehicleSpawnFailed
	void NotifyLCHornStopped();//APBGame.cAPBVehicleBase.NotifyLCHornStopped
	void GetDoorAnimationSequences(unsigned char eVehicleSeat,struct FVehicleDoorAnimationSet* SDDRow);//APBGame.cAPBVehicleBase.GetDoorAnimationSequences
	bool IsVehicleStoringTaskItems();//APBGame.cAPBVehicleBase.IsVehicleStoringTaskItems
	bool GetVAP(FVector3* outVAP,FRotator* OutRotation,unsigned char eVehiclePositionIndex);//APBGame.cAPBVehicleBase.GetVAP
	struct FString GetSetupinfoAssetNameFor(unsigned char eVehicleSetupType);//APBGame.cAPBVehicleBase.GetSetupinfoAssetNameFor
	class AcAPBPlayerController* GetRunOverInstigator();//APBGame.cAPBVehicleBase.GetRunOverInstigator
	void ClientTriggerVandalismVFX();//APBGame.cAPBVehicleBase.ClientTriggerVandalismVFX
	float GetTimeDurationForNeutralDamage();//APBGame.cAPBVehicleBase.GetTimeDurationForNeutralDamage
	void NotifyCustomisationChanged();//APBGame.cAPBVehicleBase.NotifyCustomisationChanged
	bool IsDynamicTarget();//APBGame.cAPBVehicleBase.IsDynamicTarget
	bool PassengerEnter(class AcAPBPawn* P);//APBGame.cAPBVehicleBase.PassengerEnter
	void RetExplosionOcclusionExtents(TArray<FVector3>* Verts,FVector3* ExplosionLocation);//APBGame.cAPBVehicleBase.RetExplosionOcclusionExtents
	void BrainAndPhysRepStateDisconnected();//APBGame.cAPBVehicleBase.BrainAndPhysRepStateDisconnected
	void OnHealthChanged();//APBGame.cAPBVehicleBase.OnHealthChanged
	bool DriverEnter(class AcAPBPawn* P);//APBGame.cAPBVehicleBase.DriverEnter
	void DriverBeingEjected(class AcAPBPawn* APBPawnEjecting);//APBGame.cAPBVehicleBase.DriverBeingEjected
	void NotifyTaskVehicleRespawnBegin();//APBGame.cAPBVehicleBase.NotifyTaskVehicleRespawnBegin
	class AcAPBPlayerController* GetExplosionInstigator();//APBGame.cAPBVehicleBase.GetExplosionInstigator
	bool IsInsideFieldOfView(FVector3 vPosition);//APBGame.cAPBVehicleBase.IsInsideFieldOfView
	void SetAlarm(bool bAlarmOn);//APBGame.cAPBVehicleBase.SetAlarm
	bool IsSeatUseStateUsingVehicle(unsigned char eSeat);//APBGame.cAPBVehicleBase.IsSeatUseStateUsingVehicle
	class AcAPBPlayerController* RetAmmoCarrierOwner();//APBGame.cAPBVehicleBase.RetAmmoCarrierOwner
	void ServerToggleSpecialLights();//APBGame.cAPBVehicleBase.ServerToggleSpecialLights
	void SetUpVehicle(bool pr_bKeepLogicalState);//APBGame.cAPBVehicleBase.SetUpVehicle
	void NotifyBombExploded();//APBGame.cAPBVehicleBase.NotifyBombExploded
	bool IsBombPlanted();//APBGame.cAPBVehicleBase.IsBombPlanted
	void ClearVehicleBatch();//APBGame.cAPBVehicleBase.ClearVehicleBatch
	void RenderIKSockets();//APBGame.cAPBVehicleBase.RenderIKSockets
	void IndicatorRight();//APBGame.cAPBVehicleBase.IndicatorRight
	bool IsAPassenger(class AcAPBPawn* P);//APBGame.cAPBVehicleBase.IsAPassenger
	void SetDamageLevel(unsigned char eDamageIndex,float fAmount);//APBGame.cAPBVehicleBase.SetDamageLevel
	void SetDeployedOwner(class AcAPBPlayerController* NewOwner,bool bDoRecylceDeployedVehicle,bool bTelefragDeployedVehicle);//APBGame.cAPBVehicleBase.SetDeployedOwner
	bool CanPerformVehicleEntryInteraction(class APawn* User,int nIPIndex);//APBGame.cAPBVehicleBase.CanPerformVehicleEntryInteraction
	void UpdateWindowBone(int Window);//APBGame.cAPBVehicleBase.UpdateWindowBone
	unsigned char CheckCanPlayerAccessInventory(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cAPBVehicleBase.CheckCanPlayerAccessInventory
	unsigned char CheckCanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cAPBVehicleBase.CheckCanResupplyPlayer
	void PerformVehicleEntryInteraction(class AcAPBPawn* P,int nIPIndex);//APBGame.cAPBVehicleBase.PerformVehicleEntryInteraction
	float GetExplosionHardDamageModifier();//APBGame.cAPBVehicleBase.GetExplosionHardDamageModifier
	bool IsRangeBasedAmmoSupplier();//APBGame.cAPBVehicleBase.IsRangeBasedAmmoSupplier
	void GetDoorLocation(FVector3* OutLocation,unsigned char eVehiclePositionIndex);//APBGame.cAPBVehicleBase.GetDoorLocation
	class AcNPCDriverSkeletalMeshActor* SpawnNPCDriverActor(class AcAPBPawn* pr_pEjectingPawn,bool pr_bEjectedByEnforcer,bool pr_bEjectedFromPassengerSide);//APBGame.cAPBVehicleBase.SpawnNPCDriverActor
	void RemoveRequiredSlowdownForItem(class AcTaskItem* pr_pTaskItem);//APBGame.cAPBVehicleBase.RemoveRequiredSlowdownForItem
	void DiedNative(class AController* Killer,class UClass* DamageType,FVector3 HitLocation,int nWeaponType);//APBGame.cAPBVehicleBase.DiedNative
	void RenderVAPSockets();//APBGame.cAPBVehicleBase.RenderVAPSockets
	void InitialiseBrain();//APBGame.cAPBVehicleBase.InitialiseBrain
	void NotifyBrokenInto(class AcAPBPlayerController* BreakinController);//APBGame.cAPBVehicleBase.NotifyBrokenInto
	bool IsAmmoCarrierModifierActive();//APBGame.cAPBVehicleBase.IsAmmoCarrierModifierActive
	int RetVehicleBatch();//APBGame.cAPBVehicleBase.RetVehicleBatch
	bool IsDirectionWithinFiringArc(FRotator aimDirection,unsigned char SeatPosition);//APBGame.cAPBVehicleBase.IsDirectionWithinFiringArc
	void EmptyVehicle(bool bLeaveImmediately,bool bForceOut,bool bGetOut,bool bIgnoreDeadPlayers);//APBGame.cAPBVehicleBase.EmptyVehicle
	unsigned char GetBrainAndPhysRepState();//APBGame.cAPBVehicleBase.GetBrainAndPhysRepState
	void SetLookAtPriority(int pr_nLookAtPriority);//APBGame.cAPBVehicleBase.SetLookAtPriority
	void SetExtremeDamageLevel(unsigned char eDamageIndex,float fAmount);//APBGame.cAPBVehicleBase.SetExtremeDamageLevel
	void GetSVehicleDebug(TArray<struct FString>* DebugInfo);//APBGame.cAPBVehicleBase.GetSVehicleDebug
	unsigned char RetInteractiveActorStateScript();//APBGame.cAPBVehicleBase.RetInteractiveActorStateScript
	void SetDeliverableHUDMarkerVisibility(bool bHideAllFromOwners,bool bHideAllFromOpposition,bool bHideFromOutOfMission);//APBGame.cAPBVehicleBase.SetDeliverableHUDMarkerVisibility
	void BrainAndPhysRepStateLimbo();//APBGame.cAPBVehicleBase.BrainAndPhysRepStateLimbo
	void SetActiveIndicatorLight(unsigned char pr_IndicatorLightActive);//APBGame.cAPBVehicleBase.SetActiveIndicatorLight
	void CancelAllResupplyOperations();//APBGame.cAPBVehicleBase.CancelAllResupplyOperations
	bool IsSoft();//APBGame.cAPBVehicleBase.IsSoft
	bool GetFakeVAP(FVector3* outFakeVAP,int eVPIndex);//APBGame.cAPBVehicleBase.GetFakeVAP
	class AcTaskTargetVehicleSpawner* RetVehicleSpawner();//APBGame.cAPBVehicleBase.RetVehicleSpawner
	bool IsResupplyingPlayer(class AcAPBPlayerController* pPlayer);//APBGame.cAPBVehicleBase.IsResupplyingPlayer
	void ToggleSpecialLights();//APBGame.cAPBVehicleBase.ToggleSpecialLights
	void TickMobileRadarTower();//APBGame.cAPBVehicleBase.TickMobileRadarTower
	void serverStopVehicleHorn();//APBGame.cAPBVehicleBase.serverStopVehicleHorn
	void GetCSAGroundPosition(FVector3* outGroundPosition,unsigned char eVehiclePositionIndex);//APBGame.cAPBVehicleBase.GetCSAGroundPosition
	bool CanPlayerAccessInventory(class AcAPBPlayerController* pPlayer);//APBGame.cAPBVehicleBase.CanPlayerAccessInventory
	void NotifyTaskVehicleSpawnSucceeded();//APBGame.cAPBVehicleBase.NotifyTaskVehicleSpawnSucceeded
	int GetPlayersUsingVehicleCount();//APBGame.cAPBVehicleBase.GetPlayersUsingVehicleCount
	void SetUpIncrementalID();//APBGame.cAPBVehicleBase.SetUpIncrementalID
	int GetExplosionDamage();//APBGame.cAPBVehicleBase.GetExplosionDamage
	int AmmoClipsLeft();//APBGame.cAPBVehicleBase.AmmoClipsLeft
	void TriggerCSIEvent(class AcAPBPlayerController* pInvestigator);//APBGame.cAPBVehicleBase.TriggerCSIEvent
	void ReceivedReactionIDOnAClient();//APBGame.cAPBVehicleBase.ReceivedReactionIDOnAClient
	float RetDamagePercentage();//APBGame.cAPBVehicleBase.RetDamagePercentage
	class AActor* RetAmmoSupplierActor();//APBGame.cAPBVehicleBase.RetAmmoSupplierActor
	void SetAmmoCarrierDepotDeployed(bool bDeployed);//APBGame.cAPBVehicleBase.SetAmmoCarrierDepotDeployed
	void StartVehicleHorn();//APBGame.cAPBVehicleBase.StartVehicleHorn
	void DestroyClientSideHUDMarker();//APBGame.cAPBVehicleBase.DestroyClientSideHUDMarker
	void Destroyed();//APBGame.cAPBVehicleBase.Destroyed
	void NotifyBreakInEnd(class AcAPBPlayerController* BreakinController,bool bCancelled);//APBGame.cAPBVehicleBase.NotifyBreakInEnd
	int RetDamageAmount();//APBGame.cAPBVehicleBase.RetDamageAmount
	bool IsAmmoCarrierDepotDeployed();//APBGame.cAPBVehicleBase.IsAmmoCarrierDepotDeployed
	void Suicide();//APBGame.cAPBVehicleBase.Suicide
	int GetLookAtPriority();//APBGame.cAPBVehicleBase.GetLookAtPriority
	void UpdateDriverIndicator();//APBGame.cAPBVehicleBase.UpdateDriverIndicator
	void ClearIndicatorLightStatus();//APBGame.cAPBVehicleBase.ClearIndicatorLightStatus
	void OnVandalismDamageBegin(class AcAPBPlayerController* DamageInstigator);//APBGame.cAPBVehicleBase.OnVandalismDamageBegin
	bool CanPerformTaskInteraction(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cAPBVehicleBase.CanPerformTaskInteraction
	void NotifyVandalised(class AcAPBPlayerController* VandalisingController);//APBGame.cAPBVehicleBase.NotifyVandalised
	void CheckForRespawn();//APBGame.cAPBVehicleBase.CheckForRespawn
	void OnAutomatedRepairEnd(class UiVehicleRepairer* repairer);//APBGame.cAPBVehicleBase.OnAutomatedRepairEnd
	bool CanInteractWithVehicleCommon(class AcAPBPawn* APBPawng,unsigned char eDoorIndexEnter,bool bSuppressEvents);//APBGame.cAPBVehicleBase.CanInteractWithVehicleCommon
};
UClass* AcAPBVehicleBase::pClassPointer = NULL;

//0x001060 (0x001DB0 - 0x000D50)
//cAPBVehicle[0x10386C10]
class AcAPBVehicle : public AcAPBVehicleBase
{
public:
	float                                              aRPMSamples[0x32];                                		// 0x000D50 (0x00C8)              
	float                                              aFakeRPMSamples[0x32];                            		// 0x000E18 (0x00C8)              
	float                                              aAudioRPMSamples[0x32];                           		// 0x000EE0 (0x00C8)              
	float                                              aPowerSamples[0x32];                              		// 0x000FA8 (0x00C8)              
	struct FVehicleStateDelta                          m_OldVehicleMoves[0x32];                          		// 0x001070 (0x0BB8)              
	struct FVehicleStateInfo                           m_LastFrameVehicleState;                          		// 0x001C28 (0x0038)              
	unsigned char                                      m_OldBrainAndPhysRepState;                        		// 0x001C60 (0x0001)              PROPERTY: etBrainAndPhysRepState
	unsigned char                                      _0x001C61[0x3];                                   		// 0x001C61 (0x0003) MISSED OFFSET
	unsigned long                                      m_bHasMovedSinceLastUpdate : 1;                   		// 0x001C64 (0x0004) [0x00000001] 
	unsigned long                                      m_bActivateEdgeUsage : 1;                         		// 0x001C64 (0x0004) [0x00000002] 
	unsigned long                                      m_DEBUG_ShowDebugForDriver : 1;                   		// 0x001C64 (0x0004) [0x00000004] 
	struct FVehicleStateInfo                           m_TargetVehicleState;                             		// 0x001C68 (0x0038)              
	struct FVehicleStateInfo                           m_LastReceivedServerState;                        		// 0x001CA0 (0x0038)              
	struct FVehicleStateInfo                           m_MostRecentServerState;                          		// 0x001CD8 (0x0038)              
	int                                                m_nNextVehicleMove;                               		// 0x001D10 (0x0004)              
	double                                             m_fServerSideTimestamp;                           		// 0x001D14 (0x0008)              
	float                                              m_fCurrentDragForce;                              		// 0x001D1C (0x0004)              
	float                                              MAX_BRAKE_DECELERATION;                           		// 0x001D20 (0x0004)              
	float                                              THROTTLE_FORCE_MULTIPLIER;                        		// 0x001D24 (0x0004)              
	float                                              LONGITUDNAL_FORCE_MULTIPLIER;                     		// 0x001D28 (0x0004)              
	float                                              LATERAL_FORCE_MULTIPLIER;                         		// 0x001D2C (0x0004)              
	float                                              DRAG_FORCE_MULTIPLIER;                            		// 0x001D30 (0x0004)              
	struct FName                                       wheelBones[0x4];                                  		// 0x001D34 (0x0020)              
	DWORD                                              nxWheels[0x4];                                    		// 0x001D54 (0x0010)              
	FVector3                                           m_vMovementForce;                                 		// 0x001D64 (0x000C)              
	float                                              m_fCurrentHandbrakeFactor;                        		// 0x001D70 (0x0004)              
	float                                              HANDBRAKE_RAMPDOWN_TIME;                          		// 0x001D74 (0x0004)              
	float                                              HANDBRAKE_THRESHOLD_SPEED;                        		// 0x001D78 (0x0004)              
	float                                              m_fFrontRearBrakeBalance;                         		// 0x001D7C (0x0004)              
	int                                                m_nWheelDebugMode;                                		// 0x001D80 (0x0004)              
	class UcVehicleSetupInfo*                          m_pVehicleSetup;                                  		// 0x001D84 (0x0004)              
	FRotator                                           m_CurrentViewRotation;                            		// 0x001D88 (0x000C)              
	TArray<class URWTechReachSpec*>                    m_aRegisteredEdgeList;                            		// 0x001D94 (0x000C)              
	DWORD                                              m_pLCBroadBoundingVolume;                         		// 0x001DA0 (0x0004)              
	DWORD                                              m_pLCNarrowBoundingVolume;                        		// 0x001DA4 (0x0004)              
	int                                                m_nTickCount;                                     		// 0x001DA8 (0x0004)              
	float                                              m_fAccumulatedDeltaSeconds;                       		// 0x001DAC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBVehicle");
		return pClassPointer;
	};

public:
	void ResetLocalPredictionState();//APBGame.cAPBVehicle.ResetLocalPredictionState
	void ApplyClientsideCorrection();//APBGame.cAPBVehicle.ApplyClientsideCorrection
	void WDB(int nNewDebugMode);//APBGame.cAPBVehicle.WDB
	void PerformVehicleEntryInteraction(class AcAPBPawn* P,int nIPIndex);//APBGame.cAPBVehicle.PerformVehicleEntryInteraction
	void CalculateCorrectedPosition();//APBGame.cAPBVehicle.CalculateCorrectedPosition
	void ShowDebugForDriver();//APBGame.cAPBVehicle.ShowDebugForDriver
	void SetTorqueMods(float fMod1,float fMod2,float fMod3,float fMod4);//APBGame.cAPBVehicle.SetTorqueMods
	float HermiteEval2(float Slip,bool bLongForces);//APBGame.cAPBVehicle.HermiteEval2
	FRotator GetViewRotation();//APBGame.cAPBVehicle.GetViewRotation
	void ServerSetTorqueMods(float fMod1,float fMod2,float fMod3,float fMod4);//APBGame.cAPBVehicle.ServerSetTorqueMods
	void DeRegisterWithPGEdges();//APBGame.cAPBVehicle.DeRegisterWithPGEdges
	void ClientIllegalLocation_APB(struct FString sErrorMessage);//APBGame.cAPBVehicle.ClientIllegalLocation_APB
	void ServerIllegalLocation_APB(struct FString sErrorMessage);//APBGame.cAPBVehicle.ServerIllegalLocation_APB
	void SwitchVehicleSetup(class UcVehicleSetupInfo* pNewVehicleSetup,bool bSwitchSetupButKeepType);//APBGame.cAPBVehicle.SwitchVehicleSetup
	void DisplayWheelsDebug2(class AHUD* HUD,float YL,bool bLongForces);//APBGame.cAPBVehicle.DisplayWheelsDebug2
	void PushVehicleMove(float TimeStamp,float TimeDelta,FVector3 PosDelta,FRotator RotDelta,FVector3 LinVelDelta,FVector3 AngVelDelta);//APBGame.cAPBVehicle.PushVehicleMove
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//APBGame.cAPBVehicle.DisplayDebug
};
UClass* AcAPBVehicle::pClassPointer = NULL;

//0x00001C (0x00027C - 0x000260)
//cParkedVehicleSpawner[0x10386AE0]
class AcParkedVehicleSpawner : public AActor
{
public:
	class AcAPBVehicle*                                m_pVehicle;                                       		// 0x000260 (0x0004)              
	class UcFlatTexturedQuadComponent*                 m_pBayMarker;                                     		// 0x000264 (0x0004)              
	struct FEnumeratedName                             m_eVehicleCategory;                               		// 0x000268 (0x0010)              
	int                                                m_nParkedVehicleCategoryOrdinal;                  		// 0x000278 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cParkedVehicleSpawner");
		return pClassPointer;
	};

public:
	void DestroyVehicle();//APBGame.cParkedVehicleSpawner.DestroyVehicle
	void Tick(float DeltaTime);//APBGame.cParkedVehicleSpawner.Tick
	void SpawnVehicle();//APBGame.cParkedVehicleSpawner.SpawnVehicle
	class AcAPBVehicle* RetVehicle();//APBGame.cParkedVehicleSpawner.RetVehicle
};
UClass* AcParkedVehicleSpawner::pClassPointer = NULL;

//0x000038 (0x000094 - 0x00005C)
//MaterialExpressionBakedColourTransform[0x103869B0]
class UMaterialExpressionBakedColourTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            m_Input;                                          		// 0x00005C (0x001C)              
	struct FName                                       ExpressionName;                                   		// 0x000078 (0x0008)              
	int                                                UVIndex;                                          		// 0x000080 (0x0004)              
	class UTexture*                                    LookupTexture;                                    		// 0x000084 (0x0004)              
	float                                              VCoord[0x3];                                      		// 0x000088 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionBakedColourTransform");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionBakedColourTransform::pClassPointer = NULL;

//0x000020 (0x00007C - 0x00005C)
//MaterialExpressionBakedScalarParameter[0x10386880]
class UMaterialExpressionBakedScalarParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                    		// 0x00005C (0x0008)              
	int                                                UVIndex;                                          		// 0x000064 (0x0004)              
	class UTexture*                                    LookupTexture;                                    		// 0x000068 (0x0004)              
	float                                              VCoord;                                           		// 0x00006C (0x0004)              
	float                                              UnpackMin;                                        		// 0x000070 (0x0004)              
	float                                              UnpackMax;                                        		// 0x000074 (0x0004)              
	int                                                ColourComponent;                                  		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionBakedScalarParameter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionBakedScalarParameter::pClassPointer = NULL;

//0x000034 (0x000090 - 0x00005C)
//MaterialExpressionBakedVectorParameter[0x10386750]
class UMaterialExpressionBakedVectorParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                    		// 0x00005C (0x0008)              
	int                                                UVIndex;                                          		// 0x000064 (0x0004)              
	class UTexture*                                    LookupTexture;                                    		// 0x000068 (0x0004)              
	float                                              VCoord;                                           		// 0x00006C (0x0004)              
	struct FLinearColor                                UnpackMin;                                        		// 0x000070 (0x0010)              
	struct FLinearColor                                UnpackMax;                                        		// 0x000080 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionBakedVectorParameter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionBakedVectorParameter::pClassPointer = NULL;

//0x000078 (0x0000D4 - 0x00005C)
//MaterialExpressionColourTransform[0x10386620]
class UMaterialExpressionColourTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            m_Input;                                          		// 0x00005C (0x001C)              
	struct FExpressionInput                            m_Hue;                                            		// 0x000078 (0x001C)              
	struct FExpressionInput                            m_Saturation;                                     		// 0x000094 (0x001C)              
	struct FExpressionInput                            m_Brightness;                                     		// 0x0000B0 (0x001C)              
	struct FName                                       ExpressionName;                                   		// 0x0000CC (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionColourTransform");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionColourTransform::pClassPointer = NULL;

//0x000010 (0x00006C - 0x00005C)
//MaterialExpressionFeatureEmissiveLevel[0x103864F0]
class UMaterialExpressionFeatureEmissiveLevel : public UMaterialExpression
{
public:
	class UTexture*                                    m_DefaultTexture;                                 		// 0x00005C (0x0004)              
	int                                                m_CoordinateIndex;                                		// 0x000060 (0x0004)              
	class UMaterialExpressionScalarParameter*          m_UVOverrideParameter;                            		// 0x000064 (0x0004)              
	class UMaterialExpressionScalarParameter*          m_UVMaskParameter;                                		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionFeatureEmissiveLevel");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionFeatureEmissiveLevel::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionNightLightLevel[0x103863C0]
class UMaterialExpressionNightLightLevel : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionNightLightLevel");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionNightLightLevel::pClassPointer = NULL;

//0x000001 (0x00005D - 0x00005C)
//MaterialExpressionPrimaryLight[0x10386290]
class UMaterialExpressionPrimaryLight : public UMaterialExpression
{
public:
	unsigned char                                      m_eDataType;                                      		// 0x00005C (0x0001)              PROPERTY: etPrimaryLightDataType

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionPrimaryLight");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionPrimaryLight::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionRandom[0x10386160]
class UMaterialExpressionRandom : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionRandom");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionRandom::pClassPointer = NULL;

//0x000024 (0x000080 - 0x00005C)
//MaterialExpressionScaleAndBias[0x10386030]
class UMaterialExpressionScaleAndBias : public UMaterialExpression
{
public:
	float                                              m_fScale;                                         		// 0x00005C (0x0004)              
	float                                              m_fBias;                                          		// 0x000060 (0x0004)              
	struct FExpressionInput                            m_Input;                                          		// 0x000064 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionScaleAndBias");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionScaleAndBias::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionTimeOfDay[0x10385F00]
class UMaterialExpressionTimeOfDay : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionTimeOfDay");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTimeOfDay::pClassPointer = NULL;

//0x00003C (0x000098 - 0x00005C)
//MaterialExpressionVectorCurve[0x10385DD0]
class UMaterialExpressionVectorCurve : public UMaterialExpression
{
public:
	struct FRawDistributionVector                      m_Curve;                                          		// 0x00005C (0x001C)              
	unsigned long                                      m_bSRGB : 1;                                      		// 0x000078 (0x0004) [0x00000001] 
	struct FExpressionInput                            m_Time;                                           		// 0x00007C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MaterialExpressionVectorCurve");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionVectorCurve::pClassPointer = NULL;

//0x000028 (0x000098 - 0x000070)
//RTWMorphNodeGroup[0x10385CA0]
class URTWMorphNodeGroup : public UMorphNodeWeightBase
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x000070 (0x0004) [0x00000001] 
	unsigned long                                      bVisibleUI : 1;                                   		// 0x000070 (0x0004) [0x00000002] 
	unsigned long                                      bConstrainChildrenWeights : 1;                    		// 0x000070 (0x0004) [0x00000004] 
	float                                              MaxChildrenWeightSum;                             		// 0x000074 (0x0004)              
	FVector3                                           CameraPosition;                                   		// 0x000078 (0x000C)              
	FVector3                                           CameraTarget;                                     		// 0x000084 (0x000C)              
	float                                              MaxTiltAngle;                                     		// 0x000090 (0x0004)              
	float                                              FOV;                                              		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWMorphNodeGroup");
		return pClassPointer;
	};
};
UClass* URTWMorphNodeGroup::pClassPointer = NULL;

//0x000010 (0x000084 - 0x000074)
//RTWMorphNodeTexPose[0x10385B70]
class URTWMorphNodeTexPose : public UMorphNodePose
{
public:
	class UTexture2D*                                  NormalMap;                                        		// 0x000074 (0x0004)              
	class UTexture2D*                                  ColourMap;                                        		// 0x000078 (0x0004)              
	int                                                Uid;                                              		// 0x00007C (0x0004)              
	class URTWMorphNodeWeight*                         ParentNode;                                       		// 0x000080 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWMorphNodeTexPose");
		return pClassPointer;
	};
};
UClass* URTWMorphNodeTexPose::pClassPointer = NULL;

//0x000024 (0x000094 - 0x000070)
//RTWMorphNodeWeightBase[0x10385A40]
class URTWMorphNodeWeightBase : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                       		// 0x000070 (0x0004)              
	float                                              DefaultWeight;                                    		// 0x000074 (0x0004)              
	struct FString                                     Description;                                      		// 0x000078 (0x000C)              
	int                                                Uid;                                              		// 0x000084 (0x0004)              
	TArray<class URTWMorphNodeWeightBase*>             Subscribers;                                      		// 0x000088 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWMorphNodeWeightBase");
		return pClassPointer;
	};

public:
	struct FString RetDescription();//APBGame.RTWMorphNodeWeightBase.RetDescription
	void SetDefaultWeight(float Weight);//APBGame.RTWMorphNodeWeightBase.SetDefaultWeight
	void ForceNodeWeight(float Weight);//APBGame.RTWMorphNodeWeightBase.ForceNodeWeight
	float RetDefaultWeight();//APBGame.RTWMorphNodeWeightBase.RetDefaultWeight
	void ChangeNodeWeight(float Delta);//APBGame.RTWMorphNodeWeightBase.ChangeNodeWeight
	bool CanBeIncreased();//APBGame.RTWMorphNodeWeightBase.CanBeIncreased
	void ComputeRandomWeight();//APBGame.RTWMorphNodeWeightBase.ComputeRandomWeight
	float RetNodeWeight();//APBGame.RTWMorphNodeWeightBase.RetNodeWeight
	void UpdateNodeWeight(float Delta);//APBGame.RTWMorphNodeWeightBase.UpdateNodeWeight
	void AddSubscriber(class URTWMorphNodeWeightBase* MorphNode);//APBGame.RTWMorphNodeWeightBase.AddSubscriber
	void Reset();//APBGame.RTWMorphNodeWeightBase.Reset
	void SetRandomWeight();//APBGame.RTWMorphNodeWeightBase.SetRandomWeight
	bool CanBeDecreased();//APBGame.RTWMorphNodeWeightBase.CanBeDecreased
};
UClass* URTWMorphNodeWeightBase::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//RTWMorphNodeBiPolar[0x10385910]
class URTWMorphNodeBiPolar : public URTWMorphNodeWeightBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWMorphNodeBiPolar");
		return pClassPointer;
	};

public:
	void ComputeRandomWeight();//APBGame.RTWMorphNodeBiPolar.ComputeRandomWeight
	void UpdateNodeWeight(float Delta);//APBGame.RTWMorphNodeBiPolar.UpdateNodeWeight
	bool CanBeIncreased();//APBGame.RTWMorphNodeBiPolar.CanBeIncreased
	bool CanBeDecreased();//APBGame.RTWMorphNodeBiPolar.CanBeDecreased
};
UClass* URTWMorphNodeBiPolar::pClassPointer = NULL;

//0x000010 (0x0000A4 - 0x000094)
//RTWMorphNodeMultiWay[0x103857E0]
class URTWMorphNodeMultiWay : public URTWMorphNodeWeightBase
{
public:
	int                                                BaseSlot;                                         		// 0x000094 (0x0004)              
	TArray<float>                                      Thresholds;                                       		// 0x000098 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWMorphNodeMultiWay");
		return pClassPointer;
	};

public:
	void ComputeRandomWeight();//APBGame.RTWMorphNodeMultiWay.ComputeRandomWeight
	bool CanBeDecreased();//APBGame.RTWMorphNodeMultiWay.CanBeDecreased
	bool CanBeIncreased();//APBGame.RTWMorphNodeMultiWay.CanBeIncreased
	void UpdateNodeWeight(float Delta);//APBGame.RTWMorphNodeMultiWay.UpdateNodeWeight
};
UClass* URTWMorphNodeMultiWay::pClassPointer = NULL;

//0x000000 (0x0000A4 - 0x0000A4)
//RTWMorphNode3Way[0x103856B0]
class URTWMorphNode3Way : public URTWMorphNodeMultiWay
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWMorphNode3Way");
		return pClassPointer;
	};
};
UClass* URTWMorphNode3Way::pClassPointer = NULL;

//0x000000 (0x0000A4 - 0x0000A4)
//RTWMorphNode4Way[0x10385580]
class URTWMorphNode4Way : public URTWMorphNodeMultiWay
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWMorphNode4Way");
		return pClassPointer;
	};
};
UClass* URTWMorphNode4Way::pClassPointer = NULL;

//0x000000 (0x0000A4 - 0x0000A4)
//RTWMorphNode5Way[0x10385450]
class URTWMorphNode5Way : public URTWMorphNodeMultiWay
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWMorphNode5Way");
		return pClassPointer;
	};
};
UClass* URTWMorphNode5Way::pClassPointer = NULL;

//0x000004 (0x000098 - 0x000094)
//RTWMorphNodeWeight[0x10385320]
class URTWMorphNodeWeight : public URTWMorphNodeWeightBase
{
public:
	unsigned long                                      bSelectOnlyOneChildren : 1;                       		// 0x000094 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWMorphNodeWeight");
		return pClassPointer;
	};

public:
	class UMorphNodeBase* GetChild(int N);//APBGame.RTWMorphNodeWeight.GetChild
	bool CanBeDecreased();//APBGame.RTWMorphNodeWeight.CanBeDecreased
	bool CanBeIncreased();//APBGame.RTWMorphNodeWeight.CanBeIncreased
	void SetSelectedChildIndex(int N);//APBGame.RTWMorphNodeWeight.SetSelectedChildIndex
	void UpdateNodeWeight(float Delta);//APBGame.RTWMorphNodeWeight.UpdateNodeWeight
	void ComputeRandomWeight();//APBGame.RTWMorphNodeWeight.ComputeRandomWeight
	int GetNumChildren();//APBGame.RTWMorphNodeWeight.GetNumChildren
	int GetSelectedChildIndex();//APBGame.RTWMorphNodeWeight.GetSelectedChildIndex
};
UClass* URTWMorphNodeWeight::pClassPointer = NULL;

//0x00001C (0x0000B4 - 0x000098)
//RTWSkelControlSingleBoneScale[0x103851F0]
class URTWSkelControlSingleBoneScale : public USkelControlBase
{
public:
	FVector3                                           MinBoneScale;                                     		// 0x000098 (0x000C)              
	FVector3                                           MaxBoneScale;                                     		// 0x0000A4 (0x000C)              
	unsigned long                                      bPropagateScaling : 1;                            		// 0x0000B0 (0x0004) [0x00000001] 
	unsigned long                                      bIsForHeightScaling : 1;                          		// 0x0000B0 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWSkelControlSingleBoneScale");
		return pClassPointer;
	};
};
UClass* URTWSkelControlSingleBoneScale::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//APBStudio[0x103850C0]
class UAPBStudio : public UObject
{
public:
	TArray<DWORD>                                      m_apStates;                                       		// 0x000040 (0x000C)              
	DWORD                                              m_pCurrentState;                                  		// 0x00004C (0x0004)              
	class UAPBStudioHelper*                            m_pHelper;                                        		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBStudio");
		return pClassPointer;
	};

public:
	void SetStringParameter(struct FString sName,struct FString sValue);//APBGame.APBStudio.SetStringParameter
	void SetState(struct FString sName);//APBGame.APBStudio.SetState
	TArray<struct FString> GetStateParameters();//APBGame.APBStudio.GetStateParameters
	float GetFloatParameter(struct FString sName);//APBGame.APBStudio.GetFloatParameter
	int GetIntParameter(struct FString sName);//APBGame.APBStudio.GetIntParameter
	void LoadSymbol(struct FString sName);//APBGame.APBStudio.LoadSymbol
	void SetIntParameter(struct FString sName,int fValue);//APBGame.APBStudio.SetIntParameter
	void SetBoolParameter(struct FString sName,bool fValue);//APBGame.APBStudio.SetBoolParameter
	void ClearSymbol();//APBGame.APBStudio.ClearSymbol
	void SetFloatParameter(struct FString sName,float fValue);//APBGame.APBStudio.SetFloatParameter
	unsigned char GetParameterType(struct FString sName);//APBGame.APBStudio.GetParameterType
	TArray<struct FString> GetStates();//APBGame.APBStudio.GetStates
	bool GetBoolParameter(struct FString sName);//APBGame.APBStudio.GetBoolParameter
	struct FString GetStringParameter(struct FString sName);//APBGame.APBStudio.GetStringParameter
	void Init(bool bIsInGame);//APBGame.APBStudio.Init
};
UClass* UAPBStudio::pClassPointer = NULL;

//0x000044 (0x000098 - 0x000054)
//APBStudioCharacter[0x10384F90]
class UAPBStudioCharacter : public UAPBStudio
{
public:
	unsigned long                                      m_bIsInGame : 1;                                  		// 0x000054 (0x0004) [0x00000001] 
	class UGolemDescriptor*                            m_pDescriptor;                                    		// 0x000058 (0x0004)              
	class UGolemMeshBaker*                             m_pMeshBaker;                                     		// 0x00005C (0x0004)              
	class UcUVBleedMeshBaker*                          m_pUVBleedMeshBaker;                              		// 0x000060 (0x0004)              
	class UGolemSkeletalMesh*                          m_pGolemSkeletalMesh;                             		// 0x000064 (0x0004)              
	class UMorphTargetSet*                             m_pGolemMorphSet;                                 		// 0x000068 (0x0004)              
	class UGolemSkeletalMesh*                          m_pUVBleedSkeletalMesh;                           		// 0x00006C (0x0004)              
	class USkeletalMeshComponent*                      m_pSkeletalMeshComponent;                         		// 0x000070 (0x0004)              
	class USkeletalMeshComponent*                      m_pBakingSkeletalMeshComponent;                   		// 0x000074 (0x0004)              
	class UGolemHairSkeletalMeshComponent*             m_pHairSkeletalMeshComponent;                     		// 0x000078 (0x0004)              
	class UMaterialInstanceConstant*                   m_pBodyMaterial;                                  		// 0x00007C (0x0004)              
	TArray<class UcGolemRenderTarget*>                 m_apWorkRenderTargets;                            		// 0x000080 (0x000C)              
	class UcCharacterTextureBaker*                     m_pCharacterTextureBaker;                         		// 0x00008C (0x0004)              
	class UMaterial*                                   m_pParentBodyMaterial;                            		// 0x000090 (0x0004)              
	DWORD                                              m_pBakingMeshProxy;                               		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBStudioCharacter");
		return pClassPointer;
	};

public:
	void Init(bool bIsInGame);//APBGame.APBStudioCharacter.Init
	void ForceRebuild();//APBGame.APBStudioCharacter.ForceRebuild
	void SetGolemDescriptor(class UGolemDescriptor* pDesc);//APBGame.APBStudioCharacter.SetGolemDescriptor
	void Done();//APBGame.APBStudioCharacter.Done
};
UClass* UAPBStudioCharacter::pClassPointer = NULL;

//0x0000AC (0x000100 - 0x000054)
//APBStudioVehicle[0x10384E60]
class UAPBStudioVehicle : public UAPBStudio
{
public:
	class UGolemobileDescriptor*                       m_pDescriptor;                                    		// 0x000054 (0x0004)              
	class UGolemobileMeshBaker*                        m_pMeshBaker;                                     		// 0x000058 (0x0004)              
	class UGolemTextureBaker*                          m_pTextureBaker;                                  		// 0x00005C (0x0004)              
	class UcUVBleedMeshBaker*                          m_pUVBleedMeshBaker;                              		// 0x000060 (0x0004)              
	class UGolemSkeletalMesh*                          m_pUVBleedSkeletalMesh;                           		// 0x000064 (0x0004)              
	class UGolemobile*                                 m_pGolemobile;                                    		// 0x000068 (0x0004)              
	class UcGolemRenderTarget*                         m_apRenderTargets[0x9];                           		// 0x00006C (0x0024)              
	class UcGolemRenderTarget*                         m_pDilationRenderTarget;                          		// 0x000090 (0x0004)              
	class UcGolemRenderTarget*                         m_pMaskRenderTarget;                              		// 0x000094 (0x0004)              
	class UcGolemRenderTarget*                         m_pTempRenderTarget;                              		// 0x000098 (0x0004)              
	class UcGolemRenderTarget*                         m_pIntermediateRenderTarget;                      		// 0x00009C (0x0004)              
	class UGolemobileCommonParts*                      m_pCommonParts;                                   		// 0x0000A0 (0x0004)              
	float                                              m_fExteriorDecalsTime;                            		// 0x0000A4 (0x0004)              
	float                                              m_fExteriorDiffuseTime;                           		// 0x0000A8 (0x0004)              
	float                                              m_fExteriorNormalTime;                            		// 0x0000AC (0x0004)              
	float                                              m_fExteriorEmissiveTime;                          		// 0x0000B0 (0x0004)              
	float                                              m_fExteriorTotalTime;                             		// 0x0000B4 (0x0004)              
	float                                              m_fInteriorDiffuseTime;                           		// 0x0000B8 (0x0004)              
	float                                              m_fInteriorNormalTime;                            		// 0x0000BC (0x0004)              
	float                                              m_fInteriorEmissiveTime;                          		// 0x0000C0 (0x0004)              
	float                                              m_fInteriorTotalTime;                             		// 0x0000C4 (0x0004)              
	float                                              m_fWheelDiffuseTime;                              		// 0x0000C8 (0x0004)              
	float                                              m_fWheelNormalTime;                               		// 0x0000CC (0x0004)              
	float                                              m_fWheelEmissiveTime;                             		// 0x0000D0 (0x0004)              
	float                                              m_fWheelTotalTime;                                		// 0x0000D4 (0x0004)              
	float                                              m_fGlassDecalsTime;                               		// 0x0000D8 (0x0004)              
	float                                              m_fGlassTotalTime;                                		// 0x0000DC (0x0004)              
	DWORD                                              m_pBodyColourStack;                               		// 0x0000E0 (0x0004)              
	DWORD                                              m_pPartColourStack;                               		// 0x0000E4 (0x0004)              
	DWORD                                              m_pBodyNormalStack;                               		// 0x0000E8 (0x0004)              
	DWORD                                              m_pPartNormalStack;                               		// 0x0000EC (0x0004)              
	DWORD                                              m_pLicensePlateStack;                             		// 0x0000F0 (0x0004)              
	class UcVehicleTextureBaker*                       m_pVehicleTextureBaker;                           		// 0x0000F4 (0x0004)              
	class USkeletalMeshComponent*                      m_pBakingSkeletalMeshComponent;                   		// 0x0000F8 (0x0004)              
	DWORD                                              m_pBakingMeshProxy;                               		// 0x0000FC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBStudioVehicle");
		return pClassPointer;
	};

public:
	class UcVehicleTextureBaker* RetVehicleTextureBaker();//APBGame.APBStudioVehicle.RetVehicleTextureBaker
	void SetGolemobile(class UGolemobile* pGolemobile);//APBGame.APBStudioVehicle.SetGolemobile
	void Done();//APBGame.APBStudioVehicle.Done
	void Init(bool bIsInGame);//APBGame.APBStudioVehicle.Init
	void ForceRebuild();//APBGame.APBStudioVehicle.ForceRebuild
	void BakeGolemobileToPackage(struct FString PackageName,bool bDoubleSizeDiffuse);//APBGame.APBStudioVehicle.BakeGolemobileToPackage
	void SetGolemobileDescriptor(class UGolemobileDescriptor* pDesc);//APBGame.APBStudioVehicle.SetGolemobileDescriptor
};
UClass* UAPBStudioVehicle::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//APBStudioHelper[0x10384D30]
class UAPBStudioHelper : public UObject
{
public:
	class UTextureRenderTarget2D*                      m_aRenderTargets[0x4];                            		// 0x000040 (0x0010)              
	class UTextureRenderTarget2D*                      m_SymbolRenderTarget;                             		// 0x000050 (0x0004)              
	class UTextureRenderTarget2D*                      m_SymbolTempRenderTarget;                         		// 0x000054 (0x0004)              
	int                                                m_nRenderTargetSize;                              		// 0x000058 (0x0004)              
	class UGolemTextureBaker*                          m_pTextureBaker;                                  		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBStudioHelper");
		return pClassPointer;
	};

public:
	class UTextureRenderTarget2D* GetRenderTarget(int nIndex);//APBGame.APBStudioHelper.GetRenderTarget
	void Init();//APBGame.APBStudioHelper.Init
};
UClass* UAPBStudioHelper::pClassPointer = NULL;

//0x000268 (0x0002A8 - 0x000040)
//cCharacterTextureBaker[0x10384C00]
class UcCharacterTextureBaker : public UObject
{
public:
	struct FCharacterTextureBuildData                  m_BuildData;                                      		// 0x000040 (0x003C)              
	float                                              m_AverageStepTimes[0x2D];                         		// 0x00007C (0x00B4)              
	float                                              m_LastStepTimes[0x2D];                            		// 0x000130 (0x00B4)              
	float                                              m_LastStepMaxOverBudgetTime[0x2D];                		// 0x0001E4 (0x00B4)              
	float                                              m_fDiffuseTotalTime;                              		// 0x000298 (0x0004)              
	float                                              m_fDiffuseTotalStepsTime;                         		// 0x00029C (0x0004)              
	float                                              m_fNormalTotalTime;                               		// 0x0002A0 (0x0004)              
	float                                              m_fNormalTotalStepsTime;                          		// 0x0002A4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCharacterTextureBaker");
		return pClassPointer;
	};
};
UClass* UcCharacterTextureBaker::pClassPointer = NULL;

//0x000078 (0x0000B8 - 0x000040)
//cUVBleedMeshBaker[0x10384AD0]
class UcUVBleedMeshBaker : public UObject
{
public:
	struct FUVBleedBuildData                           m_BuildData;                                      		// 0x000040 (0x0014)              
	float                                              m_AverageStepTimes[0x4];                          		// 0x000054 (0x0010)              
	float                                              m_LastStepTimes[0x4];                             		// 0x000064 (0x0010)              
	double                                             m_SeamExtBuildTotal;                              		// 0x000074 (0x0008)              
	double                                             m_SeamExtBuildUVBleedGeometry;                    		// 0x00007C (0x0008)              
	double                                             m_SeamExtBuildExpandedVBIB_Chunked;               		// 0x000084 (0x0008)              
	double                                             m_SeamExtUpdateFStaticLODModel;                   		// 0x00008C (0x0008)              
	double                                             m_SeamExtUVBleedGeometryFnTotal;                  		// 0x000094 (0x0008)              
	double                                             m_SeamExtUVBleedUniquePosNebCache;                		// 0x00009C (0x0008)              
	double                                             m_SeamExtUVBleedRawObjectCoInfo;                  		// 0x0000A4 (0x0008)              
	float                                              m_fTotalTime;                                     		// 0x0000AC (0x0004)              
	float                                              m_fTotalStepsTime;                                		// 0x0000B0 (0x0004)              
	DWORD                                              m_pRenderFence;                                   		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cUVBleedMeshBaker");
		return pClassPointer;
	};
};
UClass* UcUVBleedMeshBaker::pClassPointer = NULL;

//0x000100 (0x000140 - 0x000040)
//cVehicleTextureBaker[0x103849A0]
class UcVehicleTextureBaker : public UObject
{
public:
	struct FVehicleTextureBuildData                    m_BuildData;                                      		// 0x000040 (0x0028)              
	TArray<float>                                      m_AverageStepTimes;                               		// 0x000068 (0x000C)              
	float                                              m_LastStepTimes[0x22];                            		// 0x000074 (0x0088)              
	float                                              m_fExteriorTotalStepsTime;                        		// 0x0000FC (0x0004)              
	float                                              m_fInteriorTotalStepsTime;                        		// 0x000100 (0x0004)              
	float                                              m_fGlassTotalStepsTime;                           		// 0x000104 (0x0004)              
	float                                              m_fWheelsTotalStepsTime;                          		// 0x000108 (0x0004)              
	double                                             m_fExteriorTotalTime;                             		// 0x00010C (0x0008)              
	double                                             m_fInteriorTotalTime;                             		// 0x000114 (0x0008)              
	double                                             m_fGlassTotalTime;                                		// 0x00011C (0x0008)              
	double                                             m_fWheelsTotalTime;                               		// 0x000124 (0x0008)              
	int                                                m_nNumDecalsBuilt;                                		// 0x00012C (0x0004)              
	int                                                m_nNumSymbolsBuilt;                               		// 0x000130 (0x0004)              
	int                                                m_nNumDecalBuildCalls;                            		// 0x000134 (0x0004)              
	double                                             m_fTotalDecalsStepTime;                           		// 0x000138 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleTextureBaker");
		return pClassPointer;
	};
};
UClass* UcVehicleTextureBaker::pClassPointer = NULL;

//0x000048 (0x000088 - 0x000040)
//cAssetDescriptorManager[0x10384870]
class UcAssetDescriptorManager : public UObject
{
public:
	struct FMap_Mirror                                 m_Descriptors;                                    		// 0x000040 (0x003C)              
	int                                                m_nMaxSize;                                       		// 0x00007C (0x0004)              
	float                                              m_fPurgeAmount;                                   		// 0x000080 (0x0004)              
	int                                                m_nSize;                                          		// 0x000084 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAssetDescriptorManager");
		return pClassPointer;
	};

public:
	void AddDescriptor(class UcCompressedAssetCustomisation* Customisation);//APBGame.cAssetDescriptorManager.AddDescriptor
	class UcCompressedAssetCustomisation* FindDescriptor(struct FGuid TheGuid);//APBGame.cAssetDescriptorManager.FindDescriptor
	void RemoveDescriptor(class UcCompressedAssetCustomisation* Customisation);//APBGame.cAssetDescriptorManager.RemoveDescriptor
};
UClass* UcAssetDescriptorManager::pClassPointer = NULL;

//0x000030 (0x000070 - 0x000040)
//cBuildManager[0x10384740]
class UcBuildManager : public UcBuildManagerBase
{
public:
	class UcBuildScheduler*                            m_Scheduler;                                      		// 0x000040 (0x0004)              
	class UcCustomisedAssetMemoryCache*                m_MemoryCache;                                    		// 0x000044 (0x0004)              
	DWORD                                              m_DiskCache;                                      		// 0x000048 (0x0004)              
	int                                                m_nRequestRefreshStride;                          		// 0x00004C (0x0004)              
	unsigned long                                      m_bActive : 1;                                    		// 0x000050 (0x0004) [0x00000001] 
	float                                              m_fBuildTime;                                     		// 0x000054 (0x0004)              
	float                                              m_fIdleBuildTime;                                 		// 0x000058 (0x0004)              
	float                                              m_fActionBuildTime;                               		// 0x00005C (0x0004)              
	float                                              m_fSocialBuildTime;                               		// 0x000060 (0x0004)              
	float                                              m_fThumbBuildTime;                                		// 0x000064 (0x0004)              
	float                                              m_fMultiGPUCompatibilityBuildTime;                		// 0x000068 (0x0004)              
	int                                                m_iNumTopPriority;                                		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBuildManager");
		return pClassPointer;
	};

public:
	void SetIdleTimeBudget(bool bStreamWithTimeReserve);//APBGame.cBuildManager.SetIdleTimeBudget
	void SetThumbTimeBudget();//APBGame.cBuildManager.SetThumbTimeBudget
	void NotifyActorIrrelevant(class AActor* pActor);//APBGame.cBuildManager.NotifyActorIrrelevant
	void SetIngameTimeBudget(bool bAction);//APBGame.cBuildManager.SetIngameTimeBudget
};
UClass* UcBuildManager::pClassPointer = NULL;

//0x00002C (0x00006C - 0x000040)
//cBuildRequest[0x10384610]
class UcBuildRequest : public UObject
{
public:
	DWORD                                              VfTable_IiCustomisedActor;                        		// 0x000040 (0x0004)              
	class AActor*                                      m_pActor;                                         		// 0x000044 (0x0004)              
	class AActor*                                      m_vfxActor;                                       		// 0x000048 (0x0004)              
	unsigned long                                      m_bFirstTime : 1;                                 		// 0x00004C (0x0004) [0x00000001] 
	unsigned long                                      m_bLoadingStarted : 1;                            		// 0x00004C (0x0004) [0x00000002] 
	unsigned long                                      m_bInProgress : 1;                                		// 0x00004C (0x0004) [0x00000004] 
	unsigned long                                      m_bPrecache : 1;                                  		// 0x00004C (0x0004) [0x00000008] 
	unsigned long                                      m_bTopPriority : 1;                               		// 0x00004C (0x0004) [0x00000010] 
	unsigned long                                      m_bLocalPlayer : 1;                               		// 0x00004C (0x0004) [0x00000020] 
	unsigned long                                      m_bFinished : 1;                                  		// 0x00004C (0x0004) [0x00000040] 
	unsigned long                                      m_wasCancelled : 1;                               		// 0x00004C (0x0004) [0x00000080] 
	unsigned long                                      m_bDisableCache : 1;                              		// 0x00004C (0x0004) [0x00000100] 
	unsigned long                                      m_bDisableTextureCompression : 1;                 		// 0x00004C (0x0004) [0x00000200] 
	struct FGuid                                       m_Guid;                                           		// 0x000050 (0x0010)              
	class UcCompressedAssetCustomisation*              m_CompressedDescriptor;                           		// 0x000060 (0x0004)              
	class UcAssetCustomisation*                        m_pAssetDescriptor;                               		// 0x000064 (0x0004)              
	class UcBuildRequest*                              m_pPreviousRequest;                               		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBuildRequest");
		return pClassPointer;
	};

public:
	void CustomisationDownloadComplete(class UcCompressedAssetCustomisation* Data,int nUserData);//APBGame.cBuildRequest.CustomisationDownloadComplete
	void BuildVFXEvent();//APBGame.cBuildRequest.BuildVFXEvent
	class UcAssetCustomisation* RetAssetDescriptor();//APBGame.cBuildRequest.RetAssetDescriptor
	void SetAssetDescriptor(class UcAssetCustomisation* pDesc);//APBGame.cBuildRequest.SetAssetDescriptor
};
UClass* UcBuildRequest::pClassPointer = NULL;

//0x000058 (0x0000C4 - 0x00006C)
//cCharacterRequest[0x103844E0]
class UcCharacterRequest : public UcBuildRequest
{
public:
	TArray<struct FAudioCustomisationSwitch>           m_aAudioCustomisationSwitches;                    		// 0x00006C (0x000C)              
	unsigned long                                      m_bIsAStatue : 1;                                 		// 0x000078 (0x0004) [0x00000001] 
	unsigned long                                      m_bIsAUILobbyCharacter : 1;                       		// 0x000078 (0x0004) [0x00000002] 
	unsigned long                                      m_bStateJustChanged : 1;                          		// 0x000078 (0x0004) [0x00000004] 
	unsigned long                                      m_bIsFemale : 1;                                  		// 0x000078 (0x0004) [0x00000008] 
	int                                                m_nNumLODs;                                       		// 0x00007C (0x0004)              
	int                                                m_nLOD;                                           		// 0x000080 (0x0004)              
	int                                                m_nPrevLOD;                                       		// 0x000084 (0x0004)              
	class UGolemSkeletalMesh*                          m_pTargetSkeletalMesh;                            		// 0x000088 (0x0004)              
	class UMorphTargetSet*                             m_pTargetMorphSet;                                		// 0x00008C (0x0004)              
	class UTexture2D*                                  m_pTargetDiffuse;                                 		// 0x000090 (0x0004)              
	class UTexture2D*                                  m_pTargetNormal;                                  		// 0x000094 (0x0004)              
	class UGolemSkeletalMesh*                          m_pUVBleedSkeletalMesh;                           		// 0x000098 (0x0004)              
	unsigned char                                      m_BuildState;                                     		// 0x00009C (0x0001)              PROPERTY: etCharacterBuildState
	unsigned char                                      _0x00009D[0x3];                                   		// 0x00009D (0x0003) MISSED OFFSET
	TArray<class UTexture2D*>                          m_aSourceTexturesRequired;                        		// 0x0000A0 (0x000C)              
	TArray<class USkeletalMesh*>                       m_aSourceMeshesRequired;                          		// 0x0000AC (0x000C)              
	float                                              m_HeightFactor;                                   		// 0x0000B8 (0x0004)              
	int                                                m_nTotalSourceTexturesReady;                      		// 0x0000BC (0x0004)              
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                            		// 0x0000C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCharacterRequest");
		return pClassPointer;
	};

public:
	bool RetIsAUILobbyCharacter();//APBGame.cCharacterRequest.RetIsAUILobbyCharacter
	class UMorphTargetSet* RetTargetMorphSet();//APBGame.cCharacterRequest.RetTargetMorphSet
	void SetIsAStatue(bool bValue);//APBGame.cCharacterRequest.SetIsAStatue
	void SetIsAUILobbyCharacter(bool bValue);//APBGame.cCharacterRequest.SetIsAUILobbyCharacter
	class UTexture2D* RetTargetNormal();//APBGame.cCharacterRequest.RetTargetNormal
	class UTexture2D* RetTargetDiffuse();//APBGame.cCharacterRequest.RetTargetDiffuse
	void SetNumLODs(int nNumLODs);//APBGame.cCharacterRequest.SetNumLODs
	class USkeletalMesh* RetTargetSkeletalMesh();//APBGame.cCharacterRequest.RetTargetSkeletalMesh
	bool RetIsAStatue();//APBGame.cCharacterRequest.RetIsAStatue
};
UClass* UcCharacterRequest::pClassPointer = NULL;

//0x00000C (0x000078 - 0x00006C)
//cDummyRequest[0x103843B0]
class UcDummyRequest : public UcBuildRequest
{
public:
	int                                                m_nTotalNumSteps;                                 		// 0x00006C (0x0004)              
	float                                              m_fStepTime;                                      		// 0x000070 (0x0004)              
	int                                                m_nCurrentNumSteps;                               		// 0x000074 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDummyRequest");
		return pClassPointer;
	};
};
UClass* UcDummyRequest::pClassPointer = NULL;

//0x000008 (0x000074 - 0x00006C)
//cGraffitiTextureRequest[0x10384280]
class UcGraffitiTextureRequest : public UcBuildRequest
{
public:
	class UTexture2D*                                  m_pTargetAsset;                                   		// 0x00006C (0x0004)              
	DWORD                                              m_pBuilder;                                       		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGraffitiTextureRequest");
		return pClassPointer;
	};
};
UClass* UcGraffitiTextureRequest::pClassPointer = NULL;

//0x000018 (0x000084 - 0x00006C)
//cThumbnailBaseWorker[0x10384150]
class UcThumbnailBaseWorker : public UcBuildRequest
{
public:
	class UTexture2D*                                  m_pOutputImage;                                   		// 0x00006C (0x0004)              
	int                                                m_nImageSize;                                     		// 0x000070 (0x0004)              
	struct FLinearColor                                m_BackgroundColor;                                		// 0x000074 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cThumbnailBaseWorker");
		return pClassPointer;
	};
};
UClass* UcThumbnailBaseWorker::pClassPointer = NULL;

//0x000094 (0x000118 - 0x000084)
//cThumbnailSkelBaseWorker[0x10384020]
class UcThumbnailSkelBaseWorker : public UcThumbnailBaseWorker
{
public:
	class UcBuildRequest*                              m_pSkelRequest;                                   		// 0x000084 (0x0004)              
	unsigned char                                      _0x000088[0x8];                                   		// 0x000088 (0x0008) MISSED OFFSET
	FMatrix                                            m_ViewMatrix;                                     		// 0x000090 (0x0040)              
	FMatrix                                            m_ProjectionMatrix;                               		// 0x0000D0 (0x0040)              
	DWORD                                              m_pScenePointer;                                  		// 0x000110 (0x0004)              
	unsigned long                                      m_bStartStreamIn : 1;                             		// 0x000114 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cThumbnailSkelBaseWorker");
		return pClassPointer;
	};
};
UClass* UcThumbnailSkelBaseWorker::pClassPointer = NULL;

//0x000001 (0x000119 - 0x000118)
//cThumbnailGolemobileWorker[0x10383EF0]
class UcThumbnailGolemobileWorker : public UcThumbnailSkelBaseWorker
{
public:
	unsigned char                                      m_eVehicleSetupType;                              		// 0x000118 (0x0001)              PROPERTY: etVehicleSetupType

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cThumbnailGolemobileWorker");
		return pClassPointer;
	};
};
UClass* UcThumbnailGolemobileWorker::pClassPointer = NULL;

//0x000000 (0x000118 - 0x000118)
//cThumbnailGolemWorker[0x10383DC0]
class UcThumbnailGolemWorker : public UcThumbnailSkelBaseWorker
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cThumbnailGolemWorker");
		return pClassPointer;
	};
};
UClass* UcThumbnailGolemWorker::pClassPointer = NULL;

//0x000008 (0x00008C - 0x000084)
//cThumbnailSymbolWorker[0x10383C90]
class UcThumbnailSymbolWorker : public UcThumbnailBaseWorker
{
public:
	DWORD                                              m_pBuilder;                                       		// 0x000084 (0x0004)              
	DWORD                                              m_pDescriptor;                                    		// 0x000088 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cThumbnailSymbolWorker");
		return pClassPointer;
	};
};
UClass* UcThumbnailSymbolWorker::pClassPointer = NULL;

//0x0000A8 (0x000114 - 0x00006C)
//cVehicleRequest[0x10383B60]
class UcVehicleRequest : public UcBuildRequest
{
public:
	int                                                m_nAudioEngineType;                               		// 0x00006C (0x0004)              
	int                                                m_nAudioExhaustType;                              		// 0x000070 (0x0004)              
	int                                                m_nAudioTurboType;                                		// 0x000074 (0x0004)              
	int                                                m_nAudioTransmissionType;                         		// 0x000078 (0x0004)              
	int                                                m_nAudioDumpValveType;                            		// 0x00007C (0x0004)              
	int                                                m_nAudioGearChangeType;                           		// 0x000080 (0x0004)              
	int                                                m_nAudioHornType;                                 		// 0x000084 (0x0004)              
	int                                                m_nAudioSirenType;                                		// 0x000088 (0x0004)              
	int                                                m_nAudioAmpType;                                  		// 0x00008C (0x0004)              
	int                                                m_nAudioSpeakerType;                              		// 0x000090 (0x0004)              
	int                                                m_nNumLODs;                                       		// 0x000094 (0x0004)              
	int                                                m_nLOD;                                           		// 0x000098 (0x0004)              
	int                                                m_nPrevLOD;                                       		// 0x00009C (0x0004)              
	class UGolemSkeletalMesh*                          m_pTargetSkeletalMesh;                            		// 0x0000A0 (0x0004)              
	class UMorphTargetSet*                             m_pTargetMorphSet;                                		// 0x0000A4 (0x0004)              
	struct FVehicleChunkTextures                       m_TargetTextures[0x4];                            		// 0x0000A8 (0x0030)              
	class UGolemSkeletalMesh*                          m_pUVBleedSkeletalMesh;                           		// 0x0000D8 (0x0004)              
	unsigned char                                      m_BuildState;                                     		// 0x0000DC (0x0001)              PROPERTY: etVehicleBuildState
	unsigned char                                      _0x0000DD[0x3];                                   		// 0x0000DD (0x0003) MISSED OFFSET
	unsigned long                                      m_bStateJustChanged : 1;                          		// 0x0000E0 (0x0004) [0x00000001] 
	struct FGolemobileCommonData                       CommonData;                                       		// 0x0000E4 (0x0030)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleRequest");
		return pClassPointer;
	};

public:
	class USkeletalMesh* RetTargetSkeletalMesh();//APBGame.cVehicleRequest.RetTargetSkeletalMesh
	struct FGolemobileCommonData RetCommonData();//APBGame.cVehicleRequest.RetCommonData
	class UMorphTargetSet* RetTargetMorphSet();//APBGame.cVehicleRequest.RetTargetMorphSet
	struct FVehicleChunkTextures RetTargetTextures(unsigned char part);//APBGame.cVehicleRequest.RetTargetTextures
	void SetNumLODs(int nNumLODs);//APBGame.cVehicleRequest.SetNumLODs
};
UClass* UcVehicleRequest::pClassPointer = NULL;

//0x00001C (0x00005C - 0x000040)
//cBuildScheduler[0x10383A30]
class UcBuildScheduler : public UObject
{
public:
	DWORD                                              m_pQueue;                                         		// 0x000040 (0x0004)              
	DWORD                                              m_pDeferredRequestsQueue;                         		// 0x000044 (0x0004)              
	DWORD                                              m_pProcessedDeferredArray;                        		// 0x000048 (0x0004)              
	class UcBuildRequest*                              m_pActiveRequest;                                 		// 0x00004C (0x0004)              
	float                                              m_fActiveRequestPriority;                         		// 0x000050 (0x0004)              
	unsigned long                                      m_bStreamWithTimeReserve : 1;                     		// 0x000054 (0x0004) [0x00000001] 
	int                                                m_iMaxDeferredRequests;                           		// 0x000058 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBuildScheduler");
		return pClassPointer;
	};
};
UClass* UcBuildScheduler::pClassPointer = NULL;

//0x0001AC (0x0001EC - 0x000040)
//cCustomisationSettings[0x10383900]
class UcCustomisationSettings : public UObject
{
public:
	float                                              m_fLODFactor;                                     		// 0x000040 (0x0004)              
	float                                              m_fDistanceFactor;                                		// 0x000044 (0x0004)              
	float                                              m_fDistancePowerFactor;                           		// 0x000048 (0x0004)              
	float                                              m_fVelocityFactor;                                		// 0x00004C (0x0004)              
	float                                              m_fAssetFactor_Texture;                           		// 0x000050 (0x0004)              
	float                                              m_fAssetFactor_Mesh;                              		// 0x000054 (0x0004)              
	float                                              m_fAssetFactor_AnimSets;                          		// 0x000058 (0x0004)              
	float                                              m_fEntityFactor_Player;                           		// 0x00005C (0x0004)              
	float                                              m_fEntityFactor_Vehicle;                          		// 0x000060 (0x0004)              
	float                                              m_fEntityFactor_Graffiti;                         		// 0x000064 (0x0004)              
	unsigned long                                      m_bUseDiskCache : 1;                              		// 0x000068 (0x0004) [0x00000001] 
	unsigned long                                      m_bStreamOutMeshWhenDetached : 1;                 		// 0x000068 (0x0004) [0x00000002] 
	unsigned long                                      m_bLoadedTESTexturePages : 1;                     		// 0x000068 (0x0004) [0x00000004] 
	unsigned long                                      m_bTESEnableCylindricalDepthTest : 1;             		// 0x000068 (0x0004) [0x00000008] 
	int                                                m_nNumBits_Hue;                                   		// 0x00006C (0x0004)              
	int                                                m_nNumBits_Sat;                                   		// 0x000070 (0x0004)              
	int                                                m_nNumBits_Lum;                                   		// 0x000074 (0x0004)              
	int                                                m_nNumBits_Alpha;                                 		// 0x000078 (0x0004)              
	float                                              m_fMinSat;                                        		// 0x00007C (0x0004)              
	float                                              m_fMaxSat;                                        		// 0x000080 (0x0004)              
	float                                              m_fMinLum;                                        		// 0x000084 (0x0004)              
	float                                              m_fMaxLum;                                        		// 0x000088 (0x0004)              
	TArray<struct FSymbolPrimitive>                    m_aSymbolPrimitives;                              		// 0x00008C (0x000C)              
	struct FString                                     m_asColourLookupFiles[0x5];                       		// 0x000098 (0x003C)              
	struct FColourLookup                               m_aColourLookups[0x5];                            		// 0x0000D4 (0x0064)              
	TArray<struct FString>                             m_aSymbolVinylFillNames;                          		// 0x000138 (0x000C)              
	TArray<struct FString>                             m_aSymbolDistanceFieldVinylFillNames;             		// 0x000144 (0x000C)              
	TArray<struct FString>                             m_aSymbolDecalFillNames;                          		// 0x000150 (0x000C)              
	TArray<struct FString>                             m_aSymbolFontFillNames;                           		// 0x00015C (0x000C)              
	TArray<class UMaterialInstanceConstant*>           m_aSymbolVinylFillMaterials;                      		// 0x000168 (0x000C)              
	TArray<class UMaterialInstanceConstant*>           m_aSymbolDistanceFieldVinylFillMaterials;         		// 0x000174 (0x000C)              
	TArray<class UMaterialInstanceConstant*>           m_aSymbolDecalFillMaterials;                      		// 0x000180 (0x000C)              
	TArray<class UMaterialInstanceConstant*>           m_aSymbolFontFillMaterials;                       		// 0x00018C (0x000C)              
	class UTexture2D*                                  m_pWhiteTexture;                                  		// 0x000198 (0x0004)              
	int                                                VehicleBakedExteriorDiffuseSize;                  		// 0x00019C (0x0004)              
	int                                                VehicleBakedExteriorNormalSize;                   		// 0x0001A0 (0x0004)              
	int                                                VehicleBakedExteriorEmissiveSize;                 		// 0x0001A4 (0x0004)              
	int                                                VehicleBakedInteriorDiffuseSize;                  		// 0x0001A8 (0x0004)              
	int                                                VehicleBakedInteriorNormalSize;                   		// 0x0001AC (0x0004)              
	int                                                VehicleBakedInteriorEmissiveSize;                 		// 0x0001B0 (0x0004)              
	int                                                VehicleBakedWheelDiffuseSize;                     		// 0x0001B4 (0x0004)              
	int                                                VehicleBakedWheelNormalSize;                      		// 0x0001B8 (0x0004)              
	int                                                VehicleSharedDamagedNormalSize;                   		// 0x0001BC (0x0004)              
	int                                                VehicleSharedScratchMaskSize;                     		// 0x0001C0 (0x0004)              
	int                                                VehicleSharedSdDDDSize;                           		// 0x0001C4 (0x0004)              
	int                                                VideoQuality;                                     		// 0x0001C8 (0x0004)              
	int                                                VideoFrameRate;                                   		// 0x0001CC (0x0004)              
	int                                                VideoResX;                                        		// 0x0001D0 (0x0004)              
	int                                                VideoResY;                                        		// 0x0001D4 (0x0004)              
	float                                              m_fTESDepthBias;                                  		// 0x0001D8 (0x0004)              
	float                                              m_fTESSlopeThreshold;                             		// 0x0001DC (0x0004)              
	float                                              m_fTESCylindricalDepthBias;                       		// 0x0001E0 (0x0004)              
	float                                              m_fUVExtrusionDistance;                           		// 0x0001E4 (0x0004)              
	int                                                m_nNumDilationPasses;                             		// 0x0001E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCustomisationSettings");
		return pClassPointer;
	};
};
UClass* UcCustomisationSettings::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//cCustomisedAssetCacheEntry[0x103837D0]
class UcCustomisedAssetCacheEntry : public UObject
{
public:
	TArray<struct FNamedBinaryData>                    m_aNamedBinaryData;                               		// 0x000040 (0x000C)              
	double                                             m_fCachedLastUsedTimeStamp;                       		// 0x00004C (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCustomisedAssetCacheEntry");
		return pClassPointer;
	};
};
UClass* UcCustomisedAssetCacheEntry::pClassPointer = NULL;

//0x000014 (0x000068 - 0x000054)
//cCharacterCacheEntry[0x103836A0]
class UcCharacterCacheEntry : public UcCustomisedAssetCacheEntry
{
public:
	class UGolemSkeletalMesh*                          m_SkeletalMesh;                                   		// 0x000054 (0x0004)              
	class UTexture2D*                                  m_DiffuseTexture;                                 		// 0x000058 (0x0004)              
	class UTexture2D*                                  m_NormalTexture;                                  		// 0x00005C (0x0004)              
	float                                              m_HeightFactor;                                   		// 0x000060 (0x0004)              
	unsigned long                                      m_bIsFemale : 1;                                  		// 0x000064 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCharacterCacheEntry");
		return pClassPointer;
	};
};
UClass* UcCharacterCacheEntry::pClassPointer = NULL;

//0x000004 (0x000058 - 0x000054)
//cSingleTextureCacheEntry[0x10383570]
class UcSingleTextureCacheEntry : public UcCustomisedAssetCacheEntry
{
public:
	class UTexture2D*                                  m_Texture;                                        		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSingleTextureCacheEntry");
		return pClassPointer;
	};
};
UClass* UcSingleTextureCacheEntry::pClassPointer = NULL;

//0x000004 (0x000058 - 0x000054)
//cSkeletalMeshCacheEntry[0x10383440]
class UcSkeletalMeshCacheEntry : public UcCustomisedAssetCacheEntry
{
public:
	class USkeletalMesh*                               m_SkeletalMesh;                                   		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkeletalMeshCacheEntry");
		return pClassPointer;
	};
};
UClass* UcSkeletalMeshCacheEntry::pClassPointer = NULL;

//0x000008 (0x00005C - 0x000054)
//cStatueCacheEntry[0x10383310]
class UcStatueCacheEntry : public UcCustomisedAssetCacheEntry
{
public:
	class UGolemSkeletalMesh*                          m_SkeletalMesh;                                   		// 0x000054 (0x0004)              
	class UTexture2D*                                  m_NormalTexture;                                  		// 0x000058 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStatueCacheEntry");
		return pClassPointer;
	};
};
UClass* UcStatueCacheEntry::pClassPointer = NULL;

//0x00005C (0x0000B0 - 0x000054)
//cVehicleCacheEntry[0x103831E0]
class UcVehicleCacheEntry : public UcCustomisedAssetCacheEntry
{
public:
	class UGolemSkeletalMesh*                          m_pSkeletalMesh;                                  		// 0x000054 (0x0004)              
	class UMorphTargetSet*                             m_pMorphTargetSet;                                		// 0x000058 (0x0004)              
	class UGolemSkeletalMesh*                          m_pWheelDamageMesh;                               		// 0x00005C (0x0004)              
	class UTexture2D*                                  m_pExteriorDiffuseTexture;                        		// 0x000060 (0x0004)              
	class UTexture2D*                                  m_pExteriorNormalMapTexture;                      		// 0x000064 (0x0004)              
	class UTexture2D*                                  m_pExteriorEmissiveTexture;                       		// 0x000068 (0x0004)              
	class UTexture2D*                                  m_pInteriorDiffuseTexture;                        		// 0x00006C (0x0004)              
	class UTexture2D*                                  m_pInteriorNormalMapTexture;                      		// 0x000070 (0x0004)              
	class UTexture2D*                                  m_pInteriorEmissiveTexture;                       		// 0x000074 (0x0004)              
	class UTexture2D*                                  m_pWheelsDiffuseTexture;                          		// 0x000078 (0x0004)              
	class UTexture2D*                                  m_pWheelsNormalMapTexture;                        		// 0x00007C (0x0004)              
	struct FGolemobileCommonData                       CommonData;                                       		// 0x000080 (0x0030)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleCacheEntry");
		return pClassPointer;
	};
};
UClass* UcVehicleCacheEntry::pClassPointer = NULL;

//0x00003C (0x00007C - 0x000040)
//cCustomisedAssetMemoryCache[0x103830B0]
class UcCustomisedAssetMemoryCache : public UObject
{
public:
	unsigned char                                      m_Assets[0x3C];                                   		// 0x000040 (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCustomisedAssetMemoryCache");
		return pClassPointer;
	};
};
UClass* UcCustomisedAssetMemoryCache::pClassPointer = NULL;

//0x000004 (0x000140 - 0x00013C)
//cTexture2DCustomised[0x10382F80]
class UcTexture2DCustomised : public UTexture2D
{
public:
	int                                                m_iGamePriority;                                  		// 0x00013C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTexture2DCustomised");
		return pClassPointer;
	};
};
UClass* UcTexture2DCustomised::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cThumbnailHelper[0x10382E50]
class UcThumbnailHelper : public UObject
{
public:
	class UcThumbnailBaseWorker*                       m_pWorker;                                        		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cThumbnailHelper");
		return pClassPointer;
	};
};
UClass* UcThumbnailHelper::pClassPointer = NULL;

//0x00001C (0x0004D8 - 0x0004BC)
//cCustomisedSkeletalMeshComponent[0x10382D20]
class UcCustomisedSkeletalMeshComponent : public USkeletalMeshDLODComponent
{
public:
	unsigned char                                      m_eCustomisationGender;                           		// 0x0004BC (0x0001)              PROPERTY: etGender
	unsigned char                                      _0x0004BD[0x3];                                   		// 0x0004BD (0x0003) MISSED OFFSET
	TArray<class UTexture2D*>                          m_aTextures;                                      		// 0x0004C0 (0x000C)              
	unsigned long                                      m_bCustomisationIsValid : 1;                      		// 0x0004CC (0x0004) [0x00000001] 
	struct FGameplayPriorityInfo                       m_GameplayInfo;                                   		// 0x0004D0 (0x0004)              
	float                                              m_fPriority;                                      		// 0x0004D4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCustomisedSkeletalMeshComponent");
		return pClassPointer;
	};
};
UClass* UcCustomisedSkeletalMeshComponent::pClassPointer = NULL;

//0x0005B8 (0x000818 - 0x000260)
//cProp[0x10382BF0]
class AcProp : public AActor
{
public:
	DWORD                                              VfTable_ICombatTargetingInterface;                		// 0x000260 (0x0004)              
	DWORD                                              VfTable_IDamageInterface;                         		// 0x000264 (0x0004)              
	DWORD                                              VfTable_ITaskTargetInterface;                     		// 0x000268 (0x0004)              
	DWORD                                              VfTable_IUseInterface;                            		// 0x00026C (0x0004)              
	DWORD                                              VfTable_IiBombTarget;                             		// 0x000270 (0x0004)              
	DWORD                                              VfTable_IiNPCLookAt;                              		// 0x000274 (0x0004)              
	class UcTaskTargetComponent*                       m_TaskTarget;                                     		// 0x000278 (0x0004)              
	class UcAudioPropInterface*                        m_AudioPropInterface;                             		// 0x00027C (0x0004)              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x000280 (0x0004)              
	class UcPropComponent_TaskTarget*                  propTaskTarget;                                   		// 0x000284 (0x0004)              
	class UcPropComponent_Master*                      propMaster;                                       		// 0x000288 (0x0004)              
	class UcPropComponent_RigidBody*                   propRigidBody;                                    		// 0x00028C (0x0004)              
	class UcPropComponent_Damageable*                  propDamageable;                                   		// 0x000290 (0x0004)              
	class UcPropComponent_MeshSwitch*                  propMeshSwitch;                                   		// 0x000294 (0x0004)              
	class UcPropComponent_Timer*                       propTimer;                                        		// 0x000298 (0x0004)              
	class UcPropComponent_LC*                          propLC;                                           		// 0x00029C (0x0004)              
	class UcPropComponent_Use*                         propUse;                                          		// 0x0002A0 (0x0004)              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0002A4 (0x0004)              
	class AcProp*                                      PropParent;                                       		// 0x0002A8 (0x0004)              
	TArray<class AcProp*>                              PropChildren;                                     		// 0x0002AC (0x000C)              
	unsigned char                                      eRepPropState;                                    		// 0x0002B8 (0x0001)              PROPERTY: EPropState
	unsigned char                                      m_eCurrentTaskOperationCategory;                  		// 0x0002B9 (0x0001)              PROPERTY: etTaskOperationCategory
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x0002BA (0x0001)              PROPERTY: etTaskTargetVFXState
	unsigned char                                      m_eIATState;                                      		// 0x0002BB (0x0001)              PROPERTY: etCSA_IATState
	int                                                nRepCurrentHealth;                                		// 0x0002BC (0x0004)              
	int                                                nRepMaxHealth;                                    		// 0x0002C0 (0x0004)              
	struct FStPlayingAnimation                         RepAnimation;                                     		// 0x0002C4 (0x000C)              
	struct FRigidBodyState                             aRepRBStates[0x14];                               		// 0x0002D0 (0x0500)              
	int                                                m_nLastDamageCharacterUID;                        		// 0x0007D0 (0x0004)              
	DWORD                                              m_pLastDamageInfo;                                		// 0x0007D4 (0x0004)              
	int                                                m_nRepTaskOperationID;                            		// 0x0007D8 (0x0004)              
	int                                                m_nRepBombState;                                  		// 0x0007DC (0x0004)              
	int                                                m_nRepBombTimer;                                  		// 0x0007E0 (0x0004)              
	FVector3                                           m_vRepBombLocation;                               		// 0x0007E4 (0x000C)              
	unsigned long                                      m_bPlayerTaskRelevant : 1;                        		// 0x0007F0 (0x0004) [0x00000001] 
	unsigned long                                      m_bPlayerCanTriggerTask : 1;                      		// 0x0007F0 (0x0004) [0x00000002] 
	unsigned long                                      m_bIsTrafficLight : 1;                            		// 0x0007F0 (0x0004) [0x00000004] 
	unsigned long                                      m_bRegisterWithPG : 1;                            		// 0x0007F0 (0x0004) [0x00000008] 
	unsigned long                                      m_bIsDestroyedActivity : 1;                       		// 0x0007F0 (0x0004) [0x00000010] 
	unsigned long                                      m_bIsCollectable : 1;                             		// 0x0007F0 (0x0004) [0x00000020] 
	unsigned long                                      bEncroached : 1;                                  		// 0x0007F0 (0x0004) [0x00000040] 
	int                                                m_nClientTaskOwningTeamID;                        		// 0x0007F4 (0x0004)              
	DWORD                                              m_pLCCollisionBound;                              		// 0x0007F8 (0x0004)              
	TArray<class URWTechReachSpec*>                    m_aRegisteredEdgeList;                            		// 0x0007FC (0x000C)              
	int                                                m_nTickCount;                                     		// 0x000808 (0x0004)              
	int                                                m_nNPCLookAtEventID;                              		// 0x00080C (0x0004)              
	int                                                m_nNPCLookAtPriority;                             		// 0x000810 (0x0004)              
	int                                                m_nCollectableID;                                 		// 0x000814 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cProp");
		return pClassPointer;
	};

public:
	void SetInitialState();//APBGame.cProp.SetInitialState
	bool IsDynamicTarget();//APBGame.cProp.IsDynamicTarget
	void ClientNotifyTaskRelevantChanged(bool i_bTaskRelevant);//APBGame.cProp.ClientNotifyTaskRelevantChanged
	void ClientNotifyBombLocationChanged(FVector3 vecLocation);//APBGame.cProp.ClientNotifyBombLocationChanged
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//APBGame.cProp.TakeRadiusDamage
	class UcTaskTargetComponent* GetTaskTargetComponent();//APBGame.cProp.GetTaskTargetComponent
	void ClientNotifyBombTimerUpdated(int nBombTimeRemaining);//APBGame.cProp.ClientNotifyBombTimerUpdated
	void DeactivateTaskTarget();//APBGame.cProp.DeactivateTaskTarget
	class AcAPBPlayerController* RetDefuser();//APBGame.cProp.RetDefuser
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cProp.PartiallyTriggerTaskTarget
	void NotifyBombFuseTriggered();//APBGame.cProp.NotifyBombFuseTriggered
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cProp.EndUse
	bool IsBombDefused();//APBGame.cProp.IsBombDefused
	class UiBombTarget* RetBombTarget();//APBGame.cProp.RetBombTarget
	bool IsBombPlanted();//APBGame.cProp.IsBombPlanted
	bool CanBeTargeted(class AcAPBPlayerController* PC);//APBGame.cProp.CanBeTargeted
	void ClientNotifyTaskVFXStateChanged(unsigned char eTriggeredState);//APBGame.cProp.ClientNotifyTaskVFXStateChanged
	bool IsStaticTarget();//APBGame.cProp.IsStaticTarget
	bool Restore(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.cProp.Restore
	bool CanBeDamaged(class AcAPBPlayerController* PC);//APBGame.cProp.CanBeDamaged
	void DefuseBomb(class AcAPBPlayerController* pDefuserPC);//APBGame.cProp.DefuseBomb
	void ConstraintBrokenNotify(class AActor* ConOwner,class URB_ConstraintSetup* ConSetup,class URB_ConstraintInstance* ConInstance);//APBGame.cProp.ConstraintBrokenNotify
	void CleanUpTaskTarget();//APBGame.cProp.CleanUpTaskTarget
	bool HealDamage(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.cProp.HealDamage
	unsigned char GetTriggerState();//APBGame.cProp.GetTriggerState
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cProp.ResetTaskTarget
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cProp.BeginUse
	void RetExplosionOcclusionExtents(TArray<FVector3>* Verts,FVector3* ExplosionLocation);//APBGame.cProp.RetExplosionOcclusionExtents
	void PlantBomb(class AcAPBPlayerController* pBomberPC);//APBGame.cProp.PlantBomb
	bool IsSoft();//APBGame.cProp.IsSoft
	int GetLookAtPriority();//APBGame.cProp.GetLookAtPriority
	void RegisterWithLCSystem();//APBGame.cProp.RegisterWithLCSystem
	bool CanTakeCosmeticDamage();//APBGame.cProp.CanTakeCosmeticDamage
	bool IsBombExploded();//APBGame.cProp.IsBombExploded
	void Use(struct FName sUseTagName,class AcAPBPawn* i_Instigator);//APBGame.cProp.Use
	void ResetToServerPropState();//APBGame.cProp.ResetToServerPropState
	FVector3 GetLookAtPosition();//APBGame.cProp.GetLookAtPosition
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.cProp.InitTaskTarget
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cProp.IsCSASupported
	int RetBombState();//APBGame.cProp.RetBombState
	class AcAPBPlayerController* RetBomber();//APBGame.cProp.RetBomber
	void SetLookAtPriority(int pr_nLookAtPriority);//APBGame.cProp.SetLookAtPriority
	void ReplicatedEvent(struct FName VarName);//APBGame.cProp.ReplicatedEvent
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cProp.TriggerTaskTarget
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.cProp.ActivateTaskTarget
	void NotifyBombExploded();//APBGame.cProp.NotifyBombExploded
	void ClientNotifyCanTriggerTaskChanged(bool i_bPlayerCanTriggerTask);//APBGame.cProp.ClientNotifyCanTriggerTaskChanged
	void OnAnimEnd(class UAnimNodeSequence* SequenceNode,float fPlayedTime,float fExcessTime);//APBGame.cProp.OnAnimEnd
	void ClientNotifyTaskOperationChanged(int nTaskOperationIndex);//APBGame.cProp.ClientNotifyTaskOperationChanged
	void MoveTargetState(class AActor* targetActor);//APBGame.cProp.MoveTargetState
	void TakeRadiusDamageEventWrapper(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//APBGame.cProp.TakeRadiusDamageEventWrapper
	void ClientNotifyBombStateChanged(int nBombState,bool bAllowTransitionEffects);//APBGame.cProp.ClientNotifyBombStateChanged
	bool IsOpenWorldTarget();//APBGame.cProp.IsOpenWorldTarget
	void NotifyBombDisposalSuccessful();//APBGame.cProp.NotifyBombDisposalSuccessful
	bool IsHard();//APBGame.cProp.IsHard
};
UClass* AcProp::pClassPointer = NULL;

//0x000047 (0x0000A0 - 0x000059)
//cPropComponent[0x10382AC0]
class UcPropComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	unsigned char                                      mapTimers[0x3C];                                  		// 0x00005C (0x003C)              UNKNOWN PROPERTY: MapProperty
	class UcPropComponent_Master*                      Master;                                           		// 0x000098 (0x0004)              
	unsigned long                                      bHasTimer : 1;                                    		// 0x00009C (0x0004) [0x00000001] 
	unsigned long                                      bNeedsTick : 1;                                   		// 0x00009C (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropComponent");
		return pClassPointer;
	};

public:
	void OnAnimEnd(class UAnimNodeSequence* SequenceNode);//APBGame.cPropComponent.OnAnimEnd
	void SetTimer(struct FScriptDelegate func,float fTime);//APBGame.cPropComponent.SetTimer
	void WakeUpActor(bool bWakeUp);//APBGame.cPropComponent.WakeUpActor
	void DebugPrint();//APBGame.cPropComponent.DebugPrint
	bool IsTimer(struct FScriptDelegate func);//APBGame.cPropComponent.IsTimer
	void ClearTimer(struct FScriptDelegate func);//APBGame.cPropComponent.ClearTimer
	void ExecState(unsigned char eNewState);//APBGame.cPropComponent.ExecState
	void Use(struct FName sUseTagName,class AcAPBPawn* i_Instigator);//APBGame.cPropComponent.Use
};
UClass* UcPropComponent::pClassPointer = NULL;

//0x000018 (0x0000B8 - 0x0000A0)
//cPropComponent_Damageable[0x10382990]
class UcPropComponent_Damageable : public UcPropComponent
{
public:
	unsigned long                                      bTargetable : 1;                                  		// 0x0000A0 (0x0004) [0x00000001] 
	unsigned long                                      bCanPierceThrough : 1;                            		// 0x0000A0 (0x0004) [0x00000002] 
	unsigned long                                      bDamageable : 1;                                  		// 0x0000A0 (0x0004) [0x00000004] 
	unsigned long                                      bSwitchMeshWithDamage : 1;                        		// 0x0000A0 (0x0004) [0x00000008] 
	unsigned long                                      bHasBrokenMesh : 1;                               		// 0x0000A0 (0x0004) [0x00000010] 
	unsigned long                                      bGoIntoRunningStateWhenBroken : 1;                		// 0x0000A0 (0x0004) [0x00000020] 
	unsigned long                                      bOnlyDamageInMission : 1;                         		// 0x0000A0 (0x0004) [0x00000040] 
	unsigned long                                      bReplicateHealth : 1;                             		// 0x0000A0 (0x0004) [0x00000080] 
	int                                                maxHealth;                                        		// 0x0000A4 (0x0004)              
	int                                                currentHealth;                                    		// 0x0000A8 (0x0004)              
	float                                              fTimeResetHealth;                                 		// 0x0000AC (0x0004)              
	class UcPropComponent_MeshSwitch*                  propMeshSwitch;                                   		// 0x0000B0 (0x0004)              
	class USeqVar_Float*                               seqVarVFX_HitTaken;                               		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropComponent_Damageable");
		return pClassPointer;
	};

public:
	void SetMaxHealth(int newMaxHealth);//APBGame.cPropComponent_Damageable.SetMaxHealth
	int RetCurrentHealth();//APBGame.cPropComponent_Damageable.RetCurrentHealth
	bool HealDamage(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.cPropComponent_Damageable.HealDamage
	void DamageablePropDied(class AController* EventInstigator,class UClass* DamageType,class AActor* DamageCauser);//APBGame.cPropComponent_Damageable.DamageablePropDied
	void ExecState(unsigned char eNewState);//APBGame.cPropComponent_Damageable.ExecState
	void TimerResetHealth();//APBGame.cPropComponent_Damageable.TimerResetHealth
	bool IsTargetable();//APBGame.cPropComponent_Damageable.IsTargetable
	float GetHealthRatio();//APBGame.cPropComponent_Damageable.GetHealthRatio
	void SetCurrentHealth(int newHealth);//APBGame.cPropComponent_Damageable.SetCurrentHealth
};
UClass* UcPropComponent_Damageable::pClassPointer = NULL;

//0x00000C (0x0000AC - 0x0000A0)
//cPropComponent_LC[0x10382860]
class UcPropComponent_LC : public UcPropComponent
{
public:
	TArray<class URWTechNode*>                         m_pAssociatedVNodes;                              		// 0x0000A0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropComponent_LC");
		return pClassPointer;
	};

public:
	void ExecState(unsigned char eNewState);//APBGame.cPropComponent_LC.ExecState
	void BreakVNode();//APBGame.cPropComponent_LC.BreakVNode
	void RepairVNode();//APBGame.cPropComponent_LC.RepairVNode
};
UClass* UcPropComponent_LC::pClassPointer = NULL;

//0x000018 (0x0000B8 - 0x0000A0)
//cPropComponent_Master[0x10382730]
class UcPropComponent_Master : public UcPropComponent
{
public:
	unsigned char                                      PropType;                                         		// 0x0000A0 (0x0001)              PROPERTY: EPropType
	unsigned char                                      eCurrentPropState;                                		// 0x0000A1 (0x0001)              PROPERTY: EPropState
	unsigned char                                      eNextPropState;                                   		// 0x0000A2 (0x0001)              PROPERTY: EPropState
	unsigned char                                      _0x0000A3[0x1];                                   		// 0x0000A3 (0x0001) MISSED OFFSET
	unsigned long                                      bForceNextState : 1;                              		// 0x0000A4 (0x0004) [0x00000001] 
	class AcProp*                                      propOwner;                                        		// 0x0000A8 (0x0004)              
	TArray<class UcPropComponent*>                     aSlaves;                                          		// 0x0000AC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropComponent_Master");
		return pClassPointer;
	};

public:
	void AttachSlave(class UcPropComponent* newSlave);//APBGame.cPropComponent_Master.AttachSlave
	void DebugPrint();//APBGame.cPropComponent_Master.DebugPrint
	bool CanTakeCosmeticDamage();//APBGame.cPropComponent_Master.CanTakeCosmeticDamage
	void ExecState(unsigned char eNewState);//APBGame.cPropComponent_Master.ExecState
	void DetachSlave(class UcPropComponent* exSlave);//APBGame.cPropComponent_Master.DetachSlave
	void Use(struct FName sUseTagName,class AcAPBPawn* i_Instigator);//APBGame.cPropComponent_Master.Use
	void OnAnimEnd(class UAnimNodeSequence* SequenceNode);//APBGame.cPropComponent_Master.OnAnimEnd
	void QueryGoToState(unsigned char eNewState,bool bForce);//APBGame.cPropComponent_Master.QueryGoToState
	void DetachAllSlaves();//APBGame.cPropComponent_Master.DetachAllSlaves
};
UClass* UcPropComponent_Master::pClassPointer = NULL;

//0x000028 (0x0000C8 - 0x0000A0)
//cPropComponent_MeshSwitch[0x10382600]
class UcPropComponent_MeshSwitch : public UcPropComponent
{
public:
	TArray<class UMeshComponent*>                      aMeshVariants;                                    		// 0x0000A0 (0x000C)              
	unsigned long                                      bInstantiateMaterials : 1;                        		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bHidden : 1;                                      		// 0x0000AC (0x0004) [0x00000002] 
	unsigned long                                      m_bLinkLODToBuilding : 1;                         		// 0x0000AC (0x0004) [0x00000004] 
	int                                                nCurrentVariant;                                  		// 0x0000B0 (0x0004)              
	class UMeshComponent*                              pCurrentMeshVariant;                              		// 0x0000B4 (0x0004)              
	TArray<class UMaterialInstanceConstant*>           aOverridenMaterials;                              		// 0x0000B8 (0x000C)              
	DWORD                                              m_LODPolicy;                                      		// 0x0000C4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropComponent_MeshSwitch");
		return pClassPointer;
	};

public:
	void SetVariant(int nVariant);//APBGame.cPropComponent_MeshSwitch.SetVariant
	class UMeshComponent* GetCurrentVariant();//APBGame.cPropComponent_MeshSwitch.GetCurrentVariant
	void SetHidden(bool bNewHidden);//APBGame.cPropComponent_MeshSwitch.SetHidden
	void SetScalarParameterValue(struct FName ParameterName,float Value);//APBGame.cPropComponent_MeshSwitch.SetScalarParameterValue
	void InstantiateMaterials();//APBGame.cPropComponent_MeshSwitch.InstantiateMaterials
	int GetCurrentVariantIndex();//APBGame.cPropComponent_MeshSwitch.GetCurrentVariantIndex
	void ExecState(unsigned char eNewState);//APBGame.cPropComponent_MeshSwitch.ExecState
	int GetNumVariants();//APBGame.cPropComponent_MeshSwitch.GetNumVariants
};
UClass* UcPropComponent_MeshSwitch::pClassPointer = NULL;

//0x000598 (0x000638 - 0x0000A0)
//cPropComponent_RigidBody[0x103824D0]
class UcPropComponent_RigidBody : public UcPropComponent
{
public:
	unsigned long                                      bFixedBody : 1;                                   		// 0x0000A0 (0x0004) [0x00000001] 
	unsigned long                                      bHasPhysicsWhenRunning : 1;                       		// 0x0000A0 (0x0004) [0x00000002] 
	unsigned long                                      bReplicateRB : 1;                                 		// 0x0000A0 (0x0004) [0x00000004] 
	unsigned long                                      bNeedInitRB : 1;                                  		// 0x0000A0 (0x0004) [0x00000008] 
	unsigned long                                      bMovedRB : 1;                                     		// 0x0000A0 (0x0004) [0x00000010] 
	unsigned long                                      bHasCollisionData : 1;                            		// 0x0000A0 (0x0004) [0x00000020] 
	unsigned long                                      bInitialSpeed : 1;                                		// 0x0000A0 (0x0004) [0x00000040] 
	unsigned long                                      bForceAwake : 1;                                  		// 0x0000A0 (0x0004) [0x00000080] 
	float                                              fDisablingForce;                                  		// 0x0000A4 (0x0004)              
	float                                              fAnchorBreakingForce;                             		// 0x0000A8 (0x0004)              
	float                                              fTimeWaitNoEncroach;                              		// 0x0000AC (0x0004)              
	class UMeshComponent*                              primComponent;                                    		// 0x0000B0 (0x0004)              
	DWORD                                              aRBStates;                                        		// 0x0000B4 (0x0004)              
	unsigned char                                      _0x0000B8[0x8];                                   		// 0x0000B8 (0x0008) MISSED OFFSET
	struct FRigidBodyState                             aInitialRBStates[0x14];                           		// 0x0000C0 (0x0500)              
	struct FRigidBodyUnpackParams                      unpackParams;                                     		// 0x0005C0 (0x0014)              
	int                                                nbBodies;                                         		// 0x0005D4 (0x0004)              
	int                                                nbReplicatedBodies;                               		// 0x0005D8 (0x0004)              
	class URB_ConstraintSetup*                         TempConstraintSetup;                              		// 0x0005DC (0x0004)              
	class URB_ConstraintSetup*                         AnchorSetup;                                      		// 0x0005E0 (0x0004)              
	class URB_ConstraintInstance*                      AnchorInstance;                                   		// 0x0005E4 (0x0004)              
	float                                              fConstraintsScale;                                		// 0x0005E8 (0x0004)              
	unsigned char                                      eStateCol;                                        		// 0x0005EC (0x0001)              PROPERTY: ECollisionCategory
	unsigned char                                      _0x0005ED[0x3];                                   		// 0x0005ED (0x0003) MISSED OFFSET
	float                                              fTimeNotEncroached;                               		// 0x0005F0 (0x0004)              
	FVector3                                           InitialLocation;                                  		// 0x0005F4 (0x000C)              
	FRotator                                           InitialRotation;                                  		// 0x000600 (0x000C)              
	FVector3                                           InitialVelocity;                                  		// 0x00060C (0x000C)              
	class AController*                                 CollisionInstigator;                              		// 0x000618 (0x0004)              
	FVector3                                           CollisionLocation;                                		// 0x00061C (0x000C)              
	FVector3                                           CollisionMomentum;                                		// 0x000628 (0x000C)              
	class AActor*                                      CollisionDamageCauser;                            		// 0x000634 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropComponent_RigidBody");
		return pClassPointer;
	};

public:
	void BeginNeutral();//APBGame.cPropComponent_RigidBody.BeginNeutral
	void ResetAnimTree();//APBGame.cPropComponent_RigidBody.ResetAnimTree
	void SetupPropState(bool bHasPhysics,bool bLogical,bool bIsTrigger,bool bIsAnchored);//APBGame.cPropComponent_RigidBody.SetupPropState
	void BeginDisabled();//APBGame.cPropComponent_RigidBody.BeginDisabled
	void BeginPrepare();//APBGame.cPropComponent_RigidBody.BeginPrepare
	void TakeDamageNative(int DamageAmount,class AController* EventInstigator,FVector3 HitLocation,FVector3 Momentum,class UClass* DamageType,int nWeaponType,struct FTraceHitInfo HitInfo,class AActor* DamageCauser,bool r_bMicroImpulse);//APBGame.cPropComponent_RigidBody.TakeDamageNative
	void DebugCPP();//APBGame.cPropComponent_RigidBody.DebugCPP
	void TakeRadiusDamageNative(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//APBGame.cPropComponent_RigidBody.TakeRadiusDamageNative
	void ApplyDeferredDamageNative();//APBGame.cPropComponent_RigidBody.ApplyDeferredDamageNative
	void ExecState(unsigned char eNewState);//APBGame.cPropComponent_RigidBody.ExecState
	int TakeDamage(int DamageAmount,class AController* EventInstigator,FVector3 HitLocation,FVector3 Momentum,class UClass* DamageType,int nWeaponType,struct FTraceHitInfo HitInfo,class AActor* DamageCauser);//APBGame.cPropComponent_RigidBody.TakeDamage
	void DetachGameplayElements();//APBGame.cPropComponent_RigidBody.DetachGameplayElements
	void DebugPrint();//APBGame.cPropComponent_RigidBody.DebugPrint
	void ConstraintBrokenNotify(class AActor* ConOwner,class URB_ConstraintSetup* ConSetup,class URB_ConstraintInstance* ConInstance);//APBGame.cPropComponent_RigidBody.ConstraintBrokenNotify
	void BeginRunning();//APBGame.cPropComponent_RigidBody.BeginRunning
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//APBGame.cPropComponent_RigidBody.TakeRadiusDamage
};
UClass* UcPropComponent_RigidBody::pClassPointer = NULL;

//0x000050 (0x0000F0 - 0x0000A0)
//cPropComponent_TaskTarget[0x103823A0]
class UcPropComponent_TaskTarget : public UcPropComponent
{
public:
	struct FEnumeratedName                             m_eTaskTargetType;                                		// 0x0000A0 (0x0010)              
	int                                                m_nRandomSeed;                                    		// 0x0000B0 (0x0004)              
	int                                                m_nPropMaxHealthOld;                              		// 0x0000B4 (0x0004)              
	class UcTaskTargetComponent*                       m_TaskTargetComponent;                            		// 0x0000B8 (0x0004)              
	class UcPropComponent_Damageable*                  propDamageable;                                   		// 0x0000BC (0x0004)              
	class UcPropComponent_Use*                         propUse;                                          		// 0x0000C0 (0x0004)              
	class UcPropComponent_RigidBody*                   propRigidBody;                                    		// 0x0000C4 (0x0004)              
	DWORD                                              m_pSddTaskTargetPropInfo;                         		// 0x0000C8 (0x0004)              
	class AcAPBPlayerController*                       m_pLastPlayerToDamage;                            		// 0x0000CC (0x0004)              
	class AcAPBPlayerController*                       m_pDeferredDamagePC;                              		// 0x0000D0 (0x0004)              
	class UClass*                                      m_pDeferredDamageType;                            		// 0x0000D4 (0x0004)              
	unsigned long                                      m_bIsBrokenOff : 1;                               		// 0x0000D8 (0x0004) [0x00000001] 
	double                                             m_fTimeLastDamagedEncroachers;                    		// 0x0000DC (0x0008)              
	TArray<class AActor*>                              m_aBlockingEncroachers;                           		// 0x0000E4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropComponent_TaskTarget");
		return pClassPointer;
	};

public:
	float PreTakeDamage(int DamageAmount,class AController* EventInstigator,FVector3 HitLocation,FVector3 Momentum,class UClass* DamageType,struct FTraceHitInfo HitInfo,class AActor* DamageCauser);//APBGame.cPropComponent_TaskTarget.PreTakeDamage
	bool HealPropDamage();//APBGame.cPropComponent_TaskTarget.HealPropDamage
	bool IsBrokenOff();//APBGame.cPropComponent_TaskTarget.IsBrokenOff
	void ResetPropState();//APBGame.cPropComponent_TaskTarget.ResetPropState
	void NotifyBrokenOff();//APBGame.cPropComponent_TaskTarget.NotifyBrokenOff
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cPropComponent_TaskTarget.ResetTaskTarget
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cPropComponent_TaskTarget.PartiallyTriggerTaskTarget
	void NotifyReset();//APBGame.cPropComponent_TaskTarget.NotifyReset
	float RetPropFullHealth();//APBGame.cPropComponent_TaskTarget.RetPropFullHealth
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cPropComponent_TaskTarget.TriggerTaskTarget
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cPropComponent_TaskTarget.BeginUse
	void CleanUpTaskTarget();//APBGame.cPropComponent_TaskTarget.CleanUpTaskTarget
	void DeactivateTaskTarget();//APBGame.cPropComponent_TaskTarget.DeactivateTaskTarget
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cPropComponent_TaskTarget.EndUse
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.cPropComponent_TaskTarget.InitTaskTarget
	bool IsPropHealingRequired();//APBGame.cPropComponent_TaskTarget.IsPropHealingRequired
	bool IsBombPlanted();//APBGame.cPropComponent_TaskTarget.IsBombPlanted
	void InflictArsonDamage();//APBGame.cPropComponent_TaskTarget.InflictArsonDamage
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.cPropComponent_TaskTarget.ActivateTaskTarget
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cPropComponent_TaskTarget.IsCSASupported
	void DefuseBomb(class AcAPBPlayerController* pDefuserPC);//APBGame.cPropComponent_TaskTarget.DefuseBomb
	void OnDamageInteractionFinished();//APBGame.cPropComponent_TaskTarget.OnDamageInteractionFinished
	unsigned char RetInteractiveActorState();//APBGame.cPropComponent_TaskTarget.RetInteractiveActorState
	void PlantBomb(class AcAPBPlayerController* pBomberPC);//APBGame.cPropComponent_TaskTarget.PlantBomb
	bool IsWeaponDamage(class UClass* DamageType);//APBGame.cPropComponent_TaskTarget.IsWeaponDamage
	void DamageProp(float fAmount,class AController* EventInstigator,class UClass* DamageType);//APBGame.cPropComponent_TaskTarget.DamageProp
	void DamageSpawnBlockingActors();//APBGame.cPropComponent_TaskTarget.DamageSpawnBlockingActors
	int RetPropHealth();//APBGame.cPropComponent_TaskTarget.RetPropHealth
	float RetPropHealthRatio();//APBGame.cPropComponent_TaskTarget.RetPropHealthRatio
	void PostTakeDamage(int DamageAmount,class AController* EventInstigator,FVector3 HitLocation,FVector3 Momentum,class UClass* DamageType,struct FTraceHitInfo HitInfo,class AActor* DamageCauser);//APBGame.cPropComponent_TaskTarget.PostTakeDamage
	bool IsResetable();//APBGame.cPropComponent_TaskTarget.IsResetable
	void ConstraintBrokenNotify(class AActor* ConOwner,class URB_ConstraintSetup* ConSetup,class URB_ConstraintInstance* ConInstance);//APBGame.cPropComponent_TaskTarget.ConstraintBrokenNotify
	void ExecState(unsigned char eNewState);//APBGame.cPropComponent_TaskTarget.ExecState
	bool IsTriggerableByOpposition();//APBGame.cPropComponent_TaskTarget.IsTriggerableByOpposition
};
UClass* UcPropComponent_TaskTarget::pClassPointer = NULL;

//0x00000C (0x0000AC - 0x0000A0)
//cPropComponent_Timer[0x10382270]
class UcPropComponent_Timer : public UcPropComponent
{
public:
	float                                              fActivateTime;                                    		// 0x0000A0 (0x0004)              
	float                                              fDisableTime;                                     		// 0x0000A4 (0x0004)              
	float                                              fRespawnTime;                                     		// 0x0000A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropComponent_Timer");
		return pClassPointer;
	};

public:
	void QueryDisabled();//APBGame.cPropComponent_Timer.QueryDisabled
	void QueryRunning();//APBGame.cPropComponent_Timer.QueryRunning
	void QueryPrepare();//APBGame.cPropComponent_Timer.QueryPrepare
	void ExecState(unsigned char eNewState);//APBGame.cPropComponent_Timer.ExecState
};
UClass* UcPropComponent_Timer::pClassPointer = NULL;

//0x000024 (0x0000C4 - 0x0000A0)
//cPropComponent_Use[0x10382140]
class UcPropComponent_Use : public UcPropComponent
{
public:
	unsigned long                                      m_bUseOnStateChange : 1;                          		// 0x0000A0 (0x0004) [0x00000001] 
	unsigned long                                      bPlayedAnim : 1;                                  		// 0x0000A0 (0x0004) [0x00000002] 
	TArray<struct FtUseAction>                         m_aUseActions;                                    		// 0x0000A4 (0x000C)              
	struct FStPlayingAnimation                         m_Animation;                                      		// 0x0000B0 (0x000C)              
	class USkeletalMeshComponent*                      m_SkeletalMeshComponent;                          		// 0x0000BC (0x0004)              
	int                                                nExtraTicks;                                      		// 0x0000C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropComponent_Use");
		return pClassPointer;
	};

public:
	void ExecState(unsigned char eNewState);//APBGame.cPropComponent_Use.ExecState
	void PlayAnimation(struct FName sAnimationName,bool bLoop,bool bReachedEnd);//APBGame.cPropComponent_Use.PlayAnimation
	void OnAnimEnd(class UAnimNodeSequence* SequenceNode);//APBGame.cPropComponent_Use.OnAnimEnd
	void Use(struct FName sUseTagName,class AcAPBPawn* i_Instigator);//APBGame.cPropComponent_Use.Use
};
UClass* UcPropComponent_Use::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//APBAnimNotify_Kismet[0x10382010]
class UAPBAnimNotify_Kismet : public UAnimNotify
{
public:
	struct FString                                     AnimName;                                         		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBAnimNotify_Kismet");
		return pClassPointer;
	};
};
UClass* UAPBAnimNotify_Kismet::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//APBSeqAct_VehicleParticleBinding[0x10381EE0]
class UAPBSeqAct_VehicleParticleBinding : public USequenceAction
{
public:
	class AEmitter*                                    ParticleEmitter;                                  		// 0x0000AC (0x0004)              
	class AActor*                                      TargetVehicle;                                    		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqAct_VehicleParticleBinding");
		return pClassPointer;
	};

public:
	void Activated();//APBGame.APBSeqAct_VehicleParticleBinding.Activated
};
UClass* UAPBSeqAct_VehicleParticleBinding::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_Actor[0x10381DB0]
class UAPBSeqEvent_Actor : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_Actor");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_Actor::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_BombTaskTarget[0x10381C80]
class UAPBSeqEvent_BombTaskTarget : public UAPBSeqEvent_Actor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_BombTaskTarget");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_BombTaskTarget::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_Damage[0x10381B50]
class UAPBSeqEvent_Damage : public UAPBSeqEvent_Actor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_Damage");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_Damage::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_cAPBPawn[0x10381A20]
class UAPBSeqEvent_cAPBPawn : public UAPBSeqEvent_Damage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_cAPBPawn");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_cAPBPawn::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_cAPBVehicle[0x103818F0]
class UAPBSeqEvent_cAPBVehicle : public UAPBSeqEvent_Damage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_cAPBVehicle");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_cAPBVehicle::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_cProp[0x103817C0]
class UAPBSeqEvent_cProp : public UAPBSeqEvent_Damage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_cProp");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_cProp::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_Pedestrian[0x10381690]
class UAPBSeqEvent_Pedestrian : public UAPBSeqEvent_Actor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_Pedestrian");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_Pedestrian::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_TaskTarget[0x10381560]
class UAPBSeqEvent_TaskTarget : public UAPBSeqEvent_Actor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTarget");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTarget::pClassPointer = NULL;

//0x00000C (0x0000D4 - 0x0000C8)
//APBSeqEvent_AnimNotify[0x10381430]
class UAPBSeqEvent_AnimNotify : public USequenceEvent
{
public:
	struct FString                                     AnimName;                                         		// 0x0000C8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_AnimNotify");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_AnimNotify::pClassPointer = NULL;

//0x000004 (0x0000CC - 0x0000C8)
//APBSeqEvent_TaskTargetAction[0x10381300]
class UAPBSeqEvent_TaskTargetAction : public USequenceEvent
{
public:
	class UObject*                                     InteractingPlayer;                                		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_AntiGraffiti[0x103811D0]
class UAPBSeqEvent_TaskTargetAction_AntiGraffiti : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_AntiGraffiti");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_AntiGraffiti::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_Arson[0x103810A0]
class UAPBSeqEvent_TaskTargetAction_Arson : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_Arson");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_Arson::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_BombDisposal[0x10380F70]
class UAPBSeqEvent_TaskTargetAction_BombDisposal : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_BombDisposal");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_BombDisposal::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_Bombing[0x10380E40]
class UAPBSeqEvent_TaskTargetAction_Bombing : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_Bombing");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_Bombing::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_BreakIn[0x10380D10]
class UAPBSeqEvent_TaskTargetAction_BreakIn : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_BreakIn");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_BreakIn::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_Burglary[0x10380BE0]
class UAPBSeqEvent_TaskTargetAction_Burglary : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_Burglary");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_Burglary::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_CSI[0x10380AB0]
class UAPBSeqEvent_TaskTargetAction_CSI : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_CSI");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_CSI::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_ForcedArrest[0x10380980]
class UAPBSeqEvent_TaskTargetAction_ForcedArrest : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_ForcedArrest");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_ForcedArrest::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_ForcedEntry[0x10380850]
class UAPBSeqEvent_TaskTargetAction_ForcedEntry : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_ForcedEntry");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_ForcedEntry::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_Graffiti[0x10380720]
class UAPBSeqEvent_TaskTargetAction_Graffiti : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_Graffiti");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_Graffiti::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_Hacking[0x103805F0]
class UAPBSeqEvent_TaskTargetAction_Hacking : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_Hacking");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_Hacking::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_Hotwire[0x103804C0]
class UAPBSeqEvent_TaskTargetAction_Hotwire : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_Hotwire");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_Hotwire::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_Mugging[0x10380390]
class UAPBSeqEvent_TaskTargetAction_Mugging : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_Mugging");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_Mugging::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_PlayerArrest[0x10380260]
class UAPBSeqEvent_TaskTargetAction_PlayerArrest : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_PlayerArrest");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_PlayerArrest::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_PlayerRescue[0x10380130]
class UAPBSeqEvent_TaskTargetAction_PlayerRescue : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_PlayerRescue");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_PlayerRescue::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_Sabotage[0x10380000]
class UAPBSeqEvent_TaskTargetAction_Sabotage : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_Sabotage");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_Sabotage::pClassPointer = NULL;

//0x000000 (0x0000CC - 0x0000CC)
//APBSeqEvent_TaskTargetAction_StopAndSearch[0x1039FE20]
class UAPBSeqEvent_TaskTargetAction_StopAndSearch : public UAPBSeqEvent_TaskTargetAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_StopAndSearch");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_StopAndSearch::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_TaskTargetAction_Bust[0x1039FCF0]
class UAPBSeqEvent_TaskTargetAction_Bust : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_Bust");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_Bust::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_TaskTargetAction_RamRaid[0x1039FBC0]
class UAPBSeqEvent_TaskTargetAction_RamRaid : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_RamRaid");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_RamRaid::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_TaskTargetAction_Vandalism[0x1039FA90]
class UAPBSeqEvent_TaskTargetAction_Vandalism : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TaskTargetAction_Vandalism");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TaskTargetAction_Vandalism::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_TestVFX[0x1039F960]
class UAPBSeqEvent_TestVFX : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_TestVFX");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_TestVFX::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//cAPBSeqAct_GetPlayerBombLevel[0x1039F830]
class UcAPBSeqAct_GetPlayerBombLevel : public USequenceAction
{
public:
	int                                                BombLevel;                                        		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSeqAct_GetPlayerBombLevel");
		return pClassPointer;
	};
};
UClass* UcAPBSeqAct_GetPlayerBombLevel::pClassPointer = NULL;

//0x00000C (0x0000B8 - 0x0000AC)
//cAPBSeqAct_ResetableCountGate[0x1039F700]
class UcAPBSeqAct_ResetableCountGate : public USequenceAction
{
public:
	int                                                nCount;                                           		// 0x0000AC (0x0004)              
	unsigned long                                      bOpen : 1;                                        		// 0x0000B0 (0x0004) [0x00000001] 
	int                                                AutoCloseCount;                                   		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSeqAct_ResetableCountGate");
		return pClassPointer;
	};
};
UClass* UcAPBSeqAct_ResetableCountGate::pClassPointer = NULL;

//0x000005 (0x000099 - 0x000094)
//cAPBSeqCond_IsTaskTargetOfType[0x1039F5D0]
class UcAPBSeqCond_IsTaskTargetOfType : public USequenceCondition
{
public:
	class UObject*                                     m_TargetActor;                                    		// 0x000094 (0x0004)              
	unsigned char                                      m_eTaskOperationCategory;                         		// 0x000098 (0x0001)              PROPERTY: etTaskOperationCategory

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSeqCond_IsTaskTargetOfType");
		return pClassPointer;
	};

public:
	void Activated();//APBGame.cAPBSeqCond_IsTaskTargetOfType.Activated
};
UClass* UcAPBSeqCond_IsTaskTargetOfType::pClassPointer = NULL;

//0x000004 (0x000098 - 0x000094)
//cAPBSeqCond_PlayerSide[0x1039F4A0]
class UcAPBSeqCond_PlayerSide : public USequenceCondition
{
public:
	class UObject*                                     m_TargetActor;                                    		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSeqCond_PlayerSide");
		return pClassPointer;
	};

public:
	void Activated();//APBGame.cAPBSeqCond_PlayerSide.Activated
};
UClass* UcAPBSeqCond_PlayerSide::pClassPointer = NULL;

//0x00001C (0x000280 - 0x000264)
//cPrototypeVFX[0x1039F370]
class AcPrototypeVFX : public AStaticMeshActor
{
public:
	FVector3                                           InitialLocation;                                  		// 0x000264 (0x000C)              
	double                                             fInitialTime;                                     		// 0x000270 (0x0008)              
	double                                             fLastTriggerUsedTime;                             		// 0x000278 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPrototypeVFX");
		return pClassPointer;
	};
};
UClass* AcPrototypeVFX::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//cCompressedAssetCustomisation[0x1039F240]
class UcCompressedAssetCustomisation : public UObject
{
public:
	TArray<unsigned char>                              m_Data;                                           		// 0x000040 (0x000C)              
	TArray<struct FGuid>                               m_aCachedGuids;                                   		// 0x00004C (0x000C)              
	double                                             m_LastAccessTime;                                 		// 0x000058 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCompressedAssetCustomisation");
		return pClassPointer;
	};

public:
	bool CompressAssetCustomisation(class UcAssetCustomisation* pAsset);//APBGame.cCompressedAssetCustomisation.CompressAssetCustomisation
	void AddToLookup();//APBGame.cCompressedAssetCustomisation.AddToLookup
	bool IsValid();//APBGame.cCompressedAssetCustomisation.IsValid
};
UClass* UcCompressedAssetCustomisation::pClassPointer = NULL;

//0x00001C (0x00027C - 0x000260)
//cCustomisationReplicator[0x1039F110]
class AcCustomisationReplicator : public AReplicationInfo
{
public:
	class UcCompressedAssetCustomisation*              m_Data;                                           		// 0x000260 (0x0004)              
	struct FGuid                                       m_Guid;                                           		// 0x000264 (0x0010)              
	int                                                m_nLastIndex;                                     		// 0x000274 (0x0004)              
	float                                              m_fTimeSinceUpdate;                               		// 0x000278 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCustomisationReplicator");
		return pClassPointer;
	};

public:
	void ClientReceiveData(int nCount,unsigned char* packet);//APBGame.cCustomisationReplicator.ClientReceiveData
	bool ReplicateCustomisation(class UcCompressedAssetCustomisation* Data,struct FGuid customizationGuid);//APBGame.cCustomisationReplicator.ReplicateCustomisation
	bool ServerSendNextData();//APBGame.cCustomisationReplicator.ServerSendNextData
	void ClientNotifyTransferComplete();//APBGame.cCustomisationReplicator.ClientNotifyTransferComplete
	void ServerNotifyOperationComplete();//APBGame.cCustomisationReplicator.ServerNotifyOperationComplete
};
UClass* AcCustomisationReplicator::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cBaseInitStateParams[0x1039EFE0]
class UcBaseInitStateParams : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBaseInitStateParams");
		return pClassPointer;
	};
};
UClass* UcBaseInitStateParams::pClassPointer = NULL;

//0x00001C (0x00005C - 0x000040)
//cBaseLocomotionStateControlPoints[0x1039EEB0]
class UcBaseLocomotionStateControlPoints : public UcBaseInitStateParams
{
public:
	FVector3                                           m_vInitialPosition;                               		// 0x000040 (0x000C)              
	FVector3                                           m_vDestinationPosition;                           		// 0x00004C (0x000C)              
	float                                              m_fStartingDistanceAlongSegment;                  		// 0x000058 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBaseLocomotionStateControlPoints");
		return pClassPointer;
	};
};
UClass* UcBaseLocomotionStateControlPoints::pClassPointer = NULL;

//0x000004 (0x000060 - 0x00005C)
//cEdgeLocomotionStateControlPoints[0x1039ED80]
class UcEdgeLocomotionStateControlPoints : public UcBaseLocomotionStateControlPoints
{
public:
	unsigned long                                      m_bIsEndingOnDTRouteNode : 1;                     		// 0x00005C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEdgeLocomotionStateControlPoints");
		return pClassPointer;
	};
};
UClass* UcEdgeLocomotionStateControlPoints::pClassPointer = NULL;

//0x00000C (0x000068 - 0x00005C)
//cSmoothLocomotionStateControlPoints[0x1039EC50]
class UcSmoothLocomotionStateControlPoints : public UcBaseLocomotionStateControlPoints
{
public:
	FVector3                                           m_vMiddlePosition;                                		// 0x00005C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSmoothLocomotionStateControlPoints");
		return pClassPointer;
	};
};
UClass* UcSmoothLocomotionStateControlPoints::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cBaseState[0x1039EB20]
class UcBaseState : public UObject
{
public:
	unsigned long                                      m_bFinished : 1;                                  		// 0x000040 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBaseState");
		return pClassPointer;
	};
};
UClass* UcBaseState::pClassPointer = NULL;

//0x000008 (0x00004C - 0x000044)
//cBaseControllerState[0x1039E9F0]
class UcBaseControllerState : public UcBaseState
{
public:
	class UcVehicleController*                         m_pOwner;                                         		// 0x000044 (0x0004)              
	unsigned long                                      m_bExiting : 1;                                   		// 0x000048 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBaseControllerState");
		return pClassPointer;
	};

public:
	void OnRouteFollowerEvent(unsigned char Event);//APBGame.cBaseControllerState.OnRouteFollowerEvent
	void OnTick(float fTimeElapsed);//APBGame.cBaseControllerState.OnTick
	void Render(class UCanvas* Canvas);//APBGame.cBaseControllerState.Render
};
UClass* UcBaseControllerState::pClassPointer = NULL;

//0x000008 (0x000054 - 0x00004C)
//cApproachJunctionState[0x1039E8C0]
class UcApproachJunctionState : public UcBaseControllerState
{
public:
	struct FcRoutePosition                             m_EntrancePosition;                               		// 0x00004C (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cApproachJunctionState");
		return pClassPointer;
	};

public:
	void OnExit();//APBGame.cApproachJunctionState.OnExit
};
UClass* UcApproachJunctionState::pClassPointer = NULL;

//0x000004 (0x000050 - 0x00004C)
//cBaseHierarchicalState[0x1039E790]
class UcBaseHierarchicalState : public UcBaseControllerState
{
public:
	class UcBaseControllerState*                       m_pChildState;                                    		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBaseHierarchicalState");
		return pClassPointer;
	};

public:
	void OnChildStateFinished();//APBGame.cBaseHierarchicalState.OnChildStateFinished
	void OnTick(float fTimeElapsed);//APBGame.cBaseHierarchicalState.OnTick
	void SetChildState(class UcBaseControllerState* pChildState);//APBGame.cBaseHierarchicalState.SetChildState
	void OnExit();//APBGame.cBaseHierarchicalState.OnExit
	void OnRouteFollowerEvent(unsigned char Event);//APBGame.cBaseHierarchicalState.OnRouteFollowerEvent
};
UClass* UcBaseHierarchicalState::pClassPointer = NULL;

//0x00000C (0x00005C - 0x000050)
//cAvoidObstacleState[0x1039E660]
class UcAvoidObstacleState : public UcBaseHierarchicalState
{
public:
	class UcWaitAtObstacleState*                       m_pWaitAtObstacleState;                           		// 0x000050 (0x0004)              
	class UcHaltForObstacleState*                      m_pHaltForObstacleState;                          		// 0x000054 (0x0004)              
	class UcChangeToUnblockedLaneState*                m_pChangeToUnblockedLaneState;                    		// 0x000058 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAvoidObstacleState");
		return pClassPointer;
	};
};
UClass* UcAvoidObstacleState::pClassPointer = NULL;

//0x000034 (0x000084 - 0x000050)
//cUseJunctionState[0x1039E530]
class UcUseJunctionState : public UcBaseHierarchicalState
{
public:
	class URWTechNode*                                 m_pJunctionNode;                                  		// 0x000050 (0x0004)              
	struct FcRoutePosition                             m_EntrancePosition;                               		// 0x000054 (0x0008)              
	struct FcRoutePosition                             m_ExitPosition;                                   		// 0x00005C (0x0008)              
	float                                              m_fJunctionDistance;                              		// 0x000064 (0x0004)              
	float                                              m_fWaitForObstacleTimer;                          		// 0x000068 (0x0004)              
	unsigned long                                      m_bCrossedIntoJunction : 1;                       		// 0x00006C (0x0004) [0x00000001] 
	class UcSlowDownForJunctionState*                  m_pSlowDownForJunctionState;                      		// 0x000070 (0x0004)              
	class UcHaltForJunctionState*                      m_pHaltForJunctionState;                          		// 0x000074 (0x0004)              
	class UcWaitAtJunctionState*                       m_pWaitAtJunctionState;                           		// 0x000078 (0x0004)              
	class UcExitJunctionState*                         m_pExitJunctionState;                             		// 0x00007C (0x0004)              
	class UcApproachJunctionState*                     m_pApproachJunctionState;                         		// 0x000080 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cUseJunctionState");
		return pClassPointer;
	};
};
UClass* UcUseJunctionState::pClassPointer = NULL;

//0x000008 (0x000054 - 0x00004C)
//cControllerChangeLaneState[0x1039E400]
class UcControllerChangeLaneState : public UcBaseControllerState
{
public:
	struct FcRoutePosition                             m_TargetPosition;                                 		// 0x00004C (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cControllerChangeLaneState");
		return pClassPointer;
	};

public:
	void OnRouteFollowerEvent(unsigned char Event);//APBGame.cControllerChangeLaneState.OnRouteFollowerEvent
	void OnExit();//APBGame.cControllerChangeLaneState.OnExit
};
UClass* UcControllerChangeLaneState::pClassPointer = NULL;

//0x000000 (0x000054 - 0x000054)
//cChangeToUnblockedLaneState[0x1039E2D0]
class UcChangeToUnblockedLaneState : public UcControllerChangeLaneState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cChangeToUnblockedLaneState");
		return pClassPointer;
	};

public:
	void OnExit();//APBGame.cChangeToUnblockedLaneState.OnExit
	void OnEnter();//APBGame.cChangeToUnblockedLaneState.OnEnter
};
UClass* UcChangeToUnblockedLaneState::pClassPointer = NULL;

//0x000000 (0x000054 - 0x000054)
//cGetInDefaultLaneState[0x1039E1A0]
class UcGetInDefaultLaneState : public UcControllerChangeLaneState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGetInDefaultLaneState");
		return pClassPointer;
	};

public:
	void OnEnter();//APBGame.cGetInDefaultLaneState.OnEnter
	void OnExit();//APBGame.cGetInDefaultLaneState.OnExit
};
UClass* UcGetInDefaultLaneState::pClassPointer = NULL;

//0x000008 (0x000054 - 0x00004C)
//cControllerChangeSpeedState[0x1039E070]
class UcControllerChangeSpeedState : public UcBaseControllerState
{
public:
	float                                              m_fAcceleration;                                  		// 0x00004C (0x0004)              
	float                                              m_fTargetSpeed;                                   		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cControllerChangeSpeedState");
		return pClassPointer;
	};

public:
	void OnRouteFollowerEvent(unsigned char Event);//APBGame.cControllerChangeSpeedState.OnRouteFollowerEvent
	void OnEnter();//APBGame.cControllerChangeSpeedState.OnEnter
	void OnExit();//APBGame.cControllerChangeSpeedState.OnExit
};
UClass* UcControllerChangeSpeedState::pClassPointer = NULL;

//0x000000 (0x000054 - 0x000054)
//cAccelerateToDefaultSpeedState[0x1039DF40]
class UcAccelerateToDefaultSpeedState : public UcControllerChangeSpeedState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAccelerateToDefaultSpeedState");
		return pClassPointer;
	};

public:
	void OnExit();//APBGame.cAccelerateToDefaultSpeedState.OnExit
};
UClass* UcAccelerateToDefaultSpeedState::pClassPointer = NULL;

//0x000004 (0x000058 - 0x000054)
//cHaltForJunctionState[0x1039DE10]
class UcHaltForJunctionState : public UcControllerChangeSpeedState
{
public:
	unsigned long                                      m_bDecelerating : 1;                              		// 0x000054 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHaltForJunctionState");
		return pClassPointer;
	};
};
UClass* UcHaltForJunctionState::pClassPointer = NULL;

//0x000004 (0x000058 - 0x000054)
//cHaltForObstacleState[0x1039DCE0]
class UcHaltForObstacleState : public UcControllerChangeSpeedState
{
public:
	unsigned long                                      m_bDecelerating : 1;                              		// 0x000054 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHaltForObstacleState");
		return pClassPointer;
	};
};
UClass* UcHaltForObstacleState::pClassPointer = NULL;

//0x000000 (0x000054 - 0x000054)
//cHaltForVehicleInFrontState[0x1039DBB0]
class UcHaltForVehicleInFrontState : public UcControllerChangeSpeedState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHaltForVehicleInFrontState");
		return pClassPointer;
	};

public:
	void OnExit();//APBGame.cHaltForVehicleInFrontState.OnExit
};
UClass* UcHaltForVehicleInFrontState::pClassPointer = NULL;

//0x00000C (0x000060 - 0x000054)
//cMatchFasterSpeedState[0x1039DA80]
class UcMatchFasterSpeedState : public UcControllerChangeSpeedState
{
public:
	class UcNPCVehicleBrain*                           m_pVehicleAhead;                                  		// 0x000054 (0x0004)              
	float                                              m_fVehicleAheadAcceleration;                      		// 0x000058 (0x0004)              
	float                                              m_fVehicleAheadTargetSpeed;                       		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMatchFasterSpeedState");
		return pClassPointer;
	};
};
UClass* UcMatchFasterSpeedState::pClassPointer = NULL;

//0x000010 (0x000064 - 0x000054)
//cMatchSlowerSpeedState[0x1039D950]
class UcMatchSlowerSpeedState : public UcControllerChangeSpeedState
{
public:
	class UcNPCVehicleBrain*                           m_pVehicleAhead;                                  		// 0x000054 (0x0004)              
	float                                              m_fVehicleAheadAcceleration;                      		// 0x000058 (0x0004)              
	float                                              m_fVehicleAheadTargetSpeed;                       		// 0x00005C (0x0004)              
	unsigned long                                      m_bDecelerating : 1;                              		// 0x000060 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMatchSlowerSpeedState");
		return pClassPointer;
	};
};
UClass* UcMatchSlowerSpeedState::pClassPointer = NULL;

//0x000004 (0x000058 - 0x000054)
//cSlowDownForJunctionState[0x1039D820]
class UcSlowDownForJunctionState : public UcControllerChangeSpeedState
{
public:
	float                                              m_fDistanceToJunction;                            		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSlowDownForJunctionState");
		return pClassPointer;
	};

public:
	void OnExit();//APBGame.cSlowDownForJunctionState.OnExit
};
UClass* UcSlowDownForJunctionState::pClassPointer = NULL;

//0x000000 (0x000054 - 0x000054)
//cSlowDownToChangeLaneState[0x1039D6F0]
class UcSlowDownToChangeLaneState : public UcControllerChangeSpeedState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSlowDownToChangeLaneState");
		return pClassPointer;
	};
};
UClass* UcSlowDownToChangeLaneState::pClassPointer = NULL;

//0x000000 (0x00004C - 0x00004C)
//cControllerIdleState[0x1039D5C0]
class UcControllerIdleState : public UcBaseControllerState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cControllerIdleState");
		return pClassPointer;
	};

public:
	void OnEnter();//APBGame.cControllerIdleState.OnEnter
	void OnExit();//APBGame.cControllerIdleState.OnExit
};
UClass* UcControllerIdleState::pClassPointer = NULL;

//0x000030 (0x00007C - 0x00004C)
//cCruiseState[0x1039D490]
class UcCruiseState : public UcBaseControllerState
{
public:
	class UcBaseControllerState*                       m_pSpeedState;                                    		// 0x00004C (0x0004)              
	class UcBaseControllerState*                       m_pLaneState;                                     		// 0x000050 (0x0004)              
	class UcBaseControllerState*                       m_pChangeLaneSpeedState;                          		// 0x000054 (0x0004)              
	class UcControllerIdleState*                       m_pIdleSpeedState;                                		// 0x000058 (0x0004)              
	class UcControllerIdleState*                       m_pIdleLaneState;                                 		// 0x00005C (0x0004)              
	class UcAccelerateToDefaultSpeedState*             m_pAccelerateToDefaultSpeedState;                 		// 0x000060 (0x0004)              
	class UcGetInDefaultLaneState*                     m_pGetInDefaultLaneState;                         		// 0x000064 (0x0004)              
	class UcMatchSlowerSpeedState*                     m_pMatchSlowerSpeedState;                         		// 0x000068 (0x0004)              
	class UcMatchFasterSpeedState*                     m_pMatchFasterSpeedState;                         		// 0x00006C (0x0004)              
	class UcHaltForVehicleInFrontState*                m_pHaltForVehicleInFrontState;                    		// 0x000070 (0x0004)              
	class UcSlowDownForEndOfRouteState*                m_pSlowDownForEndOfRouteState;                    		// 0x000074 (0x0004)              
	class UcSlowDownToChangeLaneState*                 m_pSlowDownToChangeLaneState;                     		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCruiseState");
		return pClassPointer;
	};
};
UClass* UcCruiseState::pClassPointer = NULL;

//0x00000C (0x000058 - 0x00004C)
//cExitJunctionState[0x1039D360]
class UcExitJunctionState : public UcBaseControllerState
{
public:
	class URWTechNode*                                 m_pJunctionNode;                                  		// 0x00004C (0x0004)              
	struct FcRoutePosition                             m_ExitPosition;                                   		// 0x000050 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cExitJunctionState");
		return pClassPointer;
	};

public:
	void OnExit();//APBGame.cExitJunctionState.OnExit
};
UClass* UcExitJunctionState::pClassPointer = NULL;

//0x000000 (0x00004C - 0x00004C)
//cSlowDownForEndOfRouteState[0x1039D230]
class UcSlowDownForEndOfRouteState : public UcBaseControllerState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSlowDownForEndOfRouteState");
		return pClassPointer;
	};

public:
	void OnExit();//APBGame.cSlowDownForEndOfRouteState.OnExit
};
UClass* UcSlowDownForEndOfRouteState::pClassPointer = NULL;

//0x000004 (0x000050 - 0x00004C)
//cStopAndWaitState[0x1039D100]
class UcStopAndWaitState : public UcBaseControllerState
{
public:
	float                                              m_fTimer;                                         		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStopAndWaitState");
		return pClassPointer;
	};

public:
	void OnExit();//APBGame.cStopAndWaitState.OnExit
	bool IsHalting();//APBGame.cStopAndWaitState.IsHalting
	void OnTick(float fTimeElapsed);//APBGame.cStopAndWaitState.OnTick
};
UClass* UcStopAndWaitState::pClassPointer = NULL;

//0x000008 (0x000054 - 0x00004C)
//cWaitAtJunctionState[0x1039CFD0]
class UcWaitAtJunctionState : public UcBaseControllerState
{
public:
	struct FcRoutePosition                             m_EntrancePosition;                               		// 0x00004C (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWaitAtJunctionState");
		return pClassPointer;
	};

public:
	void OnExit();//APBGame.cWaitAtJunctionState.OnExit
	void OnEnter();//APBGame.cWaitAtJunctionState.OnEnter
};
UClass* UcWaitAtJunctionState::pClassPointer = NULL;

//0x00000C (0x000058 - 0x00004C)
//cWaitAtObstacleState[0x1039CEA0]
class UcWaitAtObstacleState : public UcBaseControllerState
{
public:
	float                                              m_fWaitAtObstacleTimer;                           		// 0x00004C (0x0004)              
	struct FcRoutePosition                             m_TargetPosition;                                 		// 0x000050 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWaitAtObstacleState");
		return pClassPointer;
	};

public:
	void OnEnter();//APBGame.cWaitAtObstacleState.OnEnter
};
UClass* UcWaitAtObstacleState::pClassPointer = NULL;

//0x000008 (0x00004C - 0x000044)
//cBaseInitState[0x1039CD70]
class UcBaseInitState : public UcBaseState
{
public:
	class UcBaseInitStateParams*                       m_pInitParams;                                    		// 0x000044 (0x0004)              
	unsigned long                                      m_bIsInitialised : 1;                             		// 0x000048 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBaseInitState");
		return pClassPointer;
	};
};
UClass* UcBaseInitState::pClassPointer = NULL;

//0x000028 (0x000074 - 0x00004C)
//cBaseLocomotionState[0x1039CC40]
class UcBaseLocomotionState : public UcBaseInitState
{
public:
	class UcPedestrianLocomotion*                      m_pParentLocomotion;                              		// 0x00004C (0x0004)              
	FVector3                                           m_vPosition;                                      		// 0x000050 (0x000C)              
	float                                              m_fDistanceAlongSegment;                          		// 0x00005C (0x0004)              
	float                                              m_fSegmentLength;                                 		// 0x000060 (0x0004)              
	unsigned long                                      m_bReachedNewDTNode : 1;                          		// 0x000064 (0x0004) [0x00000001] 
	unsigned long                                      m_bReachedNewDTNodePreviously : 1;                		// 0x000064 (0x0004) [0x00000002] 
	FVector3                                           m_vMovementVector;                                		// 0x000068 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBaseLocomotionState");
		return pClassPointer;
	};
};
UClass* UcBaseLocomotionState::pClassPointer = NULL;

//0x00000C (0x000080 - 0x000074)
//cEdgeLocomotionState[0x1039CB10]
class UcEdgeLocomotionState : public UcBaseLocomotionState
{
public:
	FVector3                                           m_vDirectionVectorNorm;                           		// 0x000074 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEdgeLocomotionState");
		return pClassPointer;
	};
};
UClass* UcEdgeLocomotionState::pClassPointer = NULL;

//0x000008 (0x00007C - 0x000074)
//cSmoothLocomotionState[0x1039C9E0]
class UcSmoothLocomotionState : public UcBaseLocomotionState
{
public:
	DWORD                                              m_pSpline;                                        		// 0x000074 (0x0004)              
	float                                              m_fNodePassDistance;                              		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSmoothLocomotionState");
		return pClassPointer;
	};
};
UClass* UcSmoothLocomotionState::pClassPointer = NULL;

//0x000004 (0x000048 - 0x000044)
//cBaseLaneState[0x1039C8B0]
class UcBaseLaneState : public UcBaseState
{
public:
	class UcVehicleRouteFollower*                      m_pOwner;                                         		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBaseLaneState");
		return pClassPointer;
	};

public:
	void Render2D(class UCanvas* Canvas);//APBGame.cBaseLaneState.Render2D
	void Render(class UCanvas* Canvas);//APBGame.cBaseLaneState.Render
	float GetDistAlongRegisteredEdge(class URWTechReachSpec* pEdge);//APBGame.cBaseLaneState.GetDistAlongRegisteredEdge
	void UpdateLocation(FVector3* vLocation,FVector3* vDirection);//APBGame.cBaseLaneState.UpdateLocation
	void OnTick(float fTimeElapsed);//APBGame.cBaseLaneState.OnTick
	class URWTechNode* GetCurrentJunctionNode();//APBGame.cBaseLaneState.GetCurrentJunctionNode
};
UClass* UcBaseLaneState::pClassPointer = NULL;

//0x000040 (0x000088 - 0x000048)
//cChangeLaneState[0x1039C780]
class UcChangeLaneState : public UcBaseLaneState
{
public:
	struct FcRoutePosition                             m_StartPosition;                                  		// 0x000048 (0x0008)              
	struct FcRoutePosition                             m_TargetPosition;                                 		// 0x000050 (0x0008)              
	float                                              m_fDistance;                                      		// 0x000058 (0x0004)              
	float                                              m_fDistanceAlongTargetLane;                       		// 0x00005C (0x0004)              
	float                                              m_fLeftOverDistance;                              		// 0x000060 (0x0004)              
	int                                                m_nTargetLaneIndexInCurrentSection;               		// 0x000064 (0x0004)              
	int                                                m_nCurrentSectionIndex;                           		// 0x000068 (0x0004)              
	float                                              m_fLaneFraction;                                  		// 0x00006C (0x0004)              
	unsigned char                                      m_nNumRegisteredLanes;                            		// 0x000070 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000071[0x3];                                   		// 0x000071 (0x0003) MISSED OFFSET
	int                                                m_nCurrentLaneIndex[0x2];                         		// 0x000074 (0x0008)              
	TArray<class URWTechReachSpec*>                    m_aRegisteredEdgeList;                            		// 0x00007C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cChangeLaneState");
		return pClassPointer;
	};

public:
	void ReceiveRepInfo(struct FcRoutePosition StartPos,struct FcRoutePosition TargetPos,float fDistance);//APBGame.cChangeLaneState.ReceiveRepInfo
	void UpdateLocation(FVector3* vLocation,FVector3* vDirection);//APBGame.cChangeLaneState.UpdateLocation
	void SendRepInfo(struct FcRoutePosition* StartPos,struct FcRoutePosition* TargetPos,float* fDistance);//APBGame.cChangeLaneState.SendRepInfo
	class URWTechNode* GetCurrentJunctionNode();//APBGame.cChangeLaneState.GetCurrentJunctionNode
	float GetSpeedMultiplier();//APBGame.cChangeLaneState.GetSpeedMultiplier
	float GetDistAlongRegisteredEdge(class URWTechReachSpec* pEdge);//APBGame.cChangeLaneState.GetDistAlongRegisteredEdge
	void OnExit();//APBGame.cChangeLaneState.OnExit
	void Render(class UCanvas* Canvas);//APBGame.cChangeLaneState.Render
	float GetDistanceToGo();//APBGame.cChangeLaneState.GetDistanceToGo
	void Render2D(class UCanvas* Canvas);//APBGame.cChangeLaneState.Render2D
	void UnregisterEdges();//APBGame.cChangeLaneState.UnregisterEdges
	int GetTargetLaneIndexInStartingSection(float* fDistanceAlongTargetLane);//APBGame.cChangeLaneState.GetTargetLaneIndexInStartingSection
	void OnEnter();//APBGame.cChangeLaneState.OnEnter
	void RegisterLane(int nLaneIndex);//APBGame.cChangeLaneState.RegisterLane
	void OnTick(float fTimeElapsed);//APBGame.cChangeLaneState.OnTick
};
UClass* UcChangeLaneState::pClassPointer = NULL;

//0x000010 (0x000058 - 0x000048)
//cFollowLaneState[0x1039C650]
class UcFollowLaneState : public UcBaseLaneState
{
public:
	struct FcRoutePosition                             m_RoutePosition;                                  		// 0x000048 (0x0008)              
	float                                              m_fInitialDistance;                               		// 0x000050 (0x0004)              
	class URWTechReachSpec*                            m_pLaneEdge;                                      		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cFollowLaneState");
		return pClassPointer;
	};

public:
	void EnterLaneEdge();//APBGame.cFollowLaneState.EnterLaneEdge
	void OnExit();//APBGame.cFollowLaneState.OnExit
	void ReceiveRepInfo(struct FcRoutePosition pos);//APBGame.cFollowLaneState.ReceiveRepInfo
	void Move(float fDistanceToGo);//APBGame.cFollowLaneState.Move
	float GetDistAlongRegisteredEdge(class URWTechReachSpec* pEdge);//APBGame.cFollowLaneState.GetDistAlongRegisteredEdge
	void UpdateLocation(FVector3* vLocation,FVector3* vDirection);//APBGame.cFollowLaneState.UpdateLocation
	void SetLaneEdge(class URWTechReachSpec* pLaneEdge);//APBGame.cFollowLaneState.SetLaneEdge
	class URWTechNode* GetCurrentJunctionNode();//APBGame.cFollowLaneState.GetCurrentJunctionNode
	void ExitLaneEdge();//APBGame.cFollowLaneState.ExitLaneEdge
	void GetLocationOnLaneEdge(float fDistance,FVector3* vLocation,FVector3* vDirection);//APBGame.cFollowLaneState.GetLocationOnLaneEdge
	void OnTick(float fTimeElapsed);//APBGame.cFollowLaneState.OnTick
	void OnEnter();//APBGame.cFollowLaneState.OnEnter
	void SendRepInfo(struct FcRoutePosition* pos);//APBGame.cFollowLaneState.SendRepInfo
};
UClass* UcFollowLaneState::pClassPointer = NULL;

//0x000008 (0x00004C - 0x000044)
//cBaseSpeedState[0x1039C520]
class UcBaseSpeedState : public UcBaseState
{
public:
	class UcVehicleRouteFollower*                      m_pOwner;                                         		// 0x000044 (0x0004)              
	float                                              m_fSpeed;                                         		// 0x000048 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBaseSpeedState");
		return pClassPointer;
	};

public:
	void OnConstantTick(float fTimeElapsed);//APBGame.cBaseSpeedState.OnConstantTick
	void Render2D(class UCanvas* Canvas);//APBGame.cBaseSpeedState.Render2D
	void Render(class UCanvas* Canvas);//APBGame.cBaseSpeedState.Render
};
UClass* UcBaseSpeedState::pClassPointer = NULL;

//0x000008 (0x000054 - 0x00004C)
//cChangeSpeedState[0x1039C3F0]
class UcChangeSpeedState : public UcBaseSpeedState
{
public:
	float                                              m_fAcceleration;                                  		// 0x00004C (0x0004)              
	float                                              m_fTargetSpeed;                                   		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cChangeSpeedState");
		return pClassPointer;
	};

public:
	void OnConstantTick(float fTimeElapsed);//APBGame.cChangeSpeedState.OnConstantTick
	void OnExit();//APBGame.cChangeSpeedState.OnExit
	void OnEnter();//APBGame.cChangeSpeedState.OnEnter
	void SendRepInfo(float* fSpeed,float* fAcceleration,float* fTargetSpeed);//APBGame.cChangeSpeedState.SendRepInfo
	void ReceiveRepInfo(float fSpeed,float fAcceleration,float fTargetSpeed);//APBGame.cChangeSpeedState.ReceiveRepInfo
};
UClass* UcChangeSpeedState::pClassPointer = NULL;

//0x000000 (0x00004C - 0x00004C)
//cConstantSpeedState[0x1039C2C0]
class UcConstantSpeedState : public UcBaseSpeedState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cConstantSpeedState");
		return pClassPointer;
	};

public:
	void OnExit();//APBGame.cConstantSpeedState.OnExit
	void OnEnter();//APBGame.cConstantSpeedState.OnEnter
	void SendRepInfo(float* fSpeed);//APBGame.cConstantSpeedState.SendRepInfo
	void ReceiveRepInfo(float fSpeed);//APBGame.cConstantSpeedState.ReceiveRepInfo
};
UClass* UcConstantSpeedState::pClassPointer = NULL;

//0x000024 (0x000064 - 0x000040)
//cEdgeUsageManager[0x1039C190]
class UcEdgeUsageManager : public UObject
{
public:
	TArray<DWORD>                                      m_aUsers;                                         		// 0x000040 (0x000C)              
	int                                                m_nNumRegDelayRequests;                           		// 0x00004C (0x0004)              
	unsigned long                                      m_bRenderDebugGraphics : 1;                       		// 0x000050 (0x0004) [0x00000001] 
	unsigned long                                      m_bPedestrianEdgesInGrid : 1;                     		// 0x000050 (0x0004) [0x00000002] 
	unsigned long                                      m_bEdgeUsersCreated : 1;                          		// 0x000050 (0x0004) [0x00000004] 
	int                                                m_nEdgeCount;                                     		// 0x000054 (0x0004)              
	TArray<unsigned char>                              m_aEdgeUserTypesToRender;                         		// 0x000058 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEdgeUsageManager");
		return pClassPointer;
	};

public:
	void Initialise();//APBGame.cEdgeUsageManager.Initialise
};
UClass* UcEdgeUsageManager::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cIEventReaction[0x1039C060]
class UcIEventReaction : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cIEventReaction");
		return pClassPointer;
	};
};
UClass* UcIEventReaction::pClassPointer = NULL;

//0x000034 (0x000074 - 0x000040)
//cLCEditorMisc[0x1039BF30]
class UcLCEditorMisc : public UObject
{
public:
	TArray<int>                                        m_anTODPedPopulationLimit;                        		// 0x000040 (0x000C)              
	TArray<int>                                        m_anTODVehPopulationLimit;                        		// 0x00004C (0x000C)              
	TArray<struct FLCRacialColourVariations>           m_aRacialColourVariations;                        		// 0x000058 (0x000C)              
	float                                              m_fPedMaxHealth;                                  		// 0x000064 (0x0004)              
	float                                              m_fPedHealthRechargeDelay;                        		// 0x000068 (0x0004)              
	float                                              m_fPedHealthRechargeDuration;                     		// 0x00006C (0x0004)              
	class AcLCManager*                                 m_pLCManager;                                     		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLCEditorMisc");
		return pClassPointer;
	};
};
UClass* UcLCEditorMisc::pClassPointer = NULL;

//0x0000A4 (0x0000E4 - 0x000040)
//cLCEditorNPCTypes[0x1039BE00]
class UcLCEditorNPCTypes : public UObject
{
public:
	unsigned char                                      m_mTypeOrCategoriesDynamic[0x3C];                 		// 0x000040 (0x003C)              UNKNOWN PROPERTY: MapProperty
	DWORD                                              m_pmCurrentTODTypeOrCategoriesDynamic;            		// 0x00007C (0x0004)              
	unsigned char                                      m_mTypeOrCategoriesStatic[0x3C];                  		// 0x000080 (0x003C)              UNKNOWN PROPERTY: MapProperty
	TArray<int>                                        m_aNPCTypeIDAry;                                  		// 0x0000BC (0x000C)              
	TArray<int>                                        m_aPedestrianTypeIDAry;                           		// 0x0000C8 (0x000C)              
	TArray<int>                                        m_aVehicleTypeIDAry;                              		// 0x0000D4 (0x000C)              
	class AcLCManager*                                 m_pLCManager;                                     		// 0x0000E0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLCEditorNPCTypes");
		return pClassPointer;
	};
};
UClass* UcLCEditorNPCTypes::pClassPointer = NULL;

//0x000050 (0x000090 - 0x000040)
//cLCEditorReactions[0x1039BCD0]
class UcLCEditorReactions : public UObject
{
public:
	TArray<struct FLCData_NPC>                         m_aNPCArr;                                        		// 0x000040 (0x000C)              
	class AcLCManager*                                 m_pLCManager;                                     		// 0x00004C (0x0004)              
	int                                                m_nNoReactionID;                                  		// 0x000050 (0x0004)              
	unsigned char                                      m_aEventNameToID[0x3C];                           		// 0x000054 (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLCEditorReactions");
		return pClassPointer;
	};
};
UClass* UcLCEditorReactions::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cLCEditorUtility[0x1039BBA0]
class UcLCEditorUtility : public UObject
{
public:
	class AcLCManager*                                 m_pLCManager;                                     		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLCEditorUtility");
		return pClassPointer;
	};
};
UClass* UcLCEditorUtility::pClassPointer = NULL;

//0x000134 (0x000174 - 0x000040)
//cLCEditorVignettes[0x1039BA70]
class UcLCEditorVignettes : public UObject
{
public:
	unsigned char                                      m_mVignetteNameToEventIDs[0x3C];                  		// 0x000040 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_mVignetteEventIDToOverrrideEventIDs[0x3C];      		// 0x00007C (0x003C)              UNKNOWN PROPERTY: MapProperty
	class AcLCManager*                                 m_pLCManager;                                     		// 0x0000B8 (0x0004)              
	unsigned char                                      m_mVignetteNPCTypeTODProbability[0x3C];           		// 0x0000BC (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_mVignetteEventIDToReactions[0x3C];              		// 0x0000F8 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_mVignetteEventOverrideIDToReactions[0x3C];      		// 0x000134 (0x003C)              UNKNOWN PROPERTY: MapProperty
	int                                                m_nNoReactionID;                                  		// 0x000170 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLCEditorVignettes");
		return pClassPointer;
	};
};
UClass* UcLCEditorVignettes::pClassPointer = NULL;

//0x0001B4 (0x0001F4 - 0x000040)
//cLCIniData[0x1039B940]
class UcLCIniData : public UObject
{
public:
	float                                              m_cfg_fPedestriansPerSecPerNode;                  		// 0x000040 (0x0004)              
	int                                                m_cfg_nNPCsPerSecInLC;                            		// 0x000044 (0x0004)              
	float                                              m_cfg_fMinRunAwayFromDangerAngle;                 		// 0x000048 (0x0004)              
	float                                              m_cfg_fMaxWitnessReactionTime;                    		// 0x00004C (0x0004)              
	float                                              m_cfg_fMaxDangerReactionTime;                     		// 0x000050 (0x0004)              
	float                                              m_cfg_fDriverCowerMinDuration;                    		// 0x000054 (0x0004)              
	float                                              m_cfg_fDriverCowerMaxDuration;                    		// 0x000058 (0x0004)              
	float                                              m_cfg_fWorldEventEvaluationIntervalTime;          		// 0x00005C (0x0004)              
	float                                              m_cfg_fAvoidVehicleEvaluationIntervalTime;        		// 0x000060 (0x0004)              
	int                                                m_cfg_nMaxWorldEventsPerSecond;                   		// 0x000064 (0x0004)              
	int                                                m_cfg_nMaxLocalEventsPerSecond;                   		// 0x000068 (0x0004)              
	float                                              m_cfg_fLookAtDurationMin;                         		// 0x00006C (0x0004)              
	float                                              m_cfg_fLookAtDurationMax;                         		// 0x000070 (0x0004)              
	float                                              m_cfg_fLookAtCooldownTimeMin;                     		// 0x000074 (0x0004)              
	float                                              m_cfg_fLookAtCooldownTimeMax;                     		// 0x000078 (0x0004)              
	float                                              m_cfg_fPedestrianCollisionVolumeRadius;           		// 0x00007C (0x0004)              
	float                                              m_cfg_fPedestrianCollisionVolumeLocomotionHeight; 		// 0x000080 (0x0004)              
	float                                              m_cfg_fPedestrianCollisionVolumeBottomOffset;     		// 0x000084 (0x0004)              
	float                                              m_cfg_fPedestrianCollisionVolumeAdditionalHeight; 		// 0x000088 (0x0004)              
	float                                              m_cfg_fPedestrianFatalVehicleSpeed;               		// 0x00008C (0x0004)              
	float                                              m_cfg_fPedestrianFatalNudgeDistance;              		// 0x000090 (0x0004)              
	float                                              m_cfg_fPedestrianNudgeRetractSpeed;               		// 0x000094 (0x0004)              
	float                                              m_cfg_fPedestrianBeginSlideOffNudgeDistance;      		// 0x000098 (0x0004)              
	float                                              m_cfg_fPedestrianClientSnapBackNudgeDistance;     		// 0x00009C (0x0004)              
	float                                              m_cfg_fPedestrianBumpReactionAngleThreshold;      		// 0x0000A0 (0x0004)              
	float                                              m_cfg_fPedestrianVehicleImpactLookaheadTime;      		// 0x0000A4 (0x0004)              
	float                                              m_cfg_fMinPedestrianVehicleImpactSpeed;           		// 0x0000A8 (0x0004)              
	float                                              m_cfg_fMinNPCRagdollDisplayTime;                  		// 0x0000AC (0x0004)              
	float                                              m_cfg_fMaxNPCRagdollDisplayTime;                  		// 0x0000B0 (0x0004)              
	int                                                m_cfg_nMaxNumberOfNPCRagdolls;                    		// 0x0000B4 (0x0004)              
	int                                                m_cfg_nHardMaxNumberOfNPCRagdolls;                		// 0x0000B8 (0x0004)              
	float                                              m_cfg_fMinNPCRagdollDespawnDelay;                 		// 0x0000BC (0x0004)              
	int                                                m_cfg_nMaxPedVignettesPerRoute;                   		// 0x0000C0 (0x0004)              
	int                                                m_cfg_nPedVignettesToSkip;                        		// 0x0000C4 (0x0004)              
	int                                                m_cfg_nPedVignettesPerformedBeforeSkip;           		// 0x0000C8 (0x0004)              
	float                                              m_cfg_fMinDeviationOfBaseRunSpeed;                		// 0x0000CC (0x0004)              
	float                                              m_cfg_fMaxDeviationOfBaseRunSpeed;                		// 0x0000D0 (0x0004)              
	float                                              m_cfg_fMinDeviationOfBaseWalkSpeed;               		// 0x0000D4 (0x0004)              
	float                                              m_cfg_fMaxDeviationOfBaseWalkSpeed;               		// 0x0000D8 (0x0004)              
	float                                              m_cfg_fObstructionLookAheadVarianceMin;           		// 0x0000DC (0x0004)              
	float                                              m_cfg_fObstructionLookAheadVarianceMax;           		// 0x0000E0 (0x0004)              
	float                                              m_cfg_fObstructionCheckIntervalTime;              		// 0x0000E4 (0x0004)              
	int                                                m_cfg_nMaxObstructionRerouteCount;                		// 0x0000E8 (0x0004)              
	float                                              m_cfg_fMaxObstructionWaitTime;                    		// 0x0000EC (0x0004)              
	float                                              m_cfg_fObstructionRerouteCountResetTime;          		// 0x0000F0 (0x0004)              
	float                                              m_cfg_fObstructionRerouteWaitTimeMin;             		// 0x0000F4 (0x0004)              
	float                                              m_cfg_fObstructionRerouteWaitTimeMax;             		// 0x0000F8 (0x0004)              
	int                                                m_cfg_nMinPedRouteChunkNodes;                     		// 0x0000FC (0x0004)              
	float                                              m_cfg_fMinPedRouteChunkLength;                    		// 0x000100 (0x0004)              
	float                                              m_cfg_fPedestrianCurbStopLineDistance;            		// 0x000104 (0x0004)              
	float                                              m_cfg_fPedestrianStopLineCollisionDistanceMin;    		// 0x000108 (0x0004)              
	float                                              m_cfg_fPedestrianStopLineCollisionDistanceMax;    		// 0x00010C (0x0004)              
	float                                              m_cfg_fPedestrianInMotionCollisionDistanceMin;    		// 0x000110 (0x0004)              
	float                                              m_cfg_fPedestrianInMotionCollisionDistanceMax;    		// 0x000114 (0x0004)              
	float                                              m_cfg_fPedestrianStationaryCollisionDistanceMin;  		// 0x000118 (0x0004)              
	float                                              m_cfg_fPedestrianStationaryCollisionDistanceMax;  		// 0x00011C (0x0004)              
	float                                              m_cfg_fPedestrianMinCrossingStopTimeMin;          		// 0x000120 (0x0004)              
	float                                              m_cfg_fPedestrianMinCrossingStopTimeMax;          		// 0x000124 (0x0004)              
	int                                                m_nVehicleSpawnIntervalVeryHigh;                  		// 0x000128 (0x0004)              
	int                                                m_nVehicleSpawnIntervalHigh;                      		// 0x00012C (0x0004)              
	int                                                m_nVehicleSpawnIntervalMedium;                    		// 0x000130 (0x0004)              
	int                                                m_nVehicleSpawnIntervalLow;                       		// 0x000134 (0x0004)              
	int                                                m_nVehicleSpawnIntervalVeryLow;                   		// 0x000138 (0x0004)              
	float                                              m_cfg_fMaxVehicleTickTime;                        		// 0x00013C (0x0004)              
	float                                              m_cfg_nMaxVehicleTicksPerFrame;                   		// 0x000140 (0x0004)              
	int                                                m_nPGPlayerRegistrationInterval;                  		// 0x000144 (0x0004)              
	int                                                m_nPGPropRegistrationInterval;                    		// 0x000148 (0x0004)              
	int                                                m_nPGVehicleRegistrationInterval;                 		// 0x00014C (0x0004)              
	float                                              m_fTTICancelDuration;                             		// 0x000150 (0x0004)              
	float                                              m_cfg_fMaxLookAroundDistance;                     		// 0x000154 (0x0004)              
	float                                              m_cfg_fPedestrianJunctionPriorityScale;           		// 0x000158 (0x0004)              
	float                                              m_cfg_fVehicleJunctionPriorityScale;              		// 0x00015C (0x0004)              
	unsigned long                                      m_cfg_bChooseOnlyWholePedestrianColourSets : 1;   		// 0x000160 (0x0004) [0x00000001] 
	unsigned long                                      m_cfg_bChoosePedestrianColoursByColourIndex : 1;  		// 0x000160 (0x0004) [0x00000002] 
	int                                                m_cfg_nDebugOverridePedAssetIndexLow;             		// 0x000164 (0x0004)              
	int                                                m_cfg_nDebugOverridePedAssetIndexHigh;            		// 0x000168 (0x0004)              
	float                                              m_cfg_fCollisionVolumeUpdateIntervalDuringRootMotion;		// 0x00016C (0x0004)              
	float                                              m_cfg_fAvoidLoudVehicleConeHorizontalAngle;       		// 0x000170 (0x0004)              
	float                                              m_cfg_fAvoidLoudVehicleConeVerticalAngle;         		// 0x000174 (0x0004)              
	float                                              m_cfg_fMinLoudVehicleNotifySpeed;                 		// 0x000178 (0x0004)              
	float                                              m_cfg_fAllowedTTIHeightDifference;                		// 0x00017C (0x0004)              
	float                                              m_cfg_fPedestrianBankingScale;                    		// 0x000180 (0x0004)              
	float                                              m_cfg_fPedestrianBankingMaxAngle;                 		// 0x000184 (0x0004)              
	float                                              m_cfg_fPedestrianBankingBlendInSpeed;             		// 0x000188 (0x0004)              
	float                                              m_cfg_fPedestrianBankingBlendOutSpeed;            		// 0x00018C (0x0004)              
	float                                              m_fIgnoreBehindDistance;                          		// 0x000190 (0x0004)              
	float                                              m_fMinCollisionRelativeSpeed;                     		// 0x000194 (0x0004)              
	float                                              m_fMaxCollisionRelativeSpeed;                     		// 0x000198 (0x0004)              
	float                                              m_fCollisionRadius;                               		// 0x00019C (0x0004)              
	float                                              m_fCollisionShoulderRadius;                       		// 0x0001A0 (0x0004)              
	int                                                m_nCollisionSamples;                              		// 0x0001A4 (0x0004)              
	float                                              m_fCollisionLookAheadTime;                        		// 0x0001A8 (0x0004)              
	float                                              m_fCollisionLookBehindTime;                       		// 0x0001AC (0x0004)              
	float                                              m_fMaxInternalRotationAngle;                      		// 0x0001B0 (0x0004)              
	float                                              m_fMaxVisibleRotationAngle;                       		// 0x0001B4 (0x0004)              
	float                                              m_fMaxRotationSpeed;                              		// 0x0001B8 (0x0004)              
	float                                              m_fMaxRotationResetSpeed;                         		// 0x0001BC (0x0004)              
	float                                              m_fMinSideDistance;                               		// 0x0001C0 (0x0004)              
	float                                              m_fMaxSideStepSpeed;                              		// 0x0001C4 (0x0004)              
	float                                              m_fMaxSideStepResetSpeed;                         		// 0x0001C8 (0x0004)              
	float                                              m_fSideStepOutputCoefficient;                     		// 0x0001CC (0x0004)              
	float                                              m_fMaxSideStepOutput;                             		// 0x0001D0 (0x0004)              
	float                                              m_fOnTopDistance;                                 		// 0x0001D4 (0x0004)              
	float                                              m_fOnTopSameSpeedThreshold;                       		// 0x0001D8 (0x0004)              
	float                                              m_fMinStandTime;                                  		// 0x0001DC (0x0004)              
	float                                              m_fMaxStandTime;                                  		// 0x0001E0 (0x0004)              
	float                                              m_fMinTimeBetweenStandings;                       		// 0x0001E4 (0x0004)              
	int                                                m_nMaxNumberOfStandings;                          		// 0x0001E8 (0x0004)              
	float                                              m_fMinTimeBetweenSpeedChanges;                    		// 0x0001EC (0x0004)              
	int                                                m_nMaxNumberOfSpeedChanges;                       		// 0x0001F0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLCIniData");
		return pClassPointer;
	};
};
UClass* UcLCIniData::pClassPointer = NULL;

//0x0001E8 (0x000448 - 0x000260)
//cLCManager[0x1039B810]
class AcLCManager : public AcLCManagerBase
{
public:
	class UcSpawnDestroyManager*                       m_pSpawnDestroyManager;                           		// 0x000260 (0x0004)              
	class UcVehicleManager*                            m_pVehicleManager;                                		// 0x000264 (0x0004)              
	class UcNodeManager*                               m_pNodeManager;                                   		// 0x000268 (0x0004)              
	class UcEventManager*                              m_pEventManager;                                  		// 0x00026C (0x0004)              
	class UcNPCTrackingManager*                        m_pNPCTrackingManager;                            		// 0x000270 (0x0004)              
	class UcJunctionManager*                           m_pJunctionManager;                               		// 0x000274 (0x0004)              
	class UcEdgeUsageManager*                          m_pEdgeUsageManager;                              		// 0x000278 (0x0004)              
	class UcNPCDriverManager*                          m_pNPCDriverManager;                              		// 0x00027C (0x0004)              
	class UcLCIniData*                                 m_pLCIniData;                                     		// 0x000280 (0x0004)              
	class UcPedestrianPathGenerator*                   m_pPPathGenerator;                                		// 0x000284 (0x0004)              
	class UcAStarManager*                              m_pAStarManager;                                  		// 0x000288 (0x0004)              
	class UcLCEditorMisc*                              m_pLCEditorMisc;                                  		// 0x00028C (0x0004)              
	class UcLCEditorNPCTypes*                          m_pLCEditorNPCTypes;                              		// 0x000290 (0x0004)              
	class UcLCEditorReactions*                         m_pLCEditorReactions;                             		// 0x000294 (0x0004)              
	class UcLCEditorVignettes*                         m_pLCEditorVignettes;                             		// 0x000298 (0x0004)              
	DWORD                                              m_pLCManagerDebugPage;                            		// 0x00029C (0x0004)              
	DWORD                                              m_pNPCTypesDebugPage;                             		// 0x0002A0 (0x0004)              
	DWORD                                              m_pPGDebugPage;                                   		// 0x0002A4 (0x0004)              
	DWORD                                              m_pReactionsDebugPage;                            		// 0x0002A8 (0x0004)              
	DWORD                                              m_pSTMDebugPage;                                  		// 0x0002AC (0x0004)              
	DWORD                                              m_pLCSynchDebugPage;                              		// 0x0002B0 (0x0004)              
	DWORD                                              m_pLCDistributionDebugPage;                       		// 0x0002B4 (0x0004)              
	unsigned char                                      m_eState;                                         		// 0x0002B8 (0x0001)              PROPERTY: etLCM_State
	unsigned char                                      _0x0002B9[0x3];                                   		// 0x0002B9 (0x0003) MISSED OFFSET
	float                                              m_fTimeLeftToLog;                                 		// 0x0002BC (0x0004)              
	TArray<class AcRagdollableNPCSkeletalMeshActor*>   m_aActiveRagdolls;                                		// 0x0002C0 (0x000C)              
	float                                              m_fTimeSinceLastRagdollRegistered;                		// 0x0002CC (0x0004)              
	struct FString                                     m_sNPCStats[0x1E];                                		// 0x0002D0 (0x0168)              
	int                                                m_nStatReplicationCompeleted;                     		// 0x000438 (0x0004)              
	int                                                m_nFrameNumber;                                   		// 0x00043C (0x0004)              
	unsigned long                                      m_bHasDestroyLCBeenUsed : 1;                      		// 0x000440 (0x0004) [0x00000001] 
	unsigned long                                      m_bAllowInfiniteLoopAssert : 1;                   		// 0x000440 (0x0004) [0x00000002] 
	int                                                m_nLoggingCurrentNPCIndex;                        		// 0x000444 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLCManager");
		return pClassPointer;
	};

public:
	void LogNPCStats();//APBGame.cLCManager.LogNPCStats
	void NotifyTODChange(int pr_nTOD);//APBGame.cLCManager.NotifyTODChange
	void OnToDEvent(int nMessage,int nParam,class AActor* Emitter);//APBGame.cLCManager.OnToDEvent
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cLCManager.ReplicatedEvent
};
UClass* AcLCManager::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//cLCStats[0x1039B6E0]
class UcLCStats : public UObject
{
public:
	int                                                m_nVRepOverflows;                                 		// 0x000040 (0x0004)              
	int                                                m_nFRepOverflows;                                 		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLCStats");
		return pClassPointer;
	};
};
UClass* UcLCStats::pClassPointer = NULL;

//0x000038 (0x000078 - 0x000040)
//cNodeManager[0x1039B5B0]
class UcNodeManager : public UObject
{
public:
	class AcLCManager*                                 m_pLCManager;                                     		// 0x000040 (0x0004)              
	TArray<class URWTechNode*>                         m_aPedestrianDetailedNodes;                       		// 0x000044 (0x000C)              
	TArray<class URWTechNode*>                         m_aPedestrianDetailedSDNodes;                     		// 0x000050 (0x000C)              
	TArray<class URWTechNode*>                         m_aAlternateVehicleSpawnNodes;                    		// 0x00005C (0x000C)              
	TArray<class URWTechNode*>                         m_aVehicleSpawnDestroyNodes;                      		// 0x000068 (0x000C)              
	class UcPedestrianBlockManager*                    m_pPedestrianBlockManager;                        		// 0x000074 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNodeManager");
		return pClassPointer;
	};

public:
	void InitializeInGameOnClient();//APBGame.cNodeManager.InitializeInGameOnClient
	void InitializeInEditor();//APBGame.cNodeManager.InitializeInEditor
	void InitializeInGame();//APBGame.cNodeManager.InitializeInGame
};
UClass* UcNodeManager::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//cNPCBrain[0x1039B480]
class UcNPCBrain : public UObject
{
public:
	class AActor*                                      m_pPhysRep;                                       		// 0x000040 (0x0004)              
	unsigned long                                      m_bIsPresentAtLoadUp : 1;                         		// 0x000044 (0x0004) [0x00000001] 
	float                                              m_fRadiusLC;                                      		// 0x000048 (0x0004)              
	class URWTechNode*                                 m_pSpawnNode;                                     		// 0x00004C (0x0004)              
	class URWTechNode*                                 m_pDestroyNode;                                   		// 0x000050 (0x0004)              
	double                                             m_fLastLookAtTime;                                		// 0x000054 (0x0008)              
	double                                             m_fLookAtCooldownTime;                            		// 0x00005C (0x0008)              
	DWORD                                              m_pRandomGenerator;                               		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCBrain");
		return pClassPointer;
	};
};
UClass* UcNPCBrain::pClassPointer = NULL;

//0x000060 (0x0000C8 - 0x000068)
//cNPCPedestrianBrain[0x1039B350]
class UcNPCPedestrianBrain : public UcNPCBrain
{
public:
	DWORD                                              VfTable_IcIEventReaction;                         		// 0x000068 (0x0004)              
	class UcPedestrianController*                      m_pController;                                    		// 0x00006C (0x0004)              
	DWORD                                              m_pSpeedController;                               		// 0x000070 (0x0004)              
	class UcPedestrianRouteFollower*                   m_pRouteFollower;                                 		// 0x000074 (0x0004)              
	class UcEventManager*                              m_pEM;                                            		// 0x000078 (0x0004)              
	class UcReactionManager*                           m_pRM;                                            		// 0x00007C (0x0004)              
	class UcPedestrianAvoidanceManager*                m_pPAM;                                           		// 0x000080 (0x0004)              
	class UcPedestrianJunctionManager*                 m_pPJM;                                           		// 0x000084 (0x0004)              
	float                                              m_fPedestrianRadius;                              		// 0x000088 (0x0004)              
	float                                              m_fPedestrianHeight;                              		// 0x00008C (0x0004)              
	DWORD                                              m_pLCCollisionBound;                              		// 0x000090 (0x0004)              
	unsigned char                                      m_eBrainState;                                    		// 0x000094 (0x0001)              PROPERTY: etNPCBrainState
	unsigned char                                      m_nReactionIDIncrementor;                         		// 0x000095 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000096[0x2];                                   		// 0x000096 (0x0002) MISSED OFFSET
	class URWTechNode*                                 m_pStartNode;                                     		// 0x000098 (0x0004)              
	class URWTechNode*                                 m_pTargetSDNode;                                  		// 0x00009C (0x0004)              
	class URWTechNode*                                 m_pPendingVignetteNode;                           		// 0x0000A0 (0x0004)              
	float                                              m_fTimeSinceVignetteStarted;                      		// 0x0000A4 (0x0004)              
	int                                                m_nObstructionRerouteCount;                       		// 0x0000A8 (0x0004)              
	float                                              m_fTimeWaitingAtObstruction;                      		// 0x0000AC (0x0004)              
	float                                              m_fTimeObstructionCleared;                        		// 0x0000B0 (0x0004)              
	float                                              m_fRerouteCountResetTimer;                        		// 0x0000B4 (0x0004)              
	float                                              m_fWaitBeforeReroutingTimer;                      		// 0x0000B8 (0x0004)              
	float                                              m_fTimeToSkipObstructionChecks;                   		// 0x0000BC (0x0004)              
	int                                                m_nNumObstructionCheckSkippingsToSkip;            		// 0x0000C0 (0x0004)              
	unsigned long                                      m_bMugged : 1;                                    		// 0x0000C4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCPedestrianBrain");
		return pClassPointer;
	};

public:
	void NotifyOnVignetteAnimationComplete();//APBGame.cNPCPedestrianBrain.NotifyOnVignetteAnimationComplete
};
UClass* UcNPCPedestrianBrain::pClassPointer = NULL;

//0x00008C (0x0000F4 - 0x000068)
//cNPCVehicleBrain[0x1039B220]
class UcNPCVehicleBrain : public UcNPCBrain
{
public:
	DWORD                                              VfTable_IcIEventReaction;                         		// 0x000068 (0x0004)              
	class UcVehicleRouteFollower*                      m_pVehicleRouteFollower;                          		// 0x00006C (0x0004)              
	class UcEventManager*                              m_pEM;                                            		// 0x000070 (0x0004)              
	class UcReactionManager*                           m_pRM;                                            		// 0x000074 (0x0004)              
	FVector3                                           m_vLocation;                                      		// 0x000078 (0x000C)              
	FRotator                                           m_rRotation;                                      		// 0x000084 (0x000C)              
	unsigned long                                      m_bAssetsLoaded : 1;                              		// 0x000090 (0x0004) [0x00000001] 
	unsigned long                                      m_bRearAxleReplicated : 1;                        		// 0x000090 (0x0004) [0x00000002] 
	unsigned long                                      m_bReplicatingSpeedUpdateThisFrame : 1;           		// 0x000090 (0x0004) [0x00000004] 
	FVector3                                           m_vRearAxleLocation;                              		// 0x000094 (0x000C)              
	class URWTechReachSpec*                            m_pStartingEdge;                                  		// 0x0000A0 (0x0004)              
	class UcVehicleController*                         m_pVehicleController;                             		// 0x0000A4 (0x0004)              
	float                                              m_fDefaultAcceleration;                           		// 0x0000A8 (0x0004)              
	float                                              m_fDefaultDeceleration;                           		// 0x0000AC (0x0004)              
	float                                              m_fFrontAxleOffset;                               		// 0x0000B0 (0x0004)              
	float                                              m_fRearAxleOffset;                                		// 0x0000B4 (0x0004)              
	float                                              m_fVehicleLength;                                 		// 0x0000B8 (0x0004)              
	float                                              m_fVehicleWidth;                                  		// 0x0000BC (0x0004)              
	FVector3                                           m_vFrontAxleLocation;                             		// 0x0000C0 (0x000C)              
	FVector3                                           m_vFrontAxleDirection;                            		// 0x0000CC (0x000C)              
	FVector3                                           m_vDirection;                                     		// 0x0000D8 (0x000C)              
	float                                              m_fStationaryTimer;                               		// 0x0000E4 (0x0004)              
	int                                                m_nBlockedCount;                                  		// 0x0000E8 (0x0004)              
	float                                              m_fDefaultSpeedRatio;                             		// 0x0000EC (0x0004)              
	DWORD                                              m_pLCCollisionBound;                              		// 0x0000F0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCVehicleBrain");
		return pClassPointer;
	};

public:
	void StopAndWait();//APBGame.cNPCVehicleBrain.StopAndWait
	void HijackCancelled();//APBGame.cNPCVehicleBrain.HijackCancelled
	void SetActiveIndicatorLight(unsigned char pr_IndicatorLightActive);//APBGame.cNPCVehicleBrain.SetActiveIndicatorLight
	void MovePhysRep();//APBGame.cNPCVehicleBrain.MovePhysRep
	void RepFollowLaneState(class UcFollowLaneState* pState);//APBGame.cNPCVehicleBrain.RepFollowLaneState
	void SetPathfindingRoute(int pr_nRouteLUTIndex);//APBGame.cNPCVehicleBrain.SetPathfindingRoute
	void OnRouteFollowerEvent(unsigned char Event);//APBGame.cNPCVehicleBrain.OnRouteFollowerEvent
	void RepChangeLaneState(class UcChangeLaneState* pState);//APBGame.cNPCVehicleBrain.RepChangeLaneState
	void SetPathfindingDetourRoute(int pr_nDetourRouteLUTIndex);//APBGame.cNPCVehicleBrain.SetPathfindingDetourRoute
	void ChangeSpeed(float fAcceleration,float fTargetSpeed);//APBGame.cNPCVehicleBrain.ChangeSpeed
	void RepConstantSpeedState(class UcConstantSpeedState* pState);//APBGame.cNPCVehicleBrain.RepConstantSpeedState
	void ClearIndicatorLightStatus();//APBGame.cNPCVehicleBrain.ClearIndicatorLightStatus
	void RepChangeSpeedState(class UcChangeSpeedState* pState);//APBGame.cNPCVehicleBrain.RepChangeSpeedState
	void InstantiatePathgraphRouteFollower();//APBGame.cNPCVehicleBrain.InstantiatePathgraphRouteFollower
	float GetCurrentSpeed();//APBGame.cNPCVehicleBrain.GetCurrentSpeed
	void VehicleRecycleByLC();//APBGame.cNPCVehicleBrain.VehicleRecycleByLC
	void ConstantSpeed(float fSpeed);//APBGame.cNPCVehicleBrain.ConstantSpeed
};
UClass* UcNPCVehicleBrain::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cNPCDef[0x1039B0F0]
class UcNPCDef : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCDef");
		return pClassPointer;
	};
};
UClass* UcNPCDef::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cNPCDriverManager[0x1039AFC0]
class UcNPCDriverManager : public UObject
{
public:
	TArray<struct FNPCDriverInfo>                      m_NPCArray;                                       		// 0x000040 (0x000C)              
	float                                              m_fTimeInQueue;                                   		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCDriverManager");
		return pClassPointer;
	};

public:
	void ResetDrivers();//APBGame.cNPCDriverManager.ResetDrivers
	void AddNPCToQueue(int eNPCType);//APBGame.cNPCDriverManager.AddNPCToQueue
	void ManualTick(float fDeltaTime);//APBGame.cNPCDriverManager.ManualTick
};
UClass* UcNPCDriverManager::pClassPointer = NULL;

//0x00001C (0x00005C - 0x000040)
//cNPCSpawnRequest[0x1039AE90]
class UcNPCSpawnRequest : public UObject
{
public:
	int                                                m_nID;                                            		// 0x000040 (0x0004)              
	int                                                m_nNPCTypeID;                                     		// 0x000044 (0x0004)              
	int                                                m_nNumToSpawn;                                    		// 0x000048 (0x0004)              
	unsigned long                                      m_bSpawnImmediately : 1;                          		// 0x00004C (0x0004) [0x00000001] 
	class AcMission*                                   m_pAttachedMission;                               		// 0x000050 (0x0004)              
	DWORD                                              m_paSpawnNodes;                                   		// 0x000054 (0x0004)              
	DWORD                                              m_paDestroyNodes;                                 		// 0x000058 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCSpawnRequest");
		return pClassPointer;
	};
};
UClass* UcNPCSpawnRequest::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//cNPCStats[0x1039AD60]
class UcNPCStats : public UObject
{
public:
	int                                                m_nTicksAliveFor;                                 		// 0x000040 (0x0004)              
	int                                                m_nTicksOverDesiredPopSize;                       		// 0x000044 (0x0004)              
	int                                                m_nTargetsRequested;                              		// 0x000048 (0x0004)              
	int                                                m_nTargetRequests;                                		// 0x00004C (0x0004)              
	int                                                m_nTargetsSpawned;                                		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCStats");
		return pClassPointer;
	};
};
UClass* UcNPCStats::pClassPointer = NULL;

//0x000074 (0x0000B4 - 0x000040)
//cNPCTrackingManager[0x1039AC30]
class UcNPCTrackingManager : public UObject
{
public:
	TArray<class UcNPCPedestrianBrain*>                m_aPedestrianWaitingRoom;                         		// 0x000040 (0x000C)              
	TArray<class UcNPCVehicleBrain*>                   m_aVehicleWaitingRoom;                            		// 0x00004C (0x000C)              
	unsigned char                                      m_mNPCTypeOrCategoryRecords[0x3C];                		// 0x000058 (0x003C)              UNKNOWN PROPERTY: MapProperty
	TArray<class UcNPCBrain*>                          m_aActiveNPCs;                                    		// 0x000094 (0x000C)              
	int                                                m_nActivePedestrians;                             		// 0x0000A0 (0x0004)              
	int                                                m_nActiveVehicles;                                		// 0x0000A4 (0x0004)              
	int                                                m_nNumPedestriansAllocated;                       		// 0x0000A8 (0x0004)              
	int                                                m_nNumVehiclesAllocated;                          		// 0x0000AC (0x0004)              
	class AcLCManager*                                 m_pLCManager;                                     		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCTrackingManager");
		return pClassPointer;
	};
};
UClass* UcNPCTrackingManager::pClassPointer = NULL;

//0x00002C (0x00006C - 0x000040)
//cPedestrianAvoidanceManager[0x1039AB00]
class UcPedestrianAvoidanceManager : public UObject
{
public:
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x000040 (0x0004)              
	class UcLCIniData*                                 m_pLCIniData;                                     		// 0x000044 (0x0004)              
	float                                              m_fTimeSinceLastStanding;                         		// 0x000048 (0x0004)              
	int                                                m_nNumberOfStandings;                             		// 0x00004C (0x0004)              
	float                                              m_fTimeSinceLastSpeedChange;                      		// 0x000050 (0x0004)              
	int                                                m_nNumberOfSpeedChanges;                          		// 0x000054 (0x0004)              
	float                                              m_fCurrentSideStep;                               		// 0x000058 (0x0004)              
	float                                              m_fTargetSideStep;                                		// 0x00005C (0x0004)              
	int                                                m_nRotationPriority;                              		// 0x000060 (0x0004)              
	int                                                m_nSideStepPriority;                              		// 0x000064 (0x0004)              
	int                                                m_nStopAndStandPriority;                          		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianAvoidanceManager");
		return pClassPointer;
	};
};
UClass* UcPedestrianAvoidanceManager::pClassPointer = NULL;

//0x000038 (0x000078 - 0x000040)
//cPedestrianController[0x1039A9D0]
class UcPedestrianController : public UObject
{
public:
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x000040 (0x0004)              
	TArray<class URWTechNode*>                         m_aVNodesPerformedAt;                             		// 0x000044 (0x000C)              
	TArray<class URWTechNode*>                         m_aVDPNodesPerformedAt;                           		// 0x000050 (0x000C)              
	unsigned long                                      m_bChosenToDoVignette : 1;                        		// 0x00005C (0x0004) [0x00000001] 
	unsigned long                                      m_bDebugPerformAllVignettes : 1;                  		// 0x00005C (0x0004) [0x00000002] 
	int                                                m_nVignettesPerformed;                            		// 0x000060 (0x0004)              
	int                                                m_nVignettesPassedOn;                             		// 0x000064 (0x0004)              
	float                                              m_cfg_fNearestNode_ExtraOffsetTolerance;          		// 0x000068 (0x0004)              
	float                                              m_cfg_fNearestNode_ExtraNodeDistanceTolerance;    		// 0x00006C (0x0004)              
	float                                              m_cfg_fNearestNode_ExtraNodeDistanceToleranceAtCrossing;		// 0x000070 (0x0004)              
	float                                              m_cfg_fConsiderNextEdgeThreshold;                 		// 0x000074 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianController");
		return pClassPointer;
	};
};
UClass* UcPedestrianController::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cPedestrianDef[0x1039A8A0]
class UcPedestrianDef : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianDef");
		return pClassPointer;
	};
};
UClass* UcPedestrianDef::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cPopulationManager[0x1039A770]
class UcPopulationManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPopulationManager");
		return pClassPointer;
	};
};
UClass* UcPopulationManager::pClassPointer = NULL;

//0x00007C (0x0000BC - 0x000040)
//cSpawnDestroyManager[0x1039A640]
class UcSpawnDestroyManager : public UObject
{
public:
	unsigned char                                      m_mNPCSpawnRequests[0x3C];                        		// 0x000040 (0x003C)              UNKNOWN PROPERTY: MapProperty
	int                                                m_nCurrentSpawnRequestID;                         		// 0x00007C (0x0004)              
	int                                                m_nLastProcessedRequest;                          		// 0x000080 (0x0004)              
	float                                              m_fTimeElapsedSinceNPCSpawned;                    		// 0x000084 (0x0004)              
	int                                                m_nNextNPCIDToGive;                               		// 0x000088 (0x0004)              
	class AcLCManager*                                 m_pLCManager;                                     		// 0x00008C (0x0004)              
	int                                                m_debug_nForcedPedestrianSpawnNode;               		// 0x000090 (0x0004)              
	int                                                m_debug_nForcedPedestrianDestroyNode;             		// 0x000094 (0x0004)              
	unsigned long                                      m_bIsSTBPActive : 1;                              		// 0x000098 (0x0004) [0x00000001] 
	int                                                m_edgesProcessed;                                 		// 0x00009C (0x0004)              
	TArray<struct FspawnEdgeEvaluationInfo>            m_edgesToEvaluate;                                		// 0x0000A0 (0x000C)              
	TArray<struct FspawnEdgeEvaluationInfo>            m_fitnessSortedEdges;                             		// 0x0000AC (0x000C)              
	int                                                m_nCurrentFitnessCriteriaIndex;                   		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSpawnDestroyManager");
		return pClassPointer;
	};
};
UClass* UcSpawnDestroyManager::pClassPointer = NULL;

//0x000054 (0x000094 - 0x000040)
//cVehicleController[0x1039A510]
class UcVehicleController : public UObject
{
public:
	float                                              UPDATE_INTERVAL_VERY_LONG;                        		// 0x000040 (0x0004)              
	float                                              UPDATE_INTERVAL_LONG;                             		// 0x000044 (0x0004)              
	float                                              UPDATE_INTERVAL_NORMAL;                           		// 0x000048 (0x0004)              
	float                                              UPDATE_INTERVAL_SHORT;                            		// 0x00004C (0x0004)              
	class UcNPCVehicleBrain*                           m_pVehicleBrain;                                  		// 0x000050 (0x0004)              
	class UcBaseControllerState*                       m_pState;                                         		// 0x000054 (0x0004)              
	class UcCruiseState*                               m_pCruiseState;                                   		// 0x000058 (0x0004)              
	class UcUseJunctionState*                          m_pUseJunctionState;                              		// 0x00005C (0x0004)              
	class UcAvoidObstacleState*                        m_pAvoidObstacleState;                            		// 0x000060 (0x0004)              
	class UcStopAndWaitState*                          m_pStopAndWaitState;                              		// 0x000064 (0x0004)              
	struct FcObjectAhead                               m_ObjectAhead;                                    		// 0x000068 (0x0014)              
	float                                              m_fDistanceToNextJunction;                        		// 0x00007C (0x0004)              
	int                                                m_nLastClearedJunction;                           		// 0x000080 (0x0004)              
	float                                              m_fUpdateInterval;                                		// 0x000084 (0x0004)              
	float                                              m_fTimeSinceLastUpdate;                           		// 0x000088 (0x0004)              
	float                                              m_fTimeSinceLastObstructionCheck;                 		// 0x00008C (0x0004)              
	float                                              m_fTimeSinceLastSpawnCheck;                       		// 0x000090 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleController");
		return pClassPointer;
	};
};
UClass* UcVehicleController::pClassPointer = NULL;

//0x000104 (0x000144 - 0x000040)
//cVehicleManager[0x1039A3E0]
class UcVehicleManager : public UObject
{
public:
	class AcLCManager*                                 m_pLCManager;                                     		// 0x000040 (0x0004)              
	float                                              m_fMaxVehicleLength;                              		// 0x000044 (0x0004)              
	unsigned char                                      m_mDriverPedestrianTypeFromVehicleAssetIndex[0x3C];		// 0x000048 (0x003C)              UNKNOWN PROPERTY: MapProperty
	float                                              m_cfg_fJunctionSpeedFraction;                     		// 0x000084 (0x0004)              
	float                                              m_cfg_fBendSpeedFraction;                         		// 0x000088 (0x0004)              
	float                                              m_cfg_fEndOfRouteSpeedFraction;                   		// 0x00008C (0x0004)              
	float                                              m_cfg_fMinVehicleSeparationStationary;            		// 0x000090 (0x0004)              
	float                                              m_cfg_fMinVehicleSeparationMoving;                		// 0x000094 (0x0004)              
	float                                              m_cfg_fMinObstacleSeparation;                     		// 0x000098 (0x0004)              
	float                                              m_cfg_fMaxObstacleSeparation;                     		// 0x00009C (0x0004)              
	float                                              m_cfg_fMinInitialSeparation;                      		// 0x0000A0 (0x0004)              
	float                                              m_cfg_fMinJunctionDistance;                       		// 0x0000A4 (0x0004)              
	float                                              m_cfg_fMaxJunctionDistance;                       		// 0x0000A8 (0x0004)              
	float                                              m_cfg_fVehicleLengthBuffer;                       		// 0x0000AC (0x0004)              
	float                                              m_cfg_fMinDeceleration;                           		// 0x0000B0 (0x0004)              
	float                                              m_cfg_fMaxDeceleration;                           		// 0x0000B4 (0x0004)              
	float                                              m_cfg_fMatchSpeedThreshold;                       		// 0x0000B8 (0x0004)              
	float                                              m_cfg_fLookAheadDistance;                         		// 0x0000BC (0x0004)              
	float                                              m_cfg_fLaneClearDistance;                         		// 0x0000C0 (0x0004)              
	float                                              m_cfg_fChangeLaneTime;                            		// 0x0000C4 (0x0004)              
	float                                              m_cfg_fMinChangeLaneDistance;                     		// 0x0000C8 (0x0004)              
	float                                              m_cfg_fChangeLaneSharpness;                       		// 0x0000CC (0x0004)              
	float                                              m_cfg_fSlowDownToChangeLaneDistance;              		// 0x0000D0 (0x0004)              
	float                                              m_cfg_fIndicateDistance;                          		// 0x0000D4 (0x0004)              
	float                                              m_cfg_fMaxStationaryTime;                         		// 0x0000D8 (0x0004)              
	float                                              m_cfg_fRouteAnalysisInterval;                     		// 0x0000DC (0x0004)              
	float                                              m_cfg_fSpawnCheckInterval;                        		// 0x0000E0 (0x0004)              
	int                                                m_cfg_nNumEdgesToCheckAhead;                      		// 0x0000E4 (0x0004)              
	float                                              m_cfg_fSpawnNodeObstructionRatioForSTBPActivation;		// 0x0000E8 (0x0004)              
	int                                                m_cfg_nNumAlternateSpawnEdgesToProcessPerFrame;   		// 0x0000EC (0x0004)              
	int                                                m_cfg_nSpawnEligibilityDelay;                     		// 0x0000F0 (0x0004)              
	float                                              m_cfg_fMinDistanceFromAltSpawnNodeToNearestPlayer;		// 0x0000F4 (0x0004)              
	float                                              m_cfg_fTurningOrientationTolerance;               		// 0x0000F8 (0x0004)              
	int                                                m_cfg_nClosestDestroyNodeSortingFraction;         		// 0x0000FC (0x0004)              
	int                                                m_cfg_nSTBPDistanceToFirstVehicleHeuristicWeight; 		// 0x000100 (0x0004)              
	int                                                m_cfg_nSTBPEmptyEdgeTimerHeuristicWeight;         		// 0x000104 (0x0004)              
	int                                                m_cfg_nMaxVehicleQueueLength;                     		// 0x000108 (0x0004)              
	int                                                m_cfg_nMaxNearbyVehicles;                         		// 0x00010C (0x0004)              
	float                                              m_cfg_fNearbyVehicleCheckDistance;                		// 0x000110 (0x0004)              
	int                                                m_cfg_nMaxVisibilityChecksPerVehicle;             		// 0x000114 (0x0004)              
	float                                              m_cfg_fMinDistanceToNearestPlayerForRecycling;    		// 0x000118 (0x0004)              
	float                                              m_cfg_fVehicleRecycleCheckInterval;               		// 0x00011C (0x0004)              
	float                                              m_cfg_fMaxWaitTime;                               		// 0x000120 (0x0004)              
	unsigned long                                      m_cfg_bDetectBends : 1;                           		// 0x000124 (0x0004) [0x00000001] 
	unsigned long                                      m_cfg_bDetectEndOfRoute : 1;                      		// 0x000124 (0x0004) [0x00000002] 
	unsigned long                                      m_cfg_bDetectJunctions : 1;                       		// 0x000124 (0x0004) [0x00000004] 
	unsigned long                                      m_cfg_bDetectNPCVehicles : 1;                     		// 0x000124 (0x0004) [0x00000008] 
	unsigned long                                      m_cfg_bDetectObstacles : 1;                       		// 0x000124 (0x0004) [0x00000010] 
	unsigned long                                      m_cfg_bDetectObstructions : 1;                    		// 0x000124 (0x0004) [0x00000020] 
	unsigned long                                      m_cfg_bCompensateForMovingObstacles : 1;          		// 0x000124 (0x0004) [0x00000040] 
	float                                              m_cfg_fRaiseWheelAmount;                          		// 0x000128 (0x0004)              
	float                                              m_cfg_fJunctionRegistrationDistance;              		// 0x00012C (0x0004)              
	float                                              m_cfg_fJunctionRegistrationUpdateIntervalTime;    		// 0x000130 (0x0004)              
	float                                              m_cfg_fMaxBodyPitch;                              		// 0x000134 (0x0004)              
	float                                              m_cfg_fMaxBodyRoll;                               		// 0x000138 (0x0004)              
	float                                              m_cfg_fBodyRotationSpeed;                         		// 0x00013C (0x0004)              
	float                                              m_cfg_fWaitDurationAfterCancelledHijack;          		// 0x000140 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleManager");
		return pClassPointer;
	};

public:
	class AcLCManager* GetLCManager();//APBGame.cVehicleManager.GetLCManager
	class UcSpawnDestroyManager* GetSpawnDestroyManager();//APBGame.cVehicleManager.GetSpawnDestroyManager
	void SetLCManager(class AcLCManager* pr_pLCM);//APBGame.cVehicleManager.SetLCManager
	int GetDriverPedestrianTypeFromVehicleAssetIndex(int pr_nVehicleAssetIndex);//APBGame.cVehicleManager.GetDriverPedestrianTypeFromVehicleAssetIndex
	bool HasLCManager();//APBGame.cVehicleManager.HasLCManager
};
UClass* UcVehicleManager::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//cHostingChat[0x1039A2B0]
class UcHostingChat : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	TArray<class UcHostingChatMessage*>                m_aPendingNameQuery;                              		// 0x000044 (0x000C)              
	TArray<class UcHostingChatMessage*>                m_aPendingWhisper;                                		// 0x000050 (0x000C)              
	unsigned char                                      m_nWhisperUID;                                    		// 0x00005C (0x0001)              PROPERTY: 
	unsigned char                                      m_eChatState;                                     		// 0x00005D (0x0001)              PROPERTY: etChatState
	unsigned char                                      m_eChatTag;                                       		// 0x00005E (0x0001)              PROPERTY: etChatTag
	unsigned char                                      _0x00005F[0x1];                                   		// 0x00005F (0x0001) MISSED OFFSET
	float                                              m_fTimeAFK;                                       		// 0x000060 (0x0004)              
	unsigned long                                      m_bAutomaticAFK : 1;                              		// 0x000064 (0x0004) [0x00000001] 
	unsigned long                                      m_bAFKEventTriggered : 1;                         		// 0x000064 (0x0004) [0x00000002] 
	unsigned long                                      m_bSpawnExcludedEventTriggered : 1;               		// 0x000064 (0x0004) [0x00000004] 
	unsigned long                                      m_bHideChatTag : 1;                               		// 0x000064 (0x0004) [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingChat");
		return pClassPointer;
	};

public:
	void SendChatGroup(struct FString sMessage);//APBGame.cHostingChat.SendChatGroup
	void Cleanup();//APBGame.cHostingChat.Cleanup
	unsigned char GetChatMessageCategory(unsigned char eType);//APBGame.cHostingChat.GetChatMessageCategory
	unsigned char GetCurrentChatTag();//APBGame.cHostingChat.GetCurrentChatTag
	void SendChatDistrictServer(unsigned char eCategory,unsigned char eChatTag,struct FString sMessage);//APBGame.cHostingChat.SendChatDistrictServer
	void SendChatDistrict(struct FString sMessage);//APBGame.cHostingChat.SendChatDistrict
	void OnWhisperSuccess(unsigned char nWhisperUID,int nCharacterUID);//APBGame.cHostingChat.OnWhisperSuccess
	void OnPopulation(int nReturnCode,int nDistrictUID,int nInstanceNo,int nWorldPopulation,int nWorldEnforcers,int nWorldCriminals,int nInstancePopulation,int nInstanceEnforcers,int nInstanceCriminals);//APBGame.cHostingChat.OnPopulation
	struct FString LocalizeText(struct FString sKey);//APBGame.cHostingChat.LocalizeText
	void DisplaySilenceState(struct FQWord nSilenceExpiry);//APBGame.cHostingChat.DisplaySilenceState
	void Population(int nDistrictUID,int nInstanceNo);//APBGame.cHostingChat.Population
	void SortStringArray(TArray<struct FString>* aStrings,bool bAscending,bool bCaseSensitive);//APBGame.cHostingChat.SortStringArray
	void StartChatLogging();//APBGame.cHostingChat.StartChatLogging
	void SetDoNotDisturb(struct FString sMessage);//APBGame.cHostingChat.SetDoNotDisturb
	void DispatchUIDNDMessage(struct FString sSysMessage);//APBGame.cHostingChat.DispatchUIDNDMessage
	void DispatchUIChatMessage(class UcHostingChatMessage* Message);//APBGame.cHostingChat.DispatchUIChatMessage
	void DispatchUIClanMotD(struct FString sMessage);//APBGame.cHostingChat.DispatchUIClanMotD
	void OnReceiveMessage(unsigned char eType,int nCharacterUID,unsigned char eChatTag,bool bBypassIgnore,struct FString sMessage,struct FQWord nSilenceExpiry,int nDuration);//APBGame.cHostingChat.OnReceiveMessage
	void Played();//APBGame.cHostingChat.Played
	void SetAwayFromKeyboard(struct FString sMessage);//APBGame.cHostingChat.SetAwayFromKeyboard
	void OnWho(TArray<struct FString> enforcers,TArray<struct FString> criminals);//APBGame.cHostingChat.OnWho
	void ExecuteUIConsoleCommand(struct FString sConsoleCommand);//APBGame.cHostingChat.ExecuteUIConsoleCommand
	class UcHostingChatMessage* CreateMessage(unsigned char eType,int nCharacterUID,unsigned char eChatTag,struct FString sMessage,int nDuration);//APBGame.cHostingChat.CreateMessage
	void EndChatLogging();//APBGame.cHostingChat.EndChatLogging
	void Init(class UcHostingClient* Client);//APBGame.cHostingChat.Init
	void OnPlayed(int nPlayedSeconds);//APBGame.cHostingChat.OnPlayed
	void LeaveChatMode(unsigned char i_eMode);//APBGame.cHostingChat.LeaveChatMode
	void OnNameQuerySuccess(int nCharacterUID,struct FString sCharacterName);//APBGame.cHostingChat.OnNameQuerySuccess
	void SetAvailable();//APBGame.cHostingChat.SetAvailable
	void DispatchUISystemMessage(struct FString sSysMessage);//APBGame.cHostingChat.DispatchUISystemMessage
	void NameQuery(int nCharacterUID);//APBGame.cHostingChat.NameQuery
	void Who();//APBGame.cHostingChat.Who
	void OnGMCommand(int nReturnCode);//APBGame.cHostingChat.OnGMCommand
	void DispatchUIAFKMessage(struct FString sSysMessage);//APBGame.cHostingChat.DispatchUIAFKMessage
	void SendChatWhisper(struct FString sCharacterName,struct FString sMessage);//APBGame.cHostingChat.SendChatWhisper
	void SendChatClan(struct FString sMessage);//APBGame.cHostingChat.SendChatClan
	void OnNameQueryFailed(int nError,int nCharacterUID);//APBGame.cHostingChat.OnNameQueryFailed
	void GMCommand(struct FString sCommand);//APBGame.cHostingChat.GMCommand
	void DisplayMessage(class UcHostingChatMessage* Message);//APBGame.cHostingChat.DisplayMessage
	void SendChatOfficer(struct FString sMessage);//APBGame.cHostingChat.SendChatOfficer
	void OnWhisperFailed(int nError,unsigned char nWhisperUID);//APBGame.cHostingChat.OnWhisperFailed
	void SaveChatLogging();//APBGame.cHostingChat.SaveChatLogging
};
UClass* UcHostingChat::pClassPointer = NULL;

//0x000024 (0x000064 - 0x000040)
//cHostingChatMessage[0x1039A180]
class UcHostingChatMessage : public UObject
{
public:
	unsigned char                                      m_eType;                                          		// 0x000040 (0x0001)              PROPERTY: etChatMessageType
	unsigned char                                      m_eChatTag;                                       		// 0x000041 (0x0001)              PROPERTY: etChatTag
	unsigned char                                      m_nWhisperUID;                                    		// 0x000042 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000043[0x1];                                   		// 0x000043 (0x0001) MISSED OFFSET
	int                                                m_nCharacterUID;                                  		// 0x000044 (0x0004)              
	struct FString                                     m_sCharacterName;                                 		// 0x000048 (0x000C)              
	struct FString                                     m_sMessage;                                       		// 0x000054 (0x000C)              
	int                                                m_nDuration;                                      		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingChatMessage");
		return pClassPointer;
	};

public:
	struct FString LocalizeText(struct FString sKey);//APBGame.cHostingChatMessage.LocalizeText
};
UClass* UcHostingChatMessage::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cHostingChatServer[0x1039A050]
class UcHostingChatServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingChatServer");
		return pClassPointer;
	};

public:
	void Init(class UcHostingServer* Server);//APBGame.cHostingChatServer.Init
	void OnGMCommand(int nCharacterUID,struct FString sCommand);//APBGame.cHostingChatServer.OnGMCommand
	void ChatMonitorTerm();//APBGame.cHostingChatServer.ChatMonitorTerm
	void Cleanup();//APBGame.cHostingChatServer.Cleanup
	void OnChatState(int nCharacterUID,unsigned char eChatState);//APBGame.cHostingChatServer.OnChatState
	void ChatMonitorInitFromConfigDatabase();//APBGame.cHostingChatServer.ChatMonitorInitFromConfigDatabase
	void BroadcastSystemChatMessage(struct FString sMessage);//APBGame.cHostingChatServer.BroadcastSystemChatMessage
	bool SetCharSilence(int nTargetCharUid,bool bSilence,struct FQWord nSilenceExpiry);//APBGame.cHostingChatServer.SetCharSilence
	void BroadcastChatMessage(class AcHostingPlayerController* Sender,struct FString* sMessage,unsigned char eType,unsigned char eChatTag);//APBGame.cHostingChatServer.BroadcastChatMessage
};
UClass* UcHostingChatServer::pClassPointer = NULL;

//0x0000FC (0x00013C - 0x000040)
//cHostingClan[0x10399F20]
class UcHostingClan : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	struct FString                                     m_sClanName;                                      		// 0x000044 (0x000C)              
	int                                                m_nLeaderUID;                                     		// 0x000050 (0x0004)              
	TArray<class UcHostingClanMember*>                 m_aMembers;                                       		// 0x000054 (0x000C)              
	TArray<class UcHostingClanRank*>                   m_aRanks;                                         		// 0x000060 (0x000C)              
	struct FString                                     m_sBio;                                           		// 0x00006C (0x000C)              
	struct FString                                     m_sInformation;                                   		// 0x000078 (0x000C)              
	struct FString                                     m_sMotd;                                          		// 0x000084 (0x000C)              
	TArray<unsigned char>                              m_aSymbol;                                        		// 0x000090 (0x000C)              
	TArray<unsigned char>                              m_aTheme;                                         		// 0x00009C (0x000C)              
	struct FString                                     m_sNewBio;                                        		// 0x0000A8 (0x000C)              
	struct FString                                     m_sNewInformation;                                		// 0x0000B4 (0x000C)              
	struct FString                                     m_sNewMotd;                                       		// 0x0000C0 (0x000C)              
	TArray<unsigned char>                              m_aNewSymbol;                                     		// 0x0000CC (0x000C)              
	TArray<unsigned char>                              m_aNewTheme;                                      		// 0x0000D8 (0x000C)              
	int                                                m_nLocalMemberIndex;                              		// 0x0000E4 (0x0004)              
	struct FScriptDelegate                             __OnMembersChanged_Social__Delegate;              		// 0x0000E8 (0x000C)              
	struct FScriptDelegate                             __OnMembersChanged_Mgmt__Delegate;                		// 0x0000F4 (0x000C)              
	struct FScriptDelegate                             __OnProfileChanged__Delegate;                     		// 0x000100 (0x000C)              
	struct FScriptDelegate                             __OnPermissionsChanged__Delegate;                 		// 0x00010C (0x000C)              
	struct FScriptDelegate                             __OnTeamCreationProcessed__Delegate;              		// 0x000118 (0x000C)              
	struct FScriptDelegate                             __OnInviteReceived__Delegate;                     		// 0x000124 (0x000C)              
	struct FScriptDelegate                             __OnSendInviteResult__Delegate;                   		// 0x000130 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingClan");
		return pClassPointer;
	};

public:
	void Cleanup();//APBGame.cHostingClan.Cleanup
	void OnMemberSetPrivateNoteFailed(int nError,int nCharacterUID);//APBGame.cHostingClan.OnMemberSetPrivateNoteFailed
	void OnGetInformationSuccess(struct FString sInformation);//APBGame.cHostingClan.OnGetInformationSuccess
	void DisplayInfo();//APBGame.cHostingClan.DisplayInfo
	void OnLeaveSuccess();//APBGame.cHostingClan.OnLeaveSuccess
	void OnSetMotdSuccess();//APBGame.cHostingClan.OnSetMotdSuccess
	void OnGetInformationFailed(int nError);//APBGame.cHostingClan.OnGetInformationFailed
	int GetRankIndex(int nRankUID);//APBGame.cHostingClan.GetRankIndex
	void OnMemberSetPrivateNoteSuccess(int nCharacterUID);//APBGame.cHostingClan.OnMemberSetPrivateNoteSuccess
	void Leave();//APBGame.cHostingClan.Leave
	void MemberSetPublicNote(int nMemberIndex,struct FString sPublicNote);//APBGame.cHostingClan.MemberSetPublicNote
	void OnExit();//APBGame.cHostingClan.OnExit
	void OnLeaveFailed(int nError);//APBGame.cHostingClan.OnLeaveFailed
	void OnLeaderFailed(int nError,int nCharacterUID);//APBGame.cHostingClan.OnLeaderFailed
	void MembersGetState();//APBGame.cHostingClan.MembersGetState
	void DisplayMemberPrivateNote(int nMemberIndex);//APBGame.cHostingClan.DisplayMemberPrivateNote
	void OnGetThemeFailed(int nError);//APBGame.cHostingClan.OnGetThemeFailed
	void RankAssign(int nMemberIndex,int nRankIndex);//APBGame.cHostingClan.RankAssign
	void OnSetThemeFailed(int nError);//APBGame.cHostingClan.OnSetThemeFailed
	void AcceptInvite();//APBGame.cHostingClan.AcceptInvite
	void MemberGetProfile(int nMemberIndex);//APBGame.cHostingClan.MemberGetProfile
	void OnReceiveMotd(struct FString sMotd);//APBGame.cHostingClan.OnReceiveMotd
	void OnSetSymbolFailed(int nError);//APBGame.cHostingClan.OnSetSymbolFailed
	void OnReceiveRankAssign(int nCharacterUID,int nRankUID);//APBGame.cHostingClan.OnReceiveRankAssign
	void OnReceiveRankDelete(int nRankUID);//APBGame.cHostingClan.OnReceiveRankDelete
	void OnReceiveLeader(int nCharacterUID);//APBGame.cHostingClan.OnReceiveLeader
	void OnSetInformationFailed(int nError);//APBGame.cHostingClan.OnSetInformationFailed
	void OnDeleteSuccess();//APBGame.cHostingClan.OnDeleteSuccess
	void Delete();//APBGame.cHostingClan.Delete
	void OnSetBioFailed(int nError);//APBGame.cHostingClan.OnSetBioFailed
	void DisplayClanInformation();//APBGame.cHostingClan.DisplayClanInformation
	bool HasClan();//APBGame.cHostingClan.HasClan
	void OnSetMotdFailed(int nError);//APBGame.cHostingClan.OnSetMotdFailed
	void GetSymbol();//APBGame.cHostingClan.GetSymbol
	void RankEdit(int nRankIndex,struct FString sRankName,int nPermission);//APBGame.cHostingClan.RankEdit
	void OnMemberSetBioFailed(int nError);//APBGame.cHostingClan.OnMemberSetBioFailed
	void OnRankDeleteSuccess(int nRankUID);//APBGame.cHostingClan.OnRankDeleteSuccess
	void GetBio();//APBGame.cHostingClan.GetBio
	void OnRankAssignFailed(int nError,int nCharacterUID,int nRankUID);//APBGame.cHostingClan.OnRankAssignFailed
	void DisplayRank(int nRankIndex);//APBGame.cHostingClan.DisplayRank
	void OnRemoveFailed(int nError,int nCharacterUID);//APBGame.cHostingClan.OnRemoveFailed
	void OnCreateFailed(int nError);//APBGame.cHostingClan.OnCreateFailed
	void RankCreate(struct FString sRankName,int nPermission);//APBGame.cHostingClan.RankCreate
	void OnInviteReceived(struct FString sPlayerName,struct FString sClanName);//APBGame.cHostingClan.OnInviteReceived
	void OnSetBioSuccess();//APBGame.cHostingClan.OnSetBioSuccess
	void OnMemberSetBioSuccess();//APBGame.cHostingClan.OnMemberSetBioSuccess
	void OnMembersGetStateSuccess(int nMembers);//APBGame.cHostingClan.OnMembersGetStateSuccess
	void OnReceiveInfo();//APBGame.cHostingClan.OnReceiveInfo
	void SetInformation(struct FString sInformation);//APBGame.cHostingClan.SetInformation
	void OnRankCreateFailed(int nError);//APBGame.cHostingClan.OnRankCreateFailed
	int GetMemberIndex(int nCharacterUID);//APBGame.cHostingClan.GetMemberIndex
	void OnMembersGetStateFailed(int nError);//APBGame.cHostingClan.OnMembersGetStateFailed
	void DisplayMemberBio(int nMemberIndex);//APBGame.cHostingClan.DisplayMemberBio
	void DisplayMemberPublicNote(int nMemberIndex);//APBGame.cHostingClan.DisplayMemberPublicNote
	void OnLeaderSuccess(int nCharacterUID);//APBGame.cHostingClan.OnLeaderSuccess
	struct FString GetMotd();//APBGame.cHostingClan.GetMotd
	void OnSetInformationSuccess();//APBGame.cHostingClan.OnSetInformationSuccess
	void Leader(int nMemberIndex);//APBGame.cHostingClan.Leader
	void SetTheme(TArray<unsigned char> aTheme);//APBGame.cHostingClan.SetTheme
	void OnProfileChanged();//APBGame.cHostingClan.OnProfileChanged
	void OnMemberGetStatsFailed(int nError);//APBGame.cHostingClan.OnMemberGetStatsFailed
	void OnReceiveDelete();//APBGame.cHostingClan.OnReceiveDelete
	void OnMembersChanged_Mgmt();//APBGame.cHostingClan.OnMembersChanged_Mgmt
	void OnMemberSetPublicNoteFailed(int nError,int nCharacterUID);//APBGame.cHostingClan.OnMemberSetPublicNoteFailed
	void SendInvite(struct FString sCharacterName);//APBGame.cHostingClan.SendInvite
	void OnGetSymbolFailed(int nError);//APBGame.cHostingClan.OnGetSymbolFailed
	void Init(class UcHostingClient* Client);//APBGame.cHostingClan.Init
	void OnRankEditFailed(int nError,int nRankUID);//APBGame.cHostingClan.OnRankEditFailed
	void OnPermissionsChanged();//APBGame.cHostingClan.OnPermissionsChanged
	void RankDelete(int nRankIndex);//APBGame.cHostingClan.RankDelete
	void OnMemberSetPublicNoteSuccess(int nCharacterUID);//APBGame.cHostingClan.OnMemberSetPublicNoteSuccess
	void OnCreateSuccess();//APBGame.cHostingClan.OnCreateSuccess
	void DeclineInvite(int nReturnCode);//APBGame.cHostingClan.DeclineInvite
	void OnSetSymbolSuccess();//APBGame.cHostingClan.OnSetSymbolSuccess
	void MemberSetPrivateNote(int nMemberIndex,struct FString sPrivateNote);//APBGame.cHostingClan.MemberSetPrivateNote
	void SetSymbol(TArray<unsigned char> aSymbol);//APBGame.cHostingClan.SetSymbol
	void OnSendInviteFailed(int nError,struct FString sCharacterName);//APBGame.cHostingClan.OnSendInviteFailed
	void MembersGetStats();//APBGame.cHostingClan.MembersGetStats
	void OnReceiveRemove(int nCharacterUID);//APBGame.cHostingClan.OnReceiveRemove
	void OnRemoveSuccess(int nCharacterUID);//APBGame.cHostingClan.OnRemoveSuccess
	void SetMotd(struct FString sMotd);//APBGame.cHostingClan.SetMotd
	void OnDeleteFailed(int nError);//APBGame.cHostingClan.OnDeleteFailed
	void OnGetSymbolSuccess();//APBGame.cHostingClan.OnGetSymbolSuccess
	void OnRankCreateSuccess();//APBGame.cHostingClan.OnRankCreateSuccess
	void OnRankEditSuccess(int nRankUID);//APBGame.cHostingClan.OnRankEditSuccess
	void OnReceiveRankEdit(int nRankUID,struct FString sRankName,int nPermission);//APBGame.cHostingClan.OnReceiveRankEdit
	void SetBio(struct FString sBio);//APBGame.cHostingClan.SetBio
	struct FString LocalizeText(struct FString sKey);//APBGame.cHostingClan.LocalizeText
	void DisplayMembers();//APBGame.cHostingClan.DisplayMembers
	void OnTeamCreationProcessed(int nErrorCode);//APBGame.cHostingClan.OnTeamCreationProcessed
	void GetInformation();//APBGame.cHostingClan.GetInformation
	void OnGetThemeSuccess();//APBGame.cHostingClan.OnGetThemeSuccess
	void OnReceiveRankInfo();//APBGame.cHostingClan.OnReceiveRankInfo
	void DisplayClanMotd();//APBGame.cHostingClan.DisplayClanMotd
	void OnMemberGetStatsSuccess(int nCharacterUID,int nMembers);//APBGame.cHostingClan.OnMemberGetStatsSuccess
	void OnSendInviteResult(int nError);//APBGame.cHostingClan.OnSendInviteResult
	int GetLocalMemberIndex();//APBGame.cHostingClan.GetLocalMemberIndex
	void DisplayRanks();//APBGame.cHostingClan.DisplayRanks
	int Create(struct FString sClanName);//APBGame.cHostingClan.Create
	void OnGetBioSuccess(struct FString sBio);//APBGame.cHostingClan.OnGetBioSuccess
	void MemberSetBio(struct FString sBio);//APBGame.cHostingClan.MemberSetBio
	void OnSendInviteSuccess(struct FString sCharacterName);//APBGame.cHostingClan.OnSendInviteSuccess
	void OnRankDeleteFailed(int nError,int nRankUID);//APBGame.cHostingClan.OnRankDeleteFailed
	void OnMembersChanged_Social();//APBGame.cHostingClan.OnMembersChanged_Social
	void OnReceiveJoin();//APBGame.cHostingClan.OnReceiveJoin
	void OnMemberGetProfileSuccess(int nCharacterUID);//APBGame.cHostingClan.OnMemberGetProfileSuccess
	void Remove(int nMemberIndex);//APBGame.cHostingClan.Remove
	void OnRankAssignSuccess(int nCharacterUID,int nRankUID);//APBGame.cHostingClan.OnRankAssignSuccess
	bool IsLeader();//APBGame.cHostingClan.IsLeader
	void OnReceiveLeave(int nCharacterUID);//APBGame.cHostingClan.OnReceiveLeave
	void OnSetThemeSuccess();//APBGame.cHostingClan.OnSetThemeSuccess
	void MemberGetStats(int nMemberIndex);//APBGame.cHostingClan.MemberGetStats
	void GetTheme();//APBGame.cHostingClan.GetTheme
	void OnGetBioFailed(int nError);//APBGame.cHostingClan.OnGetBioFailed
	void DisplayClanBio();//APBGame.cHostingClan.DisplayClanBio
	void OnMemberGetProfileFailed(int nError,int nCharacterUID);//APBGame.cHostingClan.OnMemberGetProfileFailed
	void OnReceiveStatus(int nCharacterUID,int nStatus);//APBGame.cHostingClan.OnReceiveStatus
	void OnReceiveInvite(struct FString sCharacterName,struct FString sClanName);//APBGame.cHostingClan.OnReceiveInvite
	void OnReceiveRankCreate(int nRankUID,struct FString sRankName,int nPermission);//APBGame.cHostingClan.OnReceiveRankCreate
};
UClass* UcHostingClan::pClassPointer = NULL;

//0x00008C (0x0000CC - 0x000040)
//cHostingClanMember[0x10399DF0]
class UcHostingClanMember : public UObject
{
public:
	int                                                m_nAccountUID;                                    		// 0x000040 (0x0004)              
	int                                                m_nCharacterUID;                                  		// 0x000044 (0x0004)              
	struct FString                                     m_sCharacterName;                                 		// 0x000048 (0x000C)              
	class UcHostingClanRank*                           m_rank;                                           		// 0x000054 (0x0004)              
	int                                                m_nStatus;                                        		// 0x000058 (0x0004)              
	unsigned long                                      m_bLookingForGroup : 1;                           		// 0x00005C (0x0004) [0x00000001] 
	int                                                m_nGroupStatus;                                   		// 0x000060 (0x0004)              
	int                                                m_nGroupPublic;                                   		// 0x000064 (0x0004)              
	int                                                m_nGroupInvite;                                   		// 0x000068 (0x0004)              
	int                                                m_nDistrictUID;                                   		// 0x00006C (0x0004)              
	int                                                m_nInstanceNo;                                    		// 0x000070 (0x0004)              
	int                                                m_nDistrictStatus;                                		// 0x000074 (0x0004)              
	int                                                m_nLastLogoutSpan;                                		// 0x000078 (0x0004)              
	struct FString                                     m_sBio;                                           		// 0x00007C (0x000C)              
	struct FString                                     m_sPublicNote;                                    		// 0x000088 (0x000C)              
	struct FString                                     m_sPrivateNote;                                   		// 0x000094 (0x000C)              
	struct FString                                     m_sNewBio;                                        		// 0x0000A0 (0x000C)              
	struct FString                                     m_sNewPublicNote;                                 		// 0x0000AC (0x000C)              
	struct FString                                     m_sNewPrivateNote;                                		// 0x0000B8 (0x000C)              
	int                                                m_nStatRating;                                    		// 0x0000C4 (0x0004)              
	int                                                m_nStatThreat;                                    		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingClanMember");
		return pClassPointer;
	};
};
UClass* UcHostingClanMember::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//cHostingClanRank[0x10399CC0]
class UcHostingClanRank : public UObject
{
public:
	int                                                m_nRankUID;                                       		// 0x000040 (0x0004)              
	struct FString                                     m_sRankName;                                      		// 0x000044 (0x000C)              
	int                                                m_nPermission;                                    		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingClanRank");
		return pClassPointer;
	};

public:
	bool HasPermissionAssignRank();//APBGame.cHostingClanRank.HasPermissionAssignRank
	bool HasPermissionEditPrivateNote();//APBGame.cHostingClanRank.HasPermissionEditPrivateNote
	bool HasPermissionChatListen();//APBGame.cHostingClanRank.HasPermissionChatListen
	bool HasPermissionInviteMember();//APBGame.cHostingClanRank.HasPermissionInviteMember
	bool HasPermissionEditClanInformation();//APBGame.cHostingClanRank.HasPermissionEditClanInformation
	bool HasPermissionRemoveMember();//APBGame.cHostingClanRank.HasPermissionRemoveMember
	bool HasPermissionEditPublicNote();//APBGame.cHostingClanRank.HasPermissionEditPublicNote
	bool HasPermissionContact();//APBGame.cHostingClanRank.HasPermissionContact
	bool HasPermissionEditClanTheme();//APBGame.cHostingClanRank.HasPermissionEditClanTheme
	bool HasPermissionOfficerChatSpeak();//APBGame.cHostingClanRank.HasPermissionOfficerChatSpeak
	bool HasPermissionChatSpeak();//APBGame.cHostingClanRank.HasPermissionChatSpeak
	bool HasPermissionOfficerChatListen();//APBGame.cHostingClanRank.HasPermissionOfficerChatListen
	bool HasPermissionEditClanBio();//APBGame.cHostingClanRank.HasPermissionEditClanBio
	bool HasPermissionViewPrivateNote();//APBGame.cHostingClanRank.HasPermissionViewPrivateNote
	bool HasPermissionEditMotd();//APBGame.cHostingClanRank.HasPermissionEditMotd
	bool HasPermissionEditClanSymbol();//APBGame.cHostingClanRank.HasPermissionEditClanSymbol
};
UClass* UcHostingClanRank::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cHostingClanServer[0x10399B90]
class UcHostingClanServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingClanServer");
		return pClassPointer;
	};

public:
	void OnJoin(int nClanUID,int nCharacterUID,struct FString sClanName);//APBGame.cHostingClanServer.OnJoin
	void OnLeave(int nClanUID,int nCharacterUID);//APBGame.cHostingClanServer.OnLeave
	void Init(class UcHostingServer* Server);//APBGame.cHostingClanServer.Init
	void Cleanup();//APBGame.cHostingClanServer.Cleanup
	void OnLeader(int nClanUID,int nCharacterUID,bool bLeader);//APBGame.cHostingClanServer.OnLeader
};
UClass* UcHostingClanServer::pClassPointer = NULL;

//0x000180 (0x0001C0 - 0x000040)
//cHostingClient[0x10399A60]
class UcHostingClient : public UObject
{
public:
	DWORD                                              VfTable_FCallbackEventDevice;                     		// 0x000040 (0x0004)              
	unsigned long                                      m_bInitClientLoginSequence : 1;                   		// 0x000044 (0x0004) [0x00000001] 
	unsigned long                                      m_bTutorialComplete : 1;                          		// 0x000044 (0x0004) [0x00000002] 
	unsigned long                                      m_bNeedHCMTick : 1;                               		// 0x000044 (0x0004) [0x00000004] 
	unsigned long                                      m_bGroupInviteReceived : 1;                       		// 0x000044 (0x0004) [0x00000008] 
	unsigned long                                      m_bClanInviteReceived : 1;                        		// 0x000044 (0x0004) [0x00000010] 
	class UcHostingLobby*                              m_lobby;                                          		// 0x000048 (0x0004)              
	class UcHostingChat*                               m_chat;                                           		// 0x00004C (0x0004)              
	class UcHostingGroup*                              m_group;                                          		// 0x000050 (0x0004)              
	class UcHostingDistrict*                           m_district;                                       		// 0x000054 (0x0004)              
	class UcHostingClan*                               m_clan;                                           		// 0x000058 (0x0004)              
	class UcHostingFriendList*                         m_friendlist;                                     		// 0x00005C (0x0004)              
	class UcHostingIgnoreList*                         m_ignorelist;                                     		// 0x000060 (0x0004)              
	class UcHostingFinder*                             m_finder;                                         		// 0x000064 (0x0004)              
	class UcHostingMarketplace*                        m_marketplace[0x3];                               		// 0x000068 (0x000C)              
	class UcHostingMail*                               m_mail;                                           		// 0x000074 (0x0004)              
	class UcHostingNames*                              m_Name;                                           		// 0x000078 (0x0004)              
	class UcHostingConfigFile*                         m_configfile;                                     		// 0x00007C (0x0004)              
	class UcHostingNameQuery*                          m_namequery;                                      		// 0x000080 (0x0004)              
	class UcHostingVoice*                              m_voice;                                          		// 0x000084 (0x0004)              
	DWORD                                              m_pConfig;                                        		// 0x000088 (0x0004)              
	DWORD                                              m_pBugReportHProcess;                             		// 0x00008C (0x0004)              
	DWORD                                              m_pLatencyTester;                                 		// 0x000090 (0x0004)              
	class UcHostingGC2LS*                              m_LoginServer;                                    		// 0x000094 (0x0004)              
	class UcHostingGC2WS*                              m_WorldServer;                                    		// 0x000098 (0x0004)              
	class UcHostingGC2DS*                              m_DistrictServer;                                 		// 0x00009C (0x0004)              
	struct FGuid                                       m_PledgedContactGUID;                             		// 0x0000A0 (0x0010)              
	int                                                m_nClientBindPort;                                		// 0x0000B0 (0x0004)              
	int                                                m_nVersionHigh;                                   		// 0x0000B4 (0x0004)              
	int                                                m_nVersionMiddle;                                 		// 0x0000B8 (0x0004)              
	int                                                m_nVersionLow;                                    		// 0x0000BC (0x0004)              
	int                                                m_nVersionBuildNo;                                		// 0x0000C0 (0x0004)              
	struct FString                                     m_sUsername;                                      		// 0x0000C4 (0x000C)              
	struct FString                                     m_sPassword;                                      		// 0x0000D0 (0x000C)              
	int                                                m_nSlotNumber;                                    		// 0x0000DC (0x0004)              
	int                                                m_nDistrictUID;                                   		// 0x0000E0 (0x0004)              
	int                                                m_nAccountUID;                                    		// 0x0000E4 (0x0004)              
	int                                                m_nCharacterUID;                                  		// 0x0000E8 (0x0004)              
	int                                                m_nThreatLevel;                                   		// 0x0000EC (0x0004)              
	struct FString                                     m_sRealTag;                                       		// 0x0000F0 (0x000C)              
	int                                                m_nAccountPremium;                                		// 0x0000FC (0x0004)              
	int                                                m_nWorldEnterTime;                                		// 0x000100 (0x0004)              
	int                                                m_nServerSyncTime;                                		// 0x000104 (0x0004)              
	int                                                m_nServerTimezoneOffset;                          		// 0x000108 (0x0004)              
	int                                                m_nClientSyncTime;                                		// 0x00010C (0x0004)              
	struct FString                                     m_sCharacterName;                                 		// 0x000110 (0x000C)              
	int                                                m_nWorldUID;                                      		// 0x00011C (0x0004)              
	struct FString                                     m_sWorldName;                                     		// 0x000120 (0x000C)              
	int                                                m_nRating;                                        		// 0x00012C (0x0004)              
	int                                                m_nWorldServerIPAddress;                          		// 0x000130 (0x0004)              
	int                                                m_nWorldServerPort;                               		// 0x000134 (0x0004)              
	unsigned char                                      m_aWorldEnterTimestamp[0x8];                      		// 0x000138 (0x0008)              PROPERTY: 
	unsigned char                                      m_aDistrictEnterTimestamp[0x8];                   		// 0x000140 (0x0008)              PROPERTY: 
	unsigned char                                      m_eClientState;                                   		// 0x000148 (0x0001)              PROPERTY: etClientState
	unsigned char                                      m_ePreviousClientState;                           		// 0x000149 (0x0001)              PROPERTY: etClientState
	unsigned char                                      m_eFaction;                                       		// 0x00014A (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eDisconnectReason;                              		// 0x00014B (0x0001)              PROPERTY: etClientDisconnectReason
	int                                                m_nWorldServerPingIPAddress;                      		// 0x00014C (0x0004)              
	struct FString                                     m_sWorldServerRegion;                             		// 0x000150 (0x000C)              
	int                                                m_nDistrictServerIPAddress;                       		// 0x00015C (0x0004)              
	int                                                m_nDistrictServerPort;                            		// 0x000160 (0x0004)              
	int                                                m_nDistrictExitTimeout;                           		// 0x000164 (0x0004)              
	int                                                m_nDistrictExitTimer;                             		// 0x000168 (0x0004)              
	float                                              m_fAccumulatedDeltaTimeForHCM;                    		// 0x00016C (0x0004)              
	struct FString                                     m_sDisconnectReasonExtraInfo;                     		// 0x000170 (0x000C)              
	struct FetLoginType                                m_eLoginType;                                     		// 0x00017C (0x0004)              
	class UcLoginIntegration*                          m_pLoginIntegration;                              		// 0x000180 (0x0004)              
	struct FQWord                                      m_nAccountPermissions;                            		// 0x000184 (0x0008)              
	struct FString                                     m_sCountryCode;                                   		// 0x00018C (0x000C)              
	int                                                m_nWorldUtcOffset;                                		// 0x000198 (0x0004)              
	struct FScriptDelegate                             ___OnLoginSuccess__Delegate;                      		// 0x00019C (0x000C)              
	struct FScriptDelegate                             ___OnLoginFailed__Delegate;                       		// 0x0001A8 (0x000C)              
	struct FScriptDelegate                             ___OnDisconnected__Delegate;                      		// 0x0001B4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingClient");
		return pClassPointer;
	};

public:
	void OnDisconnectComplete();//APBGame.cHostingClient.OnDisconnectComplete
	void _OnDisconnected();//APBGame.cHostingClient._OnDisconnected
	void SetThreatLevel(int nThreatLevel);//APBGame.cHostingClient.SetThreatLevel
	void CleanupUIScenes();//APBGame.cHostingClient.CleanupUIScenes
	void ScrubString(struct FString* sString);//APBGame.cHostingClient.ScrubString
	void GetLocalServerTime(int* nYear,int* nMonth,int* nDay,int* nHour,int* nMinute,int* nSecond);//APBGame.cHostingClient.GetLocalServerTime
	void SetWorldRegionForNameCheck(int nWorldUID);//APBGame.cHostingClient.SetWorldRegionForNameCheck
	void PreExit();//APBGame.cHostingClient.PreExit
	void Logout(unsigned char Reason);//APBGame.cHostingClient.Logout
	void OnLoginSuccessNative();//APBGame.cHostingClient.OnLoginSuccessNative
	void Login(struct FString pr_sUsername,struct FString pr_sPassword);//APBGame.cHostingClient.Login
	struct FString GetPassword();//APBGame.cHostingClient.GetPassword
	void PostInit();//APBGame.cHostingClient.PostInit
	void _OnLoginSuccess();//APBGame.cHostingClient._OnLoginSuccess
	void OnLoginServerDisconnect(bool bReturnToLobbyExpected);//APBGame.cHostingClient.OnLoginServerDisconnect
	void OnLoginFailed(int nError,struct FString sCountryCode);//APBGame.cHostingClient.OnLoginFailed
	void OnGroupLeaveSuccess();//APBGame.cHostingClient.OnGroupLeaveSuccess
	void PreInit();//APBGame.cHostingClient.PreInit
	void _OnLoginFailed(int nError,struct FString sCountryCode);//APBGame.cHostingClient._OnLoginFailed
	void InitSession(struct FString sUsername,struct FString sPassword);//APBGame.cHostingClient.InitSession
	class UEngine* GetEngine();//APBGame.cHostingClient.GetEngine
	void OnDisconnect();//APBGame.cHostingClient.OnDisconnect
	void OnDisconnectNative();//APBGame.cHostingClient.OnDisconnectNative
	void UpdateServerTime(int nServerTime,int nServerTimeZone);//APBGame.cHostingClient.UpdateServerTime
	unsigned char GetClientState();//APBGame.cHostingClient.GetClientState
	void OnDisconnectComplete_UI();//APBGame.cHostingClient.OnDisconnectComplete_UI
	void Term();//APBGame.cHostingClient.Term
	void TermSession();//APBGame.cHostingClient.TermSession
	void OnKick(int nReason,struct FString sInformation);//APBGame.cHostingClient.OnKick
	bool CanAcceptGroupInvite();//APBGame.cHostingClient.CanAcceptGroupInvite
	struct FString ProcessErrorReport();//APBGame.cHostingClient.ProcessErrorReport
	struct FString GetUsername();//APBGame.cHostingClient.GetUsername
	void CleanupNative();//APBGame.cHostingClient.CleanupNative
	void OnLoginSuccess();//APBGame.cHostingClient.OnLoginSuccess
	void OnPreSwitchDistrict();//APBGame.cHostingClient.OnPreSwitchDistrict
	class AcAPBPlayerController* GetPC();//APBGame.cHostingClient.GetPC
	int GetServerTime_SecondsSince1970UTC();//APBGame.cHostingClient.GetServerTime_SecondsSince1970UTC
	bool AllowAutoLogin();//APBGame.cHostingClient.AllowAutoLogin
	void OnWorldLogout();//APBGame.cHostingClient.OnWorldLogout
	void Cleanup();//APBGame.cHostingClient.Cleanup
	bool HasSession();//APBGame.cHostingClient.HasSession
	void SetPassword(struct FString sPassword);//APBGame.cHostingClient.SetPassword
	void SetClientState(unsigned char eClientState);//APBGame.cHostingClient.SetClientState
	void ReportBug(struct FString sSummary,struct FString sDescription,TArray<struct FString> aAttachments);//APBGame.cHostingClient.ReportBug
	bool GetTutorialCompleteAnyCharacter();//APBGame.cHostingClient.GetTutorialCompleteAnyCharacter
	void GetUTCServerTime(int* nYear,int* nMonth,int* nDay,int* nHour,int* nMinute,int* nSecond);//APBGame.cHostingClient.GetUTCServerTime
	void PopClientState();//APBGame.cHostingClient.PopClientState
	void SetUsername(struct FString sUsername);//APBGame.cHostingClient.SetUsername
};
UClass* UcHostingClient::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//cHostingConfigFile[0x10399930]
class UcHostingConfigFile : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	TArray<struct FtHostingConfigFile>                 m_aConfigFiles;                                   		// 0x000044 (0x000C)              
	int                                                m_nPendingDownloads;                              		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingConfigFile");
		return pClassPointer;
	};

public:
	struct FString GetAccountFolderName();//APBGame.cHostingConfigFile.GetAccountFolderName
	int GetPersistentConfigFileIndex(int nPersistentId,unsigned char eType);//APBGame.cHostingConfigFile.GetPersistentConfigFileIndex
	void FileSave(unsigned char eSDDKey);//APBGame.cHostingConfigFile.FileSave
	void FileUpload(int nIndex);//APBGame.cHostingConfigFile.FileUpload
	void Cleanup();//APBGame.cHostingConfigFile.Cleanup
	bool CheckIdFile(int nID,struct FString sDirname);//APBGame.cHostingConfigFile.CheckIdFile
	bool FileRead(int nIndex);//APBGame.cHostingConfigFile.FileRead
	void OnFileDownloadSuccess(int nIndex);//APBGame.cHostingConfigFile.OnFileDownloadSuccess
	void OnFileUploadFailed(int nError,int nIndex);//APBGame.cHostingConfigFile.OnFileUploadFailed
	bool FileSet(int nIndex,struct FString sSection,struct FString sKey,struct FString sValue);//APBGame.cHostingConfigFile.FileSet
	bool InitConfigFiles();//APBGame.cHostingConfigFile.InitConfigFiles
	void OnFileLoadComplete(unsigned char eType);//APBGame.cHostingConfigFile.OnFileLoadComplete
	void OnFileUploadSuccess(int nIndex);//APBGame.cHostingConfigFile.OnFileUploadSuccess
	void OnFileDownloadFailed(int nError,int nIndex);//APBGame.cHostingConfigFile.OnFileDownloadFailed
	void FileLoad(int eType);//APBGame.cHostingConfigFile.FileLoad
	int GetConfigFileIndex(unsigned char eSDDKey);//APBGame.cHostingConfigFile.GetConfigFileIndex
	struct FString GetCharacterFolderName();//APBGame.cHostingConfigFile.GetCharacterFolderName
	bool FileUnload(int nIndex);//APBGame.cHostingConfigFile.FileUnload
	void Init(class UcHostingClient* Client);//APBGame.cHostingConfigFile.Init
	bool FileFlush(int nIndex);//APBGame.cHostingConfigFile.FileFlush
	bool FileGet(int nIndex,struct FString sSection,struct FString sKey,struct FString* sValue);//APBGame.cHostingConfigFile.FileGet
	void FileDownload(int nIndex);//APBGame.cHostingConfigFile.FileDownload
};
UClass* UcHostingConfigFile::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//cHostingConnectionWrapper[0x10399800]
class UcHostingConnectionWrapper : public UObject
{
public:
	DWORD                                              VfTable_cHostingConnectionHandler;                		// 0x000040 (0x0004)              
	int                                                m_nSendBufferSize;                                		// 0x000044 (0x0004)              
	int                                                m_nRecvBufferSize;                                		// 0x000048 (0x0004)              
	int                                                m_nMaxMessageSize;                                		// 0x00004C (0x0004)              
	int                                                m_nKeepaliveTime;                                 		// 0x000050 (0x0004)              
	int                                                m_nKeepaliveInterval;                             		// 0x000054 (0x0004)              
	int                                                m_nConnectTimeout;                                		// 0x000058 (0x0004)              
	int                                                m_nTickInterval;                                  		// 0x00005C (0x0004)              
	float                                              m_fElapsedSeconds;                                		// 0x000060 (0x0004)              
	DWORD                                              m_pConnection;                                    		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingConnectionWrapper");
		return pClassPointer;
	};

public:
	bool IsConnecting();//APBGame.cHostingConnectionWrapper.IsConnecting
	struct FString GetHost();//APBGame.cHostingConnectionWrapper.GetHost
	void Disconnect(bool bNotify);//APBGame.cHostingConnectionWrapper.Disconnect
	void _Init();//APBGame.cHostingConnectionWrapper._Init
	bool IsDisconnected();//APBGame.cHostingConnectionWrapper.IsDisconnected
	int GetPort();//APBGame.cHostingConnectionWrapper.GetPort
	bool IsConnected();//APBGame.cHostingConnectionWrapper.IsConnected
	void ConnectAddress(int nIPAddress,int nPort,int nTimeout,int LocalPort);//APBGame.cHostingConnectionWrapper.ConnectAddress
	void OnConnectFailed();//APBGame.cHostingConnectionWrapper.OnConnectFailed
	void OnDisconnect();//APBGame.cHostingConnectionWrapper.OnDisconnect
	void OnConnectSuccess();//APBGame.cHostingConnectionWrapper.OnConnectSuccess
	void Configure(int nSendBufferSize,int nRecvBufferSize,int nMaxMessageSize,int nKeepaliveTime,int nKeepaliveInterval,int nConnectTimeout,int nTickInterval);//APBGame.cHostingConnectionWrapper.Configure
	void ConnectHostname(struct FString sHost,int nPort,int nTimeout,int nLocalPort);//APBGame.cHostingConnectionWrapper.ConnectHostname
	void _Term();//APBGame.cHostingConnectionWrapper._Term
};
UClass* UcHostingConnectionWrapper::pClassPointer = NULL;

//0x000008 (0x000070 - 0x000068)
//cHostingDS2WS[0x103996D0]
class UcHostingDS2WS : public UcHostingConnectionWrapper
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x000068 (0x0004)              
	DWORD                                              m_pListenSocket;                                  		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingDS2WS");
		return pClassPointer;
	};

public:
	void OnAttachSuccess();//APBGame.cHostingDS2WS.OnAttachSuccess
	void GroupAnsNewLeader(int nGroupUID,TArray<int> aCharacterUIDs);//APBGame.cHostingDS2WS.GroupAnsNewLeader
	void OnAttachFailed(int nError);//APBGame.cHostingDS2WS.OnAttachFailed
	bool _Listen(struct FString sHost,int nPort);//APBGame.cHostingDS2WS._Listen
	void Send_DS2WS_DISPLAY_POINT_STATUS(struct FGuid nDisplayPointUID,int nStatus);//APBGame.cHostingDS2WS.Send_DS2WS_DISPLAY_POINT_STATUS
	void Send_DS2WS_ANS_ATTACH_SERVER(int nReturnCode);//APBGame.cHostingDS2WS.Send_DS2WS_ANS_ATTACH_SERVER
	void Send_DS2WS_ASK_BAN(int nAccountUID,int nBanType,int nDurationDays,int nViolationSource,struct FString szBanDesc);//APBGame.cHostingDS2WS.Send_DS2WS_ASK_BAN
	void Init(class UcHostingServer* Server);//APBGame.cHostingDS2WS.Init
	void OnReceiveGroupLeave(int nGroupUID,int nCharacterUID);//APBGame.cHostingDS2WS.OnReceiveGroupLeave
	void Disconnect(bool bNotify);//APBGame.cHostingDS2WS.Disconnect
	void OnReceiveGroupJoin(int nGroupUID,int nCharacterUID,int nLeaderID);//APBGame.cHostingDS2WS.OnReceiveGroupJoin
	bool _Accept();//APBGame.cHostingDS2WS._Accept
	int _AcceptTimeout(int nMilliseconds);//APBGame.cHostingDS2WS._AcceptTimeout
	void OnReceiveGMCommand(int nCharacterUID,struct FString sCommand);//APBGame.cHostingDS2WS.OnReceiveGMCommand
	void OnConnectSuccess();//APBGame.cHostingDS2WS.OnConnectSuccess
	void OnConnectFailed();//APBGame.cHostingDS2WS.OnConnectFailed
	void Send_DS2WS_SKILLRATING_UPDATE(struct FQWord nAccountUID,int nThreat,float fSkillConsRating,float fSkillStdDev,float fSkillMean,int nTrainingComplete,int nOpposedMissions);//APBGame.cHostingDS2WS.Send_DS2WS_SKILLRATING_UPDATE
	void OnReceiveAttach(int nServerUID,int nDistrictUID,int nInstanceNo,int nDistrictInstanceTypeSecondaryKey,int nWorldDatabaseUID,struct FString sWorldDatabaseIP,int nWorldDatabasePort,struct FString sWorldDatabaseUsername,struct FString sWorldDatabasePassword,struct FString sWorldDatabaseDatabase,int nWorldLogDatabaseUID,struct FString sWorldLogDatabaseIP,int nWorldLogDatabasePort,struct FString sWorldLogDatabaseUsername,struct FString sWorldLogDatabasePassword,struct FString sWorldLogDatabaseDatabase,int nBulkLogServerExecutionCount,int dateBulkLogServerExecutionYear,int dateBulkLogServerExecutionMonth,int dateBulkLogServerExecutionDay,int dateBulkLogServerExecutionHour,int dateBulkLogServerExecutionMinute,int dateBulkLogServerExecutionSecond,float fSkillRatingSeed,int nUtcOffset,struct FString sWorldName,struct FString sWorldServerRegion);//APBGame.cHostingDS2WS.OnReceiveAttach
	void OnReceiveDisplayPointStatus(struct FGuid nDisplayPointUID,unsigned char nStatus);//APBGame.cHostingDS2WS.OnReceiveDisplayPointStatus
	void GMCommandResult(int nReturnCode,int nCharacterUID);//APBGame.cHostingDS2WS.GMCommandResult
	void OnReceiveChatState(int nCharacterUID,unsigned char eChatState);//APBGame.cHostingDS2WS.OnReceiveChatState
	void Send_DS2WS_APPLY_PENDING_SKILLRATING_UPDATE(struct FQWord nAccountUID,int nThreat,float fSkillConsRating,float fSkillStdDev,float fSkillMean);//APBGame.cHostingDS2WS.Send_DS2WS_APPLY_PENDING_SKILLRATING_UPDATE
	void DisplayPointStatus(struct FGuid nDisplayPointUID,unsigned char nStatus);//APBGame.cHostingDS2WS.DisplayPointStatus
	void Send_DS2WS_ANS_GM_COMMAND(int nReturnCode,int nCharacterUID);//APBGame.cHostingDS2WS.Send_DS2WS_ANS_GM_COMMAND
	bool Listen();//APBGame.cHostingDS2WS.Listen
	void OnReceiveGroupLeader(int nGroupUID,int nCharacterUID,int nLeaderUID);//APBGame.cHostingDS2WS.OnReceiveGroupLeader
	void OnReceiveGroupAskNewLeader(int nGroupUID);//APBGame.cHostingDS2WS.OnReceiveGroupAskNewLeader
	void Send_DS2WS_DISTRICT_EXIT(int nCharacterUID);//APBGame.cHostingDS2WS.Send_DS2WS_DISTRICT_EXIT
	void OnReceiveClanLeave(int nClanUID,int nCharacterUID);//APBGame.cHostingDS2WS.OnReceiveClanLeave
	void Send_DS2WS_ASK_ATTACH_SERVER();//APBGame.cHostingDS2WS.Send_DS2WS_ASK_ATTACH_SERVER
	void OnReceiveDistrictQueueStatus(int nQueueSize);//APBGame.cHostingDS2WS.OnReceiveDistrictQueueStatus
	void OnReceiveDistrictExit(int nCharacterUID);//APBGame.cHostingDS2WS.OnReceiveDistrictExit
	int AcceptTimeout(int nMilliseconds);//APBGame.cHostingDS2WS.AcceptTimeout
	void Send_DS2WS_DISTRICT_LOCK(bool bLocked);//APBGame.cHostingDS2WS.Send_DS2WS_DISTRICT_LOCK
	void Attach();//APBGame.cHostingDS2WS.Attach
	void Send_DS2WS_ASK_PREMIUM_STATUS(int nAccountUID,int nCharacterUID);//APBGame.cHostingDS2WS.Send_DS2WS_ASK_PREMIUM_STATUS
	bool Accept();//APBGame.cHostingDS2WS.Accept
	void OnReceiveChatLocal(int nCharacterUID,unsigned char eChatType,unsigned char eChatTag,struct FString sMessage);//APBGame.cHostingDS2WS.OnReceiveChatLocal
	void Send_DS2WS_ASK_GROUP_JOIN(int nCharacterUID,int nLeaderUID);//APBGame.cHostingDS2WS.Send_DS2WS_ASK_GROUP_JOIN
	void Send_DS2WS_CHARACTER_RATING_UPDATE(int nCharacterUID,int nRating);//APBGame.cHostingDS2WS.Send_DS2WS_CHARACTER_RATING_UPDATE
	void OnReceiveAnsBan(int nReturnCode,int nBanType,int nAccountUID,int nBanDays);//APBGame.cHostingDS2WS.OnReceiveAnsBan
	void OnReceiveClanJoin(int nClanUID,int nCharacterUID,struct FString sClanName);//APBGame.cHostingDS2WS.OnReceiveClanJoin
	void Send_DS2WS_DISTRICT_ENTER(int nReturnCode,int nCharacterUID);//APBGame.cHostingDS2WS.Send_DS2WS_DISTRICT_ENTER
	void OnReceiveClanLeader(int nClanUID,int nCharacterUID,bool bLeader);//APBGame.cHostingDS2WS.OnReceiveClanLeader
	void Connect();//APBGame.cHostingDS2WS.Connect
	void OnDisconnect();//APBGame.cHostingDS2WS.OnDisconnect
	void Send_DS2WS_ANS_GROUP_LEADER(int nGroupUID,TArray<int> aCharacterUIDs);//APBGame.cHostingDS2WS.Send_DS2WS_ANS_GROUP_LEADER
	void DistrictLock(bool bLock);//APBGame.cHostingDS2WS.DistrictLock
	void AnswerAttach();//APBGame.cHostingDS2WS.AnswerAttach
};
UClass* UcHostingDS2WS::pClassPointer = NULL;

//0x000098 (0x000100 - 0x000068)
//cHostingGC2LS[0x103995A0]
class UcHostingGC2LS : public UcHostingConnectionWrapper
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000068 (0x0004)              
	struct FString                                     m_sHost;                                          		// 0x00006C (0x000C)              
	int                                                m_nPort;                                          		// 0x000078 (0x0004)              
	TArray<struct FString>                             m_aLS;                                            		// 0x00007C (0x000C)              
	struct FString                                     m_sLS1;                                           		// 0x000088 (0x000C)              
	struct FString                                     m_sLS2;                                           		// 0x000094 (0x000C)              
	struct FString                                     m_sLS3;                                           		// 0x0000A0 (0x000C)              
	struct FString                                     m_sLS4;                                           		// 0x0000AC (0x000C)              
	struct FString                                     m_sLS5;                                           		// 0x0000B8 (0x000C)              
	struct FString                                     m_sLS6;                                           		// 0x0000C4 (0x000C)              
	struct FString                                     m_sLS7;                                           		// 0x0000D0 (0x000C)              
	struct FString                                     m_sLS8;                                           		// 0x0000DC (0x000C)              
	struct FString                                     m_sLS9;                                           		// 0x0000E8 (0x000C)              
	struct FString                                     m_sLS10;                                          		// 0x0000F4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingGC2LS");
		return pClassPointer;
	};

public:
	void OnCharacterDeleteSuccess();//APBGame.cHostingGC2LS.OnCharacterDeleteSuccess
	void OnCharacterInfoFailed(int nError);//APBGame.cHostingGC2LS.OnCharacterInfoFailed
	void GetWorldList();//APBGame.cHostingGC2LS.GetWorldList
	void Disconnect(bool bNotify);//APBGame.cHostingGC2LS.Disconnect
	void Send_GC2LS_ASK_CHARACTER_CREATE(unsigned char nFaction,unsigned char nGender,TArray<unsigned char> aCustomisation,int nSeconds);//APBGame.cHostingGC2LS.Send_GC2LS_ASK_CHARACTER_CREATE
	void NameChange(int nSlotNumber);//APBGame.cHostingGC2LS.NameChange
	void OnSaveConfigSuccess(int nIndex);//APBGame.cHostingGC2LS.OnSaveConfigSuccess
	void Send_GC2LS_ASK_NUM_ADDITIONAL_CHARACTER_SLOTS();//APBGame.cHostingGC2LS.Send_GC2LS_ASK_NUM_ADDITIONAL_CHARACTER_SLOTS
	void Send_GC2LS_ASK_CONFIGFILE_SAVE(int nIndex);//APBGame.cHostingGC2LS.Send_GC2LS_ASK_CONFIGFILE_SAVE
	void Logout();//APBGame.cHostingGC2LS.Logout
	void OnCharacterCreateFailed(int nError);//APBGame.cHostingGC2LS.OnCharacterCreateFailed
	void AllConnectsFailed();//APBGame.cHostingGC2LS.AllConnectsFailed
	void OnNameCheckSuccess();//APBGame.cHostingGC2LS.OnNameCheckSuccess
	void OnLoginSuccess();//APBGame.cHostingGC2LS.OnLoginSuccess
	void ConnectRandom();//APBGame.cHostingGC2LS.ConnectRandom
	void OnWorldEnterSuccess();//APBGame.cHostingGC2LS.OnWorldEnterSuccess
	void OnCharacterCreateSuccess(int nSlotNumber);//APBGame.cHostingGC2LS.OnCharacterCreateSuccess
	void OnWorldEnterFailed(int nError);//APBGame.cHostingGC2LS.OnWorldEnterFailed
	void CharacterInfo(int nSlotNumber);//APBGame.cHostingGC2LS.CharacterInfo
	void NameCheck(int nWorldUID,struct FString sCharacterName);//APBGame.cHostingGC2LS.NameCheck
	void OnLoadConfigSuccess(int nIndex);//APBGame.cHostingGC2LS.OnLoadConfigSuccess
	void OnGetWorldListFailed(int nError);//APBGame.cHostingGC2LS.OnGetWorldListFailed
	void OnConnectSuccess();//APBGame.cHostingGC2LS.OnConnectSuccess
	void WorldEnter(int nSlotNumber);//APBGame.cHostingGC2LS.WorldEnter
	void OnCharacterList();//APBGame.cHostingGC2LS.OnCharacterList
	void ConnectToLS();//APBGame.cHostingGC2LS.ConnectToLS
	void Send_GC2LS_ASK_WORLD_LIST();//APBGame.cHostingGC2LS.Send_GC2LS_ASK_WORLD_LIST
	void OnError(int nMessageId,int nQueryId,int nReturnCode,int nParam1,int nParam2,int nParam3,int nParam4);//APBGame.cHostingGC2LS.OnError
	void FastLogin();//APBGame.cHostingGC2LS.FastLogin
	void Send_GC2LS_ASK_WORLD_ENTER(int nSlotNumber);//APBGame.cHostingGC2LS.Send_GC2LS_ASK_WORLD_ENTER
	void Send_GC2LS_ASK_CHARACTER_INFO(int nSlotNumber);//APBGame.cHostingGC2LS.Send_GC2LS_ASK_CHARACTER_INFO
	void OnDisconnect();//APBGame.cHostingGC2LS.OnDisconnect
	void OnConnectFailed();//APBGame.cHostingGC2LS.OnConnectFailed
	void AddLS(struct FString sLS);//APBGame.cHostingGC2LS.AddLS
	void Send_GC2LS_ASK_CHARACTER_DELETE(int nSlotNumber);//APBGame.cHostingGC2LS.Send_GC2LS_ASK_CHARACTER_DELETE
	void OnLoadConfigFailed(int nError,int nIndex);//APBGame.cHostingGC2LS.OnLoadConfigFailed
	void CharacterGetNumAdditionalSlots();//APBGame.cHostingGC2LS.CharacterGetNumAdditionalSlots
	void Send_GC2LS_TICK_TOGGLE_LOGIN_POPUP(int nDontShowOption);//APBGame.cHostingGC2LS.Send_GC2LS_TICK_TOGGLE_LOGIN_POPUP
	void OnLoginFailed(int nError,struct FString sCountryCode);//APBGame.cHostingGC2LS.OnLoginFailed
	void Send_GC2LS_ASK_PREMIUM_STATUS();//APBGame.cHostingGC2LS.Send_GC2LS_ASK_PREMIUM_STATUS
	void OnSaveConfigFailed(int nError,int nIndex);//APBGame.cHostingGC2LS.OnSaveConfigFailed
	void OnGetWorldListSuccess();//APBGame.cHostingGC2LS.OnGetWorldListSuccess
	void Send_GC2LS_ASK_CONFIGFILE_LOAD(int nIndex);//APBGame.cHostingGC2LS.Send_GC2LS_ASK_CONFIGFILE_LOAD
	void OnKick(int nReason,struct FString sInformation);//APBGame.cHostingGC2LS.OnKick
	void OnNameCheckFailed(int nError);//APBGame.cHostingGC2LS.OnNameCheckFailed
	void CharacterDelete(int nSlotNumber);//APBGame.cHostingGC2LS.CharacterDelete
	void Send_GC2LS_ASK_CHARACTER_NAME_CHANGE(int nSlotNumber);//APBGame.cHostingGC2LS.Send_GC2LS_ASK_CHARACTER_NAME_CHANGE
	void OnCharacterInfoSuccess(int nSlotNumber);//APBGame.cHostingGC2LS.OnCharacterInfoSuccess
	void OnWorldStatus(int nWorldUID,int nStatus);//APBGame.cHostingGC2LS.OnWorldStatus
	void OnNameChangeSuccess(int nSlotNumber);//APBGame.cHostingGC2LS.OnNameChangeSuccess
	void Send_GC2LS_ASK_CHARACTER_NAME_CHECK(int nWorldUID,struct FString sCharacterName);//APBGame.cHostingGC2LS.Send_GC2LS_ASK_CHARACTER_NAME_CHECK
	void SaveConfigFile(int nIndex);//APBGame.cHostingGC2LS.SaveConfigFile
	void Send_GC2LS_ASK_SSO_TOKEN(int nStorePage,int nCategoryID,int nSubCategoryID,int nProductID);//APBGame.cHostingGC2LS.Send_GC2LS_ASK_SSO_TOKEN
	void OnPuzzleFailed(int nError);//APBGame.cHostingGC2LS.OnPuzzleFailed
	bool Send_GC2LS_ASK_LOGIN(int nPuzzleSolution,unsigned char* aAuthenticationKey);//APBGame.cHostingGC2LS.Send_GC2LS_ASK_LOGIN
	void CharacterCreate(unsigned char eFaction,unsigned char eGender,TArray<unsigned char> aCustomisation,int nSeconds);//APBGame.cHostingGC2LS.CharacterCreate
	void Init(class UcHostingClient* Client);//APBGame.cHostingGC2LS.Init
	void OnCharacterDeleteFailed(int nError);//APBGame.cHostingGC2LS.OnCharacterDeleteFailed
	void OnNameChangeFailed(int nError);//APBGame.cHostingGC2LS.OnNameChangeFailed
	void LoadLoginDLLs();//APBGame.cHostingGC2LS.LoadLoginDLLs
};
UClass* UcHostingGC2LS::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//cHostingGC2WS[0x10399470]
class UcHostingGC2WS : public UcHostingConnectionWrapper
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingGC2WS");
		return pClassPointer;
	};

public:
	void Send_GC2WS_ASK_CLAN_MEMBER_BIO_EDIT(struct FString sBio);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_MEMBER_BIO_EDIT
	void OnMarketplaceAuctionCancelSuccess(unsigned char eAuctionType,int nAuctionUID);//APBGame.cHostingGC2WS.OnMarketplaceAuctionCancelSuccess
	void OnGroupStateFailed(int nError);//APBGame.cHostingGC2WS.OnGroupStateFailed
	void Send_GC2WS_ASK_MAIL_READ(int nMailUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_MAIL_READ
	void Send_GC2WS_ASK_CHALLENGE_ONGOING_INFO(int nChallengeType,int nTop);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CHALLENGE_ONGOING_INFO
	void OnClanMemberSetBioSuccess();//APBGame.cHostingGC2WS.OnClanMemberSetBioSuccess
	void OnReceiveClanLeave(int nCharacterUID);//APBGame.cHostingGC2WS.OnReceiveClanLeave
	void Send_GC2WS_CHAT_STATE(unsigned char eState,struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.Send_GC2WS_CHAT_STATE
	void OnMailDeleteFailed(int nError,int nMailUID);//APBGame.cHostingGC2WS.OnMailDeleteFailed
	void Send_GC2WS_ASK_POPULATION(int nDistrictUID,int nInstanceNo);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_POPULATION
	void GroupInfo(struct FString sCharacterName);//APBGame.cHostingGC2WS.GroupInfo
	void OnReceiveGroupJoin();//APBGame.cHostingGC2WS.OnReceiveGroupJoin
	void Send_GC2WS_ASK_DISTRICT_ENTER();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_DISTRICT_ENTER
	void Send_GC2WS_ASK_MARKETPLACE_MYBID_LIST(unsigned char eAuctionType,int nRowsPerServerPage,int nServerPage,unsigned char eSort);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_MARKETPLACE_MYBID_LIST
	void OnClanRankCreateFailed(int nError);//APBGame.cHostingGC2WS.OnClanRankCreateFailed
	void OnGroupLeaveFailed(int nError);//APBGame.cHostingGC2WS.OnGroupLeaveFailed
	void ClanRankDelete(int nRankUID);//APBGame.cHostingGC2WS.ClanRankDelete
	void Send_GC2WS_ASK_MAIL_DELETE(int nMailUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_MAIL_DELETE
	void OnClanLeaderFailed(int nError,int nCharacterUID);//APBGame.cHostingGC2WS.OnClanLeaderFailed
	void OnDisconnect();//APBGame.cHostingGC2WS.OnDisconnect
	void OnMarketplaceGetMyAuctionListFailed(unsigned char eAuctionType,int nError);//APBGame.cHostingGC2WS.OnMarketplaceGetMyAuctionListFailed
	void FriendListAdd(struct FString sCharacterName);//APBGame.cHostingGC2WS.FriendListAdd
	void OnSendGroupConfigSuccess();//APBGame.cHostingGC2WS.OnSendGroupConfigSuccess
	void ClanSetSymbol(TArray<unsigned char> aSymbol);//APBGame.cHostingGC2WS.ClanSetSymbol
	void Send_GC2WS_CHAT_CLAN(struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.Send_GC2WS_CHAT_CLAN
	void OnWho(TArray<struct FString> enforcers,TArray<struct FString> criminals);//APBGame.cHostingGC2WS.OnWho
	void OnWorldQueueStatus(int nPosition,int nSize,int nEstimatedWait);//APBGame.cHostingGC2WS.OnWorldQueueStatus
	void WorldEnter();//APBGame.cHostingGC2WS.WorldEnter
	void OnClanGetThemeFailed(int nError);//APBGame.cHostingGC2WS.OnClanGetThemeFailed
	void OnReceiveGroupInviteCancelled(struct FString sCharacterName);//APBGame.cHostingGC2WS.OnReceiveGroupInviteCancelled
	void OnMarketplaceAuctionGetItemSuccess(unsigned char eAuctionType,int nAuctionUID,struct FString sItem);//APBGame.cHostingGC2WS.OnMarketplaceAuctionGetItemSuccess
	void OnClanSetThemeFailed(int nError);//APBGame.cHostingGC2WS.OnClanSetThemeFailed
	void DistrictEnter();//APBGame.cHostingGC2WS.DistrictEnter
	void AvailableForMetagrouping(bool bAvailableForMetagrouping);//APBGame.cHostingGC2WS.AvailableForMetagrouping
	void Send_GC2WS_ASK_MARKETPLACE_MYAUCTION_LIST(unsigned char eAuctionType,int nRowsPerServerPage,int nServerPage,unsigned char eSort);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_MARKETPLACE_MYAUCTION_LIST
	void SendChatDistrict(struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.SendChatDistrict
	void OnMarketplaceGetMyAuctionListSuccess(unsigned char eAuctionType);//APBGame.cHostingGC2WS.OnMarketplaceGetMyAuctionListSuccess
	void OnLoadConfigFailed(int nError,int nIndex);//APBGame.cHostingGC2WS.OnLoadConfigFailed
	void SendChatOfficer(struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.SendChatOfficer
	void OnSendClanInviteSuccess(struct FString sCharacterName);//APBGame.cHostingGC2WS.OnSendClanInviteSuccess
	void Send_GC2WS_ASK_CLAN_LEADER(int nCharacterUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_LEADER
	void SendChatWhisper(unsigned char nWhisperUID,struct FString sCharacterName,struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.SendChatWhisper
	void Send_GC2WS_ASK_CLAN_THEME_EDIT(TArray<unsigned char> aTheme);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_THEME_EDIT
	void OnIgnoreListAddSuccess(int nCharacterUID,struct FString sCharacterName);//APBGame.cHostingGC2WS.OnIgnoreListAddSuccess
	void OnDistrictQueueCancelSuccess(bool bGroup);//APBGame.cHostingGC2WS.OnDistrictQueueCancelSuccess
	void OnReceiveClanLeader(int nCharacterUID);//APBGame.cHostingGC2WS.OnReceiveClanLeader
	void Who();//APBGame.cHostingGC2WS.Who
	void ClanMemberSetBio(struct FString sBio);//APBGame.cHostingGC2WS.ClanMemberSetBio
	void MarketplaceGetAuctionList(unsigned char eAuctionType,int nRowsPerServerPage,int nServerPage,unsigned char eSort,unsigned char eSearch,struct FString sSearch,int nCategory,int nSubcategory,int nRatingStart,int nRatingEnd,bool bSystemAuctions,bool bCharacterRestricted);//APBGame.cHostingGC2WS.MarketplaceGetAuctionList
	void Send_GC2WS_ASK_CLAN_BIO_EDIT(struct FString sBio);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_BIO_EDIT
	void Logout();//APBGame.cHostingGC2WS.Logout
	void OnMailReadFailed(int nError,int nMailUID);//APBGame.cHostingGC2WS.OnMailReadFailed
	void OnMailGetItemFailed(int nError,int nMailUID);//APBGame.cHostingGC2WS.OnMailGetItemFailed
	void Send_GC2WS_CHAT_OFFICER(struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.Send_GC2WS_CHAT_OFFICER
	void OnClanGetThemeSuccess();//APBGame.cHostingGC2WS.OnClanGetThemeSuccess
	void OnGetInstanceListSuccess();//APBGame.cHostingGC2WS.OnGetInstanceListSuccess
	void OnReceiveClanDelete();//APBGame.cHostingGC2WS.OnReceiveClanDelete
	void ClanMemberGetStats(int nCharacterUID);//APBGame.cHostingGC2WS.ClanMemberGetStats
	void OnNameQueryFailed(int nError,unsigned char eNameQuery,int nCharacterUID);//APBGame.cHostingGC2WS.OnNameQueryFailed
	void OnMarketplaceGetSellerListFailed(unsigned char eAuctionType,int nError);//APBGame.cHostingGC2WS.OnMarketplaceGetSellerListFailed
	void Send_GC2WS_ASK_GROUP_INVITE(struct FString sCharacterName);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_GROUP_INVITE
	void OnDistrictExitFailed(int nError);//APBGame.cHostingGC2WS.OnDistrictExitFailed
	void OnReceiveClanRankInfo();//APBGame.cHostingGC2WS.OnReceiveClanRankInfo
	void Send_GC2WS_ASK_DISTRICT_EXIT();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_DISTRICT_EXIT
	void OnClanMemberGetStateSuccess(int nMembers);//APBGame.cHostingGC2WS.OnClanMemberGetStateSuccess
	void MailGetMailList(int nPage,unsigned char eSort);//APBGame.cHostingGC2WS.MailGetMailList
	void Send_GC2WS_ASK_IGNORELIST_ADD(struct FString sCharacterName);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_IGNORELIST_ADD
	void Send_GC2WS_ASK_CLAN_RANK_CREATE(struct FString sRankName,int nPermission);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_RANK_CREATE
	void LookingForGroup(bool bLookingForGroup);//APBGame.cHostingGC2WS.LookingForGroup
	void Send_GC2WS_ASK_CLAN_RANK_DELETE(int nRankUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_RANK_DELETE
	void Played();//APBGame.cHostingGC2WS.Played
	void OnDistrictQueueStatus(int nDistrictUID,int nInstanceNo,int nPosition,int nSize,int nCharacterUID);//APBGame.cHostingGC2WS.OnDistrictQueueStatus
	void OnClanSetBioFailed(int nError);//APBGame.cHostingGC2WS.OnClanSetBioFailed
	void MarketplaceGetThumbnails(unsigned char eAuctionType,unsigned char eListType,int nClientPage,int nPageRequestSequence,TArray<int> aAuctionUIDs);//APBGame.cHostingGC2WS.MarketplaceGetThumbnails
	void Send_GC2WS_ASK_CLAN_DELETE();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_DELETE
	void Send_GC2WS_ASK_GROUP_JOIN(struct FString sCharacterName);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_GROUP_JOIN
	void OnGroupLeaderFailed(int nError,int nCharacterUID);//APBGame.cHostingGC2WS.OnGroupLeaderFailed
	void ClanGetTheme();//APBGame.cHostingGC2WS.ClanGetTheme
	void GMCommand(struct FString sCommand);//APBGame.cHostingGC2WS.GMCommand
	void OnReceiveClanInvite(struct FString sCharacterName,struct FString sClanName);//APBGame.cHostingGC2WS.OnReceiveClanInvite
	void Send_GC2WS_ASK_WHO();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_WHO
	void OnClanDeleteFailed(int nError);//APBGame.cHostingGC2WS.OnClanDeleteFailed
	void Send_GC2WS_ASK_CLAN_INVITE(struct FString sCharacterName);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_INVITE
	void SendChatClan(struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.SendChatClan
	void OnFriendListRemoveFailed(int nError,int nCharacterUID);//APBGame.cHostingGC2WS.OnFriendListRemoveFailed
	void ClanRankCreate(struct FString sRankName,int nPermission);//APBGame.cHostingGC2WS.ClanRankCreate
	void MailRead(int nMailUID);//APBGame.cHostingGC2WS.MailRead
	void OnMarketplaceGetMyBidListFailed(unsigned char eAuctionType,int nError);//APBGame.cHostingGC2WS.OnMarketplaceGetMyBidListFailed
	void OnReceiveClanRankEdit(int nRankUID,struct FString sRankName,int nPermission);//APBGame.cHostingGC2WS.OnReceiveClanRankEdit
	void OnReceiveDistrictList();//APBGame.cHostingGC2WS.OnReceiveDistrictList
	void FriendListGetState();//APBGame.cHostingGC2WS.FriendListGetState
	void Send_GC2WS_ASK_DISTRICT_RESERVE(int nDistrictUID,int nInstanceNo,int nCharacterUID,bool bGroup);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_DISTRICT_RESERVE
	void OnFinderCharacterGetInfoFailed(int nError,struct FString sCharacterName);//APBGame.cHostingGC2WS.OnFinderCharacterGetInfoFailed
	void OnGroupListFailed(int nError,int nDistrictUID,int nInstanceNo);//APBGame.cHostingGC2WS.OnGroupListFailed
	void OnFriendListAddSuccess(int nCharacterUID,struct FString sCharacterName,unsigned char eFaction,int nStatus,bool bLookingForGroup,int nGroupStatus,int nGroupPublic,int nGroupInvite,int nDistrictUID,int nInstanceNo,int nDistrictStatus);//APBGame.cHostingGC2WS.OnFriendListAddSuccess
	void Send_GC2WS_ASK_GM_COMMAND(struct FString sCommand);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_GM_COMMAND
	void GroupLeader(int nCharacterUID);//APBGame.cHostingGC2WS.GroupLeader
	void OnReceiveGroupLeader(int nCharacterUID);//APBGame.cHostingGC2WS.OnReceiveGroupLeader
	void Population(int nDistrictUID,int nInstanceNo);//APBGame.cHostingGC2WS.Population
	void OnError(int nMessageId,int nQueryId,int nReturnCode,int nParam1,int nParam2,int nParam3,int nParam4);//APBGame.cHostingGC2WS.OnError
	void Send_GC2WS_ASK_FRIENDLIST_ADD(struct FString sCharacterName);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_FRIENDLIST_ADD
	void Send_GC2WS_ASK_CLAN_RANK_EDIT(int nRankUID,struct FString sRankName,int nPermission);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_RANK_EDIT
	void Send_GC2WS_ASK_CLAN_MOTD_EDIT(struct FString sMotd);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_MOTD_EDIT
	void OnClanMemberGetStateFailed(int nError);//APBGame.cHostingGC2WS.OnClanMemberGetStateFailed
	void Send_GC2WS_ASK_DISTRICT_QUEUE_CANCEL(bool bGroup);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_DISTRICT_QUEUE_CANCEL
	void SendGroupJoin(struct FString sCharacterName);//APBGame.cHostingGC2WS.SendGroupJoin
	void OnDistrictQueueCancelFailed(int nError,bool bGroup);//APBGame.cHostingGC2WS.OnDistrictQueueCancelFailed
	void OnMarketplaceGetAuctionListSuccess(unsigned char eAuctionType);//APBGame.cHostingGC2WS.OnMarketplaceGetAuctionListSuccess
	void OnReceiveGroupInvite(struct FString sCharacterName);//APBGame.cHostingGC2WS.OnReceiveGroupInvite
	void OnMailDeleteSuccess(int nMailUID);//APBGame.cHostingGC2WS.OnMailDeleteSuccess
	void Send_GC2WS_CHAT_LOCAL(unsigned char eChatType,unsigned char eChatTag,struct FString sMessage);//APBGame.cHostingGC2WS.Send_GC2WS_CHAT_LOCAL
	void Init(class UcHostingClient* Client);//APBGame.cHostingGC2WS.Init
	void OnReceiveGroupLeave(int nCharacterUID);//APBGame.cHostingGC2WS.OnReceiveGroupLeave
	void GroupRemove(int nCharacterUID);//APBGame.cHostingGC2WS.GroupRemove
	void OnClanDeleteSuccess();//APBGame.cHostingGC2WS.OnClanDeleteSuccess
	void NameQuery(unsigned char eNameQuery,int nCharacterUID);//APBGame.cHostingGC2WS.NameQuery
	void OnDistrictEnterFailed(int nError);//APBGame.cHostingGC2WS.OnDistrictEnterFailed
	void OnWorldQueueCancelSuccess();//APBGame.cHostingGC2WS.OnWorldQueueCancelSuccess
	void Send_GC2WS_ASK_WORLD_QUEUE_CANCEL();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_WORLD_QUEUE_CANCEL
	void OnGroupLeaderSuccess(int nCharacterUID);//APBGame.cHostingGC2WS.OnGroupLeaderSuccess
	void Send_GC2WS_ASK_CLAN_MEMBER_STATS(int nCharacterUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_MEMBER_STATS
	void OnGetInstanceListFailed(int nError);//APBGame.cHostingGC2WS.OnGetInstanceListFailed
	void SendGroupInvite(struct FString sCharacterName);//APBGame.cHostingGC2WS.SendGroupInvite
	void OnClanRankAssignSuccess(int nCharacterUID,int nRankUID);//APBGame.cHostingGC2WS.OnClanRankAssignSuccess
	void OnClanSetMotdSuccess();//APBGame.cHostingGC2WS.OnClanSetMotdSuccess
	void OnReceiveClanJoin();//APBGame.cHostingGC2WS.OnReceiveClanJoin
	void Send_GC2WS_ASK_CHAT_WHISPER(unsigned char nWhisperUID,struct FString sCharacterName,struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CHAT_WHISPER
	void OnGroupRemoveFailed(int nError,int nCharacterUID);//APBGame.cHostingGC2WS.OnGroupRemoveFailed
	void OnReceiveClanRankCreate(int nRankUID,struct FString sRankName,int nPermission);//APBGame.cHostingGC2WS.OnReceiveClanRankCreate
	void Send_GC2WS_SET_METAGROUPING(bool bAvailableForMetagrouping);//APBGame.cHostingGC2WS.Send_GC2WS_SET_METAGROUPING
	void Send_GC2WS_ASK_MARKETPLACE_AUCTION_ITEM(unsigned char eAuctionType,int nAuctionUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_MARKETPLACE_AUCTION_ITEM
	void OnFriendListGetStateFailed(int nError);//APBGame.cHostingGC2WS.OnFriendListGetStateFailed
	void OnClanMemberGetProfileSuccess(int nCharacterUID);//APBGame.cHostingGC2WS.OnClanMemberGetProfileSuccess
	void OnKick(int nReason,struct FString sInformation);//APBGame.cHostingGC2WS.OnKick
	void Send_GC2WS_ASK_INSTANCE_LIST();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_INSTANCE_LIST
	void OnClanMemberGetStatsSuccess(int nCharacterUID,int nMembers);//APBGame.cHostingGC2WS.OnClanMemberGetStatsSuccess
	void Send_GC2WS_ASK_GROUP_LEADER(int nCharacterUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_GROUP_LEADER
	void SaveConfigFile(int nIndex);//APBGame.cHostingGC2WS.SaveConfigFile
	void OnClanRankCreateSuccess();//APBGame.cHostingGC2WS.OnClanRankCreateSuccess
	void OnWorldEnterFailed(int nError);//APBGame.cHostingGC2WS.OnWorldEnterFailed
	void GetInstanceList();//APBGame.cHostingGC2WS.GetInstanceList
	void OnIgnoreListAddFailed(int nError,struct FString sCharacterName);//APBGame.cHostingGC2WS.OnIgnoreListAddFailed
	void ClanSetBio(struct FString sBio);//APBGame.cHostingGC2WS.ClanSetBio
	void Send_GC2WS_ASK_CHARACTERFINDER_INFO(struct FString sCharacterName);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CHARACTERFINDER_INFO
	void SendChatGroup(struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.SendChatGroup
	void Send_GC2WS_ASK_GROUP_LIST(int nDistrictUID,int nInstanceNo);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_GROUP_LIST
	void DistrictQueueCancel(bool bGroup);//APBGame.cHostingGC2WS.DistrictQueueCancel
	void OnGroupLeaveSuccess();//APBGame.cHostingGC2WS.OnGroupLeaveSuccess
	void ClanLeader(int nCharacterUID);//APBGame.cHostingGC2WS.ClanLeader
	void OnPlayed(int nPlayedSeconds);//APBGame.cHostingGC2WS.OnPlayed
	void Send_GC2WS_ASK_CLAN_BIO();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_BIO
	void OnClanRankEditFailed(int nError,int nRankUID);//APBGame.cHostingGC2WS.OnClanRankEditFailed
	void ClanSetMotd(struct FString sMotd);//APBGame.cHostingGC2WS.ClanSetMotd
	void Send_GC2WS_ASK_WORLD_ENTER();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_WORLD_ENTER
	void OnFriendListAddFailed(int nError,struct FString sCharacterName);//APBGame.cHostingGC2WS.OnFriendListAddFailed
	void OnMarketplaceAuctionGetItemFailed(unsigned char eAuctionType,int nError,int nAuctionUID);//APBGame.cHostingGC2WS.OnMarketplaceAuctionGetItemFailed
	void DistrictReserve(int nDistrictUID,int nInstanceNo,int nCharacterUID,bool bGroup);//APBGame.cHostingGC2WS.DistrictReserve
	void OnClanSetInformationSuccess();//APBGame.cHostingGC2WS.OnClanSetInformationSuccess
	void FriendListRemove(int nCharacterUID);//APBGame.cHostingGC2WS.FriendListRemove
	void OnClanSetSymbolFailed(int nError);//APBGame.cHostingGC2WS.OnClanSetSymbolFailed
	void OnReceiveClanRankAssign(int nCharacterUID,int nRankUID);//APBGame.cHostingGC2WS.OnReceiveClanRankAssign
	void OnReceiveGroupConfig(bool bPublic,bool bInvite);//APBGame.cHostingGC2WS.OnReceiveGroupConfig
	void OnSendGroupInviteSuccess(struct FString sCharacterName);//APBGame.cHostingGC2WS.OnSendGroupInviteSuccess
	void OnClanMemberSetPrivateNoteFailed(int nError,int nCharacterUID);//APBGame.cHostingGC2WS.OnClanMemberSetPrivateNoteFailed
	void ClanDelete();//APBGame.cHostingGC2WS.ClanDelete
	void OnDistrictReserveSuccess(int nDistrictUID,int nInstanceNo,bool bGroup,bool bQueued);//APBGame.cHostingGC2WS.OnDistrictReserveSuccess
	void ClanGetBio();//APBGame.cHostingGC2WS.ClanGetBio
	void OnGroupRemoveSuccess(int nCharacterUID);//APBGame.cHostingGC2WS.OnGroupRemoveSuccess
	void ClanMemberSetPublicNote(int nCharacterUID,struct FString sPublicNote);//APBGame.cHostingGC2WS.ClanMemberSetPublicNote
	void IgnoreListAdd(struct FString sCharacterName);//APBGame.cHostingGC2WS.IgnoreListAdd
	void OnMarketplaceGetMyBidListSuccess(unsigned char eAuctionType);//APBGame.cHostingGC2WS.OnMarketplaceGetMyBidListSuccess
	void Send_GC2WS_ASK_GROUP_INFO(struct FString sCharacterName);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_GROUP_INFO
	void OnClanGetSymbolFailed(int nError);//APBGame.cHostingGC2WS.OnClanGetSymbolFailed
	void OnSaveConfigFailed(int nError,int nIndex);//APBGame.cHostingGC2WS.OnSaveConfigFailed
	void OnClanSetBioSuccess();//APBGame.cHostingGC2WS.OnClanSetBioSuccess
	void Send_GC2WS_LFG(bool bLookingForGroup);//APBGame.cHostingGC2WS.Send_GC2WS_LFG
	void OnClanRemoveSuccess(int nCharacterUID);//APBGame.cHostingGC2WS.OnClanRemoveSuccess
	void Send_GC2WS_ASK_CLAN_LEAVE();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_LEAVE
	void Send_GC2WS_MARKETPLACE_THUMBNAIL(unsigned char eAuctionType,unsigned char eListType,int nClientPage,int nPageRequestSequence,TArray<int> aAuctionUIDs);//APBGame.cHostingGC2WS.Send_GC2WS_MARKETPLACE_THUMBNAIL
	void OnGroupInfoFailed(int nError,struct FString sCharacterName);//APBGame.cHostingGC2WS.OnGroupInfoFailed
	void OnClanRankEditSuccess(int nRankUID);//APBGame.cHostingGC2WS.OnClanRankEditSuccess
	void Send_GC2WS_ASK_CLAN_INFORMATION_EDIT(struct FString sInformation);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_INFORMATION_EDIT
	void ClanGetInformation();//APBGame.cHostingGC2WS.ClanGetInformation
	void Send_GC2WS_ASK_PLAYED();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_PLAYED
	void OnClanGetBioFailed(int nError);//APBGame.cHostingGC2WS.OnClanGetBioFailed
	void OnClanMemberSetPublicNoteFailed(int nError,int nCharacterUID);//APBGame.cHostingGC2WS.OnClanMemberSetPublicNoteFailed
	void OnClanMemberGetStatsFailed(int nError);//APBGame.cHostingGC2WS.OnClanMemberGetStatsFailed
	void Send_GC2WS_ASK_GROUP_CONFIG(bool bPublic,bool bInvite);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_GROUP_CONFIG
	void OnReceiveClanInfo();//APBGame.cHostingGC2WS.OnReceiveClanInfo
	void OnMailReadSuccess(int nMailUID,int nRemainingTime,int nTotal,int nUnread,struct FString sBody);//APBGame.cHostingGC2WS.OnMailReadSuccess
	void OnIgnoreListRemoveSuccess(int nCharacterUID);//APBGame.cHostingGC2WS.OnIgnoreListRemoveSuccess
	void OnClanMemberGetProfileFailed(int nError,int nCharacterUID);//APBGame.cHostingGC2WS.OnClanMemberGetProfileFailed
	void OnReceiveFriendListStatus(int nCharacterUID,int nStatus);//APBGame.cHostingGC2WS.OnReceiveFriendListStatus
	void Send_GC2WS_ASK_FRIENDLIST_REMOVE(int nCharacterUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_FRIENDLIST_REMOVE
	void GroupList(int nDistrictUID,int nInstanceNo);//APBGame.cHostingGC2WS.GroupList
	void OnMarketplaceAuctionCancelFailed(unsigned char eAuctionType,int nError,int nAuctionUID);//APBGame.cHostingGC2WS.OnMarketplaceAuctionCancelFailed
	void Send_GC2WS_ASK_CLAN_MEMBER_STATE();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_MEMBER_STATE
	void OnDistrictReserveCancelFailed(int nError);//APBGame.cHostingGC2WS.OnDistrictReserveCancelFailed
	void Send_GC2WS_ASK_CLAN_SYMBOL_EDIT(TArray<unsigned char> aSymbol);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_SYMBOL_EDIT
	void OnMarketplaceThumbnailFailed(unsigned char eAuctionType,unsigned char eListType,int nClientPage,int nPageRequestSequence,int nError);//APBGame.cHostingGC2WS.OnMarketplaceThumbnailFailed
	void OnClanCreateSuccess();//APBGame.cHostingGC2WS.OnClanCreateSuccess
	void Send_GC2WS_ASK_DISTRICT_RESERVE_CANCEL();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_DISTRICT_RESERVE_CANCEL
	void Send_GC2WS_ASK_IGNORELIST_REMOVE(int nCharacterUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_IGNORELIST_REMOVE
	void Send_GC2WS_ASK_NAME_QUERY(unsigned char eNameQuery,int nCharacterUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_NAME_QUERY
	void OnIgnoreListRemoveFailed(int nError,int nCharacterUID);//APBGame.cHostingGC2WS.OnIgnoreListRemoveFailed
	struct FString LocalizeText(struct FString sKey);//APBGame.cHostingGC2WS.LocalizeText
	void OnReceiveGroupInfo(bool bPublic,bool bInvite);//APBGame.cHostingGC2WS.OnReceiveGroupInfo
	void OnClanLeaderSuccess(int nCharacterUID);//APBGame.cHostingGC2WS.OnClanLeaderSuccess
	void OnMarketplaceGetSellerListSuccess(unsigned char eAuctionType,int nTotalNames);//APBGame.cHostingGC2WS.OnMarketplaceGetSellerListSuccess
	void OnSendGroupConfigFailed(int nError);//APBGame.cHostingGC2WS.OnSendGroupConfigFailed
	void OnClanLeaveSuccess();//APBGame.cHostingGC2WS.OnClanLeaveSuccess
	void SendClanInvite(struct FString sCharacterName);//APBGame.cHostingGC2WS.SendClanInvite
	void OnReceiveGroupStatus(int nCharacterUID,int nStatus);//APBGame.cHostingGC2WS.OnReceiveGroupStatus
	void OnClanGetInformationSuccess(struct FString sInformation);//APBGame.cHostingGC2WS.OnClanGetInformationSuccess
	void WorldQueueCancel();//APBGame.cHostingGC2WS.WorldQueueCancel
	void OnMailGetMailListSuccess(int nTotal,int nUnread);//APBGame.cHostingGC2WS.OnMailGetMailListSuccess
	void DeclineClanInvite(int nReturnCode);//APBGame.cHostingGC2WS.DeclineClanInvite
	void OnDistrictReserveFailed(int nError,int nDistrictUID,int nInstanceNo,bool bGroup,bool bQueued);//APBGame.cHostingGC2WS.OnDistrictReserveFailed
	void Send_GC2WS_ASK_GROUP_LEAVE();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_GROUP_LEAVE
	void ClanRemove(int nCharacterUID);//APBGame.cHostingGC2WS.ClanRemove
	void MailDelete(int nMailUID);//APBGame.cHostingGC2WS.MailDelete
	void IgnoreListRemove(int nCharacterUID);//APBGame.cHostingGC2WS.IgnoreListRemove
	void Send_GC2WS_ASK_CLAN_SYMBOL();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_SYMBOL
	void Send_GC2WS_ASK_GROUP_STATE();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_GROUP_STATE
	void MarketplaceGetMyAuctionList(unsigned char eAuctionType,int nRowsPerServerPage,int nServerPage,unsigned char eSort);//APBGame.cHostingGC2WS.MarketplaceGetMyAuctionList
	void OnLoadConfigSuccess(int nIndex);//APBGame.cHostingGC2WS.OnLoadConfigSuccess
	void OnGroupInfoSuccess(struct FString sCharacterName);//APBGame.cHostingGC2WS.OnGroupInfoSuccess
	void Send_GC2WS_ASK_MAIL_LIST(int nPage,unsigned char eSort);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_MAIL_LIST
	void OnGMCommand(int nReturnCode);//APBGame.cHostingGC2WS.OnGMCommand
	void OnWorldEnterSuccess(int nCharacterUID,int nServerTime,bool bTutorialComplete,bool bLookingForGroup,bool bAvailableForMetagrouping,int nThreatLevel);//APBGame.cHostingGC2WS.OnWorldEnterSuccess
	void OnClanGetSymbolSuccess();//APBGame.cHostingGC2WS.OnClanGetSymbolSuccess
	void OnReceiveClanStatus(int nCharacterUID,int nStatus);//APBGame.cHostingGC2WS.OnReceiveClanStatus
	void SendGroupConfig(bool bPublic,bool bInvite);//APBGame.cHostingGC2WS.SendGroupConfig
	void OnClanMemberSetBioFailed(int nError);//APBGame.cHostingGC2WS.OnClanMemberSetBioFailed
	void OnGroupStateSuccess(int nMembers);//APBGame.cHostingGC2WS.OnGroupStateSuccess
	void Send_GC2WS_ASK_CLAN_MEMBER_NOTE_EDIT(unsigned char nType,int nCharacterUID,struct FString sNote);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_MEMBER_NOTE_EDIT
	void OnClanSetInformationFailed(int nError);//APBGame.cHostingGC2WS.OnClanSetInformationFailed
	void OnConnectSuccess();//APBGame.cHostingGC2WS.OnConnectSuccess
	void Send_GC2WS_ASK_SSO_TOKEN(int nStorePage,int nCategoryID,int nSubCategoryID,int nProductID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_SSO_TOKEN
	void Send_GC2WS_CHAT_GROUP(struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.Send_GC2WS_CHAT_GROUP
	void Send_GC2WS_CHAT_DISTRICT(struct FString sMessage,unsigned char eChatTag);//APBGame.cHostingGC2WS.Send_GC2WS_CHAT_DISTRICT
	void OnReceiveClanMotd(struct FString sMotd);//APBGame.cHostingGC2WS.OnReceiveClanMotd
	void OnClanGetBioSuccess(struct FString sBio);//APBGame.cHostingGC2WS.OnClanGetBioSuccess
	void Send_GC2WS_ANS_CLAN_INVITE(int nReturnCode);//APBGame.cHostingGC2WS.Send_GC2WS_ANS_CLAN_INVITE
	void OnDistrictExitSuccess();//APBGame.cHostingGC2WS.OnDistrictExitSuccess
	void Send_GC2WS_ASK_CONFIGFILE_SAVE(int nIndex);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CONFIGFILE_SAVE
	void OnGroupListSuccess(int nDistrictUID,int nInstanceNo);//APBGame.cHostingGC2WS.OnGroupListSuccess
	void MailGetItem(int nMailUID);//APBGame.cHostingGC2WS.MailGetItem
	void SendChatState(unsigned char eState,unsigned char eChatTag,struct FString sMessage);//APBGame.cHostingGC2WS.SendChatState
	void Send_GC2WS_ASK_GROUP_REMOVE(int nCharacterUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_GROUP_REMOVE
	void OnSendGroupJoinFailed(int nError,struct FString sCharacterName);//APBGame.cHostingGC2WS.OnSendGroupJoinFailed
	void OnClanSetSymbolSuccess();//APBGame.cHostingGC2WS.OnClanSetSymbolSuccess
	void Send_GC2WS_ASK_CLAN_THEME();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_THEME
	void ClanMemberSetPrivateNote(int nCharacterUID,struct FString sPrivateNote);//APBGame.cHostingGC2WS.ClanMemberSetPrivateNote
	void OnReceiveFriendListInfo();//APBGame.cHostingGC2WS.OnReceiveFriendListInfo
	void OnNameQuerySuccess(unsigned char eNameQuery,int nCharacterUID,struct FString sCharacterName);//APBGame.cHostingGC2WS.OnNameQuerySuccess
	void OnSendChatWhisperFailed(int nError,unsigned char nWhisperUID);//APBGame.cHostingGC2WS.OnSendChatWhisperFailed
	void OnWorldQueueCancelFailed(int nError);//APBGame.cHostingGC2WS.OnWorldQueueCancelFailed
	void OnMailGetMailListFailed(int nError);//APBGame.cHostingGC2WS.OnMailGetMailListFailed
	void DeclineGroupInvite(int nReturnCode);//APBGame.cHostingGC2WS.DeclineGroupInvite
	void OnMarketplaceThumbnail(unsigned char eAuctionType,unsigned char eListType,int nClientPage,int nPageRequestSequence,int nAuctionUID,struct FString sItemXml);//APBGame.cHostingGC2WS.OnMarketplaceThumbnail
	void OnFriendListRemoveSuccess(int nCharacterUID);//APBGame.cHostingGC2WS.OnFriendListRemoveSuccess
	void OnClanSetThemeSuccess();//APBGame.cHostingGC2WS.OnClanSetThemeSuccess
	void Send_GC2WS_ASK_MARKETPLACE_SELLER_LIST(unsigned char eAuctionType,struct FString sSearch);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_MARKETPLACE_SELLER_LIST
	void OnSendGroupJoinSuccess(struct FString sCharacterName);//APBGame.cHostingGC2WS.OnSendGroupJoinSuccess
	void Send_GC2WS_LOGOUT();//APBGame.cHostingGC2WS.Send_GC2WS_LOGOUT
	void OnFriendListGetStateSuccess(int nMembers);//APBGame.cHostingGC2WS.OnFriendListGetStateSuccess
	void Send_GC2WS_ASK_CLAN_REMOVE(int nCharacterUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_REMOVE
	void MarketplaceAuctionCancel(unsigned char eAuctionType,int nAuctionUID);//APBGame.cHostingGC2WS.MarketplaceAuctionCancel
	void OnClanMemberSetPublicNoteSuccess(int nCharacterUID);//APBGame.cHostingGC2WS.OnClanMemberSetPublicNoteSuccess
	void Send_GC2WS_ASK_MARKETPLACE_AUCTION_CANCEL(unsigned char eAuctionType,int nAuctionUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_MARKETPLACE_AUCTION_CANCEL
	void ClanSetInformation(struct FString sInformation);//APBGame.cHostingGC2WS.ClanSetInformation
	void OnClanGetInformationFailed(int nError);//APBGame.cHostingGC2WS.OnClanGetInformationFailed
	void Send_GC2WS_ASK_CLAN_RANK_ASSIGN(int nCharacterUID,int nRankUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_RANK_ASSIGN
	void DistrictExit();//APBGame.cHostingGC2WS.DistrictExit
	void OnMarketplaceGetAuctionListFailed(unsigned char eAuctionType,int nError);//APBGame.cHostingGC2WS.OnMarketplaceGetAuctionListFailed
	void Send_GC2WS_ASK_CONFIGFILE_LOAD(int nIndex);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CONFIGFILE_LOAD
	void ClanGetSymbol();//APBGame.cHostingGC2WS.ClanGetSymbol
	void OnPopulation(int nReturnCode,int nDistrictUID,int nInstanceNo,int nWorldPopulation,int nWorldEnforcers,int nWorldCriminals,int nInstancePopulation,int nInstanceEnforcers,int nInstanceCriminals);//APBGame.cHostingGC2WS.OnPopulation
	void OnMailGetItemSuccess(int nMailUID,struct FString sItem);//APBGame.cHostingGC2WS.OnMailGetItemSuccess
	void Send_GC2WS_ASK_MARKETPLACE_AUCTION_LIST(unsigned char eAuctionType,int nRowsPerServerPage,int nServerPage,unsigned char eSort,unsigned char eSearch,struct FString sSearch,int nCategory,int nSubcategory,int nRatingOrCashStart,int nRatingOrCashEnd,bool bSystemAuctions,bool bCharacterRestricted);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_MARKETPLACE_AUCTION_LIST
	void OnClanCreateFailed(int nError);//APBGame.cHostingGC2WS.OnClanCreateFailed
	void OnMarketplaceAuctionInfo(unsigned char eAuctionType,int nAuctionUID,int nInfoType,int nItemType,struct FString sItemName,int nAmount);//APBGame.cHostingGC2WS.OnMarketplaceAuctionInfo
	void GroupState();//APBGame.cHostingGC2WS.GroupState
	void OnFinderCharacterGetInfoSuccess(int nCharacterUID,struct FString sCharacterName,bool bLookingForGroup,int nGroupStatus,int nGroupPublic,int nGroupInvite,int nDistrictUID,int nInstanceNo,int nDistrictStatus,unsigned char eFaction,int nInstanceThreat);//APBGame.cHostingGC2WS.OnFinderCharacterGetInfoSuccess
	void OnSaveConfigSuccess(int nIndex);//APBGame.cHostingGC2WS.OnSaveConfigSuccess
	void AcceptGroupInvite();//APBGame.cHostingGC2WS.AcceptGroupInvite
	void OnMailInfo(int nInfoType,int nTotal,int nUnread,int nExpired);//APBGame.cHostingGC2WS.OnMailInfo
	void DistrictReserveCancel();//APBGame.cHostingGC2WS.DistrictReserveCancel
	void ClanMemberGetProfile(int nCharacterUID);//APBGame.cHostingGC2WS.ClanMemberGetProfile
	void ClanRankEdit(int nRankUID,struct FString sRankName,int nPermission);//APBGame.cHostingGC2WS.ClanRankEdit
	void Send_GC2WS_ANS_GROUP_INVITE(int nReturnCode);//APBGame.cHostingGC2WS.Send_GC2WS_ANS_GROUP_INVITE
	void OnSendChatWhisperSuccess(unsigned char nWhisperUID,int nCharacterUID);//APBGame.cHostingGC2WS.OnSendChatWhisperSuccess
	void Send_GC2WS_ASK_FRIENDLIST_STATE();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_FRIENDLIST_STATE
	void MarketplaceGetMyBidList(unsigned char eAuctionType,int nRowsPerServerPage,int nServerPage,unsigned char eSort);//APBGame.cHostingGC2WS.MarketplaceGetMyBidList
	void Send_GC2WS_ASK_CLAN_INFORMATION();//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_INFORMATION
	void AcceptClanInvite();//APBGame.cHostingGC2WS.AcceptClanInvite
	void MarketplaceGetSellerList(unsigned char eAuctionType,struct FString sSearch);//APBGame.cHostingGC2WS.MarketplaceGetSellerList
	void OnClanRankDeleteFailed(int nError,int nRankUID);//APBGame.cHostingGC2WS.OnClanRankDeleteFailed
	void OnClanSetMotdFailed(int nError);//APBGame.cHostingGC2WS.OnClanSetMotdFailed
	void ClanLeave();//APBGame.cHostingGC2WS.ClanLeave
	void OnDistrictReserveCancelSuccess();//APBGame.cHostingGC2WS.OnDistrictReserveCancelSuccess
	void Send_GC2WS_ASK_CLAN_MEMBER_PROFILE(int nCharacterUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_MEMBER_PROFILE
	void OnSendGroupInviteFailed(int nError,struct FString sCharacterName);//APBGame.cHostingGC2WS.OnSendGroupInviteFailed
	void OnSendClanInviteFailed(int nError,struct FString sCharacterName);//APBGame.cHostingGC2WS.OnSendClanInviteFailed
	void Send_GC2WS_ASK_CLAN_CREATE(struct FString sClanName);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_CLAN_CREATE
	void OnClanRankAssignFailed(int nError,int nCharacterUID,int nRankUID);//APBGame.cHostingGC2WS.OnClanRankAssignFailed
	void OnReceiveClanRemove(int nCharacterUID);//APBGame.cHostingGC2WS.OnReceiveClanRemove
	void Disconnect(bool bNotify);//APBGame.cHostingGC2WS.Disconnect
	void ClanRankAssign(int nCharacterUID,int nRankUID);//APBGame.cHostingGC2WS.ClanRankAssign
	void OnClanRemoveFailed(int nError,int nCharacterUID);//APBGame.cHostingGC2WS.OnClanRemoveFailed
	void OnClanRankDeleteSuccess(int nRankUID);//APBGame.cHostingGC2WS.OnClanRankDeleteSuccess
	void OnDistrictEnterSuccess();//APBGame.cHostingGC2WS.OnDistrictEnterSuccess
	void ClanMemberGetState();//APBGame.cHostingGC2WS.ClanMemberGetState
	void OnClanLeaveFailed(int nError);//APBGame.cHostingGC2WS.OnClanLeaveFailed
	void ClanSetTheme(TArray<unsigned char> aTheme);//APBGame.cHostingGC2WS.ClanSetTheme
	void GroupLeave();//APBGame.cHostingGC2WS.GroupLeave
	void OnReceiveClanRankDelete(int nRankUID);//APBGame.cHostingGC2WS.OnReceiveClanRankDelete
	void OnClanMemberSetPrivateNoteSuccess(int nCharacterUID);//APBGame.cHostingGC2WS.OnClanMemberSetPrivateNoteSuccess
	void ClanCreate(struct FString sClanName);//APBGame.cHostingGC2WS.ClanCreate
	void FinderCharacterGetInfo(struct FString sCharacterName);//APBGame.cHostingGC2WS.FinderCharacterGetInfo
	void OnConnectFailed();//APBGame.cHostingGC2WS.OnConnectFailed
	void Send_GC2WS_ASK_MAIL_ITEM(int nMailUID);//APBGame.cHostingGC2WS.Send_GC2WS_ASK_MAIL_ITEM
	void MarketplaceAuctionGetItem(unsigned char eAuctionType,int nAuctionUID);//APBGame.cHostingGC2WS.MarketplaceAuctionGetItem
	void OnReceiveIgnoreListInfo();//APBGame.cHostingGC2WS.OnReceiveIgnoreListInfo
	void OnReceiveGroupRemove(int nCharacterUID);//APBGame.cHostingGC2WS.OnReceiveGroupRemove
};
UClass* UcHostingGC2WS::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cHostingDisplayPointServer[0x10399340]
class UcHostingDisplayPointServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingDisplayPointServer");
		return pClassPointer;
	};

public:
	void Cleanup();//APBGame.cHostingDisplayPointServer.Cleanup
	void OnSynchronise(struct FGuid nDisplayPointUID,unsigned char eInteractionType);//APBGame.cHostingDisplayPointServer.OnSynchronise
	void Init(class UcHostingServer* Server);//APBGame.cHostingDisplayPointServer.Init
};
UClass* UcHostingDisplayPointServer::pClassPointer = NULL;

//0x0000C4 (0x000104 - 0x000040)
//cHostingDistrict[0x10399210]
class UcHostingDistrict : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	TArray<struct FtHostingDistrictInfo>               m_aDistricts;                                     		// 0x000044 (0x000C)              
	TArray<struct FtHostingInstanceInfo>               m_aInstances;                                     		// 0x000050 (0x000C)              
	unsigned long                                      m_bDistrictReserved : 1;                          		// 0x00005C (0x0004) [0x00000001] 
	unsigned long                                      m_bReservingDistrict : 1;                         		// 0x00005C (0x0004) [0x00000002] 
	int                                                m_nCurrentDistrictUID;                            		// 0x000060 (0x0004)              
	int                                                m_nCurrentDistrictInstance;                       		// 0x000064 (0x0004)              
	struct FScriptDelegate                             ___OnGetInstanceListSuccess__Delegate;            		// 0x000068 (0x000C)              
	struct FScriptDelegate                             ___OnGetInstanceListFailed__Delegate;             		// 0x000074 (0x000C)              
	struct FScriptDelegate                             __OnDistrictInfoChanged_SocialUIGroup__Delegate;  		// 0x000080 (0x000C)              
	struct FScriptDelegate                             __OnDistrictInfoChanged_SocialUIFriends__Delegate;		// 0x00008C (0x000C)              
	struct FScriptDelegate                             __OnDistrictInfoChanged_SocialUITeam__Delegate;   		// 0x000098 (0x000C)              
	struct FScriptDelegate                             __OnDistrictInfoChanged_TeamMgmtUI__Delegate;     		// 0x0000A4 (0x000C)              
	struct FScriptDelegate                             __OnDistrictInfoChanged_CityMapUI__Delegate;      		// 0x0000B0 (0x000C)              
	struct FScriptDelegate                             __OnDistrictInfoChanged_LeaguesUI__Delegate;      		// 0x0000BC (0x000C)              
	struct FScriptDelegate                             __OnDistrictEnterUI__Delegate;                    		// 0x0000C8 (0x000C)              
	struct FScriptDelegate                             ___OnDistrictReserveSuccess__Delegate;            		// 0x0000D4 (0x000C)              
	struct FScriptDelegate                             ___OnDistrictReserveFailed__Delegate;             		// 0x0000E0 (0x000C)              
	struct FScriptDelegate                             ___OnDistrictEnterSuccess__Delegate;              		// 0x0000EC (0x000C)              
	struct FScriptDelegate                             ___OnDistrictEnterFailed__Delegate;               		// 0x0000F8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingDistrict");
		return pClassPointer;
	};

public:
	void _OnGetInstanceListFailed(int nError);//APBGame.cHostingDistrict._OnGetInstanceListFailed
	void DistrictExit();//APBGame.cHostingDistrict.DistrictExit
	void OnDistrictInfoChanged_SocialUIFriends();//APBGame.cHostingDistrict.OnDistrictInfoChanged_SocialUIFriends
	void _OnDistrictEnterSuccess();//APBGame.cHostingDistrict._OnDistrictEnterSuccess
	void OnDistrictExitFailed(int nError);//APBGame.cHostingDistrict.OnDistrictExitFailed
	void OnReceiveDistrictList();//APBGame.cHostingDistrict.OnReceiveDistrictList
	void OnDistrictExitSuccess();//APBGame.cHostingDistrict.OnDistrictExitSuccess
	void OnGetInstanceListFailed(int nError);//APBGame.cHostingDistrict.OnGetInstanceListFailed
	int GetDistrictIndex(int nDistrictUID);//APBGame.cHostingDistrict.GetDistrictIndex
	void OnDistrictInfoChanged_TeamMgmtUI();//APBGame.cHostingDistrict.OnDistrictInfoChanged_TeamMgmtUI
	void OnDistrictInfoChanged_SocialUIGroup();//APBGame.cHostingDistrict.OnDistrictInfoChanged_SocialUIGroup
	void DisplayInstanceList();//APBGame.cHostingDistrict.DisplayInstanceList
	void OnDistrictReserveFailed(int nError,int nDistrictUID,int nInstanceNo,bool bGroup,bool bQueued);//APBGame.cHostingDistrict.OnDistrictReserveFailed
	void DisplayDistrictList();//APBGame.cHostingDistrict.DisplayDistrictList
	void _OnDistrictReserveSuccess();//APBGame.cHostingDistrict._OnDistrictReserveSuccess
	void OnDistrictEnterUI(int nDistrictUID,int nInstanceNo);//APBGame.cHostingDistrict.OnDistrictEnterUI
	void DistrictQueueCancel(bool bGroup);//APBGame.cHostingDistrict.DistrictQueueCancel
	void DistrictEnter();//APBGame.cHostingDistrict.DistrictEnter
	void DistrictReserveAccept();//APBGame.cHostingDistrict.DistrictReserveAccept
	void OnDistrictEnterSuccess(int nDistrictUID,int nInstanceNo);//APBGame.cHostingDistrict.OnDistrictEnterSuccess
	void GetInstanceList();//APBGame.cHostingDistrict.GetInstanceList
	void OnDistrictInfoChanged_SocialUITeam();//APBGame.cHostingDistrict.OnDistrictInfoChanged_SocialUITeam
	void _OnDistrictEnterFailed(int nError);//APBGame.cHostingDistrict._OnDistrictEnterFailed
	void _OnDistrictReserveFailed(int nError,int nDistrictUID,int nInstanceNo,bool bGroup);//APBGame.cHostingDistrict._OnDistrictReserveFailed
	void OnDistrictEnterFailed(int nError);//APBGame.cHostingDistrict.OnDistrictEnterFailed
	void OnDistrictQueueStatus(int nDistrictUID,int nInstanceNo,int nPosition,int nSize,int nCharacterUID);//APBGame.cHostingDistrict.OnDistrictQueueStatus
	void Init(class UcHostingClient* Client);//APBGame.cHostingDistrict.Init
	void OnDistrictInfoChanged_CityMapUI();//APBGame.cHostingDistrict.OnDistrictInfoChanged_CityMapUI
	void Cleanup();//APBGame.cHostingDistrict.Cleanup
	int NumInstances(int nDistrictUID);//APBGame.cHostingDistrict.NumInstances
	void DistrictReserveCancel();//APBGame.cHostingDistrict.DistrictReserveCancel
	void OnDistrictReserveSuccess(int nDistrictUID,int nInstanceNo,bool bGroup,bool bQueued);//APBGame.cHostingDistrict.OnDistrictReserveSuccess
	void OnDistrictReserveCancelSuccess();//APBGame.cHostingDistrict.OnDistrictReserveCancelSuccess
	void OnDistrictQueueCancelFailed(int nError,bool bGroup);//APBGame.cHostingDistrict.OnDistrictQueueCancelFailed
	void DistrictReserve(int nDistrictUID,int nInstanceNo,int nCharacterUID,bool bGroup);//APBGame.cHostingDistrict.DistrictReserve
	void OnGetInstanceListSuccess();//APBGame.cHostingDistrict.OnGetInstanceListSuccess
	void _OnGetInstanceListSuccess();//APBGame.cHostingDistrict._OnGetInstanceListSuccess
	void OnDistrictQueueCancelSuccess(bool bGroup);//APBGame.cHostingDistrict.OnDistrictQueueCancelSuccess
	void OnDistrictInfoChanged_LeaguesUI();//APBGame.cHostingDistrict.OnDistrictInfoChanged_LeaguesUI
	void OnDistrictReserveCancelFailed(int nError);//APBGame.cHostingDistrict.OnDistrictReserveCancelFailed
};
UClass* UcHostingDistrict::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//cHostingDistrictServer[0x103990E0]
class UcHostingDistrictServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x000040 (0x0004)              
	float                                              m_fCleanupDistrictEnterListElapsedSeconds;        		// 0x000044 (0x0004)              
	float                                              m_fCleanupMissionSaveTrackings;                   		// 0x000048 (0x0004)              
	DWORD                                              m_pDistrictEnters;                                		// 0x00004C (0x0004)              
	int                                                m_nQueueSize;                                     		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingDistrictServer");
		return pClassPointer;
	};

public:
	void OnDistrictQueueStatus(int nQueueSize);//APBGame.cHostingDistrictServer.OnDistrictQueueStatus
	void Init(class UcHostingServer* Server);//APBGame.cHostingDistrictServer.Init
	void OnBanPlayerSuccess(int nAccountUID,int nBanType,int nBanDays);//APBGame.cHostingDistrictServer.OnBanPlayerSuccess
	void InitNative();//APBGame.cHostingDistrictServer.InitNative
	void OnBanPlayerFailed(int nReturnCode,int nAccountUID);//APBGame.cHostingDistrictServer.OnBanPlayerFailed
	void CleanupNative();//APBGame.cHostingDistrictServer.CleanupNative
	void Cleanup();//APBGame.cHostingDistrictServer.Cleanup
	void OnReceiveDistrictExit(int nCharacterUID);//APBGame.cHostingDistrictServer.OnReceiveDistrictExit
};
UClass* UcHostingDistrictServer::pClassPointer = NULL;

//0x00001C (0x00005C - 0x000040)
//cHostingFinder[0x10398FB0]
class UcHostingFinder : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	struct FScriptDelegate                             __UI_CharacterFinderInfoSuccess__Delegate;        		// 0x000044 (0x000C)              
	struct FScriptDelegate                             __UI_CharacterFinderInfoFailure__Delegate;        		// 0x000050 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingFinder");
		return pClassPointer;
	};

public:
	void OnCharacterGetInfoSuccess(int nCharacterUID,struct FString sCharacterName,bool bLookingForGroup,int nGroupStatus,int nGroupPublic,int nGroupInvite,int nDistrictUID,int nInstanceNo,int nDistrictStatus,unsigned char eFaction,int nInstanceThreat);//APBGame.cHostingFinder.OnCharacterGetInfoSuccess
	void CharacterGetInfo(struct FString sCharacterName);//APBGame.cHostingFinder.CharacterGetInfo
	void OnCharacterGetInfoFailed(int nError,struct FString sCharacterName);//APBGame.cHostingFinder.OnCharacterGetInfoFailed
	void Init(class UcHostingClient* Client);//APBGame.cHostingFinder.Init
	void UI_CharacterFinderInfoSuccess(int nCharacterUID,int nDistrictUID,int nInstanceNo,unsigned char eFaction,struct FString sCharacterName,int nInstanceThreat);//APBGame.cHostingFinder.UI_CharacterFinderInfoSuccess
	void Cleanup();//APBGame.cHostingFinder.Cleanup
	void UI_CharacterFinderInfoFailure(int nError,struct FString sCharacterName);//APBGame.cHostingFinder.UI_CharacterFinderInfoFailure
};
UClass* UcHostingFinder::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//cHostingFriendList[0x10398E80]
class UcHostingFriendList : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	TArray<struct FtHostingFriendListMember>           m_aMembers;                                       		// 0x000044 (0x000C)              
	struct FScriptDelegate                             __OnMembersChanged__Delegate;                     		// 0x000050 (0x000C)              
	struct FScriptDelegate                             __OnAddResult__Delegate;                          		// 0x00005C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingFriendList");
		return pClassPointer;
	};

public:
	void OnAddSuccess(int nCharacterUID,struct FString sCharacterName,int nStatus,bool bLookingForGroup,int nGroupStatus,int nGroupPublic,int nGroupInvite,int nDistrictUID,int nInstanceNo,int nDistrictStatus,unsigned char eFaction);//APBGame.cHostingFriendList.OnAddSuccess
	int GetMemberIndex(int nCharacterUID);//APBGame.cHostingFriendList.GetMemberIndex
	void OnRemoveFailed(int nError,int nCharacterUID);//APBGame.cHostingFriendList.OnRemoveFailed
	void OnAddFailed(int nError,struct FString sCharacterName);//APBGame.cHostingFriendList.OnAddFailed
	void OnReceiveStatus(int nCharacterUID,int nStatus);//APBGame.cHostingFriendList.OnReceiveStatus
	void DisplayMembers();//APBGame.cHostingFriendList.DisplayMembers
	void OnMembersGetStateFailed(int nError);//APBGame.cHostingFriendList.OnMembersGetStateFailed
	void OnMembersGetStateSuccess(int nMembers);//APBGame.cHostingFriendList.OnMembersGetStateSuccess
	void OnMembersChanged();//APBGame.cHostingFriendList.OnMembersChanged
	void Cleanup();//APBGame.cHostingFriendList.Cleanup
	void MembersGetState();//APBGame.cHostingFriendList.MembersGetState
	struct FString LocalizeText(struct FString sKey);//APBGame.cHostingFriendList.LocalizeText
	void OnAddResult(int nError);//APBGame.cHostingFriendList.OnAddResult
	void DisplayInfo();//APBGame.cHostingFriendList.DisplayInfo
	void OnReceiveInfo();//APBGame.cHostingFriendList.OnReceiveInfo
	void Add(struct FString sCharacterName);//APBGame.cHostingFriendList.Add
	void Remove(int nMemberIndex);//APBGame.cHostingFriendList.Remove
	void Init(class UcHostingClient* Client);//APBGame.cHostingFriendList.Init
	void OnRemoveSuccess(int nCharacterUID);//APBGame.cHostingFriendList.OnRemoveSuccess
};
UClass* UcHostingFriendList::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cHostingGC2DS[0x10398D50]
class UcHostingGC2DS : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingGC2DS");
		return pClassPointer;
	};

public:
	void OnDistrictEnterSuccess(int nDistrictUID,int nInstanceNo);//APBGame.cHostingGC2DS.OnDistrictEnterSuccess
	struct FString LocalizeText(struct FString sKey);//APBGame.cHostingGC2DS.LocalizeText
	bool IsConnecting();//APBGame.cHostingGC2DS.IsConnecting
	void OnDisconnect();//APBGame.cHostingGC2DS.OnDisconnect
	void Disconnect();//APBGame.cHostingGC2DS.Disconnect
	void Init(class UcHostingClient* Client);//APBGame.cHostingGC2DS.Init
	void OnDistrictEnterFailed(int nError);//APBGame.cHostingGC2DS.OnDistrictEnterFailed
	void OnConnectFailed(int nError);//APBGame.cHostingGC2DS.OnConnectFailed
	void DistrictEnter();//APBGame.cHostingGC2DS.DistrictEnter
	bool IsConnected();//APBGame.cHostingGC2DS.IsConnected
	void Connect(int nIPAddress,int nPort);//APBGame.cHostingGC2DS.Connect
	void OnDistrictShutdownNotify(int nMinutesLeft);//APBGame.cHostingGC2DS.OnDistrictShutdownNotify
	void OnConnectSuccess();//APBGame.cHostingGC2DS.OnConnectSuccess
};
UClass* UcHostingGC2DS::pClassPointer = NULL;

//0x0000D0 (0x000110 - 0x000040)
//cHostingGroup[0x10398C20]
class UcHostingGroup : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	int                                                m_nLeaderUID;                                     		// 0x000044 (0x0004)              
	TArray<struct FtHostingGroupMember>                m_aMembers;                                       		// 0x000048 (0x000C)              
	unsigned long                                      m_bShowGroupListInChat : 1;                       		// 0x000054 (0x0004) [0x00000001] 
	unsigned long                                      m_bShowGroupInfoInChat : 1;                       		// 0x000054 (0x0004) [0x00000002] 
	unsigned long                                      m_bPublic : 1;                                    		// 0x000054 (0x0004) [0x00000004] 
	unsigned long                                      m_bInvite : 1;                                    		// 0x000054 (0x0004) [0x00000008] 
	unsigned long                                      m_bLookingForGroup : 1;                           		// 0x000054 (0x0004) [0x00000010] 
	unsigned long                                      m_bAvailableForMetagrouping : 1;                  		// 0x000054 (0x0004) [0x00000020] 
	TArray<struct FtHostingGroupInfo>                  m_aGroupList;                                     		// 0x000058 (0x000C)              
	int                                                m_nGroupInfoLeaderUID;                            		// 0x000064 (0x0004)              
	TArray<struct FtHostingGroupMember>                m_aGroupInfoMembers;                              		// 0x000068 (0x000C)              
	struct FScriptDelegate                             __OnMembersChanged_Soc__Delegate;                 		// 0x000074 (0x000C)              
	struct FScriptDelegate                             __OnMembersChanged_DistrictSel__Delegate;         		// 0x000080 (0x000C)              
	struct FScriptDelegate                             __OnInviteReceived__Delegate;                     		// 0x00008C (0x000C)              
	struct FScriptDelegate                             __OnInviteSent_UI__Delegate;                      		// 0x000098 (0x000C)              
	struct FScriptDelegate                             __OnInviteSendFailed_UI__Delegate;                		// 0x0000A4 (0x000C)              
	struct FScriptDelegate                             __OnJoinSuccess_UI__Delegate;                     		// 0x0000B0 (0x000C)              
	struct FScriptDelegate                             __OnJoinFailed_UI__Delegate;                      		// 0x0000BC (0x000C)              
	struct FScriptDelegate                             __OnGroupListSuccess_UI__Delegate;                		// 0x0000C8 (0x000C)              
	struct FScriptDelegate                             __OnGroupListFailed_UI__Delegate;                 		// 0x0000D4 (0x000C)              
	struct FScriptDelegate                             __OnGroupInfoSuccess_UI__Delegate;                		// 0x0000E0 (0x000C)              
	struct FScriptDelegate                             __OnGroupInfoFailed_UI__Delegate;                 		// 0x0000EC (0x000C)              
	struct FScriptDelegate                             __OnSetConfigSuccess_UI__Delegate;                		// 0x0000F8 (0x000C)              
	struct FScriptDelegate                             __OnSetConfigFailed_UI__Delegate;                 		// 0x000104 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingGroup");
		return pClassPointer;
	};

public:
	void DisplayInfo();//APBGame.cHostingGroup.DisplayInfo
	void OnExit();//APBGame.cHostingGroup.OnExit
	void OnJoinSuccess(struct FString sCharacterName);//APBGame.cHostingGroup.OnJoinSuccess
	void DisplayMembers();//APBGame.cHostingGroup.DisplayMembers
	void OnLeaveFailed(int nError);//APBGame.cHostingGroup.OnLeaveFailed
	void OnGroupListFailed(int nError,int nDistrictUID,int nInstanceNo);//APBGame.cHostingGroup.OnGroupListFailed
	void OnReceiveInfo(bool bPublic,bool bInvite);//APBGame.cHostingGroup.OnReceiveInfo
	void SetInvite(bool bInvite);//APBGame.cHostingGroup.SetInvite
	void Init(class UcHostingClient* Client);//APBGame.cHostingGroup.Init
	void OnReceiveInvite(struct FString sCharacterName);//APBGame.cHostingGroup.OnReceiveInvite
	void OnGroupInfoSuccess_UI(struct FString sCharacterName);//APBGame.cHostingGroup.OnGroupInfoSuccess_UI
	void InitAvailableForMetagrouping(bool bAvailableForMetagrouping);//APBGame.cHostingGroup.InitAvailableForMetagrouping
	void OnStateFailed(int nError);//APBGame.cHostingGroup.OnStateFailed
	void OnGroupListSuccess_UI(int nDistrictUID,int nInstanceNo);//APBGame.cHostingGroup.OnGroupListSuccess_UI
	void OnSendInviteSuccess(struct FString sCharacterName);//APBGame.cHostingGroup.OnSendInviteSuccess
	void SetConfig(bool bPublic,bool bInvite);//APBGame.cHostingGroup.SetConfig
	struct FString LocalizeText(struct FString sKey);//APBGame.cHostingGroup.LocalizeText
	void OnGroupInfoFailed_UI(int nError,struct FString sCharacterName);//APBGame.cHostingGroup.OnGroupInfoFailed_UI
	bool GetLookingForGroup();//APBGame.cHostingGroup.GetLookingForGroup
	void SetPublic(bool bPublic);//APBGame.cHostingGroup.SetPublic
	void OnSetConfigFailed_UI(int nError);//APBGame.cHostingGroup.OnSetConfigFailed_UI
	void OnLeaveSuccess();//APBGame.cHostingGroup.OnLeaveSuccess
	void OnLeaderSuccess(int nCharacterUID);//APBGame.cHostingGroup.OnLeaderSuccess
	void BounceInvite();//APBGame.cHostingGroup.BounceInvite
	void OnReceiveRemove(int nCharacterUID);//APBGame.cHostingGroup.OnReceiveRemove
	bool HasGroup();//APBGame.cHostingGroup.HasGroup
	void GroupInfo(struct FString sCharacterName,bool bShowGroupInfoInChat);//APBGame.cHostingGroup.GroupInfo
	void OnSendInviteFailed(int nError,struct FString sCharacterName);//APBGame.cHostingGroup.OnSendInviteFailed
	void Join(struct FString sCharacterName);//APBGame.cHostingGroup.Join
	void OnReceiveLeave(int nCharacterUID);//APBGame.cHostingGroup.OnReceiveLeave
	void OnReceiveJoin();//APBGame.cHostingGroup.OnReceiveJoin
	void OnRemoveSuccess(int nCharacterUID);//APBGame.cHostingGroup.OnRemoveSuccess
	bool IsLeader();//APBGame.cHostingGroup.IsLeader
	void OnInviteSent_UI();//APBGame.cHostingGroup.OnInviteSent_UI
	void GroupList(int nDistrictUID,int nInstanceNo,bool bShowGroupListInChat);//APBGame.cHostingGroup.GroupList
	void OnGroupInfoSuccess(struct FString sCharacterName);//APBGame.cHostingGroup.OnGroupInfoSuccess
	bool GetAvailableForMetagrouping();//APBGame.cHostingGroup.GetAvailableForMetagrouping
	void SetLookingForGroup(bool bLookingForGroup);//APBGame.cHostingGroup.SetLookingForGroup
	void OnMembersChanged_Soc();//APBGame.cHostingGroup.OnMembersChanged_Soc
	int GetMemberIndex(int nCharacterUID);//APBGame.cHostingGroup.GetMemberIndex
	void OnReceiveInviteCancelled(struct FString sCharacterName);//APBGame.cHostingGroup.OnReceiveInviteCancelled
	void OnSetConfigFailed(int nError);//APBGame.cHostingGroup.OnSetConfigFailed
	void OnJoinFailed_UI(int nError,struct FString sCharacterName);//APBGame.cHostingGroup.OnJoinFailed_UI
	void OnStateSuccess(int nMembers);//APBGame.cHostingGroup.OnStateSuccess
	bool RetInvite();//APBGame.cHostingGroup.RetInvite
	void OnGroupInfoFailed(int nError,struct FString sCharacterName);//APBGame.cHostingGroup.OnGroupInfoFailed
	void Remove(int nMemberIndex);//APBGame.cHostingGroup.Remove
	void AcceptInvite();//APBGame.cHostingGroup.AcceptInvite
	void OnSetConfigSuccess_UI();//APBGame.cHostingGroup.OnSetConfigSuccess_UI
	void OnReceiveConfig(bool bPublic,bool bInvite);//APBGame.cHostingGroup.OnReceiveConfig
	void OnReceiveStatus(int nCharacterUID,int nStatus);//APBGame.cHostingGroup.OnReceiveStatus
	void State();//APBGame.cHostingGroup.State
	void OnGroupListFailed_UI(int nDistrictUID,int nInstanceNo);//APBGame.cHostingGroup.OnGroupListFailed_UI
	void SendInvite(struct FString sCharacterName);//APBGame.cHostingGroup.SendInvite
	void OnReceiveLeader(int nCharacterUID);//APBGame.cHostingGroup.OnReceiveLeader
	void OnSetConfigSuccess();//APBGame.cHostingGroup.OnSetConfigSuccess
	void OnJoinFailed(int nError,struct FString sCharacterName);//APBGame.cHostingGroup.OnJoinFailed
	void InitLookingForGroup(bool bLookingForGroup);//APBGame.cHostingGroup.InitLookingForGroup
	void DeclineInvite(int nReturnCode);//APBGame.cHostingGroup.DeclineInvite
	void Leader(int nMemberIndex);//APBGame.cHostingGroup.Leader
	void Leave();//APBGame.cHostingGroup.Leave
	void OnGroupListSuccess(int nDistrictUID,int nInstanceNo);//APBGame.cHostingGroup.OnGroupListSuccess
	void OnMembersChanged_DistrictSel();//APBGame.cHostingGroup.OnMembersChanged_DistrictSel
	void OnInviteSendFailed_UI(int nError);//APBGame.cHostingGroup.OnInviteSendFailed_UI
	void OnJoinSuccess_UI(struct FString sCharacterName);//APBGame.cHostingGroup.OnJoinSuccess_UI
	void Cleanup();//APBGame.cHostingGroup.Cleanup
	bool IsPublic();//APBGame.cHostingGroup.IsPublic
	void OnInviteReceived(struct FString sPlayerName);//APBGame.cHostingGroup.OnInviteReceived
	void OnRemoveFailed(int nError,int nCharacterUID);//APBGame.cHostingGroup.OnRemoveFailed
	void SetAvailableForMetagrouping(bool bAvailableForMetagrouping);//APBGame.cHostingGroup.SetAvailableForMetagrouping
	void OnLeaderFailed(int nError,int nCharacterUID);//APBGame.cHostingGroup.OnLeaderFailed
};
UClass* UcHostingGroup::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cHostingGroupServer[0x10398AF0]
class UcHostingGroupServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingGroupServer");
		return pClassPointer;
	};

public:
	void Cleanup();//APBGame.cHostingGroupServer.Cleanup
	void OnAskNewLeader(int nGroupUID);//APBGame.cHostingGroupServer.OnAskNewLeader
	void OnJoin(int nGroupUID,int nCharacterUID,int nLeaderUID);//APBGame.cHostingGroupServer.OnJoin
	void OnLeave(int nGroupUID,int nCharacterUID);//APBGame.cHostingGroupServer.OnLeave
	void OnLeader(int nGroupUID,int nCharacterUID,int nLeaderUID);//APBGame.cHostingGroupServer.OnLeader
	void OnWSGroupSize(int nGroupUID,int nGroupSize);//APBGame.cHostingGroupServer.OnWSGroupSize
	void GetNewLeader(int nGroupUID,TArray<int>* aCharacterUIDs);//APBGame.cHostingGroupServer.GetNewLeader
	void Init(class UcHostingServer* Server);//APBGame.cHostingGroupServer.Init
};
UClass* UcHostingGroupServer::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//cHostingIC2IS[0x103989C0]
class UcHostingIC2IS : public UObject
{
public:
	class UcHostingImageServer*                        m_HostingImageServer;                             		// 0x000040 (0x0004)              
	DWORD                                              m_pListenSocket;                                  		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingIC2IS");
		return pClassPointer;
	};

public:
	bool Listen(struct FString sHostname,int nPort);//APBGame.cHostingIC2IS.Listen
	void Init(class UcHostingImageServer* Server);//APBGame.cHostingIC2IS.Init
};
UClass* UcHostingIC2IS::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//cHostingIgnoreList[0x10398890]
class UcHostingIgnoreList : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	TArray<struct FtHostingIgnoreListMember>           m_aMembers;                                       		// 0x000044 (0x000C)              
	struct FScriptDelegate                             __OnMembersChanged__Delegate;                     		// 0x000050 (0x000C)              
	struct FScriptDelegate                             __OnAddResult__Delegate;                          		// 0x00005C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingIgnoreList");
		return pClassPointer;
	};

public:
	void Init(class UcHostingClient* Client);//APBGame.cHostingIgnoreList.Init
	void OnMembersChanged();//APBGame.cHostingIgnoreList.OnMembersChanged
	void Add(struct FString sCharacterName);//APBGame.cHostingIgnoreList.Add
	int GetMemberIndex(int nCharacterUID);//APBGame.cHostingIgnoreList.GetMemberIndex
	void DisplayInfo();//APBGame.cHostingIgnoreList.DisplayInfo
	void OnRemoveSuccess(int nCharacterUID);//APBGame.cHostingIgnoreList.OnRemoveSuccess
	void Cleanup();//APBGame.cHostingIgnoreList.Cleanup
	void DisplayMembers();//APBGame.cHostingIgnoreList.DisplayMembers
	void OnAddSuccess(int nCharacterUID,struct FString sCharacterName);//APBGame.cHostingIgnoreList.OnAddSuccess
	void OnAddFailed(int nError,struct FString sCharacterName);//APBGame.cHostingIgnoreList.OnAddFailed
	void OnReceiveInfo();//APBGame.cHostingIgnoreList.OnReceiveInfo
	void OnAddResult(int nError);//APBGame.cHostingIgnoreList.OnAddResult
	struct FString LocalizeText(struct FString sKey);//APBGame.cHostingIgnoreList.LocalizeText
	void Remove(int nMemberIndex);//APBGame.cHostingIgnoreList.Remove
	void OnRemoveFailed(int nError,int nCharacterUID);//APBGame.cHostingIgnoreList.OnRemoveFailed
};
UClass* UcHostingIgnoreList::pClassPointer = NULL;

//0x000098 (0x0000D8 - 0x000040)
//cHostingImageServer[0x10398760]
class UcHostingImageServer : public UObject
{
public:
	DWORD                                              VfTable_FCallbackEventDevice;                     		// 0x000040 (0x0004)              
	int                                                m_nServerUID;                                     		// 0x000044 (0x0004)              
	int                                                m_nVersionHigh;                                   		// 0x000048 (0x0004)              
	int                                                m_nVersionMiddle;                                 		// 0x00004C (0x0004)              
	int                                                m_nVersionLow;                                    		// 0x000050 (0x0004)              
	int                                                m_nVersionBuildNo;                                		// 0x000054 (0x0004)              
	struct FString                                     m_sComputerName;                                  		// 0x000058 (0x000C)              
	struct FString                                     m_sClientListenIP;                                		// 0x000064 (0x000C)              
	int                                                m_nClientListenPort;                              		// 0x000070 (0x0004)              
	int                                                m_nClientAcceptTimeout;                           		// 0x000074 (0x0004)              
	int                                                m_nClientRecvTimeout;                             		// 0x000078 (0x0004)              
	struct FString                                     m_sMonitorListenIP;                               		// 0x00007C (0x000C)              
	int                                                m_nMonitorListenPort;                             		// 0x000088 (0x0004)              
	int                                                m_nConfigDatabaseLoginTimeout;                    		// 0x00008C (0x0004)              
	struct FString                                     m_sConfigDatabaseIP;                              		// 0x000090 (0x000C)              
	int                                                m_nConfigDatabasePort;                            		// 0x00009C (0x0004)              
	struct FString                                     m_sConfigDatabaseUsername;                        		// 0x0000A0 (0x000C)              
	struct FString                                     m_sConfigDatabasePassword;                        		// 0x0000AC (0x000C)              
	struct FString                                     m_sConfigDatabaseDatabase;                        		// 0x0000B8 (0x000C)              
	int                                                m_nMonitoringBuffers;                             		// 0x0000C4 (0x0004)              
	float                                              m_fElapsedSeconds;                                		// 0x0000C8 (0x0004)              
	class UcHostingIC2IS*                              m_ImageClient;                                    		// 0x0000CC (0x0004)              
	DWORD                                              m_pConfigDatabase;                                		// 0x0000D0 (0x0004)              
	class UcThumbnailHelper*                           m_ThumbnailHelper;                                		// 0x0000D4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingImageServer");
		return pClassPointer;
	};

public:
	void PostInit();//APBGame.cHostingImageServer.PostInit
	void PreExit();//APBGame.cHostingImageServer.PreExit
	void Exit();//APBGame.cHostingImageServer.Exit
	bool PreInit();//APBGame.cHostingImageServer.PreInit
	void Term();//APBGame.cHostingImageServer.Term
};
UClass* UcHostingImageServer::pClassPointer = NULL;

//0x0001B4 (0x0001F4 - 0x000040)
//cHostingLobby[0x10398630]
class UcHostingLobby : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	TArray<struct FtHostingLobbyCharacter>             m_aCharacters;                                    		// 0x000044 (0x000C)              
	TArray<struct FtHostingLobbyWorld>                 m_aWorlds;                                        		// 0x000050 (0x000C)              
	struct FString                                     m_sCheckingCharacterName;                         		// 0x00005C (0x000C)              
	int                                                m_nCheckingWorldUID;                              		// 0x000068 (0x0004)              
	struct FString                                     m_sCheckedCharacterName;                          		// 0x00006C (0x000C)              
	int                                                m_nCheckedWorldUID;                               		// 0x000078 (0x0004)              
	int                                                m_nEnteringWorldUID;                              		// 0x00007C (0x0004)              
	int                                                m_nCurrentWorldPing;                              		// 0x000080 (0x0004)              
	DWORD                                              m_pIcmpHandle;                                    		// 0x000084 (0x0004)              
	DWORD                                              m_pPingEvent;                                     		// 0x000088 (0x0004)              
	unsigned char                                      m_anPingReplyBuffer[0x64];                        		// 0x00008C (0x0064)              PROPERTY: 
	double                                             m_LastPingTime;                                   		// 0x0000F0 (0x0008)              
	struct FScriptDelegate                             ___OnNameCheckSuccess__Delegate;                  		// 0x0000F8 (0x000C)              
	struct FScriptDelegate                             ___OnNameCheckFailed__Delegate;                   		// 0x000104 (0x000C)              
	struct FScriptDelegate                             ___OnNameChangeSuccess__Delegate;                 		// 0x000110 (0x000C)              
	struct FScriptDelegate                             ___OnNameChangeFailed__Delegate;                  		// 0x00011C (0x000C)              
	struct FScriptDelegate                             ___OnCharacterCreateSuccess__Delegate;            		// 0x000128 (0x000C)              
	struct FScriptDelegate                             ___OnCharacterCreateFailed__Delegate;             		// 0x000134 (0x000C)              
	struct FScriptDelegate                             ___OnCharacterDeleteSuccess__Delegate;            		// 0x000140 (0x000C)              
	struct FScriptDelegate                             ___OnCharacterDeleteFailed__Delegate;             		// 0x00014C (0x000C)              
	struct FScriptDelegate                             ___OnCharacterInfoSuccess__Delegate;              		// 0x000158 (0x000C)              
	struct FScriptDelegate                             ___OnCharacterInfoFailed__Delegate;               		// 0x000164 (0x000C)              
	struct FScriptDelegate                             ___OnGetWorldListSuccess__Delegate;               		// 0x000170 (0x000C)              
	struct FScriptDelegate                             ___OnGetWorldListFailed__Delegate;                		// 0x00017C (0x000C)              
	struct FScriptDelegate                             ___OnWorldStatusUpdated__Delegate;                		// 0x000188 (0x000C)              
	struct FScriptDelegate                             ___OnWorldEnterSuccess__Delegate;                 		// 0x000194 (0x000C)              
	struct FScriptDelegate                             ___OnWorldEnterFailed__Delegate;                  		// 0x0001A0 (0x000C)              
	struct FScriptDelegate                             ___OnWorldQueueStatus__Delegate;                  		// 0x0001AC (0x000C)              
	struct FScriptDelegate                             ___OnWorldQueueCancelSuccess__Delegate;           		// 0x0001B8 (0x000C)              
	struct FScriptDelegate                             ___OnWorldQueueCancelFailed__Delegate;            		// 0x0001C4 (0x000C)              
	struct FScriptDelegate                             __OnWorldEnterUI__Delegate;                       		// 0x0001D0 (0x000C)              
	struct FScriptDelegate                             ___OnWorldPingComplete__Delegate;                 		// 0x0001DC (0x000C)              
	struct FScriptDelegate                             ___OnAllWorldPingsComplete__Delegate;             		// 0x0001E8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingLobby");
		return pClassPointer;
	};

public:
	void OnCharacterInfoFailed(int nError);//APBGame.cHostingLobby.OnCharacterInfoFailed
	void _OnGetWorldListFailed(int nError);//APBGame.cHostingLobby._OnGetWorldListFailed
	void _OnGetWorldListSuccess();//APBGame.cHostingLobby._OnGetWorldListSuccess
	void GetWorldList();//APBGame.cHostingLobby.GetWorldList
	int GetCharacterIndex(int nSlotNumber);//APBGame.cHostingLobby.GetCharacterIndex
	void _OnCharacterDeleteFailed(int nError);//APBGame.cHostingLobby._OnCharacterDeleteFailed
	void _OnNameCheckSuccess();//APBGame.cHostingLobby._OnNameCheckSuccess
	void _OnWorldEnterSuccess();//APBGame.cHostingLobby._OnWorldEnterSuccess
	void OnWorldQueueCancelFailed(int nError);//APBGame.cHostingLobby.OnWorldQueueCancelFailed
	void _OnWorldPingComplete(int nWorldID,int nWorldIndex);//APBGame.cHostingLobby._OnWorldPingComplete
	void SetWorldOffline(int nWorldUID);//APBGame.cHostingLobby.SetWorldOffline
	void NameCheck(int nWorldUID,struct FString sCharacterName);//APBGame.cHostingLobby.NameCheck
	void OnCharacterCreateFailed(int nError);//APBGame.cHostingLobby.OnCharacterCreateFailed
	void DisplayCharacterList();//APBGame.cHostingLobby.DisplayCharacterList
	void CharacterDelete(int nSlotNumber);//APBGame.cHostingLobby.CharacterDelete
	void DisplayWorldList();//APBGame.cHostingLobby.DisplayWorldList
	void OnNameCheckFailed(int nError);//APBGame.cHostingLobby.OnNameCheckFailed
	void _OnWorldQueueCancelSuccess();//APBGame.cHostingLobby._OnWorldQueueCancelSuccess
	void _OnCharacterDeleteSuccess();//APBGame.cHostingLobby._OnCharacterDeleteSuccess
	void WorldQueueCancel();//APBGame.cHostingLobby.WorldQueueCancel
	void _OnWorldEnterFailed(int nError);//APBGame.cHostingLobby._OnWorldEnterFailed
	void WorldEnter(int nSlotNumber);//APBGame.cHostingLobby.WorldEnter
	void OnNameChangeFailed(int nError);//APBGame.cHostingLobby.OnNameChangeFailed
	void OnCharacterCreateSuccess(int nSlotNumber);//APBGame.cHostingLobby.OnCharacterCreateSuccess
	void NameChange(int nSlotNumber);//APBGame.cHostingLobby.NameChange
	void OnWorldQueueStatus(int nPosition,int nSize,int nEstimatedWait);//APBGame.cHostingLobby.OnWorldQueueStatus
	void Init(class UcHostingClient* Client);//APBGame.cHostingLobby.Init
	void OnWorldStatus(int nWorldUID,int nStatus);//APBGame.cHostingLobby.OnWorldStatus
	void AbortWorldPing();//APBGame.cHostingLobby.AbortWorldPing
	void _OnAllWorldPingsComplete();//APBGame.cHostingLobby._OnAllWorldPingsComplete
	void _OnCharacterInfoFailed(int nError);//APBGame.cHostingLobby._OnCharacterInfoFailed
	void OnNameCheckSuccess();//APBGame.cHostingLobby.OnNameCheckSuccess
	void OnWorldQueueCancelSuccess();//APBGame.cHostingLobby.OnWorldQueueCancelSuccess
	void _OnNameCheckFailed(int nError);//APBGame.cHostingLobby._OnNameCheckFailed
	void CharacterInfo(int nSlotNumber);//APBGame.cHostingLobby.CharacterInfo
	void _OnWorldQueueCancelFailed(int nError);//APBGame.cHostingLobby._OnWorldQueueCancelFailed
	void _OnCharacterCreateSuccess(int nSlotNumber);//APBGame.cHostingLobby._OnCharacterCreateSuccess
	void OnWorldEnterFailed(int nError);//APBGame.cHostingLobby.OnWorldEnterFailed
	void OnCharacterInfoSuccess(int nSlotNumber);//APBGame.cHostingLobby.OnCharacterInfoSuccess
	void CharacterCreate(unsigned char eFaction,unsigned char eGender,TArray<unsigned char> aCustomisation,int nSeconds);//APBGame.cHostingLobby.CharacterCreate
	void CheckForPingReply();//APBGame.cHostingLobby.CheckForPingReply
	void OnCharacterList();//APBGame.cHostingLobby.OnCharacterList
	void Cleanup();//APBGame.cHostingLobby.Cleanup
	void _OnWorldStatusUpdated(int nWorldID,int nStatus);//APBGame.cHostingLobby._OnWorldStatusUpdated
	void OnCharacterDeleteSuccess();//APBGame.cHostingLobby.OnCharacterDeleteSuccess
	void OnGetWorldListFailed(int nError);//APBGame.cHostingLobby.OnGetWorldListFailed
	void OnWorldEnterSuccess(int nCharacterUID,int nServerTime,bool bTutorialComplete,bool bLookingForGroup,bool bAvailableForMetagrouping,int nThreatLevel);//APBGame.cHostingLobby.OnWorldEnterSuccess
	void _OnCharacterCreateFailed(int nError);//APBGame.cHostingLobby._OnCharacterCreateFailed
	void _OnNameChangeFailed(int nError);//APBGame.cHostingLobby._OnNameChangeFailed
	void _OnWorldQueueStatus(int nPosition,int nSize,int nEstimatedWait);//APBGame.cHostingLobby._OnWorldQueueStatus
	void OnWorldEnterUI(int nCharacterUID);//APBGame.cHostingLobby.OnWorldEnterUI
	void _OnNameChangeSuccess();//APBGame.cHostingLobby._OnNameChangeSuccess
	int GetWorldIndex(int nWorldUID);//APBGame.cHostingLobby.GetWorldIndex
	void _OnCharacterInfoSuccess();//APBGame.cHostingLobby._OnCharacterInfoSuccess
	void OnGetWorldListSuccess();//APBGame.cHostingLobby.OnGetWorldListSuccess
	void OnNameChangeSuccess(int nSlotNumber);//APBGame.cHostingLobby.OnNameChangeSuccess
	void OnCharacterDeleteFailed(int nError);//APBGame.cHostingLobby.OnCharacterDeleteFailed
	void StartWorldPing();//APBGame.cHostingLobby.StartWorldPing
};
UClass* UcHostingLobby::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//cHostingMailBase[0x10398500]
class UcHostingMailBase : public UObject
{
public:
	int                                                m_nCost;                                          		// 0x000040 (0x0004)              
	int                                                m_nSoftLimit;                                     		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingMailBase");
		return pClassPointer;
	};

public:
	void GetConstantFromSDD(int eKey,struct FMailConstant* Constant);//APBGame.cHostingMailBase.GetConstantFromSDD
	void InitBase();//APBGame.cHostingMailBase.InitBase
};
UClass* UcHostingMailBase::pClassPointer = NULL;

//0x0000AC (0x0000F4 - 0x000048)
//cHostingMail[0x103983D0]
class UcHostingMail : public UcHostingMailBase
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000048 (0x0004)              
	int                                                m_nUnread;                                        		// 0x00004C (0x0004)              
	int                                                m_nTotal;                                         		// 0x000050 (0x0004)              
	TArray<struct FtHostingMail>                       m_aMail;                                          		// 0x000054 (0x000C)              
	int                                                m_nMailCurrentPage;                               		// 0x000060 (0x0004)              
	int                                                m_nMailRequestedPage;                             		// 0x000064 (0x0004)              
	int                                                m_nMailListSize;                                  		// 0x000068 (0x0004)              
	int                                                m_nMailRequestedRead;                             		// 0x00006C (0x0004)              
	struct FScriptDelegate                             __OnMailListChanged__Delegate;                    		// 0x000070 (0x000C)              
	struct FScriptDelegate                             __OnMailListDetailsChanged__Delegate;             		// 0x00007C (0x000C)              
	struct FScriptDelegate                             __OnMailContentsChanged__Delegate;                		// 0x000088 (0x000C)              
	struct FScriptDelegate                             __OnMailDeleted__Delegate;                        		// 0x000094 (0x000C)              
	struct FScriptDelegate                             __OnMailTotalsChanged__Delegate;                  		// 0x0000A0 (0x000C)              
	struct FScriptDelegate                             __OnMailSent__Delegate;                           		// 0x0000AC (0x000C)              
	struct FScriptDelegate                             __OnMailSendFailed__Delegate;                     		// 0x0000B8 (0x000C)              
	struct FScriptDelegate                             __OnMailItemDetach__Delegate;                     		// 0x0000C4 (0x000C)              
	struct FScriptDelegate                             __OnMailCashDetach__Delegate;                     		// 0x0000D0 (0x000C)              
	struct FScriptDelegate                             __OnMailInfoReceived__Delegate;                   		// 0x0000DC (0x000C)              
	struct FScriptDelegate                             __OnMailCleanup__Delegate;                        		// 0x0000E8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingMail");
		return pClassPointer;
	};

public:
	void OnMailDeleted();//APBGame.cHostingMail.OnMailDeleted
	void OnMailCleanup();//APBGame.cHostingMail.OnMailCleanup
	void OnMailItemDetach(int nError);//APBGame.cHostingMail.OnMailItemDetach
	void OnMailInfo(int nInfoType,int nTotal,int nUnread,int nExpired);//APBGame.cHostingMail.OnMailInfo
	void OnDetachCashSuccess(int nMailUID,int nRemainingTime);//APBGame.cHostingMail.OnDetachCashSuccess
	void Delete(int nMailIndex);//APBGame.cHostingMail.Delete
	void Send(struct FString sTo,struct FString sSubject,struct FString sBody,struct FGuid nItemGuid,int nCash);//APBGame.cHostingMail.Send
	void OnDeleteSuccess(int nMailUID);//APBGame.cHostingMail.OnDeleteSuccess
	void OnReadSuccess(int nMailUID,int nRemainingTime,int nTotal,int nUnread,struct FString sBody);//APBGame.cHostingMail.OnReadSuccess
	void OnReadFailed(int nError,int nMailUID);//APBGame.cHostingMail.OnReadFailed
	void OnGetItemFailed(int nError,int nMailUID);//APBGame.cHostingMail.OnGetItemFailed
	void OnDetachCashFailed(int nError,int nMailUID,int nRemainingTime);//APBGame.cHostingMail.OnDetachCashFailed
	void DetachItem(int nMailUID,int nSelectedChildReward);//APBGame.cHostingMail.DetachItem
	int GetMailIndex(int nMailUID);//APBGame.cHostingMail.GetMailIndex
	void OnSendSuccess();//APBGame.cHostingMail.OnSendSuccess
	void DisplayMailInfo();//APBGame.cHostingMail.DisplayMailInfo
	void Read(int nMailIndex);//APBGame.cHostingMail.Read
	void OnMailSystem();//APBGame.cHostingMail.OnMailSystem
	void OnDeleteFailed(int nError,int nMailUID);//APBGame.cHostingMail.OnDeleteFailed
	void DetachCash(int nMailIndex);//APBGame.cHostingMail.DetachCash
	void OnDetachItemFailed(int nError,int nMailUID,int nRemainingTime);//APBGame.cHostingMail.OnDetachItemFailed
	void DisplayMailList();//APBGame.cHostingMail.DisplayMailList
	void OnMailTotalsChanged();//APBGame.cHostingMail.OnMailTotalsChanged
	void Init(class UcHostingClient* Client);//APBGame.cHostingMail.Init
	void OnGetMailListSuccess(int nTotal,int nUnread);//APBGame.cHostingMail.OnGetMailListSuccess
	void OnMailSent();//APBGame.cHostingMail.OnMailSent
	void OnSendFailed(int nError);//APBGame.cHostingMail.OnSendFailed
	void GetItem(int nMailIndex);//APBGame.cHostingMail.GetItem
	void Cleanup();//APBGame.cHostingMail.Cleanup
	void OnMailInfoReceived(int nUnread);//APBGame.cHostingMail.OnMailInfoReceived
	void GetMailList(int nPage,unsigned char eSort);//APBGame.cHostingMail.GetMailList
	void OnDetachItemSuccess(int nMailUID,int nRemainingTime);//APBGame.cHostingMail.OnDetachItemSuccess
	void OnGetMailListFailed(int nError);//APBGame.cHostingMail.OnGetMailListFailed
	void OnMailListChanged();//APBGame.cHostingMail.OnMailListChanged
	void OnMailListDetailsChanged();//APBGame.cHostingMail.OnMailListDetailsChanged
	void OnMailSendFailed(int nError);//APBGame.cHostingMail.OnMailSendFailed
	void OnGetItemSuccess(int nMailUID,struct FString sItem);//APBGame.cHostingMail.OnGetItemSuccess
	void OnMailContentsChanged();//APBGame.cHostingMail.OnMailContentsChanged
	void OnMailCashDetach(int nError);//APBGame.cHostingMail.OnMailCashDetach
};
UClass* UcHostingMail::pClassPointer = NULL;

//0x000004 (0x00004C - 0x000048)
//cHostingMailServer[0x103982A0]
class UcHostingMailServer : public UcHostingMailBase
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x000048 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingMailServer");
		return pClassPointer;
	};

public:
	void Cleanup();//APBGame.cHostingMailServer.Cleanup
	void DatabaseDetachItem(class AcAPBPlayerController* pPC,int nMailUID,int nSelectedChildReward);//APBGame.cHostingMailServer.DatabaseDetachItem
	void DatabaseSend(int nSenderUID,class AcAPBPlayerController* pPC,struct FString sTo,struct FString sSubject,struct FString sBody,struct FGuid nItemGuid,int nCash);//APBGame.cHostingMailServer.DatabaseSend
	void Init(class UcHostingServer* Server);//APBGame.cHostingMailServer.Init
	void DatabaseDetachCash(class AcAPBPlayerController* pPC,int nMailUID);//APBGame.cHostingMailServer.DatabaseDetachCash
};
UClass* UcHostingMailServer::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//cHostingMarketplaceBase[0x10398170]
class UcHostingMarketplaceBase : public UObject
{
public:
	int                                                m_nMaximumAuctions;                               		// 0x000040 (0x0004)              
	float                                              m_fMinimumBidPercentage;                          		// 0x000044 (0x0004)              
	float                                              m_fTariffPercentage;                              		// 0x000048 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingMarketplaceBase");
		return pClassPointer;
	};

public:
	void InitBase();//APBGame.cHostingMarketplaceBase.InitBase
	void GetConstantFromSDD(int eKey,struct FMarketplaceConstant* Constant);//APBGame.cHostingMarketplaceBase.GetConstantFromSDD
};
UClass* UcHostingMarketplaceBase::pClassPointer = NULL;

//0x0001AC (0x0001F8 - 0x00004C)
//cHostingMarketplace[0x10398040]
class UcHostingMarketplace : public UcHostingMarketplaceBase
{
public:
	unsigned char                                      m_eAuctionType;                                   		// 0x00004C (0x0001)              PROPERTY: etMarketplaceAuctionType
	unsigned char                                      m_eMyAuctionsPrevSort;                            		// 0x00004D (0x0001)              PROPERTY: etMarketplaceSort
	unsigned char                                      m_eMyBidsPrevSort;                                		// 0x00004E (0x0001)              PROPERTY: etMarketplaceSort
	unsigned char                                      _0x00004F[0x1];                                   		// 0x00004F (0x0001) MISSED OFFSET
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000050 (0x0004)              
	TArray<struct FString>                             m_aSellers;                                       		// 0x000054 (0x000C)              
	TArray<struct FtHostingMarketplaceAuction>         m_aAuctions;                                      		// 0x000060 (0x000C)              
	TArray<struct FtHostingMarketplaceMyAuction>       m_aMyAuctions;                                    		// 0x00006C (0x000C)              
	TArray<struct FtHostingMarketplaceMyBid>           m_aMyBids;                                        		// 0x000078 (0x000C)              
	int                                                m_nMarketplacePageRequestSequence;                		// 0x000084 (0x0004)              
	int                                                m_nMarketplaceRowsPerClientPage;                  		// 0x000088 (0x0004)              
	int                                                m_nAuctionsCurrentServerPage;                     		// 0x00008C (0x0004)              
	int                                                m_nAuctionsCurrentClientPage;                     		// 0x000090 (0x0004)              
	int                                                m_nAuctionsRequestedClientPage;                   		// 0x000094 (0x0004)              
	int                                                m_nAuctionsListSize;                              		// 0x000098 (0x0004)              
	struct FtHostingMarketplaceAuctionListSearchParams m_auctionsPrevSearchParams;                       		// 0x00009C (0x0020)              
	int                                                m_nMyAuctionsCurrentServerPage;                   		// 0x0000BC (0x0004)              
	int                                                m_nMyAuctionsCurrentClientPage;                   		// 0x0000C0 (0x0004)              
	int                                                m_nMyAuctionsRequestedClientPage;                 		// 0x0000C4 (0x0004)              
	int                                                m_nMyAuctionsListSize;                            		// 0x0000C8 (0x0004)              
	int                                                m_nMyBidsCurrentServerPage;                       		// 0x0000CC (0x0004)              
	int                                                m_nMyBidsCurrentClientPage;                       		// 0x0000D0 (0x0004)              
	int                                                m_nMyBidsRequestedClientPage;                     		// 0x0000D4 (0x0004)              
	int                                                m_nMyBidsListSize;                                		// 0x0000D8 (0x0004)              
	int                                                m_nBidAmount;                                     		// 0x0000DC (0x0004)              
	int                                                m_nRequestedItemAuctionUID;                       		// 0x0000E0 (0x0004)              
	struct FScriptDelegate                             __OnAuctionsListChanged__Delegate;                		// 0x0000E4 (0x000C)              
	struct FScriptDelegate                             __OnGetAuctionsListFailed__Delegate;              		// 0x0000F0 (0x000C)              
	struct FScriptDelegate                             __OnMyAuctionsListChanged__Delegate;              		// 0x0000FC (0x000C)              
	struct FScriptDelegate                             __OnGetMyAuctionsListFailed__Delegate;            		// 0x000108 (0x000C)              
	struct FScriptDelegate                             __OnMyBidsListChanged__Delegate;                  		// 0x000114 (0x000C)              
	struct FScriptDelegate                             __OnGetMyBidsListFailed__Delegate;                		// 0x000120 (0x000C)              
	struct FScriptDelegate                             __OnAuctionsListDetailsChanged__Delegate;         		// 0x00012C (0x000C)              
	struct FScriptDelegate                             __OnMyAuctionsListDetailsChanged__Delegate;       		// 0x000138 (0x000C)              
	struct FScriptDelegate                             __OnMyBidsListDetailsChanged__Delegate;           		// 0x000144 (0x000C)              
	struct FScriptDelegate                             __OnAuctionRemoved__Delegate;                     		// 0x000150 (0x000C)              
	struct FScriptDelegate                             __OnMyAuctionRemoved__Delegate;                   		// 0x00015C (0x000C)              
	struct FScriptDelegate                             __OnMyBidRemoved__Delegate;                       		// 0x000168 (0x000C)              
	struct FScriptDelegate                             __OnAuctionCreateSuccess_UI__Delegate;            		// 0x000174 (0x000C)              
	struct FScriptDelegate                             __OnAuctionCreateFailure_UI__Delegate;            		// 0x000180 (0x000C)              
	struct FScriptDelegate                             __OnAuctionCancelSuccess_UI__Delegate;            		// 0x00018C (0x000C)              
	struct FScriptDelegate                             __OnAuctionCancelFailure_UI__Delegate;            		// 0x000198 (0x000C)              
	struct FScriptDelegate                             __OnAuctionBidSuccess_UI__Delegate;               		// 0x0001A4 (0x000C)              
	struct FScriptDelegate                             __OnAuctionBidFailure_UI__Delegate;               		// 0x0001B0 (0x000C)              
	struct FScriptDelegate                             __OnCreatorCompletionSuccess_UI__Delegate;        		// 0x0001BC (0x000C)              
	struct FScriptDelegate                             __OnCreatorCompletionFailure_UI__Delegate;        		// 0x0001C8 (0x000C)              
	struct FScriptDelegate                             __OnAuctionGetItemSuccess_UI__Delegate;           		// 0x0001D4 (0x000C)              
	struct FScriptDelegate                             __OnAuctionGetItemFailure_UI__Delegate;           		// 0x0001E0 (0x000C)              
	struct FScriptDelegate                             __OnAuctionCleanup_UI__Delegate;                  		// 0x0001EC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingMarketplace");
		return pClassPointer;
	};

public:
	void Cleanup();//APBGame.cHostingMarketplace.Cleanup
	void OnAuctionBidFailed(int nError,int nAuctionUID);//APBGame.cHostingMarketplace.OnAuctionBidFailed
	void OnMyAuctionsListChanged(int nCurrency);//APBGame.cHostingMarketplace.OnMyAuctionsListChanged
	void DisplayMyBidInfo();//APBGame.cHostingMarketplace.DisplayMyBidInfo
	void AuctionCancel(int nAuctionIndex);//APBGame.cHostingMarketplace.AuctionCancel
	void DisplaySellerList();//APBGame.cHostingMarketplace.DisplaySellerList
	void OnAuctionBidSuccess_UI();//APBGame.cHostingMarketplace.OnAuctionBidSuccess_UI
	void OnGetMyBidsListFailed(int nError);//APBGame.cHostingMarketplace.OnGetMyBidsListFailed
	bool IsThumbnailCached(int nAuctionUID);//APBGame.cHostingMarketplace.IsThumbnailCached
	void OnCreatorCompletionFailure_UI(int nError);//APBGame.cHostingMarketplace.OnCreatorCompletionFailure_UI
	struct FString Text(struct FString sKey);//APBGame.cHostingMarketplace.Text
	void GetMyBidList(int nClientPage,int nRowsPerClientPage,unsigned char eSort);//APBGame.cHostingMarketplace.GetMyBidList
	void OnGetMyAuctionListSuccess();//APBGame.cHostingMarketplace.OnGetMyAuctionListSuccess
	void OnAuctionRemoved(int nCurrency);//APBGame.cHostingMarketplace.OnAuctionRemoved
	void MyAuctionsGetItem(int nMyAuctionsIndex);//APBGame.cHostingMarketplace.MyAuctionsGetItem
	void OnAuctionBidSuccess(int nAuctionUID);//APBGame.cHostingMarketplace.OnAuctionBidSuccess
	bool IsValidBid_MyBids(int nAmount,int nCurrentBid,int nBuyout);//APBGame.cHostingMarketplace.IsValidBid_MyBids
	void OnAuctionCancelSuccess_UI();//APBGame.cHostingMarketplace.OnAuctionCancelSuccess_UI
	void _AuctionGetItem(int nAuctionUID);//APBGame.cHostingMarketplace._AuctionGetItem
	void OnGetMyBidListFailed(int nError);//APBGame.cHostingMarketplace.OnGetMyBidListFailed
	struct FString GetItemName(struct FString sUserSpecifiedName,int eInventoryItemType);//APBGame.cHostingMarketplace.GetItemName
	void OnMyBidsListChanged(int nCurrency);//APBGame.cHostingMarketplace.OnMyBidsListChanged
	void OnMyAuctionRemoved(int nCurrency);//APBGame.cHostingMarketplace.OnMyAuctionRemoved
	bool GetListFirstIndex(unsigned char eListType,int nClientPage,struct FtHostingMarketplaceListPos* headPos);//APBGame.cHostingMarketplace.GetListFirstIndex
	void OnAuctionsListDetailsChanged(int nCurrency);//APBGame.cHostingMarketplace.OnAuctionsListDetailsChanged
	int MinimumBid(int nCurrentBid);//APBGame.cHostingMarketplace.MinimumBid
	int GetAuctionIndex(int nAuctionUID);//APBGame.cHostingMarketplace.GetAuctionIndex
	void OnAuctionCancelSuccess(int nAuctionUID);//APBGame.cHostingMarketplace.OnAuctionCancelSuccess
	void OnAuctionInfo(int nAuctionUID,int nInfoType,int nItemType,struct FString sItemName,int nAmount);//APBGame.cHostingMarketplace.OnAuctionInfo
	void DisplayMyAuctionInfo();//APBGame.cHostingMarketplace.DisplayMyAuctionInfo
	void OnCreatorCompletionSuccess_UI();//APBGame.cHostingMarketplace.OnCreatorCompletionSuccess_UI
	void OnAuctionGetItemFailure_UI(int nCurrency,int nAuctionID);//APBGame.cHostingMarketplace.OnAuctionGetItemFailure_UI
	void OnGetAuctionsListFailed(int nError);//APBGame.cHostingMarketplace.OnGetAuctionsListFailed
	void OnGetSellerListSuccess(int nTotalNames);//APBGame.cHostingMarketplace.OnGetSellerListSuccess
	void AuctionGetItem(int nAuctionIndex);//APBGame.cHostingMarketplace.AuctionGetItem
	void MyBidsGetItem(int nMyBidsIndex);//APBGame.cHostingMarketplace.MyBidsGetItem
	void OnGetMyAuctionsListFailed(int nError);//APBGame.cHostingMarketplace.OnGetMyAuctionsListFailed
	void _AuctionCancel(int nAuctionUID);//APBGame.cHostingMarketplace._AuctionCancel
	void OnAuctionCreateSuccess_UI();//APBGame.cHostingMarketplace.OnAuctionCreateSuccess_UI
	void OnMyBidRemoved(int nCurrency);//APBGame.cHostingMarketplace.OnMyBidRemoved
	void MyBidsBid(int nMyBidsIndex,int nAmount);//APBGame.cHostingMarketplace.MyBidsBid
	int GetMyBidsIndex(int nAuctionUID);//APBGame.cHostingMarketplace.GetMyBidsIndex
	bool IsValidBid(int nAmount,struct FQWord nStartingBid,int nCurrentBid,int nBuyout);//APBGame.cHostingMarketplace.IsValidBid
	void OnAuctionCleanup_UI(int nCurrency);//APBGame.cHostingMarketplace.OnAuctionCleanup_UI
	void OnGetMyBidListSuccess();//APBGame.cHostingMarketplace.OnGetMyBidListSuccess
	void GetMyAuctionList(int nClientPage,int nRowsPerClientPage,unsigned char eSort);//APBGame.cHostingMarketplace.GetMyAuctionList
	void OnAuctionsListChanged(int nCurrency);//APBGame.cHostingMarketplace.OnAuctionsListChanged
	void OnAuctionCreateFailed(int nError);//APBGame.cHostingMarketplace.OnAuctionCreateFailed
	void OnAuctionCancelFailure_UI(int nError);//APBGame.cHostingMarketplace.OnAuctionCancelFailure_UI
	void OnAuctionCancelFailed(int nError,int nAuctionUID);//APBGame.cHostingMarketplace.OnAuctionCancelFailed
	void OnAuctionGetItemFailed(int nError,int nAuctionUID);//APBGame.cHostingMarketplace.OnAuctionGetItemFailed
	bool GetListNextIndex(struct FtHostingMarketplaceListPos* pos,int* nIndex);//APBGame.cHostingMarketplace.GetListNextIndex
	void GetThumbnails(unsigned char eListType,int nClientPage);//APBGame.cHostingMarketplace.GetThumbnails
	void OnGetSellerListFailed(int nError);//APBGame.cHostingMarketplace.OnGetSellerListFailed
	int GetMyAuctionsIndex(int nAuctionUID);//APBGame.cHostingMarketplace.GetMyAuctionsIndex
	void AuctionBid(int nAuctionIndex,int nAmount);//APBGame.cHostingMarketplace.AuctionBid
	void DisplayAuctionInfo();//APBGame.cHostingMarketplace.DisplayAuctionInfo
	void OnAuctionGetItemSuccess_UI(int nCurrency,int nAuctionID,struct FString sItemXMLData);//APBGame.cHostingMarketplace.OnAuctionGetItemSuccess_UI
	void _AuctionBid(int nAuctionUID,int nAmount);//APBGame.cHostingMarketplace._AuctionBid
	void AuctionCreate(struct FGuid nItemGuid,unsigned char eDuration,int nStartingBid,int nBuyout,int nCash,struct FString sCharacterRestriction);//APBGame.cHostingMarketplace.AuctionCreate
	void OnGetMyAuctionListFailed(int nError);//APBGame.cHostingMarketplace.OnGetMyAuctionListFailed
	void OnGetAuctionListSuccess();//APBGame.cHostingMarketplace.OnGetAuctionListSuccess
	void OnAuctionBidFailure_UI(int nError);//APBGame.cHostingMarketplace.OnAuctionBidFailure_UI
	void GetAuctionList(int nClientPage,int nRowsPerClientPage,unsigned char eSort,unsigned char eSearch,struct FString sSearch,int nCategory,int nSubcategory,int nRatingOrCashStart,int nRatingOrCashEnd,bool bSystemAuctions,bool bCharacterRestricted);//APBGame.cHostingMarketplace.GetAuctionList
	void Init(class UcHostingClient* Client,unsigned char eAuctionType);//APBGame.cHostingMarketplace.Init
	void MyAuctionsCancel(int nMyAuctionsIndex);//APBGame.cHostingMarketplace.MyAuctionsCancel
	void OnMyBidsListDetailsChanged(int nCurrency);//APBGame.cHostingMarketplace.OnMyBidsListDetailsChanged
	void GetSellerList(struct FString sSearch);//APBGame.cHostingMarketplace.GetSellerList
	void OnMyAuctionsListDetailsChanged(int nCurrency);//APBGame.cHostingMarketplace.OnMyAuctionsListDetailsChanged
	void OnAuctionGetItemSuccess(int nAuctionUID,struct FString sItem);//APBGame.cHostingMarketplace.OnAuctionGetItemSuccess
	void OnGetAuctionListFailed(int nError);//APBGame.cHostingMarketplace.OnGetAuctionListFailed
	void OnAuctionCreateFailure_UI(int nError);//APBGame.cHostingMarketplace.OnAuctionCreateFailure_UI
	void OnAuctionCreateSuccess();//APBGame.cHostingMarketplace.OnAuctionCreateSuccess
	void OnThumbnailFailed(unsigned char eListType,int nClientPage,int nPageRequestSequence,int nError);//APBGame.cHostingMarketplace.OnThumbnailFailed
	void OnThumbnail(unsigned char eListType,int nClientPage,int nPageRequestSequence,int nAuctionUID,struct FString sItemXml);//APBGame.cHostingMarketplace.OnThumbnail
};
UClass* UcHostingMarketplace::pClassPointer = NULL;

//0x000004 (0x000050 - 0x00004C)
//cHostingMarketplaceServer[0x10397F10]
class UcHostingMarketplaceServer : public UcHostingMarketplaceBase
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingMarketplaceServer");
		return pClassPointer;
	};

public:
	void Cleanup();//APBGame.cHostingMarketplaceServer.Cleanup
	void Init(class UcHostingServer* Server);//APBGame.cHostingMarketplaceServer.Init
	void DatabaseAuctionCreate(class AcHostingPlayerController* pPC,unsigned char eAuctionType,struct FGuid nItemGuid,unsigned char eDuration,int nStartingBid,int nBuyout,int nCash,struct FString sCharacterRestriction);//APBGame.cHostingMarketplaceServer.DatabaseAuctionCreate
	void DatabaseAuctionBid(class AcHostingPlayerController* pPC,unsigned char eAuctionType,int nAuctionUID,int nAmount);//APBGame.cHostingMarketplaceServer.DatabaseAuctionBid
};
UClass* UcHostingMarketplaceServer::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cHostingMissionServer[0x10397DE0]
class UcHostingMissionServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingMissionServer");
		return pClassPointer;
	};

public:
	void Cleanup();//APBGame.cHostingMissionServer.Cleanup
	void Init(class UcHostingServer* Server);//APBGame.cHostingMissionServer.Init
};
UClass* UcHostingMissionServer::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cHostingNameFilterServer[0x10397CB0]
class UcHostingNameFilterServer : public UObject
{
public:
	class UcHostingServer*                             m_HostingServer;                                  		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingNameFilterServer");
		return pClassPointer;
	};

public:
	void Cleanup();//APBGame.cHostingNameFilterServer.Cleanup
	void Init(class UcHostingServer* Server);//APBGame.cHostingNameFilterServer.Init
	void Check(struct FString sName,class AcAPBPlayerController* pPC);//APBGame.cHostingNameFilterServer.Check
};
UClass* UcHostingNameFilterServer::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//cHostingNameQuery[0x10397B80]
class UcHostingNameQuery : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	DWORD                                              m_pCharacterNameCache;                            		// 0x000044 (0x0004)              
	struct FScriptDelegate                             __OnNameQuerySuccessItem_UI__Delegate;            		// 0x000048 (0x000C)              
	struct FScriptDelegate                             __OnNameQueryFailureItem_UI__Delegate;            		// 0x000054 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingNameQuery");
		return pClassPointer;
	};

public:
	void OnNameQuerySuccessItem_UI(int nCharacterUID,struct FString sCharacterName);//APBGame.cHostingNameQuery.OnNameQuerySuccessItem_UI
	void OnNameQueryFailed(int nError,unsigned char eNameQuery,int nCharacterUID);//APBGame.cHostingNameQuery.OnNameQueryFailed
	void OnNameQueryFailedItem(int nError,int nCharacterUID);//APBGame.cHostingNameQuery.OnNameQueryFailedItem
	void NameQuery(unsigned char eNameQuery,int nCharacterUID);//APBGame.cHostingNameQuery.NameQuery
	void Init(class UcHostingClient* Client);//APBGame.cHostingNameQuery.Init
	bool GetCharacterName(int nCharacterUID,struct FString* sCharacterName);//APBGame.cHostingNameQuery.GetCharacterName
	void AddCachedCharacterName(int nCharacterUID,struct FString sCharacterName);//APBGame.cHostingNameQuery.AddCachedCharacterName
	void OnNameQuerySuccess(unsigned char eNameQuery,int nCharacterUID,struct FString sCharacterName);//APBGame.cHostingNameQuery.OnNameQuerySuccess
	void Cleanup();//APBGame.cHostingNameQuery.Cleanup
	void OnNameQuerySuccessItem(int nCharacterUID,struct FString sCharacterName);//APBGame.cHostingNameQuery.OnNameQuerySuccessItem
	bool GetCachedCharacterName(int nCharacterUID,struct FString* sCharacterName);//APBGame.cHostingNameQuery.GetCachedCharacterName
	void OnNameQueryFailureItem_UI(int nError,int nCharacterUID);//APBGame.cHostingNameQuery.OnNameQueryFailureItem_UI
	bool GetCharacterNameNative(int nCharacterUID,struct FString* sCharacterName);//APBGame.cHostingNameQuery.GetCharacterNameNative
};
UClass* UcHostingNameQuery::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//cHostingNames[0x10397A50]
class UcHostingNames : public UObject
{
public:
	struct FString                                     m_sRegion;                                        		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingNames");
		return pClassPointer;
	};

public:
	bool IsValidClanRankName(struct FString sName);//APBGame.cHostingNames.IsValidClanRankName
	bool IsValidCharacterName(struct FString sName);//APBGame.cHostingNames.IsValidCharacterName
	bool IsValidItemName(struct FString sMessage);//APBGame.cHostingNames.IsValidItemName
	void Configure(struct FString sRegion);//APBGame.cHostingNames.Configure
	bool IsValidChatMessage(struct FString sMessage);//APBGame.cHostingNames.IsValidChatMessage
	void Init();//APBGame.cHostingNames.Init
	bool IsValidClanName(struct FString sName);//APBGame.cHostingNames.IsValidClanName
};
UClass* UcHostingNames::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cHostingScriptTypes[0x10397920]
class UcHostingScriptTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingScriptTypes");
		return pClassPointer;
	};
};
UClass* UcHostingScriptTypes::pClassPointer = NULL;

//0x000260 (0x0002A0 - 0x000040)
//cHostingServer[0x103977F0]
class UcHostingServer : public UObject
{
public:
	DWORD                                              VfTable_FCallbackEventDevice;                     		// 0x000040 (0x0004)              
	int                                                m_nServerUID;                                     		// 0x000044 (0x0004)              
	int                                                m_nDistrictServerGroupUID;                        		// 0x000048 (0x0004)              
	int                                                m_nVersionHigh;                                   		// 0x00004C (0x0004)              
	int                                                m_nVersionMiddle;                                 		// 0x000050 (0x0004)              
	int                                                m_nVersionLow;                                    		// 0x000054 (0x0004)              
	int                                                m_nVersionBuildNo;                                		// 0x000058 (0x0004)              
	struct FString                                     m_sComputerName;                                  		// 0x00005C (0x000C)              
	struct FString                                     m_sWorldServerListenIP;                           		// 0x000068 (0x000C)              
	int                                                m_nWorldServerListenPort;                         		// 0x000074 (0x0004)              
	struct FString                                     m_sClientListenIP;                                		// 0x000078 (0x000C)              
	int                                                m_nClientListenPort;                              		// 0x000084 (0x0004)              
	struct FString                                     m_sClientConnectIP;                               		// 0x000088 (0x000C)              
	int                                                m_nClientConnectPort;                             		// 0x000094 (0x0004)              
	int                                                m_nNetworkKeepaliveTime;                          		// 0x000098 (0x0004)              
	int                                                m_nNetworkKeepaliveInterval;                      		// 0x00009C (0x0004)              
	struct FString                                     m_sMonitorListenIP;                               		// 0x0000A0 (0x000C)              
	int                                                m_nMonitorListenPort;                             		// 0x0000AC (0x0004)              
	int                                                m_nServerShutdownDelay;                           		// 0x0000B0 (0x0004)              
	int                                                m_nClientAuthenticationTimeout;                   		// 0x0000B4 (0x0004)              
	int                                                m_nCharacterCheckpointInterval;                   		// 0x0000B8 (0x0004)              
	int                                                m_nCharacterSaveInterval;                         		// 0x0000BC (0x0004)              
	int                                                m_nWorldServerSendBufferSize;                     		// 0x0000C0 (0x0004)              
	int                                                m_nWorldServerRecvBufferSize;                     		// 0x0000C4 (0x0004)              
	int                                                m_nWorldServerMaxMessageSize;                     		// 0x0000C8 (0x0004)              
	int                                                m_nWorldServerConnectTimeout;                     		// 0x0000CC (0x0004)              
	int                                                m_nWorldServerTickInterval;                       		// 0x0000D0 (0x0004)              
	int                                                m_nConfigDatabaseLoginTimeout;                    		// 0x0000D4 (0x0004)              
	int                                                m_nWorldDatabaseLoginTimeout;                     		// 0x0000D8 (0x0004)              
	int                                                m_nWorldDatabaseThreads;                          		// 0x0000DC (0x0004)              
	int                                                m_nConfigDatabaseThreads;                         		// 0x0000E0 (0x0004)              
	struct FString                                     m_sConfigDatabaseIP;                              		// 0x0000E4 (0x000C)              
	int                                                m_nConfigDatabasePort;                            		// 0x0000F0 (0x0004)              
	struct FString                                     m_sConfigDatabaseUsername;                        		// 0x0000F4 (0x000C)              
	struct FString                                     m_sConfigDatabasePassword;                        		// 0x000100 (0x000C)              
	struct FString                                     m_sConfigDatabaseDatabase;                        		// 0x00010C (0x000C)              
	int                                                m_nWorldDatabaseUID;                              		// 0x000118 (0x0004)              
	struct FString                                     m_sWorldDatabaseIP;                               		// 0x00011C (0x000C)              
	int                                                m_nWorldDatabasePort;                             		// 0x000128 (0x0004)              
	struct FString                                     m_sWorldDatabaseUsername;                         		// 0x00012C (0x000C)              
	struct FString                                     m_sWorldDatabasePassword;                         		// 0x000138 (0x000C)              
	struct FString                                     m_sWorldDatabaseDatabase;                         		// 0x000144 (0x000C)              
	int                                                m_nWorldLogDatabaseUID;                           		// 0x000150 (0x0004)              
	struct FString                                     m_sWorldLogDatabaseIP;                            		// 0x000154 (0x000C)              
	int                                                m_nWorldLogDatabasePort;                          		// 0x000160 (0x0004)              
	struct FString                                     m_sWorldLogDatabaseUsername;                      		// 0x000164 (0x000C)              
	struct FString                                     m_sWorldLogDatabasePassword;                      		// 0x000170 (0x000C)              
	struct FString                                     m_sWorldLogDatabaseDatabase;                      		// 0x00017C (0x000C)              
	int                                                m_nWorldLogDatabaseLoginTimeout;                  		// 0x000188 (0x0004)              
	struct FString                                     m_sBulkLogDirectoryPath;                          		// 0x00018C (0x000C)              
	struct FString                                     m_sBulkLogArchiveDirectoryPath;                   		// 0x000198 (0x000C)              
	struct FString                                     m_sBulkLogFormatFilePath;                         		// 0x0001A4 (0x000C)              
	int                                                m_nBulkLogFileArchiveSize;                        		// 0x0001B0 (0x0004)              
	int                                                m_nBulkLogFileArchiveTimeout;                     		// 0x0001B4 (0x0004)              
	int                                                m_nBulkLogFileCollectingInterval;                 		// 0x0001B8 (0x0004)              
	unsigned long                                      m_bBulkLogReceiveResultRowsAffected : 1;          		// 0x0001BC (0x0004) [0x00000001] 
	unsigned long                                      m_bBulkLogArchiveImportedFiles : 1;               		// 0x0001BC (0x0004) [0x00000002] 
	unsigned long                                      m_bGameBlocksEnabled : 1;                         		// 0x0001BC (0x0004) [0x00000004] 
	unsigned long                                      m_bAllowGameBlocksPlayerInteraction : 1;          		// 0x0001BC (0x0004) [0x00000008] 
	unsigned long                                      m_bDestroyTestItems : 1;                          		// 0x0001BC (0x0004) [0x00000010] 
	unsigned long                                      m_bDestroyRussianItemsOnNonRussianWorld : 1;      		// 0x0001BC (0x0004) [0x00000020] 
	unsigned long                                      m_bInstance : 1;                                  		// 0x0001BC (0x0004) [0x00000040] 
	unsigned long                                      m_bRecovery : 1;                                  		// 0x0001BC (0x0004) [0x00000080] 
	unsigned long                                      m_bBulkLog : 1;                                   		// 0x0001BC (0x0004) [0x00000100] 
	unsigned long                                      m_bIsRequestingExit : 1;                          		// 0x0001BC (0x0004) [0x00000200] 
	unsigned long                                      m_bLocked : 1;                                    		// 0x0001BC (0x0004) [0x00000400] 
	int                                                m_nBulkLogPendingBufferSize;                      		// 0x0001C0 (0x0004)              
	int                                                m_nBulkLogPendingOverflowBufferSize;              		// 0x0001C4 (0x0004)              
	int                                                m_nBulkLogPendingTimeout;                         		// 0x0001C8 (0x0004)              
	int                                                m_nBulkLogServerExecutionCount;                   		// 0x0001CC (0x0004)              
	int                                                m_dateBulkLogServerExecutionYear;                 		// 0x0001D0 (0x0004)              
	int                                                m_dateBulkLogServerExecutionMonth;                		// 0x0001D4 (0x0004)              
	int                                                m_dateBulkLogServerExecutionDay;                  		// 0x0001D8 (0x0004)              
	int                                                m_dateBulkLogServerExecutionHour;                 		// 0x0001DC (0x0004)              
	int                                                m_dateBulkLogServerExecutionMinute;               		// 0x0001E0 (0x0004)              
	int                                                m_dateBulkLogServerExecutionSecond;               		// 0x0001E4 (0x0004)              
	int                                                m_nSkillRatingSeedHasNCharacterWeight;            		// 0x0001E8 (0x0004)              
	struct FString                                     m_sGameBlocksServerUrl;                           		// 0x0001EC (0x000C)              
	int                                                m_nGameBlocksServerPort;                          		// 0x0001F8 (0x0004)              
	int                                                m_nWorldServerUID;                                		// 0x0001FC (0x0004)              
	int                                                m_nDistrictUID;                                   		// 0x000200 (0x0004)              
	int                                                m_nInstanceNo;                                    		// 0x000204 (0x0004)              
	int                                                m_nPeakCCU;                                       		// 0x000208 (0x0004)              
	struct FString                                     m_sWorldName;                                     		// 0x00020C (0x000C)              
	struct FString                                     m_sWorldServerRegion;                             		// 0x000218 (0x000C)              
	float                                              m_fConservativeRatingSeed;                        		// 0x000224 (0x0004)              
	int                                                m_nMonitoringBuffers;                             		// 0x000228 (0x0004)              
	float                                              m_fElapsedSeconds;                                		// 0x00022C (0x0004)              
	int                                                m_nInstanceTime;                                  		// 0x000230 (0x0004)              
	int                                                m_nDistrictInstanceType;                          		// 0x000234 (0x0004)              
	struct FString                                     m_sMap;                                           		// 0x000238 (0x000C)              
	class UcHostingDistrictServer*                     m_district;                                       		// 0x000244 (0x0004)              
	class UcHostingChatServer*                         m_chat;                                           		// 0x000248 (0x0004)              
	class UcHostingGroupServer*                        m_group;                                          		// 0x00024C (0x0004)              
	class UcHostingClanServer*                         m_clan;                                           		// 0x000250 (0x0004)              
	class UcHostingMarketplaceServer*                  m_marketplace;                                    		// 0x000254 (0x0004)              
	class UcHostingMailServer*                         m_mail;                                           		// 0x000258 (0x0004)              
	class UcHostingNames*                              m_Name;                                           		// 0x00025C (0x0004)              
	class UcHostingNameFilterServer*                   m_namefilter;                                     		// 0x000260 (0x0004)              
	class UcHostingMissionServer*                      m_Mission;                                        		// 0x000264 (0x0004)              
	class UcHostingDisplayPointServer*                 m_displaypoint;                                   		// 0x000268 (0x0004)              
	class UcHostingDS2WS*                              m_WorldServer;                                    		// 0x00026C (0x0004)              
	DWORD                                              m_pItem;                                          		// 0x000270 (0x0004)              
	DWORD                                              m_pConfigDatabase;                                		// 0x000274 (0x0004)              
	DWORD                                              m_pWorldDatabase;                                 		// 0x000278 (0x0004)              
	DWORD                                              m_pConfigDatabaseAsync;                           		// 0x00027C (0x0004)              
	DWORD                                              m_pAsyncWork;                                     		// 0x000280 (0x0004)              
	DWORD                                              m_pMemoryMappedFile;                              		// 0x000284 (0x0004)              
	DWORD                                              m_pPersistentCharacterData;                       		// 0x000288 (0x0004)              
	DWORD                                              m_pPlayerControllers;                             		// 0x00028C (0x0004)              
	int                                                m_nShutdownSeconds;                               		// 0x000290 (0x0004)              
	DWORD                                              m_pShutdownNotification;                          		// 0x000294 (0x0004)              
	unsigned char                                      m_eDistrictState;                                 		// 0x000298 (0x0001)              PROPERTY: etDistrictState
	unsigned char                                      _0x000299[0x3];                                   		// 0x000299 (0x0003) MISSED OFFSET
	int                                                m_nWorldUtcOffset;                                		// 0x00029C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingServer");
		return pClassPointer;
	};

public:
	void CleanupNative();//APBGame.cHostingServer.CleanupNative
	void PreExitNative();//APBGame.cHostingServer.PreExitNative
	void Cleanup();//APBGame.cHostingServer.Cleanup
	void Term();//APBGame.cHostingServer.Term
	void Exit();//APBGame.cHostingServer.Exit
	void PostInit();//APBGame.cHostingServer.PostInit
	void SetDistrictInstanceType2nd(int nSecondaryKey);//APBGame.cHostingServer.SetDistrictInstanceType2nd
	void Lock(bool bLock);//APBGame.cHostingServer.Lock
	void ShutDown(struct FString sType);//APBGame.cHostingServer.ShutDown
	void PreInit();//APBGame.cHostingServer.PreInit
	void SetDistrictState(unsigned char eDistrictState);//APBGame.cHostingServer.SetDistrictState
	class AcAPBPlayerReplicationInfo* GetPRI(int nCharacterUID);//APBGame.cHostingServer.GetPRI
	void PreExit();//APBGame.cHostingServer.PreExit
	class AcAPBPlayerController* GetPC(int nCharacterUID);//APBGame.cHostingServer.GetPC
	unsigned char GetDistrictState();//APBGame.cHostingServer.GetDistrictState
	class UEngine* GetEngine();//APBGame.cHostingServer.GetEngine
	void MessageBox(struct FString sMessage);//APBGame.cHostingServer.MessageBox
};
UClass* UcHostingServer::pClassPointer = NULL;

//0x000034 (0x000074 - 0x000040)
//cHostingVoice[0x103976C0]
class UcHostingVoice : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	int                                                m_nVoiceAccountID;                                		// 0x000044 (0x0004)              
	struct FString                                     m_sUsername;                                      		// 0x000048 (0x000C)              
	struct FString                                     m_sPassword;                                      		// 0x000054 (0x000C)              
	struct FString                                     m_sURL;                                           		// 0x000060 (0x000C)              
	int                                                m_nPortMin;                                       		// 0x00006C (0x0004)              
	int                                                m_nPortMax;                                       		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingVoice");
		return pClassPointer;
	};

public:
	void Init(class UcHostingClient* Client);//APBGame.cHostingVoice.Init
	void Cleanup();//APBGame.cHostingVoice.Cleanup
};
UClass* UcHostingVoice::pClassPointer = NULL;

//0x000001 (0x0000B5 - 0x0000B4)
//cUIAction_CheckHostingClientState[0x10397590]
class UcUIAction_CheckHostingClientState : public UUIAction
{
public:
	unsigned char                                      m_eCheckClientState;                              		// 0x0000B4 (0x0001)              PROPERTY: etClientState

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cUIAction_CheckHostingClientState");
		return pClassPointer;
	};
};
UClass* UcUIAction_CheckHostingClientState::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cHostingErrors[0x10397460]
class UcHostingErrors : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingErrors");
		return pClassPointer;
	};
};
UClass* UcHostingErrors::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cHostingLimits[0x10397330]
class UcHostingLimits : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingLimits");
		return pClassPointer;
	};
};
UClass* UcHostingLimits::pClassPointer = NULL;

//0x000014 (0x000074 - 0x000060)
//cGraffitiDescriptor[0x10397200]
class UcGraffitiDescriptor : public UcAssetCustomisation
{
public:
	struct FGuid                                       m_Guid;                                           		// 0x000060 (0x0010)              
	class UcSymbolDescriptor*                          m_Symbol;                                         		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGraffitiDescriptor");
		return pClassPointer;
	};
};
UClass* UcGraffitiDescriptor::pClassPointer = NULL;

//0x000020 (0x000080 - 0x000060)
//cSymbolDescriptor[0x103970D0]
class UcSymbolDescriptor : public UcAssetCustomisation
{
public:
	DWORD                                              VfTable_i2DCompositionInterface;                  		// 0x000060 (0x0004)              
	TArray<struct FSymbolLayer>                        m_aLayers;                                        		// 0x000064 (0x000C)              
	int                                                m_nRoyaltyFee;                                    		// 0x000070 (0x0004)              
	TArray<int>                                        m_aLookupTable;                                   		// 0x000074 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSymbolDescriptor");
		return pClassPointer;
	};

public:
	int GetCostAPBCash();//APBGame.cSymbolDescriptor.GetCostAPBCash
	int GetCostRewardTokens();//APBGame.cSymbolDescriptor.GetCostRewardTokens
};
UClass* UcSymbolDescriptor::pClassPointer = NULL;

//0x00003C (0x00029C - 0x000260)
//cGraffitiDisplayPoint[0x10396FA0]
class AcGraffitiDisplayPoint : public AActor
{
public:
	DWORD                                              VfTable_IUseInterface;                            		// 0x000260 (0x0004)              
	class UMaterialInstanceConstant*                   m_MaterialInstance;                               		// 0x000264 (0x0004)              
	class UStaticMeshComponent*                        m_StaticMeshComponent;                            		// 0x000268 (0x0004)              
	struct FBoxSphereBounds                            m_Bounds;                                         		// 0x00026C (0x001C)              
	float                                              m_fTexelFactor;                                   		// 0x000288 (0x0004)              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x00028C (0x0004)              
	unsigned long                                      m_bSpraying : 1;                                  		// 0x000290 (0x0004) [0x00000001] 
	class AcDistrictBlock*                             m_Owner;                                          		// 0x000294 (0x0004)              
	class UTexture2D*                                  m_CurrentTexture;                                 		// 0x000298 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGraffitiDisplayPoint");
		return pClassPointer;
	};

public:
	void TextureChanged(class UTexture2D* PrevTexture,class UTexture2D* NewTexture);//APBGame.cGraffitiDisplayPoint.TextureChanged
	void SprayedBeginState(class APawn* User);//APBGame.cGraffitiDisplayPoint.SprayedBeginState
	void SetTexture(class UTexture2D* Tex);//APBGame.cGraffitiDisplayPoint.SetTexture
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cGraffitiDisplayPoint.IsCSASupported
	bool IsPawnInFrontOf(class APawn* pUser);//APBGame.cGraffitiDisplayPoint.IsPawnInFrontOf
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cGraffitiDisplayPoint.EndUse
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cGraffitiDisplayPoint.BeginUse
};
UClass* AcGraffitiDisplayPoint::pClassPointer = NULL;

//0x000030 (0x0002CC - 0x00029C)
//cCustomGraffitiDisplayPoint[0x10396E70]
class AcCustomGraffitiDisplayPoint : public AcGraffitiDisplayPoint
{
public:
	struct FGuid                                       m_CustomisationGuid;                              		// 0x00029C (0x0010)              
	struct FGuid                                       m_PreviousCustomisationGuid;                      		// 0x0002AC (0x0010)              
	class UcCompressedAssetCustomisation*              m_CompressedCustomisationData;                    		// 0x0002BC (0x0004)              
	class UTexture2D*                                  m_CachedTexture;                                  		// 0x0002C0 (0x0004)              
	unsigned char                                      m_eNotifyFlag;                                    		// 0x0002C4 (0x0001)              PROPERTY: etNotifyFlag
	unsigned char                                      _0x0002C5[0x3];                                   		// 0x0002C5 (0x0003) MISSED OFFSET
	unsigned long                                      m_bCaptured : 1;                                  		// 0x0002C8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCustomGraffitiDisplayPoint");
		return pClassPointer;
	};

public:
	void SetCachedTexture(class UTexture2D* Texture);//APBGame.cCustomGraffitiDisplayPoint.SetCachedTexture
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cCustomGraffitiDisplayPoint.IsCSASupported
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cCustomGraffitiDisplayPoint.BeginUse
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cCustomGraffitiDisplayPoint.ReplicatedEvent
	void SetInitialState();//APBGame.cCustomGraffitiDisplayPoint.SetInitialState
	void NotifyCustomisationChanged();//APBGame.cCustomGraffitiDisplayPoint.NotifyCustomisationChanged
	void SetCustomisationNew(class APawn* User);//APBGame.cCustomGraffitiDisplayPoint.SetCustomisationNew
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cCustomGraffitiDisplayPoint.EndUse
};
UClass* AcCustomGraffitiDisplayPoint::pClassPointer = NULL;

//0x000000 (0x0002CC - 0x0002CC)
//cTurfBoundaryMarker[0x10396D40]
class AcTurfBoundaryMarker : public AcCustomGraffitiDisplayPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTurfBoundaryMarker");
		return pClassPointer;
	};

public:
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cTurfBoundaryMarker.IsCSASupported
};
UClass* AcTurfBoundaryMarker::pClassPointer = NULL;

//0x000008 (0x0002D4 - 0x0002CC)
//cTurfControlPointMarker[0x10396C10]
class AcTurfControlPointMarker : public AcCustomGraffitiDisplayPoint
{
public:
	unsigned char                                      m_eFaction;                                       		// 0x0002CC (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x0002CD[0x3];                                   		// 0x0002CD (0x0003) MISSED OFFSET
	class UcObservers*                                 m_aObservers;                                     		// 0x0002D0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTurfControlPointMarker");
		return pClassPointer;
	};

public:
	unsigned char GetFaction();//APBGame.cTurfControlPointMarker.GetFaction
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cTurfControlPointMarker.BeginUse
	void Capture(class AcAPBPlayerController* PC);//APBGame.cTurfControlPointMarker.Capture
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cTurfControlPointMarker.IsCSASupported
	class UcObservers* GetObservers();//APBGame.cTurfControlPointMarker.GetObservers
};
UClass* AcTurfControlPointMarker::pClassPointer = NULL;

//0x000054 (0x0002F0 - 0x00029C)
//cGraffitiCrimeTarget[0x10396AE0]
class AcGraffitiCrimeTarget : public AcGraffitiDisplayPoint
{
public:
	DWORD                                              VfTable_ITaskTargetInterface;                     		// 0x00029C (0x0004)              
	struct FEnumeratedName                             m_eGraffitiTaskTargetType;                        		// 0x0002A0 (0x0010)              
	TArray<class UTexture2D*>                          m_aTextures;                                      		// 0x0002B0 (0x000C)              
	TArray<class UTexture2D*>                          m_aAntiTextures;                                  		// 0x0002BC (0x000C)              
	TArray<class UTexture2D*>                          m_aNeutralTextures;                               		// 0x0002C8 (0x000C)              
	unsigned char                                      m_eGraffitiState;                                 		// 0x0002D4 (0x0001)              PROPERTY: etGraffitiState
	unsigned char                                      m_eGraffitiCSA;                                   		// 0x0002D5 (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eSprayedFaction;                                		// 0x0002D6 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x0002D7 (0x0001)              PROPERTY: etTaskTargetVFXState
	DWORD                                              m_pLastPartialSprayTeam;                          		// 0x0002D8 (0x0004)              
	struct FGraffitiTextureData                        m_TextureData;                                    		// 0x0002DC (0x0008)              
	class UcTaskTargetComponent*                       m_TaskTarget;                                     		// 0x0002E4 (0x0004)              
	int                                                m_nRepTaskOperationID;                            		// 0x0002E8 (0x0004)              
	unsigned long                                      m_bPlayerTaskRelevant : 1;                        		// 0x0002EC (0x0004) [0x00000001] 
	unsigned long                                      m_bPlayerCanTriggerTask : 1;                      		// 0x0002EC (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGraffitiCrimeTarget");
		return pClassPointer;
	};

public:
	void SetGraffitiTexture(int nIndex,unsigned char eType);//APBGame.cGraffitiCrimeTarget.SetGraffitiTexture
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cGraffitiCrimeTarget.PartiallyTriggerTaskTarget
	bool IsTriggered();//APBGame.cGraffitiCrimeTarget.IsTriggered
	void DeactivateTaskTarget();//APBGame.cGraffitiCrimeTarget.DeactivateTaskTarget
	class UcTaskTargetComponent* GetTaskTargetComponent();//APBGame.cGraffitiCrimeTarget.GetTaskTargetComponent
	void ClientNotifyTaskVFXStateChanged(unsigned char eTriggeredState);//APBGame.cGraffitiCrimeTarget.ClientNotifyTaskVFXStateChanged
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cGraffitiCrimeTarget.EndUse
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.cGraffitiCrimeTarget.ActivateTaskTarget
	void SelectRandomGraffitiTexture();//APBGame.cGraffitiCrimeTarget.SelectRandomGraffitiTexture
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cGraffitiCrimeTarget.TriggerTaskTarget
	bool IsValidAntiGraffitiUser(class AcAPBPlayerController* pPC);//APBGame.cGraffitiCrimeTarget.IsValidAntiGraffitiUser
	void SelectGraffitiTexture(class APawn* User);//APBGame.cGraffitiCrimeTarget.SelectGraffitiTexture
	void CleanUpTaskTarget();//APBGame.cGraffitiCrimeTarget.CleanUpTaskTarget
	void MoveTargetState(class AActor* targetActor);//APBGame.cGraffitiCrimeTarget.MoveTargetState
	void OnTaskCSAStarted(class AcAPBPlayerController* pPC);//APBGame.cGraffitiCrimeTarget.OnTaskCSAStarted
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cGraffitiCrimeTarget.BeginUse
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cGraffitiCrimeTarget.ReplicatedEvent
	void ClientNotifyCanTriggerTaskChanged(bool i_bPlayerCanTriggerTask);//APBGame.cGraffitiCrimeTarget.ClientNotifyCanTriggerTaskChanged
	bool IsPartOfActiveTask();//APBGame.cGraffitiCrimeTarget.IsPartOfActiveTask
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.cGraffitiCrimeTarget.InitTaskTarget
	bool IsResetable();//APBGame.cGraffitiCrimeTarget.IsResetable
	void ClientNotifyTaskRelevantChanged(bool i_bTaskRelevant);//APBGame.cGraffitiCrimeTarget.ClientNotifyTaskRelevantChanged
	void ClientNotifyTaskOperationChanged(int nTaskOperationIndex);//APBGame.cGraffitiCrimeTarget.ClientNotifyTaskOperationChanged
	bool IsAllowedToTransitionToSprayedState();//APBGame.cGraffitiCrimeTarget.IsAllowedToTransitionToSprayedState
	void OnTaskCSACompleted(class AcAPBPlayerController* pPC);//APBGame.cGraffitiCrimeTarget.OnTaskCSACompleted
	void SetTextureData(int nIndex,unsigned char eType);//APBGame.cGraffitiCrimeTarget.SetTextureData
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cGraffitiCrimeTarget.IsCSASupported
	bool IsValidGraffitiUser(class AcAPBPlayerController* pPC);//APBGame.cGraffitiCrimeTarget.IsValidGraffitiUser
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cGraffitiCrimeTarget.ResetTaskTarget
	void OnTaskCSACancelled(class AcAPBPlayerController* pPC);//APBGame.cGraffitiCrimeTarget.OnTaskCSACancelled
	void OnGraffitiSprayed(class AcAPBPlayerController* pPC);//APBGame.cGraffitiCrimeTarget.OnGraffitiSprayed
	void SetInitialState();//APBGame.cGraffitiCrimeTarget.SetInitialState
};
UClass* AcGraffitiCrimeTarget::pClassPointer = NULL;

//0x000000 (0x0002F0 - 0x0002F0)
//cGraffitiCrimeTargetPlaceholder[0x103969B0]
class AcGraffitiCrimeTargetPlaceholder : public AcGraffitiCrimeTarget
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGraffitiCrimeTargetPlaceholder");
		return pClassPointer;
	};

public:
	bool IsPawnInFrontOf(class APawn* pUser);//APBGame.cGraffitiCrimeTargetPlaceholder.IsPawnInFrontOf
};
UClass* AcGraffitiCrimeTargetPlaceholder::pClassPointer = NULL;

//0x000018 (0x000278 - 0x000260)
//cGraffitiTestActor[0x10396880]
class AcGraffitiTestActor : public AActor
{
public:
	struct FString                                     m_sTargetPackage;                                 		// 0x000260 (0x000C)              
	class UcGraffitiDescriptor*                        m_descriptor;                                     		// 0x00026C (0x0004)              
	FVector2                                           m_Dimensions;                                     		// 0x000270 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGraffitiTestActor");
		return pClassPointer;
	};
};
UClass* AcGraffitiTestActor::pClassPointer = NULL;

//0x0000C0 (0x0002A0 - 0x0001E0)
//cBoxComponent[0x10396750]
class UcBoxComponent : public UPrimitiveComponent
{
public:
	FVector3                                           m_Verts[0x8];                                     		// 0x0001E0 (0x0060)              
	FVector3                                           m_WorldVerts[0x8];                                		// 0x000240 (0x0060)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBoxComponent");
		return pClassPointer;
	};
};
UClass* UcBoxComponent::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cAPBVolume[0x10396620]
class AcAPBVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBVolume");
		return pClassPointer;
	};

public:
	bool Encompasses2D(FVector3 Point);//APBGame.cAPBVolume.Encompasses2D
	struct FLinearColor GetColour();//APBGame.cAPBVolume.GetColour
	bool RandomPointInVolume(int* nRandomSeed,FVector3* Point,int nMaxIterations);//APBGame.cAPBVolume.RandomPointInVolume
};
UClass* AcAPBVolume::pClassPointer = NULL;

//0x000004 (0x0002A0 - 0x00029C)
//cAmmoVolume[0x103964F0]
class AcAmmoVolume : public AcAPBVolume
{
public:
	class AActor*                                      m_pAmmoSupplier;                                  		// 0x00029C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAmmoVolume");
		return pClassPointer;
	};

public:
	void NotifyUnTouch(class AActor* Other);//APBGame.cAmmoVolume.NotifyUnTouch
	void UnTouch(class AActor* Other);//APBGame.cAmmoVolume.UnTouch
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cAmmoVolume.Touch
	void NotifyTouch(class AActor* Other);//APBGame.cAmmoVolume.NotifyTouch
};
UClass* AcAmmoVolume::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cAPBTriggerVolume[0x103963C0]
class AcAPBTriggerVolume : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBTriggerVolume");
		return pClassPointer;
	};

public:
	void TelefragPawn(class APawn* PawnToTelefrag);//APBGame.cAPBTriggerVolume.TelefragPawn
};
UClass* AcAPBTriggerVolume::pClassPointer = NULL;

//0x000004 (0x0002A0 - 0x00029C)
//cCustomisationZone[0x10396290]
class AcCustomisationZone : public AcAPBTriggerVolume
{
public:
	int                                                m_nHUDMarkerID;                                   		// 0x00029C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCustomisationZone");
		return pClassPointer;
	};

public:
	void TermHUDMarker();//APBGame.cCustomisationZone.TermHUDMarker
	void InitHUDMarker();//APBGame.cCustomisationZone.InitHUDMarker
	void DisplayHUDMessage(class AcAPBPlayerController* pPC);//APBGame.cCustomisationZone.DisplayHUDMessage
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cCustomisationZone.Touch
	void UnTouch(class AActor* Other);//APBGame.cCustomisationZone.UnTouch
	void RemoveHUDMessages(class AcAPBPlayerController* pPC);//APBGame.cCustomisationZone.RemoveHUDMessages
};
UClass* AcCustomisationZone::pClassPointer = NULL;

//0x000004 (0x0002A0 - 0x00029C)
//cMarketplaceZone[0x10396160]
class AcMarketplaceZone : public AcAPBTriggerVolume
{
public:
	int                                                m_nHUDMarkerID;                                   		// 0x00029C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMarketplaceZone");
		return pClassPointer;
	};

public:
	void InitHUDMarker();//APBGame.cMarketplaceZone.InitHUDMarker
	void TermHUDMarker();//APBGame.cMarketplaceZone.TermHUDMarker
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cMarketplaceZone.Touch
	void UnTouch(class AActor* Other);//APBGame.cMarketplaceZone.UnTouch
};
UClass* AcMarketplaceZone::pClassPointer = NULL;

//0x000010 (0x0002AC - 0x00029C)
//cModalInteractionTriggerVolume[0x10396030]
class AcModalInteractionTriggerVolume : public AcAPBTriggerVolume
{
public:
	TArray<class AcAPBPlayerReplicationInfo*>          m_PRIs;                                           		// 0x00029C (0x000C)              
	class UUIScene*                                    m_UIScene;                                        		// 0x0002A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cModalInteractionTriggerVolume");
		return pClassPointer;
	};

public:
	void UnTouch(class AActor* Other);//APBGame.cModalInteractionTriggerVolume.UnTouch
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cModalInteractionTriggerVolume.Touch
};
UClass* AcModalInteractionTriggerVolume::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cOutOfBoundsVolume[0x10395F00]
class AcOutOfBoundsVolume : public AcAPBTriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cOutOfBoundsVolume");
		return pClassPointer;
	};

public:
	void TouchNative(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cOutOfBoundsVolume.TouchNative
	struct FLinearColor GetColour();//APBGame.cOutOfBoundsVolume.GetColour
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cOutOfBoundsVolume.Touch
};
UClass* AcOutOfBoundsVolume::pClassPointer = NULL;

//0x000020 (0x0002BC - 0x00029C)
//cVehicleRepairTrigger[0x10395DD0]
class AcVehicleRepairTrigger : public AcAPBTriggerVolume
{
public:
	DWORD                                              VfTable_IiVehicleRepairer;                        		// 0x00029C (0x0004)              
	TArray<struct FtRepairOperation>                   m_aRepairOperations;                              		// 0x0002A0 (0x000C)              
	TArray<class AcAPBVehicleBase*>                    m_aContainedVehicles;                             		// 0x0002AC (0x000C)              
	int                                                m_nHUDMarkerID;                                   		// 0x0002B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleRepairTrigger");
		return pClassPointer;
	};

public:
	void OnRepairAttributesModified(class UiRepairableVehicle* Vehicle);//APBGame.cVehicleRepairTrigger.OnRepairAttributesModified
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cVehicleRepairTrigger.Touch
	bool BeginRepair(class UiRepairableVehicle* Vehicle,class AcAPBPlayerController* payingPlayer);//APBGame.cVehicleRepairTrigger.BeginRepair
	bool IsCurrentlyRepairing(class UiRepairableVehicle* Vehicle);//APBGame.cVehicleRepairTrigger.IsCurrentlyRepairing
	void InitHUDMarker();//APBGame.cVehicleRepairTrigger.InitHUDMarker
	void TermHUDMarker();//APBGame.cVehicleRepairTrigger.TermHUDMarker
	void NotifyTouch(class AActor* Other);//APBGame.cVehicleRepairTrigger.NotifyTouch
	void OnRepairCancelled(class UiRepairableVehicle* Vehicle);//APBGame.cVehicleRepairTrigger.OnRepairCancelled
	bool CanBeginRepair(class UiRepairableVehicle* Vehicle,class AcAPBPlayerController* payingPlayer);//APBGame.cVehicleRepairTrigger.CanBeginRepair
	void UnTouch(class AActor* Other);//APBGame.cVehicleRepairTrigger.UnTouch
	void NotifyUnTouch(class AActor* Other);//APBGame.cVehicleRepairTrigger.NotifyUnTouch
	void EndRepair(class UiRepairableVehicle* Vehicle,bool bCancel);//APBGame.cVehicleRepairTrigger.EndRepair
	void OnRepairCompleted(class UiRepairableVehicle* Vehicle);//APBGame.cVehicleRepairTrigger.OnRepairCompleted
	void UpdateRepairOperations(float fDeltaTime);//APBGame.cVehicleRepairTrigger.UpdateRepairOperations
};
UClass* AcVehicleRepairTrigger::pClassPointer = NULL;

//0x000014 (0x0002B0 - 0x00029C)
//cFactionalRestrictionVolume[0x10395CA0]
class AcFactionalRestrictionVolume : public AcAPBVolume
{
public:
	struct FEnumeratedName                             m_eFactionRestriction;                            		// 0x00029C (0x0010)              
	DWORD                                              m_pSDDFactionRestrictionInfo;                     		// 0x0002AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cFactionalRestrictionVolume");
		return pClassPointer;
	};

public:
	void BumpNative(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitNormal);//APBGame.cFactionalRestrictionVolume.BumpNative
	void Bump(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitNormal);//APBGame.cFactionalRestrictionVolume.Bump
	struct FLinearColor GetColour();//APBGame.cFactionalRestrictionVolume.GetColour
	void EncroachedBy(class AActor* Other);//APBGame.cFactionalRestrictionVolume.EncroachedBy
	void SetAPBCollision(struct FsAPBCollision newAPBCollision);//APBGame.cFactionalRestrictionVolume.SetAPBCollision
	void EncroachedByNative(class AActor* Other);//APBGame.cFactionalRestrictionVolume.EncroachedByNative
};
UClass* AcFactionalRestrictionVolume::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cLCSpawnBlockingVolume[0x10395B70]
class AcLCSpawnBlockingVolume : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLCSpawnBlockingVolume");
		return pClassPointer;
	};

public:
	void SetAPBCollision(struct FsAPBCollision newAPBCollision);//APBGame.cLCSpawnBlockingVolume.SetAPBCollision
};
UClass* AcLCSpawnBlockingVolume::pClassPointer = NULL;

//0x00000C (0x0002A8 - 0x00029C)
//cMapVolume[0x10395A40]
class AcMapVolume : public AcAPBVolume
{
public:
	class UTexture2D*                                  m_DistanceFieldTexture;                           		// 0x00029C (0x0004)              
	class UTexture2D*                                  m_DiffuseTexture;                                 		// 0x0002A0 (0x0004)              
	unsigned long                                      m_bUseFullDistrictMapSize : 1;                    		// 0x0002A4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMapVolume");
		return pClassPointer;
	};

public:
	void NotifyUnTouch(class AActor* Other);//APBGame.cMapVolume.NotifyUnTouch
	void NotifyTouch(class AActor* Other);//APBGame.cMapVolume.NotifyTouch
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cMapVolume.Touch
	void UnTouch(class AActor* Other);//APBGame.cMapVolume.UnTouch
};
UClass* AcMapVolume::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cSafeHeightVolume[0x10395910]
class AcSafeHeightVolume : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSafeHeightVolume");
		return pClassPointer;
	};
};
UClass* AcSafeHeightVolume::pClassPointer = NULL;

//0x000010 (0x0002AC - 0x00029C)
//cSpawnVolume[0x103957E0]
class AcSpawnVolume : public AcAPBVolume
{
public:
	DWORD                                              VfTable_ISpawnPointInterface;                     		// 0x00029C (0x0004)              
	class ACameraActor*                                CameraRespawnNode;                                		// 0x0002A0 (0x0004)              
	class AcPlayerCharacterSpawnDirection*             m_SpawnDirection;                                 		// 0x0002A4 (0x0004)              
	int                                                m_nHUDMarkerID;                                   		// 0x0002A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSpawnVolume");
		return pClassPointer;
	};

public:
	void Destroyed();//APBGame.cSpawnVolume.Destroyed
	class ACameraActor* RetCameraRespawnNode();//APBGame.cSpawnVolume.RetCameraRespawnNode
};
UClass* AcSpawnVolume::pClassPointer = NULL;

//0x00001C (0x0002C8 - 0x0002AC)
//cPlayerCharacterMissionSpawnZone[0x103956B0]
class AcPlayerCharacterMissionSpawnZone : public AcSpawnVolume
{
public:
	unsigned char                                      m_eMissionSide;                                   		// 0x0002AC (0x0001)              PROPERTY: etMissionSide
	unsigned char                                      _0x0002AD[0x3];                                   		// 0x0002AD (0x0003) MISSED OFFSET
	TArray<struct FEnumeratedName>                     m_Themes;                                         		// 0x0002B0 (0x000C)              
	TArray<int>                                        m_ThemesOrdinals;                                 		// 0x0002BC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerCharacterMissionSpawnZone");
		return pClassPointer;
	};

public:
	unsigned char RetMissionSide();//APBGame.cPlayerCharacterMissionSpawnZone.RetMissionSide
	struct FLinearColor GetColour();//APBGame.cPlayerCharacterMissionSpawnZone.GetColour
};
UClass* AcPlayerCharacterMissionSpawnZone::pClassPointer = NULL;

//0x00002C (0x0002D8 - 0x0002AC)
//cPlayerCharacterSpawnZone[0x10395580]
class AcPlayerCharacterSpawnZone : public AcSpawnVolume
{
public:
	unsigned long                                      m_bMasterSpawnZone : 1;                           		// 0x0002AC (0x0004) [0x00000001] 
	struct FEnumeratedName                             m_eSpawnFaction;                                  		// 0x0002B0 (0x0010)              
	int                                                m_eSpawnFactionOrdinal;                           		// 0x0002C0 (0x0004)              
	struct FEnumeratedName                             m_eRelatedContact;                                		// 0x0002C4 (0x0010)              
	int                                                m_eRelatedContactOrdinal;                         		// 0x0002D4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerCharacterSpawnZone");
		return pClassPointer;
	};

public:
	int GetContact();//APBGame.cPlayerCharacterSpawnZone.GetContact
	void PostBeginPlay();//APBGame.cPlayerCharacterSpawnZone.PostBeginPlay
	struct FLinearColor GetColour();//APBGame.cPlayerCharacterSpawnZone.GetColour
	unsigned char GetFaction();//APBGame.cPlayerCharacterSpawnZone.GetFaction
	void NativePostBeginPlay();//APBGame.cPlayerCharacterSpawnZone.NativePostBeginPlay
};
UClass* AcPlayerCharacterSpawnZone::pClassPointer = NULL;

//0x000000 (0x0002D8 - 0x0002D8)
//cAPBBotSpawnVolume[0x10395450]
class AcAPBBotSpawnVolume : public AcPlayerCharacterSpawnZone
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBBotSpawnVolume");
		return pClassPointer;
	};

public:
	struct FLinearColor GetColour();//APBGame.cAPBBotSpawnVolume.GetColour
	void Destroyed();//APBGame.cAPBBotSpawnVolume.Destroyed
	void PostBeginPlay();//APBGame.cAPBBotSpawnVolume.PostBeginPlay
};
UClass* AcAPBBotSpawnVolume::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cTaskItemSpawnZone[0x10395320]
class AcTaskItemSpawnZone : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskItemSpawnZone");
		return pClassPointer;
	};
};
UClass* AcTaskItemSpawnZone::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cVehicleBlockingVolume[0x103951F0]
class AcVehicleBlockingVolume : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleBlockingVolume");
		return pClassPointer;
	};

public:
	void SetAPBCollision(struct FsAPBCollision newAPBCollision);//APBGame.cVehicleBlockingVolume.SetAPBCollision
};
UClass* AcVehicleBlockingVolume::pClassPointer = NULL;

//0x000000 (0x0001E0 - 0x0001E0)
//cAPBVolumeRenderComponent[0x103950C0]
class UcAPBVolumeRenderComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBVolumeRenderComponent");
		return pClassPointer;
	};
};
UClass* UcAPBVolumeRenderComponent::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cAPBWorldBounds[0x10394F90]
class AcAPBWorldBounds : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBWorldBounds");
		return pClassPointer;
	};
};
UClass* AcAPBWorldBounds::pClassPointer = NULL;

//0x00000C (0x0001EC - 0x0001E0)
//cFlatTexturedQuadComponent[0x10394E60]
class UcFlatTexturedQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  m_Texture;                                        		// 0x0001E0 (0x0004)              
	int                                                m_nWidth;                                         		// 0x0001E4 (0x0004)              
	int                                                m_nLength;                                        		// 0x0001E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cFlatTexturedQuadComponent");
		return pClassPointer;
	};
};
UClass* UcFlatTexturedQuadComponent::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//cPlayerCharacterSpawnDirection[0x10394D30]
class AcPlayerCharacterSpawnDirection : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerCharacterSpawnDirection");
		return pClassPointer;
	};
};
UClass* AcPlayerCharacterSpawnDirection::pClassPointer = NULL;

//0x000054 (0x0002F0 - 0x00029C)
//cDistrictBlock[0x10394C00]
class AcDistrictBlock : public AcAPBVolume
{
public:
	struct FEnumeratedName                             m_eDistrictBlockName;                             		// 0x00029C (0x0010)              
	TArray<struct FTaskTargetPool>                     m_TaskTargetPools;                                		// 0x0002AC (0x000C)              
	TArray<class URWTechNode*>                         m_LCSpawnDestroyNodes;                            		// 0x0002B8 (0x000C)              
	TArray<float>                                      m_DistrictBlockDistances;                         		// 0x0002C4 (0x000C)              
	int                                                m_nDistrictBlockArrayIndex;                       		// 0x0002D0 (0x0004)              
	DWORD                                              m_pSddDistrictBlock;                              		// 0x0002D4 (0x0004)              
	TArray<int>                                        m_RouteControlElementCounts;                      		// 0x0002D8 (0x000C)              
	TArray<class AcMinigameSpawner*>                   m_MinigameSpawners;                               		// 0x0002E4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDistrictBlock");
		return pClassPointer;
	};

public:
	void UnTouch(class AActor* Other);//APBGame.cDistrictBlock.UnTouch
	void SetDistrictBlockArrayIndex(int I);//APBGame.cDistrictBlock.SetDistrictBlockArrayIndex
	bool IsDefaultObject(class UObject* obj);//APBGame.cDistrictBlock.IsDefaultObject
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cDistrictBlock.Touch
	bool AddPotentialTaskTarget(class AActor* Actor,bool bStrictTargetValidation,bool bIgnoreEncompassCheck);//APBGame.cDistrictBlock.AddPotentialTaskTarget
	void ResetMapFeatureCounts();//APBGame.cDistrictBlock.ResetMapFeatureCounts
};
UClass* AcDistrictBlock::pClassPointer = NULL;

//0x000010 (0x0002A8 - 0x000298)
//cInteractiveDynamicSMActor[0x10394AD0]
class AcInteractiveDynamicSMActor : public ADynamicSMActor
{
public:
	DWORD                                              VfTable_IUseInterface;                            		// 0x000298 (0x0004)              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x00029C (0x0004)              
	float                                              m_fInfoDisplayMaxDist;                            		// 0x0002A0 (0x0004)              
	float                                              m_fHeightOffset;                                  		// 0x0002A4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cInteractiveDynamicSMActor");
		return pClassPointer;
	};

public:
	float RetHeight();//APBGame.cInteractiveDynamicSMActor.RetHeight
	void PostRenderFor(class APlayerController* PC,class UCanvas* Canvas,FVector3 CameraPosition,FVector3 CameraDir);//APBGame.cInteractiveDynamicSMActor.PostRenderFor
	void GetDebugText(struct FString* s1,struct FString* s2,struct FString* s3);//APBGame.cInteractiveDynamicSMActor.GetDebugText
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cInteractiveDynamicSMActor.BeginUse
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cInteractiveDynamicSMActor.IsCSASupported
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cInteractiveDynamicSMActor.EndUse
};
UClass* AcInteractiveDynamicSMActor::pClassPointer = NULL;

//0x000090 (0x0002F0 - 0x000260)
//cCheckpoint[0x103949A0]
class AcCheckpoint : public AActor
{
public:
	DWORD                                              VfTable_ITaskTargetInterface;                     		// 0x000260 (0x0004)              
	class UcTaskTargetComponent*                       m_TaskTarget;                                     		// 0x000264 (0x0004)              
	struct FEnumeratedName                             m_eCheckpointType;                                		// 0x000268 (0x0010)              
	TArray<class AActor*>                              m_aActorsNewlyEntered;                            		// 0x000278 (0x000C)              
	TArray<struct FtContainedPlayerInfo>               m_aMissionPlayersContained;                       		// 0x000284 (0x000C)              
	TArray<class AcAPBVehicleBase*>                    m_aContainedVehicleList;                          		// 0x000290 (0x000C)              
	TArray<class AcAPBPlayerController*>               m_aPlayersCompletedObjective;                     		// 0x00029C (0x000C)              
	TArray<struct FtCheckpointPlayerInfo>              m_aPendingPlayers;                                		// 0x0002A8 (0x000C)              
	TArray<class AcTaskItem*>                          m_aUniqueDeliveredTaskItems;                      		// 0x0002B4 (0x000C)              
	TArray<class AcAPBVehicleBase*>                    m_aDeliveredVehicles;                             		// 0x0002C0 (0x000C)              
	DWORD                                              m_pPendingTeam;                                   		// 0x0002CC (0x0004)              
	DWORD                                              m_pSddTaskTargetCheckpoint;                       		// 0x0002D0 (0x0004)              
	DWORD                                              m_pSddTaskOperationRendezvous;                    		// 0x0002D4 (0x0004)              
	DWORD                                              m_pSddTaskOperationItemDelivery;                  		// 0x0002D8 (0x0004)              
	DWORD                                              m_pSddTaskOperationEscort;                        		// 0x0002DC (0x0004)              
	DWORD                                              m_pSddTaskOperationTerritoryControl;              		// 0x0002E0 (0x0004)              
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x0002E4 (0x0001)              PROPERTY: etTaskTargetVFXState
	unsigned char                                      _0x0002E5[0x3];                                   		// 0x0002E5 (0x0003) MISSED OFFSET
	int                                                m_nRepTaskOperationID;                            		// 0x0002E8 (0x0004)              
	unsigned long                                      m_bPlayerTaskRelevant : 1;                        		// 0x0002EC (0x0004) [0x00000001] 
	unsigned long                                      m_bPlayerCanTriggerTask : 1;                      		// 0x0002EC (0x0004) [0x00000002] 
	unsigned long                                      m_bDebugAlwaysVisible : 1;                        		// 0x0002EC (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCheckpoint");
		return pClassPointer;
	};

public:
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cCheckpoint.TriggerTaskTarget
	void ClientNotifyCanTriggerTaskChanged(bool i_bPlayerCanTriggerTask);//APBGame.cCheckpoint.ClientNotifyCanTriggerTaskChanged
	void CleanUpTaskTarget();//APBGame.cCheckpoint.CleanUpTaskTarget
	void NotifyActorTouch(class AActor* Other);//APBGame.cCheckpoint.NotifyActorTouch
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cCheckpoint.ResetTaskTarget
	bool IsTriggerableByOpposition();//APBGame.cCheckpoint.IsTriggerableByOpposition
	void UnTouch(class AActor* Other);//APBGame.cCheckpoint.UnTouch
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cCheckpoint.Touch
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.cCheckpoint.ActivateTaskTarget
	void SetInitialState();//APBGame.cCheckpoint.SetInitialState
	void ReplicatedEvent(struct FName VarName);//APBGame.cCheckpoint.ReplicatedEvent
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cCheckpoint.PartiallyTriggerTaskTarget
	void ClientNotifyTaskVFXStateChanged(unsigned char eTriggeredState);//APBGame.cCheckpoint.ClientNotifyTaskVFXStateChanged
	void MoveTargetState(class AActor* targetActor);//APBGame.cCheckpoint.MoveTargetState
	void DeactivateTaskTarget();//APBGame.cCheckpoint.DeactivateTaskTarget
	void NotifyActorUnTouch(class AActor* Other);//APBGame.cCheckpoint.NotifyActorUnTouch
	class UcTaskTargetComponent* GetTaskTargetComponent();//APBGame.cCheckpoint.GetTaskTargetComponent
	void UpdateContainedVehicles();//APBGame.cCheckpoint.UpdateContainedVehicles
	void SetAlwaysVisible(bool bAlwaysVisible);//APBGame.cCheckpoint.SetAlwaysVisible
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.cCheckpoint.InitTaskTarget
	void ClientNotifyTaskOperationChanged(int nTaskOperationIndex);//APBGame.cCheckpoint.ClientNotifyTaskOperationChanged
	void NotifyPlayerEvent(int nMessage,int nParam,class AActor* Emitter);//APBGame.cCheckpoint.NotifyPlayerEvent
	void ClientNotifyTaskRelevantChanged(bool i_bTaskRelevant);//APBGame.cCheckpoint.ClientNotifyTaskRelevantChanged
};
UClass* AcCheckpoint::pClassPointer = NULL;

//0x00001C (0x000280 - 0x000264)
//cPlaceholderLocator[0x10394870]
class AcPlaceholderLocator : public AStaticMeshActor
{
public:
	int                                                m_nUID;                                           		// 0x000264 (0x0004)              
	float                                              m_fInfoDisplayMaxDist;                            		// 0x000268 (0x0004)              
	DWORD                                              m_InfoDisplayColour;                              		// 0x00026C (0x0004)              
	class UCylinderComponent*                          m_CylinderComponent;                              		// 0x000270 (0x0004)              
	class UMaterialInstanceConstant*                   m_FlashingMaterialInst;                           		// 0x000274 (0x0004)              
	class UMaterialInterface*                          m_DefaultMaterial;                                		// 0x000278 (0x0004)              
	class UMaterialInterface*                          m_FlashingMaterial;                               		// 0x00027C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlaceholderLocator");
		return pClassPointer;
	};

public:
	void SetMaterialNormal();//APBGame.cPlaceholderLocator.SetMaterialNormal
	float GetCollisionRadius();//APBGame.cPlaceholderLocator.GetCollisionRadius
	void PostRenderFor(class APlayerController* PC,class UCanvas* Canvas,FVector3 CameraPosition,FVector3 CameraDir);//APBGame.cPlaceholderLocator.PostRenderFor
	void SetMaterialFlashing();//APBGame.cPlaceholderLocator.SetMaterialFlashing
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cPlaceholderLocator.Touch
	int GetUID();//APBGame.cPlaceholderLocator.GetUID
	void PreBeginPlay();//APBGame.cPlaceholderLocator.PreBeginPlay
	float GetCollisionHeight();//APBGame.cPlaceholderLocator.GetCollisionHeight
	void SetMaterialDim();//APBGame.cPlaceholderLocator.SetMaterialDim
	void SetUID(int Uid);//APBGame.cPlaceholderLocator.SetUID
	struct FString GetDisplayName();//APBGame.cPlaceholderLocator.GetDisplayName
};
UClass* AcPlaceholderLocator::pClassPointer = NULL;

//0x000000 (0x000280 - 0x000280)
//cPlaceholderBlockingLocator[0x10394740]
class AcPlaceholderBlockingLocator : public AcPlaceholderLocator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlaceholderBlockingLocator");
		return pClassPointer;
	};
};
UClass* AcPlaceholderBlockingLocator::pClassPointer = NULL;

//0x000014 (0x000294 - 0x000280)
//cStaticCrimeTarget[0x10394610]
class AcStaticCrimeTarget : public AcPlaceholderBlockingLocator
{
public:
	DWORD                                              VfTable_ITaskTargetInterface;                     		// 0x000280 (0x0004)              
	unsigned char                                      m_eCrimeTargetType;                               		// 0x000284 (0x0001)              PROPERTY: etCrimeTargetEnvironmental
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x000285 (0x0001)              PROPERTY: etTaskTargetVFXState
	unsigned char                                      _0x000286[0x2];                                   		// 0x000286 (0x0002) MISSED OFFSET
	class UcTaskTargetComponent*                       m_TaskTarget;                                     		// 0x000288 (0x0004)              
	int                                                m_nRepTaskOperationID;                            		// 0x00028C (0x0004)              
	unsigned long                                      m_bPlayerTaskRelevant : 1;                        		// 0x000290 (0x0004) [0x00000001] 
	unsigned long                                      m_bPlayerCanTriggerTask : 1;                      		// 0x000290 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStaticCrimeTarget");
		return pClassPointer;
	};

public:
	void DeactivateTaskTarget();//APBGame.cStaticCrimeTarget.DeactivateTaskTarget
	void ReplicatedEvent(struct FName VarName);//APBGame.cStaticCrimeTarget.ReplicatedEvent
	void MoveTargetState(class AActor* targetActor);//APBGame.cStaticCrimeTarget.MoveTargetState
	void CleanUpTaskTarget();//APBGame.cStaticCrimeTarget.CleanUpTaskTarget
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cStaticCrimeTarget.TriggerTaskTarget
	unsigned char GetCrimeTargetTypeEnvironmental();//APBGame.cStaticCrimeTarget.GetCrimeTargetTypeEnvironmental
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.cStaticCrimeTarget.InitTaskTarget
	class UcTaskTargetComponent* GetTaskTargetComponent();//APBGame.cStaticCrimeTarget.GetTaskTargetComponent
	void ClientNotifyTaskOperationChanged(int nTaskOperationIndex);//APBGame.cStaticCrimeTarget.ClientNotifyTaskOperationChanged
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cStaticCrimeTarget.ResetTaskTarget
	void ClientNotifyCanTriggerTaskChanged(bool i_bPlayerCanTriggerTask);//APBGame.cStaticCrimeTarget.ClientNotifyCanTriggerTaskChanged
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cStaticCrimeTarget.PartiallyTriggerTaskTarget
	struct FString GetDisplayName();//APBGame.cStaticCrimeTarget.GetDisplayName
	void ClientNotifyTaskRelevantChanged(bool i_bTaskRelevant);//APBGame.cStaticCrimeTarget.ClientNotifyTaskRelevantChanged
	void ClientNotifyTaskVFXStateChanged(unsigned char eTriggeredState);//APBGame.cStaticCrimeTarget.ClientNotifyTaskVFXStateChanged
	void Bump(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitNormal);//APBGame.cStaticCrimeTarget.Bump
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.cStaticCrimeTarget.ActivateTaskTarget
};
UClass* AcStaticCrimeTarget::pClassPointer = NULL;

//0x000024 (0x00007D - 0x000059)
//cAmmoDepotComponent[0x103944E0]
class UcAmmoDepotComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	DWORD                                              VfTable_IiAmmoSupplier;                           		// 0x00005C (0x0004)              
	TArray<struct FtResupplyOperation>                 m_aResupplyOperations;                            		// 0x000060 (0x000C)              
	TArray<struct FtPendingResupplyInfo>               m_aPendingResupplyOperations;                     		// 0x00006C (0x000C)              
	int                                                m_HUDMarkerID;                                    		// 0x000078 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x00007C (0x0001)              PROPERTY: etFaction

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAmmoDepotComponent");
		return pClassPointer;
	};

public:
	int AmmoClipsLeft();//APBGame.cAmmoDepotComponent.AmmoClipsLeft
	void BeginInventoryAccess(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cAmmoDepotComponent.BeginInventoryAccess
	void NotifyConsumerAttributesModified(class UiAmmoConsumer* pConsumer);//APBGame.cAmmoDepotComponent.NotifyConsumerAttributesModified
	void EndInventoryAccess(class AcAPBPlayerController* pPlayer,bool bCancel);//APBGame.cAmmoDepotComponent.EndInventoryAccess
	void CancelAllResupplyOperations();//APBGame.cAmmoDepotComponent.CancelAllResupplyOperations
	bool CanPlayerAccessInventory(class AcAPBPlayerController* pPlayer);//APBGame.cAmmoDepotComponent.CanPlayerAccessInventory
	bool IsLimitedAmmoSupplier();//APBGame.cAmmoDepotComponent.IsLimitedAmmoSupplier
	unsigned char CheckCanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cAmmoDepotComponent.CheckCanResupplyPlayer
	class UcAmmoDepotComponent* RetAmmoDepotComponent();//APBGame.cAmmoDepotComponent.RetAmmoDepotComponent
	float RetAmmoResupplyRange();//APBGame.cAmmoDepotComponent.RetAmmoResupplyRange
	unsigned char CheckCanPlayerAccessInventory(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cAmmoDepotComponent.CheckCanPlayerAccessInventory
	bool IsRangeBasedAmmoSupplier();//APBGame.cAmmoDepotComponent.IsRangeBasedAmmoSupplier
	bool CanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cAmmoDepotComponent.CanResupplyPlayer
	FVector3 RetAmmoResupplyLocation();//APBGame.cAmmoDepotComponent.RetAmmoResupplyLocation
	bool WithdrawAmmoClip();//APBGame.cAmmoDepotComponent.WithdrawAmmoClip
	void NotifySupplierAttributesModified();//APBGame.cAmmoDepotComponent.NotifySupplierAttributesModified
	bool IsAmmoCarrier();//APBGame.cAmmoDepotComponent.IsAmmoCarrier
	bool IsResupplyingPlayer(class AcAPBPlayerController* pPlayer);//APBGame.cAmmoDepotComponent.IsResupplyingPlayer
	class AActor* RetAmmoSupplierActor();//APBGame.cAmmoDepotComponent.RetAmmoSupplierActor
	void EndResupply(class AcAPBPlayerController* pPlayer,bool bCancel,unsigned char eWeaponType);//APBGame.cAmmoDepotComponent.EndResupply
	void BeginResupply(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType);//APBGame.cAmmoDepotComponent.BeginResupply
};
UClass* UcAmmoDepotComponent::pClassPointer = NULL;

//0x000010 (0x0002B8 - 0x0002A8)
//cAmmoVendingMachine[0x103943B0]
class AcAmmoVendingMachine : public AcInteractiveDynamicSMActor
{
public:
	DWORD                                              VfTable_IiAmmoSupplier;                           		// 0x0002A8 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x0002AC (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x0002AD[0x3];                                   		// 0x0002AD (0x0003) MISSED OFFSET
	class UcAmmoDepotComponent*                        m_AmmoDepotComponent;                             		// 0x0002B0 (0x0004)              
	int                                                m_nHUDMarkerID;                                   		// 0x0002B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAmmoVendingMachine");
		return pClassPointer;
	};

public:
	bool CanPlayerAccessInventory(class AcAPBPlayerController* pPlayer);//APBGame.cAmmoVendingMachine.CanPlayerAccessInventory
	bool IsResupplyingPlayer(class AcAPBPlayerController* pPlayer);//APBGame.cAmmoVendingMachine.IsResupplyingPlayer
	void EndResupply(class AcAPBPlayerController* pPlayer,bool bCancel,unsigned char eWeaponType);//APBGame.cAmmoVendingMachine.EndResupply
	void CancelAllResupplyOperations();//APBGame.cAmmoVendingMachine.CancelAllResupplyOperations
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cAmmoVendingMachine.IsCSASupported
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cAmmoVendingMachine.BeginUse
	unsigned char CheckCanPlayerAccessInventory(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cAmmoVendingMachine.CheckCanPlayerAccessInventory
	class UcAmmoDepotComponent* RetAmmoDepotComponent();//APBGame.cAmmoVendingMachine.RetAmmoDepotComponent
	bool IsLimitedAmmoSupplier();//APBGame.cAmmoVendingMachine.IsLimitedAmmoSupplier
	bool WithdrawAmmoClip();//APBGame.cAmmoVendingMachine.WithdrawAmmoClip
	bool IsAmmoCarrier();//APBGame.cAmmoVendingMachine.IsAmmoCarrier
	void NotifySupplierAttributesModified();//APBGame.cAmmoVendingMachine.NotifySupplierAttributesModified
	void InitHUDMarker();//APBGame.cAmmoVendingMachine.InitHUDMarker
	bool IsRangeBasedAmmoSupplier();//APBGame.cAmmoVendingMachine.IsRangeBasedAmmoSupplier
	FVector3 RetAmmoResupplyLocation();//APBGame.cAmmoVendingMachine.RetAmmoResupplyLocation
	void BeginResupply(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType);//APBGame.cAmmoVendingMachine.BeginResupply
	int AmmoClipsLeft();//APBGame.cAmmoVendingMachine.AmmoClipsLeft
	void BeginInventoryAccess(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cAmmoVendingMachine.BeginInventoryAccess
	void EndInventoryAccess(class AcAPBPlayerController* pPlayer,bool bCancel);//APBGame.cAmmoVendingMachine.EndInventoryAccess
	bool CanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cAmmoVendingMachine.CanResupplyPlayer
	unsigned char CheckCanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cAmmoVendingMachine.CheckCanResupplyPlayer
	void NotifyConsumerAttributesModified(class UiAmmoConsumer* pConsumer);//APBGame.cAmmoVendingMachine.NotifyConsumerAttributesModified
	void TermHUDMarker();//APBGame.cAmmoVendingMachine.TermHUDMarker
	class AActor* RetAmmoSupplierActor();//APBGame.cAmmoVendingMachine.RetAmmoSupplierActor
	float RetAmmoResupplyRange();//APBGame.cAmmoVendingMachine.RetAmmoResupplyRange
};
UClass* AcAmmoVendingMachine::pClassPointer = NULL;

//0x000140 (0x0003A0 - 0x000260)
//cHoldableItemManager[0x10394280]
class AcHoldableItemManager : public AActor
{
public:
	int                                                m_nFlipFlop;                                      		// 0x000260 (0x0004)              
	class AcItem*                                      m_nClientOnCurrentItemChangedPrev;                		// 0x000264 (0x0004)              
	class AcEquipment*                                 m_CurrentEquipment;                               		// 0x000268 (0x0004)              
	class AcWeapon*                                    m_DeployedWeapons[0x4];                           		// 0x00026C (0x0010)              
	class AcWeapon*                                    m_GameplayOverrideWeapons[0x4];                   		// 0x00027C (0x0010)              
	struct FInventoryItem                              m_InventoryOverrideWeapons[0x4];                  		// 0x00028C (0x0090)              
	int                                                m_nGameplayOverrideWeaponLoadout;                 		// 0x00031C (0x0004)              
	DWORD                                              m_pGameplayOverrideWeaponLoadout;                 		// 0x000320 (0x0004)              
	class AcWeapon*                                    m_WitnessingWeapon;                               		// 0x000324 (0x0004)              
	int                                                m_nSelectedWeapon;                                		// 0x000328 (0x0004)              
	class AcItem*                                      m_PreviousItem;                                   		// 0x00032C (0x0004)              
	class AcWeapon*                                    m_LastRefiringWeapon;                             		// 0x000330 (0x0004)              
	class AcItem*                                      m_PrevHeldItem;                                   		// 0x000334 (0x0004)              
	class AcItem*                                      m_CurrentItem;                                    		// 0x000338 (0x0004)              
	class AcItem*                                      m_PendingItem;                                    		// 0x00033C (0x0004)              
	class AcEquipableTaskItem*                         m_HeldTaskItem;                                   		// 0x000340 (0x0004)              
	unsigned long                                      m_bSwitchingItems : 1;                            		// 0x000344 (0x0004) [0x00000001] 
	unsigned long                                      m_bClientPendingActiveTransition : 1;             		// 0x000344 (0x0004) [0x00000002] 
	unsigned long                                      m_bClientAttemptingReload : 1;                    		// 0x000344 (0x0004) [0x00000004] 
	unsigned long                                      m_bClientThrowingGrenade : 1;                     		// 0x000344 (0x0004) [0x00000008] 
	unsigned long                                      m_bClientThrowingGrenadeStopFire : 1;             		// 0x000344 (0x0004) [0x00000010] 
	unsigned long                                      m_bDuringTaskItemPickup : 1;                      		// 0x000344 (0x0004) [0x00000020] 
	unsigned long                                      m_bIsInterrupted : 1;                             		// 0x000344 (0x0004) [0x00000040] 
	unsigned long                                      m_bSpawnedOnClient : 1;                           		// 0x000344 (0x0004) [0x00000080] 
	unsigned long                                      m_bNotifiedServerSpawned : 1;                     		// 0x000344 (0x0004) [0x00000100] 
	unsigned long                                      m_bDeleteModifierItemUponUnequip : 1;             		// 0x000344 (0x0004) [0x00000200] 
	TArray<class AcTaskItem*>                          m_SmallTaskItems;                                 		// 0x000348 (0x000C)              
	int                                                m_nNumSmallTaskItems;                             		// 0x000354 (0x0004)              
	class AcTaskItem*                                  m_pOpenWorldCashPoolTaskItem;                     		// 0x000358 (0x0004)              
	class AcAPBPawn*                                   m_OwningPawn;                                     		// 0x00035C (0x0004)              
	unsigned char                                      m_ImmediateSwitchFlags;                           		// 0x000360 (0x0001)              PROPERTY: ChangeWeaponInstantFlags
	unsigned char                                      m_ePickupAvailability;                            		// 0x000361 (0x0001)              PROPERTY: etWeaponPickupAvailability
	unsigned char                                      _0x000362[0x2];                                   		// 0x000362 (0x0002) MISSED OFFSET
	class AcItem*                                      m_pModifierItem;                                  		// 0x000364 (0x0004)              
	class AcItem*                                      m_pPendingModifierItem;                           		// 0x000368 (0x0004)              
	class AcWeapon*                                    m_pPickedUpWeapon;                                		// 0x00036C (0x0004)              
	class AActor*                                      m_pPickupOriginalOwner;                           		// 0x000370 (0x0004)              
	int                                                m_nPickupCount;                                   		// 0x000374 (0x0004)              
	int                                                m_ePickupGiftBox;                                 		// 0x000378 (0x0004)              
	struct FScriptDelegate                             __OnItemChanged__Delegate;                        		// 0x00037C (0x000C)              
	struct FScriptDelegate                             __UI_OnInventoryChanged__Delegate;                		// 0x000388 (0x000C)              
	struct FScriptDelegate                             __UI_OnInventoryChanged2__Delegate;               		// 0x000394 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHoldableItemManager");
		return pClassPointer;
	};

public:
	class AcWeapon* RetDeployedWeapon(unsigned char eSlot);//APBGame.cHoldableItemManager.RetDeployedWeapon
	void CallOnItemChangedDelegate();//APBGame.cHoldableItemManager.CallOnItemChangedDelegate
	void CallServerSelectNone();//APBGame.cHoldableItemManager.CallServerSelectNone
	void ClientReloadFailed();//APBGame.cHoldableItemManager.ClientReloadFailed
	void ServerReloadWeapon();//APBGame.cHoldableItemManager.ServerReloadWeapon
	void CallServerGiftAllAmmo();//APBGame.cHoldableItemManager.CallServerGiftAllAmmo
	int RetNumGroupedTaskItems();//APBGame.cHoldableItemManager.RetNumGroupedTaskItems
	void UpdateWeaponLoadout();//APBGame.cHoldableItemManager.UpdateWeaponLoadout
	void ReEquipCurrentWeapon();//APBGame.cHoldableItemManager.ReEquipCurrentWeapon
	bool ForceUnequipImmediate();//APBGame.cHoldableItemManager.ForceUnequipImmediate
	void UI_SetOnInventoryChanged2(struct FScriptDelegate Delegate);//APBGame.cHoldableItemManager.UI_SetOnInventoryChanged2
	class AcItem* RetCurrentItem();//APBGame.cHoldableItemManager.RetCurrentItem
	void ClientStartInterrupt(bool bInterruptAll);//APBGame.cHoldableItemManager.ClientStartInterrupt
	class AcEquipableTaskItem* RetHeldTaskItem();//APBGame.cHoldableItemManager.RetHeldTaskItem
	void ServerSelectNone();//APBGame.cHoldableItemManager.ServerSelectNone
	bool IsSwitchingItem();//APBGame.cHoldableItemManager.IsSwitchingItem
	void UI_OnInventoryChanged2();//APBGame.cHoldableItemManager.UI_OnInventoryChanged2
	class AcAPBPlayerController* GetOwningController();//APBGame.cHoldableItemManager.GetOwningController
	void EquipTimerCallback();//APBGame.cHoldableItemManager.EquipTimerCallback
	void ReplicatedEvent(struct FName VarName);//APBGame.cHoldableItemManager.ReplicatedEvent
	void SwitchToPreviousWeapon(unsigned char Instant,bool bReducedPreconditions);//APBGame.cHoldableItemManager.SwitchToPreviousWeapon
	bool SwitchToBestWeapon(unsigned char Instant,bool bPreconditions,bool bReducedPreconditions);//APBGame.cHoldableItemManager.SwitchToBestWeapon
	void EndInterrupt();//APBGame.cHoldableItemManager.EndInterrupt
	class AcAPBPawn* GetOwningPawn();//APBGame.cHoldableItemManager.GetOwningPawn
	void PreBeginPlay();//APBGame.cHoldableItemManager.PreBeginPlay
	void UI_SetOnInventoryChanged(struct FScriptDelegate Delegate);//APBGame.cHoldableItemManager.UI_SetOnInventoryChanged
	void PassTaskItemToCargoHold(class AcAPBVehicleBase* Vehicle);//APBGame.cHoldableItemManager.PassTaskItemToCargoHold
	void SetupWitnessingWeapon();//APBGame.cHoldableItemManager.SetupWitnessingWeapon
	void ClientUnEquip();//APBGame.cHoldableItemManager.ClientUnEquip
	bool PassTaskItemToPawn(class AcAPBPawn* Pawn);//APBGame.cHoldableItemManager.PassTaskItemToPawn
	void OnItemChanged();//APBGame.cHoldableItemManager.OnItemChanged
	class AcItem* RetPrevItem();//APBGame.cHoldableItemManager.RetPrevItem
	void DebugLogInventoryContents();//APBGame.cHoldableItemManager.DebugLogInventoryContents
	bool CarryHeldTaskItem(class AcEquipableTaskItem* pHeldTaskItem,bool bNoFail);//APBGame.cHoldableItemManager.CarryHeldTaskItem
	int RetSelectedWeapon();//APBGame.cHoldableItemManager.RetSelectedWeapon
	void ClientEndInterrupt();//APBGame.cHoldableItemManager.ClientEndInterrupt
	class AcWeapon* GetWeaponInSlot(unsigned char eSlot);//APBGame.cHoldableItemManager.GetWeaponInSlot
	bool IsWeaponOverridden(unsigned char eSlot);//APBGame.cHoldableItemManager.IsWeaponOverridden
	void OnGameplayOverrideWeaponsChanged();//APBGame.cHoldableItemManager.OnGameplayOverrideWeaponsChanged
	void ServerNotifySpawnedOnClient();//APBGame.cHoldableItemManager.ServerNotifySpawnedOnClient
	void ServerGiftAllAmmo();//APBGame.cHoldableItemManager.ServerGiftAllAmmo
	void StartInterrupt(bool bInterruptAll,bool bResetMarksManShipMode);//APBGame.cHoldableItemManager.StartInterrupt
	void ServerSelectUsable(int nSlot);//APBGame.cHoldableItemManager.ServerSelectUsable
	class AcWeapon* RetCurrentWeapon();//APBGame.cHoldableItemManager.RetCurrentWeapon
	class AcWeapon* GetOverrideWeapon(unsigned char eSlot);//APBGame.cHoldableItemManager.GetOverrideWeapon
	void ClientOnCurrentItemChanged();//APBGame.cHoldableItemManager.ClientOnCurrentItemChanged
	void ServerGiftAmmo();//APBGame.cHoldableItemManager.ServerGiftAmmo
	void UI_OnInventoryChanged();//APBGame.cHoldableItemManager.UI_OnInventoryChanged
	class AcItem* RetPendingItem();//APBGame.cHoldableItemManager.RetPendingItem
	void ServerSelectWeapon(unsigned char eSlot);//APBGame.cHoldableItemManager.ServerSelectWeapon
	void UnEquipTimerCallback();//APBGame.cHoldableItemManager.UnEquipTimerCallback
	void SwitchToBestWeaponWithAmmo();//APBGame.cHoldableItemManager.SwitchToBestWeaponWithAmmo
	void StopUsingEquipment();//APBGame.cHoldableItemManager.StopUsingEquipment
	class AcEquipableTaskItem* RetVisibleHeldTaskItem();//APBGame.cHoldableItemManager.RetVisibleHeldTaskItem
	void ClientEquipCommandFailed();//APBGame.cHoldableItemManager.ClientEquipCommandFailed
	void CallServerGiftAmmo();//APBGame.cHoldableItemManager.CallServerGiftAmmo
	void CallClientUnEquip();//APBGame.cHoldableItemManager.CallClientUnEquip
	void CallServerReloadWeapon();//APBGame.cHoldableItemManager.CallServerReloadWeapon
	void CallServerSelectUsable(int nSlot);//APBGame.cHoldableItemManager.CallServerSelectUsable
};
UClass* AcHoldableItemManager::pClassPointer = NULL;

//0x000041 (0x0002A1 - 0x000260)
//cItem[0x10394150]
class AcItem : public AActor
{
public:
	int                                                m_eInventoryItemType;                             		// 0x000260 (0x0004)              
	class AcHoldableItemManager*                       m_OwningManager;                                  		// 0x000264 (0x0004)              
	struct FString                                     m_Name;                                           		// 0x000268 (0x000C)              
	int                                                m_nCostAPBCash;                                   		// 0x000274 (0x0004)              
	int                                                m_nCostRewardTokens;                              		// 0x000278 (0x0004)              
	unsigned long                                      m_bEquipInVehicle : 1;                            		// 0x00027C (0x0004) [0x00000001] 
	unsigned long                                      m_bIsInitialised : 1;                             		// 0x00027C (0x0004) [0x00000002] 
	struct FEncumbrance                                m_Encumbrance;                                    		// 0x000280 (0x000C)              
	int                                                m_eItemAttachmentVisual;                          		// 0x00028C (0x0004)              
	struct FGuid                                       m_ItemID;                                         		// 0x000290 (0x0010)              
	unsigned char                                      m_eItemState;                                     		// 0x0002A0 (0x0001)              PROPERTY: etItemState

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItem");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cItem.ReplicatedEvent
	void GetWeaponAttachmentVisualAttributes(int Id,struct FWeaponAttachmentVisual* attrs);//APBGame.cItem.GetWeaponAttachmentVisualAttributes
	void ClientUnequipItem();//APBGame.cItem.ClientUnequipItem
	void GetItemAttachmentVisualAttributes(int Id,struct FItemAttachmentVisual* attrs);//APBGame.cItem.GetItemAttachmentVisualAttributes
	void StopFire();//APBGame.cItem.StopFire
	void ClientEquipItem(bool bImmediate);//APBGame.cItem.ClientEquipItem
	void ReplicatedEventNative(struct FName VarName);//APBGame.cItem.ReplicatedEventNative
	void StartFire(class AActor* Target);//APBGame.cItem.StartFire
};
UClass* AcItem::pClassPointer = NULL;

//0x000023 (0x0002C4 - 0x0002A1)
//cEquipableTaskItem[0x10394020]
class AcEquipableTaskItem : public AcItem
{
public:
	unsigned char                                      _0x0002A1[0x3];                                   		// 0x0002A1 (0x0003) MISSED OFFSET
	class AcTaskItem*                                  m_TaskItem;                                       		// 0x0002A4 (0x0004)              
	int                                                m_nVariety;                                       		// 0x0002A8 (0x0004)              
	DWORD                                              m_pSddTaskItemSubCategory;                        		// 0x0002AC (0x0004)              
	DWORD                                              m_pSddTaskItemCategory;                           		// 0x0002B0 (0x0004)              
	DWORD                                              m_pSddTaskItemSize;                               		// 0x0002B4 (0x0004)              
	DWORD                                              m_pSddItemAttachmentVisual;                       		// 0x0002B8 (0x0004)              
	DWORD                                              m_pSddTaskItemVariety;                            		// 0x0002BC (0x0004)              
	DWORD                                              m_pSddTaskItemVisual;                             		// 0x0002C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEquipableTaskItem");
		return pClassPointer;
	};

public:
	void TaskItemChanged(int nVariety);//APBGame.cEquipableTaskItem.TaskItemChanged
	void ReplicatedEvent(struct FName VarName);//APBGame.cEquipableTaskItem.ReplicatedEvent
	unsigned char RetTaskItemSize();//APBGame.cEquipableTaskItem.RetTaskItemSize
};
UClass* AcEquipableTaskItem::pClassPointer = NULL;

//0x000003 (0x0002A4 - 0x0002A1)
//cEquipment[0x10393EF0]
class AcEquipment : public AcItem
{
public:
	unsigned char                                      _0x0002A1[0x3];                                   		// 0x0002A1 (0x0003) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEquipment");
		return pClassPointer;
	};
};
UClass* AcEquipment::pClassPointer = NULL;

//0x000068 (0x0002C8 - 0x000260)
//cItemAssetsManager[0x10393DC0]
class AcItemAssetsManager : public AActor
{
public:
	TArray<int>                                        m_aHashes;                                        		// 0x000260 (0x000C)              
	TArray<int>                                        m_aLengths;                                       		// 0x00026C (0x000C)              
	TArray<struct FtChunk>                             m_aChunks;                                        		// 0x000278 (0x000C)              
	unsigned char                                      m_aFileSizes[0x3C];                               		// 0x000284 (0x003C)              UNKNOWN PROPERTY: MapProperty
	float                                              m_fTimeBetweenResponses;                          		// 0x0002C0 (0x0004)              
	float                                              m_fTimeSinceLastResponse;                         		// 0x0002C4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemAssetsManager");
		return pClassPointer;
	};

public:
	class AcItemAssetsManager* GetInstance();//APBGame.cItemAssetsManager.GetInstance
	void RequestItemAssets(int nCharacterUID);//APBGame.cItemAssetsManager.RequestItemAssets
	void ResponseItemAssets(int nNumFileLengths,int* aHashes,int* aLengths);//APBGame.cItemAssetsManager.ResponseItemAssets
	void Initialise();//APBGame.cItemAssetsManager.Initialise
	void ServerTick(float DeltaTime);//APBGame.cItemAssetsManager.ServerTick
};
UClass* AcItemAssetsManager::pClassPointer = NULL;

//0x000020 (0x000280 - 0x000260)
//cItemCustomisationInfo[0x10393C90]
class AcItemCustomisationInfo : public AReplicationInfo
{
public:
	struct FGuid                                       m_ItemID;                                         		// 0x000260 (0x0010)              
	DWORD                                              m_pOwner;                                         		// 0x000270 (0x0004)              
	struct FScriptDelegate                             ___OnDataChanged__Delegate;                       		// 0x000274 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemCustomisationInfo");
		return pClassPointer;
	};

public:
	void _OnDataChanged(class AActor* pItemCustomisationInfo);//APBGame.cItemCustomisationInfo._OnDataChanged
	void OnDataChanged();//APBGame.cItemCustomisationInfo.OnDataChanged
	void SetOnDataChanged(struct FScriptDelegate Delegate);//APBGame.cItemCustomisationInfo.SetOnDataChanged
};
UClass* AcItemCustomisationInfo::pClassPointer = NULL;

//0x000018 (0x000298 - 0x000280)
//cBlobCustomisationInfo[0x10393B60]
class AcBlobCustomisationInfo : public AcItemCustomisationInfo
{
public:
	int                                                m_nUsedBytes;                                     		// 0x000280 (0x0004)              
	int                                                m_nVersion;                                       		// 0x000284 (0x0004)              
	struct FString                                     m_sUserSpecifiedName;                             		// 0x000288 (0x000C)              
	struct Fdword                                      m_nDataCRC;                                       		// 0x000294 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBlobCustomisationInfo");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cBlobCustomisationInfo.ReplicatedEvent
	void OnDataChanged();//APBGame.cBlobCustomisationInfo.OnDataChanged
};
UClass* AcBlobCustomisationInfo::pClassPointer = NULL;

//0x000E00 (0x001098 - 0x000298)
//cClothingCustomisationInfo[0x10393A30]
class AcClothingCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FBlobChunk                                  m_Chunk_01;                                       		// 0x000298 (0x0100)              
	struct FBlobChunk                                  m_Chunk_02;                                       		// 0x000398 (0x0100)              
	struct FBlobChunk                                  m_Chunk_03;                                       		// 0x000498 (0x0100)              
	struct FBlobChunk                                  m_Chunk_04;                                       		// 0x000598 (0x0100)              
	struct FBlobChunk                                  m_Chunk_05;                                       		// 0x000698 (0x0100)              
	struct FBlobChunk                                  m_Chunk_06;                                       		// 0x000798 (0x0100)              
	struct FBlobChunk                                  m_Chunk_07;                                       		// 0x000898 (0x0100)              
	struct FBlobChunk                                  m_Chunk_08;                                       		// 0x000998 (0x0100)              
	struct FBlobChunk                                  m_Chunk_09;                                       		// 0x000A98 (0x0100)              
	struct FBlobChunk                                  m_Chunk;                                          		// 0x000B98 (0x0100)              
	struct FBlobChunk                                  m_Chunk;                                          		// 0x000C98 (0x0100)              
	struct FBlobChunk                                  m_Chunk;                                          		// 0x000D98 (0x0100)              
	struct FBlobChunk                                  m_Chunk;                                          		// 0x000E98 (0x0100)              
	struct FBlobChunk                                  m_Chunk;                                          		// 0x000F98 (0x0100)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cClothingCustomisationInfo");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cClothingCustomisationInfo.ReplicatedEvent
};
UClass* AcClothingCustomisationInfo::pClassPointer = NULL;

//0x000400 (0x000698 - 0x000298)
//cOutfitCustomisationInfo[0x10393900]
class AcOutfitCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FBlobChunk                                  m_Chunk_01;                                       		// 0x000298 (0x0100)              
	struct FBlobChunk                                  m_Chunk_02;                                       		// 0x000398 (0x0100)              
	struct FBlobChunk                                  m_Chunk_03;                                       		// 0x000498 (0x0100)              
	struct FBlobChunk                                  m_Chunk_04;                                       		// 0x000598 (0x0100)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cOutfitCustomisationInfo");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cOutfitCustomisationInfo.ReplicatedEvent
};
UClass* AcOutfitCustomisationInfo::pClassPointer = NULL;

//0x000800 (0x000A98 - 0x000298)
//cSymbolCustomisationInfo[0x103937D0]
class AcSymbolCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FBlobChunk                                  m_Chunk_01;                                       		// 0x000298 (0x0100)              
	struct FBlobChunk                                  m_Chunk_02;                                       		// 0x000398 (0x0100)              
	struct FBlobChunk                                  m_Chunk_03;                                       		// 0x000498 (0x0100)              
	struct FBlobChunk                                  m_Chunk_04;                                       		// 0x000598 (0x0100)              
	struct FBlobChunk                                  m_Chunk_05;                                       		// 0x000698 (0x0100)              
	struct FBlobChunk                                  m_Chunk_06;                                       		// 0x000798 (0x0100)              
	struct FBlobChunk                                  m_Chunk_07;                                       		// 0x000898 (0x0100)              
	struct FBlobChunk                                  m_Chunk_08;                                       		// 0x000998 (0x0100)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSymbolCustomisationInfo");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cSymbolCustomisationInfo.ReplicatedEvent
};
UClass* AcSymbolCustomisationInfo::pClassPointer = NULL;

//0x000A10 (0x000CA8 - 0x000298)
//cThemeCustomisationInfo[0x103936A0]
class AcThemeCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FBlobChunk                                  m_Chunk_01;                                       		// 0x000298 (0x0100)              
	struct FBlobChunk                                  m_Chunk_02;                                       		// 0x000398 (0x0100)              
	struct FBlobChunk                                  m_Chunk_03;                                       		// 0x000498 (0x0100)              
	struct FBlobChunk                                  m_Chunk_04;                                       		// 0x000598 (0x0100)              
	struct FBlobChunk                                  m_Chunk_05;                                       		// 0x000698 (0x0100)              
	struct FBlobChunk                                  m_Chunk_06;                                       		// 0x000798 (0x0100)              
	struct FBlobChunk                                  m_Chunk_07;                                       		// 0x000898 (0x0100)              
	struct FBlobChunk                                  m_Chunk_08;                                       		// 0x000998 (0x0100)              
	struct FBlobChunk                                  m_Chunk_09;                                       		// 0x000A98 (0x0100)              
	struct FBlobChunk                                  m_Chunk;                                          		// 0x000B98 (0x0100)              
	struct FGuid                                       m_ThemeGuid;                                      		// 0x000C98 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cThemeCustomisationInfo");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cThemeCustomisationInfo.ReplicatedEvent
	void OnDataChanged();//APBGame.cThemeCustomisationInfo.OnDataChanged
};
UClass* AcThemeCustomisationInfo::pClassPointer = NULL;

//0x000D30 (0x000FC8 - 0x000298)
//cVehicleCustomisationInfo[0x10393570]
class AcVehicleCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FBlobChunk                                  m_Chunk_01;                                       		// 0x000298 (0x0100)              
	struct FBlobChunk                                  m_Chunk_02;                                       		// 0x000398 (0x0100)              
	struct FBlobChunk                                  m_Chunk_03;                                       		// 0x000498 (0x0100)              
	struct FBlobChunk                                  m_Chunk_04;                                       		// 0x000598 (0x0100)              
	struct FBlobChunk                                  m_Chunk_05;                                       		// 0x000698 (0x0100)              
	struct FBlobChunk                                  m_Chunk_06;                                       		// 0x000798 (0x0100)              
	struct FBlobChunk                                  m_Chunk_07;                                       		// 0x000898 (0x0100)              
	struct FBlobChunk                                  m_Chunk_08;                                       		// 0x000998 (0x0100)              
	struct FBlobChunk                                  m_Chunk_09;                                       		// 0x000A98 (0x0100)              
	struct FBlobChunk                                  m_Chunk;                                          		// 0x000B98 (0x0100)              
	struct FBlobChunk                                  m_Chunk;                                          		// 0x000C98 (0x0100)              
	struct FBlobChunk                                  m_Chunk;                                          		// 0x000D98 (0x0100)              
	struct FBlobChunk                                  m_Chunk;                                          		// 0x000E98 (0x0100)              
	struct FModInfo                                    m_aFnMods[0x4];                                   		// 0x000F98 (0x0030)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleCustomisationInfo");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cVehicleCustomisationInfo.ReplicatedEvent
};
UClass* AcVehicleCustomisationInfo::pClassPointer = NULL;

//0x000028 (0x0002C0 - 0x000298)
//cWeaponCustomisationInfo[0x10393440]
class AcWeaponCustomisationInfo : public AcBlobCustomisationInfo
{
public:
	struct FModInfo                                    m_aFnMods[0x3];                                   		// 0x000298 (0x0024)              
	int                                                m_nSkin;                                          		// 0x0002BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWeaponCustomisationInfo");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cWeaponCustomisationInfo.ReplicatedEvent
};
UClass* AcWeaponCustomisationInfo::pClassPointer = NULL;

//0x000010 (0x000290 - 0x000280)
//cDisplayPointTokenCustomisationInfo[0x10393310]
class AcDisplayPointTokenCustomisationInfo : public AcItemCustomisationInfo
{
public:
	struct FGuid                                       m_Guid;                                           		// 0x000280 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDisplayPointTokenCustomisationInfo");
		return pClassPointer;
	};
};
UClass* AcDisplayPointTokenCustomisationInfo::pClassPointer = NULL;

//0x000004 (0x000284 - 0x000280)
//cRewardInfo[0x103931E0]
class AcRewardInfo : public AcItemCustomisationInfo
{
public:
	int                                                m_eRewardPackage;                                 		// 0x000280 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cRewardInfo");
		return pClassPointer;
	};
};
UClass* AcRewardInfo::pClassPointer = NULL;

//0x000004 (0x000288 - 0x000284)
//cRedeemableRewardInfo[0x103930B0]
class AcRedeemableRewardInfo : public AcRewardInfo
{
public:
	int                                                m_eRedeemableReward;                              		// 0x000284 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cRedeemableRewardInfo");
		return pClassPointer;
	};
};
UClass* AcRedeemableRewardInfo::pClassPointer = NULL;

//0x00B66C (0x00B8CC - 0x000260)
//cStorageInventory[0x10392F80]
class AcStorageInventory : public AReplicationInfo
{
public:
	DWORD                                              VfTable_IiAmmoContainer;                          		// 0x000260 (0x0004)              
	class UcObservers*                                 m_aObservers;                                     		// 0x000264 (0x0004)              
	struct FInventoryItem                              m_aCapacityItems[0x78];                           		// 0x000268 (0x10E0)              
	struct FInventoryItem                              m_aCharacterItems[0x2];                           		// 0x001348 (0x0048)              
	struct FInventoryItem                              m_aClothingItems[0x5F];                           		// 0x001390 (0x0D5C)              
	struct FInventoryItem                              m_aDisplayPointTokenItems[0x64];                  		// 0x0020EC (0x0E10)              
	struct FInventoryItem                              m_aDummyItems[0x5];                               		// 0x002EFC (0x00B4)              
	struct FInventoryItem                              m_aMarketplaceCashItems[0x2];                     		// 0x002FB0 (0x0048)              
	struct FInventoryItem                              m_aEquipmentItems[0x78];                          		// 0x002FF8 (0x10E0)              
	struct FInventoryItem                              m_aFnModItems[0x78];                              		// 0x0040D8 (0x10E0)              
	struct FInventoryItem                              m_aInstrumentItems[0x2];                          		// 0x0051B8 (0x0048)              
	struct FInventoryItem                              m_aOutfitItems[0x8];                              		// 0x005200 (0x0120)              
	struct FInventoryItem                              m_aRewardPackageItems[0x2];                       		// 0x005320 (0x0048)              
	struct FInventoryItem                              m_aSymbolItems[0x5F];                             		// 0x005368 (0x0D5C)              
	struct FInventoryItem                              m_aThemeItems[0x20];                              		// 0x0060C4 (0x0480)              
	struct FInventoryItem                              m_aSongItems[0x1E];                               		// 0x006544 (0x0438)              
	struct FInventoryItem                              m_aUnlockItems[0x2];                              		// 0x00697C (0x0048)              
	struct FInventoryItem                              m_aUsableTokenItems[0x64];                        		// 0x0069C4 (0x0E10)              
	struct FInventoryItem                              m_aVehicleItems[0x20];                            		// 0x0077D4 (0x0480)              
	struct FInventoryItem                              m_aWeaponItems[0x7D];                             		// 0x007C54 (0x1194)              
	unsigned char                                      m_aUnlockItemBits[0xFA];                          		// 0x008DE8 (0x00FA)              PROPERTY: 
	unsigned char                                      m_aUnlockItemBits[0xFA];                          		// 0x008EE2 (0x00FA)              PROPERTY: 
	unsigned char                                      m_aUnlockItemBits[0xFA];                          		// 0x008FDC (0x00FA)              PROPERTY: 
	unsigned char                                      m_aUnlockItemBits[0xFA];                          		// 0x0090D6 (0x00FA)              PROPERTY: 
	unsigned char                                      m_aUnlockItemBits[0xFA];                          		// 0x0091D0 (0x00FA)              PROPERTY: 
	unsigned char                                      m_aUnlockItemBits[0xFA];                          		// 0x0092CA (0x00FA)              PROPERTY: 
	unsigned char                                      m_aExaminedItemBits[0xFA];                        		// 0x0093C4 (0x00FA)              PROPERTY: 
	unsigned char                                      m_aExaminedItemBits[0xFA];                        		// 0x0094BE (0x00FA)              PROPERTY: 
	unsigned char                                      m_aExaminedItemBits[0xFA];                        		// 0x0095B8 (0x00FA)              PROPERTY: 
	unsigned char                                      m_aExaminedItemBits[0xFA];                        		// 0x0096B2 (0x00FA)              PROPERTY: 
	unsigned char                                      m_aExaminedItemBits[0xFA];                        		// 0x0097AC (0x00FA)              PROPERTY: 
	unsigned char                                      m_aExaminedItemBits[0xFA];                        		// 0x0098A6 (0x00FA)              PROPERTY: 
	unsigned char                                      m_aPurchasedUnlocksBits[0x5DC];                   		// 0x0099A0 (0x05DC)              PROPERTY: 
	unsigned char                                      m_aOfferedWeightedRewardsBits[0xFA];              		// 0x009F7C (0x00FA)              PROPERTY: 
	unsigned char                                      m_aAvailabilities[0xC8];                          		// 0x00A076 (0x00C8)              PROPERTY: 
	unsigned char                                      m_aStackingSlots[0x64];                           		// 0x00A13E (0x0064)              PROPERTY: 
	unsigned char                                      _0x00A1A2[0x2];                                   		// 0x00A1A2 (0x0002) MISSED OFFSET
	unsigned long                                      m_bLoadingInventory : 1;                          		// 0x00A1A4 (0x0004) [0x00000001] 
	unsigned long                                      m_bLockedDuringTransaction : 1;                   		// 0x00A1A4 (0x0004) [0x00000002] 
	unsigned long                                      m_bPendingOverrideChange : 1;                     		// 0x00A1A4 (0x0004) [0x00000004] 
	int                                                m_aUsableTokenCharges[0x64];                      		// 0x00A1A8 (0x0190)              
	class AcItemCustomisationInfo*                     m_aClothingCustomisations[0x5F];                  		// 0x00A338 (0x017C)              
	class AcItemCustomisationInfo*                     m_aThemeCustomisations[0x20];                     		// 0x00A4B4 (0x0080)              
	class AcItemCustomisationInfo*                     m_aSongCustomisations[0x1E];                      		// 0x00A534 (0x0078)              
	class AcItemCustomisationInfo*                     m_aOutfitCustomisations[0x8];                     		// 0x00A5AC (0x0020)              
	class AcItemCustomisationInfo*                     m_aDisplayPointTokenCustomisations[0x64];         		// 0x00A5CC (0x0190)              
	class AcItemCustomisationInfo*                     m_aDummyCustomisations[0x5];                      		// 0x00A75C (0x0014)              
	class AcItemCustomisationInfo*                     m_aSymbolCustomisations[0x5F];                    		// 0x00A770 (0x017C)              
	class AcItemCustomisationInfo*                     m_aVehicleCustomisations[0x20];                   		// 0x00A8EC (0x0080)              
	class AcItemCustomisationInfo*                     m_aWeaponCustomisations[0x7D];                    		// 0x00A96C (0x01F4)              
	class UcCompressedAssetCustomisation*              m_aSongCustomisationsAssets[0x1E];                		// 0x00AB60 (0x0078)              
	int                                                m_nLastAvailabilityCalculationTime;               		// 0x00ABD8 (0x0004)              
	double                                             m_fNextAvailabilityReplenishTimestamp;            		// 0x00ABDC (0x0008)              
	struct FInventoryItem                              m_aNone;                                          		// 0x00ABE4 (0x0024)              
	int                                                m_nStorageVersion;                                		// 0x00AC08 (0x0004)              
	int                                                m_nDeploymentVersion;                             		// 0x00AC0C (0x0004)              
	struct FGuid                                       m_aDeployedEquipment[0x5];                        		// 0x00AC10 (0x0050)              
	struct FGuid                                       m_aDeployedSymbols[0x5];                          		// 0x00AC60 (0x0050)              
	struct FDeployedUsable                             m_aDeployedCharacterUsables[0x5];                 		// 0x00ACB0 (0x00F0)              
	struct FDeployedUsable                             m_aDeployedVehicleUsables[0x5];                   		// 0x00ADA0 (0x00F0)              
	struct FGuid                                       m_nDeployedVehicle;                               		// 0x00AE90 (0x0010)              
	struct FGuid                                       m_nDeployedOutfit;                                		// 0x00AEA0 (0x0010)              
	struct FGuid                                       m_nDeployedTheme;                                 		// 0x00AEB0 (0x0010)              
	int                                                m_nDeployedTitle;                                 		// 0x00AEC0 (0x0004)              
	struct FModInfo                                    m_aFnModsCharacter[0x3];                          		// 0x00AEC4 (0x0024)              
	struct FReuseGroupData                             m_aReuseGroups[0xFA];                             		// 0x00AEE8 (0x07D0)              
	int                                                m_AmmoPools[0x17];                                		// 0x00B6B8 (0x005C)              
	int                                                m_AmmoTotals[0x17];                               		// 0x00B714 (0x005C)              
	int                                                m_nGlobalCooldownTimeBegin;                       		// 0x00B770 (0x0004)              
	int                                                m_nGlobalCooldownTimeEnd;                         		// 0x00B774 (0x0004)              
	struct FCustomColours                              m_CustomColours;                                  		// 0x00B778 (0x0060)              
	DWORD                                              m_pCustomisationLimiter;                          		// 0x00B7D8 (0x0004)              
	struct FGameplayOverrideItem                       m_VehicleOverride;                                		// 0x00B7DC (0x0028)              
	int                                                m_TargetVehicleOverride;                          		// 0x00B804 (0x0004)              
	struct FCustomisationLimiterReplicationData        m_CustomisationLimiterRepData[0x9];               		// 0x00B808 (0x0048)              
	double                                             m_CustomisationLimiterClientReplenishTime[0x9];   		// 0x00B850 (0x0048)              
	float                                              m_fCheckExpiredEquippedItemsTimer;                		// 0x00B898 (0x0004)              
	struct FScriptDelegate                             __UI_OnInventoryChanged__Delegate;                		// 0x00B89C (0x000C)              
	struct FScriptDelegate                             __UI_OnInventoryChanged2__Delegate;               		// 0x00B8A8 (0x000C)              
	struct FScriptDelegate                             __UI_OnDeploymentChanged__Delegate;               		// 0x00B8B4 (0x000C)              
	struct FScriptDelegate                             __UI_OnDeploymentChanged2__Delegate;              		// 0x00B8C0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStorageInventory");
		return pClassPointer;
	};

public:
	void UI_HUD_NotifyWeaponsChanged();//APBGame.cStorageInventory.UI_HUD_NotifyWeaponsChanged
	int StoreAmmo(int eCategory,int eTarget,int nAmount);//APBGame.cStorageInventory.StoreAmmo
	void UI_OnDeploymentChanged2();//APBGame.cStorageInventory.UI_OnDeploymentChanged2
	void UI_OnInventoryChanged();//APBGame.cStorageInventory.UI_OnInventoryChanged
	void UI_OnInventoryChanged2();//APBGame.cStorageInventory.UI_OnInventoryChanged2
	bool IsEmpty(int eCategory);//APBGame.cStorageInventory.IsEmpty
	void Destroyed();//APBGame.cStorageInventory.Destroyed
	void ReplicatedArrayEvent(struct FName VarName,int nElement);//APBGame.cStorageInventory.ReplicatedArrayEvent
	void OnClientCustomisationLimiterRepDataChanged(int nElement);//APBGame.cStorageInventory.OnClientCustomisationLimiterRepDataChanged
	void UI_HUD_NotifyUnlockedTitlesChanged();//APBGame.cStorageInventory.UI_HUD_NotifyUnlockedTitlesChanged
	void ReplicatedEvent(struct FName VarName);//APBGame.cStorageInventory.ReplicatedEvent
	int RetAmmoAmount(int eCategory);//APBGame.cStorageInventory.RetAmmoAmount
	void SetServerCustomisationLimiterUse(unsigned char InventoryItemCategoryLimitedToUse);//APBGame.cStorageInventory.SetServerCustomisationLimiterUse
	class UcObservers* GetObservers();//APBGame.cStorageInventory.GetObservers
	void UI_NotifyTitleChanged();//APBGame.cStorageInventory.UI_NotifyTitleChanged
	void UI_OnDeploymentChanged();//APBGame.cStorageInventory.UI_OnDeploymentChanged
	void DestroyedNative();//APBGame.cStorageInventory.DestroyedNative
	int WithdrawAmmo(int eCategory,int nAmount);//APBGame.cStorageInventory.WithdrawAmmo
	bool IsAmmoCategorySupported(int eCategory);//APBGame.cStorageInventory.IsAmmoCategorySupported
	bool IsFull(int eCategory);//APBGame.cStorageInventory.IsFull
	void UI_HUD_NotifyDeploymentChanged();//APBGame.cStorageInventory.UI_HUD_NotifyDeploymentChanged
	int RetCapacity(int eCategory);//APBGame.cStorageInventory.RetCapacity
};
UClass* AcStorageInventory::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAPBCheatManager[0x10392E50]
class UcAPBCheatManager : public UCheatManager
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCheatManager");
		return pClassPointer;
	};

public:
	void Kill(struct FString sNameToKill);//APBGame.cAPBCheatManager.Kill
	void SprayAllGraffiti();//APBGame.cAPBCheatManager.SprayAllGraffiti
	void Summon(struct FString sNameToSpawn,float fSpeed,float fDistance,int nX,int nY,int nZ);//APBGame.cAPBCheatManager.Summon
	void SendEvent(class UClass* EventClass,struct FString sLinkDesc);//APBGame.cAPBCheatManager.SendEvent
	void DumpCAMAssetList();//APBGame.cAPBCheatManager.DumpCAMAssetList
	void serverSpraryAllGraffiti();//APBGame.cAPBCheatManager.serverSpraryAllGraffiti
	void SetSpeed(float F);//APBGame.cAPBCheatManager.SetSpeed
};
UClass* UcAPBCheatManager::pClassPointer = NULL;

//0x000030 (0x000194 - 0x000164)
//cAPBPlayerInput[0x10392D20]
class UcAPBPlayerInput : public UPlayerInput
{
public:
	unsigned char                                      m_bDuckButton;                                    		// 0x000164 (0x0001)              PROPERTY: 
	unsigned char                                      m_bRun;                                           		// 0x000165 (0x0001)              PROPERTY: 
	unsigned char                                      m_bCameraZoomIn;                                  		// 0x000166 (0x0001)              PROPERTY: 
	unsigned char                                      m_bCameraZoomOut;                                 		// 0x000167 (0x0001)              PROPERTY: 
	unsigned char                                      m_bNumPadOne;                                     		// 0x000168 (0x0001)              PROPERTY: 
	unsigned char                                      m_bNumPadTwo;                                     		// 0x000169 (0x0001)              PROPERTY: 
	unsigned char                                      m_bNumPadThree;                                   		// 0x00016A (0x0001)              PROPERTY: 
	unsigned char                                      m_bNumPadFour;                                    		// 0x00016B (0x0001)              PROPERTY: 
	unsigned char                                      m_bNumPadFive;                                    		// 0x00016C (0x0001)              PROPERTY: 
	unsigned char                                      m_bNumPadSix;                                     		// 0x00016D (0x0001)              PROPERTY: 
	unsigned char                                      m_bNumPadSeven;                                   		// 0x00016E (0x0001)              PROPERTY: 
	unsigned char                                      m_bNumPadEight;                                   		// 0x00016F (0x0001)              PROPERTY: 
	unsigned char                                      m_bNumPadNine;                                    		// 0x000170 (0x0001)              PROPERTY: 
	unsigned char                                      m_bAdd;                                           		// 0x000171 (0x0001)              PROPERTY: 
	unsigned char                                      m_bSubtract;                                      		// 0x000172 (0x0001)              PROPERTY: 
	unsigned char                                      m_bEight;                                         		// 0x000173 (0x0001)              PROPERTY: 
	unsigned char                                      m_bNine;                                          		// 0x000174 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000175[0x3];                                   		// 0x000175 (0x0003) MISSED OFFSET
	float                                              aVehicleThrottle;                                 		// 0x000178 (0x0004)              
	float                                              aVehicleTurn;                                     		// 0x00017C (0x0004)              
	float                                              aVehicleUp;                                       		// 0x000180 (0x0004)              
	float                                              m_fLeftTrigger;                                   		// 0x000184 (0x0004)              
	float                                              m_fRightTrigger;                                  		// 0x000188 (0x0004)              
	float                                              RawVehicleThrottle;                               		// 0x00018C (0x0004)              
	float                                              RawVehicleTurn;                                   		// 0x000190 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBPlayerInput");
		return pClassPointer;
	};

public:
	bool IsCameraRotatingRight();//APBGame.cAPBPlayerInput.IsCameraRotatingRight
	bool IsCameraRotatingLeft();//APBGame.cAPBPlayerInput.IsCameraRotatingLeft
	void Jump();//APBGame.cAPBPlayerInput.Jump
	void PlayerInput(float DeltaTime);//APBGame.cAPBPlayerInput.PlayerInput
};
UClass* UcAPBPlayerInput::pClassPointer = NULL;

//0x000008 (0x0000E4 - 0x0000DC)
//cAPBSavedMove[0x10392BF0]
class UcAPBSavedMove : public USavedMove
{
public:
	unsigned long                                      m_bSprint : 1;                                    		// 0x0000DC (0x0004) [0x00000001] 
	unsigned long                                      m_bPredictedJump : 1;                             		// 0x0000DC (0x0004) [0x00000002] 
	class APawn*                                       m_pPawn;                                          		// 0x0000E0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSavedMove");
		return pClassPointer;
	};

public:
	unsigned char CompressedFlags();//APBGame.cAPBSavedMove.CompressedFlags
	void Clear();//APBGame.cAPBSavedMove.Clear
};
UClass* UcAPBSavedMove::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cGameInfoCache[0x10392AC0]
class UcGameInfoCache : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGameInfoCache");
		return pClassPointer;
	};
};
UClass* UcGameInfoCache::pClassPointer = NULL;

//0x0000A4 (0x0006CC - 0x000628)
//cHostingPlayerController[0x10392990]
class AcHostingPlayerController : public APlayerController
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000628 (0x0004)              
	class UcHostingServer*                             m_HostingServer;                                  		// 0x00062C (0x0004)              
	struct FQWord                                      m_nSessionUID;                                    		// 0x000630 (0x0008)              
	int                                                m_nAccountUID;                                    		// 0x000638 (0x0004)              
	int                                                m_nAccountPremium;                                		// 0x00063C (0x0004)              
	int                                                m_nClanUID;                                       		// 0x000640 (0x0004)              
	int                                                m_nCash;                                          		// 0x000644 (0x0004)              
	struct FQWord                                      m_nAccountPermissions;                            		// 0x000648 (0x0008)              
	int                                                m_nRewardTokens;                                  		// 0x000650 (0x0004)              
	int                                                m_nOpenWorldCash;                                 		// 0x000654 (0x0004)              
	int                                                m_nReferrerUID;                                   		// 0x000658 (0x0004)              
	int                                                m_nCharacterUID;                                  		// 0x00065C (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x000660 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eGender;                                        		// 0x000661 (0x0001)              PROPERTY: etGender
	unsigned char                                      m_eChatState;                                     		// 0x000662 (0x0001)              PROPERTY: etChatState
	unsigned char                                      _0x000663[0x1];                                   		// 0x000663 (0x0001) MISSED OFFSET
	struct FString                                     m_sClanName;                                      		// 0x000664 (0x000C)              
	struct FDatabaseTimestamp                          m_DatabasePendingDate;                            		// 0x000670 (0x001C)              
	int                                                m_nDatabasePendingCount;                          		// 0x00068C (0x0004)              
	unsigned long                                      m_bIsReceivingMailMessage : 1;                    		// 0x000690 (0x0004) [0x00000001] 
	unsigned long                                      m_bDatabaseLoadRequested : 1;                     		// 0x000690 (0x0004) [0x00000002] 
	struct FString                                     m_sReceivingMailMessage_To;                       		// 0x000694 (0x000C)              
	struct FString                                     m_sReceivingMailMessage_Subject;                  		// 0x0006A0 (0x000C)              
	struct FGuid                                       m_ReceivingMailMessage_ItemGuid;                  		// 0x0006AC (0x0010)              
	int                                                m_nReceivingMailMessage_Cash;                     		// 0x0006BC (0x0004)              
	struct FString                                     m_sReceivingMailMessage_Body;                     		// 0x0006C0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingPlayerController");
		return pClassPointer;
	};

public:
	int GetConnAccountUID();//APBGame.cHostingPlayerController.GetConnAccountUID
	bool DoChatFloodCheckForNewMessage();//APBGame.cHostingPlayerController.DoChatFloodCheckForNewMessage
	void displayfriendlist();//APBGame.cHostingPlayerController.displayfriendlist
	void ClanSetSymbol(int nLength);//APBGame.cHostingPlayerController.ClanSetSymbol
	void FriendListRemove(int nMemberNumber);//APBGame.cHostingPlayerController.FriendListRemove
	struct FQWord RetSessionUID();//APBGame.cHostingPlayerController.RetSessionUID
	void chatsay(struct FString sMessage);//APBGame.cHostingPlayerController.chatsay
	void FriendListGetState();//APBGame.cHostingPlayerController.FriendListGetState
	void OnOpenWorldCashChanged();//APBGame.cHostingPlayerController.OnOpenWorldCashChanged
	void displaymarketplacemybidinfo(unsigned char eAuctionType);//APBGame.cHostingPlayerController.displaymarketplacemybidinfo
	void ClanMemberSetPrivateNote(int nMemberNumber,struct FString sPrivateNote);//APBGame.cHostingPlayerController.ClanMemberSetPrivateNote
	void Send_DS2GC_MAIL_SYSTEM();//APBGame.cHostingPlayerController.Send_DS2GC_MAIL_SYSTEM
	void Disconnect();//APBGame.cHostingPlayerController.Disconnect
	void Send_GC2DS_ASK_MAIL_SEND(struct FString sTo,struct FString sSubject,struct FString sBody,struct FGuid nItemGuid,int nCash);//APBGame.cHostingPlayerController.Send_GC2DS_ASK_MAIL_SEND
	int RetCharacterUID();//APBGame.cHostingPlayerController.RetCharacterUID
	void displayclanmemberpublicnote(int nMemberNumber);//APBGame.cHostingPlayerController.displayclanmemberpublicnote
	void marketplacemybidlist(unsigned char eAuctionType,int nClientPage,unsigned char eSort);//APBGame.cHostingPlayerController.marketplacemybidlist
	int GetConnReferrerUID();//APBGame.cHostingPlayerController.GetConnReferrerUID
	int RetCashAmount();//APBGame.cHostingPlayerController.RetCashAmount
	void Receive_DS2GC_CHAT(unsigned char eType,int nCharacterUID,unsigned char eChatTag,bool bBypassIgnore,struct FString sMessage,struct FQWord nSilenceExpiry);//APBGame.cHostingPlayerController.Receive_DS2GC_CHAT
	void SetClanName(struct FString sClanName,bool bUpdate);//APBGame.cHostingPlayerController.SetClanName
	void AFK(struct FString sMessage);//APBGame.cHostingPlayerController.AFK
	void Receive_DS2GC_ANS_MAIL_DETACH_CASH(int nReturnCode,int nMailUID,int nRemainingTime);//APBGame.cHostingPlayerController.Receive_DS2GC_ANS_MAIL_DETACH_CASH
	void chatofficer(struct FString sMessage);//APBGame.cHostingPlayerController.chatofficer
	void ClanLeader(int nMemberNumber);//APBGame.cHostingPlayerController.ClanLeader
	void groupdecline();//APBGame.cHostingPlayerController.groupdecline
	void Send_GC2DS_ASK_MAIL_DETACH_ITEM(int nMailUID,int nSelectedChildReward);//APBGame.cHostingPlayerController.Send_GC2DS_ASK_MAIL_DETACH_ITEM
	void chatyell(struct FString sMessage);//APBGame.cHostingPlayerController.chatyell
	int HexToInteger(struct FString sHex);//APBGame.cHostingPlayerController.HexToInteger
	void MarketplaceAuctionCancel(unsigned char eAuctionType,int nAuctionNumber);//APBGame.cHostingPlayerController.MarketplaceAuctionCancel
	void districtgroupqueuecancel();//APBGame.cHostingPlayerController.districtgroupqueuecancel
	void ClanGetTheme();//APBGame.cHostingPlayerController.ClanGetTheme
	void Receive_DS2GC_CHAT_SYSTEM(struct FString sMessage);//APBGame.cHostingPlayerController.Receive_DS2GC_CHAT_SYSTEM
	void Receive_DS2GC_DISTRICT_SHUTDOWN_NOTIFY(int nMinutes);//APBGame.cHostingPlayerController.Receive_DS2GC_DISTRICT_SHUTDOWN_NOTIFY
	void GroupList(int nDistrictUID,int nInstanceNo);//APBGame.cHostingPlayerController.GroupList
	void DND(struct FString sMessage);//APBGame.cHostingPlayerController.DND
	void displayinstances();//APBGame.cHostingPlayerController.displayinstances
	void NameCheck(struct FString sCharacterName,int nWorldUID);//APBGame.cHostingPlayerController.NameCheck
	void InitClient();//APBGame.cHostingPlayerController.InitClient
	void Send_GC2DS_ASK_PREMIUM_STATUS(int nCharacterUID);//APBGame.cHostingPlayerController.Send_GC2DS_ASK_PREMIUM_STATUS
	void clanmembersgetstate();//APBGame.cHostingPlayerController.clanmembersgetstate
	void chatmetagroup(struct FString sMessage);//APBGame.cHostingPlayerController.chatmetagroup
	void testname(struct FString S,int nType);//APBGame.cHostingPlayerController.testname
	void IgnoreListRemove(int nMemberNumber);//APBGame.cHostingPlayerController.IgnoreListRemove
	int RetReferrerUID();//APBGame.cHostingPlayerController.RetReferrerUID
	void ClanMemberSetPublicNote(int nMemberNumber,struct FString sPublicNote);//APBGame.cHostingPlayerController.ClanMemberSetPublicNote
	void marketplacemyauctionlist(unsigned char eAuctionType,int nClientPage,unsigned char eSort);//APBGame.cHostingPlayerController.marketplacemyauctionlist
	void ClanGetInformation();//APBGame.cHostingPlayerController.ClanGetInformation
	void OnAvailableForMetagroupingChanged();//APBGame.cHostingPlayerController.OnAvailableForMetagroupingChanged
	void chatdistrict(struct FString sMessage);//APBGame.cHostingPlayerController.chatdistrict
	bool SetRewardTokenAmount(int Amount);//APBGame.cHostingPlayerController.SetRewardTokenAmount
	void marketplacesellerlist(unsigned char eAuctionType,struct FString sSearch);//APBGame.cHostingPlayerController.marketplacesellerlist
	void ClanCreate(struct FString sClanName);//APBGame.cHostingPlayerController.ClanCreate
	void SetChatState(unsigned char eChatState);//APBGame.cHostingPlayerController.SetChatState
	void Receive_DS2GC_ANS_MAIL_SEND(int nReturnCode);//APBGame.cHostingPlayerController.Receive_DS2GC_ANS_MAIL_SEND
	void SystemMessage(struct FString sMessage);//APBGame.cHostingPlayerController.SystemMessage
	struct FQWord RetAccountPermissions();//APBGame.cHostingPlayerController.RetAccountPermissions
	void Receive_GC2DS_ASK_PREMIUM_STATUS(int nCharacterUID);//APBGame.cHostingPlayerController.Receive_GC2DS_ASK_PREMIUM_STATUS
	void GroupState();//APBGame.cHostingPlayerController.GroupState
	void ClanRankEdit(int nRankNumber,int nPermission,struct FString sRankName);//APBGame.cHostingPlayerController.ClanRankEdit
	void ServerRewardTokens(int nAmount);//APBGame.cHostingPlayerController.ServerRewardTokens
	int FromHex(struct FString sChar);//APBGame.cHostingPlayerController.FromHex
	void getinstances();//APBGame.cHostingPlayerController.getinstances
	void groupinvitemodedefault(bool bInvite);//APBGame.cHostingPlayerController.groupinvitemodedefault
	void Receive_GC2DS_ASK_MAIL_SEND_HEADER(struct FString sTo,struct FString sSubject,struct FGuid nItemGuid,int nCash);//APBGame.cHostingPlayerController.Receive_GC2DS_ASK_MAIL_SEND_HEADER
	void CharacterInfo(int nSlotNumber);//APBGame.cHostingPlayerController.CharacterInfo
	void ClanGetBio();//APBGame.cHostingPlayerController.ClanGetBio
	int GetConnAccountPremium();//APBGame.cHostingPlayerController.GetConnAccountPremium
	void RewardTokens(int nAmount);//APBGame.cHostingPlayerController.RewardTokens
	void Login(struct FString sUsername,struct FString sPassword);//APBGame.cHostingPlayerController.Login
	void displayclanrank(int nRankNumber);//APBGame.cHostingPlayerController.displayclanrank
	void OnGroupPublicStateChanged();//APBGame.cHostingPlayerController.OnGroupPublicStateChanged
	void ClanRankAssign(int nMemberNumber,int nRankNumber);//APBGame.cHostingPlayerController.ClanRankAssign
	void ClanLeave();//APBGame.cHostingPlayerController.ClanLeave
	void Receive_DS2GC_ANS_MARKETPLACE_AUCTION_BID(int nReturnCode,int eAuctionType,int nAuctionUID);//APBGame.cHostingPlayerController.Receive_DS2GC_ANS_MARKETPLACE_AUCTION_BID
	void Send_GC2DS_ASK_MARKETPLACE_AUCTION_BID(unsigned char eAuctionType,int nAuctionUID,int nAmount);//APBGame.cHostingPlayerController.Send_GC2DS_ASK_MARKETPLACE_AUCTION_BID
	bool SetCashAmount(int Amount);//APBGame.cHostingPlayerController.SetCashAmount
	void clandecline();//APBGame.cHostingPlayerController.clandecline
	void DistrictQueueCancel();//APBGame.cHostingPlayerController.DistrictQueueCancel
	void Send_GC2DS_CHAT(unsigned char eType,unsigned char eChatTag,struct FString sMessage);//APBGame.cHostingPlayerController.Send_GC2DS_CHAT
	void DisplayClanBio();//APBGame.cHostingPlayerController.DisplayClanBio
	void DistrictReserveAccept();//APBGame.cHostingPlayerController.DistrictReserveAccept
	void SetSessionUID(struct FQWord nSessionUID);//APBGame.cHostingPlayerController.SetSessionUID
	void NameQuery(unsigned char eNameQuery,int nCharacterUID);//APBGame.cHostingPlayerController.NameQuery
	struct FQWord GetConnSessionUID();//APBGame.cHostingPlayerController.GetConnSessionUID
	void Send_DS2GC_DISTRICT_SHUTDOWN_NOTIFY(int nMinutes);//APBGame.cHostingPlayerController.Send_DS2GC_DISTRICT_SHUTDOWN_NOTIFY
	void Send_DS2GC_ANS_MARKETPLACE_AUCTION_BID(int nReturnCode,int eAuctionType,int nAuctionUID);//APBGame.cHostingPlayerController.Send_DS2GC_ANS_MARKETPLACE_AUCTION_BID
	void groupinvitemode(bool bInvite);//APBGame.cHostingPlayerController.groupinvitemode
	void SetCharacterUID(int nCharacterUID);//APBGame.cHostingPlayerController.SetCharacterUID
	void chatclan(struct FString sMessage);//APBGame.cHostingPlayerController.chatclan
	void ClanMemberSetBio(struct FString sBio);//APBGame.cHostingPlayerController.ClanMemberSetBio
	int RetOpenWorldCashAmount();//APBGame.cHostingPlayerController.RetOpenWorldCashAmount
	void DisplayMailInfo();//APBGame.cHostingPlayerController.DisplayMailInfo
	void FriendListAdd(struct FString sCharacterName);//APBGame.cHostingPlayerController.FriendListAdd
	void Send_GC2DS_ASK_MAIL_DETACH_CASH(int nMailUID);//APBGame.cHostingPlayerController.Send_GC2DS_ASK_MAIL_DETACH_CASH
	void maildetachcash(int nMailNumber);//APBGame.cHostingPlayerController.maildetachcash
	void ClanDelete();//APBGame.cHostingPlayerController.ClanDelete
	void Send_DS2GC_CHAT_SYSTEM(struct FString sMessage);//APBGame.cHostingPlayerController.Send_DS2GC_CHAT_SYSTEM
	void DistrictEnter(int nDistrictUID,int nInstanceNo,int nCharacterUID);//APBGame.cHostingPlayerController.DistrictEnter
	void SetAccountPermissions(struct FQWord nPermissions);//APBGame.cHostingPlayerController.SetAccountPermissions
	void GroupInvite(struct FString sCharacterName);//APBGame.cHostingPlayerController.GroupInvite
	void maildetachitem(int nMailNumber);//APBGame.cHostingPlayerController.maildetachitem
	void ClanSetTheme(int nLength);//APBGame.cHostingPlayerController.ClanSetTheme
	void InitServer();//APBGame.cHostingPlayerController.InitServer
	void ReportBug(struct FString sSummary,struct FString sDescription);//APBGame.cHostingPlayerController.ReportBug
	void SetReferrerUID(int nReferrerUID);//APBGame.cHostingPlayerController.SetReferrerUID
	void marketplaceauctionitem(unsigned char eAuctionType,int nAuctionNumber);//APBGame.cHostingPlayerController.marketplaceauctionitem
	void DistrictReserveCancel();//APBGame.cHostingPlayerController.DistrictReserveCancel
	void Send_DS2GC_ANS_MAIL_SEND(int nReturnCode);//APBGame.cHostingPlayerController.Send_DS2GC_ANS_MAIL_SEND
	void displaydistricts();//APBGame.cHostingPlayerController.displaydistricts
	void getworlds();//APBGame.cHostingPlayerController.getworlds
	void ClanMemberGetProfile(int nMemberNumber);//APBGame.cHostingPlayerController.ClanMemberGetProfile
	void IgnoreListAdd(struct FString sCharacterName);//APBGame.cHostingPlayerController.IgnoreListAdd
	void Receive_DS2GC_ANS_DISTRICT_ENTER(int nReturnCode,int nDistrictUID,int nInstanceNo);//APBGame.cHostingPlayerController.Receive_DS2GC_ANS_DISTRICT_ENTER
	void displayclanranks();//APBGame.cHostingPlayerController.displayclanranks
	void Send_GC2DS_ASK_DISTRICT_ENTER();//APBGame.cHostingPlayerController.Send_GC2DS_ASK_DISTRICT_ENTER
	void CharacterCreate();//APBGame.cHostingPlayerController.CharacterCreate
	void ClanRankDelete(int nRankNumber);//APBGame.cHostingPlayerController.ClanRankDelete
	void dsdisconnect();//APBGame.cHostingPlayerController.dsdisconnect
	void claninvite(struct FString sCharacterName);//APBGame.cHostingPlayerController.claninvite
	void Send_DS2GC_KICK(int nReason,struct FString sInformation);//APBGame.cHostingPlayerController.Send_DS2GC_KICK
	void clanaccept();//APBGame.cHostingPlayerController.clanaccept
	void PreBeginPlay();//APBGame.cHostingPlayerController.PreBeginPlay
	void Receive_GC2DS_CHAT(unsigned char eType,unsigned char eChatTag,struct FString sMessage);//APBGame.cHostingPlayerController.Receive_GC2DS_CHAT
	void displayclan();//APBGame.cHostingPlayerController.displayclan
	void ClanMemberGetStats(int nMemberNumber);//APBGame.cHostingPlayerController.ClanMemberGetStats
	void ClanSetBio(struct FString sBio);//APBGame.cHostingPlayerController.ClanSetBio
	void Receive_GC2DS_ASK_MARKETPLACE_AUCTION_CREATE(unsigned char eAuctionType,struct FGuid nItemGuid,unsigned char eDuration,int nStartingBid,int nBuyout,int nCash,struct FString sCharacterRestriction);//APBGame.cHostingPlayerController.Receive_GC2DS_ASK_MARKETPLACE_AUCTION_CREATE
	void Receive_GC2DS_ASK_MAIL_DETACH_CASH(int nMailUID);//APBGame.cHostingPlayerController.Receive_GC2DS_ASK_MAIL_DETACH_CASH
	void Receive_DS2GC_ANS_MAIL_DETACH_ITEM(int nReturnCode,int nMailUID,int nRemainingTime);//APBGame.cHostingPlayerController.Receive_DS2GC_ANS_MAIL_DETACH_ITEM
	void mailsend(struct FString sTo,struct FString sSubject,struct FString sBody,struct FString sItemGUID,int nCash);//APBGame.cHostingPlayerController.mailsend
	void serversystemmessage(struct FString sMessage);//APBGame.cHostingPlayerController.serversystemmessage
	void chatwhisper(struct FString sCharacterName,struct FString sMessage);//APBGame.cHostingPlayerController.chatwhisper
	void Receive_GC2DS_ASK_MARKETPLACE_AUCTION_BID(unsigned char eAuctionType,int nAuctionUID,int nAmount);//APBGame.cHostingPlayerController.Receive_GC2DS_ASK_MARKETPLACE_AUCTION_BID
	void GroupLeader(int nMemberNumber);//APBGame.cHostingPlayerController.GroupLeader
	void SetAccountUID(int nAccountUID);//APBGame.cHostingPlayerController.SetAccountUID
	void OnCashChanged();//APBGame.cHostingPlayerController.OnCashChanged
	void FileGet(unsigned char eSDDKey,struct FString sSection,struct FString sKey);//APBGame.cHostingPlayerController.FileGet
	void ClanSetMotd(struct FString sMotd);//APBGame.cHostingPlayerController.ClanSetMotd
	void ClanGetSymbol();//APBGame.cHostingPlayerController.ClanGetSymbol
	void GroupRemove(int nMemberNumber);//APBGame.cHostingPlayerController.GroupRemove
	void Receive_GC2DS_ASK_MAIL_DETACH_ITEM(int nMailUID,int nSelectedChildReward);//APBGame.cHostingPlayerController.Receive_GC2DS_ASK_MAIL_DETACH_ITEM
	void displaygroup();//APBGame.cHostingPlayerController.displaygroup
	void displaymarketplacemyauctioninfo(unsigned char eAuctionType);//APBGame.cHostingPlayerController.displaymarketplacemyauctioninfo
	void GroupLeave();//APBGame.cHostingPlayerController.GroupLeave
	void Logout();//APBGame.cHostingPlayerController.Logout
	void districtgroupenter(int nDistrictUID,int nInstanceNo,int nCharacterUID);//APBGame.cHostingPlayerController.districtgroupenter
	void GroupInfo(struct FString sCharacterName);//APBGame.cHostingPlayerController.GroupInfo
	void mailitem(int nMailNumber);//APBGame.cHostingPlayerController.mailitem
	void Receive_DS2GC_CHAT_SILENCE(struct FQWord nSilenceExpiry);//APBGame.cHostingPlayerController.Receive_DS2GC_CHAT_SILENCE
	void Send_DS2GC_ANS_MARKETPLACE_AUCTION_CREATE(int nReturnCode,unsigned char eAuctionType);//APBGame.cHostingPlayerController.Send_DS2GC_ANS_MARKETPLACE_AUCTION_CREATE
	void chatgroup(struct FString sMessage);//APBGame.cHostingPlayerController.chatgroup
	void refreshpremiumstatus(int nCharacterUID);//APBGame.cHostingPlayerController.refreshpremiumstatus
	void MailDelete(int nMailNumber);//APBGame.cHostingPlayerController.MailDelete
	void maillist(int nPage,unsigned char eSort);//APBGame.cHostingPlayerController.maillist
	void marketplaceauctioncreate(unsigned char eAuctionType,struct FString sItemGUID,unsigned char eDuration,int nStartingBid,int nBuyout,int nCash);//APBGame.cHostingPlayerController.marketplaceauctioncreate
	void displaymarketplaceauctioninfo(unsigned char eAuctionType);//APBGame.cHostingPlayerController.displaymarketplaceauctioninfo
	void Cash(int nCash);//APBGame.cHostingPlayerController.Cash
	void MailRead(int nMailNumber);//APBGame.cHostingPlayerController.MailRead
	void OnAccountPremiumChanged();//APBGame.cHostingPlayerController.OnAccountPremiumChanged
	void marketplaceauctionlist(unsigned char eAuctionType,int nClientPage,unsigned char eSort,unsigned char eSearch,struct FString sSearch,int nCategory,int nSubcategory,int nRatingOrCashStart,int nRatingOrCashEnd,bool bSystemAuctions,bool bCharacterRestricted);//APBGame.cHostingPlayerController.marketplaceauctionlist
	void InitInputSystem();//APBGame.cHostingPlayerController.InitInputSystem
	int RetAccountPremium();//APBGame.cHostingPlayerController.RetAccountPremium
	void WorldQueueCancel();//APBGame.cHostingPlayerController.WorldQueueCancel
	unsigned char RetFaction();//APBGame.cHostingPlayerController.RetFaction
	void Send_DS2GC_ANS_MAIL_DETACH_CASH(int nReturnCode,int nMailUID,int nRemainingTime);//APBGame.cHostingPlayerController.Send_DS2GC_ANS_MAIL_DETACH_CASH
	void OnLfgStateChanged();//APBGame.cHostingPlayerController.OnLfgStateChanged
	void LFG(bool bLFG);//APBGame.cHostingPlayerController.LFG
	void CharacterDelete(int nSlotNumber);//APBGame.cHostingPlayerController.CharacterDelete
	void servercash(int nCash);//APBGame.cHostingPlayerController.servercash
	void DisplayClanMotd();//APBGame.cHostingPlayerController.DisplayClanMotd
	void OnChatStateChanged();//APBGame.cHostingPlayerController.OnChatStateChanged
	void WorldEnter(int nSlotNumber);//APBGame.cHostingPlayerController.WorldEnter
	int RetAccountUID();//APBGame.cHostingPlayerController.RetAccountUID
	void DistrictExit();//APBGame.cHostingPlayerController.DistrictExit
	void groupjoin(struct FString sCharacterName);//APBGame.cHostingPlayerController.groupjoin
	struct FQWord GetConnAccountPermissions();//APBGame.cHostingPlayerController.GetConnAccountPermissions
	void grouppublicmode(bool bPublic);//APBGame.cHostingPlayerController.grouppublicmode
	int GetConnCharacterUID();//APBGame.cHostingPlayerController.GetConnCharacterUID
	void ClanSetInformation(struct FString sInformation);//APBGame.cHostingPlayerController.ClanSetInformation
	void grouppublicmodedefault(bool bPublic);//APBGame.cHostingPlayerController.grouppublicmodedefault
	int RetDatabasePendingCount();//APBGame.cHostingPlayerController.RetDatabasePendingCount
	void findercharacterinfo(struct FString sCharacterName);//APBGame.cHostingPlayerController.findercharacterinfo
	void Send_DS2GC_ANS_DISTRICT_ENTER(int nReturnCode);//APBGame.cHostingPlayerController.Send_DS2GC_ANS_DISTRICT_ENTER
	void displayclanmemberprivatenote(int nMemberNumber);//APBGame.cHostingPlayerController.displayclanmemberprivatenote
	void DisplayClanInformation();//APBGame.cHostingPlayerController.DisplayClanInformation
	void OnRewardTokensChanged();//APBGame.cHostingPlayerController.OnRewardTokensChanged
	void Receive_DS2GC_MAIL_SYSTEM();//APBGame.cHostingPlayerController.Receive_DS2GC_MAIL_SYSTEM
	void clanmembersgetstats();//APBGame.cHostingPlayerController.clanmembersgetstats
	void marketplaceauctionbid(unsigned char eAuctionType,int nAuctionNumber,int nAmount);//APBGame.cHostingPlayerController.marketplaceauctionbid
	void ClanRemove(int nMemberNumber);//APBGame.cHostingPlayerController.ClanRemove
	void groupaccept();//APBGame.cHostingPlayerController.groupaccept
	void displayworlds();//APBGame.cHostingPlayerController.displayworlds
	bool SetClanUID(int nClanUID);//APBGame.cHostingPlayerController.SetClanUID
	void ClanRankCreate(int nPermission,struct FString sRankName);//APBGame.cHostingPlayerController.ClanRankCreate
	bool SetOpenWorldCashAmount(int pr_nAmount);//APBGame.cHostingPlayerController.SetOpenWorldCashAmount
	void NameChange(int nSlotNumber);//APBGame.cHostingPlayerController.NameChange
	void Send_DS2GC_CHAT(unsigned char eType,int nCharacterUID,unsigned char eChatTag,bool bBypassIgnore,struct FString sMessage,struct FQWord nSilenceExpiry);//APBGame.cHostingPlayerController.Send_DS2GC_CHAT
	void FileSet(unsigned char eSDDKey,struct FString sSection,struct FString sKey,struct FString sValue);//APBGame.cHostingPlayerController.FileSet
	void displayignorelist();//APBGame.cHostingPlayerController.displayignorelist
	void Send_DS2GC_CHAT_SILENCE(struct FQWord nSilenceExpiry);//APBGame.cHostingPlayerController.Send_DS2GC_CHAT_SILENCE
	void lsdisconnect();//APBGame.cHostingPlayerController.lsdisconnect
	void Send_DS2GC_ANS_MAIL_DETACH_ITEM(int nReturnCode,int nMailUID,int nRemainingTime);//APBGame.cHostingPlayerController.Send_DS2GC_ANS_MAIL_DETACH_ITEM
	void displaycharacters();//APBGame.cHostingPlayerController.displaycharacters
	void challengerank(int nChallengeType,int nTop);//APBGame.cHostingPlayerController.challengerank
	void SetAccountPremium(int nAccountPremium);//APBGame.cHostingPlayerController.SetAccountPremium
	int RetRewardTokenAmount();//APBGame.cHostingPlayerController.RetRewardTokenAmount
	void Receive_GC2DS_ASK_DISTRICT_ENTER();//APBGame.cHostingPlayerController.Receive_GC2DS_ASK_DISTRICT_ENTER
	void ReplicatedEvent(struct FName VarName);//APBGame.cHostingPlayerController.ReplicatedEvent
	void Send_GC2DS_ASK_MARKETPLACE_AUCTION_CREATE(unsigned char eAuctionType,struct FGuid nItemGuid,unsigned char eDuration,int nStartingBid,int nBuyout,int nCash,struct FString sCharacterRestriction);//APBGame.cHostingPlayerController.Send_GC2DS_ASK_MARKETPLACE_AUCTION_CREATE
	void FileSave(unsigned char eSDDKey);//APBGame.cHostingPlayerController.FileSave
	void Receive_DS2GC_ANS_MARKETPLACE_AUCTION_CREATE(int nReturnCode,unsigned char eAuctionType);//APBGame.cHostingPlayerController.Receive_DS2GC_ANS_MARKETPLACE_AUCTION_CREATE
	void Receive_GC2DS_ASK_MAIL_SEND_BODY_PART(struct FString sBody,bool bEnd);//APBGame.cHostingPlayerController.Receive_GC2DS_ASK_MAIL_SEND_BODY_PART
	void displayclanmemberbio(int nMemberNumber);//APBGame.cHostingPlayerController.displayclanmemberbio
	void wsdisconnect();//APBGame.cHostingPlayerController.wsdisconnect
};
UClass* AcHostingPlayerController::pClassPointer = NULL;

//0x000000 (0x0006CC - 0x0006CC)
//cAPBPlayerControllerAnimation[0x10392860]
class AcAPBPlayerControllerAnimation : public AcHostingPlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBPlayerControllerAnimation");
		return pClassPointer;
	};

public:
	void LongClientAdjustPosition(double TimeStamp,struct FName NewState,unsigned char newPhysics,float NewLocX,float NewLocY,float NewLocZ,float NewVelX,float NewVelY,float NewVelZ,class AActor* NewBase,float NewFloorX,float NewFloorY,float NewFloorZ);//APBGame.cAPBPlayerControllerAnimation.LongClientAdjustPosition
	void ReplicateMove(float DeltaTime,FVector3 newAccel,FRotator DeltaRot);//APBGame.cAPBPlayerControllerAnimation.ReplicateMove
	void ServerMove(double TimeStamp,FVector3 InAccel,FVector3 ClientLoc,unsigned char MoveFlags,unsigned char ClientRoll,int View);//APBGame.cAPBPlayerControllerAnimation.ServerMove
	void ServerUpdateTimeStamp(double TimeStamp);//APBGame.cAPBPlayerControllerAnimation.ServerUpdateTimeStamp
	bool IsMoveInputIgnored();//APBGame.cAPBPlayerControllerAnimation.IsMoveInputIgnored
};
UClass* AcAPBPlayerControllerAnimation::pClassPointer = NULL;

//0x000A64 (0x001130 - 0x0006CC)
//cAPBPlayerController[0x10392730]
class AcAPBPlayerController : public AcAPBPlayerControllerAnimation
{
public:
	DWORD                                              VfTable_IiCustomisedActor;                        		// 0x0006CC (0x0004)              
	int                                                m_nExternalAddress;                               		// 0x0006D0 (0x0004)              
	class AcReplicatedHUDMarkerGroup*                  m_ReplicatedHUDMarkerGroup;                       		// 0x0006D4 (0x0004)              
	int                                                m_iMissionsBeforeFeedback;                        		// 0x0006D8 (0x0004)              
	unsigned long                                      m_bRespawnInVehicle : 1;                          		// 0x0006DC (0x0004) [0x00000001] 
	unsigned long                                      m_bFlyWhileDead : 1;                              		// 0x0006DC (0x0004) [0x00000002] 
	unsigned long                                      m_bDebugOpenCustomisation : 1;                    		// 0x0006DC (0x0004) [0x00000004] 
	unsigned long                                      m_bTestHitReactions : 1;                          		// 0x0006DC (0x0004) [0x00000008] 
	unsigned long                                      m_bHideEnvironmentStreamingOnStartup : 1;         		// 0x0006DC (0x0004) [0x00000010] 
	unsigned long                                      m_bHideCharacterStreamingOnStartup : 1;           		// 0x0006DC (0x0004) [0x00000020] 
	unsigned long                                      m_bWaitForClosestBuildingLODOnly : 1;             		// 0x0006DC (0x0004) [0x00000040] 
	unsigned long                                      m_bShowStreamingTransitionScreen : 1;             		// 0x0006DC (0x0004) [0x00000080] 
	unsigned long                                      m_bRespawnAtCameraLocation : 1;                   		// 0x0006DC (0x0004) [0x00000100] 
	unsigned long                                      m_bDuringSpawnMapDelay : 1;                       		// 0x0006DC (0x0004) [0x00000200] 
	unsigned long                                      bIsShowingVehicleViewCones : 1;                   		// 0x0006DC (0x0004) [0x00000400] 
	unsigned long                                      bIsShowingVehicleSockets : 1;                     		// 0x0006DC (0x0004) [0x00000800] 
	unsigned long                                      m_bShowGrenadeFlight : 1;                         		// 0x0006DC (0x0004) [0x00001000] 
	unsigned long                                      bIsShowingInteractionPoints : 1;                  		// 0x0006DC (0x0004) [0x00002000] 
	unsigned long                                      m_bCurrentTargetIsAimLocked : 1;                  		// 0x0006DC (0x0004) [0x00004000] 
	unsigned long                                      m_bIsReadyForMissions : 1;                        		// 0x0006DC (0x0004) [0x00008000] 
	unsigned long                                      m_bElectiveVehicleSpawnDisabled : 1;              		// 0x0006DC (0x0004) [0x00010000] 
	unsigned long                                      m_bUseAutoReady : 1;                              		// 0x0006DC (0x0004) [0x00020000] 
	unsigned long                                      m_bHasPendingMetagroupingVote : 1;                		// 0x0006DC (0x0004) [0x00040000] 
	unsigned long                                      m_bWasReadyForMissions : 1;                       		// 0x0006DC (0x0004) [0x00080000] 
	unsigned long                                      m_bHasDisplayedNag : 1;                           		// 0x0006DC (0x0004) [0x00100000] 
	unsigned long                                      m_bHadActiveMission : 1;                          		// 0x0006DC (0x0004) [0x00200000] 
	unsigned long                                      m_bInitialSetupDone : 1;                          		// 0x0006DC (0x0004) [0x00400000] 
	unsigned long                                      m_bExtendedImmunityTime : 1;                      		// 0x0006DC (0x0004) [0x00800000] 
	unsigned long                                      m_bCanRespawnDeployedVehicle : 1;                 		// 0x0006DC (0x0004) [0x01000000] 
	unsigned long                                      m_bCanTargetAll : 1;                              		// 0x0006DC (0x0004) [0x02000000] 
	unsigned long                                      m_bShowServerHits : 1;                            		// 0x0006DC (0x0004) [0x04000000] 
	unsigned long                                      m_bDebugHitMarkers : 1;                           		// 0x0006DC (0x0004) [0x08000000] 
	unsigned long                                      m_bAlwaysAccessInventory : 1;                     		// 0x0006DC (0x0004) [0x10000000] 
	unsigned long                                      m_bIsSpotting : 1;                                		// 0x0006DC (0x0004) [0x20000000] 
	unsigned long                                      m_bIsRadarJamming : 1;                            		// 0x0006DC (0x0004) [0x40000000] 
	unsigned long                                      m_bRadarPingAlways : 1;                           		// 0x0006DC (0x0004) [0x80000000] 
	unsigned long                                      m_bThrownGrenadeDecrementAmmoCapacity : 1;        		// 0x0006E0 (0x0004) [0x00000001] 
	unsigned long                                      m_bStartGraffitiBar : 1;                          		// 0x0006E0 (0x0004) [0x00000002] 
	unsigned long                                      m_bRenderDebugTracers : 1;                        		// 0x0006E0 (0x0004) [0x00000004] 
	unsigned long                                      m_bUpdateTimeDebugData : 1;                       		// 0x0006E0 (0x0004) [0x00000008] 
	unsigned long                                      m_bMoveToPositionFirstPlayerMove : 1;             		// 0x0006E0 (0x0004) [0x00000010] 
	unsigned long                                      m_bReachedAutoMoveToPosition : 1;                 		// 0x0006E0 (0x0004) [0x00000020] 
	unsigned long                                      m_bCanceledAutoMoveToState : 1;                   		// 0x0006E0 (0x0004) [0x00000040] 
	unsigned long                                      m_bClientRequestedCanceledAutoMoveToState : 1;    		// 0x0006E0 (0x0004) [0x00000080] 
	unsigned long                                      m_bAutoMoveToStateEndedSuccessfully : 1;          		// 0x0006E0 (0x0004) [0x00000100] 
	unsigned long                                      m_bAutoMoveToStateStartedInError : 1;             		// 0x0006E0 (0x0004) [0x00000200] 
	unsigned long                                      m_bEjectedDriver : 1;                             		// 0x0006E0 (0x0004) [0x00000400] 
	unsigned long                                      m_bCanceledVehicleCloseDoorState : 1;             		// 0x0006E0 (0x0004) [0x00000800] 
	unsigned long                                      m_bCloseDoorEndedSucessfully : 1;                 		// 0x0006E0 (0x0004) [0x00001000] 
	unsigned long                                      m_bHasMovedInCloseVehicleDoorState : 1;           		// 0x0006E0 (0x0004) [0x00002000] 
	unsigned long                                      m_bLeanOutPressed : 1;                            		// 0x0006E0 (0x0004) [0x00004000] 
	unsigned long                                      m_bPendingCSARequest : 1;                         		// 0x0006E0 (0x0004) [0x00008000] 
	unsigned long                                      m_bReceievedRespawnInfo : 1;                      		// 0x0006E0 (0x0004) [0x00010000] 
	unsigned long                                      m_bDiedOnMission : 1;                             		// 0x0006E0 (0x0004) [0x00020000] 
	unsigned long                                      m_bDead : 1;                                      		// 0x0006E0 (0x0004) [0x00040000] 
	unsigned long                                      m_bDisplayingRespawnTransitionScreen : 1;         		// 0x0006E0 (0x0004) [0x00080000] 
	unsigned long                                      m_bDisplayingSpawnZoneSelectScreen : 1;           		// 0x0006E0 (0x0004) [0x00100000] 
	unsigned long                                      m_bCharacterCustomisationRequestComplete : 1;     		// 0x0006E0 (0x0004) [0x00200000] 
	unsigned long                                      m_bInvertMouse : 1;                               		// 0x0006E0 (0x0004) [0x00400000] 
	unsigned long                                      m_bUIInteraction : 1;                             		// 0x0006E0 (0x0004) [0x00800000] 
	unsigned long                                      m_bLookBehindCamera : 1;                          		// 0x0006E0 (0x0004) [0x01000000] 
	unsigned long                                      m_bGettingCharacterState : 1;                     		// 0x0006E0 (0x0004) [0x02000000] 
	unsigned long                                      m_bWorldChangesEnabled : 1;                       		// 0x0006E0 (0x0004) [0x04000000] 
	unsigned long                                      m_bSpawnedBefore : 1;                             		// 0x0006E0 (0x0004) [0x08000000] 
	unsigned long                                      m_bSpawnedBeforeClient : 1;                       		// 0x0006E0 (0x0004) [0x10000000] 
	unsigned long                                      m_bCharacterCustomisationUploadInProgress : 1;    		// 0x0006E0 (0x0004) [0x20000000] 
	unsigned long                                      m_bVehicleCustomisationUploadInProgress : 1;      		// 0x0006E0 (0x0004) [0x40000000] 
	unsigned long                                      m_bGraffitiCustomisationUploadInProgress : 1;     		// 0x0006E0 (0x0004) [0x80000000] 
	unsigned long                                      m_bArrested : 1;                                  		// 0x0006E4 (0x0004) [0x00000001] 
	unsigned long                                      m_bUnconscious : 1;                               		// 0x0006E4 (0x0004) [0x00000002] 
	unsigned long                                      m_bTargetingMarkerOverridden : 1;                 		// 0x0006E4 (0x0004) [0x00000004] 
	unsigned long                                      m_bIsDeathmatchTarget : 1;                        		// 0x0006E4 (0x0004) [0x00000008] 
	unsigned long                                      m_bIsVIPTarget : 1;                               		// 0x0006E4 (0x0004) [0x00000010] 
	unsigned long                                      m_bIsGMInvisibilitySettingEnabled : 1;            		// 0x0006E4 (0x0004) [0x00000020] 
	unsigned long                                      m_bIsGMInvulnerabilitySettingEnabled : 1;         		// 0x0006E4 (0x0004) [0x00000040] 
	unsigned long                                      m_bIsGMIdentifierEnabled : 1;                     		// 0x0006E4 (0x0004) [0x00000080] 
	unsigned long                                      m_bIsGMInFreeCameraMode : 1;                      		// 0x0006E4 (0x0004) [0x00000100] 
	unsigned long                                      m_bWasGMInvisibilitySettingEnabled : 1;           		// 0x0006E4 (0x0004) [0x00000200] 
	unsigned long                                      m_bWasGMIdentifierSettingEnabled : 1;             		// 0x0006E4 (0x0004) [0x00000400] 
	unsigned long                                      m_bGMSpecateRotationLocked : 1;                   		// 0x0006E4 (0x0004) [0x00000800] 
	unsigned long                                      m_bMissionOffersDisabled_GM : 1;                  		// 0x0006E4 (0x0004) [0x00001000] 
	unsigned long                                      m_bFrozen_GM : 1;                                 		// 0x0006E4 (0x0004) [0x00002000] 
	unsigned long                                      m_bFrozenMessageSentRecently : 1;                 		// 0x0006E4 (0x0004) [0x00004000] 
	unsigned long                                      m_bIsNoPenaltyRespawning : 1;                     		// 0x0006E4 (0x0004) [0x00008000] 
	unsigned long                                      m_bInSymbolEditor : 1;                            		// 0x0006E4 (0x0004) [0x00010000] 
	unsigned long                                      m_bInMusicStudio : 1;                             		// 0x0006E4 (0x0004) [0x00020000] 
	unsigned long                                      m_bIsLfg : 1;                                     		// 0x0006E4 (0x0004) [0x00040000] 
	unsigned long                                      m_bIsAvailableForMetagrouping : 1;                		// 0x0006E4 (0x0004) [0x00080000] 
	unsigned long                                      m_bIsMissionInProgress : 1;                       		// 0x0006E4 (0x0004) [0x00100000] 
	unsigned long                                      m_bIsOvermatched : 1;                             		// 0x0006E4 (0x0004) [0x00200000] 
	unsigned long                                      m_bLockedInDatabase : 1;                          		// 0x0006E4 (0x0004) [0x00400000] 
	unsigned long                                      m_bTutorialComplete : 1;                          		// 0x0006E4 (0x0004) [0x00800000] 
	unsigned long                                      m_bTutorialFirstPlay : 1;                         		// 0x0006E4 (0x0004) [0x01000000] 
	unsigned long                                      m_bClientLoaded : 1;                              		// 0x0006E4 (0x0004) [0x02000000] 
	unsigned long                                      m_bIsUnstickRespawnInProgress : 1;                		// 0x0006E4 (0x0004) [0x04000000] 
	unsigned long                                      m_bUsingAttachedToActorCamera : 1;                		// 0x0006E4 (0x0004) [0x08000000] 
	unsigned long                                      m_bUseDirectorCameraMode : 1;                     		// 0x0006E4 (0x0004) [0x10000000] 
	unsigned long                                      m_bFlyCamAbsoluteAxes : 1;                        		// 0x0006E4 (0x0004) [0x20000000] 
	unsigned long                                      m_bCameraKeysExtraMovement : 1;                   		// 0x0006E4 (0x0004) [0x40000000] 
	unsigned long                                      m_bMovementKeyDisallowLean : 1;                   		// 0x0006E4 (0x0004) [0x80000000] 
	unsigned long                                      m_bSpectatorMode : 1;                             		// 0x0006E8 (0x0004) [0x00000001] 
	unsigned long                                      m_bCameraRightSideKey : 1;                        		// 0x0006E8 (0x0004) [0x00000002] 
	unsigned long                                      m_bVehicleMovementKeyIsDownOnServer : 1;          		// 0x0006E8 (0x0004) [0x00000004] 
	unsigned long                                      m_bLastServerDriveAcked : 1;                      		// 0x0006E8 (0x0004) [0x00000008] 
	unsigned long                                      m_bIsUnstickRespawning : 1;                       		// 0x0006E8 (0x0004) [0x00000010] 
	unsigned long                                      m_bWaitingOnStreamingDerivedStateActive : 1;      		// 0x0006E8 (0x0004) [0x00000020] 
	unsigned long                                      m_bWantsToEnterMarksManShipMode : 1;              		// 0x0006E8 (0x0004) [0x00000040] 
	unsigned long                                      m_bToggleMarksManShipModeOverides : 1;            		// 0x0006E8 (0x0004) [0x00000080] 
	unsigned long                                      m_bSprintPressedSinceEnterMarksMan : 1;           		// 0x0006E8 (0x0004) [0x00000100] 
	unsigned long                                      m_bIsSpawnExcluded : 1;                           		// 0x0006E8 (0x0004) [0x00000200] 
	unsigned long                                      m_bChaosScoreboardOpen : 1;                       		// 0x0006E8 (0x0004) [0x00000400] 
	unsigned long                                      m_bSentAimEvent : 1;                              		// 0x0006E8 (0x0004) [0x00000800] 
	unsigned long                                      m_bSentCameraSwitchEvent : 1;                     		// 0x0006E8 (0x0004) [0x00001000] 
	unsigned long                                      m_bHasSpoken : 1;                                 		// 0x0006E8 (0x0004) [0x00002000] 
	float                                              m_fTimeLeftForSpawnMapDelay;                      		// 0x0006EC (0x0004)              
	float                                              m_fLastTimeQueueNotEmpty;                         		// 0x0006F0 (0x0004)              
	int                                                m_nCompatCharacterUID;                            		// 0x0006F4 (0x0004)              
	class UcDebugPage*                                 m_MyDebugPage;                                    		// 0x0006F8 (0x0004)              
	class UcDebugPage*                                 m_MagicSpawnStuffPage;                            		// 0x0006FC (0x0004)              
	class UcDebugPage*                                 m_vfxPage;                                        		// 0x000700 (0x0004)              
	float                                              m_scrapeFrequency;                                		// 0x000704 (0x0004)              
	class AActor*                                      m_CurrentTarget;                                  		// 0x000708 (0x0004)              
	struct FReticuleLinePickInfo                       m_ReticuleLinePickInfo;                           		// 0x00070C (0x0010)              
	struct FReticuleLinePickInfo                       m_ReticuleLinePickInfoNoTargetingRules;           		// 0x00071C (0x0010)              
	struct FReticuleLinePickInfo                       m_ReticuleLinePickInfoWeaponsAndProjectiles;      		// 0x00072C (0x0010)              
	int                                                m_nMenuSelection;                                 		// 0x00073C (0x0004)              
	int                                                m_nMenuItems;                                     		// 0x000740 (0x0004)              
	unsigned char                                      m_nVerbosityMissionManager;                       		// 0x000744 (0x0001)              PROPERTY: 
	unsigned char                                      m_eAutoReadyState;                                		// 0x000745 (0x0001)              PROPERTY: etAutoReadyState
	unsigned char                                      m_eCrimeListState;                                		// 0x000746 (0x0001)              PROPERTY: etCrimeListState
	unsigned char                                      m_eTaggerType;                                    		// 0x000747 (0x0001)              PROPERTY: etTaggerType
	unsigned char                                      m_nNumActiveRadarSpots;                           		// 0x000748 (0x0001)              PROPERTY: 
	unsigned char                                      m_eHUDReticuleOverride;                           		// 0x000749 (0x0001)              PROPERTY: 
	unsigned char                                      m_bSprint;                                        		// 0x00074A (0x0001)              PROPERTY: 
	unsigned char                                      m_bFireFlag;                                      		// 0x00074B (0x0001)              PROPERTY: 
	unsigned char                                      m_eGotoVehicleAccessPointIndex;                   		// 0x00074C (0x0001)              PROPERTY: etVehiclePositionIndex
	unsigned char                                      m_eGoToCSA;                                       		// 0x00074D (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eVehicleCloseDoorIndex;                         		// 0x00074E (0x0001)              PROPERTY: etVehiclePositionIndex
	unsigned char                                      m_ePendingPredictedCSA;                           		// 0x00074F (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eFactionCached;                                 		// 0x000750 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eCurUploadType;                                 		// 0x000751 (0x0001)              PROPERTY: etPlayerCustomisation
	unsigned char                                      m_eLeanKeyState;                                  		// 0x000752 (0x0001)              PROPERTY: etCharacterLeanState
	unsigned char                                      m_nCustomizationZoneRefCount;                     		// 0x000753 (0x0001)              PROPERTY: 
	unsigned char                                      m_eFriendlyHUDMarkerState;                        		// 0x000754 (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      m_eOppositionHUDMarkerState;                      		// 0x000755 (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      m_eChaosFriendlyHUDMarkerState;                   		// 0x000756 (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      m_eChaosEnemyHUDMarkerState;                      		// 0x000757 (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      m_eMissionInvolvement;                            		// 0x000758 (0x0001)              PROPERTY: 
	unsigned char                                      m_eUIInteractionState;                            		// 0x000759 (0x0001)              PROPERTY: etPlayerInteractionState
	unsigned char                                      m_nLastServerDriveInputs;                         		// 0x00075A (0x0001)              PROPERTY: 
	unsigned char                                      m_nCollisionGroupJoined;                          		// 0x00075B (0x0001)              PROPERTY: 
	unsigned char                                      m_nChaosStatsBestTimeSeconds;                     		// 0x00075C (0x0001)              PROPERTY: 
	unsigned char                                      m_nChaosStatsCurrentTimeSeconds;                  		// 0x00075D (0x0001)              PROPERTY: 
	unsigned char                                      m_eTestUILayoutMode;                              		// 0x00075E (0x0001)              PROPERTY: etScaleformLayoutMode
	unsigned char                                      _0x00075F[0x1];                                   		// 0x00075F (0x0001) MISSED OFFSET
	class AcAPBVehicleBase*                            m_LastRepairedVehicle;                            		// 0x000760 (0x0004)              
	float                                              m_TimeSinceLastVehicleRepair;                     		// 0x000764 (0x0004)              
	float                                              m_fMissionAbandonTimer;                           		// 0x000768 (0x0004)              
	float                                              m_fElectiveVehicleSpawnTimer;                     		// 0x00076C (0x0004)              
	float                                              m_fAutoReadyStateTime;                            		// 0x000770 (0x0004)              
	float                                              m_fHasPendingMetagroupingVoteCountdown;           		// 0x000774 (0x0004)              
	int                                                m_nPendingMetagroupingVoteID;                     		// 0x000778 (0x0004)              
	int                                                m_nClientMetaGroupingVoteQuestionHandle;          		// 0x00077C (0x0004)              
	float                                              m_fNotReadyTimer;                                 		// 0x000780 (0x0004)              
	int                                                m_NotReadyNagHandle;                              		// 0x000784 (0x0004)              
	class AcPlayerVehicleSpawnZone*                    m_VehicleSpawnZone;                               		// 0x000788 (0x0004)              
	DWORD                                              m_pScorerServer;                                  		// 0x00078C (0x0004)              
	DWORD                                              m_pScorerClient;                                  		// 0x000790 (0x0004)              
	DWORD                                              m_pWitnessingManager;                             		// 0x000794 (0x0004)              
	DWORD                                              m_pActiveCrimesList;                              		// 0x000798 (0x0004)              
	double                                             m_fCrimeListPredictedLocalExpiryTime;             		// 0x00079C (0x0008)              
	int                                                m_nCachedHeatLevel;                               		// 0x0007A4 (0x0004)              
	float                                              m_fCachedHeatAmount;                              		// 0x0007A8 (0x0004)              
	class AcAPBVehicleBase*                            m_DeployedVehicle;                                		// 0x0007AC (0x0004)              
	TArray<int>                                        VehicleEnterErrorArray;                           		// 0x0007B0 (0x000C)              
	double                                             m_fDeployedVehicleSpawnTimeStamp;                 		// 0x0007BC (0x0008)              
	int                                                m_nPingRequestIndex;                              		// 0x0007C4 (0x0004)              
	double                                             m_fPingStartTime;                                 		// 0x0007C8 (0x0008)              
	TArray<float>                                      m_fExactPingTimes;                                		// 0x0007D0 (0x000C)              
	float                                              m_fPingInterval;                                  		// 0x0007DC (0x0004)              
	int                                                m_nPingSamples;                                   		// 0x0007E0 (0x0004)              
	int                                                m_HitNotificationQueueLength;                     		// 0x0007E4 (0x0004)              
	float                                              m_HitNotificationTimeout;                         		// 0x0007E8 (0x0004)              
	int                                                m_HitNotificationRate;                            		// 0x0007EC (0x0004)              
	TArray<struct FHitNotificationRecord>              m_HitNotificationQueue;                           		// 0x0007F0 (0x000C)              
	int                                                m_HitNotificationCurrentShotID;                   		// 0x0007FC (0x0004)              
	int                                                m_HitNotificationLastEnteredShotID;               		// 0x000800 (0x0004)              
	int                                                m_HitNotificationLastRecdShotID;                  		// 0x000804 (0x0004)              
	int                                                m_eTagger;                                        		// 0x000808 (0x0004)              
	int                                                m_nTaggerHUDMarkerID;                             		// 0x00080C (0x0004)              
	float                                              m_TaggerTime;                                     		// 0x000810 (0x0004)              
	int                                                m_eSpotter;                                       		// 0x000814 (0x0004)              
	int                                                m_nRadarJammedCharacterUID;                       		// 0x000818 (0x0004)              
	struct FGuid                                       m_nRadarJammedGraffiti;                           		// 0x00081C (0x0010)              
	int                                                m_nRadarTowerCount;                               		// 0x00082C (0x0004)              
	int                                                m_aRadarSpots[0x67];                              		// 0x000830 (0x019C)              
	float                                              m_GraffitiBarTime;                                		// 0x0009CC (0x0004)              
	class AcDebugTracerManager*                        m_DebugTracerManager;                             		// 0x0009D0 (0x0004)              
	double                                             m_fCurrentServerTimeStamp;                        		// 0x0009D4 (0x0008)              
	double                                             m_fPreviousServerTimeStamp;                       		// 0x0009DC (0x0008)              
	float                                              m_PreviousClientTimeDeltas[0x3C];                 		// 0x0009E4 (0x00F0)              
	float                                              m_PreviousServerTimeDeltas[0x3C];                 		// 0x000AD4 (0x00F0)              
	int                                                m_nNextClientTimeDeltaIndex;                      		// 0x000BC4 (0x0004)              
	int                                                m_nNextServerTimeDeltaIndex;                      		// 0x000BC8 (0x0004)              
	struct FMusicPlaybackInfo                          m_MusicPlaybackInfo;                              		// 0x000BCC (0x0020)              
	struct FMusicNameInfo                              m_MusicNameInfo;                                  		// 0x000BEC (0x0030)              
	class AcAPBVehicleBase*                            m_pMusicVehicle;                                  		// 0x000C1C (0x0004)              
	TArray<class AcAudioDisplayPoint*>                 m_aMusicDisplayPoints;                            		// 0x000C20 (0x000C)              
	TArray<class AcTaskItemAudioProxy*>                m_aMusicBoomBox;                                  		// 0x000C2C (0x000C)              
	int                                                m_nPlaybackDeviceSetting;                         		// 0x000C38 (0x0004)              
	class AcTestItem*                                  m_LastSpawnedTestHUDMarker;                       		// 0x000C3C (0x0004)              
	FVector3                                           m_AutoMoveToPosition;                             		// 0x000C40 (0x000C)              
	FVector3                                           m_DestinationPosition;                            		// 0x000C4C (0x000C)              
	FRotator                                           m_AutoMoveToRotation;                             		// 0x000C58 (0x000C)              
	FRotator                                           m_DestinationRotation;                            		// 0x000C64 (0x000C)              
	float                                              m_fAutoMoveTo2DDistanceAtDestination;             		// 0x000C70 (0x0004)              
	float                                              m_fZDistanceAtDestination;                        		// 0x000C74 (0x0004)              
	float                                              m_fDistanceTooFarFromDestination;                 		// 0x000C78 (0x0004)              
	float                                              m_AutoMoveToEnterTimeOut;                         		// 0x000C7C (0x0004)              
	FVector3                                           m_AutoMoveToPositionDirn;                         		// 0x000C80 (0x000C)              
	FVector3                                           m_PawnTestMovingPosition;                         		// 0x000C8C (0x000C)              
	float                                              m_MoveToPositionNoMovementSize;                   		// 0x000C98 (0x0004)              
	float                                              m_MoveToPositionNoMovementTimeOut;                		// 0x000C9C (0x0004)              
	int                                                m_MoveToPositionID;                               		// 0x000CA0 (0x0004)              
	double                                             m_fFirstBuildingCheckSuccess;                     		// 0x000CA4 (0x0008)              
	class AcAPBVehicleBase*                            m_GotoVehicleAccessPointVehicle;                  		// 0x000CAC (0x0004)              
	class AActor*                                      m_GoToCSAInteractiveActor;                        		// 0x000CB0 (0x0004)              
	int                                                m_nGoToCSAIPIndex;                                		// 0x000CB4 (0x0004)              
	int                                                m_nGoToAutoRouteDataIndex;                        		// 0x000CB8 (0x0004)              
	class AcAPBVehicleBase*                            m_VehicleCloseDoor;                               		// 0x000CBC (0x0004)              
	struct FPredictedADAInfo                           m_PredictedADAInfo;                               		// 0x000CC0 (0x001C)              
	class UcPlayerControllerCSAComponent*              m_CSAComponent;                                   		// 0x000CDC (0x0004)              
	struct FRespawnInfo                                m_RespawnInfo;                                    		// 0x000CE0 (0x005C)              
	class APawn*                                       DeadPawn;                                         		// 0x000D3C (0x0004)              
	class AcPlayerCharacterSpawnZone*                  m_pPendingSpawnZone;                              		// 0x000D40 (0x0004)              
	int                                                m_nCorpseHUDMarkerID;                             		// 0x000D44 (0x0004)              
	DWORD                                              m_pElectedSpawnPoint;                             		// 0x000D48 (0x0004)              
	class AcStreamedBuildingActor*                     m_pCallbackBuildingActor;                         		// 0x000D4C (0x0004)              
	float                                              m_fCallbackBuildingDistanceSq;                    		// 0x000D50 (0x0004)              
	class APawn*                                       m_LastPawnViewed;                                 		// 0x000D54 (0x0004)              
	float                                              m_fSpikeWaitTime;                                 		// 0x000D58 (0x0004)              
	int                                                m_nSpikeFramesLeft;                               		// 0x000D5C (0x0004)              
	FRotator                                           m_CameraAimRotation;                              		// 0x000D60 (0x000C)              
	class AcOpenWorldDropOff*                          m_AutoMarkedOpenWorldDropOff[0x6];                		// 0x000D6C (0x0018)              
	struct FString                                     m_sCharacterStateFileName;                        		// 0x000D84 (0x000C)              
	int                                                m_nPersistenceTestIndex;                          		// 0x000D90 (0x0004)              
	int                                                m_nPersistenceTextMaxIndex;                       		// 0x000D94 (0x0004)              
	int                                                m_nPersistenceTestTimer;                          		// 0x000D98 (0x0004)              
	TArray<struct FContactPair>                        m_aClientUnlockedContacts;                        		// 0x000D9C (0x000C)              
	int                                                m_nCurUploadIndex;                                		// 0x000DA8 (0x0004)              
	class AcStorageInventory*                          m_Inventory;                                      		// 0x000DAC (0x0004)              
	class AcHoldableItemManager*                       m_HoldableItemManager;                            		// 0x000DB0 (0x0004)              
	int                                                m_ContactVendor;                                  		// 0x000DB4 (0x0004)              
	class AcVendorContactInterface*                    m_VendorContactInterface;                         		// 0x000DB8 (0x0004)              
	TArray<class AActor*>                              m_FreeDisplayPoints;                              		// 0x000DBC (0x000C)              
	struct FUploadItemCustomisationInfo                m_UploadItemCustomisationInfo;                    		// 0x000DC8 (0x003C)              
	struct FClientItemOperationInfo                    m_ClientItemOperationInfo;                        		// 0x000E04 (0x0014)              
	TArray<struct FQueuedItemOperation>                m_QueuedItemOperations;                           		// 0x000E18 (0x000C)              
	class UcCompressedAssetCustomisation*              m_CharacterCustomisation;                         		// 0x000E24 (0x0004)              
	class UcCompressedAssetCustomisation*              m_VehicleCustomisation;                           		// 0x000E28 (0x0004)              
	class UcCompressedAssetCustomisation*              m_GraffitiCustomisation;                          		// 0x000E2C (0x0004)              
	class UcCompressedAssetCustomisation*              m_ThemeCustomisation;                             		// 0x000E30 (0x0004)              
	struct FGuid                                       m_LocalCharacterPrecacheGUID;                     		// 0x000E34 (0x0010)              
	struct FGuid                                       m_LastMissionGUID;                                		// 0x000E44 (0x0010)              
	struct FMultiMap_Mirror                            m_CustomisationDataRequests;                      		// 0x000E54 (0x003C)              
	class UcCompressedAssetCustomisation*              m_UploadedCharacterCustomisation;                 		// 0x000E90 (0x0004)              
	class UcCompressedAssetCustomisation*              m_UploadedVehicleCustomisation;                   		// 0x000E94 (0x0004)              
	class UcCompressedAssetCustomisation*              m_UploadedGraffitiCustomisation;                  		// 0x000E98 (0x0004)              
	TArray<class UcVehicleValidator*>                  m_aVehicleValidators;                             		// 0x000E9C (0x000C)              
	int                                                m_nTakeOutInstigatorUID;                          		// 0x000EA8 (0x0004)              
	TArray<int>                                        m_iInvulnerablePawnUIDsAttacked;                  		// 0x000EAC (0x000C)              
	int                                                m_nPlayerPingHUDMarkerID;                         		// 0x000EB8 (0x0004)              
	int                                                m_nTargetingHUDMarkerID;                          		// 0x000EBC (0x0004)              
	int                                                m_nChaosFriendlyHUDMarkerID;                      		// 0x000EC0 (0x0004)              
	int                                                m_nChaosEnemyHUDMarkerID;                         		// 0x000EC4 (0x0004)              
	int                                                m_eNeutralHUDMarkerType;                          		// 0x000EC8 (0x0004)              
	int                                                m_eFriendlyHUDMarkerType;                         		// 0x000ECC (0x0004)              
	int                                                m_eOppositionHUDMarkerType;                       		// 0x000ED0 (0x0004)              
	int                                                m_eChaosFriendlyHUDMarkerType;                    		// 0x000ED4 (0x0004)              
	int                                                m_eChaosEnemyHUDMarkerType;                       		// 0x000ED8 (0x0004)              
	float                                              m_fGMRunSpeedOverride;                            		// 0x000EDC (0x0004)              
	int                                                m_nGMHUDMarkerID;                                 		// 0x000EE0 (0x0004)              
	class ASpotLightMovable*                           m_pGMSpotlight;                                   		// 0x000EE4 (0x0004)              
	class AActor*                                      m_pSpectatingBaseTarget;                          		// 0x000EE8 (0x0004)              
	TArray<struct FProfilingSequenceEntry>             m_aGMProfileSequence;                             		// 0x000EEC (0x000C)              
	int                                                m_nCurrentProfileSequenceIndex;                   		// 0x000EF8 (0x0004)              
	float                                              m_fRemainingProfileSequenceTime;                  		// 0x000EFC (0x0004)              
	int                                                m_eCurrentCustomisationEditor;                    		// 0x000F00 (0x0004)              
	DWORD                                              m_pBotDetection;                                  		// 0x000F04 (0x0004)              
	DWORD                                              m_pPGMissionActivityTracker;                      		// 0x000F08 (0x0004)              
	int                                                m_nPledgedContactSddRowID;                        		// 0x000F0C (0x0004)              
	int                                                m_nEffectivePledgedContactSddRowID;               		// 0x000F10 (0x0004)              
	int                                                m_nTeamLifetimePledgedContactSddRowID;            		// 0x000F14 (0x0004)              
	DWORD                                              m_pFoundPledgedContact;                           		// 0x000F18 (0x0004)              
	DWORD                                              m_pPledge;                                        		// 0x000F1C (0x0004)              
	DWORD                                              m_pPersonalCG;                                    		// 0x000F20 (0x0004)              
	DWORD                                              m_pTeam;                                          		// 0x000F24 (0x0004)              
	int                                                m_nPendingGroupId;                                		// 0x000F28 (0x0004)              
	class AcMission*                                   m_Mission;                                        		// 0x000F2C (0x0004)              
	class AcMission*                                   m_MissionPreRepnotify;                            		// 0x000F30 (0x0004)              
	int                                                m_iTimeOfLastBackupCall;                          		// 0x000F34 (0x0004)              
	int                                                m_nMissionOfferPauseTimer;                        		// 0x000F38 (0x0004)              
	int                                                m_nRespawnDelayDuration;                          		// 0x000F3C (0x0004)              
	class AcDistrictBlock*                             m_CurrentDistrict;                                		// 0x000F40 (0x0004)              
	DWORD                                              m_pPersistentCharacter;                           		// 0x000F44 (0x0004)              
	DWORD                                              m_pPersisCharDataPrev;                            		// 0x000F48 (0x0004)              
	double                                             m_fDatabaseLastCheckpointTime;                    		// 0x000F4C (0x0008)              
	double                                             m_fDatabaseLastSaveTime;                          		// 0x000F54 (0x0008)              
	struct FString                                     m_sCharacterName;                                 		// 0x000F5C (0x000C)              
	DWORD                                              m_pPlayerTutorialClient;                          		// 0x000F68 (0x0004)              
	DWORD                                              m_pPlayerTutorialServer;                          		// 0x000F6C (0x0004)              
	class AcWaypoint*                                  m_pTutorialWaypoint;                              		// 0x000F70 (0x0004)              
	float                                              m_fOldInForward;                                  		// 0x000F74 (0x0004)              
	TArray<class AcWaypoint*>                          m_aPersonalWaypoints;                             		// 0x000F78 (0x000C)              
	TArray<class AcWaypoint*>                          m_aGroupWaypoints;                                		// 0x000F84 (0x000C)              
	int                                                m_nGroupWaypointSpamAmount;                       		// 0x000F90 (0x0004)              
	float                                              m_fGroupWaypointSpamTime;                         		// 0x000F94 (0x0004)              
	FVector3                                           m_vecDiedCameraLocation;                          		// 0x000F98 (0x000C)              
	FRotator                                           m_rotDiedCameraRotation;                          		// 0x000FA4 (0x000C)              
	FVector3                                           m_vecCameraSpawnZoneLocation;                     		// 0x000FB0 (0x000C)              
	class AActor*                                      m_pUIActor;                                       		// 0x000FBC (0x0004)              
	float                                              m_fMaxFlyCamSpeed;                                		// 0x000FC0 (0x0004)              
	float                                              m_fMaxUpDownCamSpeed;                             		// 0x000FC4 (0x0004)              
	struct FString                                     m_NextSpectatorViewTargetCharacterNameString;     		// 0x000FC8 (0x000C)              
	class AcAPBVehicleBase*                            m_APBVehicleHijacking;                            		// 0x000FD4 (0x0004)              
	struct FPvPFlags                                   m_PvPFlags;                                       		// 0x000FD8 (0x000C)              
	int                                                m_LastValidPawnViewTargetUID;                     		// 0x000FE4 (0x0004)              
	float                                              m_fFlyCamLookUpScale;                             		// 0x000FE8 (0x0004)              
	float                                              m_fFlyCamLookRightScale;                          		// 0x000FEC (0x0004)              
	int                                                m_MissionEvaluate_QuestionHandle;                 		// 0x000FF0 (0x0004)              
	class UcObservers*                                 m_aObservers;                                     		// 0x000FF4 (0x0004)              
	class AcAPBPawn*                                   m_APBPawnLastConnected;                           		// 0x000FF8 (0x0004)              
	class AcAPBPawn*                                   m_APBPawnLastConnectedReplicated;                 		// 0x000FFC (0x0004)              
	double                                             m_fLastAimRotationTimeStamp;                      		// 0x001000 (0x0008)              
	int                                                m_nLastAimRotation;                               		// 0x001008 (0x0004)              
	float                                              m_fLastCameraCollidePercent;                      		// 0x00100C (0x0004)              
	double                                             m_fLastServerDriveInputsTimeStamp;                		// 0x001010 (0x0008)              
	double                                             m_fLastServerDriveTimeStamp;                      		// 0x001018 (0x0008)              
	int                                                m_nCurrentChallengeScore;                         		// 0x001020 (0x0004)              
	struct FQWord                                      m_nSteamID;                                       		// 0x001024 (0x0008)              
	TArray<int>                                        m_HUDMarkersPreventingVisibilityChecks;           		// 0x00102C (0x000C)              
	int                                                m_nChallengeActivitySkipCooldownTime;             		// 0x001038 (0x0004)              
	DWORD                                              m_pChatFloodMonitor;                              		// 0x00103C (0x0004)              
	int                                                m_nChaosStatsBestScore;                           		// 0x001040 (0x0004)              
	int                                                m_nChaosStatsBestTimeMinutes;                     		// 0x001044 (0x0004)              
	int                                                m_nChaosStatsCurrentScore;                        		// 0x001048 (0x0004)              
	int                                                m_nChaosStatsCurrentTimeMinutes;                  		// 0x00104C (0x0004)              
	float                                              m_fChaosStatsEstimatedCurrentTime;                		// 0x001050 (0x0004)              
	struct FString                                     m_sTestUIToLoad;                                  		// 0x001054 (0x000C)              
	int                                                m_eTestUILayer;                                   		// 0x001060 (0x0004)              
	int                                                m_nTestUIPriority;                                		// 0x001064 (0x0004)              
	class UcUIControllerBase*                          m_pTestUIController;                              		// 0x001068 (0x0004)              
	class UClass*                                      m_pTestUIControllerClass;                         		// 0x00106C (0x0004)              
	DWORD                                              m_pDailyActivitiesServer;                         		// 0x001070 (0x0004)              
	DWORD                                              m_pDailyActivitiesClient;                         		// 0x001074 (0x0004)              
	int                                                m_nNumAvailableDailyActivities;                   		// 0x001078 (0x0004)              
	int                                                m_nActiveDailyActivityValue;                      		// 0x00107C (0x0004)              
	DWORD                                              m_pPlayerCollectables;                            		// 0x001080 (0x0004)              
	DWORD                                              m_pPointsOfInterest;                              		// 0x001084 (0x0004)              
	class AcTaskItem*                                  m_DeployedTaskItem;                               		// 0x001088 (0x0004)              
	class AcWeaponPickup*                              m_pDroppedWeapon;                                 		// 0x00108C (0x0004)              
	int                                                m_nGBBytesTransferred;                            		// 0x001090 (0x0004)              
	DWORD                                              m_pGBData;                                        		// 0x001094 (0x0004)              
	int                                                m_nGBPBytesTransferred;                           		// 0x001098 (0x0004)              
	DWORD                                              m_pGBPData;                                       		// 0x00109C (0x0004)              
	float                                              m_fGBTimer;                                       		// 0x0010A0 (0x0004)              
	int                                                m_nTeamLeadershipVoteID;                          		// 0x0010A4 (0x0004)              
	int                                                m_nTeamLeadershipVoteQuestionHandle;              		// 0x0010A8 (0x0004)              
	unsigned char                                      m_ServerCustomizationRequests[0x3C];              		// 0x0010AC (0x003C)              UNKNOWN PROPERTY: MapProperty
	struct FScriptDelegate                             __OnSummonItemClient__Delegate;                   		// 0x0010E8 (0x000C)              
	struct FScriptDelegate                             __OnOperateOnItemCallback__Delegate;              		// 0x0010F4 (0x000C)              
	struct FScriptDelegate                             __OnItemCreateCallback__Delegate;                 		// 0x001100 (0x000C)              
	struct FScriptDelegate                             __OnGetDisplayPointPositionCallback__Delegate;    		// 0x00110C (0x000C)              
	struct FScriptDelegate                             __OnAddGroupWaypointCallback__Delegate;           		// 0x001118 (0x000C)              
	struct FScriptDelegate                             __OnDeleteGroupWaypointCallback__Delegate;        		// 0x001124 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBPlayerController");
		return pClassPointer;
	};

public:
	class AcAPBPawn* GetCharacterPawnLegacy();//APBGame.cAPBPlayerController.GetCharacterPawnLegacy
	void DebugTeleportToObjectiveTaskTarget(int nObjectiveIndex,int nTaskTargetIndex);//APBGame.cAPBPlayerController.DebugTeleportToObjectiveTaskTarget
	void InputToggleRun();//APBGame.cAPBPlayerController.InputToggleRun
	void EndStateGotoVehicleAccessPointState();//APBGame.cAPBPlayerController.EndStateGotoVehicleAccessPointState
	bool RetSpectatorMode();//APBGame.cAPBPlayerController.RetSpectatorMode
	void CloseBlazingFire();//APBGame.cAPBPlayerController.CloseBlazingFire
	void ServerTestCSA(unsigned char eCSA,float fDuration);//APBGame.cAPBPlayerController.ServerTestCSA
	void DebugServerSetWeaponTypeSet(int nWeaponTypeSet);//APBGame.cAPBPlayerController.DebugServerSetWeaponTypeSet
	void GM_ServerSetOppositionNative(struct FString sOppositionCharacter,struct FString MissionCharacters);//APBGame.cAPBPlayerController.GM_ServerSetOppositionNative
	void CallSuperReplicated(struct FName VarName);//APBGame.cAPBPlayerController.CallSuperReplicated
	void ToggleCharacterLocation();//APBGame.cAPBPlayerController.ToggleCharacterLocation
	void NotifyEnterCustomisationStudio(int eCustomisationEditor);//APBGame.cAPBPlayerController.NotifyEnterCustomisationStudio
	void HasItemBeenExamined(struct FString eInventoryItemType);//APBGame.cAPBPlayerController.HasItemBeenExamined
	void TryPledgeServerNative(struct FString contactName);//APBGame.cAPBPlayerController.TryPledgeServerNative
	void CallForBackup();//APBGame.cAPBPlayerController.CallForBackup
	void ServerSetSpawnExcludedNative(bool bSpawnExcluded);//APBGame.cAPBPlayerController.ServerSetSpawnExcludedNative
	void ClientSetAutoReadyState(unsigned char eState);//APBGame.cAPBPlayerController.ClientSetAutoReadyState
	void CombineItemStack(struct FString sCategory,int nInventorySlot1,int nInventorySlot2);//APBGame.cAPBPlayerController.CombineItemStack
	void MissionEvaluate_OpenDialog(int iRowIndex);//APBGame.cAPBPlayerController.MissionEvaluate_OpenDialog
	void OpenQuickReply();//APBGame.cAPBPlayerController.OpenQuickReply
	void SetDoesWantToEnterMarksManShipMode();//APBGame.cAPBPlayerController.SetDoesWantToEnterMarksManShipMode
	void ServerCosmeticAimRotation(int aimRotation,float cameraCollidePercent);//APBGame.cAPBPlayerController.ServerCosmeticAimRotation
	void EndStatePlayerSpawnWaitOnStreaming();//APBGame.cAPBPlayerController.EndStatePlayerSpawnWaitOnStreaming
	void ServerGolemSetEmoteTrace(struct FString emoteName,bool bPlay);//APBGame.cAPBPlayerController.ServerGolemSetEmoteTrace
	void SaveVehicleCustomisation(struct FString sFileName);//APBGame.cAPBPlayerController.SaveVehicleCustomisation
	void ServerReplicateHUDMarker(int nServerMarkerID);//APBGame.cAPBPlayerController.ServerReplicateHUDMarker
	void GolemSetEmoteTrace(struct FString emoteName,bool bPlay);//APBGame.cAPBPlayerController.GolemSetEmoteTrace
	void ServerTestMapSelectScreen();//APBGame.cAPBPlayerController.ServerTestMapSelectScreen
	void DebugMapCentreDecrementY();//APBGame.cAPBPlayerController.DebugMapCentreDecrementY
	float GetAutoMoveToEnterTimeOut();//APBGame.cAPBPlayerController.GetAutoMoveToEnterTimeOut
	void GM_EndProfileSequence();//APBGame.cAPBPlayerController.GM_EndProfileSequence
	void MS_AddMemSnapshots(struct FString sName1,struct FString sName2,struct FString sDest);//APBGame.cAPBPlayerController.MS_AddMemSnapshots
	void LogStackingSlots();//APBGame.cAPBPlayerController.LogStackingSlots
	void VehicleSpawnRepairCostUI_PlayerAnswer(unsigned char Answer);//APBGame.cAPBPlayerController.VehicleSpawnRepairCostUI_PlayerAnswer
	void ServerEnableFlyWhileDead(bool bAllow);//APBGame.cAPBPlayerController.ServerEnableFlyWhileDead
	void ServerRequestTeamLeadership();//APBGame.cAPBPlayerController.ServerRequestTeamLeadership
	void ServerGolemSetAssetDescriptorTrace(int nDescriptorIndex);//APBGame.cAPBPlayerController.ServerGolemSetAssetDescriptorTrace
	void SetChaosScoreboardOpen(bool i_bIsOpen);//APBGame.cAPBPlayerController.SetChaosScoreboardOpen
	float RetUnstickRespawnDelay();//APBGame.cAPBPlayerController.RetUnstickRespawnDelay
	void GM_ClearMinigameQueue();//APBGame.cAPBPlayerController.GM_ClearMinigameQueue
	void RemoveBoomBox(class AcTaskItemAudioProxy* pBoomBox);//APBGame.cAPBPlayerController.RemoveBoomBox
	void ServerSetVehicleDamageEffect(int nEffectIndex);//APBGame.cAPBPlayerController.ServerSetVehicleDamageEffect
	void EndMinigameServer(bool bEndAll);//APBGame.cAPBPlayerController.EndMinigameServer
	void DebugTogglePremiumClient();//APBGame.cAPBPlayerController.DebugTogglePremiumClient
	bool IsGM_InFreeCameraMode();//APBGame.cAPBPlayerController.IsGM_InFreeCameraMode
	void SkipGameflowStateSwitch();//APBGame.cAPBPlayerController.SkipGameflowStateSwitch
	void ClientUpdateUnlockedContactsList(struct FContactPairPacket UnlockedContacts);//APBGame.cAPBPlayerController.ClientUpdateUnlockedContactsList
	bool GetCSAAutoRouteLocationAndRotation(class AActor* pInteractiveActor,int nIPIndex,int nARDIndex,FVector3* vLocation,FRotator* rRotation);//APBGame.cAPBPlayerController.GetCSAAutoRouteLocationAndRotation
	bool CanBuyAmmoBoxes(int eCategory,int nBoxCount);//APBGame.cAPBPlayerController.CanBuyAmmoBoxes
	void ServerUseDirectorCameraMode(bool bUseDirectorCameraMode);//APBGame.cAPBPlayerController.ServerUseDirectorCameraMode
	void ServerUseAutoReady(bool bUseAutoReady);//APBGame.cAPBPlayerController.ServerUseAutoReady
	void SetRunSpeed(float fNewRunSpeed);//APBGame.cAPBPlayerController.SetRunSpeed
	void ClientKickTeamMemberFailedCooldown(int pr_nRemainingSeconds);//APBGame.cAPBPlayerController.ClientKickTeamMemberFailedCooldown
	void ClientCancelCustomisationRequest(struct FGuid TheGuid);//APBGame.cAPBPlayerController.ClientCancelCustomisationRequest
	void DebugServerIncrementRewardTokens(int Amount);//APBGame.cAPBPlayerController.DebugServerIncrementRewardTokens
	void ShowGameplayMarkers(bool bShowMarkers);//APBGame.cAPBPlayerController.ShowGameplayMarkers
	void ApplyModifier(struct FString sCategory,int nInventorySlot,int nFnModIndex,int nSlotIndex);//APBGame.cAPBPlayerController.ApplyModifier
	void DebugServerDailyActivityDump();//APBGame.cAPBPlayerController.DebugServerDailyActivityDump
	void DebugTogglePremiumServer();//APBGame.cAPBPlayerController.DebugTogglePremiumServer
	void BeginStateWaitOnStreaming();//APBGame.cAPBPlayerController.BeginStateWaitOnStreaming
	void ClientSetInCustomisationZone(bool bInside);//APBGame.cAPBPlayerController.ClientSetInCustomisationZone
	void NotifyImpactEffect(struct FImpactInfo Info,FVector3 impactVelocity,bool scrape,class AActor* Other);//APBGame.cAPBPlayerController.NotifyImpactEffect
	void ClientGotoStateIfNotInState(struct FName StateName);//APBGame.cAPBPlayerController.ClientGotoStateIfNotInState
	void ChallengeCycledImminent(int nSecToCycleEnd);//APBGame.cAPBPlayerController.ChallengeCycledImminent
	void GM_ServerRecursiveUnlockContact(struct FString sContactName,int nContactLevel);//APBGame.cAPBPlayerController.GM_ServerRecursiveUnlockContact
	void AudioContactDialogueTestStop();//APBGame.cAPBPlayerController.AudioContactDialogueTestStop
	void ReplicatedServerSpike(float fSpikeTimeInMS,int nNumberOfSpikeFrames);//APBGame.cAPBPlayerController.ReplicatedServerSpike
	void TickAutoResupplier();//APBGame.cAPBPlayerController.TickAutoResupplier
	void ServerDeclineVehicleSpawnDialogue();//APBGame.cAPBPlayerController.ServerDeclineVehicleSpawnDialogue
	void AddMusicDisplayPoint(class AcAudioDisplayPoint* pDisplayPoint);//APBGame.cAPBPlayerController.AddMusicDisplayPoint
	void GM_ServerRepairVehicle();//APBGame.cAPBPlayerController.GM_ServerRepairVehicle
	void DoHitReaction();//APBGame.cAPBPlayerController.DoHitReaction
	void ClientReceiveActivityMessages(struct FActivityMessageRecords pr_ActivityMessages);//APBGame.cAPBPlayerController.ClientReceiveActivityMessages
	void SetMusicStudioTrack(bool bBroadcastViaVehicle,struct FGuid songGuid,int nInitialPlaybackTime);//APBGame.cAPBPlayerController.SetMusicStudioTrack
	void WithinRangeOfAmmoResupply();//APBGame.cAPBPlayerController.WithinRangeOfAmmoResupply
	void ToggleMarksmanship();//APBGame.cAPBPlayerController.ToggleMarksmanship
	void RequestContactStanding(int nContactID);//APBGame.cAPBPlayerController.RequestContactStanding
	void SetCrouchSpeedServer(float fNewCrouchSpeed);//APBGame.cAPBPlayerController.SetCrouchSpeedServer
	void Unstick();//APBGame.cAPBPlayerController.Unstick
	void ClientAddContactHUDMessage(struct FString sMessage,struct FGuid ContactGUID,int nLevel);//APBGame.cAPBPlayerController.ClientAddContactHUDMessage
	void NotifyCustomisationChanged(unsigned char eType,bool bSendPrecacheRequest);//APBGame.cAPBPlayerController.NotifyCustomisationChanged
	void SetMinigameSpinup(bool bActive);//APBGame.cAPBPlayerController.SetMinigameSpinup
	void EnterStartState();//APBGame.cAPBPlayerController.EnterStartState
	void SetVerbosityMissionManagerServer(unsigned char NewValue);//APBGame.cAPBPlayerController.SetVerbosityMissionManagerServer
	void ChangeTarget(class AActor* pNewTarget,bool bAimLocked);//APBGame.cAPBPlayerController.ChangeTarget
	void ClientAddTutorialWaypoint(int nHUDMarkerVisual);//APBGame.cAPBPlayerController.ClientAddTutorialWaypoint
	void ClientRPCOverflow();//APBGame.cAPBPlayerController.ClientRPCOverflow
	void DebugSetWeaponTypeSet(int nWeaponTypeSet);//APBGame.cAPBPlayerController.DebugSetWeaponTypeSet
	void EndContactDealingUI(class AcContact* Contact);//APBGame.cAPBPlayerController.EndContactDealingUI
	void CancelCallForBackup();//APBGame.cAPBPlayerController.CancelCallForBackup
	void ClientMissionStatsNotification(struct FMissionStatsPacket packet);//APBGame.cAPBPlayerController.ClientMissionStatsNotification
	void ServerSummonTestMarker();//APBGame.cAPBPlayerController.ServerSummonTestMarker
	void GM_ServerEndMissionNative(struct FString sEndType,struct FString sCharacterName);//APBGame.cAPBPlayerController.GM_ServerEndMissionNative
	void NotifySecurityViolation(unsigned char pr_eViolationCode,struct FString pr_sMessage);//APBGame.cAPBPlayerController.NotifySecurityViolation
	void ServerUpdateTimeDebug(bool bUpdate);//APBGame.cAPBPlayerController.ServerUpdateTimeDebug
	void UploadItemCustomisationNative(TArray<unsigned char> aData,struct FGuid ItemGuid);//APBGame.cAPBPlayerController.UploadItemCustomisationNative
	void ServerRequestUnstickRespawn();//APBGame.cAPBPlayerController.ServerRequestUnstickRespawn
	void ClientSetIndividualHUDMarkerState(int nMarkerID,unsigned char eState);//APBGame.cAPBPlayerController.ClientSetIndividualHUDMarkerState
	void ClientMispredictedCSA(unsigned char eCSAState);//APBGame.cAPBPlayerController.ClientMispredictedCSA
	void SplitItemStack(struct FString sCategory,int nInventorySlot,int nNumToSplit);//APBGame.cAPBPlayerController.SplitItemStack
	void ResetDeployedVehicle(bool bDoRecylceDeployedVehicle,bool bTelefragDeployedVehicle);//APBGame.cAPBPlayerController.ResetDeployedVehicle
	void TestTaskItemSpawning(int nNum,struct FString sTaskItemVarietyName);//APBGame.cAPBPlayerController.TestTaskItemSpawning
	void DebugServerFindHomelessCollectables();//APBGame.cAPBPlayerController.DebugServerFindHomelessCollectables
	void LogInventory();//APBGame.cAPBPlayerController.LogInventory
	void StartCallForBackupUINative();//APBGame.cAPBPlayerController.StartCallForBackupUINative
	void CameraHandyCam(bool bEnable,int nID);//APBGame.cAPBPlayerController.CameraHandyCam
	void AddBoomBox(class AcTaskItemAudioProxy* pBoomBox);//APBGame.cAPBPlayerController.AddBoomBox
	void ServerSetPawnAlwaysRelevant(bool bFlag);//APBGame.cAPBPlayerController.ServerSetPawnAlwaysRelevant
	void DamageActor(int nDamageAmount);//APBGame.cAPBPlayerController.DamageActor
	void SetBombTimer(int newTimeInSeconds);//APBGame.cAPBPlayerController.SetBombTimer
	void ServerUserHasSpoken();//APBGame.cAPBPlayerController.ServerUserHasSpoken
	void ForceRespawnTimer(bool i_bAbortElectiveSpawning);//APBGame.cAPBPlayerController.ForceRespawnTimer
	void ServerSetItemAttachmentCollision(float Arc,float HeightBottom,float HeightTop,float CrouchHeight);//APBGame.cAPBPlayerController.ServerSetItemAttachmentCollision
	void SwitchingSeatAnimFinished(class AcAPBPawn* PawnAnimFinished);//APBGame.cAPBPlayerController.SwitchingSeatAnimFinished
	void AbandonMission();//APBGame.cAPBPlayerController.AbandonMission
	void SetInCustomisationZone(bool bInside);//APBGame.cAPBPlayerController.SetInCustomisationZone
	void OnGetDisplayPointPositionCallback(bool bSuccess,FVector3 Position);//APBGame.cAPBPlayerController.OnGetDisplayPointPositionCallback
	void TestMissionAllBlocksServer(struct FString sMissionName);//APBGame.cAPBPlayerController.TestMissionAllBlocksServer
	void clientUploadItemCustomisation(struct FGuid ItemGuid,TArray<unsigned char> aData,struct FGuid OriginalItemGuid);//APBGame.cAPBPlayerController.clientUploadItemCustomisation
	void CheckForElectiveSpawnTimer();//APBGame.cAPBPlayerController.CheckForElectiveSpawnTimer
	void StartMissionUnfiltered(struct FString sMissionName,int nRandomSeed);//APBGame.cAPBPlayerController.StartMissionUnfiltered
	bool IncrementOpenWorldCash(int pr_nAmount,bool pr_bAlsoAddToPoolTaskItem);//APBGame.cAPBPlayerController.IncrementOpenWorldCash
	void ServerGolemSpawnCharacter(FVector3 characterLocation,FRotator characterRotation,int nDescriptorIndex,struct FString emoteName,bool bPlayEmote);//APBGame.cAPBPlayerController.ServerGolemSpawnCharacter
	void DebugPreferObjectiveTaskTarget(int nObjectiveIndex,int nTaskTargetIndex,bool bPreferred);//APBGame.cAPBPlayerController.DebugPreferObjectiveTaskTarget
	void CallClientSetRotation(FRotator NewRotation,bool bResetCamera);//APBGame.cAPBPlayerController.CallClientSetRotation
	void ProcessMovePlayerImmobileState(float DeltaRot,FVector3* outNewAccel);//APBGame.cAPBPlayerController.ProcessMovePlayerImmobileState
	void LogMissions();//APBGame.cAPBPlayerController.LogMissions
	void ServerOnProvingGroundsSkipActivity();//APBGame.cAPBPlayerController.ServerOnProvingGroundsSkipActivity
	void ServerRequestVehicleData(int nCharacterUID);//APBGame.cAPBPlayerController.ServerRequestVehicleData
	void MS_GenericCommand3(struct FString sCommand,struct FString sParam1,struct FString sParam2,struct FString sParam3);//APBGame.cAPBPlayerController.MS_GenericCommand3
	void BailOutAnimFinished(class AcAPBPawn* PawnAnimFinished);//APBGame.cAPBPlayerController.BailOutAnimFinished
	void DisableShowVehicleViewCones();//APBGame.cAPBPlayerController.DisableShowVehicleViewCones
	void GolemSetEmoteStatus(bool bPlay);//APBGame.cAPBPlayerController.GolemSetEmoteStatus
	void ServerSetHealthRechargeDelay(float Health,float Stamina);//APBGame.cAPBPlayerController.ServerSetHealthRechargeDelay
	void ServerServerRPCOverFlow();//APBGame.cAPBPlayerController.ServerServerRPCOverFlow
	void StartVehicleSpawnRepairCostUI(int nRepairCost);//APBGame.cAPBPlayerController.StartVehicleSpawnRepairCostUI
	void UpdateRespawnLocationForStreaming();//APBGame.cAPBPlayerController.UpdateRespawnLocationForStreaming
	void ShouldBeCustomising(bool bIsCustomising);//APBGame.cAPBPlayerController.ShouldBeCustomising
	void AwardContactStandingServerNative(struct FString contactName,int nStandingIncrement);//APBGame.cAPBPlayerController.AwardContactStandingServerNative
	void ToggleMissionStats();//APBGame.cAPBPlayerController.ToggleMissionStats
	void CameraHandyCamRotation(float fYaw,float fPitch,float fRoll,int nID);//APBGame.cAPBPlayerController.CameraHandyCamRotation
	void ClientOnTeamLeftNative();//APBGame.cAPBPlayerController.ClientOnTeamLeftNative
	void ClientTutorialNodeCompleted(int nGuid);//APBGame.cAPBPlayerController.ClientTutorialNodeCompleted
	int RetPlayerRating();//APBGame.cAPBPlayerController.RetPlayerRating
	class AcAPBPawn* GetCharacterPawnAlive();//APBGame.cAPBPlayerController.GetCharacterPawnAlive
	void MS_LoadAllInstruments(bool bAsyncLoad);//APBGame.cAPBPlayerController.MS_LoadAllInstruments
	void ServerForceSpawnZone(int i_nSpawnPointHUDMarkerID);//APBGame.cAPBPlayerController.ServerForceSpawnZone
	void GolemSaveScene(struct FString Filename);//APBGame.cAPBPlayerController.GolemSaveScene
	void ResetItemAvailabilitiesServer();//APBGame.cAPBPlayerController.ResetItemAvailabilitiesServer
	void GM_MoveToPlayerLocation(struct FString sCharacterName);//APBGame.cAPBPlayerController.GM_MoveToPlayerLocation
	void EndStateAutoMoveToCSAPositionState();//APBGame.cAPBPlayerController.EndStateAutoMoveToCSAPositionState
	void OnTakeDamage(int DamageAmount,class AcAPBPlayerController* EventInstigator);//APBGame.cAPBPlayerController.OnTakeDamage
	void StartContactDealingUI(class AcContact* Contact);//APBGame.cAPBPlayerController.StartContactDealingUI
	void ClientCrimeListChanged(unsigned char eState,float fPredictedTimeRemaining);//APBGame.cAPBPlayerController.ClientCrimeListChanged
	void NotifyExplosion(class AActor* AttachActor,FVector3 ExplosionLocation,int ExplosionType,int InstigatingTeamID);//APBGame.cAPBPlayerController.NotifyExplosion
	void NotifyEndCSAScript(unsigned char eCSAState);//APBGame.cAPBPlayerController.NotifyEndCSAScript
	void GetUnlockedContacts(TArray<struct FContactPair>* aUnlockedContacts);//APBGame.cAPBPlayerController.GetUnlockedContacts
	void ServerAwayFromKeyboard(bool bAutomaticAFK);//APBGame.cAPBPlayerController.ServerAwayFromKeyboard
	void ServerCrouchRequest(bool bCrouch,int nCrouchRequestID);//APBGame.cAPBPlayerController.ServerCrouchRequest
	void ServerCallForBackupNative(bool bYesNo);//APBGame.cAPBPlayerController.ServerCallForBackupNative
	void ServerVoteToGroupOnMissionEnd(bool bVote);//APBGame.cAPBPlayerController.ServerVoteToGroupOnMissionEnd
	void SelectWeapon(int nSlot);//APBGame.cAPBPlayerController.SelectWeapon
	bool IsEmoteUnlocked(struct FString sEmoteName);//APBGame.cAPBPlayerController.IsEmoteUnlocked
	void ServerRemoteContactInteraction(struct FGuid ContactGUID);//APBGame.cAPBPlayerController.ServerRemoteContactInteraction
	void ServerToggleReadyForMissions();//APBGame.cAPBPlayerController.ServerToggleReadyForMissions
	void DebugCancelResupply(unsigned char eWeaponType);//APBGame.cAPBPlayerController.DebugCancelResupply
	void UnlockAllItemsNative();//APBGame.cAPBPlayerController.UnlockAllItemsNative
	void ServerDebugSetMaxSafeHeightTimer(float fNewDuration);//APBGame.cAPBPlayerController.ServerDebugSetMaxSafeHeightTimer
	void CompressAndDistributeCustomisation(unsigned char eType,class UcAssetCustomisation* CustomisedAsset);//APBGame.cAPBPlayerController.CompressAndDistributeCustomisation
	void OnStreamingComponentLoaded(class AActor* StreamingActor);//APBGame.cAPBPlayerController.OnStreamingComponentLoaded
	void ClientEmptyDailyActivities();//APBGame.cAPBPlayerController.ClientEmptyDailyActivities
	void DebugChangeMapSize(float fSize);//APBGame.cAPBPlayerController.DebugChangeMapSize
	void NumVisibilityRays(int NumRays);//APBGame.cAPBPlayerController.NumVisibilityRays
	void LogDistrictBlockContents(struct FString sDistrictBlockName);//APBGame.cAPBPlayerController.LogDistrictBlockContents
	void FlythroughDestroyAllVehicles();//APBGame.cAPBPlayerController.FlythroughDestroyAllVehicles
	void ClientParseCommandLine();//APBGame.cAPBPlayerController.ClientParseCommandLine
	void ServerEmote(struct FString sEmoteName,bool Loop);//APBGame.cAPBPlayerController.ServerEmote
	void DebugTutorialCompleteAll();//APBGame.cAPBPlayerController.DebugTutorialCompleteAll
	void GM_ClientNotifyVehicleRepairFailed(unsigned char eErrorCode);//APBGame.cAPBPlayerController.GM_ClientNotifyVehicleRepairFailed
	void ServerNotifyExitMusicStudio();//APBGame.cAPBPlayerController.ServerNotifyExitMusicStudio
	void ClientTutorialCategoryCompleted(int nGuid);//APBGame.cAPBPlayerController.ClientTutorialCategoryCompleted
	void ServerGolemSaveScene(struct FString Filename);//APBGame.cAPBPlayerController.ServerGolemSaveScene
	void ServerShowMarkerType(unsigned char eCategory,bool bShow);//APBGame.cAPBPlayerController.ServerShowMarkerType
	void EndStateDead();//APBGame.cAPBPlayerController.EndStateDead
	void ExecOpenPopupKnowledgebasePage();//APBGame.cAPBPlayerController.ExecOpenPopupKnowledgebasePage
	void ExecBeginCSA(unsigned char eCSA);//APBGame.cAPBPlayerController.ExecBeginCSA
	bool IsCarryingTaskItem();//APBGame.cAPBPlayerController.IsCarryingTaskItem
	void PlayerMoveAutoMoveToPositionState(float DeltaTime);//APBGame.cAPBPlayerController.PlayerMoveAutoMoveToPositionState
	void BeginRespawnSequence(bool bForceInstantSpawn);//APBGame.cAPBPlayerController.BeginRespawnSequence
	void AutoReachedPosition(float DeltaTime);//APBGame.cAPBPlayerController.AutoReachedPosition
	void InputSprinting();//APBGame.cAPBPlayerController.InputSprinting
	void DebugShowMinigameTargets();//APBGame.cAPBPlayerController.DebugShowMinigameTargets
	void clientOnOperateOnItem(int eErr,struct FGuid ItemGuid,unsigned char eOperation);//APBGame.cAPBPlayerController.clientOnOperateOnItem
	void ClientHeatDebugInfo(struct FHeatDebugInfo DebugInfo);//APBGame.cAPBPlayerController.ClientHeatDebugInfo
	void EndMinigame(bool bEndAll);//APBGame.cAPBPlayerController.EndMinigame
	void ServerGBCode(int Val);//APBGame.cAPBPlayerController.ServerGBCode
	void GM_SetFreeCameraDirector(bool i_bEnabled);//APBGame.cAPBPlayerController.GM_SetFreeCameraDirector
	void ServerTestKineCar();//APBGame.cAPBPlayerController.ServerTestKineCar
	void LogCurrentState();//APBGame.cAPBPlayerController.LogCurrentState
	void GM_ServerToggleMinigames(bool i_bSet,bool i_bEnabled);//APBGame.cAPBPlayerController.GM_ServerToggleMinigames
	void OnVehicleDriverExit(class AcAPBVehicleBase* Vehicle,class AcAPBPawn* Driver);//APBGame.cAPBPlayerController.OnVehicleDriverExit
	void BuyAmmoAmount(int eCategory,int nAmount);//APBGame.cAPBPlayerController.BuyAmmoAmount
	class AcPlayerCharacterSpawnZone* RetRandomSpawnZone(unsigned char eFaction);//APBGame.cAPBPlayerController.RetRandomSpawnZone
	void CallSubtitleVO(struct FString sFileName);//APBGame.cAPBPlayerController.CallSubtitleVO
	FRotator UnpackAimRotation(int aimRotation);//APBGame.cAPBPlayerController.UnpackAimRotation
	void DebugApplyCustomisationOverrideServer(int i_nOverride);//APBGame.cAPBPlayerController.DebugApplyCustomisationOverrideServer
	void GM_ClientEndProfileSequence();//APBGame.cAPBPlayerController.GM_ClientEndProfileSequence
	void GM_ServerAddPreferredMinigameVIPTarget(struct FString i_sCharacterName);//APBGame.cAPBPlayerController.GM_ServerAddPreferredMinigameVIPTarget
	void CSAKeyReleased(struct FString sCSAInputMapping);//APBGame.cAPBPlayerController.CSAKeyReleased
	void ClientAddItemDeliveryHUDMessage(struct FString sMessage,int nItemsDelivered,int nItemsTotal);//APBGame.cAPBPlayerController.ClientAddItemDeliveryHUDMessage
	void ServerRequestDailyActivity(int i_eContact);//APBGame.cAPBPlayerController.ServerRequestDailyActivity
	void StopLCVehicles();//APBGame.cAPBPlayerController.StopLCVehicles
	void GM_RemovePreferredMinigameVIPTarget(struct FString i_sCharacterName);//APBGame.cAPBPlayerController.GM_RemovePreferredMinigameVIPTarget
	void CancelAllAmmoResupplyActions();//APBGame.cAPBPlayerController.CancelAllAmmoResupplyActions
	void DebugApplyCustomisationOverride(struct FString sOverrideName);//APBGame.cAPBPlayerController.DebugApplyCustomisationOverride
	bool IsStreamingComplete(bool bLogIfNotComplete);//APBGame.cAPBPlayerController.IsStreamingComplete
	void ServerSetMetagroupingIntervalNative(int newTimeInSeconds);//APBGame.cAPBPlayerController.ServerSetMetagroupingIntervalNative
	void TestDisplayPointUI();//APBGame.cAPBPlayerController.TestDisplayPointUI
	void SetVehicleMaxSpeed(float SpeedInMPH);//APBGame.cAPBPlayerController.SetVehicleMaxSpeed
	void SetCustomisationUploadInProgress(unsigned char eType,bool bValue);//APBGame.cAPBPlayerController.SetCustomisationUploadInProgress
	void ServerDamageCar();//APBGame.cAPBPlayerController.ServerDamageCar
	void GM_ServerSetIdentifiersEnabledNative(bool bEnabled,bool bIsInvisibilityChange);//APBGame.cAPBPlayerController.GM_ServerSetIdentifiersEnabledNative
	void ToggleTracerDebug();//APBGame.cAPBPlayerController.ToggleTracerDebug
	void MS_GenericCommand1(struct FString sCommand,struct FString sParam1);//APBGame.cAPBPlayerController.MS_GenericCommand1
	void FindGoodViewDeadNative();//APBGame.cAPBPlayerController.FindGoodViewDeadNative
	void ServerPossessGolemSpawnerActor();//APBGame.cAPBPlayerController.ServerPossessGolemSpawnerActor
	void ClientTutorialEventCompleted(int nGuid);//APBGame.cAPBPlayerController.ClientTutorialEventCompleted
	void SetTestMarkerType(unsigned char eType);//APBGame.cAPBPlayerController.SetTestMarkerType
	void ServerRescue();//APBGame.cAPBPlayerController.ServerRescue
	void CloseScene(class UUIScene* Scene);//APBGame.cAPBPlayerController.CloseScene
	bool GetCSAAutoRouteDestinationAndRotation(class AActor* pInteractiveActor,int nIPIndex,int nARDIndex,bool bAdjustToPawnHeight,FVector3* vDestination,FRotator* rRotation);//APBGame.cAPBPlayerController.GetCSAAutoRouteDestinationAndRotation
	void LoadVehicleCustomisation(struct FString sFileName);//APBGame.cAPBPlayerController.LoadVehicleCustomisation
	void ClientReloadFX(class AcAPBPawn* reloader);//APBGame.cAPBPlayerController.ClientReloadFX
	void ServerDebugSetSkillRating(float fNewMean,float fNewStdDev);//APBGame.cAPBPlayerController.ServerDebugSetSkillRating
	void DatabaseCheckpoint(bool bLast);//APBGame.cAPBPlayerController.DatabaseCheckpoint
	void ReloadWeapon();//APBGame.cAPBPlayerController.ReloadWeapon
	class UcPlayerControllerCSAComponent* RetCSAComponent();//APBGame.cAPBPlayerController.RetCSAComponent
	void ServerIllegalLocation_APB(struct FString sErrorMessage);//APBGame.cAPBPlayerController.ServerIllegalLocation_APB
	void ServerToggleToD();//APBGame.cAPBPlayerController.ServerToggleToD
	void GM_ServerInspect(struct FString sCharacterName);//APBGame.cAPBPlayerController.GM_ServerInspect
	void GM_ServerToggleToD();//APBGame.cAPBPlayerController.GM_ServerToggleToD
	void ServerDestroyFlythroughSpawnerActor();//APBGame.cAPBPlayerController.ServerDestroyFlythroughSpawnerActor
	void ServerRequestCharacterThemeGuid(int nCharacterUID);//APBGame.cAPBPlayerController.ServerRequestCharacterThemeGuid
	void ClientProjectileAttack(class AcAPBPawn* Attacker);//APBGame.cAPBPlayerController.ClientProjectileAttack
	void SetOppositionServer(struct FString Who);//APBGame.cAPBPlayerController.SetOppositionServer
	void CallServerCSAPredictCancel(int eCSAInputMapping,unsigned char eCSA,struct FPredictedADAInfo predictedADA);//APBGame.cAPBPlayerController.CallServerCSAPredictCancel
	void ThrowGrenade();//APBGame.cAPBPlayerController.ThrowGrenade
	void CalculateAudioOutlineHoles();//APBGame.cAPBPlayerController.CalculateAudioOutlineHoles
	bool GetRespawnCameraLocations(struct FRespawnInfo* Info);//APBGame.cAPBPlayerController.GetRespawnCameraLocations
	bool IsGM_IdentifierEnabled();//APBGame.cAPBPlayerController.IsGM_IdentifierEnabled
	void UpdateGender();//APBGame.cAPBPlayerController.UpdateGender
	void GolemSpawnRandomVehicles(int nNumVehicles,float fSpawnRadius,float fSpawnFrequency,float fDespawnFrequency);//APBGame.cAPBPlayerController.GolemSpawnRandomVehicles
	void MoveTestMarker();//APBGame.cAPBPlayerController.MoveTestMarker
	void ServerFlythroughDestroyAllVehicles();//APBGame.cAPBPlayerController.ServerFlythroughDestroyAllVehicles
	void SetMusicTrackOnVehicle();//APBGame.cAPBPlayerController.SetMusicTrackOnVehicle
	int StoreCash(int nAmount);//APBGame.cAPBPlayerController.StoreCash
	void GolemSetRandomEmotes(bool bPlay);//APBGame.cAPBPlayerController.GolemSetRandomEmotes
	unsigned char RetSprint();//APBGame.cAPBPlayerController.RetSprint
	void ServerSetMetagroupingMissionOfferingNative(bool bEnabled);//APBGame.cAPBPlayerController.ServerSetMetagroupingMissionOfferingNative
	void NetSet(struct FString Command);//APBGame.cAPBPlayerController.NetSet
	void GoToCSAAutoRouteState(class AActor* pInteractiveActor,unsigned char eCSA,int nIPIndex,int nARDIndex);//APBGame.cAPBPlayerController.GoToCSAAutoRouteState
	void ClientEndInteractionState(unsigned char eState);//APBGame.cAPBPlayerController.ClientEndInteractionState
	void serverPrintToD();//APBGame.cAPBPlayerController.serverPrintToD
	int RetNumSpawnZones(unsigned char eFaction);//APBGame.cAPBPlayerController.RetNumSpawnZones
	void ServerSetIsCustomising(bool bIsCustomising);//APBGame.cAPBPlayerController.ServerSetIsCustomising
	void AwayFromKeyboard(bool bAutomaticAFK);//APBGame.cAPBPlayerController.AwayFromKeyboard
	void serverSetPVPCombat(bool bState);//APBGame.cAPBPlayerController.serverSetPVPCombat
	void ShowTeamLeadershipQuestion(int nLeadershipCandidateUID);//APBGame.cAPBPlayerController.ShowTeamLeadershipQuestion
	void MS_SaveThemeToFile(struct FString Filename);//APBGame.cAPBPlayerController.MS_SaveThemeToFile
	void ClientOnGroupLeftNative();//APBGame.cAPBPlayerController.ClientOnGroupLeftNative
	void ServerSyncTime(double fClientGameSeconds);//APBGame.cAPBPlayerController.ServerSyncTime
	void ServerReceiveCustomisationData(unsigned char eType,int nCount,unsigned char* packet);//APBGame.cAPBPlayerController.ServerReceiveCustomisationData
	void ShowGameplayMarkersNative(bool bShowMarkers);//APBGame.cAPBPlayerController.ShowGameplayMarkersNative
	void TestPersistence(int numTests);//APBGame.cAPBPlayerController.TestPersistence
	void ServerRequestCharacterData(int nCharacterUID);//APBGame.cAPBPlayerController.ServerRequestCharacterData
	void DebugClientFindClosestCollectable(FVector3 i_vLocation);//APBGame.cAPBPlayerController.DebugClientFindClosestCollectable
	void CreateSymbolLicence(struct FGuid nSymbolItem,int nRoyaltyFee);//APBGame.cAPBPlayerController.CreateSymbolLicence
	void ClientImpactEffect(struct FImpactInfo Info,FVector3 impactVelocity,bool scrape,class AActor* Other);//APBGame.cAPBPlayerController.ClientImpactEffect
	void ClientSpawnZoneElected(int i_nCharacterUID,int i_nHUDMarkerID);//APBGame.cAPBPlayerController.ClientSpawnZoneElected
	bool RetIsPlayerCarryingTaskItem();//APBGame.cAPBPlayerController.RetIsPlayerCarryingTaskItem
	void ToggleTimeSource();//APBGame.cAPBPlayerController.ToggleTimeSource
	void NextWeapon();//APBGame.cAPBPlayerController.NextWeapon
	void MS_PlayThemeFromSlot(int nSlot);//APBGame.cAPBPlayerController.MS_PlayThemeFromSlot
	void OnItemChanged();//APBGame.cAPBPlayerController.OnItemChanged
	void ServerCSAPredicted(int eCSAInputMapping,int aimRotation,float cameraCollidePercent,struct FPredictedADAInfo predictedADA);//APBGame.cAPBPlayerController.ServerCSAPredicted
	void SetClanName(struct FString sClanName,bool bUpdate);//APBGame.cAPBPlayerController.SetClanName
	void DebugServerDailyActivityComplete();//APBGame.cAPBPlayerController.DebugServerDailyActivityComplete
	void ClientAutoJoinGroup(struct FString leaderName);//APBGame.cAPBPlayerController.ClientAutoJoinGroup
	int RetValueVehicleEnterErrorArray(int Index);//APBGame.cAPBPlayerController.RetValueVehicleEnterErrorArray
	void OnDeployedVehicleSpawned();//APBGame.cAPBPlayerController.OnDeployedVehicleSpawned
	unsigned char ServerProcessCSAKeyPressed(int eCSAInputMapping,class AActor* pTargetedActor);//APBGame.cAPBPlayerController.ServerProcessCSAKeyPressed
	void NotifyOwnCustomisationChanged(unsigned char eType,struct FGuid TheGuid);//APBGame.cAPBPlayerController.NotifyOwnCustomisationChanged
	void ToggleAmbientAudio();//APBGame.cAPBPlayerController.ToggleAmbientAudio
	void ServerLogModifiers();//APBGame.cAPBPlayerController.ServerLogModifiers
	void SendFrozenMessage(bool bForce);//APBGame.cAPBPlayerController.SendFrozenMessage
	void GoToSpawnZoneSelectScreen(unsigned char eFaction);//APBGame.cAPBPlayerController.GoToSpawnZoneSelectScreen
	void PrintNumSpawnZones();//APBGame.cAPBPlayerController.PrintNumSpawnZones
	void ServerNotifyClientLoaded();//APBGame.cAPBPlayerController.ServerNotifyClientLoaded
	void ToggleDebugUnconsciousInfo();//APBGame.cAPBPlayerController.ToggleDebugUnconsciousInfo
	void ClientActiveCrimeDebugInfo(struct FActiveCrimeDebugInfo DebugInfo);//APBGame.cAPBPlayerController.ClientActiveCrimeDebugInfo
	void ItemExaminedNative(int eInventoryItemType);//APBGame.cAPBPlayerController.ItemExaminedNative
	void ClientOnCSATimerStarted(float fTimeRemaining);//APBGame.cAPBPlayerController.ClientOnCSATimerStarted
	void ServerIllegalLocation(bool bPawn);//APBGame.cAPBPlayerController.ServerIllegalLocation
	void ClientOnTeamLeadershipChanged(int nOldLeaderUID,int nNewLeaderUID);//APBGame.cAPBPlayerController.ClientOnTeamLeadershipChanged
	void ServerSetClientViewPortSize(FVector2 ClientViewportSize);//APBGame.cAPBPlayerController.ServerSetClientViewPortSize
	void CancelVehicleCloseDoorState();//APBGame.cAPBPlayerController.CancelVehicleCloseDoorState
	void GM_AddPreferredMinigameVIPTarget(struct FString i_sCharacterName);//APBGame.cAPBPlayerController.GM_AddPreferredMinigameVIPTarget
	void NativeServerRPCOverFlow();//APBGame.cAPBPlayerController.NativeServerRPCOverFlow
	void ListEmotes();//APBGame.cAPBPlayerController.ListEmotes
	void TestKineCar();//APBGame.cAPBPlayerController.TestKineCar
	bool DecrementOpenWorldCash(int pr_nAmount,bool pr_bAlsoRemoveFromPoolTaskItem);//APBGame.cAPBPlayerController.DecrementOpenWorldCash
	void BeginUploadServer(int nDataSize,struct FGuid nInventoryItemGuid,struct FGuid OriginalItemGuid);//APBGame.cAPBPlayerController.BeginUploadServer
	void SetVehicleDamageEffect(int nEffectIndex);//APBGame.cAPBPlayerController.SetVehicleDamageEffect
	void ResetCustomisationZoneRefCount();//APBGame.cAPBPlayerController.ResetCustomisationZoneRefCount
	void ClientBeginSyncTime(int nDistrictServerBaselineUTC,double fDistrictServerGameSecondsAtBaseline,double fDistrictServerGameSecondsNow);//APBGame.cAPBPlayerController.ClientBeginSyncTime
	void ServerSetFirstStageTargetRange(float fRange);//APBGame.cAPBPlayerController.ServerSetFirstStageTargetRange
	void DebugExplosionOffset(int Type,float X,float Y,float Z);//APBGame.cAPBPlayerController.DebugExplosionOffset
	void MissionGroupMembersNotify(struct FMissionSideMembersPacket packet);//APBGame.cAPBPlayerController.MissionGroupMembersNotify
	float RetCSAVerticalInteractionDistance(unsigned char eContextSensitveActionBase);//APBGame.cAPBPlayerController.RetCSAVerticalInteractionDistance
	void DebugMapCentreIncrementX();//APBGame.cAPBPlayerController.DebugMapCentreIncrementX
	void DebugServerDecrementCash(int Amount);//APBGame.cAPBPlayerController.DebugServerDecrementCash
	float RetFlyCamLookUpScale();//APBGame.cAPBPlayerController.RetFlyCamLookUpScale
	void ToggleReadyForMissions();//APBGame.cAPBPlayerController.ToggleReadyForMissions
	bool IsGM_InSpectatorMode();//APBGame.cAPBPlayerController.IsGM_InSpectatorMode
	bool IncrementRewardTokens(int Amount);//APBGame.cAPBPlayerController.IncrementRewardTokens
	void GolemSpawnVehicle(float vehicleLocationX,float vehicleLocationY,float vehicleLocationZ,int vehicleRotationPitch,int vehicleRotationYaw,int vehicleRotationRoll,int nDescriptorIndex);//APBGame.cAPBPlayerController.GolemSpawnVehicle
	void GetPlayerDeathViewPoint(FVector3* vecViewPoint,FRotator* rotRotation);//APBGame.cAPBPlayerController.GetPlayerDeathViewPoint
	void statue();//APBGame.cAPBPlayerController.statue
	void ServerSetDeadLocation(FVector3 NewLoc);//APBGame.cAPBPlayerController.ServerSetDeadLocation
	void ServerSetLookBehind(bool bLookBehind);//APBGame.cAPBPlayerController.ServerSetLookBehind
	void ServerSummon(struct FString sNameToSpawn,float fSpeed,float fDistance,int nX,int nY,int nZ);//APBGame.cAPBPlayerController.ServerSummon
	void PawnDied(class APawn* inPawn);//APBGame.cAPBPlayerController.PawnDied
	void CameraMaximumUpDownSpeed(float fMaxUpDownCameraSpeed);//APBGame.cAPBPlayerController.CameraMaximumUpDownSpeed
	void ServerGolemSetRandomEmoteTrace(bool bPlay);//APBGame.cAPBPlayerController.ServerGolemSetRandomEmoteTrace
	bool IsMoveInputIgnored();//APBGame.cAPBPlayerController.IsMoveInputIgnored
	bool IsDeathmatchTarget();//APBGame.cAPBPlayerController.IsDeathmatchTarget
	void LogDistrictBlockContentsServer(int nDistrictBlockSddRow);//APBGame.cAPBPlayerController.LogDistrictBlockContentsServer
	void SetItemExaminedNative(struct FString eInventoryItemType,bool NewState);//APBGame.cAPBPlayerController.SetItemExaminedNative
	void EnableFlyWhileDead(bool bAllow);//APBGame.cAPBPlayerController.EnableFlyWhileDead
	void ServerEnableRespawnAtCamera(bool bAllow);//APBGame.cAPBPlayerController.ServerEnableRespawnAtCamera
	void FlyAbsoluteAxes(bool bSet);//APBGame.cAPBPlayerController.FlyAbsoluteAxes
	void OnCheckpointReached(class AcCheckpoint* pCheckpoint,class UMissionObjective* pObjective);//APBGame.cAPBPlayerController.OnCheckpointReached
	void RefurbishItem(struct FString sCategory,int nInventorySlot);//APBGame.cAPBPlayerController.RefurbishItem
	void MS_SubtractMemSnapshots(struct FString sName1,struct FString sName2,struct FString sDest);//APBGame.cAPBPlayerController.MS_SubtractMemSnapshots
	void OnDeleteGroupWaypointCallback(bool bDeleted);//APBGame.cAPBPlayerController.OnDeleteGroupWaypointCallback
	void ClientAddResupplyHUDMessage(struct FString sMessage,int eAmmoCategory,int eInventoryItemType,int nAmmoAmount,int nAmmoCost);//APBGame.cAPBPlayerController.ClientAddResupplyHUDMessage
	unsigned char AtAutoReachedPosition(int nID);//APBGame.cAPBPlayerController.AtAutoReachedPosition
	void SummonDisplayPointTokenServer(struct FString sDisplayPointName,int nStartTime,int nDuration);//APBGame.cAPBPlayerController.SummonDisplayPointTokenServer
	int serverAddGroupWaypointNative(FVector3 pos);//APBGame.cAPBPlayerController.serverAddGroupWaypointNative
	void DebugMinigameStopParticipating();//APBGame.cAPBPlayerController.DebugMinigameStopParticipating
	void AddDebugHitMarker(FVector3 HitLocation,FVector3 HitDirection,DWORD DrawColor);//APBGame.cAPBPlayerController.AddDebugHitMarker
	void DebugTestMissionTarget(struct FString OperationCategory);//APBGame.cAPBPlayerController.DebugTestMissionTarget
	void CancelUnstick();//APBGame.cAPBPlayerController.CancelUnstick
	void ServerGBError(int Val);//APBGame.cAPBPlayerController.ServerGBError
	void LevelLoadsComplete();//APBGame.cAPBPlayerController.LevelLoadsComplete
	void ServerNotifyEnterCustomisationStudio(int eCustomisationEditor);//APBGame.cAPBPlayerController.ServerNotifyEnterCustomisationStudio
	void ClientTriggerGameplayTutorial(struct FString sEventName);//APBGame.cAPBPlayerController.ClientTriggerGameplayTutorial
	void ClientSetNumRadarSpots(unsigned char i_nCount);//APBGame.cAPBPlayerController.ClientSetNumRadarSpots
	void ServerRestartPlayer();//APBGame.cAPBPlayerController.ServerRestartPlayer
	void ServerEmitNotReadyNag();//APBGame.cAPBPlayerController.ServerEmitNotReadyNag
	void ClientNotifyBackupRecieved();//APBGame.cAPBPlayerController.ClientNotifyBackupRecieved
	void DebugLogHoldableItems();//APBGame.cAPBPlayerController.DebugLogHoldableItems
	void GM_ServerRemovePreferredMinigameVIPTarget(struct FString i_sCharacterName);//APBGame.cAPBPlayerController.GM_ServerRemovePreferredMinigameVIPTarget
	void GM_ServerClearMinigameQueue();//APBGame.cAPBPlayerController.GM_ServerClearMinigameQueue
	void OpenDoorAnimFinished(class AcAPBPawn* PawnAnimFinished);//APBGame.cAPBPlayerController.OpenDoorAnimFinished
	void SetHealthRechargeDuration(float Health,float Stamina);//APBGame.cAPBPlayerController.SetHealthRechargeDuration
	void ServerTeleportToTaskTargetNative(int nObjectiveIndex,int nTaskTargetIndex);//APBGame.cAPBPlayerController.ServerTeleportToTaskTargetNative
	void SummonDisplayPointToken(struct FString sDisplayPointName,int nStartTime,int nDuration);//APBGame.cAPBPlayerController.SummonDisplayPointToken
	void UndeployFnMod(struct FString sCategory,int nInventorySlot,int nFnModSlot);//APBGame.cAPBPlayerController.UndeployFnMod
	float GetVehicleEnterNoMovementTimeOut();//APBGame.cAPBPlayerController.GetVehicleEnterNoMovementTimeOut
	bool DecrementRewardTokens(int Amount);//APBGame.cAPBPlayerController.DecrementRewardTokens
	void ServerSetTestMarkerRelevant(bool bRelevant);//APBGame.cAPBPlayerController.ServerSetTestMarkerRelevant
	void ClientSyncTime(double fClientGameSeconds,double fDistrictServerGameSecondsNow);//APBGame.cAPBPlayerController.ClientSyncTime
	void DebugSetSkillRating(float fNewMean,float fNewStdDev);//APBGame.cAPBPlayerController.DebugSetSkillRating
	void RenderDebugTracers(bool bRender);//APBGame.cAPBPlayerController.RenderDebugTracers
	void VehicleMovementKeyIsUpOnServer();//APBGame.cAPBPlayerController.VehicleMovementKeyIsUpOnServer
	void SetRandomToD();//APBGame.cAPBPlayerController.SetRandomToD
	void ClientOnCheckpointReached(class AcCheckpoint* pCheckpoint,class UMissionObjective* pObjective);//APBGame.cAPBPlayerController.ClientOnCheckpointReached
	void ToggleBackupRequest();//APBGame.cAPBPlayerController.ToggleBackupRequest
	bool MoveToTargetValid();//APBGame.cAPBPlayerController.MoveToTargetValid
	void CameraHandyCamInterpTo(int nInterpToID,int nID);//APBGame.cAPBPlayerController.CameraHandyCamInterpTo
	void DebugChallengeCycledImminentServerNative(int nSecToCycleEnd);//APBGame.cAPBPlayerController.DebugChallengeCycledImminentServerNative
	void OnPledgeChangedClient();//APBGame.cAPBPlayerController.OnPledgeChangedClient
	void ToggleScoreboardUI();//APBGame.cAPBPlayerController.ToggleScoreboardUI
	void NotifyEnterMusicStudio();//APBGame.cAPBPlayerController.NotifyEnterMusicStudio
	void DebugFindClosestCollectable();//APBGame.cAPBPlayerController.DebugFindClosestCollectable
	void ServerFlythroughSpawnVehicle(FVector3 vehicleLocation,FRotator vehicleRotation,int nMeshIndex);//APBGame.cAPBPlayerController.ServerFlythroughSpawnVehicle
	void ClientOnCSATimerStopped();//APBGame.cAPBPlayerController.ClientOnCSATimerStopped
	void ServerShortTimeout();//APBGame.cAPBPlayerController.ServerShortTimeout
	bool CanTarget(class AActor* A);//APBGame.cAPBPlayerController.CanTarget
	double RetDeployedVehicleSpawnTimeStamp();//APBGame.cAPBPlayerController.RetDeployedVehicleSpawnTimeStamp
	void GM_ToggleIdentifiers();//APBGame.cAPBPlayerController.GM_ToggleIdentifiers
	void SetFlyCamLookUpScale(float NewScale);//APBGame.cAPBPlayerController.SetFlyCamLookUpScale
	void EndStateGotoVehicleAccessPointAndOpenDoorState();//APBGame.cAPBPlayerController.EndStateGotoVehicleAccessPointAndOpenDoorState
	void ClientSetPersistantData(unsigned char TargetType,unsigned char CameraPosition,float UserDefinedViewScalar);//APBGame.cAPBPlayerController.ClientSetPersistantData
	void NotifyClientCancelLeanInOut();//APBGame.cAPBPlayerController.NotifyClientCancelLeanInOut
	void GM_ServerSetFreeCameraSpeed(float i_fSpeed);//APBGame.cAPBPlayerController.GM_ServerSetFreeCameraSpeed
	void ClientCancelMoveToPositionState();//APBGame.cAPBPlayerController.ClientCancelMoveToPositionState
	void SetMusicTrackOnDisplayPoint();//APBGame.cAPBPlayerController.SetMusicTrackOnDisplayPoint
	void ClientOpenDisplayPointUI(class AActor* pDisplayPoint,unsigned char eInteractionType);//APBGame.cAPBPlayerController.ClientOpenDisplayPointUI
	void OpenDisplayPointUI(class AActor* pDisplayPoint,unsigned char eInteractionType);//APBGame.cAPBPlayerController.OpenDisplayPointUI
	void DestroyedNative();//APBGame.cAPBPlayerController.DestroyedNative
	void NotifyServerAvailableForMetagroupingChanged(bool NewState);//APBGame.cAPBPlayerController.NotifyServerAvailableForMetagroupingChanged
	void ClientOnTeamLeadershipRequested(int nLeadershipCandidateUID);//APBGame.cAPBPlayerController.ClientOnTeamLeadershipRequested
	void AudioTestEvent(struct FString i_sEventName,FVector3 i_vRelativeLocation);//APBGame.cAPBPlayerController.AudioTestEvent
	void ClientReceiveCharacterStats(struct FCharacterStats playerCharacterStats);//APBGame.cAPBPlayerController.ClientReceiveCharacterStats
	void MS_FlushInstruments();//APBGame.cAPBPlayerController.MS_FlushInstruments
	void SummonRoleRewardServer(struct FString sRoleMilestone);//APBGame.cAPBPlayerController.SummonRoleRewardServer
	void ClientGoToCSAAutoRouteState(class AActor* pInteractiveActor,unsigned char eCSA,int nIPIndex,int nARDIndex);//APBGame.cAPBPlayerController.ClientGoToCSAAutoRouteState
	void ReplicatedArrayEvent(struct FName sArrayName,int nElementIndex);//APBGame.cAPBPlayerController.ReplicatedArrayEvent
	void ServerSetCameraPosition(unsigned char TargetType,unsigned char CameraPosition);//APBGame.cAPBPlayerController.ServerSetCameraPosition
	void GM_GBMessage(struct FString i_sMessage);//APBGame.cAPBPlayerController.GM_GBMessage
	void ClientMissionGroupMembersNotification(struct FMissionSideMembersPacket packet);//APBGame.cAPBPlayerController.ClientMissionGroupMembersNotification
	void ServerTrySetMarksManShip(unsigned char nMarksManShipModeRequestID,bool bMarkManShipMode);//APBGame.cAPBPlayerController.ServerTrySetMarksManShip
	bool IsInsideVehicle();//APBGame.cAPBPlayerController.IsInsideVehicle
	void BeginStateDead();//APBGame.cAPBPlayerController.BeginStateDead
	void RemoveStorageAmmo(int eCategory,int nAmount);//APBGame.cAPBPlayerController.RemoveStorageAmmo
	void StopFire(unsigned char FireModeNum);//APBGame.cAPBPlayerController.StopFire
	void EndCSA(unsigned char eCSAState);//APBGame.cAPBPlayerController.EndCSA
	float RetOldInForward();//APBGame.cAPBPlayerController.RetOldInForward
	void EndMission(struct FString how);//APBGame.cAPBPlayerController.EndMission
	void SetPawnLastConnected(class AcAPBPawn* PawnLastConenected);//APBGame.cAPBPlayerController.SetPawnLastConnected
	void OpenChatChannelCommands();//APBGame.cAPBPlayerController.OpenChatChannelCommands
	int RetPlayerThreat();//APBGame.cAPBPlayerController.RetPlayerThreat
	void ServerSetTestMarkerType(unsigned char eType);//APBGame.cAPBPlayerController.ServerSetTestMarkerType
	void ForcePropTicking(bool bEnable);//APBGame.cAPBPlayerController.ForcePropTicking
	void DebugPreferTaskTarget(struct FString sName,bool bPreferred);//APBGame.cAPBPlayerController.DebugPreferTaskTarget
	bool GetItemDetails(struct FString sCategory,int nInventorySlot,unsigned char* eCategory,struct FGuid* nItemGuid);//APBGame.cAPBPlayerController.GetItemDetails
	void DebugServerTutorialCompleteEvent(int nIdx);//APBGame.cAPBPlayerController.DebugServerTutorialCompleteEvent
	void SetSprintSpeed(float fNewSprintingSpeed);//APBGame.cAPBPlayerController.SetSprintSpeed
	bool IsInMusicStudio();//APBGame.cAPBPlayerController.IsInMusicStudio
	void DebugSetWeaponLoadoutServer(int i_nLoadout);//APBGame.cAPBPlayerController.DebugSetWeaponLoadoutServer
	void DebugSetItemAttachmentCollision(float Arc,float HeightBottom,float HeightTop,float CrouchHeight);//APBGame.cAPBPlayerController.DebugSetItemAttachmentCollision
	int GetMenuSelection();//APBGame.cAPBPlayerController.GetMenuSelection
	void OpenOldCharacterCustomisationStudioNative();//APBGame.cAPBPlayerController.OpenOldCharacterCustomisationStudioNative
	void FakeStreamingComplete();//APBGame.cAPBPlayerController.FakeStreamingComplete
	void APB_VFXOn();//APBGame.cAPBPlayerController.APB_VFXOn
	void LogInventoryNative(int Type);//APBGame.cAPBPlayerController.LogInventoryNative
	void MovementKeyIsDownOnServer();//APBGame.cAPBPlayerController.MovementKeyIsDownOnServer
	void ServerSimulateTimeOut();//APBGame.cAPBPlayerController.ServerSimulateTimeOut
	int GetGroupID();//APBGame.cAPBPlayerController.GetGroupID
	void clientOnDeleteGroupWaypointComplete(bool bDeleted);//APBGame.cAPBPlayerController.clientOnDeleteGroupWaypointComplete
	void SaveCharacterState(struct FString Filename);//APBGame.cAPBPlayerController.SaveCharacterState
	void OnTransitionScreenFadedIn();//APBGame.cAPBPlayerController.OnTransitionScreenFadedIn
	void NotifyEnterSymbolEditor();//APBGame.cAPBPlayerController.NotifyEnterSymbolEditor
	void DeactivateOppositionHUDMarkerFirePing();//APBGame.cAPBPlayerController.DeactivateOppositionHUDMarkerFirePing
	void ServerPerformDisplayPointInteraction(class AActor* pDisplayPoint,unsigned char eInteractionType);//APBGame.cAPBPlayerController.ServerPerformDisplayPointInteraction
	class AcWaypoint* AddPersonalWaypoint(FVector3 pos,bool bUsePlayerHeight);//APBGame.cAPBPlayerController.AddPersonalWaypoint
	class AcStorageInventory* RetStorageInventory();//APBGame.cAPBPlayerController.RetStorageInventory
	void ReloadConcaveOutlines();//APBGame.cAPBPlayerController.ReloadConcaveOutlines
	void ServerSummonTestMarkerNative(int nHudMarkerID);//APBGame.cAPBPlayerController.ServerSummonTestMarkerNative
	void RemoveUnlock(struct FString sUnlockName);//APBGame.cAPBPlayerController.RemoveUnlock
	void LoadCharacterStateServer(struct FString Filename);//APBGame.cAPBPlayerController.LoadCharacterStateServer
	void ClientOnTeamJoined(struct FSidePacket packet);//APBGame.cAPBPlayerController.ClientOnTeamJoined
	bool MoveToTargetValidAutoMoveToCSAPositionState();//APBGame.cAPBPlayerController.MoveToTargetValidAutoMoveToCSAPositionState
	void ServerSetCameraMaximumUpDownSpeed(float fMaxUpDownCameraSpeed);//APBGame.cAPBPlayerController.ServerSetCameraMaximumUpDownSpeed
	void Suicide();//APBGame.cAPBPlayerController.Suicide
	void ToggleGeometryDebug();//APBGame.cAPBPlayerController.ToggleGeometryDebug
	void SetShowStreamingTransitionScreen(bool bShowStreamingTransitionScreen);//APBGame.cAPBPlayerController.SetShowStreamingTransitionScreen
	struct FString StatsToString();//APBGame.cAPBPlayerController.StatsToString
	void NativeClientRPCOverflow();//APBGame.cAPBPlayerController.NativeClientRPCOverflow
	void ScorerKillNotify(struct FScorerKillNotificationPacket* packet);//APBGame.cAPBPlayerController.ScorerKillNotify
	void ClientSetLookBehind(bool bLookBehind);//APBGame.cAPBPlayerController.ClientSetLookBehind
	void SummonTaskItem(struct FString sTaskItemVarietyName,bool i_bAsDeployable);//APBGame.cAPBPlayerController.SummonTaskItem
	void ToggleDistrictMap();//APBGame.cAPBPlayerController.ToggleDistrictMap
	void CustomisationDownloadComplete(class UcCompressedAssetCustomisation* Data,int nUserData);//APBGame.cAPBPlayerController.CustomisationDownloadComplete
	void CameraShake(float Duration,FVector3 newRotAmplitude,FVector3 newRotFrequency,FVector3 newLocAmplitude,FVector3 newLocFrequency,float newFOVAmplitude,float newFOVFrequency);//APBGame.cAPBPlayerController.CameraShake
	void GM_ClientSetFrozen(bool bFrozenGM);//APBGame.cAPBPlayerController.GM_ClientSetFrozen
	void TestRetContactRewardItems(int ContactID,int LevelStart,int LevelEnd);//APBGame.cAPBPlayerController.TestRetContactRewardItems
	void ExecChatLogAction(struct FString sChatLogAction);//APBGame.cAPBPlayerController.ExecChatLogAction
	void MS_DeleteAllMemSnapshots();//APBGame.cAPBPlayerController.MS_DeleteAllMemSnapshots
	void DebugIncrementCash(int Amount);//APBGame.cAPBPlayerController.DebugIncrementCash
	unsigned char RetPlayerStatus(bool ignoreReady);//APBGame.cAPBPlayerController.RetPlayerStatus
	void EndUIInteraction();//APBGame.cAPBPlayerController.EndUIInteraction
	void RemoveUnlockServer(struct FString sUnlockName);//APBGame.cAPBPlayerController.RemoveUnlockServer
	void ClientInvertMouse(bool bInvert);//APBGame.cAPBPlayerController.ClientInvertMouse
	void SummonItemCallback(struct FString sItemTypeName,struct FScriptDelegate Callback);//APBGame.cAPBPlayerController.SummonItemCallback
	void DebugDailyActivityAccept(struct FString i_sContact);//APBGame.cAPBPlayerController.DebugDailyActivityAccept
	void UploadChunkServer(struct FDataChunk chunk,struct FGuid ItemGuid);//APBGame.cAPBPlayerController.UploadChunkServer
	void UpdateAimReplication();//APBGame.cAPBPlayerController.UpdateAimReplication
	void GM_UpdateProfileSequence(float i_fDeltaTime);//APBGame.cAPBPlayerController.GM_UpdateProfileSequence
	void ClientOnCallForBackUpUIResponseReceived(unsigned char eAnswer);//APBGame.cAPBPlayerController.ClientOnCallForBackUpUIResponseReceived
	void ShowTimeDebug(bool bEnable);//APBGame.cAPBPlayerController.ShowTimeDebug
	void ClientCancelCallForBackup();//APBGame.cAPBPlayerController.ClientCancelCallForBackup
	class AGolemSpawnerActor* GetGolemSpawnerActor();//APBGame.cAPBPlayerController.GetGolemSpawnerActor
	void ServerSetRandomToD();//APBGame.cAPBPlayerController.ServerSetRandomToD
	void DebugClientFindHomelessCollectables(int i_nPackedLocation);//APBGame.cAPBPlayerController.DebugClientFindHomelessCollectables
	void DumpContactListNative();//APBGame.cAPBPlayerController.DumpContactListNative
	void DebugServerShowMinigameTargets();//APBGame.cAPBPlayerController.DebugServerShowMinigameTargets
	void ClientReceivePingReply(int pr_nPingReplyIndex);//APBGame.cAPBPlayerController.ClientReceivePingReply
	void ServerDebugSkipMissionActivity();//APBGame.cAPBPlayerController.ServerDebugSkipMissionActivity
	void RetCameraLocationAndReticuleDirection(FVector3* CameraLocationOut,FVector3* ReticuleDirectionOut);//APBGame.cAPBPlayerController.RetCameraLocationAndReticuleDirection
	void ClientGBRequest(int M,int R,int Q);//APBGame.cAPBPlayerController.ClientGBRequest
	void DebugServerDecrementOpenWorldCash(int Amount);//APBGame.cAPBPlayerController.DebugServerDecrementOpenWorldCash
	void SaveCustomisationToDisk(unsigned char eType,struct FString sFileName);//APBGame.cAPBPlayerController.SaveCustomisationToDisk
	void MissionStatsNotify(struct FMissionStatsPacket packet);//APBGame.cAPBPlayerController.MissionStatsNotify
	void ClientPlayPawnEffect(class AcAPBPawn* pInstigator,int nEffectType,float fSilencerRange);//APBGame.cAPBPlayerController.ClientPlayPawnEffect
	void MS_StopAll();//APBGame.cAPBPlayerController.MS_StopAll
	void DebugToggleMapChanges();//APBGame.cAPBPlayerController.DebugToggleMapChanges
	void serverNetStatue();//APBGame.cAPBPlayerController.serverNetStatue
	void ClientOnGroupMemberAdded(struct FGroupMember newMember);//APBGame.cAPBPlayerController.ClientOnGroupMemberAdded
	void SuicideCharacterPawn();//APBGame.cAPBPlayerController.SuicideCharacterPawn
	void clientDeleteGroupWaypoint(int nMarkerID,struct FScriptDelegate OnDeleteCallback);//APBGame.cAPBPlayerController.clientDeleteGroupWaypoint
	void APB_VFXToggle();//APBGame.cAPBPlayerController.APB_VFXToggle
	void DebugUnSpectate();//APBGame.cAPBPlayerController.DebugUnSpectate
	void LogAvailability();//APBGame.cAPBPlayerController.LogAvailability
	void ServerResetReuseGroupsNative();//APBGame.cAPBPlayerController.ServerResetReuseGroupsNative
	void SetWindowTitle();//APBGame.cAPBPlayerController.SetWindowTitle
	void GM_SetHeatLevel(int NewLevel,bool bShouldLock);//APBGame.cAPBPlayerController.GM_SetHeatLevel
	void DebugDecrementRewardTokens(int Amount);//APBGame.cAPBPlayerController.DebugDecrementRewardTokens
	void OpenMainMenu();//APBGame.cAPBPlayerController.OpenMainMenu
	void ToggleDebugHUD();//APBGame.cAPBPlayerController.ToggleDebugHUD
	void AlienTest(struct FName Test);//APBGame.cAPBPlayerController.AlienTest
	void ToggleHUDElement(struct FString sDatastoreTag);//APBGame.cAPBPlayerController.ToggleHUDElement
	void DistributeCustomisation(unsigned char eType,class UcCompressedAssetCustomisation* asset);//APBGame.cAPBPlayerController.DistributeCustomisation
	void PawnTakeDamage(int DamageAmount);//APBGame.cAPBPlayerController.PawnTakeDamage
	void DebugDailyActivityCycle();//APBGame.cAPBPlayerController.DebugDailyActivityCycle
	bool IsHijackingVehicle(class AcAPBVehicleBase* APBVehicleHijacking);//APBGame.cAPBPlayerController.IsHijackingVehicle
	void ServerDebugAddMissionTimeBonus(int nTimeBonus);//APBGame.cAPBPlayerController.ServerDebugAddMissionTimeBonus
	void ServerDoBuildingCheck(FVector3 i_vDirection);//APBGame.cAPBPlayerController.ServerDoBuildingCheck
	void BuyAmmoBoxes(int eCategory,int nBoxCount);//APBGame.cAPBPlayerController.BuyAmmoBoxes
	void SetMinigameVIPServer(bool bSet,struct FString sName);//APBGame.cAPBPlayerController.SetMinigameVIPServer
	void ClientNotifyBloatedVehicles();//APBGame.cAPBPlayerController.ClientNotifyBloatedVehicles
	void OnSpectatorModeRepNotify();//APBGame.cAPBPlayerController.OnSpectatorModeRepNotify
	int OperateOnQueuedItem(struct FQueuedItemOperation* i_Info);//APBGame.cAPBPlayerController.OperateOnQueuedItem
	void DebugBreakPedestrianCollision();//APBGame.cAPBPlayerController.DebugBreakPedestrianCollision
	void DebugSetConsSkillRating(float fNewConsRating);//APBGame.cAPBPlayerController.DebugSetConsSkillRating
	void TestPersistenceServer(int numTests);//APBGame.cAPBPlayerController.TestPersistenceServer
	void CameraCollision(bool bDoCameraCollision);//APBGame.cAPBPlayerController.CameraCollision
	void ClientSelfSay(struct FString Message,int DisplayTime);//APBGame.cAPBPlayerController.ClientSelfSay
	void OpenFullChat();//APBGame.cAPBPlayerController.OpenFullChat
	void KickTeamMemberServer(int nCharacterUID);//APBGame.cAPBPlayerController.KickTeamMemberServer
	void GM_EndMinigame(bool i_bAll);//APBGame.cAPBPlayerController.GM_EndMinigame
	void ServerRPCOverflow();//APBGame.cAPBPlayerController.ServerRPCOverflow
	void SummonRedeemableReward(int nKeyID);//APBGame.cAPBPlayerController.SummonRedeemableReward
	void UnlockContactServerNative(struct FString contactName);//APBGame.cAPBPlayerController.UnlockContactServerNative
	void ShowCameraCoords(bool bEnable);//APBGame.cAPBPlayerController.ShowCameraCoords
	void ServerDestroyGolemSpawnerActor();//APBGame.cAPBPlayerController.ServerDestroyGolemSpawnerActor
	void SetNoPenaltyRespawning(bool bNoPenaltyRespawning);//APBGame.cAPBPlayerController.SetNoPenaltyRespawning
	void SetInvertMouse(bool bInvert);//APBGame.cAPBPlayerController.SetInvertMouse
	void GM_ServerSetInvisibilityEnabledNative(bool bEnabled);//APBGame.cAPBPlayerController.GM_ServerSetInvisibilityEnabledNative
	void AutoMoveToEnterTimer();//APBGame.cAPBPlayerController.AutoMoveToEnterTimer
	void BreakPledge();//APBGame.cAPBPlayerController.BreakPledge
	void ExecMusicTrackAction(struct FString sMusicTrackAction);//APBGame.cAPBPlayerController.ExecMusicTrackAction
	void GM_SetFreeCamAbsoluteAxes(bool i_bEnabled);//APBGame.cAPBPlayerController.GM_SetFreeCamAbsoluteAxes
	void CameraKeysExtraMovement(bool bEnable);//APBGame.cAPBPlayerController.CameraKeysExtraMovement
	void MS_PlaySongFromSlot(int nSlot);//APBGame.cAPBPlayerController.MS_PlaySongFromSlot
	void ClientOnCSATimerChanged(float fTimeRemaining,float fProgress);//APBGame.cAPBPlayerController.ClientOnCSATimerChanged
	void ServerDebugSetPermission(unsigned char nPermissionIndex,bool bEnabled);//APBGame.cAPBPlayerController.ServerDebugSetPermission
	void EndMissionServerNative(struct FString how);//APBGame.cAPBPlayerController.EndMissionServerNative
	void IllegalLocation(bool bServer,bool bPawn);//APBGame.cAPBPlayerController.IllegalLocation
	void ResetOldInForward();//APBGame.cAPBPlayerController.ResetOldInForward
	void GM_SetRunSpeed(float fSpeed);//APBGame.cAPBPlayerController.GM_SetRunSpeed
	void MissionEvaluate(int bAnswer);//APBGame.cAPBPlayerController.MissionEvaluate
	void ClientSetMarksManShipRequestInfo(unsigned char nMarksManShipModeRequestID,bool bMarksManShipMode);//APBGame.cAPBPlayerController.ClientSetMarksManShipRequestInfo
	void LeftMovementKeyDown();//APBGame.cAPBPlayerController.LeftMovementKeyDown
	void ChangeOutlineColor(int outlineID,int R,int G,int B);//APBGame.cAPBPlayerController.ChangeOutlineColor
	void GetInAndCloseDoorAnimFinished(class AcAPBPawn* PawnAnimFinished);//APBGame.cAPBPlayerController.GetInAndCloseDoorAnimFinished
	void CameraModeOriginLagSpeed(float fLagSpeed);//APBGame.cAPBPlayerController.CameraModeOriginLagSpeed
	void ClientOnUnreliableGroupDataReceived(struct FUnreliableDataPacket packet);//APBGame.cAPBPlayerController.ClientOnUnreliableGroupDataReceived
	void ClientAckDrive(double TimeStamp);//APBGame.cAPBPlayerController.ClientAckDrive
	void ServerPrintState();//APBGame.cAPBPlayerController.ServerPrintState
	void GM_ServerToggleInvulnerabilityNative();//APBGame.cAPBPlayerController.GM_ServerToggleInvulnerabilityNative
	void MovementKeyPressed();//APBGame.cAPBPlayerController.MovementKeyPressed
	void ShowCameraCoordsRelativeToPawn(bool bEnable);//APBGame.cAPBPlayerController.ShowCameraCoordsRelativeToPawn
	void ServerCancelMoveToPositionState(int nID);//APBGame.cAPBPlayerController.ServerCancelMoveToPositionState
	void DebugTestHUDMessage(struct FString sMessage);//APBGame.cAPBPlayerController.DebugTestHUDMessage
	void ServerSetCameraMaximumFlySpeed(float fMaxFlyCameraSpeed);//APBGame.cAPBPlayerController.ServerSetCameraMaximumFlySpeed
	class AcMission* GetMission();//APBGame.cAPBPlayerController.GetMission
	void GM_RepairVehicle();//APBGame.cAPBPlayerController.GM_RepairVehicle
	void ClientCompleteAutoMoveToCSA();//APBGame.cAPBPlayerController.ClientCompleteAutoMoveToCSA
	void ServerMakeUnconscious();//APBGame.cAPBPlayerController.ServerMakeUnconscious
	void DebugTestTutorial(struct FString sMessage);//APBGame.cAPBPlayerController.DebugTestTutorial
	void OpenBlazingFire();//APBGame.cAPBPlayerController.OpenBlazingFire
	void ClientGoToSpawnZoneSelectScreen(unsigned char eFaction);//APBGame.cAPBPlayerController.ClientGoToSpawnZoneSelectScreen
	void MoveCam(float fX,float fY,float fZ);//APBGame.cAPBPlayerController.MoveCam
	void SetNumWantedMips(int nNumMips);//APBGame.cAPBPlayerController.SetNumWantedMips
	void DebugServerMinigameStopParticipating();//APBGame.cAPBPlayerController.DebugServerMinigameStopParticipating
	void SetLastValidPawnViewTargetUID(int nLastValidPawnViewTargetUID);//APBGame.cAPBPlayerController.SetLastValidPawnViewTargetUID
	void ReloadAudioGarageData();//APBGame.cAPBPlayerController.ReloadAudioGarageData
	void ServerSuicide();//APBGame.cAPBPlayerController.ServerSuicide
	void RemoveUnlockNative(struct FString sUnlockName);//APBGame.cAPBPlayerController.RemoveUnlockNative
	void UpdatePlayerHUDMarkerUserData();//APBGame.cAPBPlayerController.UpdatePlayerHUDMarkerUserData
	void DebugSetThreatLevel(int nThreatLevel);//APBGame.cAPBPlayerController.DebugSetThreatLevel
	void SkipMissionActivity();//APBGame.cAPBPlayerController.SkipMissionActivity
	void ServerShowAllCheckpoints(bool bShow);//APBGame.cAPBPlayerController.ServerShowAllCheckpoints
	void StartMinigameServer(struct FString sMinigameName);//APBGame.cAPBPlayerController.StartMinigameServer
	void CloseDoorFromInsideAnimFinished(class AcAPBPawn* PawnAnimFinished);//APBGame.cAPBPlayerController.CloseDoorFromInsideAnimFinished
	void ServerReportPlayer(struct FString i_sPlayerName);//APBGame.cAPBPlayerController.ServerReportPlayer
	void AudioMemDump();//APBGame.cAPBPlayerController.AudioMemDump
	void GolemSetRandomEmoteTrace(bool bPlay);//APBGame.cAPBPlayerController.GolemSetRandomEmoteTrace
	void UnlockContact(struct FString contactName);//APBGame.cAPBPlayerController.UnlockContact
	void SetFlyCamLookRightScale(float NewScale);//APBGame.cAPBPlayerController.SetFlyCamLookRightScale
	void OnSummonItemClient(int eErr,struct FGuid ItemGuid);//APBGame.cAPBPlayerController.OnSummonItemClient
	void DebugDecrementCash(int Amount);//APBGame.cAPBPlayerController.DebugDecrementCash
	bool IsVIP();//APBGame.cAPBPlayerController.IsVIP
	void CameraFlyLookUpScale(float NewScale);//APBGame.cAPBPlayerController.CameraFlyLookUpScale
	void ServerGolemDestroyAllVehicles();//APBGame.cAPBPlayerController.ServerGolemDestroyAllVehicles
	void CancelAmmoResupply();//APBGame.cAPBPlayerController.CancelAmmoResupply
	void EnableSIV();//APBGame.cAPBPlayerController.EnableSIV
	bool ClientPredictCancelADA(int eCSAInputMapping);//APBGame.cAPBPlayerController.ClientPredictCancelADA
	void GM_EnqueueMinigame(struct FString i_sLocationName);//APBGame.cAPBPlayerController.GM_EnqueueMinigame
	void NotifyServerGroupPublicStateChanged(bool NewState);//APBGame.cAPBPlayerController.NotifyServerGroupPublicStateChanged
	void CallServerDamageActor(int nDamageAmount);//APBGame.cAPBPlayerController.CallServerDamageActor
	void CombineItemStackGroupServer(struct FDataChunk ItemStackGroupData,int nNumItemStacks);//APBGame.cAPBPlayerController.CombineItemStackGroupServer
	void ReplicateProjectileAttack(class AcAPBPawn* Attacker);//APBGame.cAPBPlayerController.ReplicateProjectileAttack
	void ActivateOppositionHUDMarkerFirePing(class AcAPBPlayerController* pInstigator);//APBGame.cAPBPlayerController.ActivateOppositionHUDMarkerFirePing
	void DebugResetTaskTarget(int nIndex);//APBGame.cAPBPlayerController.DebugResetTaskTarget
	void ParseCommandLine();//APBGame.cAPBPlayerController.ParseCommandLine
	void RadarZoomOut();//APBGame.cAPBPlayerController.RadarZoomOut
	void NativeReplicatedEvent(struct FName VarName);//APBGame.cAPBPlayerController.NativeReplicatedEvent
	void StartFire(unsigned char FireModeNum);//APBGame.cAPBPlayerController.StartFire
	void ServerTriggerGameplayTutorial(struct FString sEventName);//APBGame.cAPBPlayerController.ServerTriggerGameplayTutorial
	void ProcessPrePlayerMove();//APBGame.cAPBPlayerController.ProcessPrePlayerMove
	void ClientNotifySelfHit(int nShotID,struct FSharedHitData sharedHitDataParam,struct FDynamicHitData dynamicHitDataParam);//APBGame.cAPBPlayerController.ClientNotifySelfHit
	void ServerSetGroupLeaderPing(bool bIsBeingModified);//APBGame.cAPBPlayerController.ServerSetGroupLeaderPing
	void ServerUpdateTarget(double TimeStamp,class AActor* NewTarget,int aimRotation,float cameraCollidePercent,FVector3 TargetOffset);//APBGame.cAPBPlayerController.ServerUpdateTarget
	void StopLookBehind();//APBGame.cAPBPlayerController.StopLookBehind
	void SetHeatAmount(int NewValue);//APBGame.cAPBPlayerController.SetHeatAmount
	void GM_ServerGBMessage(struct FString i_sMessage);//APBGame.cAPBPlayerController.GM_ServerGBMessage
	void SetHealthRechargeDelay(float Health,float Stamina);//APBGame.cAPBPlayerController.SetHealthRechargeDelay
	void ContactStandingNotify(struct FContactStandingPacket packet);//APBGame.cAPBPlayerController.ContactStandingNotify
	void DisableShowInteractionPoints();//APBGame.cAPBPlayerController.DisableShowInteractionPoints
	void DebugCancelResupplyServer(unsigned char eWeaponType);//APBGame.cAPBPlayerController.DebugCancelResupplyServer
	void ClientFlushHUDMessages();//APBGame.cAPBPlayerController.ClientFlushHUDMessages
	void ToggleToD();//APBGame.cAPBPlayerController.ToggleToD
	void ServerForceCriticalDamageVehicleUse();//APBGame.cAPBPlayerController.ServerForceCriticalDamageVehicleUse
	void ReliableDoNothingServerRPC();//APBGame.cAPBPlayerController.ReliableDoNothingServerRPC
	void APB_VFXOff();//APBGame.cAPBPlayerController.APB_VFXOff
	bool LeanAbsoluteContraintsMet();//APBGame.cAPBPlayerController.LeanAbsoluteContraintsMet
	void StopAltFire(unsigned char FireModeNum);//APBGame.cAPBPlayerController.StopAltFire
	void SetMusicDeviceVehicle(class AcAPBVehicleBase* pVehicle);//APBGame.cAPBPlayerController.SetMusicDeviceVehicle
	void NotifyPlayerSpawned(bool bRespawn);//APBGame.cAPBPlayerController.NotifyPlayerSpawned
	void OnSelectSpawnZoneComplete();//APBGame.cAPBPlayerController.OnSelectSpawnZoneComplete
	void DebugMapCentreIncrementY();//APBGame.cAPBPlayerController.DebugMapCentreIncrementY
	void GM_ServerStartMissionNative(struct FString sMissionName,struct FString CharacterNamesString);//APBGame.cAPBPlayerController.GM_ServerStartMissionNative
	void ServerSetToDPeriod(unsigned char ePeriod);//APBGame.cAPBPlayerController.ServerSetToDPeriod
	bool IsSocialDistrict();//APBGame.cAPBPlayerController.IsSocialDistrict
	void ServerTriggerCSAEndEventTutorial(int nTriggerEventID);//APBGame.cAPBPlayerController.ServerTriggerCSAEndEventTutorial
	void ResetLeanKeys();//APBGame.cAPBPlayerController.ResetLeanKeys
	void ServerTestMissionTarget(class AActor* pTargetActor,struct FString OperationCategory);//APBGame.cAPBPlayerController.ServerTestMissionTarget
	void ClientReceiveOtherPlayerContactStanding(struct FContactStandingPacket packet);//APBGame.cAPBPlayerController.ClientReceiveOtherPlayerContactStanding
	void DebugTestAllTutorials();//APBGame.cAPBPlayerController.DebugTestAllTutorials
	void ServerEnableRespawnInVehicle(bool bAllow);//APBGame.cAPBPlayerController.ServerEnableRespawnInVehicle
	void LogModifiers();//APBGame.cAPBPlayerController.LogModifiers
	void GetOutAnimFinished(class AcAPBPawn* PawnAnimFinished);//APBGame.cAPBPlayerController.GetOutAnimFinished
	bool IsAbleToDrive();//APBGame.cAPBPlayerController.IsAbleToDrive
	int WithdrawCash(int nAmount);//APBGame.cAPBPlayerController.WithdrawCash
	void RoleAuthorityAutoMoveToUpdateAutoMoveToPositionState();//APBGame.cAPBPlayerController.RoleAuthorityAutoMoveToUpdateAutoMoveToPositionState
	void OnVehiclePassengerEnter(class AcAPBVehicleBase* Vehicle);//APBGame.cAPBPlayerController.OnVehiclePassengerEnter
	unsigned char AtAutoReachedPositionAutoMoveToPositionState(int nID);//APBGame.cAPBPlayerController.AtAutoReachedPositionAutoMoveToPositionState
	void ClientCompleteDailyActivity();//APBGame.cAPBPlayerController.ClientCompleteDailyActivity
	void ClientOpenUIScene(class UUIScene* Scene);//APBGame.cAPBPlayerController.ClientOpenUIScene
	void DebugDeclineVehicleSpawnDialogue();//APBGame.cAPBPlayerController.DebugDeclineVehicleSpawnDialogue
	void CancelAnyAutoMoveState();//APBGame.cAPBPlayerController.CancelAnyAutoMoveState
	void SetTestMarkerState(unsigned char eState);//APBGame.cAPBPlayerController.SetTestMarkerState
	void SummonRewardServer(struct FString sItemTypeName);//APBGame.cAPBPlayerController.SummonRewardServer
	int RetSizeOfVehicleEnterErrorArray();//APBGame.cAPBPlayerController.RetSizeOfVehicleEnterErrorArray
	void AbandonMissionServerNative();//APBGame.cAPBPlayerController.AbandonMissionServerNative
	bool CancelCSAAutoRoute();//APBGame.cAPBPlayerController.CancelCSAAutoRoute
	void GM_MoveToLocation(float fX,float fY,float fZ);//APBGame.cAPBPlayerController.GM_MoveToLocation
	int SummonItemNative(struct FString sItemTypeName,struct FGuid* NewItemGUID);//APBGame.cAPBPlayerController.SummonItemNative
	void OnDeployedVehicleDestroyed(bool bTelefragged);//APBGame.cAPBPlayerController.OnDeployedVehicleDestroyed
	void OpenOldVehicleCustomisationStudioNative();//APBGame.cAPBPlayerController.OpenOldVehicleCustomisationStudioNative
	void ServerSetVehicleMaxSpeed(float SpeedInMPH);//APBGame.cAPBPlayerController.ServerSetVehicleMaxSpeed
	class UcGroup* GetGroup();//APBGame.cAPBPlayerController.GetGroup
	void ServerUpdateUnlockedContactsList();//APBGame.cAPBPlayerController.ServerUpdateUnlockedContactsList
	void DebugWeaponRecoil(int eWeaponRecoil);//APBGame.cAPBPlayerController.DebugWeaponRecoil
	void LogPurchasedUnlocks();//APBGame.cAPBPlayerController.LogPurchasedUnlocks
	bool ServerCSAKeyReleased(int eCSAInputMapping);//APBGame.cAPBPlayerController.ServerCSAKeyReleased
	void ServerCSAPredictCancel(int eCSAInputMapping,unsigned char eCSA,struct FPredictedADAInfo predictedADA);//APBGame.cAPBPlayerController.ServerCSAPredictCancel
	void ItemExaminedServer(int eInventoryItemType);//APBGame.cAPBPlayerController.ItemExaminedServer
	void ServerSpectatorMode(bool bSpectatorMode);//APBGame.cAPBPlayerController.ServerSpectatorMode
	void InvokeADA(class AcAnimationDrivenTrigger* pTrigger);//APBGame.cAPBPlayerController.InvokeADA
	void ClientAddWitnessingHUDMessage(struct FString sMessage,int nCharacterUID);//APBGame.cAPBPlayerController.ClientAddWitnessingHUDMessage
	void CameraHiddenObjects(bool bDoHiddenObjects);//APBGame.cAPBPlayerController.CameraHiddenObjects
	void SaveCharacterStateServer(struct FString Filename);//APBGame.cAPBPlayerController.SaveCharacterStateServer
	void ClientTriggerZonePopupDialog(struct FString sEventName);//APBGame.cAPBPlayerController.ClientTriggerZonePopupDialog
	void SummonItemClient(int Error,struct FGuid NewItemGUID);//APBGame.cAPBPlayerController.SummonItemClient
	void CameraHandyCamInterpToDelay(float fInterpToDuration,int nID);//APBGame.cAPBPlayerController.CameraHandyCamInterpToDelay
	void ClientUpdatePosition();//APBGame.cAPBPlayerController.ClientUpdatePosition
	void IncMissionActivityProgress(int inc);//APBGame.cAPBPlayerController.IncMissionActivityProgress
	void ServerShowGameplayMarkers(bool bShowMarkers);//APBGame.cAPBPlayerController.ServerShowGameplayMarkers
	void PostBeginPlay();//APBGame.cAPBPlayerController.PostBeginPlay
	void StartCallForBackupUI();//APBGame.cAPBPlayerController.StartCallForBackupUI
	void ServerKill(struct FString sNameToKill);//APBGame.cAPBPlayerController.ServerKill
	void ServerIsSpotting(bool bIsSpotting);//APBGame.cAPBPlayerController.ServerIsSpotting
	void ServerSetHealthAmounts(int Health,int Stamina);//APBGame.cAPBPlayerController.ServerSetHealthAmounts
	void ClientOnGroupJoinedNative(struct FGroupPacket GroupPacket);//APBGame.cAPBPlayerController.ClientOnGroupJoinedNative
	void MoveAutonomous(float DeltaTime,unsigned char CompressedFlags,FVector3 newAccel,FRotator DeltaRot);//APBGame.cAPBPlayerController.MoveAutonomous
	float GetVehicleEnterTimeOut();//APBGame.cAPBPlayerController.GetVehicleEnterTimeOut
	void DebugClientSetWeaponTypeSet(int nWeaponTypeSet);//APBGame.cAPBPlayerController.DebugClientSetWeaponTypeSet
	class AcAPBPawn* RetPawnLastConnected();//APBGame.cAPBPlayerController.RetPawnLastConnected
	void ShowMarkerType(unsigned char eCategory,bool bShow);//APBGame.cAPBPlayerController.ShowMarkerType
	void ResupplyDeployedWeaponsFromStorage();//APBGame.cAPBPlayerController.ResupplyDeployedWeaponsFromStorage
	void ServerDebugAquireTeamLeadership();//APBGame.cAPBPlayerController.ServerDebugAquireTeamLeadership
	void SetRunSpeedServer(float fNewRunningSpeed);//APBGame.cAPBPlayerController.SetRunSpeedServer
	void ClientReceiveVehicleData(struct FVehicleData playerVehicleData);//APBGame.cAPBPlayerController.ClientReceiveVehicleData
	void ServerDebugPrintTrackedActivityStats();//APBGame.cAPBPlayerController.ServerDebugPrintTrackedActivityStats
	class AcHoldableItemManager* RetHoldableItemManager();//APBGame.cAPBPlayerController.RetHoldableItemManager
	void ServerGBReceive(unsigned char nType,unsigned char* Data,int nTotalDataSize);//APBGame.cAPBPlayerController.ServerGBReceive
	bool UIExecuteEmote(struct FString sEmoteName);//APBGame.cAPBPlayerController.UIExecuteEmote
	void GM_SetFreeCameraSpeed(float i_fSpeed);//APBGame.cAPBPlayerController.GM_SetFreeCameraSpeed
	void ServerToggleSwitchCameraSide();//APBGame.cAPBPlayerController.ServerToggleSwitchCameraSide
	void EndStateWaitOnStreaming();//APBGame.cAPBPlayerController.EndStateWaitOnStreaming
	void ClientReceiveCharacterMedalsData(struct FCharacterMedalData MedalsData);//APBGame.cAPBPlayerController.ClientReceiveCharacterMedalsData
	void DebugAquireTeamLeadership();//APBGame.cAPBPlayerController.DebugAquireTeamLeadership
	void CallServerMoveToPositionNoMovementTimer();//APBGame.cAPBPlayerController.CallServerMoveToPositionNoMovementTimer
	void SummonTestMarker();//APBGame.cAPBPlayerController.SummonTestMarker
	void DebugTeleportToTaskTarget(int nIndex);//APBGame.cAPBPlayerController.DebugTeleportToTaskTarget
	void LoadCharacterState(struct FString Filename);//APBGame.cAPBPlayerController.LoadCharacterState
	void SetInitialPermissionsState();//APBGame.cAPBPlayerController.SetInitialPermissionsState
	void DamageCar();//APBGame.cAPBPlayerController.DamageCar
	void SendCharacterInfoMultiPacket(struct FCharacterInfoMultiPacket* packet);//APBGame.cAPBPlayerController.SendCharacterInfoMultiPacket
	void SetCustomColour(int nIndex,struct FLinearColor colHSL);//APBGame.cAPBPlayerController.SetCustomColour
	void ServerGolemSpawnRandomCharacters(int nNumCharacters,float fSpawnRadius,float fSpawnFrequency,float fDespawnFrequency);//APBGame.cAPBPlayerController.ServerGolemSpawnRandomCharacters
	void ClientShowHUDMarkerTaskMarker(int nServerMarkerID,bool bShow);//APBGame.cAPBPlayerController.ClientShowHUDMarkerTaskMarker
	void CameraAPBScreenShakeLocation(int nAPBScreenShake,float fLocationAmplitudeX,float fLocationAmplitudeY,float fLocationAmplitudeZ,float fLocationFrequencyX,float fLocationFrequencyY,float fLocationFrequencyZ);//APBGame.cAPBPlayerController.CameraAPBScreenShakeLocation
	void ResetMusicTrack();//APBGame.cAPBPlayerController.ResetMusicTrack
	void DebugBuyAmmoBoxes(int eCategory,int nBoxCount);//APBGame.cAPBPlayerController.DebugBuyAmmoBoxes
	void GM_ClientNotifyMoveToPlayerLocationFailed(struct FString sCharacterName,unsigned char eErrorCode);//APBGame.cAPBPlayerController.GM_ClientNotifyMoveToPlayerLocationFailed
	void NotifyRepairedVehicle(class AcAPBVehicleBase* i_pVehicle,int i_nActualDamageRepaired);//APBGame.cAPBPlayerController.NotifyRepairedVehicle
	void DebugServerIncrementCash(int Amount);//APBGame.cAPBPlayerController.DebugServerIncrementCash
	void DebugBuyAmmoAmount(int eCategory,int nAmount);//APBGame.cAPBPlayerController.DebugBuyAmmoAmount
	void OnAddGroupWaypointCallback(int nMarkerID);//APBGame.cAPBPlayerController.OnAddGroupWaypointCallback
	void ServerEmptyAllEquippedWeapons();//APBGame.cAPBPlayerController.ServerEmptyAllEquippedWeapons
	void BeginStateExitCustomisationStudioWaitOnStreaming();//APBGame.cAPBPlayerController.BeginStateExitCustomisationStudioWaitOnStreaming
	void MissionSummaryNotify(struct FMissionSummaryPacket packet);//APBGame.cAPBPlayerController.MissionSummaryNotify
	bool CalculateAutoRouteToPositionAndRotationGotoVehicleAccessPointState(FVector3* AutoRouteToPosition,FRotator* AutoRouteToRotation);//APBGame.cAPBPlayerController.CalculateAutoRouteToPositionAndRotationGotoVehicleAccessPointState
	int GetHealth();//APBGame.cAPBPlayerController.GetHealth
	void SetPropPhysics(bool bEnable);//APBGame.cAPBPlayerController.SetPropPhysics
	void GM_ToggleMissionOffers();//APBGame.cAPBPlayerController.GM_ToggleMissionOffers
	void SetItemAttachmentCollision(float Arc,float HeightBottom,float HeightTop,float CrouchHeight);//APBGame.cAPBPlayerController.SetItemAttachmentCollision
	void ProcessMoveDeadState(float DeltaRot,FVector3* outNewAccel);//APBGame.cAPBPlayerController.ProcessMoveDeadState
	bool IsPerformingCSAAutoRoute();//APBGame.cAPBPlayerController.IsPerformingCSAAutoRoute
	void clientOnGetDisplayPointPositionComplete(bool bSuccess,FVector3 Position);//APBGame.cAPBPlayerController.clientOnGetDisplayPointPositionComplete
	void NotifyDamagedByPlayer(int nDamageAmount,class AcAPBPlayerController* EventInstigator,class UClass* DamageType,int nWeaponType);//APBGame.cAPBPlayerController.NotifyDamagedByPlayer
	void ClientContactStandingNotification(struct FContactStandingPacket packet);//APBGame.cAPBPlayerController.ClientContactStandingNotification
	void ClientOnMissionEndedNative();//APBGame.cAPBPlayerController.ClientOnMissionEndedNative
	void OnClientExitCustomisationStudio();//APBGame.cAPBPlayerController.OnClientExitCustomisationStudio
	struct FString ToString();//APBGame.cAPBPlayerController.ToString
	void Witness();//APBGame.cAPBPlayerController.Witness
	void OpenEmoteCommands();//APBGame.cAPBPlayerController.OpenEmoteCommands
	bool ActorIsRelevant(class AActor* pr_pActor);//APBGame.cAPBPlayerController.ActorIsRelevant
	void ClientNotifyInvalidVehicles();//APBGame.cAPBPlayerController.ClientNotifyInvalidVehicles
	void SendCharacterInfo(struct FCharacterInfoPacket* packet);//APBGame.cAPBPlayerController.SendCharacterInfo
	void SetAudioVolumeThreshold(float Threshold);//APBGame.cAPBPlayerController.SetAudioVolumeThreshold
	void DeployNewCar();//APBGame.cAPBPlayerController.DeployNewCar
	bool IsWaitingOnStreaming();//APBGame.cAPBPlayerController.IsWaitingOnStreaming
	void DeployItem(struct FString sCategory,int nInventorySlot,int nDeploymentSlot);//APBGame.cAPBPlayerController.DeployItem
	void ToggleAmmoCarrierMod();//APBGame.cAPBPlayerController.ToggleAmmoCarrierMod
	void SaveCustomisation(struct FString sFileName);//APBGame.cAPBPlayerController.SaveCustomisation
	void ClientCancelCrouchRequest(bool bCrouch,int nCrouchRequestID);//APBGame.cAPBPlayerController.ClientCancelCrouchRequest
	void GolemSetEmoteStatusTrace(bool bPlay);//APBGame.cAPBPlayerController.GolemSetEmoteStatusTrace
	void CameraPlayAPBScreenShake(int nAPBScreenShake);//APBGame.cAPBPlayerController.CameraPlayAPBScreenShake
	void DebugExplosion(int Type,float X,float Y,float Z);//APBGame.cAPBPlayerController.DebugExplosion
	void DestroyItem(struct FString sCategory,int nInventorySlot);//APBGame.cAPBPlayerController.DestroyItem
	void DebugShowTextFile(struct FString sFileName);//APBGame.cAPBPlayerController.DebugShowTextFile
	void SetCompressedCustomisation(unsigned char eType,class UcCompressedAssetCustomisation* Data);//APBGame.cAPBPlayerController.SetCompressedCustomisation
	void SetLookBehind(bool bLookBehind);//APBGame.cAPBPlayerController.SetLookBehind
	void SummonContactReward(struct FString sContactLevel);//APBGame.cAPBPlayerController.SummonContactReward
	void DebugFindHomelessCollectables();//APBGame.cAPBPlayerController.DebugFindHomelessCollectables
	void DestroyGolemSpawnerActor();//APBGame.cAPBPlayerController.DestroyGolemSpawnerActor
	void SetAudioMaxNumVoices(int maxNumVoices);//APBGame.cAPBPlayerController.SetAudioMaxNumVoices
	void ItemExamined(int eInventoryItemType);//APBGame.cAPBPlayerController.ItemExamined
	void ServerCancelAllAmmoResupplyActions();//APBGame.cAPBPlayerController.ServerCancelAllAmmoResupplyActions
	void ClientOnGroupMemberRemovedNative(int nCharacterUID);//APBGame.cAPBPlayerController.ClientOnGroupMemberRemovedNative
	void CameraMaximumFlySpeed(float fMaxFlyCameraSpeed);//APBGame.cAPBPlayerController.CameraMaximumFlySpeed
	void SetMusicTrack(bool bBroadcastViaVehicle,int nInitialPlaybackTime,struct FString sTrackName,struct FString sArtistName,struct FString sAlbumName,struct FString sGenre);//APBGame.cAPBPlayerController.SetMusicTrack
	void DebugKickTeamMemberServerNative(struct FString PlayerName);//APBGame.cAPBPlayerController.DebugKickTeamMemberServerNative
	void ProcessRespawnInfo(struct FRespawnInfo* Info);//APBGame.cAPBPlayerController.ProcessRespawnInfo
	void ToggleConsumable();//APBGame.cAPBPlayerController.ToggleConsumable
	void ShowServerHits(bool bShow);//APBGame.cAPBPlayerController.ShowServerHits
	void ReplayLastHelpUI();//APBGame.cAPBPlayerController.ReplayLastHelpUI
	void SetWalkSpeedServer(float fNewWalkSpeed);//APBGame.cAPBPlayerController.SetWalkSpeedServer
	void ServerCancelMoveToPositionState_DONOTCALL(int nID);//APBGame.cAPBPlayerController.ServerCancelMoveToPositionState_DONOTCALL
	void ResetFrozenMessageTimeout();//APBGame.cAPBPlayerController.ResetFrozenMessageTimeout
	bool CalculateAutoRouteToPositionAndRotationAutoMoveToCSAPositionState(FVector3* AutoRouteToPosition,FRotator* AutoRouteToRotation);//APBGame.cAPBPlayerController.CalculateAutoRouteToPositionAndRotationAutoMoveToCSAPositionState
	void ServerMovementKeyDisallowLean(bool bMovementKeyDisallowLean);//APBGame.cAPBPlayerController.ServerMovementKeyDisallowLean
	void MS_LogMem(bool bPrintCallStack);//APBGame.cAPBPlayerController.MS_LogMem
	void ClientSetViewTarget(class AActor* A,struct FViewTargetTransitionParams TransitionParams);//APBGame.cAPBPlayerController.ClientSetViewTarget
	void ClientReceiveRespawnInfo(struct FRespawnInfo Info);//APBGame.cAPBPlayerController.ClientReceiveRespawnInfo
	void SetMission(class AcMission* NewMission);//APBGame.cAPBPlayerController.SetMission
	void LoadGraffitiCustomisation(struct FString sFileName);//APBGame.cAPBPlayerController.LoadGraffitiCustomisation
	void ServerSetTaskTargetTriggeredNative(int nTaskTargetIndex,bool bTriggered);//APBGame.cAPBPlayerController.ServerSetTaskTargetTriggeredNative
	void clientSetPVPCombat(bool bState);//APBGame.cAPBPlayerController.clientSetPVPCombat
	void TestActivityMessage(struct FString activityMessageName);//APBGame.cAPBPlayerController.TestActivityMessage
	void SetMinigameSpinupServer(bool bActive);//APBGame.cAPBPlayerController.SetMinigameSpinupServer
	void ClearPersistentDebugLines();//APBGame.cAPBPlayerController.ClearPersistentDebugLines
	class AcPlayerVehicleSpawnZone* RetInteractingVehicleSpawnZone();//APBGame.cAPBPlayerController.RetInteractingVehicleSpawnZone
	void CameraHandyCamDuration(float fDuration,int nID);//APBGame.cAPBPlayerController.CameraHandyCamDuration
	void Pledge(struct FString contactName);//APBGame.cAPBPlayerController.Pledge
	void CameraHandyCamChangeInMovementSpeed(float fChange,int nID);//APBGame.cAPBPlayerController.CameraHandyCamChangeInMovementSpeed
	void SendUnreliableGroupData(struct FUnreliableDataPacket packet);//APBGame.cAPBPlayerController.SendUnreliableGroupData
	void SelectUnequipped();//APBGame.cAPBPlayerController.SelectUnequipped
	void OnMedalAwardNotification(int nMedalID);//APBGame.cAPBPlayerController.OnMedalAwardNotification
	int GetCachedHeatLevel();//APBGame.cAPBPlayerController.GetCachedHeatLevel
	void OnStreamingCompletedNative();//APBGame.cAPBPlayerController.OnStreamingCompletedNative
	void SummonItem(struct FString sItemTypeName);//APBGame.cAPBPlayerController.SummonItem
	void SummonItemServer(struct FString sItemTypeName);//APBGame.cAPBPlayerController.SummonItemServer
	void ClientBeginInteractionState(unsigned char eState,struct FGuid UIActorGUID,bool bInteract,unsigned char eInteractionType);//APBGame.cAPBPlayerController.ClientBeginInteractionState
	void NotifyDrivenVehicleDamagedByPlayer(int nDamageAmount,class AcAPBPlayerController* EventInstigator,class UClass* DamageType,int nWeaponType);//APBGame.cAPBPlayerController.NotifyDrivenVehicleDamagedByPlayer
	void ServerSetTestMarkerState(unsigned char eState);//APBGame.cAPBPlayerController.ServerSetTestMarkerState
	void DebugServerPrintClosestCollectable();//APBGame.cAPBPlayerController.DebugServerPrintClosestCollectable
	void StartLookBehind();//APBGame.cAPBPlayerController.StartLookBehind
	void ClientPlayMinigameFX(int i_eEffect,FVector3 i_vLocation,FRotator i_Rotation);//APBGame.cAPBPlayerController.ClientPlayMinigameFX
	void SelectUsable(int nSlot);//APBGame.cAPBPlayerController.SelectUsable
	void ServerStartAutoReadyTimer();//APBGame.cAPBPlayerController.ServerStartAutoReadyTimer
	void SummonRoleReward(struct FString sRoleMilestone);//APBGame.cAPBPlayerController.SummonRoleReward
	void CameraFlyLookRightScale(float NewScale);//APBGame.cAPBPlayerController.CameraFlyLookRightScale
	int RetCurrentCustomisationEditor();//APBGame.cAPBPlayerController.RetCurrentCustomisationEditor
	void UnpackDriveInputs(int Inputs,float* OutForward,float* OutStrafe,float* OutUp);//APBGame.cAPBPlayerController.UnpackDriveInputs
	class AcPlayerCharacterSpawnZone* RetPendingSpawnZone();//APBGame.cAPBPlayerController.RetPendingSpawnZone
	void DebugTriggerTaskTarget(int nIndex);//APBGame.cAPBPlayerController.DebugTriggerTaskTarget
	void LoadLevelAudio();//APBGame.cAPBPlayerController.LoadLevelAudio
	bool IsNetworkConnectionUnreponsive();//APBGame.cAPBPlayerController.IsNetworkConnectionUnreponsive
	void OpenElectiveSpawnScreenTimer();//APBGame.cAPBPlayerController.OpenElectiveSpawnScreenTimer
	void ClientAddDailyActivity(int i_eDailyActivity,bool i_bIsCompleted);//APBGame.cAPBPlayerController.ClientAddDailyActivity
	void ClientDebugSetMaxSafeHeight(float fNewHeight);//APBGame.cAPBPlayerController.ClientDebugSetMaxSafeHeight
	void ServerLogMissionsNative();//APBGame.cAPBPlayerController.ServerLogMissionsNative
	void ClientServerShootLine(FVector3 Start,FVector3 End,bool bPiercingLine);//APBGame.cAPBPlayerController.ClientServerShootLine
	void SetMinigameVIP(bool bSet,struct FString sName);//APBGame.cAPBPlayerController.SetMinigameVIP
	void ReplicateReloadFX(class AcAPBPawn* reloader);//APBGame.cAPBPlayerController.ReplicateReloadFX
	void ServerPhysCorrect(int nMode);//APBGame.cAPBPlayerController.ServerPhysCorrect
	void DebugTutorialCompleteEvent(int nIdx);//APBGame.cAPBPlayerController.DebugTutorialCompleteEvent
	void NotReadyNag_OpenDialog();//APBGame.cAPBPlayerController.NotReadyNag_OpenDialog
	void ClientOnTeamMemberRemoved(int nCharacterUID,int nNewLeaderUID);//APBGame.cAPBPlayerController.ClientOnTeamMemberRemoved
	void AwardContactStanding(struct FString contactName,int nStandingIncrement);//APBGame.cAPBPlayerController.AwardContactStanding
	void GolemSpawnRandomCharacters(int nNumCharacters,float fSpawnRadius,float fSpawnFrequency,float fDespawnFrequency);//APBGame.cAPBPlayerController.GolemSpawnRandomCharacters
	void ServerAddStorageAmmo(int eCategory,int nAmount);//APBGame.cAPBPlayerController.ServerAddStorageAmmo
	void SetInteractingVehicleSpawnZone(class AcPlayerVehicleSpawnZone* SpawnZone);//APBGame.cAPBPlayerController.SetInteractingVehicleSpawnZone
	bool CalculateDestinationPositionAndRotationGotoVehicleAccessPointState(FVector3* DestinationPosition,FRotator* DestinationRotation);//APBGame.cAPBPlayerController.CalculateDestinationPositionAndRotationGotoVehicleAccessPointState
	bool IsGM_InvisibilityEnabled();//APBGame.cAPBPlayerController.IsGM_InvisibilityEnabled
	void AudioPriorityManagerDebugToggle();//APBGame.cAPBPlayerController.AudioPriorityManagerDebugToggle
	void ClientAddPopupDialog(int ePopupDialog);//APBGame.cAPBPlayerController.ClientAddPopupDialog
	void CameraModeFOV(float FOV);//APBGame.cAPBPlayerController.CameraModeFOV
	void DebugSetRating(int nNewRating);//APBGame.cAPBPlayerController.DebugSetRating
	void OnDatabaseLoadComplete(bool bResult);//APBGame.cAPBPlayerController.OnDatabaseLoadComplete
	void ConsumeItem(struct FString sCategory,int nInventorySlot);//APBGame.cAPBPlayerController.ConsumeItem
	void GM_ServerSetInvulnerabilityEnabledNative(bool bEnabled);//APBGame.cAPBPlayerController.GM_ServerSetInvulnerabilityEnabledNative
	void OpenOldCharacterCustomisationStudio();//APBGame.cAPBPlayerController.OpenOldCharacterCustomisationStudio
	void CallServerCSAKeyPressed(int eCSAInputMapping,int aimRotation,float cameraCollidePercent,class AActor* pTargetedActor);//APBGame.cAPBPlayerController.CallServerCSAKeyPressed
	void ClientReceiveCharacterRoleProgress(unsigned char i_nBatchNumber,int* aProgressData);//APBGame.cAPBPlayerController.ClientReceiveCharacterRoleProgress
	void ClientSetRadarSpot(int i_nIndex);//APBGame.cAPBPlayerController.ClientSetRadarSpot
	void OnDied(class AController* Killer,class UClass* DamageType,FVector3 HitLocation);//APBGame.cAPBPlayerController.OnDied
	void AudioPriorityManagerDebugInfo();//APBGame.cAPBPlayerController.AudioPriorityManagerDebugInfo
	void ToggleSwitchCameraSide();//APBGame.cAPBPlayerController.ToggleSwitchCameraSide
	void SetPhysCorrectMode(int nMode);//APBGame.cAPBPlayerController.SetPhysCorrectMode
	class AcAPBPawn* GetCharacterPawn();//APBGame.cAPBPlayerController.GetCharacterPawn
	void SetItemExpiryTime(struct FString sCategory,int nInventorySlot,int nSecondsFromNow);//APBGame.cAPBPlayerController.SetItemExpiryTime
	bool IsOperationOnItemCompletedNative(int eErr);//APBGame.cAPBPlayerController.IsOperationOnItemCompletedNative
	bool RetCustomisationUploadInProgress(unsigned char eType);//APBGame.cAPBPlayerController.RetCustomisationUploadInProgress
	void TestScene(class UUIScene* Scene);//APBGame.cAPBPlayerController.TestScene
	void MS_PlayCharacterTheme(struct FString sCharacterName);//APBGame.cAPBPlayerController.MS_PlayCharacterTheme
	void ClientUpdateDisplayPointUI(class AActor* pDisplayPoint,unsigned char eInteractionType);//APBGame.cAPBPlayerController.ClientUpdateDisplayPointUI
	void SetDebugBitmapDrawLevel(int nLevel);//APBGame.cAPBPlayerController.SetDebugBitmapDrawLevel
	class AcWaypoint* AddWaypoint(int nMaxWaypoints,TArray<class AcWaypoint*>* aWaypoints,FVector3 pos,bool bUsePlayerHeight);//APBGame.cAPBPlayerController.AddWaypoint
	void InitFlythroughSpawner(int nNumPedestrianAssetsToCache,int nOffset);//APBGame.cAPBPlayerController.InitFlythroughSpawner
	class AActor* RetAimLockedTarget();//APBGame.cAPBPlayerController.RetAimLockedTarget
	void GM_ToggleInvisibility();//APBGame.cAPBPlayerController.GM_ToggleInvisibility
	void GM_UnlockContact(struct FString sContactName,int nContactLevel);//APBGame.cAPBPlayerController.GM_UnlockContact
	void SetOpposition(struct FString Who);//APBGame.cAPBPlayerController.SetOpposition
	void AddCheats();//APBGame.cAPBPlayerController.AddCheats
	void ServerGrieferPunishmentRLD818(int nCharacterUID);//APBGame.cAPBPlayerController.ServerGrieferPunishmentRLD818
	void ServerSetFlyAbsoluteAxes(bool bSet);//APBGame.cAPBPlayerController.ServerSetFlyAbsoluteAxes
	void DebugTogglePremium();//APBGame.cAPBPlayerController.DebugTogglePremium
	void GM_ServerSetHeatLevelNative(int NewLevel,bool bShouldLock,struct FString TargetPlayer);//APBGame.cAPBPlayerController.GM_ServerSetHeatLevelNative
	void ClientSpawnZoneUnelectedSilently();//APBGame.cAPBPlayerController.ClientSpawnZoneUnelectedSilently
	bool IsVehicleDriver();//APBGame.cAPBPlayerController.IsVehicleDriver
	void CameraViewTarget(struct FString sActorName);//APBGame.cAPBPlayerController.CameraViewTarget
	void OpenOldVehicleCustomisationStudio();//APBGame.cAPBPlayerController.OpenOldVehicleCustomisationStudio
	void DebugServerDailyActivityReset();//APBGame.cAPBPlayerController.DebugServerDailyActivityReset
	void DebugServerIncrementOpenWorldCash(int Amount);//APBGame.cAPBPlayerController.DebugServerIncrementOpenWorldCash
	void DebugBreakPedestrianCollisionServer();//APBGame.cAPBPlayerController.DebugBreakPedestrianCollisionServer
	void ClientHasSpotted();//APBGame.cAPBPlayerController.ClientHasSpotted
	void SetAutoMoveToStateEndedSuccessfully(bool bEndedSuccessfully);//APBGame.cAPBPlayerController.SetAutoMoveToStateEndedSuccessfully
	void UndeployItem(struct FString sCategory,int nInventorySlot);//APBGame.cAPBPlayerController.UndeployItem
	void PhysCorrectMode(int nMode);//APBGame.cAPBPlayerController.PhysCorrectMode
	void GM_StartProfileSequence(struct FString Filename);//APBGame.cAPBPlayerController.GM_StartProfileSequence
	void HijackingStarted(class AcAPBVehicleBase* APBVehicleHijacking);//APBGame.cAPBPlayerController.HijackingStarted
	void UpdateClientTimeDeltaHistory(float fNewTimeDelta);//APBGame.cAPBPlayerController.UpdateClientTimeDeltaHistory
	void RemoveOtherGroups();//APBGame.cAPBPlayerController.RemoveOtherGroups
	void TestNewUI();//APBGame.cAPBPlayerController.TestNewUI
	void CameraTabViewTarget(bool bForwards);//APBGame.cAPBPlayerController.CameraTabViewTarget
	void DebugClearMinigameTargets();//APBGame.cAPBPlayerController.DebugClearMinigameTargets
	void SetDoesntWantToEnterMarksManShipMode();//APBGame.cAPBPlayerController.SetDoesntWantToEnterMarksManShipMode
	void ClientReceiveCharacterRoleMilestones(unsigned char i_nBatchNumber,unsigned char* aMilestoneData);//APBGame.cAPBPlayerController.ClientReceiveCharacterRoleMilestones
	void ProvingGroundsSkipActivity();//APBGame.cAPBPlayerController.ProvingGroundsSkipActivity
	void DoPersistenceTests();//APBGame.cAPBPlayerController.DoPersistenceTests
	void ServerNotifySecurityViolation(int pr_nCharacterUID,unsigned char pr_eViolationCode,struct FString pr_sMessage);//APBGame.cAPBPlayerController.ServerNotifySecurityViolation
	void DebugPrintClosestCollectable();//APBGame.cAPBPlayerController.DebugPrintClosestCollectable
	void ToggleObstructionDebug();//APBGame.cAPBPlayerController.ToggleObstructionDebug
	void DebugServerDailyActivityAccept(int i_eContact);//APBGame.cAPBPlayerController.DebugServerDailyActivityAccept
	void ClientReceiveCharacterThemeGuid(int nCharacterUID,struct FGuid deployedThemeGuid,int nVersionHash);//APBGame.cAPBPlayerController.ClientReceiveCharacterThemeGuid
	void MakeUnconscious();//APBGame.cAPBPlayerController.MakeUnconscious
	void ClientReceiveCharacterInfoMultiPacket(struct FCharacterInfoMultiPacket packet);//APBGame.cAPBPlayerController.ClientReceiveCharacterInfoMultiPacket
	void MovementKeyDisallowLean(bool bMovementKeyDisallowLean);//APBGame.cAPBPlayerController.MovementKeyDisallowLean
	void ServerCameraKeysExtraMovement(bool bEnable);//APBGame.cAPBPlayerController.ServerCameraKeysExtraMovement
	void NotifyServerLfgStateChanged(bool NewState);//APBGame.cAPBPlayerController.NotifyServerLfgStateChanged
	void BeginAmmoResupply();//APBGame.cAPBPlayerController.BeginAmmoResupply
	void GM_ClientNotifyMovePlayerToGMLocationFailed(struct FString sCharacterName,unsigned char eErrorCode);//APBGame.cAPBPlayerController.GM_ClientNotifyMovePlayerToGMLocationFailed
	void CreateSymbolLicenceNative(struct FGuid nSymbolItem,int nRoyaltyFee);//APBGame.cAPBPlayerController.CreateSymbolLicenceNative
	void OnChatStateRepNotify();//APBGame.cAPBPlayerController.OnChatStateRepNotify
	void ServerAwayFromKeyboardNative(bool bAutomaticAFK);//APBGame.cAPBPlayerController.ServerAwayFromKeyboardNative
	void ToggleNitroMod();//APBGame.cAPBPlayerController.ToggleNitroMod
	void OnVehiclePassengerExit(class AcAPBVehicleBase* Vehicle,class AcAPBPawn* Passenger,bool bGetOut);//APBGame.cAPBPlayerController.OnVehiclePassengerExit
	void StartMission(struct FString sMissionName,int nRandomSeed);//APBGame.cAPBPlayerController.StartMission
	void GM_SetOpposition(struct FString sOppositionCharacters,struct FString sMissionCharacter);//APBGame.cAPBPlayerController.GM_SetOpposition
	void ServerGolemSetEmoteStatus(bool bPlay);//APBGame.cAPBPlayerController.ServerGolemSetEmoteStatus
	void DeployFnMod(struct FString sCategory,int nInventorySlot,int nFnModSlot,int nDeploymentSlot);//APBGame.cAPBPlayerController.DeployFnMod
	void ToggleLightweightClient();//APBGame.cAPBPlayerController.ToggleLightweightClient
	void BreakPledgeServerNative();//APBGame.cAPBPlayerController.BreakPledgeServerNative
	void ClientMedalAwardNotification(int nMedalID);//APBGame.cAPBPlayerController.ClientMedalAwardNotification
	void ServerCompleteSuccessfulyAutoMoveToCSA();//APBGame.cAPBPlayerController.ServerCompleteSuccessfulyAutoMoveToCSA
	void DebugRemoteContactInteractionNative(struct FString contactName);//APBGame.cAPBPlayerController.DebugRemoteContactInteractionNative
	unsigned char PackDriveInputs(float InForward,float InStrafe,float InUp);//APBGame.cAPBPlayerController.PackDriveInputs
	void GM_ClientNotifyMoveToLocationFailed(FVector3 vecLocation,unsigned char eErrorCode);//APBGame.cAPBPlayerController.GM_ClientNotifyMoveToLocationFailed
	void OnMissionSummaryNotification(struct FMissionSummaryPacket packet);//APBGame.cAPBPlayerController.OnMissionSummaryNotification
	bool IsAimingAt(class AActor* ATarget,float Epsilon);//APBGame.cAPBPlayerController.IsAimingAt
	void InputStopSprinting();//APBGame.cAPBPlayerController.InputStopSprinting
	int GetOppositionTeamID(int i_nIndex);//APBGame.cAPBPlayerController.GetOppositionTeamID
	void DebugServerRefreshCollision();//APBGame.cAPBPlayerController.DebugServerRefreshCollision
	void ShowDebugHUD(bool bEnable);//APBGame.cAPBPlayerController.ShowDebugHUD
	bool CanDoReachedPosition();//APBGame.cAPBPlayerController.CanDoReachedPosition
	void DBGTriggerGameplayTutorial(struct FString sEventName);//APBGame.cAPBPlayerController.DBGTriggerGameplayTutorial
	void MedalAwardNotify(int nMedalID);//APBGame.cAPBPlayerController.MedalAwardNotify
	void SetFirstStageTargetRange(float fRange);//APBGame.cAPBPlayerController.SetFirstStageTargetRange
	void DebugServerFindClosestCollectable();//APBGame.cAPBPlayerController.DebugServerFindClosestCollectable
	void ServerOnGroupLeft(bool bExittingDistrict);//APBGame.cAPBPlayerController.ServerOnGroupLeft
	void ServerDoCameraCollision(bool bDoCameraCollision);//APBGame.cAPBPlayerController.ServerDoCameraCollision
	void MS_LogMemSnapshot(struct FString sName,bool bPrintCallStack,struct FString sFileName);//APBGame.cAPBPlayerController.MS_LogMemSnapshot
	void ServerElectSpawnZone(int i_nSpawnPointHUDMarkerID);//APBGame.cAPBPlayerController.ServerElectSpawnZone
	void MissionEvaluate_Callback(unsigned char Answer);//APBGame.cAPBPlayerController.MissionEvaluate_Callback
	void ClientActivateDailyActivity(int i_eContact);//APBGame.cAPBPlayerController.ClientActivateDailyActivity
	void SnapRotationToPawn();//APBGame.cAPBPlayerController.SnapRotationToPawn
	void ServerGolemSetEmoteStatusTrace(bool bPlay);//APBGame.cAPBPlayerController.ServerGolemSetEmoteStatusTrace
	void ServerGolemDestroyAssetTrace();//APBGame.cAPBPlayerController.ServerGolemDestroyAssetTrace
	void ServerTriggerCSABeginEventTutorial(int nTriggerEventID);//APBGame.cAPBPlayerController.ServerTriggerCSABeginEventTutorial
	void SummonRedeemableRewardServer(int nKeyID);//APBGame.cAPBPlayerController.SummonRedeemableRewardServer
	void EnableShowInteractionPoints();//APBGame.cAPBPlayerController.EnableShowInteractionPoints
	void ClientReceiveSymbolData(struct FSymbolData playerSymbolData);//APBGame.cAPBPlayerController.ClientReceiveSymbolData
	void NotifyExitSymbolEditor();//APBGame.cAPBPlayerController.NotifyExitSymbolEditor
	void OnVendorSet(int nVendorID);//APBGame.cAPBPlayerController.OnVendorSet
	void ClientOnTeamMemberAdded(struct FSideMember newMember);//APBGame.cAPBPlayerController.ClientOnTeamMemberAdded
	void NotifyDamageCaused(class AActor* pActorDamaged,int nDamageAmount,class UClass* DamageType);//APBGame.cAPBPlayerController.NotifyDamageCaused
	unsigned char nativeServerItemCreate(int nInventoryItemType,struct FGuid* ItemGuid);//APBGame.cAPBPlayerController.nativeServerItemCreate
	void AddToVehicleEnterErrorArray(int I);//APBGame.cAPBPlayerController.AddToVehicleEnterErrorArray
	bool CanRespawnDeployedVehicle();//APBGame.cAPBPlayerController.CanRespawnDeployedVehicle
	void GM_ServerSetFreeCamAbsoluteAxes(bool i_bEnabled);//APBGame.cAPBPlayerController.GM_ServerSetFreeCamAbsoluteAxes
	void CreateLicence(int nSymbolSlot,int nRoyaltyFee);//APBGame.cAPBPlayerController.CreateLicence
	void NotifyExitMusicStudio();//APBGame.cAPBPlayerController.NotifyExitMusicStudio
	void ServerDebugSetThreatLevel(int nThreatLevel);//APBGame.cAPBPlayerController.ServerDebugSetThreatLevel
	void TestActivityMessagesBegin(int nTimeDelayBetweenMessages);//APBGame.cAPBPlayerController.TestActivityMessagesBegin
	void ServerLeanRightKeyDown();//APBGame.cAPBPlayerController.ServerLeanRightKeyDown
	FRotator GetCameraAimRot();//APBGame.cAPBPlayerController.GetCameraAimRot
	void ServerRequestContactStanding(int nContactID);//APBGame.cAPBPlayerController.ServerRequestContactStanding
	bool CancelMoveToPositionState(int nID);//APBGame.cAPBPlayerController.CancelMoveToPositionState
	void DebugAddMissionTimeBonus(int nTimeBonus);//APBGame.cAPBPlayerController.DebugAddMissionTimeBonus
	void ServerDebugExplosion(int Type,FVector3 ExplosionLocation);//APBGame.cAPBPlayerController.ServerDebugExplosion
	void TeamLeadershipQuestionCallback(unsigned char Answer);//APBGame.cAPBPlayerController.TeamLeadershipQuestionCallback
	void SetSubtitles(bool bValue);//APBGame.cAPBPlayerController.SetSubtitles
	void GM_ServerEndMinigame(bool i_bAll);//APBGame.cAPBPlayerController.GM_ServerEndMinigame
	bool IsInNormalLocomotionState();//APBGame.cAPBPlayerController.IsInNormalLocomotionState
	void ClientKickTeamMemberFailedDemerits();//APBGame.cAPBPlayerController.ClientKickTeamMemberFailedDemerits
	bool CanOpenCustomisationStudio();//APBGame.cAPBPlayerController.CanOpenCustomisationStudio
	void GameplayMessage(struct FString sMessage);//APBGame.cAPBPlayerController.GameplayMessage
	void ClientOnGroupMemberRemoved(int nCharacterUID);//APBGame.cAPBPlayerController.ClientOnGroupMemberRemoved
	void ReliableDoNothingClientRPC();//APBGame.cAPBPlayerController.ReliableDoNothingClientRPC
	class AcAPBVehicleBase* SpawnDeployedVehicle(FVector3 SpawnLocation,FRotator SpawnRotation);//APBGame.cAPBPlayerController.SpawnDeployedVehicle
	void ServerSummonTaskItem(struct FString i_sTaskItemVarietyName,bool i_bAsDeployable);//APBGame.cAPBPlayerController.ServerSummonTaskItem
	void GM_ServerEnqueueMinigame(struct FString i_sLocationName);//APBGame.cAPBPlayerController.GM_ServerEnqueueMinigame
	void GM_EnableSpotlight(bool bEnabled,float fBrightness,int nRadius,float InnerAngle,float OuterAngle,DWORD LightColor,float Exp);//APBGame.cAPBPlayerController.GM_EnableSpotlight
	void OnMissionStatsNotification(struct FMissionStatsPacket packet);//APBGame.cAPBPlayerController.OnMissionStatsNotification
	bool AreBotsAllowed();//APBGame.cAPBPlayerController.AreBotsAllowed
	void GM_ServerMovePlayerToGMLocation(struct FString sCharacterName);//APBGame.cAPBPlayerController.GM_ServerMovePlayerToGMLocation
	void ServerSpike(float fSpikeTimeInMS,int nNumberOfSpikeFrames);//APBGame.cAPBPlayerController.ServerSpike
	void OnCharacterRequestComplete();//APBGame.cAPBPlayerController.OnCharacterRequestComplete
	void OperateOnItemServer(unsigned char eCategory,struct FGuid nItemGuid,unsigned char eOperation,struct FString sParam);//APBGame.cAPBPlayerController.OperateOnItemServer
	void LeanInOut();//APBGame.cAPBPlayerController.LeanInOut
	void OperateOnItem(struct FString sCategory,int nInventorySlot,unsigned char eOperation,struct FString sParam);//APBGame.cAPBPlayerController.OperateOnItem
	void DebugClientTutorialResetResponse();//APBGame.cAPBPlayerController.DebugClientTutorialResetResponse
	void IgnoreMoveInput(bool bNewMoveInput);//APBGame.cAPBPlayerController.IgnoreMoveInput
	void SetMusicTrackOnBoomBox(class AcTaskItemAudioProxy* i_pBoomBox);//APBGame.cAPBPlayerController.SetMusicTrackOnBoomBox
	void ToggleLightweight();//APBGame.cAPBPlayerController.ToggleLightweight
	void Possess(class APawn* aPawn,bool bVehicleTransition);//APBGame.cAPBPlayerController.Possess
	void ServerFlythroughDestroyAllPedestrians();//APBGame.cAPBPlayerController.ServerFlythroughDestroyAllPedestrians
	class UcCompressedAssetCustomisation* GetCompressedCustomisation(unsigned char eType);//APBGame.cAPBPlayerController.GetCompressedCustomisation
	float GetCachedHeatAmount();//APBGame.cAPBPlayerController.GetCachedHeatAmount
	void SetItemStartTime(struct FString sCategory,int nInventorySlot,int nSecondsFromNow);//APBGame.cAPBPlayerController.SetItemStartTime
	void MS_LoadThemeIntoSlot(int nSlot,struct FString sThemeFile);//APBGame.cAPBPlayerController.MS_LoadThemeIntoSlot
	bool HasActiveMission();//APBGame.cAPBPlayerController.HasActiveMission
	void HandleSprinting();//APBGame.cAPBPlayerController.HandleSprinting
	void OnMissionActivityAssigned(int nActivityIndex,int nRequirement);//APBGame.cAPBPlayerController.OnMissionActivityAssigned
	void OpenUIScene(class UUIScene* Scene);//APBGame.cAPBPlayerController.OpenUIScene
	void LogExamined();//APBGame.cAPBPlayerController.LogExamined
	void GolemDestroyAllVehicles();//APBGame.cAPBPlayerController.GolemDestroyAllVehicles
	void CallServerCSAPredicted(int eCSAInputMapping,unsigned char eCSA,int aimRotation,float cameraCollidePercent,struct FPredictedADAInfo predictedADA);//APBGame.cAPBPlayerController.CallServerCSAPredicted
	void ValidateMissions();//APBGame.cAPBPlayerController.ValidateMissions
	void serverAddGroupWaypoint(FVector3 pos);//APBGame.cAPBPlayerController.serverAddGroupWaypoint
	void ServerSetAutoAssignDailyActivity(bool i_bEnable);//APBGame.cAPBPlayerController.ServerSetAutoAssignDailyActivity
	void SetPendingSpawnZone(class AcPlayerCharacterSpawnZone* PendingSpawnZone);//APBGame.cAPBPlayerController.SetPendingSpawnZone
	void OnItemCreateCallback(struct FGuid ItemGuid,unsigned char eErrorCode,DWORD pUserData);//APBGame.cAPBPlayerController.OnItemCreateCallback
	void DebugExportBrowserTexture();//APBGame.cAPBPlayerController.DebugExportBrowserTexture
	void SetTimeDebugMs(float fTimeInMs);//APBGame.cAPBPlayerController.SetTimeDebugMs
	void ServerEndInteractionState(unsigned char eState);//APBGame.cAPBPlayerController.ServerEndInteractionState
	void DebugSpectate(struct FString sCharacterNameString);//APBGame.cAPBPlayerController.DebugSpectate
	void DisplayGraffitiLineChecks();//APBGame.cAPBPlayerController.DisplayGraffitiLineChecks
	void ServerDebugSetRating(int nNewRating);//APBGame.cAPBPlayerController.ServerDebugSetRating
	void ResetVehicleUseData();//APBGame.cAPBPlayerController.ResetVehicleUseData
	void ServerFlythroughSpawnPedestrian(FVector3 pedestrianLocation,FRotator pedestrianRotation,int nMeshIndex);//APBGame.cAPBPlayerController.ServerFlythroughSpawnPedestrian
	bool IsAllowedToPerformUnstickRespawn();//APBGame.cAPBPlayerController.IsAllowedToPerformUnstickRespawn
	void MS_DeleteMemSnapshot(struct FString sName);//APBGame.cAPBPlayerController.MS_DeleteMemSnapshot
	void BeginStatePlayerSpawnWaitOnStreaming();//APBGame.cAPBPlayerController.BeginStatePlayerSpawnWaitOnStreaming
	void ServerSetTutorialsComplete(bool bComplete);//APBGame.cAPBPlayerController.ServerSetTutorialsComplete
	void ServerCancelVehicleCloseDoorState();//APBGame.cAPBPlayerController.ServerCancelVehicleCloseDoorState
	void CombineItemStackGroupServerNative(struct FDataChunk ItemStackGroupData,int nNumItemStacks);//APBGame.cAPBPlayerController.CombineItemStackGroupServerNative
	void TestMissionAllBlocks(struct FString sMissionName);//APBGame.cAPBPlayerController.TestMissionAllBlocks
	void ServerRequestCharacterStats(int nCharacterUID);//APBGame.cAPBPlayerController.ServerRequestCharacterStats
	void GM_ServerLeaveFreeCameraMode();//APBGame.cAPBPlayerController.GM_ServerLeaveFreeCameraMode
	void SubtitleTest(struct FString sTestString);//APBGame.cAPBPlayerController.SubtitleTest
	void EjectSeatSlideAnimFinished(class AcAPBPawn* PawnAnimFinished);//APBGame.cAPBPlayerController.EjectSeatSlideAnimFinished
	void DebugSetPermission(unsigned char nPermissionIndex,bool bEnabled);//APBGame.cAPBPlayerController.DebugSetPermission
	FRotator LimitVehicleViewRotation(FRotator ViewRotation,float ViewPitchMin,float ViewPitchMax);//APBGame.cAPBPlayerController.LimitVehicleViewRotation
	void SetFirstStageTargetRangeCheck(bool bEnabled);//APBGame.cAPBPlayerController.SetFirstStageTargetRangeCheck
	void SetItemExamined(struct FString eInventoryItemType,bool NewState);//APBGame.cAPBPlayerController.SetItemExamined
	void DebugAcceptVehicleSpawnDialogue();//APBGame.cAPBPlayerController.DebugAcceptVehicleSpawnDialogue
	void CameraRoll(float fCameraRoll);//APBGame.cAPBPlayerController.CameraRoll
	void BeginUIInteraction();//APBGame.cAPBPlayerController.BeginUIInteraction
	void ToggleDataStoreRefresh();//APBGame.cAPBPlayerController.ToggleDataStoreRefresh
	void SetNumVisibilityRays(int pr_nNumRays);//APBGame.cAPBPlayerController.SetNumVisibilityRays
	void ClientDeleteHUDMarker(int nServerMarkerID);//APBGame.cAPBPlayerController.ClientDeleteHUDMarker
	void ServerDeleteHUDMarker(int nServerMarkerID);//APBGame.cAPBPlayerController.ServerDeleteHUDMarker
	void TogglePlayerInfoUI();//APBGame.cAPBPlayerController.TogglePlayerInfoUI
	void FlythroughDestroyAllPedestrians();//APBGame.cAPBPlayerController.FlythroughDestroyAllPedestrians
	void GM_ServerCheckFunction(int nIndex,struct FString sString);//APBGame.cAPBPlayerController.GM_ServerCheckFunction
	void SetNumItemsInStack(struct FString sCategory,int nInventorySlot,int nNewStackSize);//APBGame.cAPBPlayerController.SetNumItemsInStack
	float GetAppSeconds();//APBGame.cAPBPlayerController.GetAppSeconds
	void ForceCriticalDamageVehicleUse();//APBGame.cAPBPlayerController.ForceCriticalDamageVehicleUse
	int PackAimRotation(FRotator aimRotation);//APBGame.cAPBPlayerController.PackAimRotation
	bool serverGetDisplayPointPositionNative(struct FGuid nDisplayPointGuid,FVector3* Position);//APBGame.cAPBPlayerController.serverGetDisplayPointPositionNative
	void ServerDebugSetConsSkillRating(float fNewConsRating);//APBGame.cAPBPlayerController.ServerDebugSetConsSkillRating
	void ServerGolemSpawnVehicle(FVector3 vehicleLocation,FRotator vehicleRotation,int nDescriptorIndex);//APBGame.cAPBPlayerController.ServerGolemSpawnVehicle
	void DebugDailyActivityDump();//APBGame.cAPBPlayerController.DebugDailyActivityDump
	void DebugTestViolation(int nType);//APBGame.cAPBPlayerController.DebugTestViolation
	void EndMailBoxInteraction();//APBGame.cAPBPlayerController.EndMailBoxInteraction
	void OnVehicleDriverEnter(class AcAPBVehicleBase* Vehicle);//APBGame.cAPBPlayerController.OnVehicleDriverEnter
	void SetVerbosityMissionManager(unsigned char NewValue);//APBGame.cAPBPlayerController.SetVerbosityMissionManager
	void OnExitInteractionUI(unsigned char eState);//APBGame.cAPBPlayerController.OnExitInteractionUI
	void ServerCameraViewTarget(struct FString sActorName,bool bAttachCamera);//APBGame.cAPBPlayerController.ServerCameraViewTarget
	void KickTeamMember(struct FString PlayerName);//APBGame.cAPBPlayerController.KickTeamMember
	void SetWantsToEnterMarksManShipMode(bool bWantsToEnterMarksManShipMode);//APBGame.cAPBPlayerController.SetWantsToEnterMarksManShipMode
	void ClientDailyActivitiesCycled();//APBGame.cAPBPlayerController.ClientDailyActivitiesCycled
	void SetPushToTalkOff();//APBGame.cAPBPlayerController.SetPushToTalkOff
	void SelectRandomSpawnZone(unsigned char eFaction);//APBGame.cAPBPlayerController.SelectRandomSpawnZone
	void ToggleDebugWeaponInfo();//APBGame.cAPBPlayerController.ToggleDebugWeaponInfo
	void SetToDPeriod(unsigned char ePeriod);//APBGame.cAPBPlayerController.SetToDPeriod
	void PrevWeapon();//APBGame.cAPBPlayerController.PrevWeapon
	void CloseDoorAnimFinished(class AcAPBPawn* PawnAnimFinished);//APBGame.cAPBPlayerController.CloseDoorAnimFinished
	void ServerSetToD(int nHours,int nMins);//APBGame.cAPBPlayerController.ServerSetToD
	void SetCameraAimRot(FRotator NewRot);//APBGame.cAPBPlayerController.SetCameraAimRot
	void InputToggleDuck();//APBGame.cAPBPlayerController.InputToggleDuck
	void StopPingTimer(float pr_fClientAvgFrameTime,float pr_fServerAvgFrameTime);//APBGame.cAPBPlayerController.StopPingTimer
	void ServerDeployNewCar();//APBGame.cAPBPlayerController.ServerDeployNewCar
	void clientOnAddGroupWaypointComplete(int nMarkerID);//APBGame.cAPBPlayerController.clientOnAddGroupWaypointComplete
	void Destroyed();//APBGame.cAPBPlayerController.Destroyed
	void ServerProcessAClientShout();//APBGame.cAPBPlayerController.ServerProcessAClientShout
	void ServerSendPingRequest();//APBGame.cAPBPlayerController.ServerSendPingRequest
	void ClientReceiveOppositionID(int i_nOppositionTeamID,bool i_bFirst,bool i_bLast);//APBGame.cAPBPlayerController.ClientReceiveOppositionID
	void ClientReceiveCharacterData(struct FCharacterData playerCharacterData);//APBGame.cAPBPlayerController.ClientReceiveCharacterData
	void ServerMissionEvaluate(int bAnswer);//APBGame.cAPBPlayerController.ServerMissionEvaluate
	bool CancelAllCSAServer();//APBGame.cAPBPlayerController.CancelAllCSAServer
	void ClientOnMissionEnded();//APBGame.cAPBPlayerController.ClientOnMissionEnded
	void DebugTeleportPedestrianServer(int TargetX,int TargetY,int TargetZ);//APBGame.cAPBPlayerController.DebugTeleportPedestrianServer
	void ClientReplicateHUDMarker(struct FHUDMarkerData markerData,int nServerMarkerID);//APBGame.cAPBPlayerController.ClientReplicateHUDMarker
	void OnArrestedChanged(bool bIsArrested);//APBGame.cAPBPlayerController.OnArrestedChanged
	void DebugTutorialReset();//APBGame.cAPBPlayerController.DebugTutorialReset
	bool CanBuyAmmoAmount(int eCategory,int nAmount);//APBGame.cAPBPlayerController.CanBuyAmmoAmount
	struct FString RetCharacterNameScript();//APBGame.cAPBPlayerController.RetCharacterNameScript
	void DebugDailyActivitySet(struct FString i_sContact,struct FString i_sDailyActivity);//APBGame.cAPBPlayerController.DebugDailyActivitySet
	void DumpContactList();//APBGame.cAPBPlayerController.DumpContactList
	void DebugReallocateTarget(int nStageIndex,int nTargetIndex);//APBGame.cAPBPlayerController.DebugReallocateTarget
	void ClientNotifyUnstickRespawnStateChange(bool bUnstickRespawnInProgress);//APBGame.cAPBPlayerController.ClientNotifyUnstickRespawnStateChange
	void ServerSetViewTarget(class AActor* A,bool bUseAttachedToActorCamera,struct FViewTargetTransitionParams TransitionParams);//APBGame.cAPBPlayerController.ServerSetViewTarget
	void ServerNotifyExitSymbolEditor();//APBGame.cAPBPlayerController.ServerNotifyExitSymbolEditor
	void ClientIllegalLocation(bool bPawn);//APBGame.cAPBPlayerController.ClientIllegalLocation
	float GetRollRotationDelta(float fDeltaTime);//APBGame.cAPBPlayerController.GetRollRotationDelta
	void SetItemExaminedServer(struct FString eInventoryItemType,bool NewState);//APBGame.cAPBPlayerController.SetItemExaminedServer
	void GM_MovePlayerToGMLocation(struct FString sCharacterName);//APBGame.cAPBPlayerController.GM_MovePlayerToGMLocation
	void ServerNetSet(struct FString Command);//APBGame.cAPBPlayerController.ServerNetSet
	void RestartSelf();//APBGame.cAPBPlayerController.RestartSelf
	void NotifyUnstickRespawnTimerElapsed();//APBGame.cAPBPlayerController.NotifyUnstickRespawnTimerElapsed
	void ServerSetPreferredTaskTargetNative(struct FString sName,bool bPreferred);//APBGame.cAPBPlayerController.ServerSetPreferredTaskTargetNative
	void ResetItemAvailabilities();//APBGame.cAPBPlayerController.ResetItemAvailabilities
	void SetSprint(unsigned char nSprint);//APBGame.cAPBPlayerController.SetSprint
	void ServerSetCanTargetAll(bool NewState);//APBGame.cAPBPlayerController.ServerSetCanTargetAll
	class AcAPBVehicleBase* RetDeployedVehicle();//APBGame.cAPBPlayerController.RetDeployedVehicle
	void ClientShowVoteToGroupOnMissionEnd();//APBGame.cAPBPlayerController.ClientShowVoteToGroupOnMissionEnd
	void DebugDailyActivityComplete();//APBGame.cAPBPlayerController.DebugDailyActivityComplete
	void ServerRequestOtherPlayerCustomisation(int nCharacterUID,int nUserData);//APBGame.cAPBPlayerController.ServerRequestOtherPlayerCustomisation
	void ServerDebugSetMaxSafeHeight(float fNewHeight);//APBGame.cAPBPlayerController.ServerDebugSetMaxSafeHeight
	void DisableTargetAll();//APBGame.cAPBPlayerController.DisableTargetAll
	bool clientItemCreate(int nInventoryItemType,struct FScriptDelegate OnCreateCallback,DWORD pUserData,TArray<unsigned char> aData);//APBGame.cAPBPlayerController.clientItemCreate
	void ResaveAllEmitters();//APBGame.cAPBPlayerController.ResaveAllEmitters
	void ServerNotifyEnterSymbolEditor();//APBGame.cAPBPlayerController.ServerNotifyEnterSymbolEditor
	void ClientNotifyDynamicHit(int nShotID,struct FSharedHitData sharedHitDataParam,struct FDynamicHitData dynamicHitDataParam,bool bLocal);//APBGame.cAPBPlayerController.ClientNotifyDynamicHit
	void ServerRequestCharacterRolesData(int nCharacterUID);//APBGame.cAPBPlayerController.ServerRequestCharacterRolesData
	void DebugDailyActivityReset();//APBGame.cAPBPlayerController.DebugDailyActivityReset
	bool IsGM_InvulnerabilityEnabled();//APBGame.cAPBPlayerController.IsGM_InvulnerabilityEnabled
	void LoadCharacterStateServerNative(struct FString Filename);//APBGame.cAPBPlayerController.LoadCharacterStateServerNative
	void ServerSetHealthRechargeDuration(float Health,float Stamina);//APBGame.cAPBPlayerController.ServerSetHealthRechargeDuration
	void MS_GenericCommand2(struct FString sCommand,struct FString sParam1,struct FString sParam2);//APBGame.cAPBPlayerController.MS_GenericCommand2
	void ServerLogActorPosition(struct FString sActorName);//APBGame.cAPBPlayerController.ServerLogActorPosition
	void LogModifiersNative();//APBGame.cAPBPlayerController.LogModifiersNative
	void ServerDebugSetMissionTimer(int newTimeInSeconds);//APBGame.cAPBPlayerController.ServerDebugSetMissionTimer
	void DebugPayForHeat(int nNewLevel);//APBGame.cAPBPlayerController.DebugPayForHeat
	void ClientSetElectiveVehicleSpawnTimer();//APBGame.cAPBPlayerController.ClientSetElectiveVehicleSpawnTimer
	void ServerExitCustomisationStudio(int eCustomisationEditor);//APBGame.cAPBPlayerController.ServerExitCustomisationStudio
	void GM_ServerToggleInvisibilityNative();//APBGame.cAPBPlayerController.GM_ServerToggleInvisibilityNative
	bool FindSuccessInVehicleEnterErrorArray();//APBGame.cAPBPlayerController.FindSuccessInVehicleEnterErrorArray
	void ResetReuseGroups();//APBGame.cAPBPlayerController.ResetReuseGroups
	void GM_ServerSetFreeCameraDirector(bool i_bEnabled);//APBGame.cAPBPlayerController.GM_ServerSetFreeCameraDirector
	bool IncrementCash(int Amount);//APBGame.cAPBPlayerController.IncrementCash
	void ServerCSAKeyPressed(int eCSAInputMapping,int aimRotation,float cameraCollidePercent,class AActor* pTargetedActor);//APBGame.cAPBPlayerController.ServerCSAKeyPressed
	void ToggleTaskMarkerHUD_GroupMembers();//APBGame.cAPBPlayerController.ToggleTaskMarkerHUD_GroupMembers
	void ScriptIgnoreMoveInput(bool bNewMoveInput);//APBGame.cAPBPlayerController.ScriptIgnoreMoveInput
	void EnableRespawnAtCamera(bool bAllow);//APBGame.cAPBPlayerController.EnableRespawnAtCamera
	int GetNumOpposingTeams();//APBGame.cAPBPlayerController.GetNumOpposingTeams
	bool CalculateAutoRouteToPositionAndRotation(FVector3* AutoRouteToPosition,FRotator* AutoRouteToRotation);//APBGame.cAPBPlayerController.CalculateAutoRouteToPositionAndRotation
	void serverDeleteGroupWaypoint(int nMarkerID);//APBGame.cAPBPlayerController.serverDeleteGroupWaypoint
	void TestActivityMessagesAllCallback();//APBGame.cAPBPlayerController.TestActivityMessagesAllCallback
	void DebugClientShowMinigameTarget(FVector3 i_vLocation);//APBGame.cAPBPlayerController.DebugClientShowMinigameTarget
	void SummonDisplayPointTokenNative(struct FString sDisplayPointName,int nStartTime,int nDuration);//APBGame.cAPBPlayerController.SummonDisplayPointTokenNative
	void MS_LoadThemeFromFile(struct FString Filename);//APBGame.cAPBPlayerController.MS_LoadThemeFromFile
	void OnOpenRespawnTransitionScreen();//APBGame.cAPBPlayerController.OnOpenRespawnTransitionScreen
	void ToggleDrawConcaveOutlines();//APBGame.cAPBPlayerController.ToggleDrawConcaveOutlines
	class UcObservers* GetObservers();//APBGame.cAPBPlayerController.GetObservers
	void EndMissionServer(struct FString how);//APBGame.cAPBPlayerController.EndMissionServer
	void SetCachedHeatAmount(float HeatAmount);//APBGame.cAPBPlayerController.SetCachedHeatAmount
	void GM_ServerSetRunSpeedNative(float fSpeed);//APBGame.cAPBPlayerController.GM_ServerSetRunSpeedNative
	float GetVehicleEnterSpeedHoldOnToDoor();//APBGame.cAPBPlayerController.GetVehicleEnterSpeedHoldOnToDoor
	void ClientMissionSummaryNotification(struct FMissionSummaryPacket packet);//APBGame.cAPBPlayerController.ClientMissionSummaryNotification
	bool DecrementCash(int Amount);//APBGame.cAPBPlayerController.DecrementCash
	void ValidateMissionsServerNative();//APBGame.cAPBPlayerController.ValidateMissionsServerNative
	void DebugReallocateTargetServer(int nStageIndex,int nTargetIndex);//APBGame.cAPBPlayerController.DebugReallocateTargetServer
	int GetTeamID();//APBGame.cAPBPlayerController.GetTeamID
	void SetMusicTrackOnBoomBoxes();//APBGame.cAPBPlayerController.SetMusicTrackOnBoomBoxes
	void TriggerDistrictMapTutorialEvent();//APBGame.cAPBPlayerController.TriggerDistrictMapTutorialEvent
	void DebugClientRemoveDailyActivity(int i_eDailyActivity);//APBGame.cAPBPlayerController.DebugClientRemoveDailyActivity
	void SetCrouchSpeed(float fNewCrouchSpeed);//APBGame.cAPBPlayerController.SetCrouchSpeed
	void FillEquippedWeapon();//APBGame.cAPBPlayerController.FillEquippedWeapon
	void ClientDebugSetPermissionMask(struct FQWord nPermissionMask);//APBGame.cAPBPlayerController.ClientDebugSetPermissionMask
	void ServerNotifyCustomisationUploadComplete(unsigned char eType);//APBGame.cAPBPlayerController.ServerNotifyCustomisationUploadComplete
	void ClientNotifyReportPlayerResult(bool i_bResult);//APBGame.cAPBPlayerController.ClientNotifyReportPlayerResult
	void SwitchVehicleSetup(struct FString NewVehicleSetup);//APBGame.cAPBPlayerController.SwitchVehicleSetup
	void GM_EndMission(struct FString sEndType,struct FString sCharacterName);//APBGame.cAPBPlayerController.GM_EndMission
	void ClientResponseItemAssets(int nNumFileLengths,int* aHashes,int* aLengths);//APBGame.cAPBPlayerController.ClientResponseItemAssets
	bool IsNoPenaltyRespawning();//APBGame.cAPBPlayerController.IsNoPenaltyRespawning
	void ClientTeleport(FVector3 NewLocation);//APBGame.cAPBPlayerController.ClientTeleport
	void ServerMove(double TimeStamp,FVector3 InAccel,FVector3 ClientLoc,unsigned char MoveFlags,unsigned char ClientRoll,int View);//APBGame.cAPBPlayerController.ServerMove
	void TestActivityMessagesEnd();//APBGame.cAPBPlayerController.TestActivityMessagesEnd
	void UnlockAllItems();//APBGame.cAPBPlayerController.UnlockAllItems
	void DebugMapSizeIncrement();//APBGame.cAPBPlayerController.DebugMapSizeIncrement
	void SetTestMarkerRelevant(bool bRelevant);//APBGame.cAPBPlayerController.SetTestMarkerRelevant
	void SetCachedHeatLevel(int HeatLevel);//APBGame.cAPBPlayerController.SetCachedHeatLevel
	void ClientAddHUDMessage(struct FString sMessage);//APBGame.cAPBPlayerController.ClientAddHUDMessage
	void ClientIllegalLocation_APB(struct FString sErrorMessage);//APBGame.cAPBPlayerController.ClientIllegalLocation_APB
	void NotifyReloadFX(class AcAPBPawn* reloader);//APBGame.cAPBPlayerController.NotifyReloadFX
	void ToggleHUD();//APBGame.cAPBPlayerController.ToggleHUD
	float GM_RetRunSpeed();//APBGame.cAPBPlayerController.GM_RetRunSpeed
	void CSAKeyPressed(struct FString sCSAInputMapping);//APBGame.cAPBPlayerController.CSAKeyPressed
	void SetHeatAmountServerNative(int NewValue);//APBGame.cAPBPlayerController.SetHeatAmountServerNative
	void Rescue();//APBGame.cAPBPlayerController.Rescue
	void OpenSlashQuickChat();//APBGame.cAPBPlayerController.OpenSlashQuickChat
	void ResetItemAvailabilitiesServerNative();//APBGame.cAPBPlayerController.ResetItemAvailabilitiesServerNative
	void ServerRequestCustomisation(struct FGuid TheGuid);//APBGame.cAPBPlayerController.ServerRequestCustomisation
	void ServerPrintNumSpawnZones();//APBGame.cAPBPlayerController.ServerPrintNumSpawnZones
	bool DoChatFloodCheckForNewMessage();//APBGame.cAPBPlayerController.DoChatFloodCheckForNewMessage
	void OnMissionGroupMembersNotification(struct FMissionSideMembersPacket packet);//APBGame.cAPBPlayerController.OnMissionGroupMembersNotification
	void GM_ClientInspect(class AcAPBPawn* aPawn);//APBGame.cAPBPlayerController.GM_ClientInspect
	void ServerSetControllerPos(FVector3 vNewPos);//APBGame.cAPBPlayerController.ServerSetControllerPos
	void ClientScorerKillNotification(struct FScorerKillNotificationPacket packet);//APBGame.cAPBPlayerController.ClientScorerKillNotification
	void CallServerCSAKeyReleased(int eCSAInputMapping);//APBGame.cAPBPlayerController.CallServerCSAKeyReleased
	void ExecClosePopupDialog();//APBGame.cAPBPlayerController.ExecClosePopupDialog
	void TestPersistenceServerNative(int numTests);//APBGame.cAPBPlayerController.TestPersistenceServerNative
	void OnMedalsNotification(struct FMedalsPacket packet);//APBGame.cAPBPlayerController.OnMedalsNotification
	void ClearVehicleEnterErrorArray();//APBGame.cAPBPlayerController.ClearVehicleEnterErrorArray
	void OnUnconsicousChanged(bool bIsUnconscious);//APBGame.cAPBPlayerController.OnUnconsicousChanged
	void FillAllEquippedWeapons();//APBGame.cAPBPlayerController.FillAllEquippedWeapons
	void ServerGolemDestroyAllCharacters();//APBGame.cAPBPlayerController.ServerGolemDestroyAllCharacters
	void NotifyIsCustomising(bool IsCustomising);//APBGame.cAPBPlayerController.NotifyIsCustomising
	void DebugIncrementOpenWorldCash(int Amount);//APBGame.cAPBPlayerController.DebugIncrementOpenWorldCash
	void ClientCallForBackup();//APBGame.cAPBPlayerController.ClientCallForBackup
	void DisableShowVehicleSockets();//APBGame.cAPBPlayerController.DisableShowVehicleSockets
	class AActor* RetCurrentTarget();//APBGame.cAPBPlayerController.RetCurrentTarget
	void DebugPrintMissionDebugInfo();//APBGame.cAPBPlayerController.DebugPrintMissionDebugInfo
	void ClientSetPlayerVelocityZero();//APBGame.cAPBPlayerController.ClientSetPlayerVelocityZero
	void ServerLeanInOut();//APBGame.cAPBPlayerController.ServerLeanInOut
	void ClientOnGroupJoined(struct FGroupPacket packet);//APBGame.cAPBPlayerController.ClientOnGroupJoined
	void LeanRightKeyDown();//APBGame.cAPBPlayerController.LeanRightKeyDown
	void ClientSpawnZoneUnelected(int i_nHUDMarkerID);//APBGame.cAPBPlayerController.ClientSpawnZoneUnelected
	void HandleWalking();//APBGame.cAPBPlayerController.HandleWalking
	void SetAimRotation(int aimRotation,float cameraCollidePercent);//APBGame.cAPBPlayerController.SetAimRotation
	void MusicStudioDataStream_ServerMultiChunkDataBegin(int streamId,int nDataSize);//APBGame.cAPBPlayerController.MusicStudioDataStream_ServerMultiChunkDataBegin
	void ClientNotifyEnforcerWitness(double fServerTimestamp,int nWitnessedCharacterUID);//APBGame.cAPBPlayerController.ClientNotifyEnforcerWitness
	void CameraRemoveAPBScreenShake(int nAPBScreenShake);//APBGame.cAPBPlayerController.CameraRemoveAPBScreenShake
	void SaveOutline();//APBGame.cAPBPlayerController.SaveOutline
	void ServerPawnTakeDamage(int DamageAmount,class UClass* DamageType);//APBGame.cAPBPlayerController.ServerPawnTakeDamage
	void VehicleMovementKeyIsDownOnServer();//APBGame.cAPBPlayerController.VehicleMovementKeyIsDownOnServer
	void EnableTargetAll();//APBGame.cAPBPlayerController.EnableTargetAll
	void ToggleCharacterInspectUI();//APBGame.cAPBPlayerController.ToggleCharacterInspectUI
	void StartMissionServerNative(struct FString sMissionName,int nRandomSeed,bool bApplyFilters);//APBGame.cAPBPlayerController.StartMissionServerNative
	void Spike(float fSpikeTimeInMS,int nNumberOfSpikeFrames);//APBGame.cAPBPlayerController.Spike
	void ClientSetInitialState(int nCharacterUID,unsigned char Faction,unsigned char Gender);//APBGame.cAPBPlayerController.ClientSetInitialState
	void UpdateTimeDebug(bool bUpdate);//APBGame.cAPBPlayerController.UpdateTimeDebug
	void ServerDestroyTestMarker();//APBGame.cAPBPlayerController.ServerDestroyTestMarker
	void serverGetDisplayPointPosition(struct FGuid nDisplayPointGuid);//APBGame.cAPBPlayerController.serverGetDisplayPointPosition
	void GM_TogglePB();//APBGame.cAPBPlayerController.GM_TogglePB
	void PlayCameraShakePreset(int Preset);//APBGame.cAPBPlayerController.PlayCameraShakePreset
	void ServerSetDebugOpenCustomisation(bool bOpen);//APBGame.cAPBPlayerController.ServerSetDebugOpenCustomisation
	void InvertMouse(bool bInvert);//APBGame.cAPBPlayerController.InvertMouse
	void ClientSetTutorialsComplete(bool bComplete);//APBGame.cAPBPlayerController.ClientSetTutorialsComplete
	void UpdateClientUnlockedContactsList();//APBGame.cAPBPlayerController.UpdateClientUnlockedContactsList
	void CameraAlwaysHideLocalActor(bool bAlwaysHideLocalActor);//APBGame.cAPBPlayerController.CameraAlwaysHideLocalActor
	void GM_StartMission(struct FString sMissionName,struct FString sCharacterNames);//APBGame.cAPBPlayerController.GM_StartMission
	void GolemSpawnCharacter(float characterLocationX,float characterLocationY,float characterLocationZ,int characterRotationPitch,int characterRotationYaw,int characterRotationRoll,int nDescriptorIndex,struct FString emoteName,bool bPlayEmote);//APBGame.cAPBPlayerController.GolemSpawnCharacter
	void DestroyTestMarker();//APBGame.cAPBPlayerController.DestroyTestMarker
	void ClientPrecacheCustomisation(struct FGuid TheGuid,unsigned char eType,bool bLocalPlayer);//APBGame.cAPBPlayerController.ClientPrecacheCustomisation
	void NotifyBeginFireWeapon(class AcWeapon* pWeapon);//APBGame.cAPBPlayerController.NotifyBeginFireWeapon
	void clientOnItemCreated(struct FGuid ItemGuid,unsigned char eErrorCode);//APBGame.cAPBPlayerController.clientOnItemCreated
	void Arrest();//APBGame.cAPBPlayerController.Arrest
	void MS_PlayCharacterUIDTheme(int nCharacterUID);//APBGame.cAPBPlayerController.MS_PlayCharacterUIDTheme
	void CallClientGotoState(struct FName NewState,struct FName NewLabel);//APBGame.cAPBPlayerController.CallClientGotoState
	void ClientUploadCustomisationData(unsigned char eType,int nBaseIndex);//APBGame.cAPBPlayerController.ClientUploadCustomisationData
	void SummonContactRewardServer(struct FString sContactLevel);//APBGame.cAPBPlayerController.SummonContactRewardServer
	bool IsDisplayDistrictEntryScreen();//APBGame.cAPBPlayerController.IsDisplayDistrictEntryScreen
	void UnapplyModifier(struct FString sCategory,int nInventorySlot,int nSlotIndex);//APBGame.cAPBPlayerController.UnapplyModifier
	void SetPushForPrivacyOff();//APBGame.cAPBPlayerController.SetPushForPrivacyOff
	void OnServerRequestContactStanding(int nContactID);//APBGame.cAPBPlayerController.OnServerRequestContactStanding
	void ClientOnGroupMemberAddedNative(struct FGroupMember newMember);//APBGame.cAPBPlayerController.ClientOnGroupMemberAddedNative
	void ServerReplicateHUDMarkerText(int nServerMarkerID);//APBGame.cAPBPlayerController.ServerReplicateHUDMarkerText
	void SetWalkSpeed(float fNewWalkSpeed);//APBGame.cAPBPlayerController.SetWalkSpeed
	void MS_PlayFromFile(struct FString sThemeFile);//APBGame.cAPBPlayerController.MS_PlayFromFile
	void OnOperateOnItemCallback(int eErr,struct FGuid ItemGuid,unsigned char eOperation,DWORD pUserData);//APBGame.cAPBPlayerController.OnOperateOnItemCallback
	void TestMapSelectScreen();//APBGame.cAPBPlayerController.TestMapSelectScreen
	void SetOppositionServerNative(struct FString Who);//APBGame.cAPBPlayerController.SetOppositionServerNative
	bool CalculateDestinationPositionAndRotationAutoMoveToCSAPositionState(FVector3* DestinationPosition,FRotator* DestinationRotation);//APBGame.cAPBPlayerController.CalculateDestinationPositionAndRotationAutoMoveToCSAPositionState
	void ServerGolemSpawnVehicleAtPlayerLocation(int nDescriptorIndex);//APBGame.cAPBPlayerController.ServerGolemSpawnVehicleAtPlayerLocation
	void StartPingTimer();//APBGame.cAPBPlayerController.StartPingTimer
	void ProcessMoveAutoMoveToPositionState(float DeltaRot,FVector3* outNewAccel);//APBGame.cAPBPlayerController.ProcessMoveAutoMoveToPositionState
	void ServerSetSpawnExcluded(bool bSpawnExcluded);//APBGame.cAPBPlayerController.ServerSetSpawnExcluded
	void NotifyKilled(class AController* Killer,class AController* Killed,class APawn* KilledPawn);//APBGame.cAPBPlayerController.NotifyKilled
	void SetBotDetectionEventsTime(int Seconds);//APBGame.cAPBPlayerController.SetBotDetectionEventsTime
	void ClientGMMessage(struct FString pr_sMessage,unsigned char pr_ePermissionRequired,int pr_nDisplayTime);//APBGame.cAPBPlayerController.ClientGMMessage
	void PrintToD();//APBGame.cAPBPlayerController.PrintToD
	void OpenQuickChat();//APBGame.cAPBPlayerController.OpenQuickChat
	void UpdateServerTimeStampHistory(double fNewTimeStamp);//APBGame.cAPBPlayerController.UpdateServerTimeStampHistory
	void SellItemToVendor(struct FString sCategory,int nInventorySlot);//APBGame.cAPBPlayerController.SellItemToVendor
	void ServerSetCameraModeFOV(unsigned char CameraModeChange,unsigned char ViewPortUse,float FOV);//APBGame.cAPBPlayerController.ServerSetCameraModeFOV
	void EnableRespawnInVehicle(bool bAllow);//APBGame.cAPBPlayerController.EnableRespawnInVehicle
	void TestCSA(unsigned char eCSA,float fDuration);//APBGame.cAPBPlayerController.TestCSA
	void RenderDebugPage(class UCanvas* Canvas);//APBGame.cAPBPlayerController.RenderDebugPage
	void ClientResetPendingCSA(unsigned char eCSAState);//APBGame.cAPBPlayerController.ClientResetPendingCSA
	void MetagroupingVoteAnswer(unsigned char Answer);//APBGame.cAPBPlayerController.MetagroupingVoteAnswer
	void OnMissionActivityProgressUpdate(int nProgress);//APBGame.cAPBPlayerController.OnMissionActivityProgressUpdate
	void LogInventoryServer(int Type);//APBGame.cAPBPlayerController.LogInventoryServer
	void StartAltFire(unsigned char FireModeNum);//APBGame.cAPBPlayerController.StartAltFire
	void SetTrackedActivity(struct FString trackedActivityRowName,int nValue);//APBGame.cAPBPlayerController.SetTrackedActivity
	void ServerGolemSpawnCharacterAtPlayerLocation(int nDescriptorIndex);//APBGame.cAPBPlayerController.ServerGolemSpawnCharacterAtPlayerLocation
	void ServerAcceptVehicleSpawnDialogue();//APBGame.cAPBPlayerController.ServerAcceptVehicleSpawnDialogue
	void ServerLeanLeftKeyDown();//APBGame.cAPBPlayerController.ServerLeanLeftKeyDown
	void DebugTeleportPedestrian(int TargetX,int TargetY,int TargetZ);//APBGame.cAPBPlayerController.DebugTeleportPedestrian
	void AlwaysAccessInventory(bool NewState);//APBGame.cAPBPlayerController.AlwaysAccessInventory
	void SetToD(int nHours,int nMins);//APBGame.cAPBPlayerController.SetToD
	void ClientRemoveTutorialWaypoint();//APBGame.cAPBPlayerController.ClientRemoveTutorialWaypoint
	void ClientReceiveCharacterInfo(struct FCharacterInfoPacket packet);//APBGame.cAPBPlayerController.ClientReceiveCharacterInfo
	void OnCloseRespawnTransitionScreen();//APBGame.cAPBPlayerController.OnCloseRespawnTransitionScreen
	bool IsInSymbolEditor();//APBGame.cAPBPlayerController.IsInSymbolEditor
	void SummonReward(struct FString sRewardPackageName);//APBGame.cAPBPlayerController.SummonReward
	void DebugChangeMapCentre(float fX,float fY,float fZ);//APBGame.cAPBPlayerController.DebugChangeMapCentre
	void ClientDebugSetMaxSafeHeightTimer(float fNewDuration);//APBGame.cAPBPlayerController.ClientDebugSetMaxSafeHeightTimer
	void DebugServerTutorialCompleteAll();//APBGame.cAPBPlayerController.DebugServerTutorialCompleteAll
	void ShowAllCheckpoints(bool bShow);//APBGame.cAPBPlayerController.ShowAllCheckpoints
	void ServerNotifyEnterMusicStudio();//APBGame.cAPBPlayerController.ServerNotifyEnterMusicStudio
	void DebugRefreshCollision();//APBGame.cAPBPlayerController.DebugRefreshCollision
	void FlythroughSpawnVehicle(float vehicleLocationX,float vehicleLocationY,float vehicleLocationZ,int vehicleRotationPitch,int vehicleRotationYaw,int vehicleRotationRoll,int nMeshIndex);//APBGame.cAPBPlayerController.FlythroughSpawnVehicle
	void OnServerCustomizationRequestFinished(struct FGuid TheGuid);//APBGame.cAPBPlayerController.OnServerCustomizationRequestFinished
	void CopyItem(struct FString sCategory,int nInventorySlot,int nNumCopies);//APBGame.cAPBPlayerController.CopyItem
	void ClientSetSpawnedBefore();//APBGame.cAPBPlayerController.ClientSetSpawnedBefore
	int RetLastValidPawnViewTargetUID();//APBGame.cAPBPlayerController.RetLastValidPawnViewTargetUID
	void DebugMapSizeDecrement();//APBGame.cAPBPlayerController.DebugMapSizeDecrement
	void ServerStopLCVehicles();//APBGame.cAPBPlayerController.ServerStopLCVehicles
	void ServerDamageActor(int nDamageAmount);//APBGame.cAPBPlayerController.ServerDamageActor
	void DebugServerDailyActivitySet(int i_eDailyActivity);//APBGame.cAPBPlayerController.DebugServerDailyActivitySet
	void DebugDecrementOpenWorldCash(int Amount);//APBGame.cAPBPlayerController.DebugDecrementOpenWorldCash
	void GolemSpawnCharacterAtPlayerLocation(int nDescriptorIndex);//APBGame.cAPBPlayerController.GolemSpawnCharacterAtPlayerLocation
	void ClientActivateFallbackSpawnZone(int i_nFallbackHUDMarkerID);//APBGame.cAPBPlayerController.ClientActivateFallbackSpawnZone
	void OpenConsoleCommands();//APBGame.cAPBPlayerController.OpenConsoleCommands
	void PawnTakeStaminaDamage(int DamageAmount);//APBGame.cAPBPlayerController.PawnTakeStaminaDamage
	void LogActorPosition(struct FName sActorName);//APBGame.cAPBPlayerController.LogActorPosition
	bool ClientPredictADA(int eCSAInputMapping);//APBGame.cAPBPlayerController.ClientPredictADA
	void SetMetagroupingInterval(int newTimeInSeconds);//APBGame.cAPBPlayerController.SetMetagroupingInterval
	void CloseMainMenu();//APBGame.cAPBPlayerController.CloseMainMenu
	void GM_ClientNotifyTeleportedByGM();//APBGame.cAPBPlayerController.GM_ClientNotifyTeleportedByGM
	void ServerArrest();//APBGame.cAPBPlayerController.ServerArrest
	void PossessGolemSpawnerActor();//APBGame.cAPBPlayerController.PossessGolemSpawnerActor
	bool CanBeginCSA(unsigned char eCSA,class AActor* InteractiveActor,int nIPIndex);//APBGame.cAPBPlayerController.CanBeginCSA
	void OnOpenWorldCashChanged();//APBGame.cAPBPlayerController.OnOpenWorldCashChanged
	void ServerSetCameraModeOffsets(unsigned char CameraModeChange,float fBackAdjust,float fHeightAdjust,float fRightAdjust,float fRightAdjustPitchScalar,unsigned char ViewPortUse,bool bPrimaryAdjustments);//APBGame.cAPBPlayerController.ServerSetCameraModeOffsets
	struct FGuid RetDeployedThemeGuid();//APBGame.cAPBPlayerController.RetDeployedThemeGuid
	void BackwardMovementKeyDown();//APBGame.cAPBPlayerController.BackwardMovementKeyDown
	void ServerMoveToPositionNoMovementTimer();//APBGame.cAPBPlayerController.ServerMoveToPositionNoMovementTimer
	void ServerTestTaskItemSpawning(int nNum,struct FString sTaskItemVarietyName);//APBGame.cAPBPlayerController.ServerTestTaskItemSpawning
	void RightMovementKeyDown();//APBGame.cAPBPlayerController.RightMovementKeyDown
	void ServerRequestOtherPlayerContactStanding(int nCharacterUID,int nContactID);//APBGame.cAPBPlayerController.ServerRequestOtherPlayerContactStanding
	void DebugPledgeServerNative(struct FString contactName);//APBGame.cAPBPlayerController.DebugPledgeServerNative
	bool AttemptToAbandonCSA();//APBGame.cAPBPlayerController.AttemptToAbandonCSA
	bool CancelCSAInputType(unsigned char eInputType,int eCSAInputMapping);//APBGame.cAPBPlayerController.CancelCSAInputType
	void NewServerDrive(double TimeStamp,unsigned char Inputs);//APBGame.cAPBPlayerController.NewServerDrive
	void GM_ServerSetToD(int pr_nHours,int pr_nMins);//APBGame.cAPBPlayerController.GM_ServerSetToD
	void ServerCameraModeOriginLagSpeed(unsigned char CameraModeChange,float fLagSpeed);//APBGame.cAPBPlayerController.ServerCameraModeOriginLagSpeed
	void GM_ServerEnterFreeCameraMode();//APBGame.cAPBPlayerController.GM_ServerEnterFreeCameraMode
	void ClientSetGroupLeader(int nCharacterUID);//APBGame.cAPBPlayerController.ClientSetGroupLeader
	void GM_ResetRunSpeed();//APBGame.cAPBPlayerController.GM_ResetRunSpeed
	void CombineItemStackGroup(TArray<struct FGuid> ItemStackGroup);//APBGame.cAPBPlayerController.CombineItemStackGroup
	bool IsLookInputIgnored();//APBGame.cAPBPlayerController.IsLookInputIgnored
	void OpenScene(class UUIScene* Scene);//APBGame.cAPBPlayerController.OpenScene
	void DebugRemoteContactInteraction(struct FString contactName);//APBGame.cAPBPlayerController.DebugRemoteContactInteraction
	void CallNewServerDrive(double TimeStamp,unsigned char Inputs);//APBGame.cAPBPlayerController.CallNewServerDrive
	void DebugServerDailyActivityCycle();//APBGame.cAPBPlayerController.DebugServerDailyActivityCycle
	void DebugSetWeaponLoadout(struct FString sLoadoutName);//APBGame.cAPBPlayerController.DebugSetWeaponLoadout
	void GM_EnterFreeCameraMode();//APBGame.cAPBPlayerController.GM_EnterFreeCameraMode
	class AcFlythroughSpawnerActor* GetFlythroughSpawnerActor();//APBGame.cAPBPlayerController.GetFlythroughSpawnerActor
	void ServerCustomisationLimiterUse(unsigned char bUse);//APBGame.cAPBPlayerController.ServerCustomisationLimiterUse
	void ClientCancelVehicleCloseDoorState();//APBGame.cAPBPlayerController.ClientCancelVehicleCloseDoorState
	void InitFlythroughSpawnerActor(int nNumPedestrianAssetsToCache,int nOffset);//APBGame.cAPBPlayerController.InitFlythroughSpawnerActor
	void MS_LoadSongIntoSlot(int nSlot,struct FString sThemeFile);//APBGame.cAPBPlayerController.MS_LoadSongIntoSlot
	void ClientAtAutoReachedPositionServer(int nID);//APBGame.cAPBPlayerController.ClientAtAutoReachedPositionServer
	void LogItemAttachmentStatus();//APBGame.cAPBPlayerController.LogItemAttachmentStatus
	void clientAddGroupWaypoint(FVector3 pos,struct FScriptDelegate OnAddCallback);//APBGame.cAPBPlayerController.clientAddGroupWaypoint
	void DebugSetMaxSafeHeight(float fNewHeight);//APBGame.cAPBPlayerController.DebugSetMaxSafeHeight
	void DatabaseLoad();//APBGame.cAPBPlayerController.DatabaseLoad
	void ClientReceivePingRequest(int pr_nPingRequestIndex);//APBGame.cAPBPlayerController.ClientReceivePingRequest
	void LoadAndDistributeCustomisation(unsigned char eType,struct FString sFileName);//APBGame.cAPBPlayerController.LoadAndDistributeCustomisation
	void DebugServerDecrementRewardTokens(int Amount);//APBGame.cAPBPlayerController.DebugServerDecrementRewardTokens
	void CameraHandyCamInterpToSpeed(float FMin,float FMax,int nID);//APBGame.cAPBPlayerController.CameraHandyCamInterpToSpeed
	void SetPlayerVelocityZero();//APBGame.cAPBPlayerController.SetPlayerVelocityZero
	void NotReadyNag_Callback(unsigned char Answer);//APBGame.cAPBPlayerController.NotReadyNag_Callback
	void InitHUDMarkers();//APBGame.cAPBPlayerController.InitHUDMarkers
	void ServerGolemSetRandomEmotes(bool bPlay);//APBGame.cAPBPlayerController.ServerGolemSetRandomEmotes
	bool LoadCustomisationFromDisk(unsigned char eType,struct FString sFileName,class UcCompressedAssetCustomisation* CompressedAsset);//APBGame.cAPBPlayerController.LoadCustomisationFromDisk
	void GM_ServerMoveToLocation(FVector3 vecLocation);//APBGame.cAPBPlayerController.GM_ServerMoveToLocation
	void MoveToPositionNoMovementTimer();//APBGame.cAPBPlayerController.MoveToPositionNoMovementTimer
	void DebugMapCentreDecrementX();//APBGame.cAPBPlayerController.DebugMapCentreDecrementX
	void AudioContactDialogueTestStart(struct FString sContactName,struct FString sEventName,int nIntervalBetweenTriggers);//APBGame.cAPBPlayerController.AudioContactDialogueTestStart
	void CameraAPBScreenShakeRotation(int nAPBScreenShake,float fRotationAmplitudeX,float fRotationAmplitudeY,float fRotationAmplitudeZ,float fRotationFrequencyX,float fRotationFrequencyY,float fRotationFrequencyZ);//APBGame.cAPBPlayerController.CameraAPBScreenShakeRotation
	void GolemDestroyAllCharacters();//APBGame.cAPBPlayerController.GolemDestroyAllCharacters
	void SetPVPCombat(bool bState);//APBGame.cAPBPlayerController.SetPVPCombat
	void GolemSpawnVehicleAtPlayerLocation(int nDescriptorIndex);//APBGame.cAPBPlayerController.GolemSpawnVehicleAtPlayerLocation
	void ClientOnGroupLeft();//APBGame.cAPBPlayerController.ClientOnGroupLeft
	void DebugServerTutorialResetRequest();//APBGame.cAPBPlayerController.DebugServerTutorialResetRequest
	void ServerReceivePingReply(int pr_nPingRequestIndex,float pr_fClientAvgFrameTime);//APBGame.cAPBPlayerController.ServerReceivePingReply
	void StartMissionServer(struct FString sMissionName,int nRandomSeed,bool bApplyFilters);//APBGame.cAPBPlayerController.StartMissionServer
	void EjectInitialAnimFinished(class AcAPBPawn* PawnAnimFinished);//APBGame.cAPBPlayerController.EjectInitialAnimFinished
	void CallClientCompleteAutoMoveToCSA();//APBGame.cAPBPlayerController.CallClientCompleteAutoMoveToCSA
	void GM_ClientNotifyLeaveFreeCameraMode(unsigned char eErrorCode);//APBGame.cAPBPlayerController.GM_ClientNotifyLeaveFreeCameraMode
	int OperateOnItemNative(unsigned char eCategory,struct FGuid nItemGuid,unsigned char eOperation,struct FString sParam);//APBGame.cAPBPlayerController.OperateOnItemNative
	bool IsCustomising();//APBGame.cAPBPlayerController.IsCustomising
	void FireAllVehicleEnterErrors();//APBGame.cAPBPlayerController.FireAllVehicleEnterErrors
	void ServerTeamLeadershipAnswer(unsigned char Answer);//APBGame.cAPBPlayerController.ServerTeamLeadershipAnswer
	void serverItemCreate(int nInventoryItemType);//APBGame.cAPBPlayerController.serverItemCreate
	bool OperateOnItemByGuid(unsigned char eCategory,struct FGuid nItemGuid,unsigned char eOperation,struct FScriptDelegate OnOperateCallback,struct FString sParam,DWORD pUserData);//APBGame.cAPBPlayerController.OperateOnItemByGuid
	bool IsGM_RunSpeedOverrideEnabled();//APBGame.cAPBPlayerController.IsGM_RunSpeedOverrideEnabled
	void ClientShowVoteToGroupOnMissionEndNative();//APBGame.cAPBPlayerController.ClientShowVoteToGroupOnMissionEndNative
	bool GetInvertMouse();//APBGame.cAPBPlayerController.GetInvertMouse
	void SaveCharacterStateServerNative(struct FString Filename);//APBGame.cAPBPlayerController.SaveCharacterStateServerNative
	void SelfSay(struct FString Message,int DisplayTime);//APBGame.cAPBPlayerController.SelfSay
	void ServerMoveTestMarker();//APBGame.cAPBPlayerController.ServerMoveTestMarker
	void BeginCSA(unsigned char eCSA,class AActor* pInteractiveActor,int nIPIndex,float fOverideDuration);//APBGame.cAPBPlayerController.BeginCSA
	void HijackingEnded(class AcAPBVehicleBase* APBVehicleHijacking);//APBGame.cAPBPlayerController.HijackingEnded
	void SetSprintSpeedServer(float fNewSprintingSpeed);//APBGame.cAPBPlayerController.SetSprintSpeedServer
	unsigned char RetCurrentCSAAutoRoute();//APBGame.cAPBPlayerController.RetCurrentCSAAutoRoute
	void RoleAuthorityAutoMoveToUpdate();//APBGame.cAPBPlayerController.RoleAuthorityAutoMoveToUpdate
	void GM_ServerSetMissionOffersDisabled(bool bDisabled);//APBGame.cAPBPlayerController.GM_ServerSetMissionOffersDisabled
	void EjectLaterAnimFinished(class AcAPBPawn* PawnAnimFinished);//APBGame.cAPBPlayerController.EjectLaterAnimFinished
	bool serverDeleteGroupWaypointNative(int nMarkerID);//APBGame.cAPBPlayerController.serverDeleteGroupWaypointNative
	void ClientReplicateHUDMarkerText(struct FString sText,int nServerMarkerID);//APBGame.cAPBPlayerController.ClientReplicateHUDMarkerText
	void ClientOnCharacterDistrictExit(int nCharacterUID);//APBGame.cAPBPlayerController.ClientOnCharacterDistrictExit
	void SetSpawnExcluded(bool bSpawnExcluded);//APBGame.cAPBPlayerController.SetSpawnExcluded
	void DestroyFlythroughSpawnerActor();//APBGame.cAPBPlayerController.DestroyFlythroughSpawnerActor
	void NativeVehicleSetup(struct FString NewVehicleSetup);//APBGame.cAPBPlayerController.NativeVehicleSetup
	void SetNextMissionActivity(int SDDRow,int requirement);//APBGame.cAPBPlayerController.SetNextMissionActivity
	void ClientMedalsNotification(struct FMedalsPacket packet);//APBGame.cAPBPlayerController.ClientMedalsNotification
	float RetCSAInteractionDistance(unsigned char eContextSensitveActionBase);//APBGame.cAPBPlayerController.RetCSAInteractionDistance
	void ServerInvertMouse(bool bInvert);//APBGame.cAPBPlayerController.ServerInvertMouse
	void ShowActorNetRates(bool bShow);//APBGame.cAPBPlayerController.ShowActorNetRates
	void ServerDebugSetNextMissionActivity(int SDDRow,int requirement);//APBGame.cAPBPlayerController.ServerDebugSetNextMissionActivity
	void ClientTriggerGameplayPopupDialog(struct FString sEventName);//APBGame.cAPBPlayerController.ClientTriggerGameplayPopupDialog
	bool IsInCustomisationZone();//APBGame.cAPBPlayerController.IsInCustomisationZone
	void GM_ServerTogglePB();//APBGame.cAPBPlayerController.GM_ServerTogglePB
	int GetMenuItems();//APBGame.cAPBPlayerController.GetMenuItems
	void StartMinigame(struct FString sMinigameName);//APBGame.cAPBPlayerController.StartMinigame
	void RadarZoomDefault();//APBGame.cAPBPlayerController.RadarZoomDefault
	void ClientAbortElectiveSpawning();//APBGame.cAPBPlayerController.ClientAbortElectiveSpawning
	void GetSpectateViewRotation(FRotator* out_ViewRotation);//APBGame.cAPBPlayerController.GetSpectateViewRotation
	void ClientReceiveActivityMessage(struct FActivityMessageRecord pr_ActivityMessage);//APBGame.cAPBPlayerController.ClientReceiveActivityMessage
	void LogUnlocked();//APBGame.cAPBPlayerController.LogUnlocked
	void SetVehicleDebugType(int nType);//APBGame.cAPBPlayerController.SetVehicleDebugType
	float GetVehicleEnterDistanceTooGreat();//APBGame.cAPBPlayerController.GetVehicleEnterDistanceTooGreat
	void EmptyAllEquippedWeapons();//APBGame.cAPBPlayerController.EmptyAllEquippedWeapons
	void ServerSetObjectivePreferredTaskTargetNative(int nObjectiveIndex,int nTaskTargetIndex,bool bTrue);//APBGame.cAPBPlayerController.ServerSetObjectivePreferredTaskTargetNative
	void FlythroughSpawnPedestrian(float pedestrianLocationX,float pedestrianLocationY,float pedestrianLocationZ,int pedestrianRotationPitch,int pedestrianRotationYaw,int pedestrianRotationRoll,int nMeshIndex);//APBGame.cAPBPlayerController.FlythroughSpawnPedestrian
	void ServerDebugIncMissionActivityProgress(int inc);//APBGame.cAPBPlayerController.ServerDebugIncMissionActivityProgress
	void AddStorageAmmo(int eCategory,int nAmount);//APBGame.cAPBPlayerController.AddStorageAmmo
	void SetMetagroupingMissionOffering(bool bEnabled);//APBGame.cAPBPlayerController.SetMetagroupingMissionOffering
	void ServerSetShowServerHits(bool bShow);//APBGame.cAPBPlayerController.ServerSetShowServerHits
	void EndStateAutoMoveToPositionState();//APBGame.cAPBPlayerController.EndStateAutoMoveToPositionState
	void ServerSetFirstStageTargetRangeCheck(bool bEnabled);//APBGame.cAPBPlayerController.ServerSetFirstStageTargetRangeCheck
	void GM_ServerToggleIdentifiersNative();//APBGame.cAPBPlayerController.GM_ServerToggleIdentifiersNative
	void TickPointsOfInterest();//APBGame.cAPBPlayerController.TickPointsOfInterest
	void DebugSetMaxSafeHeightTimer(float fNewDuration);//APBGame.cAPBPlayerController.DebugSetMaxSafeHeightTimer
	void ToggleCollisionDebug();//APBGame.cAPBPlayerController.ToggleCollisionDebug
	void ForwardMovementKeyDown();//APBGame.cAPBPlayerController.ForwardMovementKeyDown
	void EnableShowVehicleSockets();//APBGame.cAPBPlayerController.EnableShowVehicleSockets
	void GM_ClientNotifyEnterFreeCameraMode();//APBGame.cAPBPlayerController.GM_ClientNotifyEnterFreeCameraMode
	void ServerSelectSpawnZone(class AcPlayerCharacterSpawnZone* SpawnZone);//APBGame.cAPBPlayerController.ServerSelectSpawnZone
	void PollVehicleMovementKeyIsDownOnServer();//APBGame.cAPBPlayerController.PollVehicleMovementKeyIsDownOnServer
	void ReinitialisePermissionsState();//APBGame.cAPBPlayerController.ReinitialisePermissionsState
	void TestForVehicleMovementKey(float InForward);//APBGame.cAPBPlayerController.TestForVehicleMovementKey
	void ServerSetTrackedActivity(int nTrackedActivityRow,int nValue);//APBGame.cAPBPlayerController.ServerSetTrackedActivity
	void OnVendorSetNative(int nVendorID);//APBGame.cAPBPlayerController.OnVendorSetNative
	void ToggleGroupLeaderPing();//APBGame.cAPBPlayerController.ToggleGroupLeaderPing
	void Emote(struct FString sEmoteName);//APBGame.cAPBPlayerController.Emote
	void AudioProjectileEvent(FVector3 vStartPos,FVector3 vImpactPos,int nAudioMaterial,float fSilencerRange,int nMangledWwiseIDForWeapon,bool bLocallyFired,unsigned char nDamageAmount,bool bLocalPlayerHit);//APBGame.cAPBPlayerController.AudioProjectileEvent
	void SetPushForPrivacyOn();//APBGame.cAPBPlayerController.SetPushForPrivacyOn
	void ClientCSAEndEventTutorial(int nTriggerEventID);//APBGame.cAPBPlayerController.ClientCSAEndEventTutorial
	void SetPawnAlwaysRelevant(bool bFlag);//APBGame.cAPBPlayerController.SetPawnAlwaysRelevant
	void ServerSetBombTimer(int newTimeInSeconds);//APBGame.cAPBPlayerController.ServerSetBombTimer
	void CameraHandyCamMovementSpeed(float FMin,float FMax,int nID);//APBGame.cAPBPlayerController.CameraHandyCamMovementSpeed
	void ReplicatedEvent(struct FName VarName);//APBGame.cAPBPlayerController.ReplicatedEvent
	void SetPushToTalkOn();//APBGame.cAPBPlayerController.SetPushToTalkOn
	void BeginInteractionState(unsigned char eState,class AActor* UIActor,struct FGuid* UIActorGUID,bool bInteract,unsigned char eInteractionType);//APBGame.cAPBPlayerController.BeginInteractionState
	void ServerSetBotDetectionEventsTime(int Seconds);//APBGame.cAPBPlayerController.ServerSetBotDetectionEventsTime
	void ServerSetCameraUserDefinedViewScalar(unsigned char TargetType,float UserDefinedViewScalar);//APBGame.cAPBPlayerController.ServerSetCameraUserDefinedViewScalar
	void ServerSetPersistantData(unsigned char TargetType,unsigned char CameraPosition,float UserDefinedViewScalar);//APBGame.cAPBPlayerController.ServerSetPersistantData
	bool CanDoTargeting();//APBGame.cAPBPlayerController.CanDoTargeting
	void ServerOnGroupJoined(int nGroupUID,int nLeaderUID);//APBGame.cAPBPlayerController.ServerOnGroupJoined
	void CameraDirectorMode(bool bUseDirectorCameraMode);//APBGame.cAPBPlayerController.CameraDirectorMode
	void ToogleCameraPositions();//APBGame.cAPBPlayerController.ToogleCameraPositions
	void GolemDestroyAssetTrace();//APBGame.cAPBPlayerController.GolemDestroyAssetTrace
	void ClientCancelLeanInOut();//APBGame.cAPBPlayerController.ClientCancelLeanInOut
	void PlayCameraShakeExported(unsigned char CameraShakePresetExported);//APBGame.cAPBPlayerController.PlayCameraShakeExported
	void ServerAuthenticateSteamClient(struct FSteamAuthBlobChunk pr_AuthBlobChunk);//APBGame.cAPBPlayerController.ServerAuthenticateSteamClient
	void UnlockAllItemsServer();//APBGame.cAPBPlayerController.UnlockAllItemsServer
	void DebugPrintTrackedActivityStats();//APBGame.cAPBPlayerController.DebugPrintTrackedActivityStats
	void CallServerCompleteSuccessfulyAutoMoveToCSA();//APBGame.cAPBPlayerController.CallServerCompleteSuccessfulyAutoMoveToCSA
	void GM_ServerMoveToPlayerLocation(struct FString sCharacterName);//APBGame.cAPBPlayerController.GM_ServerMoveToPlayerLocation
	void CameraHandyCamDelay(float FMin,float FMax,int nID);//APBGame.cAPBPlayerController.CameraHandyCamDelay
	int GetMoveToID();//APBGame.cAPBPlayerController.GetMoveToID
	void ClientNetSet(struct FString Command);//APBGame.cAPBPlayerController.ClientNetSet
	void RemoveMusicDisplayPoint(class AcAudioDisplayPoint* pDisplayPoint);//APBGame.cAPBPlayerController.RemoveMusicDisplayPoint
	void OnClientContactStandingNotification(struct FContactStandingPacket packet);//APBGame.cAPBPlayerController.OnClientContactStandingNotification
	void ClientExplosion(class AActor* AttachActor,float ExplosionLocationX,float ExplosionLocationY,float ExplosionLocationZ,int ExplosionType,int InstigatingTeamID);//APBGame.cAPBPlayerController.ClientExplosion
	void ClientSetInitialStateNative(int nCharacterUID,unsigned char Faction,unsigned char Gender);//APBGame.cAPBPlayerController.ClientSetInitialStateNative
	void ClientNotifyCallingForBackup(bool bYesNo);//APBGame.cAPBPlayerController.ClientNotifyCallingForBackup
	void TriggerGameplayEvent(unsigned char i_EventCategory,int i_nA,int i_nB,int i_nIncrement);//APBGame.cAPBPlayerController.TriggerGameplayEvent
	void ClientPlayModifierSFX(int eModifierItem);//APBGame.cAPBPlayerController.ClientPlayModifierSFX
	void LogUnstickRespawn();//APBGame.cAPBPlayerController.LogUnstickRespawn
	void ClientShowMarkerType(unsigned char eCategory,bool bShow);//APBGame.cAPBPlayerController.ClientShowMarkerType
	void CallSetPause(bool bPause);//APBGame.cAPBPlayerController.CallSetPause
	void ServerSetAlwaysAccessInventory(bool NewState);//APBGame.cAPBPlayerController.ServerSetAlwaysAccessInventory
	void GM_ToggleInvulnerability();//APBGame.cAPBPlayerController.GM_ToggleInvulnerability
	void PrintState();//APBGame.cAPBPlayerController.PrintState
	void ClientGrieferPunishmentRLD818();//APBGame.cAPBPlayerController.ClientGrieferPunishmentRLD818
	void MS_CreateMemSnapshot(struct FString sName);//APBGame.cAPBPlayerController.MS_CreateMemSnapshot
	void LoadCustomisation(struct FString sFileName);//APBGame.cAPBPlayerController.LoadCustomisation
	void GM_ToggleMinigames(bool i_bSet,bool i_bEnabled);//APBGame.cAPBPlayerController.GM_ToggleMinigames
	void EnableShowVehicleViewCones();//APBGame.cAPBPlayerController.EnableShowVehicleViewCones
	void MainMenuReturnToLobby();//APBGame.cAPBPlayerController.MainMenuReturnToLobby
	void VehicleOpenDoor(unsigned char eVehiclePositionIndex,bool bOpen);//APBGame.cAPBPlayerController.VehicleOpenDoor
	void ServerBeginCSA(unsigned char eCSA);//APBGame.cAPBPlayerController.ServerBeginCSA
	void RenameItem(struct FString sCategory,int nInventorySlot,struct FString sNewName);//APBGame.cAPBPlayerController.RenameItem
	void ServerRemoveStorageAmmo(int eCategory,int nAmount);//APBGame.cAPBPlayerController.ServerRemoveStorageAmmo
	void MedalsNotify(struct FMedalsPacket packet);//APBGame.cAPBPlayerController.MedalsNotify
	void GiveUpOnStreamingTimer();//APBGame.cAPBPlayerController.GiveUpOnStreamingTimer
	void UpdateStateFromAdjustment(struct FName NewState);//APBGame.cAPBPlayerController.UpdateStateFromAdjustment
	void GM_ClientStartProfileSequence(struct FString i_sFileName);//APBGame.cAPBPlayerController.GM_ClientStartProfileSequence
	void CameraModeOffsets(float fBackAdjust,float fHeightAdjust,float fRightAdjust,float fRightAdjustPitchScalar);//APBGame.cAPBPlayerController.CameraModeOffsets
	void ServerSnapRotationToPawn();//APBGame.cAPBPlayerController.ServerSnapRotationToPawn
	float RetSpawnConstant(unsigned char eConstant);//APBGame.cAPBPlayerController.RetSpawnConstant
	void ServerGolemSpawnRandomVehicles(int nNumVehicles,float fSpawnRadius,float fSpawnFrequency,float fDespawnFrequency);//APBGame.cAPBPlayerController.ServerGolemSpawnRandomVehicles
	void ToggleFullscreen();//APBGame.cAPBPlayerController.ToggleFullscreen
	void clientGetDisplayPointPosition(struct FGuid nDisplayPointGuid,struct FScriptDelegate OnGetPositionCallback);//APBGame.cAPBPlayerController.clientGetDisplayPointPosition
	bool CalculateDestinationPositionAndRotation(FVector3* DestinationPosition,FRotator* DestinationRotation);//APBGame.cAPBPlayerController.CalculateDestinationPositionAndRotation
	void ServerDebugPrintMissionDebugInfo();//APBGame.cAPBPlayerController.ServerDebugPrintMissionDebugInfo
	void OnStreamingComplete();//APBGame.cAPBPlayerController.OnStreamingComplete
	void ForceToCancelCSA();//APBGame.cAPBPlayerController.ForceToCancelCSA
	int ServerProcessAClientShout_Native();//APBGame.cAPBPlayerController.ServerProcessAClientShout_Native
	void ServerCancelUnstickRespawn();//APBGame.cAPBPlayerController.ServerCancelUnstickRespawn
	void SetHealthAmounts(int Health,int Stamina);//APBGame.cAPBPlayerController.SetHealthAmounts
	void ClientCSABeginEventTutorial(int nTriggerEventID);//APBGame.cAPBPlayerController.ClientCSABeginEventTutorial
	void DebugChallengeCycledImminentServer(int nSecToCycleEnd);//APBGame.cAPBPlayerController.DebugChallengeCycledImminentServer
	void SaveGraffitiCustomisation(struct FString sFileName);//APBGame.cAPBPlayerController.SaveGraffitiCustomisation
	void DebugRequestTeamLeadership();//APBGame.cAPBPlayerController.DebugRequestTeamLeadership
	void CallServerRestartPlayer();//APBGame.cAPBPlayerController.CallServerRestartPlayer
	void DebugIncrementRewardTokens(int Amount);//APBGame.cAPBPlayerController.DebugIncrementRewardTokens
	void SetDebugOpenCustomisation(bool bOpen);//APBGame.cAPBPlayerController.SetDebugOpenCustomisation
	void GoToStateOnInteractionFinished(struct FName NewState);//APBGame.cAPBPlayerController.GoToStateOnInteractionFinished
	void EndStateGotoVehicleAccessPointOpenDoorAndEjectState();//APBGame.cAPBPlayerController.EndStateGotoVehicleAccessPointOpenDoorAndEjectState
	void DebugKickTeamMemberServer(struct FString PlayerName);//APBGame.cAPBPlayerController.DebugKickTeamMemberServer
	void ServerRequestSymbolData(int nCharacterUID);//APBGame.cAPBPlayerController.ServerRequestSymbolData
	bool CanClientSetViewTarget();//APBGame.cAPBPlayerController.CanClientSetViewTarget
	void ClientNotifyStaticHit(int nShotID,struct FSharedHitData Hit,bool bLocal);//APBGame.cAPBPlayerController.ClientNotifyStaticHit
	void DoSpike();//APBGame.cAPBPlayerController.DoSpike
	void RadarZoomIn();//APBGame.cAPBPlayerController.RadarZoomIn
	void SetCamRoll(int nMode);//APBGame.cAPBPlayerController.SetCamRoll
	void EndInteractionState(unsigned char eState);//APBGame.cAPBPlayerController.EndInteractionState
	void LeanLeftKeyDown();//APBGame.cAPBPlayerController.LeanLeftKeyDown
	void GolemSetAssetDescriptorTrace(int nDescriptorIndex);//APBGame.cAPBPlayerController.GolemSetAssetDescriptorTrace
	void ProcessViewRotation(float DeltaTime,FRotator* out_ViewRotation,FRotator DeltaRot);//APBGame.cAPBPlayerController.ProcessViewRotation
	void GM_Inspect(struct FString sCharacterName);//APBGame.cAPBPlayerController.GM_Inspect
	void ClientOnCheckpointReachedNative(class AcCheckpoint* pCheckpoint,class UMissionObjective* pObjective);//APBGame.cAPBPlayerController.ClientOnCheckpointReachedNative
	void DebugSetMissionTimer(int newTimeInSeconds);//APBGame.cAPBPlayerController.DebugSetMissionTimer
	void ValidateMissionsServer();//APBGame.cAPBPlayerController.ValidateMissionsServer
	float RetFlyCamLookRightScale();//APBGame.cAPBPlayerController.RetFlyCamLookRightScale
};
UClass* AcAPBPlayerController::pClassPointer = NULL;

//0x000080 (0x0011B0 - 0x001130)
//cBotPlayerController[0x10392600]
class AcBotPlayerController : public AcAPBPlayerController
{
public:
	int                                                m_nCurrentDirection;                              		// 0x001130 (0x0004)              
	float                                              m_fWaitTimer;                                     		// 0x001134 (0x0004)              
	float                                              m_fTimeUntilDirectionChange;                      		// 0x001138 (0x0004)              
	unsigned long                                      m_bLevelLoadsComplete : 1;                        		// 0x00113C (0x0004) [0x00000001] 
	unsigned long                                      m_bHasBeenInitialised : 1;                        		// 0x00113C (0x0004) [0x00000002] 
	unsigned long                                      m_bShouldSuicideAndRespawn : 1;                   		// 0x00113C (0x0004) [0x00000004] 
	unsigned long                                      bUsingPathgraphLocomotion : 1;                    		// 0x00113C (0x0004) [0x00000008] 
	unsigned char                                      m_BotPlayerState;                                 		// 0x001140 (0x0001)              PROPERTY: etBotPlayerState
	unsigned char                                      _0x001141[0x3];                                   		// 0x001141 (0x0003) MISSED OFFSET
	float                                              m_fXStep;                                         		// 0x001144 (0x0004)              
	float                                              m_fYStep;                                         		// 0x001148 (0x0004)              
	float                                              m_fXPosition;                                     		// 0x00114C (0x0004)              
	float                                              m_fYPosition;                                     		// 0x001150 (0x0004)              
	struct FString                                     m_BudgetTrackerCommandsScript;                    		// 0x001154 (0x000C)              
	int                                                m_fNumXStepsTaken;                                		// 0x001160 (0x0004)              
	int                                                m_fNumYStepsTaken;                                		// 0x001164 (0x0004)              
	FVector3                                           m_vLastMinuteLocation;                            		// 0x001168 (0x000C)              
	float                                              m_fMinuteTimer;                                   		// 0x001174 (0x0004)              
	float                                              m_fLocomotionSpeed;                               		// 0x001178 (0x0004)              
	int                                                m_nNumberOfRespawns;                              		// 0x00117C (0x0004)              
	TArray<class AcAPBDummyPawn*>                      m_aDummyPawnArray;                                		// 0x001180 (0x000C)              
	int                                                m_nNumDummyPawns;                                 		// 0x00118C (0x0004)              
	float                                              m_fLastServerMoveTime;                            		// 0x001190 (0x0004)              
	class URWTechNode*                                 m_pCurrentNode;                                   		// 0x001194 (0x0004)              
	class URWTechNode*                                 m_pNextNode;                                      		// 0x001198 (0x0004)              
	float                                              m_fTimeUntilNextRandomAction;                     		// 0x00119C (0x0004)              
	float                                              m_fRandomActionFrequency;                         		// 0x0011A0 (0x0004)              
	double                                             m_fPerSecondTimer;                                		// 0x0011A4 (0x0008)              
	float                                              m_fSwitchLocomotionTimer;                         		// 0x0011AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBotPlayerController");
		return pClassPointer;
	};

public:
	void DoVehicleLocomotion(float fDeltaTime);//APBGame.cBotPlayerController.DoVehicleLocomotion
	void ServerAcknowledgePossession(class APawn* P);//APBGame.cBotPlayerController.ServerAcknowledgePossession
	void LevelLoadsComplete();//APBGame.cBotPlayerController.LevelLoadsComplete
	void DoRandomActions(float fDeltaTime);//APBGame.cBotPlayerController.DoRandomActions
	void ServerMove(double TimeStamp,FVector3 InAccel,FVector3 ClientLoc,unsigned char MoveFlags,unsigned char ClientRoll,int View);//APBGame.cBotPlayerController.ServerMove
	void DoLocomotion(float fDeltaTime);//APBGame.cBotPlayerController.DoLocomotion
	void CloseAutomatedRun();//APBGame.cBotPlayerController.CloseAutomatedRun
	void SuicideMyPawn();//APBGame.cBotPlayerController.SuicideMyPawn
	void JumpToLocation(FVector3 vNewLocation,FRotator sNewRotation);//APBGame.cBotPlayerController.JumpToLocation
	void DoPathgraphLocomotion(float fDeltaTime);//APBGame.cBotPlayerController.DoPathgraphLocomotion
	void FireWeapon();//APBGame.cBotPlayerController.FireWeapon
	void InitDummyPawns();//APBGame.cBotPlayerController.InitDummyPawns
	void AskForARoute();//APBGame.cBotPlayerController.AskForARoute
	void NumDummies(int nNum);//APBGame.cBotPlayerController.NumDummies
	void GoToSpawnZoneSelectScreen(unsigned char eFaction);//APBGame.cBotPlayerController.GoToSpawnZoneSelectScreen
	void CallConsoleCommands();//APBGame.cBotPlayerController.CallConsoleCommands
	void RespawnMyPawn();//APBGame.cBotPlayerController.RespawnMyPawn
	void StopFiringWeapon();//APBGame.cBotPlayerController.StopFiringWeapon
	void ServerSetLocation(FVector3 vNewLocation,FRotator sNewRotation);//APBGame.cBotPlayerController.ServerSetLocation
	void DoSquareLocomotion(float fDeltaTime);//APBGame.cBotPlayerController.DoSquareLocomotion
	void ServerRestartBots();//APBGame.cBotPlayerController.ServerRestartBots
	bool AttemptInitialisation();//APBGame.cBotPlayerController.AttemptInitialisation
	void SetPlayerSpawnedBeforeServer();//APBGame.cBotPlayerController.SetPlayerSpawnedBeforeServer
	void ServerSetNumDummies(int nNum);//APBGame.cBotPlayerController.ServerSetNumDummies
	void SetNumDummies(int nNum);//APBGame.cBotPlayerController.SetNumDummies
};
UClass* AcBotPlayerController::pClassPointer = NULL;

//0x000008 (0x00027C - 0x000274)
//cAPBSkeletalMeshActor[0x103924D0]
class AcAPBSkeletalMeshActor : public ASkeletalMeshActor
{
public:
	float                                              m_fInfoDisplayMaxDist;                            		// 0x000274 (0x0004)              
	DWORD                                              m_InfoDisplayColour;                              		// 0x000278 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBSkeletalMeshActor");
		return pClassPointer;
	};

public:
	float GetCollisionRadius();//APBGame.cAPBSkeletalMeshActor.GetCollisionRadius
	struct FString GetDisplayName();//APBGame.cAPBSkeletalMeshActor.GetDisplayName
	float GetCollisionHeight();//APBGame.cAPBSkeletalMeshActor.GetCollisionHeight
};
UClass* AcAPBSkeletalMeshActor::pClassPointer = NULL;

//0x0000C4 (0x000340 - 0x00027C)
//cContact[0x103923A0]
class AcContact : public AcAPBSkeletalMeshActor
{
public:
	DWORD                                              VfTable_IUseInterface;                            		// 0x00027C (0x0004)              
	DWORD                                              VfTable_IiAmmoSupplier;                           		// 0x000280 (0x0004)              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x000284 (0x0004)              
	struct FEnumeratedName                             m_eContact;                                       		// 0x000288 (0x0010)              
	int                                                m_nHUDMarkerID_Unpledged;                         		// 0x000298 (0x0004)              
	int                                                m_nHUDMarkerID_Pledged;                           		// 0x00029C (0x0004)              
	DWORD                                              m_pSddDataRow;                                    		// 0x0002A0 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x0002A4 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eContactInteractionState;                       		// 0x0002A5 (0x0001)              PROPERTY: etContactInteractionState
	unsigned char                                      m_eContactInteractionType;                        		// 0x0002A6 (0x0001)              PROPERTY: etContactInteractionType
	unsigned char                                      _0x0002A7[0x1];                                   		// 0x0002A7 (0x0001) MISSED OFFSET
	class USkelControlLookAt*                          m_pLookAtControl;                                 		// 0x0002A8 (0x0004)              
	class AcAPBPawn*                                   m_pLocalPawn;                                     		// 0x0002AC (0x0004)              
	class AcAPBPlayerController*                       m_InteractingController;                          		// 0x0002B0 (0x0004)              
	unsigned long                                      m_bChangedContactInteractionState : 1;            		// 0x0002B4 (0x0004) [0x00000001] 
	unsigned long                                      m_bNextStateOnAnimEnd : 1;                        		// 0x0002B4 (0x0004) [0x00000002] 
	unsigned long                                      m_bInitiateCSAOnAlertIdle : 1;                    		// 0x0002B4 (0x0004) [0x00000004] 
	double                                             m_fLastHailTime;                                  		// 0x0002B8 (0x0008)              
	struct FName                                       m_NextState;                                      		// 0x0002C0 (0x0008)              
	struct FName                                       m_NextStateAfterRotate;                           		// 0x0002C8 (0x0008)              
	struct FName                                       m_aGreetingAnimNames[0x4];                        		// 0x0002D0 (0x0020)              
	struct FName                                       m_aResponseAnimNames[0x4];                        		// 0x0002F0 (0x0020)              
	struct FName                                       m_RotationAnimName;                               		// 0x000310 (0x0008)              
	FRotator                                           m_rStartRotation;                                 		// 0x000318 (0x000C)              
	float                                              m_fAngleRotationOffset;                           		// 0x000324 (0x0004)              
	float                                              m_fRotationSequenceLength;                        		// 0x000328 (0x0004)              
	int                                                m_nAudioTypeMangledWwiseID;                       		// 0x00032C (0x0004)              
	int                                                m_nRandomSeed;                                    		// 0x000330 (0x0004)              
	float                                              m_fTickDistance;                                  		// 0x000334 (0x0004)              
	float                                              m_fAccumulatedDeltaSeconds;                       		// 0x000338 (0x0004)              
	class UcAmmoDepotComponent*                        m_AmmoDepotComponent;                             		// 0x00033C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cContact");
		return pClassPointer;
	};

public:
	float RetInnerProximityRadius();//APBGame.cContact.RetInnerProximityRadius
	void CallClientBeginUse(class AcAPBPlayerController* PC,bool bCanInteract,unsigned char eInteractionType);//APBGame.cContact.CallClientBeginUse
	void ClientEndUse();//APBGame.cContact.ClientEndUse
	float RetOuterProximityRadius();//APBGame.cContact.RetOuterProximityRadius
	void SetContactStateOnAnimEnd(struct FName NewState);//APBGame.cContact.SetContactStateOnAnimEnd
	class AcAPBPlayerController* RetLocalPlayerController();//APBGame.cContact.RetLocalPlayerController
	bool IsResupplyingPlayer(class AcAPBPlayerController* pPlayer);//APBGame.cContact.IsResupplyingPlayer
	void CalcBestFitRotationAnim(float fAngleToRotate,unsigned char eDirection);//APBGame.cContact.CalcBestFitRotationAnim
	void NotifyConsumerAttributesModified(class UiAmmoConsumer* pConsumer);//APBGame.cContact.NotifyConsumerAttributesModified
	class UcAmmoDepotComponent* RetAmmoDepotComponent();//APBGame.cContact.RetAmmoDepotComponent
	void GoToContactState(struct FName NewState);//APBGame.cContact.GoToContactState
	void ClientBeginRemoteInteraction(class AcAPBPlayerController* PC);//APBGame.cContact.ClientBeginRemoteInteraction
	void EndInventoryAccess(class AcAPBPlayerController* pPlayer,bool bCancel);//APBGame.cContact.EndInventoryAccess
	FVector3 RetAmmoResupplyLocation();//APBGame.cContact.RetAmmoResupplyLocation
	int AmmoClipsLeft();//APBGame.cContact.AmmoClipsLeft
	bool CanHail();//APBGame.cContact.CanHail
	void StopLookAt();//APBGame.cContact.StopLookAt
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cContact.BeginUse
	bool TryInitRotation(FVector3 vDesiredDirection);//APBGame.cContact.TryInitRotation
	void BeginResupply(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType);//APBGame.cContact.BeginResupply
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cContact.Touch
	void CancelAllResupplyOperations();//APBGame.cContact.CancelAllResupplyOperations
	void StartLookAt();//APBGame.cContact.StartLookAt
	bool CanWaveGoodbye();//APBGame.cContact.CanWaveGoodbye
	bool IsRangeBasedAmmoSupplier();//APBGame.cContact.IsRangeBasedAmmoSupplier
	void NotifySupplierAttributesModified();//APBGame.cContact.NotifySupplierAttributesModified
	void SetContactState(unsigned char eState);//APBGame.cContact.SetContactState
	void BeginInventoryAccess(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cContact.BeginInventoryAccess
	void Bump(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitNormal);//APBGame.cContact.Bump
	bool CanEndInteraction();//APBGame.cContact.CanEndInteraction
	bool IsLimitedAmmoSupplier();//APBGame.cContact.IsLimitedAmmoSupplier
	unsigned char CheckCanPlayerAccessInventory(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cContact.CheckCanPlayerAccessInventory
	unsigned char RetContactType();//APBGame.cContact.RetContactType
	struct FString ToString();//APBGame.cContact.ToString
	bool CanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cContact.CanResupplyPlayer
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cContact.IsCSASupported
	void EndResupply(class AcAPBPlayerController* pPlayer,bool bCancel,unsigned char eWeaponType);//APBGame.cContact.EndResupply
	void ApplyRotationOffset(float fDeltaTime);//APBGame.cContact.ApplyRotationOffset
	bool WithdrawAmmoClip();//APBGame.cContact.WithdrawAmmoClip
	float RetAmmoResupplyRange();//APBGame.cContact.RetAmmoResupplyRange
	float GetCollisionRadius();//APBGame.cContact.GetCollisionRadius
	unsigned char CheckCanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cContact.CheckCanResupplyPlayer
	bool IsAmmoCarrier();//APBGame.cContact.IsAmmoCarrier
	class AActor* RetAmmoSupplierActor();//APBGame.cContact.RetAmmoSupplierActor
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cContact.EndUse
	void GetAngleAndDirection(FVector3* vCurrent,FVector3* vDesired,float* fAngle,unsigned char* eDir);//APBGame.cContact.GetAngleAndDirection
	void PostRenderFor(class APlayerController* PC,class UCanvas* Canvas,FVector3 CameraPosition,FVector3 CameraDir);//APBGame.cContact.PostRenderFor
	void ClientBeginFaceToFaceInteraction(class AcAPBPlayerController* PC,bool bCanInteract,unsigned char eInteractionType);//APBGame.cContact.ClientBeginFaceToFaceInteraction
	void TickInteractionSimulation(float DeltaTime);//APBGame.cContact.TickInteractionSimulation
	void OnStateAnimEnd(unsigned char eState,class UAnimNodeSequence* SeqNode);//APBGame.cContact.OnStateAnimEnd
	float GetCollisionHeight();//APBGame.cContact.GetCollisionHeight
	bool CanPlayerAccessInventory(class AcAPBPlayerController* pPlayer);//APBGame.cContact.CanPlayerAccessInventory
	struct FString GetTitle();//APBGame.cContact.GetTitle
	float RetHailTimeReset();//APBGame.cContact.RetHailTimeReset
	bool IsLocalPawnInProximity(class AcAPBPlayerController* pController,float fRadius);//APBGame.cContact.IsLocalPawnInProximity
};
UClass* AcContact::pClassPointer = NULL;

//0x000000 (0x000340 - 0x000340)
//cCriminalContact[0x10392270]
class AcCriminalContact : public AcContact
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCriminalContact");
		return pClassPointer;
	};
};
UClass* AcCriminalContact::pClassPointer = NULL;

//0x000000 (0x000340 - 0x000340)
//cEnforcerContact[0x10392140]
class AcEnforcerContact : public AcContact
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEnforcerContact");
		return pClassPointer;
	};
};
UClass* AcEnforcerContact::pClassPointer = NULL;

//0x00003C (0x00029C - 0x000260)
//cToDManager[0x10392010]
class AcToDManager : public AcToDManagerBase
{
public:
	unsigned long                                      m_bConfigInitToD : 1;                             		// 0x000260 (0x0004) [0x00000001] 
	unsigned long                                      m_bConfigToDActive : 1;                           		// 0x000260 (0x0004) [0x00000002] 
	unsigned long                                      m_bActive : 1;                                    		// 0x000260 (0x0004) [0x00000004] 
	float                                              m_nConfigToDHours;                                		// 0x000264 (0x0004)              
	float                                              m_nConfigToDMins;                                 		// 0x000268 (0x0004)              
	int                                                m_nLengthOfDayHours;                              		// 0x00026C (0x0004)              
	int                                                m_nLengthOfDayMins;                               		// 0x000270 (0x0004)              
	float                                              m_fToD;                                           		// 0x000274 (0x0004)              
	unsigned char                                      m_eToDPeriod;                                     		// 0x000278 (0x0001)              PROPERTY: etTimeofDayPeriod
	unsigned char                                      _0x000279[0x3];                                   		// 0x000279 (0x0003) MISSED OFFSET
	float                                              m_fToDOffset;                                     		// 0x00027C (0x0004)              
	float                                              m_fToDSeconds;                                    		// 0x000280 (0x0004)              
	int                                                m_nHours;                                         		// 0x000284 (0x0004)              
	int                                                m_nMins;                                          		// 0x000288 (0x0004)              
	int                                                m_nSecs;                                          		// 0x00028C (0x0004)              
	class UcObservers*                                 m_aObservers;                                     		// 0x000290 (0x0004)              
	struct FcWeatherData                               m_Weather;                                        		// 0x000294 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cToDManager");
		return pClassPointer;
	};

public:
	void LogDebugToDInfo();//APBGame.cToDManager.LogDebugToDInfo
	class UcObservers* GetObservers();//APBGame.cToDManager.GetObservers
	void SetWeather(struct FcWeatherData NewWeather);//APBGame.cToDManager.SetWeather
};
UClass* AcToDManager::pClassPointer = NULL;

//0x000000 (0x00032C - 0x00032C)
//cAPBPlayerReplicationInfo[0x10391DB0]
class AcAPBPlayerReplicationInfo : public APlayerReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBPlayerReplicationInfo");
		return pClassPointer;
	};
};
UClass* AcAPBPlayerReplicationInfo::pClassPointer = NULL;

//0x000460 (0x0006C0 - 0x000260)
//cAPBClientServerDebugManager[0x10391C80]
class AcAPBClientServerDebugManager : public AActor
{
public:
	unsigned long                                      m_bDisplayNPCIDs : 1;                             		// 0x000260 (0x0004) [0x00000001] 
	unsigned long                                      m_bDisplayPedestrianStates : 1;                   		// 0x000260 (0x0004) [0x00000002] 
	unsigned long                                      m_bDisplayVehicleRoutes : 1;                      		// 0x000260 (0x0004) [0x00000004] 
	unsigned long                                      m_bDisplayVehicleStates : 1;                      		// 0x000260 (0x0004) [0x00000008] 
	unsigned long                                      m_bDisplayVehicleSearches : 1;                    		// 0x000260 (0x0004) [0x00000010] 
	int                                                m_nPedestrianIDToDrawRouteFor_Local;              		// 0x000264 (0x0004)              
	int                                                m_nPedestrianIDToDrawRouteFor_Replicated;         		// 0x000268 (0x0004)              
	int                                                m_nDisplayStatePedestrianID;                      		// 0x00026C (0x0004)              
	int                                                m_nDisplayRouteVehicleID;                         		// 0x000270 (0x0004)              
	int                                                m_nDisplayStateVehicleID;                         		// 0x000274 (0x0004)              
	int                                                m_nDisplaySearchVehicleID;                        		// 0x000278 (0x0004)              
	FVector3                                           m_aNPCPositions[0x1E];                            		// 0x00027C (0x0168)              
	FVector3                                           m_aNPCCollisionOrigin[0x1E];                      		// 0x0003E4 (0x0168)              
	float                                              m_aNPCCollisionRadius[0x1E];                      		// 0x00054C (0x0078)              
	float                                              m_aNPCCollisionHeight[0x1E];                      		// 0x0005C4 (0x0078)              
	DWORD                                              m_aDrawingCylinders[0x1E];                        		// 0x00063C (0x0078)              
	struct FSTickTimesReplicated                       m_ServerTickTimes_Replicated;                     		// 0x0006B4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBClientServerDebugManager");
		return pClassPointer;
	};

public:
	void ReceivedNewServerTickTimes();//APBGame.cAPBClientServerDebugManager.ReceivedNewServerTickTimes
	void ReplicatedEvent(struct FName VarName);//APBGame.cAPBClientServerDebugManager.ReplicatedEvent
	void ReceivedNewPedestrianIDToDrawFor();//APBGame.cAPBClientServerDebugManager.ReceivedNewPedestrianIDToDrawFor
};
UClass* AcAPBClientServerDebugManager::pClassPointer = NULL;

//0x002338 (0x00264C - 0x000314)
//cAPBGameReplicationInfo[0x10391B50]
class AcAPBGameReplicationInfo : public AGameReplicationInfo
{
public:
	DWORD                                              VfTable_FCallbackEventDevice;                     		// 0x000314 (0x0004)              
	class AcDistrictActors*                            m_DistrictActors;                                 		// 0x000318 (0x0004)              
	class AcDisplayPointManager*                       m_DisplayPointManager;                            		// 0x00031C (0x0004)              
	class AcToDManager*                                m_ToDManager;                                     		// 0x000320 (0x0004)              
	class UcAudioManager*                              m_AudioManager;                                   		// 0x000324 (0x0004)              
	float                                              m_fGroupUnreliableDataUpdatePeriod;               		// 0x000328 (0x0004)              
	class AcUploadManager*                             m_UploadManager;                                  		// 0x00032C (0x0004)              
	class AcItemAssetsManager*                         m_ItemAssetsManager;                              		// 0x000330 (0x0004)              
	unsigned char                                      m_aJunctionStatus[0x100];                         		// 0x000334 (0x0100)              PROPERTY: 
	unsigned char                                      m_nNumAllocatedChaosSlots;                        		// 0x000434 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000435[0x3];                                   		// 0x000435 (0x0003) MISSED OFFSET
	int                                                nJunctions;                                       		// 0x000438 (0x0004)              
	class AcAPBClientServerDebugManager*               m_pAPBClientServerDebugManager;                   		// 0x00043C (0x0004)              
	unsigned long                                      m_bLevelLoadsComplete : 1;                        		// 0x000440 (0x0004) [0x00000001] 
	unsigned long                                      m_cfg_bEnablePlayerDataLogging : 1;               		// 0x000440 (0x0004) [0x00000002] 
	unsigned long                                      m_bIsDataLogged : 1;                              		// 0x000440 (0x0004) [0x00000004] 
	unsigned long                                      m_bMissionsEnabled : 1;                           		// 0x000440 (0x0004) [0x00000008] 
	unsigned long                                      m_bAllPvPDamageEnabled : 1;                       		// 0x000440 (0x0004) [0x00000010] 
	unsigned long                                      m_bAllPvEDamageEnabled : 1;                       		// 0x000440 (0x0004) [0x00000020] 
	unsigned long                                      m_bScoringIncludeTestContacts : 1;                		// 0x000440 (0x0004) [0x00000040] 
	unsigned long                                      m_bUseNewTrackedActivities : 1;                   		// 0x000440 (0x0004) [0x00000080] 
	unsigned long                                      m_bFastShortTimeout : 1;                          		// 0x000440 (0x0004) [0x00000100] 
	unsigned long                                      m_bActiveSteering : 1;                            		// 0x000440 (0x0004) [0x00000200] 
	unsigned long                                      m_bEnableSteamBrowser : 1;                        		// 0x000440 (0x0004) [0x00000400] 
	unsigned long                                      m_bUseMarketplaceSSO : 1;                         		// 0x000440 (0x0004) [0x00000800] 
	unsigned long                                      m_bStatsEnabled : 1;                              		// 0x000440 (0x0004) [0x00001000] 
	int                                                m_cfg_nPlayerDataLogTime;                         		// 0x000444 (0x0004)              
	struct FString                                     m_cfg_sPlayerDataFile;                            		// 0x000448 (0x000C)              
	int                                                m_nDebugBatchId;                                  		// 0x000454 (0x0004)              
	int                                                m_nDistrictCriminalCount;                         		// 0x000458 (0x0004)              
	int                                                m_nDistrictEnforcerCount;                         		// 0x00045C (0x0004)              
	struct FString                                     m_sSessionGuid;                                   		// 0x000460 (0x000C)              
	int                                                m_nDistrictInstanceType;                          		// 0x00046C (0x0004)              
	int                                                m_nWeaponTypeSet;                                 		// 0x000470 (0x0004)              
	struct FQWord                                      m_nServerSteamID;                                 		// 0x000474 (0x0008)              
	TArray<float>                                      afTimeNextStats;                                  		// 0x00047C (0x000C)              
	float                                              m_fClientPingTimes[0x100];                        		// 0x000488 (0x0400)              
	float                                              m_fClientFrameTimes[0x100];                       		// 0x000888 (0x0400)              
	struct FChaosScoreboardPlayer                      m_ChaosScoreboardPlayers[0x67];                   		// 0x000C88 (0x09A8)              
	struct FChaosScoreboardData                        m_ChaosScoreboardData[0x67];                      		// 0x001630 (0x0E7C)              
	class AcAPBPlayerController*                       m_ChaosPlayers[0x67];                             		// 0x0024AC (0x019C)              
	float                                              m_fChaosScoreboardUpdateTimer;                    		// 0x002648 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBGameReplicationInfo");
		return pClassPointer;
	};

public:
	void ReplicatedArrayEvent(struct FName sArrayName,int nElementIndex);//APBGame.cAPBGameReplicationInfo.ReplicatedArrayEvent
	void GroupUpdateTimerFunc();//APBGame.cAPBGameReplicationInfo.GroupUpdateTimerFunc
	void GroupUpdateTimerFuncNative();//APBGame.cAPBGameReplicationInfo.GroupUpdateTimerFuncNative
	void DumpStats(unsigned char eType);//APBGame.cAPBGameReplicationInfo.DumpStats
	class AcDistrictActors* RetDistrictActors();//APBGame.cAPBGameReplicationInfo.RetDistrictActors
	class AcToDManagerBase* RetToDManagerInterface();//APBGame.cAPBGameReplicationInfo.RetToDManagerInterface
	void LinkActiveFeatures();//APBGame.cAPBGameReplicationInfo.LinkActiveFeatures
	void NotifyNetDriverLevelLoadsComplete();//APBGame.cAPBGameReplicationInfo.NotifyNetDriverLevelLoadsComplete
	void FinishedBlockedLoads();//APBGame.cAPBGameReplicationInfo.FinishedBlockedLoads
	bool IsAPBDistrict();//APBGame.cAPBGameReplicationInfo.IsAPBDistrict
	bool RetUsingMasterSpawnZones();//APBGame.cAPBGameReplicationInfo.RetUsingMasterSpawnZones
	class AcToDManager* RetToDManager();//APBGame.cAPBGameReplicationInfo.RetToDManager
	void ReportFinishedBlockedLoads();//APBGame.cAPBGameReplicationInfo.ReportFinishedBlockedLoads
	void AllocateAPBDebugManager();//APBGame.cAPBGameReplicationInfo.AllocateAPBDebugManager
	class AcItemAssetsManager* RetItemAssetsManager();//APBGame.cAPBGameReplicationInfo.RetItemAssetsManager
	void ReplicatedEvent(struct FName VarName);//APBGame.cAPBGameReplicationInfo.ReplicatedEvent
	void NotifyLocalControllersOnLevelLoad();//APBGame.cAPBGameReplicationInfo.NotifyLocalControllersOnLevelLoad
	void NativeReplicatedEvent(struct FName VarName);//APBGame.cAPBGameReplicationInfo.NativeReplicatedEvent
	void CallRemovePRIBase(class APlayerReplicationInfo* PRI);//APBGame.cAPBGameReplicationInfo.CallRemovePRIBase
	void CreateLC(class AcToDManager* pr_ToDManager);//APBGame.cAPBGameReplicationInfo.CreateLC
	void NotifyResourceAllocatorLevelLoadsComplete();//APBGame.cAPBGameReplicationInfo.NotifyResourceAllocatorLevelLoadsComplete
	void PostBeginPlay();//APBGame.cAPBGameReplicationInfo.PostBeginPlay
	class AcDisplayPointManager* RetDisplayPointManager();//APBGame.cAPBGameReplicationInfo.RetDisplayPointManager
	class AcUploadManager* RetUploadManager();//APBGame.cAPBGameReplicationInfo.RetUploadManager
	struct FString RetNewGuid();//APBGame.cAPBGameReplicationInfo.RetNewGuid
	void NativeReplicatedArrayEvent(struct FName sArrayName,int nElementIndex);//APBGame.cAPBGameReplicationInfo.NativeReplicatedArrayEvent
};
UClass* AcAPBGameReplicationInfo::pClassPointer = NULL;

//0x000204 (0x000244 - 0x000040)
//cGroup[0x10391A20]
class UcGroup : public UObject
{
public:
	struct FGroupMember                                m_aMembers[0x14];                                 		// 0x000040 (0x01E0)              
	int                                                m_nIdentifier;                                    		// 0x000220 (0x0004)              
	int                                                m_nLeaderUID;                                     		// 0x000224 (0x0004)              
	DWORD                                              m_pCollisionGroup;                                		// 0x000228 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x00022C (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_nNumMembers;                                    		// 0x00022D (0x0001)              PROPERTY: 
	unsigned char                                      m_nNumPendingMembers;                             		// 0x00022E (0x0001)              PROPERTY: 
	unsigned char                                      _0x00022F[0x1];                                   		// 0x00022F (0x0001) MISSED OFFSET
	int                                                m_nWSGroupSize;                                   		// 0x000230 (0x0004)              
	unsigned long                                      m_bIsPublic : 1;                                  		// 0x000234 (0x0004) [0x00000001] 
	unsigned long                                      m_bWasReadyForMissions : 1;                       		// 0x000234 (0x0004) [0x00000002] 
	TArray<int>                                        m_anAttachedServerHUDMarkerIDs;                   		// 0x000238 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGroup");
		return pClassPointer;
	};

public:
	void OnUnreliableDataReceived(struct FUnreliableDataPacket packet);//APBGame.cGroup.OnUnreliableDataReceived
	void AddMember(struct FGroupMember newMember);//APBGame.cGroup.AddMember
	void SetWSGroupSize(int nWSGroupSize);//APBGame.cGroup.SetWSGroupSize
	void SetLeader(int nCharacterUID);//APBGame.cGroup.SetLeader
	void RemoveMember(int nCharacterUID);//APBGame.cGroup.RemoveMember
};
UClass* UcGroup::pClassPointer = NULL;

//0x000008 (0x00026C - 0x000264)
//cLookupTextureTestActor[0x103918F0]
class AcLookupTextureTestActor : public AStaticMeshActor
{
public:
	class UMaterialInstanceConstant*                   m_MatInst;                                        		// 0x000264 (0x0004)              
	class UTextureDynamicLookup*                       m_LookupTex;                                      		// 0x000268 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLookupTextureTestActor");
		return pClassPointer;
	};
};
UClass* AcLookupTextureTestActor::pClassPointer = NULL;

//0x000018 (0x0000F0 - 0x0000D8)
//TextureDynamicLookup[0x103917C0]
class UTextureDynamicLookup : public UTexture
{
public:
	TArray<unsigned char>                              m_afValues;                                       		// 0x0000D8 (0x000C)              
	int                                                m_nWidth;                                         		// 0x0000E4 (0x0004)              
	unsigned char                                      m_Format;                                         		// 0x0000E8 (0x0001)              PROPERTY: EPixelFormat
	unsigned char                                      _0x0000E9[0x3];                                   		// 0x0000E9 (0x0003) MISSED OFFSET
	DWORD                                              m_pResource;                                      		// 0x0000EC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.TextureDynamicLookup");
		return pClassPointer;
	};
};
UClass* UTextureDynamicLookup::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cAPBCollisionDamage[0x10391690]
class UcAPBCollisionDamage : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCollisionDamage");
		return pClassPointer;
	};
};
UClass* UcAPBCollisionDamage::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cAPBCriticalDamage[0x10391560]
class UcAPBCriticalDamage : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCriticalDamage");
		return pClassPointer;
	};
};
UClass* UcAPBCriticalDamage::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cAPBStaminaDrain[0x10391430]
class UcAPBStaminaDrain : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBStaminaDrain");
		return pClassPointer;
	};
};
UClass* UcAPBStaminaDrain::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cAPBStunDamage[0x10391300]
class UcAPBStunDamage : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBStunDamage");
		return pClassPointer;
	};
};
UClass* UcAPBStunDamage::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cArsonDamageType[0x103911D0]
class UcArsonDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cArsonDamageType");
		return pClassPointer;
	};
};
UClass* UcArsonDamageType::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cBombingDamageType[0x103910A0]
class UcBombingDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBombingDamageType");
		return pClassPointer;
	};
};
UClass* UcBombingDamageType::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cBurglaryDamageType[0x10390F70]
class UcBurglaryDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cBurglaryDamageType");
		return pClassPointer;
	};
};
UClass* UcBurglaryDamageType::pClassPointer = NULL;

//0x00001B (0x000074 - 0x000059)
//cDamageFilterComponent[0x10390E40]
class UcDamageFilterComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	TArray<struct FtFilterEntry>                       m_FilterList;                                     		// 0x00005C (0x000C)              
	TArray<struct FtTimerEntry>                        m_TimerList;                                      		// 0x000068 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDamageFilterComponent");
		return pClassPointer;
	};
};
UClass* UcDamageFilterComponent::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cExplosiveDamageType[0x10390D10]
class UcExplosiveDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cExplosiveDamageType");
		return pClassPointer;
	};
};
UClass* UcExplosiveDamageType::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cNoScoringDamageType[0x10390BE0]
class UcNoScoringDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNoScoringDamageType");
		return pClassPointer;
	};
};
UClass* UcNoScoringDamageType::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cNoPenaltyRespawnDamageType[0x10390AB0]
class UcNoPenaltyRespawnDamageType : public UcNoScoringDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNoPenaltyRespawnDamageType");
		return pClassPointer;
	};
};
UClass* UcNoPenaltyRespawnDamageType::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cPropEnroachmentDamageType[0x10390980]
class UcPropEnroachmentDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropEnroachmentDamageType");
		return pClassPointer;
	};
};
UClass* UcPropEnroachmentDamageType::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//cWeaponDamageType[0x10390850]
class UcWeaponDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWeaponDamageType");
		return pClassPointer;
	};
};
UClass* UcWeaponDamageType::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cTaskTargetTriggerVolume[0x10390720]
class AcTaskTargetTriggerVolume : public AcAPBTriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskTargetTriggerVolume");
		return pClassPointer;
	};
};
UClass* AcTaskTargetTriggerVolume::pClassPointer = NULL;

//0x000058 (0x0002B8 - 0x000260)
//cTaskTargetVehicleSpawner[0x103905F0]
class AcTaskTargetVehicleSpawner : public AActor
{
public:
	DWORD                                              VfTable_ITaskTargetInterface;                     		// 0x000260 (0x0004)              
	DWORD                                              VfTable_IiBombTarget;                             		// 0x000264 (0x0004)              
	class UcTaskTargetComponent*                       m_TaskTargetComponent;                            		// 0x000268 (0x0004)              
	class AcAPBVehicle*                                m_Vehicle;                                        		// 0x00026C (0x0004)              
	float                                              m_fBombFuseTime;                                  		// 0x000270 (0x0004)              
	int                                                m_nRandomSeed;                                    		// 0x000274 (0x0004)              
	class UMissionObjective*                           m_MissionObjective;                               		// 0x000278 (0x0004)              
	unsigned char                                      _0x00027C[0x4];                                   		// 0x00027C (0x0004) ALIGNEMENT
	int                                                m_nOwnerDeliverableHUDMarkerID;                   		// 0x000280 (0x0004)              
	unsigned long                                      m_bShowHUDMarkerToOwners : 1;                     		// 0x000284 (0x0004) [0x00000001] 
	unsigned long                                      m_bShowHUDMarkerToOpposition : 1;                 		// 0x000284 (0x0004) [0x00000002] 
	unsigned long                                      m_bShowHUDMarkerToOutOfMission : 1;               		// 0x000284 (0x0004) [0x00000004] 
	unsigned long                                      m_bVehicleUsedBefore : 1;                         		// 0x000284 (0x0004) [0x00000008] 
	unsigned long                                      m_bPlayerTaskRelevant : 1;                        		// 0x000284 (0x0004) [0x00000010] 
	unsigned long                                      m_bPlayerCanTriggerTask : 1;                      		// 0x000284 (0x0004) [0x00000020] 
	int                                                m_nOppositionDeliverableHUDMarkerID;              		// 0x000288 (0x0004)              
	int                                                m_nOutOfMissionDeliverableHUDMarkerID;            		// 0x00028C (0x0004)              
	class AcAPBPlayerController*                       m_pBomberPC;                                      		// 0x000290 (0x0004)              
	class AcAPBPlayerController*                       m_pDefuserPC;                                     		// 0x000294 (0x0004)              
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x000298 (0x0001)              PROPERTY: etTaskTargetVFXState
	unsigned char                                      _0x000299[0x3];                                   		// 0x000299 (0x0003) MISSED OFFSET
	int                                                m_nRepTaskOperationID;                            		// 0x00029C (0x0004)              
	int                                                m_nRepBombState;                                  		// 0x0002A0 (0x0004)              
	int                                                m_nRepBombTimer;                                  		// 0x0002A4 (0x0004)              
	FVector3                                           m_vRepBombLocation;                               		// 0x0002A8 (0x000C)              
	DWORD                                              m_pSddVehicleSetupType;                           		// 0x0002B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskTargetVehicleSpawner");
		return pClassPointer;
	};

public:
	void ClientNotifyTaskRelevantChanged(bool i_bTaskRelevant);//APBGame.cTaskTargetVehicleSpawner.ClientNotifyTaskRelevantChanged
	void NotifyBombExploded();//APBGame.cTaskTargetVehicleSpawner.NotifyBombExploded
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.cTaskTargetVehicleSpawner.ActivateTaskTarget
	bool IsBombExploded();//APBGame.cTaskTargetVehicleSpawner.IsBombExploded
	void RequestVehicleSpawn();//APBGame.cTaskTargetVehicleSpawner.RequestVehicleSpawn
	bool IsDeliverableVehicle();//APBGame.cTaskTargetVehicleSpawner.IsDeliverableVehicle
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.cTaskTargetVehicleSpawner.InitTaskTarget
	class AcAPBPlayerController* RetDefuser();//APBGame.cTaskTargetVehicleSpawner.RetDefuser
	bool IsBombPlanted();//APBGame.cTaskTargetVehicleSpawner.IsBombPlanted
	void NotifyBombFuseTriggered();//APBGame.cTaskTargetVehicleSpawner.NotifyBombFuseTriggered
	void DefuseBomb(class AcAPBPlayerController* pDefuserPC);//APBGame.cTaskTargetVehicleSpawner.DefuseBomb
	void ClientNotifyBombStateChanged(int nBombState,bool bAllowTransitionEffects);//APBGame.cTaskTargetVehicleSpawner.ClientNotifyBombStateChanged
	class UiBombTarget* RetBombTarget();//APBGame.cTaskTargetVehicleSpawner.RetBombTarget
	void DeactivateTaskTarget();//APBGame.cTaskTargetVehicleSpawner.DeactivateTaskTarget
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cTaskTargetVehicleSpawner.ResetTaskTarget
	void SpawnVehicle();//APBGame.cTaskTargetVehicleSpawner.SpawnVehicle
	class UcTaskTargetComponent* GetTaskTargetComponent();//APBGame.cTaskTargetVehicleSpawner.GetTaskTargetComponent
	class AcAPBVehicle* RetVehicle();//APBGame.cTaskTargetVehicleSpawner.RetVehicle
	void ClientNotifyCanTriggerTaskChanged(bool i_bPlayerCanTriggerTask);//APBGame.cTaskTargetVehicleSpawner.ClientNotifyCanTriggerTaskChanged
	int RetBombState();//APBGame.cTaskTargetVehicleSpawner.RetBombState
	void ClientNotifyBombTimerUpdated(int nBombTimeRemaining);//APBGame.cTaskTargetVehicleSpawner.ClientNotifyBombTimerUpdated
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cTaskTargetVehicleSpawner.PartiallyTriggerTaskTarget
	void MoveTargetState(class AActor* targetActor);//APBGame.cTaskTargetVehicleSpawner.MoveTargetState
	bool IsBombDefused();//APBGame.cTaskTargetVehicleSpawner.IsBombDefused
	void ClientNotifyTaskOperationChanged(int nTaskOperationIndex);//APBGame.cTaskTargetVehicleSpawner.ClientNotifyTaskOperationChanged
	void ClientNotifyBombLocationChanged(FVector3 vecLocation);//APBGame.cTaskTargetVehicleSpawner.ClientNotifyBombLocationChanged
	void ClientNotifyTaskVFXStateChanged(unsigned char eTriggeredState);//APBGame.cTaskTargetVehicleSpawner.ClientNotifyTaskVFXStateChanged
	void NotifyBombDisposalSuccessful();//APBGame.cTaskTargetVehicleSpawner.NotifyBombDisposalSuccessful
	bool IsPawnBlockingSpawnZone(class APawn* PawnInZone);//APBGame.cTaskTargetVehicleSpawner.IsPawnBlockingSpawnZone
	void ReplicatedEvent(struct FName VarName);//APBGame.cTaskTargetVehicleSpawner.ReplicatedEvent
	void CleanUpTaskTarget();//APBGame.cTaskTargetVehicleSpawner.CleanUpTaskTarget
	void SetStateAsDeliverableVehicle(bool bIsDeliverableVehicle);//APBGame.cTaskTargetVehicleSpawner.SetStateAsDeliverableVehicle
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cTaskTargetVehicleSpawner.TriggerTaskTarget
	void PlantBomb(class AcAPBPlayerController* pBomberPC);//APBGame.cTaskTargetVehicleSpawner.PlantBomb
	class UcVisualFXComponent* GetVFXComponent();//APBGame.cTaskTargetVehicleSpawner.GetVFXComponent
	class AcAPBPlayerController* RetBomber();//APBGame.cTaskTargetVehicleSpawner.RetBomber
};
UClass* AcTaskTargetVehicleSpawner::pClassPointer = NULL;

//0x0000D4 (0x00034C - 0x000278)
//cTaskItemPickup[0x103904C0]
class AcTaskItemPickup : public AcPickupBase
{
public:
	DWORD                                              VfTable_IDamageInterface;                         		// 0x000278 (0x0004)              
	DWORD                                              VfTable_ICombatTargetingInterface;                		// 0x00027C (0x0004)              
	DWORD                                              VfTable_IiAmmoCarrier;                            		// 0x000280 (0x0004)              
	class AcTaskItem*                                  m_TaskItem;                                       		// 0x000284 (0x0004)              
	int                                                m_nVariety;                                       		// 0x000288 (0x0004)              
	DWORD                                              m_aDamageStates;                                  		// 0x00028C (0x0004)              
	int                                                m_nCurrentDamageState;                            		// 0x000290 (0x0004)              
	unsigned long                                      m_bHasDestroyedDamageState : 1;                   		// 0x000294 (0x0004) [0x00000001] 
	unsigned long                                      m_bInIllegalLocation : 1;                         		// 0x000294 (0x0004) [0x00000002] 
	unsigned long                                      m_bInOutOfBoundsVolume : 1;                       		// 0x000294 (0x0004) [0x00000004] 
	unsigned long                                      m_bInitialHealthReplicated : 1;                   		// 0x000294 (0x0004) [0x00000008] 
	unsigned long                                      m_bActive : 1;                                    		// 0x000294 (0x0004) [0x00000010] 
	DWORD                                              m_pSddTaskItemSubCategory;                        		// 0x000298 (0x0004)              
	DWORD                                              m_pSddTaskItemCategory;                           		// 0x00029C (0x0004)              
	DWORD                                              m_pSddTaskItemSize;                               		// 0x0002A0 (0x0004)              
	DWORD                                              m_pSddItemAttachmentVisual;                       		// 0x0002A4 (0x0004)              
	DWORD                                              m_pSddTaskItemVariety;                            		// 0x0002A8 (0x0004)              
	DWORD                                              m_pSddTaskItemVisual;                             		// 0x0002AC (0x0004)              
	DWORD                                              m_pSddTaskItemEffect;                             		// 0x0002B0 (0x0004)              
	class UcAmmoDepotComponent*                        m_AmmoDepotComponent;                             		// 0x0002B4 (0x0004)              
	class AcMission*                                   m_pMission;                                       		// 0x0002B8 (0x0004)              
	int                                                m_nHealth;                                        		// 0x0002BC (0x0004)              
	struct FPvPFlags                                   m_PvPFlags;                                       		// 0x0002C0 (0x000C)              
	unsigned char                                      _0x0002CC[0x4];                                   		// 0x0002CC (0x0004) MISSED OFFSET
	struct FRigidBodyState                             RBState;                                          		// 0x0002D0 (0x0040)              
	float                                              AngErrorAccumulator;                              		// 0x000310 (0x0004)              
	float                                              SleepTimer;                                       		// 0x000314 (0x0004)              
	struct FGuid                                       m_SymbolCustomisationGUID;                        		// 0x000318 (0x0010)              
	class UMaterialInstanceConstant*                   m_SymbolMaterial;                                 		// 0x000328 (0x0004)              
	class UTexture*                                    m_SymbolTexture;                                  		// 0x00032C (0x0004)              
	TArray<class UMaterialInstanceConstant*>           m_Materials;                                      		// 0x000330 (0x000C)              
	float                                              m_fProgressValue;                                 		// 0x00033C (0x0004)              
	struct FScriptDelegate                             __OnItemPickedUp__Delegate;                       		// 0x000340 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskItemPickup");
		return pClassPointer;
	};

public:
	bool CanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cTaskItemPickup.CanResupplyPlayer
	void Tick(float DeltaTime);//APBGame.cTaskItemPickup.Tick
	bool IsAmmoCarrierDepotDeployed();//APBGame.cTaskItemPickup.IsAmmoCarrierDepotDeployed
	void CheckOutOfAmmo();//APBGame.cTaskItemPickup.CheckOutOfAmmo
	void OnSymbolChanged();//APBGame.cTaskItemPickup.OnSymbolChanged
	void RetExplosionOcclusionExtents(TArray<FVector3>* Verts,FVector3* ExplosionLocation);//APBGame.cTaskItemPickup.RetExplosionOcclusionExtents
	bool IsSoft();//APBGame.cTaskItemPickup.IsSoft
	class AcAPBPlayerController* RetAmmoCarrierOwner();//APBGame.cTaskItemPickup.RetAmmoCarrierOwner
	bool AddTaskItemsToInventory(class AcHoldableItemManager* Inv);//APBGame.cTaskItemPickup.AddTaskItemsToInventory
	bool CanBeTargeted(class AcAPBPlayerController* PC);//APBGame.cTaskItemPickup.CanBeTargeted
	bool CanAddTaskItemsToInventory(class AcHoldableItemManager* Inv);//APBGame.cTaskItemPickup.CanAddTaskItemsToInventory
	void PostRenderFor(class APlayerController* PC,class UCanvas* Canvas,FVector3 CameraPosition,FVector3 CameraDir);//APBGame.cTaskItemPickup.PostRenderFor
	bool CanBeDamaged(class AcAPBPlayerController* PC);//APBGame.cTaskItemPickup.CanBeDamaged
	void OnItemPickedUp(class AcTaskItem* pItem);//APBGame.cTaskItemPickup.OnItemPickedUp
	void PostBeginPlay();//APBGame.cTaskItemPickup.PostBeginPlay
	void ReplicatedEvent(struct FName VarName);//APBGame.cTaskItemPickup.ReplicatedEvent
	class AActor* RetAmmoSupplierActor();//APBGame.cTaskItemPickup.RetAmmoSupplierActor
	void NotifySupplierAttributesModified();//APBGame.cTaskItemPickup.NotifySupplierAttributesModified
	void EndResupply(class AcAPBPlayerController* pPlayer,bool bCancel,unsigned char eWeaponType);//APBGame.cTaskItemPickup.EndResupply
	void BeginInventoryAccess(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cTaskItemPickup.BeginInventoryAccess
	class UcAmmoDepotComponent* RetAmmoDepotComponent();//APBGame.cTaskItemPickup.RetAmmoDepotComponent
	void EndInventoryAccess(class AcAPBPlayerController* pPlayer,bool bCancel);//APBGame.cTaskItemPickup.EndInventoryAccess
	float RetAmmoResupplyRange();//APBGame.cTaskItemPickup.RetAmmoResupplyRange
	bool IsLimitedAmmoSupplier();//APBGame.cTaskItemPickup.IsLimitedAmmoSupplier
	void OnHealthChanged(bool i_bTriggerEffects);//APBGame.cTaskItemPickup.OnHealthChanged
	void OnReplicatedTaskItemVariety();//APBGame.cTaskItemPickup.OnReplicatedTaskItemVariety
	void NotifyConsumerAttributesModified(class UiAmmoConsumer* pConsumer);//APBGame.cTaskItemPickup.NotifyConsumerAttributesModified
	unsigned char CanPlayerInteractWithAmmoCarrier(class AcAPBPlayerController* i_pController);//APBGame.cTaskItemPickup.CanPlayerInteractWithAmmoCarrier
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cTaskItemPickup.EndUse
	void ClientIllegalLocation_APB(struct FString sErrorMessage);//APBGame.cTaskItemPickup.ClientIllegalLocation_APB
	bool Restore(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.cTaskItemPickup.Restore
	void UnTouch(class AActor* Other);//APBGame.cTaskItemPickup.UnTouch
	void TickAutoResupplier();//APBGame.cTaskItemPickup.TickAutoResupplier
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cTaskItemPickup.BeginUse
	int AmmoClipsLeft();//APBGame.cTaskItemPickup.AmmoClipsLeft
	bool IsAmmoCarrier();//APBGame.cTaskItemPickup.IsAmmoCarrier
	void BeginResupply(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType);//APBGame.cTaskItemPickup.BeginResupply
	void SetBoomBoxActive(bool i_bActive);//APBGame.cTaskItemPickup.SetBoomBoxActive
	bool IsHard();//APBGame.cTaskItemPickup.IsHard
	void Falling();//APBGame.cTaskItemPickup.Falling
	void OnMaterialDataChanged();//APBGame.cTaskItemPickup.OnMaterialDataChanged
	unsigned char CheckCanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cTaskItemPickup.CheckCanResupplyPlayer
	void SetSymbolTexture(class UTexture* i_pTexture);//APBGame.cTaskItemPickup.SetSymbolTexture
	bool IsRangeBasedAmmoSupplier();//APBGame.cTaskItemPickup.IsRangeBasedAmmoSupplier
	bool IsDynamicTarget();//APBGame.cTaskItemPickup.IsDynamicTarget
	void CancelAllResupplyOperations();//APBGame.cTaskItemPickup.CancelAllResupplyOperations
	void ServerIllegalLocation_APB(struct FString sErrorMessage);//APBGame.cTaskItemPickup.ServerIllegalLocation_APB
	FVector3 RetAmmoResupplyLocation();//APBGame.cTaskItemPickup.RetAmmoResupplyLocation
	unsigned char CheckCanPlayerAccessInventory(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cTaskItemPickup.CheckCanPlayerAccessInventory
	void BaseChange();//APBGame.cTaskItemPickup.BaseChange
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cTaskItemPickup.IsCSASupported
	bool CanPlayerAccessInventory(class AcAPBPlayerController* pPlayer);//APBGame.cTaskItemPickup.CanPlayerAccessInventory
	void SetAPBCollision(struct FsAPBCollision newAPBCollision);//APBGame.cTaskItemPickup.SetAPBCollision
	bool CanDeployAmmoCarrierDepot(bool i_bActivationCheck);//APBGame.cTaskItemPickup.CanDeployAmmoCarrierDepot
	bool IsAmmoCarrierModifierActive();//APBGame.cTaskItemPickup.IsAmmoCarrierModifierActive
	void OnPickup(class AcAPBPawn* User);//APBGame.cTaskItemPickup.OnPickup
	void DestroyOpenWorldTaskItem();//APBGame.cTaskItemPickup.DestroyOpenWorldTaskItem
	bool IsStaticTarget();//APBGame.cTaskItemPickup.IsStaticTarget
	void DestroyAmmoComponent();//APBGame.cTaskItemPickup.DestroyAmmoComponent
	bool WithdrawAmmoClip();//APBGame.cTaskItemPickup.WithdrawAmmoClip
	bool IsResupplyingPlayer(class AcAPBPlayerController* pPlayer);//APBGame.cTaskItemPickup.IsResupplyingPlayer
	bool CanBeBaseForPawn(class AcAPBPawn* i_pPawn);//APBGame.cTaskItemPickup.CanBeBaseForPawn
	void InitFallingPhysics();//APBGame.cTaskItemPickup.InitFallingPhysics
	bool InvokeUsedBy(class APawn* User);//APBGame.cTaskItemPickup.InvokeUsedBy
};
UClass* AcTaskItemPickup::pClassPointer = NULL;

//0x000038 (0x000384 - 0x00034C)
//cTaskItemPickup_GiftBox[0x10390390]
class AcTaskItemPickup_GiftBox : public AcTaskItemPickup
{
public:
	class USkeletalMeshComponent*                      m_pGiftMeshComponent;                             		// 0x00034C (0x0004)              
	class UParticleSystemComponent*                    m_pGiftParticleSystemComponent;                   		// 0x000350 (0x0004)              
	DWORD                                              m_pGiftBox;                                       		// 0x000354 (0x0004)              
	float                                              m_fActiveTime;                                    		// 0x000358 (0x0004)              
	unsigned long                                      m_bInUse : 1;                                     		// 0x00035C (0x0004) [0x00000001] 
	class AcAPBPawn*                                   m_pCurrentUser;                                   		// 0x000360 (0x0004)              
	float                                              m_fRotation;                                      		// 0x000364 (0x0004)              
	float                                              m_fRotationSpeed;                                 		// 0x000368 (0x0004)              
	int                                                m_nFirstReward;                                   		// 0x00036C (0x0004)              
	int                                                m_nNumRewards;                                    		// 0x000370 (0x0004)              
	int                                                m_nCurrentReward;                                 		// 0x000374 (0x0004)              
	class UParticleSystem*                             m_pActiveParticleSystem;                          		// 0x000378 (0x0004)              
	class UParticleSystem*                             m_pInactiveParticleSystem;                        		// 0x00037C (0x0004)              
	class AcTaskItemAudioProxy*                        m_pAudioProxy;                                    		// 0x000380 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskItemPickup_GiftBox");
		return pClassPointer;
	};

public:
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cTaskItemPickup_GiftBox.IsCSASupported
	void UpdateActive();//APBGame.cTaskItemPickup_GiftBox.UpdateActive
	void OnReplicatedTaskItemVariety();//APBGame.cTaskItemPickup_GiftBox.OnReplicatedTaskItemVariety
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cTaskItemPickup_GiftBox.BeginUse
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cTaskItemPickup_GiftBox.EndUse
	void OnHealthChanged(bool i_bTriggerEffects);//APBGame.cTaskItemPickup_GiftBox.OnHealthChanged
	void ReplicatedEvent(struct FName VarName);//APBGame.cTaskItemPickup_GiftBox.ReplicatedEvent
};
UClass* AcTaskItemPickup_GiftBox::pClassPointer = NULL;

//0x0000C4 (0x000324 - 0x000260)
//cTaskItem[0x10390260]
class AcTaskItem : public AActor
{
public:
	DWORD                                              VfTable_IiDeliverable;                            		// 0x000260 (0x0004)              
	DWORD                                              VfTable_IDamageInterface;                         		// 0x000264 (0x0004)              
	class UMissionObjective*                           m_pMissionObjective;                              		// 0x000268 (0x0004)              
	unsigned char                                      _0x00026C[0x4];                                   		// 0x00026C (0x0004) ALIGNEMENT
	class AcAPBPlayerController*                       m_DeployableOwner;                                		// 0x000270 (0x0004)              
	class AcAPBPlayerController*                       m_LastPlayerToHold;                               		// 0x000274 (0x0004)              
	int                                                m_nSourceTaskTarget;                              		// 0x000278 (0x0004)              
	int                                                m_nVariety;                                       		// 0x00027C (0x0004)              
	unsigned char                                      m_eBatch;                                         		// 0x000280 (0x0001)              PROPERTY: etTaskItemBatch
	unsigned char                                      m_eCurrentState;                                  		// 0x000281 (0x0001)              PROPERTY: etTaskItemState
	unsigned char                                      _0x000282[0x2];                                   		// 0x000282 (0x0002) MISSED OFFSET
	unsigned char                                      m_HUDMarkerIDs[0x3C];                             		// 0x000284 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned long                                      m_bShowHUDMarkerToOwners : 1;                     		// 0x0002C0 (0x0004) [0x00000001] 
	unsigned long                                      m_bShowHUDMarkerToOpposition : 1;                 		// 0x0002C0 (0x0004) [0x00000002] 
	unsigned long                                      m_bShowHUDMarkerToOutOfMission : 1;               		// 0x0002C0 (0x0004) [0x00000004] 
	unsigned long                                      m_bOutOfMissionTargetable : 1;                    		// 0x0002C0 (0x0004) [0x00000008] 
	unsigned long                                      m_bPickedUpBefore : 1;                            		// 0x0002C0 (0x0004) [0x00000010] 
	unsigned long                                      m_bOpenWorldTaskItem : 1;                         		// 0x0002C0 (0x0004) [0x00000020] 
	unsigned long                                      m_bDebugTaskItem : 1;                             		// 0x0002C0 (0x0004) [0x00000040] 
	int                                                m_nTaskMarkerIndex;                               		// 0x0002C4 (0x0004)              
	class AcTaskItemPickup*                            m_Pickup;                                         		// 0x0002C8 (0x0004)              
	class AcHoldableItemManager*                       m_HoldableItemManager;                            		// 0x0002CC (0x0004)              
	class AcAPBVehicleBase*                            m_Vehicle;                                        		// 0x0002D0 (0x0004)              
	class AcCheckpoint*                                m_Checkpoint;                                     		// 0x0002D4 (0x0004)              
	int                                                m_nOpenWorldCashPoolValue;                        		// 0x0002D8 (0x0004)              
	int                                                m_nLastDeliveredTeamID;                           		// 0x0002DC (0x0004)              
	DWORD                                              m_pSddTaskItemSubCategory;                        		// 0x0002E0 (0x0004)              
	DWORD                                              m_pSddTaskItemCategory;                           		// 0x0002E4 (0x0004)              
	DWORD                                              m_pSddTaskItemSize;                               		// 0x0002E8 (0x0004)              
	DWORD                                              m_pSddItemAttachmentVisual;                       		// 0x0002EC (0x0004)              
	DWORD                                              m_pSddTaskItemEffect;                             		// 0x0002F0 (0x0004)              
	int                                                Health;                                           		// 0x0002F4 (0x0004)              
	int                                                HealthMax;                                        		// 0x0002F8 (0x0004)              
	int                                                m_nAmmoClipsLeft;                                 		// 0x0002FC (0x0004)              
	class AcTaskItemAudioProxy*                        m_pAudioActor;                                    		// 0x000300 (0x0004)              
	struct FGuid                                       m_SymbolCustomisationGUID;                        		// 0x000304 (0x0010)              
	DWORD                                              m_pLastPickupTeam;                                		// 0x000314 (0x0004)              
	DWORD                                              m_pSddTaskItemVariety;                            		// 0x000318 (0x0004)              
	DWORD                                              m_pSddTaskItemVisual;                             		// 0x00031C (0x0004)              
	class AcAPBVehicleBase*                            m_pSlowingDownVehicle;                            		// 0x000320 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskItem");
		return pClassPointer;
	};

public:
	bool IsDebugTaskItem();//APBGame.cTaskItem.IsDebugTaskItem
	bool RespawnAtTaskTarget();//APBGame.cTaskItem.RespawnAtTaskTarget
	void TimedExplosion();//APBGame.cTaskItem.TimedExplosion
	bool Restore(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.cTaskItem.Restore
	void SetDeliverableHUDMarkerVisibility(bool bHideAllFromOwners,bool bHideAllFromOpposition,bool bHideFromOutOfMission);//APBGame.cTaskItem.SetDeliverableHUDMarkerVisibility
	bool IsHard();//APBGame.cTaskItem.IsHard
	bool IsOpenWorldTaskItem();//APBGame.cTaskItem.IsOpenWorldTaskItem
	bool IsDeployableTaskItem();//APBGame.cTaskItem.IsDeployableTaskItem
	bool IsSoft();//APBGame.cTaskItem.IsSoft
	unsigned char RetDeliverableState();//APBGame.cTaskItem.RetDeliverableState
};
UClass* AcTaskItem::pClassPointer = NULL;

//0x000095 (0x0002F5 - 0x000260)
//cTaskItemAudioProxy[0x10390130]
class AcTaskItemAudioProxy : public AActor
{
public:
	class AcTaskItem*                                  m_pTaskItemOwner;                                 		// 0x000260 (0x0004)              
	class AcAPBPlayerController*                       m_pCurrentMusicOwner;                             		// 0x000264 (0x0004)              
	DWORD                                              m_pTaskItemEffectType;                            		// 0x000268 (0x0004)              
	int                                                m_nTaskItemEffectType;                            		// 0x00026C (0x0004)              
	unsigned long                                      m_bTimedExplosiveEnabled : 1;                     		// 0x000270 (0x0004) [0x00000001] 
	int                                                m_nBoomBoxType;                                   		// 0x000274 (0x0004)              
	DWORD                                              m_pBoomBoxType;                                   		// 0x000278 (0x0004)              
	struct FBoomBoxPlaybackInfo                        m_PlaybackInfo;                                   		// 0x00027C (0x0050)              
	class UcAudioTaskItemInterface*                    m_AudioInterface;                                 		// 0x0002CC (0x0004)              
	int                                                m_nCharacterOwnerUID;                             		// 0x0002D0 (0x0004)              
	int                                                m_nFriendlyHUDMarkerID;                           		// 0x0002D4 (0x0004)              
	int                                                m_nOppositionHUDMarkerID;                         		// 0x0002D8 (0x0004)              
	int                                                m_nAttachedPlayer;                                		// 0x0002DC (0x0004)              
	int                                                m_nAttachedGroup;                                 		// 0x0002E0 (0x0004)              
	int                                                m_nAttachedTeam;                                  		// 0x0002E4 (0x0004)              
	TArray<int>                                        m_aAttachedOpposition;                            		// 0x0002E8 (0x000C)              
	unsigned char                                      m_eAttachedFriendlyFaction;                       		// 0x0002F4 (0x0001)              PROPERTY: etFaction

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskItemAudioProxy");
		return pClassPointer;
	};

public:
	void StopGiftBoxAudio();//APBGame.cTaskItemAudioProxy.StopGiftBoxAudio
	void UpdateEffectType();//APBGame.cTaskItemAudioProxy.UpdateEffectType
	void ReplicatedEvent(struct FName VarName);//APBGame.cTaskItemAudioProxy.ReplicatedEvent
	void StartGiftBoxAudio(struct FString i_sEvent,struct FString i_sStopEvent);//APBGame.cTaskItemAudioProxy.StartGiftBoxAudio
};
UClass* AcTaskItemAudioProxy::pClassPointer = NULL;

//0x000008 (0x000280 - 0x000278)
//cAPBEmitter[0x103DFCF0]
class AcAPBEmitter : public AEmitter
{
public:
	class USoundCue*                                   m_Sound;                                          		// 0x000278 (0x0004)              
	class UParticleSystem*                             m_ParticleSystem;                                 		// 0x00027C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBEmitter");
		return pClassPointer;
	};

public:
	void PostBeginPlay();//APBGame.cAPBEmitter.PostBeginPlay
};
UClass* AcAPBEmitter::pClassPointer = NULL;

//0x000000 (0x000280 - 0x000280)
//cSpawnedAPBEmitter[0x103DFE20]
class AcSpawnedAPBEmitter : public AcAPBEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSpawnedAPBEmitter");
		return pClassPointer;
	};
};
UClass* AcSpawnedAPBEmitter::pClassPointer = NULL;

//0x000064 (0x0002E4 - 0x000280)
//cClientHUDMarker[0x10390000]
class AcClientHUDMarker : public AcSpawnedAPBEmitter
{
public:
	DWORD                                              VfTable_IiHUDMarker;                              		// 0x000280 (0x0004)              
	struct FHUDMarkerData                              m_HUDMarkerData;                                  		// 0x000284 (0x0020)              
	unsigned long                                      m_bUpdatingOffsetLocation : 1;                    		// 0x0002A4 (0x0004) [0x00000001] 
	unsigned long                                      m_bShowTaskMarker : 1;                            		// 0x0002A4 (0x0004) [0x00000002] 
	unsigned long                                      m_bCachedAutoRouteOffsetValid : 1;                		// 0x0002A4 (0x0004) [0x00000004] 
	DWORD                                              m_pVisualData;                                    		// 0x0002A8 (0x0004)              
	DWORD                                              m_pDistrictMapMarkerData;                         		// 0x0002AC (0x0004)              
	DWORD                                              m_pTaskMarkerData;                                		// 0x0002B0 (0x0004)              
	float                                              m_fPingOpacity;                                   		// 0x0002B4 (0x0004)              
	float                                              m_fFlashingOpacity;                               		// 0x0002B8 (0x0004)              
	float                                              m_fFlashingDelta;                                 		// 0x0002BC (0x0004)              
	struct FString                                     m_sText;                                          		// 0x0002C0 (0x000C)              
	FVector3                                           m_vecCachedAutoRouteOffset;                       		// 0x0002CC (0x000C)              
	TArray<int>                                        m_arrCharacterTags;                               		// 0x0002D8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cClientHUDMarker");
		return pClassPointer;
	};

public:
	FVector3 GetLocation();//APBGame.cClientHUDMarker.GetLocation
	unsigned char GetCategory();//APBGame.cClientHUDMarker.GetCategory
	void SetUserData2(int nUserData2);//APBGame.cClientHUDMarker.SetUserData2
	void SetIsBeingModified(bool bIsBeingModified);//APBGame.cClientHUDMarker.SetIsBeingModified
	void SetUserData(int nUserData);//APBGame.cClientHUDMarker.SetUserData
	void SetType(unsigned char eType);//APBGame.cClientHUDMarker.SetType
	void SetIsCharacterName(bool bIsCharacterName);//APBGame.cClientHUDMarker.SetIsCharacterName
	void SetState(unsigned char eState);//APBGame.cClientHUDMarker.SetState
	void SetOffsetOverride(unsigned char eOffsetOverride,unsigned char eAutoRouteData);//APBGame.cClientHUDMarker.SetOffsetOverride
	void SetLinkedActor(class AActor* pLinkedActor,FVector3 ActorPosition);//APBGame.cClientHUDMarker.SetLinkedActor
	void SetText(struct FString sText);//APBGame.cClientHUDMarker.SetText
};
UClass* AcClientHUDMarker::pClassPointer = NULL;

//0x00000C (0x0002F0 - 0x0002E4)
//cRemoteHUDMarker[0x103DFBC0]
class AcRemoteHUDMarker : public AcClientHUDMarker
{
public:
	int                                                m_nServerID;                                      		// 0x0002E4 (0x0004)              
	double                                             m_fLastUpdateTime;                                		// 0x0002E8 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cRemoteHUDMarker");
		return pClassPointer;
	};
};
UClass* AcRemoteHUDMarker::pClassPointer = NULL;

//0x00010C (0x00014C - 0x000040)
//cHUDMarkerManager[0x103DFA90]
class UcHUDMarkerManager : public UObject
{
public:
	TArray<class UcServerHUDMarker*>                   m_ServerHUDMarkers;                               		// 0x000040 (0x000C)              
	TArray<class AcClientHUDMarker*>                   m_ClientHUDMarkers;                               		// 0x00004C (0x000C)              
	TArray<class AcRemoteHUDMarker*>                   m_RemoteHUDMarkers;                               		// 0x000058 (0x000C)              
	struct FMap_Mirror                                 m_RemoteMap;                                      		// 0x000064 (0x003C)              
	struct FMap_Mirror                                 m_ServerMap;                                      		// 0x0000A0 (0x003C)              
	int                                                m_nFreeMarkerID;                                  		// 0x0000DC (0x0004)              
	int                                                m_nPlayerCategoryFilter;                          		// 0x0000E0 (0x0004)              
	int                                                m_nServerCategoryFilter;                          		// 0x0000E4 (0x0004)              
	unsigned long                                      m_bShowWSMarkers : 1;                             		// 0x0000E8 (0x0004) [0x00000001] 
	TArray<struct FScriptDelegate>                     m_OnHUDMarkersChangedCallbacks;                   		// 0x0000EC (0x000C)              
	TArray<struct FHUDMarkerRadarJammer>               m_aRadarJammingCharacters;                        		// 0x0000F8 (0x000C)              
	unsigned char                                      m_mapElectiveSpawningMap[0x3C];                   		// 0x000104 (0x003C)              UNKNOWN PROPERTY: MapProperty
	struct FScriptDelegate                             __OnHUDMarkersChanged__Delegate;                  		// 0x000140 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHUDMarkerManager");
		return pClassPointer;
	};

public:
	class UcHUDMarkerManager* GetInstanceScript();//APBGame.cHUDMarkerManager.GetInstanceScript
	bool SetType(int nMarkerID,unsigned char eType);//APBGame.cHUDMarkerManager.SetType
	bool SetUserData2(int nMarkerID,int nUserData2);//APBGame.cHUDMarkerManager.SetUserData2
	bool DetachFromCollisionGroup(int nServerMarkerID,int nCG);//APBGame.cHUDMarkerManager.DetachFromCollisionGroup
	bool SetState(int nMarkerID,unsigned char eState);//APBGame.cHUDMarkerManager.SetState
	bool DestroyMarker(int* nMarkerID);//APBGame.cHUDMarkerManager.DestroyMarker
	bool DestroyRemoteMarker(int nServerMarkerID);//APBGame.cHUDMarkerManager.DestroyRemoteMarker
	bool AttachToCharacter(int nServerMarkerID,int nCharacterID);//APBGame.cHUDMarkerManager.AttachToCharacter
	bool SetIsCharacterName(int nMarkerID,bool bIsCharacterName);//APBGame.cHUDMarkerManager.SetIsCharacterName
	bool AttachToCollisionGroup(int nServerMakerID,int nCG);//APBGame.cHUDMarkerManager.AttachToCollisionGroup
	int ConstructRemoteMarker(struct FHUDMarkerData markerData,int nServerID);//APBGame.cHUDMarkerManager.ConstructRemoteMarker
	bool ServerShowMarkerType(unsigned char eCategory,int nCharacterID,bool bShow);//APBGame.cHUDMarkerManager.ServerShowMarkerType
	void AddOnHUDMarkersChangedCallback(struct FScriptDelegate Callback);//APBGame.cHUDMarkerManager.AddOnHUDMarkersChangedCallback
	void NotifyHUDMarkersChanged();//APBGame.cHUDMarkerManager.NotifyHUDMarkersChanged
	bool SetOffsetOverride(int nMarkerID,unsigned char eOffsetOverride,unsigned char eAutoRouteData);//APBGame.cHUDMarkerManager.SetOffsetOverride
	class AcClientHUDMarker* GetClientHUDMarker(int nClientMarkerID);//APBGame.cHUDMarkerManager.GetClientHUDMarker
	bool DetatchFromCharacter(int nServerMarkerID,int nCharacterID);//APBGame.cHUDMarkerManager.DetatchFromCharacter
	bool AttachToFaction(int nServerMarkerID,unsigned char eFaction);//APBGame.cHUDMarkerManager.AttachToFaction
	double GetWorldTime();//APBGame.cHUDMarkerManager.GetWorldTime
	int ConstructClientMarker(class AActor* pLinkedActor,unsigned char eType);//APBGame.cHUDMarkerManager.ConstructClientMarker
	bool SetUserData(int nMarkerID,int nUserData);//APBGame.cHUDMarkerManager.SetUserData
	int OnRecieveReplicatedText(int nServerID,struct FString sText);//APBGame.cHUDMarkerManager.OnRecieveReplicatedText
	bool IsCategoryVisible(unsigned char eCategory);//APBGame.cHUDMarkerManager.IsCategoryVisible
	int ConstructServerMarker(class AActor* pLinkedActor,unsigned char eType);//APBGame.cHUDMarkerManager.ConstructServerMarker
	void OnHUDMarkersChanged();//APBGame.cHUDMarkerManager.OnHUDMarkersChanged
	bool ClientShowMarkerType(unsigned char eCategory,bool bShow);//APBGame.cHUDMarkerManager.ClientShowMarkerType
	void RemoveOnHUDMarkersChangedCallbacks(struct FScriptDelegate Callback);//APBGame.cHUDMarkerManager.RemoveOnHUDMarkersChangedCallbacks
	bool SetIsBeingModified(int nMarkerID,bool bIsBeingModified);//APBGame.cHUDMarkerManager.SetIsBeingModified
	class UcServerHUDMarker* GetServerHUDMarker(int nServerMarkerID);//APBGame.cHUDMarkerManager.GetServerHUDMarker
	bool SetNeverUpdate(int nServerMarkerID,bool bNeverUpdate);//APBGame.cHUDMarkerManager.SetNeverUpdate
	void UpdateTick();//APBGame.cHUDMarkerManager.UpdateTick
	void ClientShowWSMarkers(bool bShow);//APBGame.cHUDMarkerManager.ClientShowWSMarkers
	bool SetText(int nMarkerID,struct FString sText);//APBGame.cHUDMarkerManager.SetText
	class AcRemoteHUDMarker* GetRemoteHUDMarker(int nServerMarkerID);//APBGame.cHUDMarkerManager.GetRemoteHUDMarker
};
UClass* UcHUDMarkerManager::pClassPointer = NULL;

//0x000968 (0x000BC8 - 0x000260)
//cReplicatedHUDMarkerGroup[0x103DF960]
class AcReplicatedHUDMarkerGroup : public AReplicationInfo
{
public:
	class APlayerController*                           m_pCharacterPC;                                   		// 0x000260 (0x0004)              
	struct FHUDMarkerUpdateInfo                        m_aHUDMarkerUpdates[0x64];                        		// 0x000264 (0x0960)              
	int                                                m_nSlotsUsed;                                     		// 0x000BC4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReplicatedHUDMarkerGroup");
		return pClassPointer;
	};

public:
	void ReplicatedArrayEvent(struct FName VarName,int nElement);//APBGame.cReplicatedHUDMarkerGroup.ReplicatedArrayEvent
	void OnHUDMarkerUpdated(int nIndex);//APBGame.cReplicatedHUDMarkerGroup.OnHUDMarkerUpdated
};
UClass* AcReplicatedHUDMarkerGroup::pClassPointer = NULL;

//0x000090 (0x0000D0 - 0x000040)
//cServerHUDMarker[0x103DF830]
class UcServerHUDMarker : public UObject
{
public:
	DWORD                                              VfTable_IiHUDMarker;                              		// 0x000040 (0x0004)              
	struct FHUDMarkerData                              m_HUDMarkerData;                                  		// 0x000044 (0x0020)              
	int                                                m_nID;                                            		// 0x000064 (0x0004)              
	TArray<int>                                        m_AttachedTeams;                                  		// 0x000068 (0x000C)              
	TArray<int>                                        m_AttachedGroups;                                 		// 0x000074 (0x000C)              
	TArray<int>                                        m_AttachedCharacters;                             		// 0x000080 (0x000C)              
	TArray<int>                                        m_AttachedCollisionGroups;                        		// 0x00008C (0x000C)              
	TArray<class AcAPBPlayerController*>               m_membershipList;                                 		// 0x000098 (0x000C)              
	float                                              m_fRadius;                                        		// 0x0000A4 (0x0004)              
	unsigned char                                      m_eFactionFilter;                                 		// 0x0000A8 (0x0001)              PROPERTY: etFaction
	unsigned char                                      m_eLastReplicatedState;                           		// 0x0000A9 (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      _0x0000AA[0x2];                                   		// 0x0000AA (0x0002) MISSED OFFSET
	double                                             m_fLastReplicatedTime;                            		// 0x0000AC (0x0008)              
	unsigned long                                      m_bNeverUpdate : 1;                               		// 0x0000B4 (0x0004) [0x00000001] 
	unsigned long                                      m_bCachedAutoRouteOffsetValid : 1;                		// 0x0000B4 (0x0004) [0x00000002] 
	unsigned long                                      m_bMayBeUnlinked : 1;                             		// 0x0000B4 (0x0004) [0x00000004] 
	unsigned long                                      m_bBulkUpdate : 1;                                		// 0x0000B4 (0x0004) [0x00000008] 
	unsigned long                                      m_bTextChanged : 1;                               		// 0x0000B4 (0x0004) [0x00000010] 
	struct FString                                     m_sText;                                          		// 0x0000B8 (0x000C)              
	FVector3                                           m_vecCachedAutoRouteOffset;                       		// 0x0000C4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cServerHUDMarker");
		return pClassPointer;
	};

public:
	void SetLinkedActor(class AActor* pLinkedActor,FVector3 ActorPosition);//APBGame.cServerHUDMarker.SetLinkedActor
	void SetText(struct FString sText);//APBGame.cServerHUDMarker.SetText
	void SetIsCharacterName(bool bIsCharacterName);//APBGame.cServerHUDMarker.SetIsCharacterName
	void SetUserData(int nUserData);//APBGame.cServerHUDMarker.SetUserData
	void SetType(unsigned char eType);//APBGame.cServerHUDMarker.SetType
	void ReplicateThroughPC(unsigned char eReplicationType,class AcAPBPlayerController* pPC);//APBGame.cServerHUDMarker.ReplicateThroughPC
	void SetOffsetOverride(unsigned char eOffsetOverride,unsigned char eAutoRouteData);//APBGame.cServerHUDMarker.SetOffsetOverride
	void EndBulkUpdate();//APBGame.cServerHUDMarker.EndBulkUpdate
	void SetState(unsigned char eState);//APBGame.cServerHUDMarker.SetState
	void SetIsBeingModified(bool bIsBeingModified);//APBGame.cServerHUDMarker.SetIsBeingModified
	struct FHUDMarkerData GetHUDMarkerData(class AcAPBPlayerController* i_pPC);//APBGame.cServerHUDMarker.GetHUDMarkerData
	void ReplicateToClients(unsigned char eReplicationType);//APBGame.cServerHUDMarker.ReplicateToClients
	FVector3 GetLocation();//APBGame.cServerHUDMarker.GetLocation
	void SetUserData2(int nUserData2);//APBGame.cServerHUDMarker.SetUserData2
	void BeginBulkUpdate();//APBGame.cServerHUDMarker.BeginBulkUpdate
};
UClass* UcServerHUDMarker::pClassPointer = NULL;

//0x000068 (0x000138 - 0x0000D0)
//cServerHUDMarker_Targeting[0x103DF700]
class UcServerHUDMarker_Targeting : public UcServerHUDMarker
{
public:
	class UObject*                                     m_PvPFlagsGCRef;                                  		// 0x0000D0 (0x0004)              
	DWORD                                              m_PvPFlags;                                       		// 0x0000D4 (0x0004)              
	unsigned char                                      m_FriendlyType;                                   		// 0x0000D8 (0x0001)              PROPERTY: 
	unsigned char                                      m_HostileType;                                    		// 0x0000D9 (0x0001)              PROPERTY: 
	unsigned char                                      m_FriendlyState;                                  		// 0x0000DA (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      m_HostileState;                                   		// 0x0000DB (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      m_LastFriendlyState;                              		// 0x0000DC (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      m_LastHostileState;                               		// 0x0000DD (0x0001)              PROPERTY: etHUDMarkerState
	unsigned char                                      _0x0000DE[0x2];                                   		// 0x0000DE (0x0002) MISSED OFFSET
	double                                             m_fLastFriendlyReplicatedTime;                    		// 0x0000E0 (0x0008)              
	double                                             m_fLastHostileReplicatedTime;                     		// 0x0000E8 (0x0008)              
	double                                             m_fLastWeaponFireReplicatedTime;                  		// 0x0000F0 (0x0008)              
	unsigned long                                      m_bFriendlyBeingModified : 1;                     		// 0x0000F8 (0x0004) [0x00000001] 
	unsigned long                                      m_bHostileBeingModified : 1;                      		// 0x0000F8 (0x0004) [0x00000002] 
	unsigned long                                      m_bIsFiring : 1;                                  		// 0x0000F8 (0x0004) [0x00000004] 
	unsigned long                                      m_bWasFiring : 1;                                 		// 0x0000F8 (0x0004) [0x00000008] 
	unsigned char                                      m_ReplicationList[0x3C];                          		// 0x0000FC (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cServerHUDMarker_Targeting");
		return pClassPointer;
	};

public:
	void UpdateWeaponPing(float i_fDistance);//APBGame.cServerHUDMarker_Targeting.UpdateWeaponPing
	void ReplicateToClients(unsigned char eReplicationType);//APBGame.cServerHUDMarker_Targeting.ReplicateToClients
	void SetTypesAndStates(unsigned char eNeutralType,unsigned char eFriendlyType,unsigned char eHostileType,unsigned char i_eNeutralState,unsigned char i_eFriendlyState,unsigned char i_eHostileState,bool i_bForceReplicate);//APBGame.cServerHUDMarker_Targeting.SetTypesAndStates
	void SetFriendlyBeingModified(bool i_bModified);//APBGame.cServerHUDMarker_Targeting.SetFriendlyBeingModified
	struct FHUDMarkerData GetHUDMarkerData(class AcAPBPlayerController* i_pPC);//APBGame.cServerHUDMarker_Targeting.GetHUDMarkerData
	void SetStates(unsigned char i_eNeutralState,unsigned char i_eFriendlyState,unsigned char i_eHostileState);//APBGame.cServerHUDMarker_Targeting.SetStates
	void SetUserData2(int nUserData2);//APBGame.cServerHUDMarker_Targeting.SetUserData2
	void SetTypes(unsigned char eNeutralType,unsigned char eFriendlyType,unsigned char eHostileType);//APBGame.cServerHUDMarker_Targeting.SetTypes
	void SetHostileBeingModified(bool i_bModified);//APBGame.cServerHUDMarker_Targeting.SetHostileBeingModified
	void SetNeutralBeingModified(bool i_bModified);//APBGame.cServerHUDMarker_Targeting.SetNeutralBeingModified
};
UClass* UcServerHUDMarker_Targeting::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//cTestItem[0x103DF5D0]
class AcTestItem : public AActor
{
public:
	int                                                m_HUDMarkerID;                                    		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTestItem");
		return pClassPointer;
	};

public:
	void Destroyed();//APBGame.cTestItem.Destroyed
	void PostBeginPlay();//APBGame.cTestItem.PostBeginPlay
	void NativePostBeginPlay();//APBGame.cTestItem.NativePostBeginPlay
};
UClass* AcTestItem::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iHUDMarker[0x103DF4A0]
class UiHUDMarker : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iHUDMarker");
		return pClassPointer;
	};

public:
	void SetText(struct FString sText);//APBGame.iHUDMarker.SetText
	void SetIsCharacterName(bool bIsCharacterName);//APBGame.iHUDMarker.SetIsCharacterName
	void SetOffsetOverride(unsigned char eOffsetOverride,unsigned char eAutoRouteData);//APBGame.iHUDMarker.SetOffsetOverride
	void SetState(unsigned char eState);//APBGame.iHUDMarker.SetState
	void SetLinkedActor(class AActor* pLinkedActor,FVector3 ActorPosition);//APBGame.iHUDMarker.SetLinkedActor
	void SetType(unsigned char eType);//APBGame.iHUDMarker.SetType
	void SetUserData2(int nUserData2);//APBGame.iHUDMarker.SetUserData2
	void SetUserData(int nUserData);//APBGame.iHUDMarker.SetUserData
	void SetIsBeingModified(bool bIsBeingModified);//APBGame.iHUDMarker.SetIsBeingModified
};
UClass* UiHUDMarker::pClassPointer = NULL;

//0x000018 (0x000078 - 0x000060)
//cCCShoppingCart[0x103DF370]
class UcCCShoppingCart : public UcUIListProvider
{
public:
	TArray<struct FCartItem>                           m_aCartItems;                                     		// 0x000060 (0x000C)              
	class UGolemDescriptor*                            m_pOldDescriptor;                                 		// 0x00006C (0x0004)              
	class UGolemDescriptor*                            m_pDescriptor;                                    		// 0x000070 (0x0004)              
	unsigned long                                      m_bLocked : 1;                                    		// 0x000074 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCCShoppingCart");
		return pClassPointer;
	};
};
UClass* UcCCShoppingCart::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDLCEditor[0x103DF110]
class UcSDDLCEditor : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDLCEditor");
		return pClassPointer;
	};
};
UClass* UcSDDLCEditor::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDCSA[0x103DEFE0]
class UcSDDCSA : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDCSA");
		return pClassPointer;
	};
};
UClass* UcSDDCSA::pClassPointer = NULL;

//0x000000 (0x000278 - 0x000278)
//cPooledAPBEmitter[0x103DEEB0]
class AcPooledAPBEmitter : public AEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPooledAPBEmitter");
		return pClassPointer;
	};

public:
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);//APBGame.cPooledAPBEmitter.OnParticleSystemFinished
};
UClass* AcPooledAPBEmitter::pClassPointer = NULL;

//0x0000E0 (0x000340 - 0x000260)
//cLegacyMissionObjective[0x103DED80]
class AcLegacyMissionObjective : public AActor
{
public:
	DWORD                                              VfTable_IMissionObjective;                        		// 0x000260 (0x0004)              
	double                                             m_fObjectiveBeginTimeStamp;                       		// 0x000264 (0x0008)              
	TArray<class UiBombTarget*>                        m_aBombTargets;                                   		// 0x00026C (0x000C)              
	int                                                m_nNumberOfBombsSet;                              		// 0x000278 (0x0004)              
	int                                                m_nNumberOfBombsExploded;                         		// 0x00027C (0x0004)              
	float                                              m_fCachedBombTimeRemaining;                       		// 0x000280 (0x0004)              
	int                                                m_nReplicatedBombTimeRemaining;                   		// 0x000284 (0x0004)              
	unsigned long                                      m_bReplicatedIsBombTimerActive : 1;               		// 0x000288 (0x0004) [0x00000001] 
	unsigned long                                      m_bActive : 1;                                    		// 0x000288 (0x0004) [0x00000002] 
	unsigned long                                      m_bCleaningTaskItems : 1;                         		// 0x000288 (0x0004) [0x00000004] 
	int                                                m_nReplicatedArmedGuardTimeRemaining;             		// 0x00028C (0x0004)              
	int                                                m_nReplicatedNumberOfBombTargets;                 		// 0x000290 (0x0004)              
	int                                                m_nEscapeCurrentPenaltySeconds;                   		// 0x000294 (0x0004)              
	int                                                m_nEscapeBarLimit;                                		// 0x000298 (0x0004)              
	int                                                m_nEscapeBar;                                     		// 0x00029C (0x0004)              
	DWORD                                              m_pEscapeInfo;                                    		// 0x0002A0 (0x0004)              
	unsigned char                                      m_eTaskObjectiveState;                            		// 0x0002A4 (0x0001)              PROPERTY: etTaskObjectiveState
	unsigned char                                      m_eSideFaction;                                   		// 0x0002A5 (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x0002A6[0x2];                                   		// 0x0002A6 (0x0002) MISSED OFFSET
	class AcLegacyMission*                             m_TaskDescription;                                		// 0x0002A8 (0x0004)              
	int                                                m_nSddTaskObjectiveRow;                           		// 0x0002AC (0x0004)              
	class AcTaskTargetAllocation*                      m_TaskTargetAllocation;                           		// 0x0002B0 (0x0004)              
	int                                                m_nTargetsTriggeredOwners;                        		// 0x0002B4 (0x0004)              
	int                                                m_nTargetsTriggeredOpposition;                    		// 0x0002B8 (0x0004)              
	int                                                m_nTaskItemsSpawned;                              		// 0x0002BC (0x0004)              
	int                                                m_nTaskItemsDeliveredOwners;                      		// 0x0002C0 (0x0004)              
	int                                                m_nTaskItemsDeliveredOpposition;                  		// 0x0002C4 (0x0004)              
	int                                                m_nVehiclesDelivered;                             		// 0x0002C8 (0x0004)              
	int                                                m_nObjectiveHoldPointsOwners;                     		// 0x0002CC (0x0004)              
	int                                                m_nObjectiveHoldPointsOpposition;                 		// 0x0002D0 (0x0004)              
	int                                                m_nCheckpointsReachedByClient;                    		// 0x0002D4 (0x0004)              
	DWORD                                              m_pOwningSide;                                    		// 0x0002D8 (0x0004)              
	TArray<class AcTaskItem*>                          m_TaskItems;                                      		// 0x0002DC (0x000C)              
	struct FTaskObjective                              m_SddTaskObjective;                               		// 0x0002E8 (0x0050)              
	DWORD                                              m_pSddTaskOperation;                              		// 0x000338 (0x0004)              
	DWORD                                              m_pSddTaskOperationCategory;                      		// 0x00033C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLegacyMissionObjective");
		return pClassPointer;
	};

public:
	int RetCheckpointsReachedByThisClient();//APBGame.cLegacyMissionObjective.RetCheckpointsReachedByThisClient
	void OnBombTimerCompleted();//APBGame.cLegacyMissionObjective.OnBombTimerCompleted
	int RetNumberOfBombsActive();//APBGame.cLegacyMissionObjective.RetNumberOfBombsActive
	void OnCheckpointReachedByThisClient(class AActor* pActor);//APBGame.cLegacyMissionObjective.OnCheckpointReachedByThisClient
	int RetNumberOfBombsExploded();//APBGame.cLegacyMissionObjective.RetNumberOfBombsExploded
	void UpdateEscapeState();//APBGame.cLegacyMissionObjective.UpdateEscapeState
	void ReplicatedEvent(struct FName VarName);//APBGame.cLegacyMissionObjective.ReplicatedEvent
	void PostBeginPlay();//APBGame.cLegacyMissionObjective.PostBeginPlay
	void OnTaskObjectiveReplicated();//APBGame.cLegacyMissionObjective.OnTaskObjectiveReplicated
	bool RetReplicatedIsBombTimerActive();//APBGame.cLegacyMissionObjective.RetReplicatedIsBombTimerActive
	bool IsBombTimerActive();//APBGame.cLegacyMissionObjective.IsBombTimerActive
	int RetNumberOfBombTargets();//APBGame.cLegacyMissionObjective.RetNumberOfBombTargets
	float RetBombTimeRemaining();//APBGame.cLegacyMissionObjective.RetBombTimeRemaining
};
UClass* AcLegacyMissionObjective::pClassPointer = NULL;

//0x0000B8 (0x000318 - 0x000260)
//cTaskTargetAllocation[0x103DEC50]
class AcTaskTargetAllocation : public AActor
{
public:
	class AcLegacyMission*                             m_TaskDescription;                                		// 0x000260 (0x0004)              
	int                                                m_nAllocationIndex;                               		// 0x000264 (0x0004)              
	unsigned long                                      m_bIsOwnerObjective : 1;                          		// 0x000268 (0x0004) [0x00000001] 
	unsigned long                                      m_bDebugBypassConstraintChecks : 1;               		// 0x000268 (0x0004) [0x00000002] 
	struct FTaskTargetAllocation                       m_SddTaskTargetAllocation;                        		// 0x00026C (0x003C)              
	struct FTaskTargetType                             m_SddTaskTargetType;                              		// 0x0002A8 (0x0038)              
	struct FTaskTargetClass                            m_SddTaskTargetClass;                             		// 0x0002E0 (0x0008)              
	TArray<struct FAllocatedTaskTarget>                m_aTargets;                                       		// 0x0002E8 (0x000C)              
	class AcDistrictBlock*                             m_pDistrictBlock;                                 		// 0x0002F4 (0x0004)              
	int                                                m_nTargetReserveCount;                            		// 0x0002F8 (0x0004)              
	TArray<class AcDistrictBlock*>                     m_PotentialBlocks;                                		// 0x0002FC (0x000C)              
	class AcTaskTargetAllocation*                      m_pParentConstraint;                              		// 0x000308 (0x0004)              
	TArray<class AcTaskTargetAllocation*>              m_ChildConstraints;                               		// 0x00030C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskTargetAllocation");
		return pClassPointer;
	};

public:
	void PostBeginPlay();//APBGame.cTaskTargetAllocation.PostBeginPlay
	void ProcessPendingTargetReallocations();//APBGame.cTaskTargetAllocation.ProcessPendingTargetReallocations
};
UClass* AcTaskTargetAllocation::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//MissionObjective[0x103DEB20]
class UMissionObjective : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.MissionObjective");
		return pClassPointer;
	};
};
UClass* UMissionObjective::pClassPointer = NULL;

//0x00005C (0x0002BC - 0x000260)
//cDistrictActors[0x103DE9F0]
class AcDistrictActors : public AActor
{
public:
	TArray<class AcContact*>                           m_Contacts;                                       		// 0x000260 (0x000C)              
	TArray<class AcPlayerCharacterSpawnZone*>          m_EnforcerSpawnZones;                             		// 0x00026C (0x000C)              
	TArray<class AcPlayerCharacterSpawnZone*>          m_CriminalSpawnZones;                             		// 0x000278 (0x000C)              
	TArray<class AcPlayerCharacterSpawnZone*>          m_AllSpawnZones;                                  		// 0x000284 (0x000C)              
	TArray<class AcPlayerCharacterMissionSpawnZone*>   m_MissionSpawnZones;                              		// 0x000290 (0x000C)              
	TArray<class AcDistrictBlock*>                     m_DistrictBlocks;                                 		// 0x00029C (0x000C)              
	TArray<class AcOpenWorldDropOff*>                  m_OpenWorldDropOffs;                              		// 0x0002A8 (0x000C)              
	unsigned long                                      m_bPreloadCommonAssets : 1;                       		// 0x0002B4 (0x0004) [0x00000001] 
	unsigned long                                      m_bStrictTaskTargetValidation : 1;                		// 0x0002B4 (0x0004) [0x00000002] 
	unsigned long                                      m_bChooseFirstStageTargetsNearGroupLeader : 1;    		// 0x0002B4 (0x0004) [0x00000004] 
	float                                              m_fMaxFirstStageTargetRadius;                     		// 0x0002B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDistrictActors");
		return pClassPointer;
	};

public:
	void InitialiseContactMarkers(class AcAPBPlayerController* pPC);//APBGame.cDistrictActors.InitialiseContactMarkers
	void LevelLoadsComplete();//APBGame.cDistrictActors.LevelLoadsComplete
	void LogDistrictBlockContents(int nDistrictBlockSddRow);//APBGame.cDistrictActors.LogDistrictBlockContents
};
UClass* AcDistrictActors::pClassPointer = NULL;

//0x00082C (0x000C64 - 0x000438)
//cAPBCamera[0x103DE8C0]
class AcAPBCamera : public ACamera
{
public:
	unsigned long                                      bResetCameraInterpolation : 1;                    		// 0x000438 (0x0004) [0x00000001] 
	unsigned long                                      m_bUseCameraAdjustmentBlendNextUpdate : 1;        		// 0x000438 (0x0004) [0x00000002] 
	unsigned long                                      m_bUseWorstLocationBlendNextUpdate : 1;           		// 0x000438 (0x0004) [0x00000004] 
	unsigned long                                      m_bUseIdealLocationBlendNextUpdate : 1;           		// 0x000438 (0x0004) [0x00000008] 
	unsigned long                                      m_bNeededToDoInterpToLastUpdate : 1;              		// 0x000438 (0x0004) [0x00000010] 
	unsigned long                                      m_bDoHiddenObjects : 1;                           		// 0x000438 (0x0004) [0x00000020] 
	unsigned long                                      m_bDoPenetrationPrevention : 1;                   		// 0x000438 (0x0004) [0x00000040] 
	unsigned long                                      m_bAlwaysHideLocalActor : 1;                      		// 0x000438 (0x0004) [0x00000080] 
	unsigned long                                      m_bCameraRightSideOld : 1;                        		// 0x000438 (0x0004) [0x00000100] 
	unsigned long                                      m_bCalculateOnServer : 1;                         		// 0x000438 (0x0004) [0x00000200] 
	unsigned long                                      m_bSetLastActualCamLoc : 1;                       		// 0x000438 (0x0004) [0x00000400] 
	unsigned long                                      m_bLookBehind : 1;                                		// 0x000438 (0x0004) [0x00000800] 
	FVector3                                           LastActualCameraOrigin;                           		// 0x00043C (0x000C)              
	float                                              PenetrationBlendOutTime;                          		// 0x000448 (0x0004)              
	float                                              PenetrationBlendInTime;                           		// 0x00044C (0x0004)              
	float                                              PenetrationBlockedPct;                            		// 0x000450 (0x0004)              
	float                                              PenetrationExtentScale;                           		// 0x000454 (0x0004)              
	FVector3                                           LastActualOriginOffset;                           		// 0x000458 (0x000C)              
	FRotator                                           m_LastActualCameraRotation;                       		// 0x000464 (0x000C)              
	struct FAPBViewAdjustmentData                      m_LastViewAdjustments;                            		// 0x000470 (0x0014)              
	struct FAPBViewAdjustmentData                      m_LastPrimaryViewAdjustments;                     		// 0x000484 (0x0014)              
	struct FAPBViewAdjustmentData                      m_LastSecondaryViewAdjustments;                   		// 0x000498 (0x0014)              
	float                                              LastCamFOV;                                       		// 0x0004AC (0x0004)              
	class UcAPBCameraModeDefault*                      APBCameraModeDefault;                             		// 0x0004B0 (0x0004)              
	class UcAPBCameraModeMarksManShip*                 APBCameraModeMarksManShip;                        		// 0x0004B4 (0x0004)              
	class UcAPBCameraModeDeath*                        APBCameraModeDeath;                               		// 0x0004B8 (0x0004)              
	class UcAPBCameraModeSprinting*                    APBCameraModeSprinting;                           		// 0x0004BC (0x0004)              
	class UcAPBCameraModeADA*                          APBCameraModeADA;                                 		// 0x0004C0 (0x0004)              
	class UcAPBCameraModeLean*                         APBCameraModeLeanTowardScreenCentre;              		// 0x0004C4 (0x0004)              
	class UcAPBCameraModeVehicleUber*                  APBCameraModeVehicleUber;                         		// 0x0004C8 (0x0004)              
	class UcAPBCameraModeVehicleDeath*                 APBCameraModeVehicleDeath;                        		// 0x0004CC (0x0004)              
	class UcAPBCameraModeFly*                          APBCameraModeFly;                                 		// 0x0004D0 (0x0004)              
	class UcAPBCameraModeUnstick*                      APBCameraModeUnstick;                             		// 0x0004D4 (0x0004)              
	class UcAPBCameraModeAttachToActor*                APBCameraModeAttachToActor;                       		// 0x0004D8 (0x0004)              
	class UcAPBCameraModeDirector*                     APBCameraModeDirector;                            		// 0x0004DC (0x0004)              
	class UcAPBCameraModifierScreenShake*              APBCameraModifierScreenShake;                     		// 0x0004E0 (0x0004)              
	class UcAPBCameraModifierHandyCam*                 APBCameraModifierHandyCam;                        		// 0x0004E4 (0x0004)              
	class UcAPBCameraMode*                             CurrentCamMode;                                   		// 0x0004E8 (0x0004)              
	float                                              WorstLocOffSetInterpSpeed;                        		// 0x0004EC (0x0004)              
	FVector3                                           LastWorstLocationOffSet;                          		// 0x0004F0 (0x000C)              
	TArray<struct FPenetrationAvoidanceFeeler>         PenetrationAvoidanceFeelers;                      		// 0x0004FC (0x000C)              
	FVector3                                           m_LastActualCamLoc;                               		// 0x000508 (0x000C)              
	struct FScreenShakeStruct                          m_ScreenShakePresets[0xA];                        		// 0x000514 (0x0460)              
	FVector2                                           m_ClientViewPortSize;                             		// 0x000974 (0x0008)              
	struct FsTargetTypeSettings                        m_TargetTypeSettings[0x4];                        		// 0x00097C (0x02C0)              
	FVector3                                           CameraExtent;                                     		// 0x000C3C (0x000C)              
	FVector3                                           CameraExtentAlreadyHidden;                        		// 0x000C48 (0x000C)              
	float                                              fCameraExtentXY;                                  		// 0x000C54 (0x0004)              
	float                                              fCameraExtentZ;                                   		// 0x000C58 (0x0004)              
	class AActor*                                      m_LastActorUpdated;                               		// 0x000C5C (0x0004)              
	class UcAPBCameraMode*                             m_CamModeLastTick;                                		// 0x000C60 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCamera");
		return pClassPointer;
	};

public:
	void DoPenetrationPrevention(bool bDoPenetrationPrevention);//APBGame.cAPBCamera.DoPenetrationPrevention
	float RetPenetrationBlockedPct();//APBGame.cAPBCamera.RetPenetrationBlockedPct
	void MoveCameraModeOffsets(float fDeltaTime,struct FAPBViewAdjustmentData APBViewAdjustmentDirection,bool bPrimaryAdjustments);//APBGame.cAPBCamera.MoveCameraModeOffsets
	bool SetCameraModeOriginLagSpeed(unsigned char eCameraModeChange,float fLagSpeed);//APBGame.cAPBCamera.SetCameraModeOriginLagSpeed
	void ChangeScreenShakeLocation(int nScreenShake,float fLocationAmplitudeX,float fLocationAmplitudeY,float fLocationAmplitudeZ,float fLocationFrequencyX,float fLocationFrequencyY,float fLocationFrequencyZ);//APBGame.cAPBCamera.ChangeScreenShakeLocation
	void SetDoLookBehind(bool bDoLookBehind);//APBGame.cAPBCamera.SetDoLookBehind
	void ResetPenetration();//APBGame.cAPBCamera.ResetPenetration
	void SetCameraOriginLagSpeed(float fLagSpeed);//APBGame.cAPBCamera.SetCameraOriginLagSpeed
	void AlwaysHideLocalActor(bool bAlwaysHideLocalActor);//APBGame.cAPBCamera.AlwaysHideLocalActor
	void Destroyed();//APBGame.cAPBCamera.Destroyed
	bool SetCameraModeFOV(unsigned char eCameraModeChange,unsigned char ViewPortUse,float FOV);//APBGame.cAPBCamera.SetCameraModeFOV
	void PlayerUpdateCameraNative(class AActor* ActorUpdate,float DeltaTime,struct FTViewTarget* OutVT);//APBGame.cAPBCamera.PlayerUpdateCameraNative
	unsigned char GetCurrentViewPort();//APBGame.cAPBCamera.GetCurrentViewPort
	void SetPenetrationBlockedPct(float fCameraCollideParam);//APBGame.cAPBCamera.SetPenetrationBlockedPct
	void PlayShakePreset(int Preset);//APBGame.cAPBCamera.PlayShakePreset
	class UcAPBCameraMode* GetCameraMode(unsigned char eCameraModeGet);//APBGame.cAPBCamera.GetCameraMode
	void GetPrimaryViewAdjustment(class AActor* ActorUpdate,unsigned char eCurrentViewPortType,FRotator ViewRotation,struct FAPBViewAdjustmentData* ViewAdjustments);//APBGame.cAPBCamera.GetPrimaryViewAdjustment
	void ChangeScreenShakeRotation(int nScreenShake,float fRotationAmplitudeX,float fRotationAmplitudeY,float fRotationAmplitudeZ,float fRotationFrequencyX,float fRotationFrequencyY,float fRotationFrequencyZ);//APBGame.cAPBCamera.ChangeScreenShakeRotation
	bool SetViewTarget(class AActor* NewViewTarget,struct FViewTargetTransitionParams TransitionParams);//APBGame.cAPBCamera.SetViewTarget
	bool GetSecondaryViewAdjustment(class AActor* ActorUpdate,unsigned char eCurrentViewPortType,FRotator ViewRotation,struct FAPBViewAdjustmentData* ViewAdjustments);//APBGame.cAPBCamera.GetSecondaryViewAdjustment
	void SetColorScale(FVector3 NewColorScale);//APBGame.cAPBCamera.SetColorScale
	void ToggleView();//APBGame.cAPBCamera.ToggleView
	void ResetCameraInterpolation();//APBGame.cAPBCamera.ResetCameraInterpolation
	void GetIdealCamera(class AActor* ActorUpdate,FVector3* IdealCameraOrigin,FRotator* IdealCameraRotation);//APBGame.cAPBCamera.GetIdealCamera
	void MoveCameraPosition(float fDeltaTime,float fDirection);//APBGame.cAPBCamera.MoveCameraPosition
	bool IsInLookBehind();//APBGame.cAPBCamera.IsInLookBehind
	void SetUserDefinedViewScalar(unsigned char TargetType,float UserDefinedViewScalar);//APBGame.cAPBCamera.SetUserDefinedViewScalar
	void PreventCameraPenetration(class AActor* ActorUpdate,FVector3* WorstLocation,FVector3* DesiredLocation,float DeltaTime,float* DistBlockedPct,float CameraExtentScale,bool bSingleRayOnly);//APBGame.cAPBCamera.PreventCameraPenetration
	void SetPersistantData(unsigned char TargetType,unsigned char CameraPosition,float UserDefinedViewScalar);//APBGame.cAPBCamera.SetPersistantData
	void RemoveCameraScreenShake(int nScreenShake);//APBGame.cAPBCamera.RemoveCameraScreenShake
	void DoHiddenObjects(bool bDoHiddenObjects);//APBGame.cAPBCamera.DoHiddenObjects
	bool SetCameraModeOffsets(unsigned char eCameraModeChange,struct FAPBViewAdjustmentData APBViewAdjustments,unsigned char ViewPortUse,bool bPrimaryAdjustments);//APBGame.cAPBCamera.SetCameraModeOffsets
};
UClass* AcAPBCamera::pClassPointer = NULL;

//0x000094 (0x0000D4 - 0x000040)
//cAPBCameraMode[0x103DE790]
class UcAPBCameraMode : public UCameraMode
{
public:
	float                                              m_fAdjustmentBlendSpeed;                          		// 0x000040 (0x0004)              
	float                                              m_fFOVBlendSpeed;                                 		// 0x000044 (0x0004)              
	float                                              m_fCameraRollSpeed;                               		// 0x000048 (0x0004)              
	float                                              LazyCamSpeed;                                     		// 0x00004C (0x0004)              
	FVector3                                           WorstLocOffset;                                   		// 0x000050 (0x000C)              
	FVector3                                           m_SecondaryWorstLocOffset;                        		// 0x00005C (0x000C)              
	unsigned long                                      bDoPredictiveAvoidance : 1;                       		// 0x000068 (0x0004) [0x00000001] 
	unsigned long                                      m_bDoPenetrationPrevention : 1;                   		// 0x000068 (0x0004) [0x00000002] 
	unsigned long                                      m_bUseDefaultCameraAdjustments : 1;               		// 0x000068 (0x0004) [0x00000004] 
	unsigned long                                      m_bCanDoLookBehind : 1;                           		// 0x000068 (0x0004) [0x00000008] 
	unsigned long                                      m_bSecondaryViewAdjustmentsDifferFromPrimary : 1; 		// 0x000068 (0x0004) [0x00000010] 
	unsigned long                                      m_bAllowRollAdjust : 1;                           		// 0x000068 (0x0004) [0x00000020] 
	class AcAPBCamera*                                 m_Camera;                                         		// 0x00006C (0x0004)              
	struct FAPBViewAdjustmentData                      m_APBPrimaryViewAdjustments[0x2];                 		// 0x000070 (0x0028)              
	struct FAPBViewAdjustmentData                      m_APBSecondaryViewAdjustments[0x2];               		// 0x000098 (0x0028)              
	float                                              m_fFOVAngle[0x2];                                 		// 0x0000C0 (0x0008)              
	unsigned char                                      m_eCameraMode;                                    		// 0x0000C8 (0x0001)              PROPERTY: etCCameraMode
	unsigned char                                      m_IntendedTargetType;                             		// 0x0000C9 (0x0001)              PROPERTY: etModeIntendedTarget
	unsigned char                                      _0x0000CA[0x2];                                   		// 0x0000CA (0x0002) MISSED OFFSET
	float                                              m_fPrimarySecondaryAdjustmentBlendSpeed;          		// 0x0000CC (0x0004)              
	float                                              m_fPrimarySecondaryRollBlendSpeed;                		// 0x0000D0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraMode");
		return pClassPointer;
	};
};
UClass* UcAPBCameraMode::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//cAPBCameraModeCharacterBase[0x103DE660]
class UcAPBCameraModeCharacterBase : public UcAPBCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeCharacterBase");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeCharacterBase::pClassPointer = NULL;

//0x000014 (0x0000E8 - 0x0000D4)
//cAPBCameraModeADA[0x103DE530]
class UcAPBCameraModeADA : public UcAPBCameraModeCharacterBase
{
public:
	unsigned long                                      m_bFreezeCamera : 1;                              		// 0x0000D4 (0x0004) [0x00000001] 
	unsigned long                                      m_bWasFreezeCamera : 1;                           		// 0x0000D4 (0x0004) [0x00000002] 
	FVector3                                           m_FreezeCamPos;                                   		// 0x0000D8 (0x000C)              
	float                                              m_LowestFreezeCamZCoord;                          		// 0x0000E4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeADA");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeADA::pClassPointer = NULL;

//0x000024 (0x0000F8 - 0x0000D4)
//cAPBCameraModeDeath[0x103DE400]
class UcAPBCameraModeDeath : public UcAPBCameraModeCharacterBase
{
public:
	FVector3                                           m_CameraIdealOrigin;                              		// 0x0000D4 (0x000C)              
	FRotator                                           m_CameraIdealRotation;                            		// 0x0000E0 (0x000C)              
	FVector3                                           m_PawnDeathPositionLastUsed;                      		// 0x0000EC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeDeath");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeDeath::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//cAPBCameraModeDefault[0x103DE2D0]
class UcAPBCameraModeDefault : public UcAPBCameraModeCharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeDefault");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeDefault::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//cAPBCameraModeDirector[0x103DE1A0]
class UcAPBCameraModeDirector : public UcAPBCameraModeCharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeDirector");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeDirector::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//cAPBCameraModeLean[0x103DE070]
class UcAPBCameraModeLean : public UcAPBCameraModeCharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeLean");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeLean::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//cAPBCameraModeMarksManShip[0x103DDF40]
class UcAPBCameraModeMarksManShip : public UcAPBCameraModeCharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeMarksManShip");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeMarksManShip::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//cAPBCameraModeSprinting[0x103DDE10]
class UcAPBCameraModeSprinting : public UcAPBCameraModeCharacterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeSprinting");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeSprinting::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//cAPBCameraModeControllerBase[0x103DDCE0]
class UcAPBCameraModeControllerBase : public UcAPBCameraMode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeControllerBase");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeControllerBase::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//cAPBCameraModeAttachToActor[0x103DDBB0]
class UcAPBCameraModeAttachToActor : public UcAPBCameraModeControllerBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeAttachToActor");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeAttachToActor::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//cAPBCameraModeFly[0x103DDA80]
class UcAPBCameraModeFly : public UcAPBCameraModeControllerBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeFly");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeFly::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//cAPBCameraModeUnstick[0x103DD950]
class UcAPBCameraModeUnstick : public UcAPBCameraModeControllerBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeUnstick");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeUnstick::pClassPointer = NULL;

//0x00009C (0x000170 - 0x0000D4)
//cAPBCameraModeVehicleUber[0x103DD820]
class UcAPBCameraModeVehicleUber : public UcAPBCameraMode
{
public:
	struct FtViewConeParams                            m_ViewConeParams;                                 		// 0x0000D4 (0x000C)              
	struct FtLookBehindParams                          m_LookBehindParams;                               		// 0x0000E0 (0x0008)              
	struct FtAutoRollParams                            m_AutoRollParams;                                 		// 0x0000E8 (0x0008)              
	unsigned long                                      m_bEnableAutoLookbehind : 1;                      		// 0x0000F0 (0x0004) [0x00000001] 
	int                                                m_nCamRollMode;                                   		// 0x0000F4 (0x0004)              
	unsigned char                                      m_CurrentVehicleCamMode;                          		// 0x0000F8 (0x0001)              PROPERTY: ECurrentVehicleCameraMode
	unsigned char                                      _0x0000F9[0x3];                                   		// 0x0000F9 (0x0003) MISSED OFFSET
	class AcAPBVehicle*                                m_CurrentVehicle;                                 		// 0x0000FC (0x0004)              
	DWORD                                              m_pCurrentCamSeatSetup;                           		// 0x000100 (0x0004)              
	FVector3                                           m_vLastGoodLocation;                              		// 0x000104 (0x000C)              
	struct FtLookBehindState                           m_LookBehindState;                                		// 0x000110 (0x0008)              
	struct FtAutoRollState                             m_AutoRollState;                                  		// 0x000118 (0x0018)              
	struct FtDistrictMapState                          m_DistrictMapState;                               		// 0x000130 (0x0014)              
	FRotator                                           m_PrevContrRotatorValue;                          		// 0x000144 (0x000C)              
	FRotator                                           m_PrevVehicleViewRot;                             		// 0x000150 (0x000C)              
	float                                              m_fTimeSinceLastRotChange;                        		// 0x00015C (0x0004)              
	float                                              m_fLastScaledDist;                                		// 0x000160 (0x0004)              
	float                                              m_fCurrentScaledDist;                             		// 0x000164 (0x0004)              
	class AcAPBPawn*                                   m_LastAPBPawnUsing;                               		// 0x000168 (0x0004)              
	class AcAPBVehicleBase*                            m_LastAPBVehicleUsing;                            		// 0x00016C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeVehicleUber");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeVehicleUber::pClassPointer = NULL;

//0x000018 (0x000188 - 0x000170)
//cAPBCameraModeVehicleDeath[0x103DD6F0]
class UcAPBCameraModeVehicleDeath : public UcAPBCameraModeVehicleUber
{
public:
	FVector3                                           m_vLastVehicleLocation;                           		// 0x000170 (0x000C)              
	FRotator                                           m_LastVehicleRotation;                            		// 0x00017C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModeVehicleDeath");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModeVehicleDeath::pClassPointer = NULL;

//0x000018 (0x000060 - 0x000048)
//cAPBCameraModifier[0x103DD5C0]
class UcAPBCameraModifier : public UCameraModifier
{
public:
	unsigned char                                      Priority;                                         		// 0x000048 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000049[0x3];                                   		// 0x000049 (0x0003) MISSED OFFSET
	unsigned long                                      bExclusive : 1;                                   		// 0x00004C (0x0004) [0x00000001] 
	float                                              AlphaInTime;                                      		// 0x000050 (0x0004)              
	float                                              AlphaOutTime;                                     		// 0x000054 (0x0004)              
	float                                              Alpha;                                            		// 0x000058 (0x0004)              
	float                                              TargetAlpha;                                      		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModifier");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModifier::pClassPointer = NULL;

//0x0001F4 (0x000254 - 0x000060)
//cAPBCameraModifierHandyCam[0x103DD490]
class UcAPBCameraModifierHandyCam : public UcAPBCameraModifier
{
public:
	int                                                m_RandSeed;                                       		// 0x000060 (0x0004)              
	struct FHandyCamStruct                             m_HandyCam;                                       		// 0x000064 (0x007C)              
	FRotator                                           m_RotationOffsetToDecay;                          		// 0x0000E0 (0x000C)              
	struct FHandyCamSetUpData                          m_HandyCamPresets[0x6];                           		// 0x0000EC (0x0168)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModifierHandyCam");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModifierHandyCam::pClassPointer = NULL;

//0x00000C (0x00006C - 0x000060)
//cAPBCameraModifierScreenShake[0x103DD360]
class UcAPBCameraModifierScreenShake : public UcAPBCameraModifier
{
public:
	TArray<struct FScreenShakeStruct>                  Shakes;                                           		// 0x000060 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBCameraModifierScreenShake");
		return pClassPointer;
	};
};
UClass* UcAPBCameraModifierScreenShake::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDMail[0x103DD230]
class UcSDDMail : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDMail");
		return pClassPointer;
	};
};
UClass* UcSDDMail::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDMarketplace[0x103DD100]
class UcSDDMarketplace : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDMarketplace");
		return pClassPointer;
	};
};
UClass* UcSDDMarketplace::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cCharacterScorer[0x103DCFD0]
class UcCharacterScorer : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCharacterScorer");
		return pClassPointer;
	};
};
UClass* UcCharacterScorer::pClassPointer = NULL;

//0x000044 (0x0002A4 - 0x000260)
//cItemAttachment[0x103DCEA0]
class AcItemAttachment : public AActor
{
public:
	class UMeshComponent*                              m_Mesh;                                           		// 0x000260 (0x0004)              
	class USkeletalMeshComponent*                      m_OwnerMesh;                                      		// 0x000264 (0x0004)              
	int                                                m_nAudioTypeMangledWwiseID;                       		// 0x000268 (0x0004)              
	DWORD                                              m_Color;                                          		// 0x00026C (0x0004)              
	int                                                m_eInventoryItemType;                             		// 0x000270 (0x0004)              
	unsigned char                                      m_eTaskItemAnimationType;                         		// 0x000274 (0x0001)              PROPERTY: etTaskItemAnimationType
	unsigned char                                      _0x000275[0x3];                                   		// 0x000275 (0x0003) MISSED OFFSET
	int                                                m_eItemAttachmentVisual;                          		// 0x000278 (0x0004)              
	struct FName                                       m_sAttachedToSocketName;                          		// 0x00027C (0x0008)              
	int                                                m_nSymbolMaterialIndex;                           		// 0x000284 (0x0004)              
	class UMaterialInstanceConstant*                   m_pSymbolMaterial;                                		// 0x000288 (0x0004)              
	class UTexture*                                    m_pSymbolTexture;                                 		// 0x00028C (0x0004)              
	TArray<class UMaterialInstanceConstant*>           m_Materials;                                      		// 0x000290 (0x000C)              
	float                                              m_fProgressValue;                                 		// 0x00029C (0x0004)              
	unsigned long                                      m_bActive : 1;                                    		// 0x0002A0 (0x0004) [0x00000001] 
	unsigned long                                      m_bSuppressSprintAnimation : 1;                   		// 0x0002A0 (0x0004) [0x00000002] 
	unsigned long                                      m_bSuppressRunAnimation : 1;                      		// 0x0002A0 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemAttachment");
		return pClassPointer;
	};

public:
	class USkeletalMeshComponent* RetSkeletalMeshComponent();//APBGame.cItemAttachment.RetSkeletalMeshComponent
	void SetMaterialData(float i_fProgressValue,bool i_bActive);//APBGame.cItemAttachment.SetMaterialData
	void SetupMaterials(int i_nSymbolMaterialIndex);//APBGame.cItemAttachment.SetupMaterials
	void UpdateDisplay(struct FName sSocketName,bool bShow);//APBGame.cItemAttachment.UpdateDisplay
	void Init(struct FItemAttachmentVisual ItemAttachmentVisual,int i_nDamageState);//APBGame.cItemAttachment.Init
	void AttachTo(class AcAPBPawn* OwnerPawn);//APBGame.cItemAttachment.AttachTo
	class UStaticMeshComponent* RetStaticMeshComponent();//APBGame.cItemAttachment.RetStaticMeshComponent
	void SetSymbolTexture(class UTexture* i_pTexture);//APBGame.cItemAttachment.SetSymbolTexture
	void DetachFrom(class AcAPBPawn* OwnerPawn);//APBGame.cItemAttachment.DetachFrom
};
UClass* AcItemAttachment::pClassPointer = NULL;

//0x00000C (0x0002B0 - 0x0002A4)
//cSkeletalItemAttachment[0x103DCD70]
class AcSkeletalItemAttachment : public AcItemAttachment
{
public:
	class USkeletalMeshComponent*                      m_SkeletalMesh;                                   		// 0x0002A4 (0x0004)              
	DWORD                                              m_aDamageStates;                                  		// 0x0002A8 (0x0004)              
	int                                                m_nCurrentDamageState;                            		// 0x0002AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkeletalItemAttachment");
		return pClassPointer;
	};

public:
	class USkeletalMeshComponent* RetSkeletalMeshComponent();//APBGame.cSkeletalItemAttachment.RetSkeletalMeshComponent
	void Init(struct FItemAttachmentVisual ItemAttachmentVisual,int i_nDamageState);//APBGame.cSkeletalItemAttachment.Init
};
UClass* AcSkeletalItemAttachment::pClassPointer = NULL;

//0x00000C (0x0002BC - 0x0002B0)
//cWeaponAttachment[0x103DCC40]
class AcWeaponAttachment : public AcSkeletalItemAttachment
{
public:
	struct FName                                       m_MuzzleFlashSocket;                              		// 0x0002B0 (0x0008)              
	class AcAPBPawn*                                   m_ownerPawn;                                      		// 0x0002B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWeaponAttachment");
		return pClassPointer;
	};

public:
	void DetachFrom(class AcAPBPawn* OwnerPawn);//APBGame.cWeaponAttachment.DetachFrom
	void AttachTo(class AcAPBPawn* OwnerPawn);//APBGame.cWeaponAttachment.AttachTo
	void WeaponEvent(struct FName i_nEvent);//APBGame.cWeaponAttachment.WeaponEvent
	void Init(struct FItemAttachmentVisual ItemAttachmentVisual,int i_nDamageState);//APBGame.cWeaponAttachment.Init
};
UClass* AcWeaponAttachment::pClassPointer = NULL;

//0x000004 (0x0002A8 - 0x0002A4)
//cStaticItemAttachment[0x103DCB10]
class AcStaticItemAttachment : public AcItemAttachment
{
public:
	class UStaticMeshComponent*                        m_StaticMesh;                                     		// 0x0002A4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStaticItemAttachment");
		return pClassPointer;
	};

public:
	void Init(struct FItemAttachmentVisual ItemAttachmentVisual,int i_nDamageState);//APBGame.cStaticItemAttachment.Init
	class UStaticMeshComponent* RetStaticMeshComponent();//APBGame.cStaticItemAttachment.RetStaticMeshComponent
};
UClass* AcStaticItemAttachment::pClassPointer = NULL;

//0x000058 (0x0002F4 - 0x00029C)
//cAPBProjectile[0x103DC9E0]
class AcAPBProjectile : public AProjectile
{
public:
	float                                              m_AccelerationRate;                               		// 0x00029C (0x0004)              
	class UMeshComponent*                              Mesh;                                             		// 0x0002A0 (0x0004)              
	unsigned long                                      m_bExploded : 1;                                  		// 0x0002A4 (0x0004) [0x00000001] 
	unsigned long                                      m_bPinOut : 1;                                    		// 0x0002A4 (0x0004) [0x00000002] 
	unsigned long                                      m_bBounceOffThrowingPlayer : 1;                   		// 0x0002A4 (0x0004) [0x00000004] 
	class AcAPBPlayerController*                       m_OwningController;                               		// 0x0002A8 (0x0004)              
	class AcGrenadeWeapon*                             m_OwningGrenadeWeapon;                            		// 0x0002AC (0x0004)              
	DWORD                                              m_pSddProjectile;                                 		// 0x0002B0 (0x0004)              
	int                                                m_ProjectileType;                                 		// 0x0002B4 (0x0004)              
	float                                              m_FuseTime;                                       		// 0x0002B8 (0x0004)              
	int                                                m_EquippedWeapon;                                 		// 0x0002BC (0x0004)              
	float                                              m_PrevSpeed;                                      		// 0x0002C0 (0x0004)              
	class AActor*                                      m_LastHitActor;                                   		// 0x0002C4 (0x0004)              
	class AEmitter*                                    m_particleTrail;                                  		// 0x0002C8 (0x0004)              
	int                                                m_nThrownGrenadeWorldEventID;                     		// 0x0002CC (0x0004)              
	class UcAudioProjectileInterface*                  m_AudioProjectileInterface;                       		// 0x0002D0 (0x0004)              
	struct FGrenadeBounceInfo                          m_GrenadeBounceInfo;                              		// 0x0002D4 (0x0008)              
	double                                             m_fMaxLifetime;                                   		// 0x0002DC (0x0008)              
	double                                             m_fPreviousBounceUpdateTime;                      		// 0x0002E4 (0x0008)              
	int                                                m_nNumberBounceUpdates;                           		// 0x0002EC (0x0004)              
	int                                                m_nSpotOnDetonateTag;                             		// 0x0002F0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBProjectile");
		return pClassPointer;
	};

public:
	float RetBounceDamping();//APBGame.cAPBProjectile.RetBounceDamping
	void Explode(FVector3 HitLocation,FVector3 HitNormal,class AActor* HitActor);//APBGame.cAPBProjectile.Explode
	void ArmingTimerCallback();//APBGame.cAPBProjectile.ArmingTimerCallback
	bool RetIsArming();//APBGame.cAPBProjectile.RetIsArming
	void ToggleHidden();//APBGame.cAPBProjectile.ToggleHidden
	void BaseChange();//APBGame.cAPBProjectile.BaseChange
	void StopFuse();//APBGame.cAPBProjectile.StopFuse
	void ReplicatedEvent(struct FName VarName);//APBGame.cAPBProjectile.ReplicatedEvent
	bool InitFromSDD(int Entry);//APBGame.cAPBProjectile.InitFromSDD
	void HitObject(FVector3 HitNormal,class AActor* Object,class UPrimitiveComponent* WallComp,class UPhysicalMaterial* HitMaterial);//APBGame.cAPBProjectile.HitObject
	bool RetBounce();//APBGame.cAPBProjectile.RetBounce
	void ProcessTouch(class AActor* Other,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cAPBProjectile.ProcessTouch
	void DestroyTrail();//APBGame.cAPBProjectile.DestroyTrail
	void Destroyed();//APBGame.cAPBProjectile.Destroyed
	void StartFuse();//APBGame.cAPBProjectile.StartFuse
	void PostBeginPlay();//APBGame.cAPBProjectile.PostBeginPlay
	bool RetTumble();//APBGame.cAPBProjectile.RetTumble
};
UClass* AcAPBProjectile::pClassPointer = NULL;

//0x000280 (0x0004E0 - 0x000260)
//cDebugTracerManager[0x103DC8B0]
class AcDebugTracerManager : public AActor
{
public:
	struct FTracer                                     m_Tracers[0x14];                                  		// 0x000260 (0x0280)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDebugTracerManager");
		return pClassPointer;
	};

public:
	bool AddTracer(float fTime,FVector3 vStart,FVector3 vEnd,bool bHitTarget);//APBGame.cDebugTracerManager.AddTracer
	void Tick(float DeltaTime);//APBGame.cDebugTracerManager.Tick
};
UClass* AcDebugTracerManager::pClassPointer = NULL;

//0x0002A7 (0x000548 - 0x0002A1)
//cWeapon[0x103DC780]
class AcWeapon : public AcItem
{
public:
	unsigned char                                      _0x0002A1[0x3];                                   		// 0x0002A1 (0x0003) MISSED OFFSET
	DWORD                                              VfTable_IiAmmoContainer;                          		// 0x0002A4 (0x0004)              
	DWORD                                              VfTable_IiModifiable;                             		// 0x0002A8 (0x0004)              
	DWORD                                              m_pSddWeaponType;                                 		// 0x0002AC (0x0004)              
	DWORD                                              m_pSddWeaponCurve;                                		// 0x0002B0 (0x0004)              
	struct FClampedWeaponCurve_Float                   m_GeneralRecoveryCurve;                           		// 0x0002B4 (0x0008)              
	float                                              m_fGeneralRecoveryTimer;                          		// 0x0002BC (0x0004)              
	class UcDesignerCurve_Float*                       m_pReloadTimeCurve;                               		// 0x0002C0 (0x0004)              
	struct FClampedWeaponCurve_Float                   m_PingDistanceCurve;                              		// 0x0002C4 (0x0008)              
	struct FClampedWeaponCurve_Float                   m_PitchCurve;                                     		// 0x0002CC (0x0008)              
	struct FClampedWeaponCurve_Float                   m_YawNegativeCurve;                               		// 0x0002D4 (0x0008)              
	struct FClampedWeaponCurve_Float                   m_YawPositiveCurve;                               		// 0x0002DC (0x0008)              
	struct FClampedWeaponCurve_Float                   m_BurstShotsCurve;                                		// 0x0002E4 (0x0008)              
	unsigned long                                      m_bNeedCurveRecoveryTick : 1;                     		// 0x0002EC (0x0004) [0x00000001] 
	unsigned long                                      m_bPendingFire : 1;                               		// 0x0002EC (0x0004) [0x00000002] 
	unsigned long                                      m_bPreviousFireRequestFailed : 1;                 		// 0x0002EC (0x0004) [0x00000004] 
	unsigned long                                      m_bCancelledReload : 1;                           		// 0x0002EC (0x0004) [0x00000008] 
	unsigned long                                      m_bShellChambered : 1;                            		// 0x0002EC (0x0004) [0x00000010] 
	unsigned long                                      m_bUseQuickReload : 1;                            		// 0x0002EC (0x0004) [0x00000020] 
	unsigned long                                      m_bQuickReloading : 1;                            		// 0x0002EC (0x0004) [0x00000040] 
	unsigned long                                      m_bModsOverridden : 1;                            		// 0x0002EC (0x0004) [0x00000080] 
	unsigned long                                      m_bShownCeremony : 1;                             		// 0x0002EC (0x0004) [0x00000100] 
	unsigned long                                      m_bDrawClientServerHits : 1;                      		// 0x0002EC (0x0004) [0x00000200] 
	unsigned long                                      m_bAltFireIntervalActive : 1;                     		// 0x0002EC (0x0004) [0x00000400] 
	unsigned long                                      m_bAltHealthDamageActive : 1;                     		// 0x0002EC (0x0004) [0x00000800] 
	unsigned long                                      m_bAltFireStateActive : 1;                        		// 0x0002EC (0x0004) [0x00001000] 
	unsigned long                                      m_bAltSprintDelayActive : 1;                      		// 0x0002EC (0x0004) [0x00002000] 
	class UMeshComponent*                              Mesh;                                             		// 0x0002F0 (0x0004)              
	int                                                m_RoundsRemaining;                                		// 0x0002F4 (0x0004)              
	int                                                m_ClientSideRoundsRemaining;                      		// 0x0002F8 (0x0004)              
	int                                                m_PreviousRoundsRemaining;                        		// 0x0002FC (0x0004)              
	float                                              m_fQuickReloadTime;                               		// 0x000300 (0x0004)              
	float                                              m_fReloadTimeMultiplier;                          		// 0x000304 (0x0004)              
	struct FWeaponAmmoPool                             m_PrimaryAmmoPool;                                		// 0x000308 (0x000C)              
	int                                                m_CurrentBurstShots;                              		// 0x000314 (0x0004)              
	TArray<int>                                        m_aFnMods;                                        		// 0x000318 (0x000C)              
	int                                                m_aVisibleFnMods[0x3];                            		// 0x000324 (0x000C)              
	int                                                m_nOverrideSkin;                                  		// 0x000330 (0x0004)              
	class USoundCue*                                   m_FireSound;                                      		// 0x000334 (0x0004)              
	int                                                m_CurrentShotID;                                  		// 0x000338 (0x0004)              
	int                                                m_CurrentShotsFired;                              		// 0x00033C (0x0004)              
	class AActor*                                      m_Target;                                         		// 0x000340 (0x0004)              
	FVector3                                           m_AimAtStartDebug;                                		// 0x000344 (0x000C)              
	FVector3                                           m_AimAtPoint;                                     		// 0x000350 (0x000C)              
	FVector3                                           m_FireStartLocation;                              		// 0x00035C (0x000C)              
	FVector3                                           m_WeaponDirection;                                		// 0x000368 (0x000C)              
	unsigned char                                      m_aActiveModifierItems[0x3C];                     		// 0x000374 (0x003C)              UNKNOWN PROPERTY: MapProperty
	struct FMap_Mirror                                 m_ActiveModifierEffects;                          		// 0x0003B0 (0x003C)              
	struct FMap_Mirror                                 m_ActiveModifierItemEffects;                      		// 0x0003EC (0x003C)              
	struct FWeaponType                                 m_WeaponTypeSettings;                             		// 0x000428 (0x00B0)              
	class UcAPBMath*                                   m_pStaticAPBMath;                                 		// 0x0004D8 (0x0004)              
	struct FSpeedModifiers                             m_SpeedModifiers;                                 		// 0x0004DC (0x0028)              
	class AActor*                                      m_pRetryTarget;                                   		// 0x000504 (0x0004)              
	FVector3                                           m_vRetryOffset;                                   		// 0x000508 (0x000C)              
	float                                              m_fAltFireInterval;                               		// 0x000514 (0x0004)              
	float                                              m_fAltHealthDamage;                               		// 0x000518 (0x0004)              
	unsigned char                                      m_eAltFireState;                                  		// 0x00051C (0x0001)              PROPERTY: etWeaponFiringState
	unsigned char                                      _0x00051D[0x3];                                   		// 0x00051D (0x0003) MISSED OFFSET
	float                                              m_fAltSprintDelay;                                		// 0x000520 (0x0004)              
	struct FMagazineStats                              m_MagazineStats;                                  		// 0x000524 (0x0024)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWeapon");
		return pClassPointer;
	};

public:
	int RetAmmoAmount(int eCategory);//APBGame.cWeapon.RetAmmoAmount
	void CallServerStopFire();//APBGame.cWeapon.CallServerStopFire
	void ResupplyFailedTimer();//APBGame.cWeapon.ResupplyFailedTimer
	void ServerCancelReload();//APBGame.cWeapon.ServerCancelReload
	void PostBeginPlay();//APBGame.cWeapon.PostBeginPlay
	bool HasAnyAmmo();//APBGame.cWeapon.HasAnyAmmo
	int RetCapacity(int eCategory);//APBGame.cWeapon.RetCapacity
	void ServerStartFire(class AActor* Target,int aimRotation,float cameraCollidePercent,FVector3 TargetOffset,int ShotID);//APBGame.cWeapon.ServerStartFire
	void NativeReplicatedEvent(struct FName VarName);//APBGame.cWeapon.NativeReplicatedEvent
	bool IsInFiringMode();//APBGame.cWeapon.IsInFiringMode
	void ServerStopFire();//APBGame.cWeapon.ServerStopFire
	void ChamberingTimerCallback();//APBGame.cWeapon.ChamberingTimerCallback
	bool IsEmpty(int eCategory);//APBGame.cWeapon.IsEmpty
	void ClientFireRequestFailed(int ShotID);//APBGame.cWeapon.ClientFireRequestFailed
	void ClientReload(float fReloadTimeMultiplier);//APBGame.cWeapon.ClientReload
	void RenderDebugPage(class UCanvas* Canvas);//APBGame.cWeapon.RenderDebugPage
	void SprintDelayTimer();//APBGame.cWeapon.SprintDelayTimer
	bool IsFull(int eCategory);//APBGame.cWeapon.IsFull
	void ClientReset();//APBGame.cWeapon.ClientReset
	bool IsLessLethal();//APBGame.cWeapon.IsLessLethal
	void CancelReload();//APBGame.cWeapon.CancelReload
	void ReloadCheckTimer();//APBGame.cWeapon.ReloadCheckTimer
	void WindupTimerCallback();//APBGame.cWeapon.WindupTimerCallback
	void BurstEndTimer();//APBGame.cWeapon.BurstEndTimer
	bool CanReload();//APBGame.cWeapon.CanReload
	void RetryStartFire();//APBGame.cWeapon.RetryStartFire
	void CallServerCancelReload();//APBGame.cWeapon.CallServerCancelReload
	void StopFire();//APBGame.cWeapon.StopFire
	int StoreAmmo(int eCategory,int eTarget,int nAmount);//APBGame.cWeapon.StoreAmmo
	bool IsAmmoCategorySupported(int eCategory);//APBGame.cWeapon.IsAmmoCategorySupported
	void CallClientReload(float fReloadTimeMultiplier);//APBGame.cWeapon.CallClientReload
	void ClientReloadComplete();//APBGame.cWeapon.ClientReloadComplete
	void WeaponLog(struct FString msg,struct FString FuncStr);//APBGame.cWeapon.WeaponLog
	void ReplicatedEvent(struct FName VarName);//APBGame.cWeapon.ReplicatedEvent
	void ClientUnequipItem();//APBGame.cWeapon.ClientUnequipItem
	int RetPrimaryAmmoCategory();//APBGame.cWeapon.RetPrimaryAmmoCategory
	void ApplyDamage(class AActor* HitActor,class AcAPBPlayerController* Controller,int* HealthDamage,int* StunDamage,class UClass* HealthDamageType,class UClass* StunDamageType,struct FImpactInfo Impact);//APBGame.cWeapon.ApplyDamage
	void StartFire(class AActor* Target);//APBGame.cWeapon.StartFire
	void RefireCheckTimer();//APBGame.cWeapon.RefireCheckTimer
	int WithdrawAmmo(int eCategory,int nAmount);//APBGame.cWeapon.WithdrawAmmo
	void CallClientReloadComplete();//APBGame.cWeapon.CallClientReloadComplete
	void Destroyed();//APBGame.cWeapon.Destroyed
	bool IsReloading();//APBGame.cWeapon.IsReloading
};
UClass* AcWeapon::pClassPointer = NULL;

//0x00006C (0x0005B4 - 0x000548)
//cProjectileWeapon[0x103DC650]
class AcProjectileWeapon : public AcWeapon
{
public:
	DWORD                                              m_pSddProjectileWeaponType;                       		// 0x000548 (0x0004)              
	DWORD                                              m_pSddWeaponRecoil;                               		// 0x00054C (0x0004)              
	DWORD                                              m_pSddRangedWeaponType;                           		// 0x000550 (0x0004)              
	float                                              m_MaxFiringSpeed;                                 		// 0x000554 (0x0004)              
	int                                                m_nCookingGrenadeWorldEventID;                    		// 0x000558 (0x0004)              
	struct FWeaponRecoil                               m_WeaponRecoilSettings;                           		// 0x00055C (0x004C)              
	float                                              m_fMarksmanshipFOV16;                             		// 0x0005A8 (0x0004)              
	float                                              m_fMarksmanshipFOV4;                              		// 0x0005AC (0x0004)              
	int                                                m_nSpotOnDetonateTag;                             		// 0x0005B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cProjectileWeapon");
		return pClassPointer;
	};
};
UClass* AcProjectileWeapon::pClassPointer = NULL;

//0x000014 (0x0005C8 - 0x0005B4)
//cGrenadeWeapon[0x103DC520]
class AcGrenadeWeapon : public AcProjectileWeapon
{
public:
	class AcAPBProjectile*                             m_CookingGrenade;                                 		// 0x0005B4 (0x0004)              
	float                                              m_RangeScale;                                     		// 0x0005B8 (0x0004)              
	float                                              m_Range;                                          		// 0x0005BC (0x0004)              
	float                                              m_FloorHeight;                                    		// 0x0005C0 (0x0004)              
	unsigned long                                      m_bPinPulled : 1;                                 		// 0x0005C4 (0x0004) [0x00000001] 
	unsigned long                                      m_bThrowWhenAnimComplete : 1;                     		// 0x0005C4 (0x0004) [0x00000002] 
	unsigned long                                      m_bThrowing : 1;                                  		// 0x0005C4 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGrenadeWeapon");
		return pClassPointer;
	};

public:
	void RefireCheckTimerWeaponCooking();//APBGame.cGrenadeWeapon.RefireCheckTimerWeaponCooking
	void EndFire();//APBGame.cGrenadeWeapon.EndFire
	void EndStateWeaponCooking();//APBGame.cGrenadeWeapon.EndStateWeaponCooking
	void BeginStateWeaponCooking();//APBGame.cGrenadeWeapon.BeginStateWeaponCooking
	bool HasAnyAmmo();//APBGame.cGrenadeWeapon.HasAnyAmmo
	void PinPullTimerCallback();//APBGame.cGrenadeWeapon.PinPullTimerCallback
	void ClientNotifyGrenadeExploded();//APBGame.cGrenadeWeapon.ClientNotifyGrenadeExploded
	int StoreAmmo(int eCategory,int eTarget,int nAmount);//APBGame.cGrenadeWeapon.StoreAmmo
	void ThrowTimerCallback();//APBGame.cGrenadeWeapon.ThrowTimerCallback
};
UClass* AcGrenadeWeapon::pClassPointer = NULL;

//0x00013C (0x000684 - 0x000548)
//cRaycastWeapon[0x103DC3F0]
class AcRaycastWeapon : public AcWeapon
{
public:
	DWORD                                              m_pSddRangedWeaponType;                           		// 0x000548 (0x0004)              
	DWORD                                              m_pSddWeaponRecoil;                               		// 0x00054C (0x0004)              
	double                                             m_LastShotTime;                                   		// 0x000550 (0x0008)              
	int                                                m_CurrentNumShots;                                		// 0x000558 (0x0004)              
	float                                              m_OverallShotModifier;                            		// 0x00055C (0x0004)              
	struct FClampedWeaponCurve_Float                   m_PerShotModifierCurve;                           		// 0x000560 (0x0008)              
	struct FClampedWeaponCurve_Float                   m_RecoveryPerSecondCurve;                         		// 0x000568 (0x0008)              
	struct FClampedWeaponCurve_Float                   m_RadiusAtTenMetresCurve;                         		// 0x000570 (0x0008)              
	class UcDesignerCurve_Float*                       m_pAccuracyRecoveryCurve;                         		// 0x000578 (0x0004)              
	class UcDesignerCurve_Float*                       m_pEffectiveRangeCurve;                           		// 0x00057C (0x0004)              
	float                                              m_MinAccuracy;                                    		// 0x000580 (0x0004)              
	float                                              m_MaxAccuracy;                                    		// 0x000584 (0x0004)              
	int                                                m_ShotNumber;                                     		// 0x000588 (0x0004)              
	float                                              m_fAccuracyRadiusScale;                           		// 0x00058C (0x0004)              
	struct FWeaponRecoil                               m_WeaponRecoilSettings;                           		// 0x000590 (0x004C)              
	struct FRangedWeaponType                           m_RangedWeaponTypeSettings;                       		// 0x0005DC (0x0090)              
	unsigned long                                      m_bRecoilUpdated : 1;                             		// 0x00066C (0x0004) [0x00000001] 
	unsigned long                                      m_bAltRaySpreadAtTenMetresActive : 1;             		// 0x00066C (0x0004) [0x00000002] 
	unsigned long                                      m_bAltMinNumShotsActive : 1;                      		// 0x00066C (0x0004) [0x00000004] 
	unsigned long                                      m_bAltPerShotModifierActive : 1;                  		// 0x00066C (0x0004) [0x00000008] 
	unsigned long                                      m_bAltRecoveryPerSecondActive : 1;                		// 0x00066C (0x0004) [0x00000010] 
	unsigned long                                      m_bAltRecoveryDelayActive : 1;                    		// 0x00066C (0x0004) [0x00000020] 
	float                                              m_fAltRaySpreadAtTenMetres;                       		// 0x000670 (0x0004)              
	int                                                m_nAltMinNumShots;                                		// 0x000674 (0x0004)              
	float                                              m_fAltPerShotModifier;                            		// 0x000678 (0x0004)              
	float                                              m_fAltRecoveryPerSecond;                          		// 0x00067C (0x0004)              
	float                                              m_fAltRecoveryDelay;                              		// 0x000680 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cRaycastWeapon");
		return pClassPointer;
	};

public:
	void ClientEquipItem(bool bImmediate);//APBGame.cRaycastWeapon.ClientEquipItem
	bool ReplicatedEvent_Native(struct FName pr_Name);//APBGame.cRaycastWeapon.ReplicatedEvent_Native
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cRaycastWeapon.ReplicatedEvent
	void RenderDebugPage(class UCanvas* Canvas);//APBGame.cRaycastWeapon.RenderDebugPage
};
UClass* AcRaycastWeapon::pClassPointer = NULL;

//0x000000 (0x000684 - 0x000684)
//cWitnessingWeapon[0x103DC2C0]
class AcWitnessingWeapon : public AcRaycastWeapon
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWitnessingWeapon");
		return pClassPointer;
	};

public:
	bool HasAnyAmmo();//APBGame.cWitnessingWeapon.HasAnyAmmo
};
UClass* AcWitnessingWeapon::pClassPointer = NULL;

//0x000050 (0x0002C8 - 0x000278)
//cWeaponPickup[0x103DC190]
class AcWeaponPickup : public AcPickupBase
{
public:
	unsigned char                                      m_eAvailability;                                  		// 0x000278 (0x0001)              PROPERTY: etWeaponPickupAvailability
	unsigned char                                      _0x000279[0x3];                                   		// 0x000279 (0x0003) MISSED OFFSET
	class AcAPBPlayerController*                       m_pLastDroppedOwner;                              		// 0x00027C (0x0004)              
	class AActor*                                      m_pOriginalOwner;                                 		// 0x000280 (0x0004)              
	int                                                m_nPickupCount;                                   		// 0x000284 (0x0004)              
	int                                                m_ePickupGiftBox;                                 		// 0x000288 (0x0004)              
	class UParticleSystemComponent*                    m_pVFXComponent;                                  		// 0x00028C (0x0004)              
	struct FWeaponPickupItemData                       m_ItemData;                                       		// 0x000290 (0x0008)              
	TArray<int>                                        m_aFnModSlots;                                    		// 0x000298 (0x000C)              
	int                                                m_nPoolAmmoAmount;                                		// 0x0002A4 (0x0004)              
	int                                                m_nMagazineAmmoAmount;                            		// 0x0002A8 (0x0004)              
	int                                                m_nVisibleFnMods[0x3];                            		// 0x0002AC (0x000C)              
	unsigned long                                      m_bCanPickup : 1;                                 		// 0x0002B8 (0x0004) [0x00000001] 
	struct FString                                     m_sVFX;                                           		// 0x0002BC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWeaponPickup");
		return pClassPointer;
	};

public:
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cWeaponPickup.BeginUse
	void AssignMesh();//APBGame.cWeaponPickup.AssignMesh
	void AssignVFX();//APBGame.cWeaponPickup.AssignVFX
	void ReplicatedEvent(struct FName VarName);//APBGame.cWeaponPickup.ReplicatedEvent
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cWeaponPickup.EndUse
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cWeaponPickup.IsCSASupported
};
UClass* AcWeaponPickup::pClassPointer = NULL;

//0x000010 (0x0002B8 - 0x0002A8)
//cMailBox[0x103DC060]
class AcMailBox : public AcInteractiveDynamicSMActor
{
public:
	DWORD                                              VfTable_IiAmmoSupplier;                           		// 0x0002A8 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x0002AC (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x0002AD[0x3];                                   		// 0x0002AD (0x0003) MISSED OFFSET
	int                                                m_nHUDMarkerID;                                   		// 0x0002B0 (0x0004)              
	class UcAmmoDepotComponent*                        m_AmmoDepotComponent;                             		// 0x0002B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMailBox");
		return pClassPointer;
	};

public:
	unsigned char CheckCanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cMailBox.CheckCanResupplyPlayer
	void NotifySupplierAttributesModified();//APBGame.cMailBox.NotifySupplierAttributesModified
	void BeginResupply(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType);//APBGame.cMailBox.BeginResupply
	void EndInventoryAccess(class AcAPBPlayerController* pPlayer,bool bCancel);//APBGame.cMailBox.EndInventoryAccess
	bool IsResupplyingPlayer(class AcAPBPlayerController* pPlayer);//APBGame.cMailBox.IsResupplyingPlayer
	void BeginInventoryAccess(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cMailBox.BeginInventoryAccess
	float RetAmmoResupplyRange();//APBGame.cMailBox.RetAmmoResupplyRange
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cMailBox.BeginUse
	FVector3 RetAmmoResupplyLocation();//APBGame.cMailBox.RetAmmoResupplyLocation
	bool IsLimitedAmmoSupplier();//APBGame.cMailBox.IsLimitedAmmoSupplier
	class AActor* RetAmmoSupplierActor();//APBGame.cMailBox.RetAmmoSupplierActor
	bool CanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cMailBox.CanResupplyPlayer
	int AmmoClipsLeft();//APBGame.cMailBox.AmmoClipsLeft
	void CancelAllResupplyOperations();//APBGame.cMailBox.CancelAllResupplyOperations
	void EndResupply(class AcAPBPlayerController* pPlayer,bool bCancel,unsigned char eWeaponType);//APBGame.cMailBox.EndResupply
	unsigned char CheckCanPlayerAccessInventory(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cMailBox.CheckCanPlayerAccessInventory
	void NotifyConsumerAttributesModified(class UiAmmoConsumer* pConsumer);//APBGame.cMailBox.NotifyConsumerAttributesModified
	void GetDebugText(struct FString* s1,struct FString* s2,struct FString* s3);//APBGame.cMailBox.GetDebugText
	class UcAmmoDepotComponent* RetAmmoDepotComponent();//APBGame.cMailBox.RetAmmoDepotComponent
	bool IsAmmoCarrier();//APBGame.cMailBox.IsAmmoCarrier
	bool WithdrawAmmoClip();//APBGame.cMailBox.WithdrawAmmoClip
	bool IsRangeBasedAmmoSupplier();//APBGame.cMailBox.IsRangeBasedAmmoSupplier
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cMailBox.IsCSASupported
	bool CanPlayerAccessInventory(class AcAPBPlayerController* pPlayer);//APBGame.cMailBox.CanPlayerAccessInventory
};
UClass* AcMailBox::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDDisplayPoint[0x103DBF30]
class UcSDDDisplayPoint : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDDisplayPoint");
		return pClassPointer;
	};
};
UClass* UcSDDDisplayPoint::pClassPointer = NULL;

//0x000037 (0x000090 - 0x000059)
//cDisplayPointComponent[0x103DBE00]
class UcDisplayPointComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	struct FEnumeratedName                             m_eDisplayPoint;                                  		// 0x00005C (0x0010)              
	DWORD                                              m_pSddDisplayPoint;                               		// 0x00006C (0x0004)              
	TArray<unsigned char>                              m_aSupportedFactions;                             		// 0x000070 (0x000C)              
	int                                                m_nCharaterOwnerUID;                              		// 0x00007C (0x0004)              
	TArray<class AcAPBPlayerController*>               m_aUsers;                                         		// 0x000080 (0x000C)              
	unsigned long                                      m_bInteractionPending : 1;                        		// 0x00008C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDisplayPointComponent");
		return pClassPointer;
	};

public:
	struct FString RetDisplayPointTypeToString();//APBGame.cDisplayPointComponent.RetDisplayPointTypeToString
	bool CanOpenDisplayPointUI(class AcAPBPlayerController* pPC);//APBGame.cDisplayPointComponent.CanOpenDisplayPointUI
	struct FString RetDisplayPointUnlocalizedTypeToString();//APBGame.cDisplayPointComponent.RetDisplayPointUnlocalizedTypeToString
	unsigned char RetDisplayPointInteractionType(class AcAPBPlayerController* pPC);//APBGame.cDisplayPointComponent.RetDisplayPointInteractionType
	struct FString RetDisplayPointName();//APBGame.cDisplayPointComponent.RetDisplayPointName
	bool IsOwned();//APBGame.cDisplayPointComponent.IsOwned
	void InitDisplayPointAttributes();//APBGame.cDisplayPointComponent.InitDisplayPointAttributes
	bool IsFactionSupported(unsigned char eFaction);//APBGame.cDisplayPointComponent.IsFactionSupported
	struct FString RetDisplayPointActivationTypeToString();//APBGame.cDisplayPointComponent.RetDisplayPointActivationTypeToString
	unsigned char RetDisplayPointActivationType();//APBGame.cDisplayPointComponent.RetDisplayPointActivationType
	unsigned char RetDisplayPointType();//APBGame.cDisplayPointComponent.RetDisplayPointType
	struct FGuid RetDisplayPointGUID();//APBGame.cDisplayPointComponent.RetDisplayPointGUID
	void SetOwnerUID(int nUID);//APBGame.cDisplayPointComponent.SetOwnerUID
	bool CanPropagate();//APBGame.cDisplayPointComponent.CanPropagate
	int RetOwnerUID();//APBGame.cDisplayPointComponent.RetOwnerUID
};
UClass* UcDisplayPointComponent::pClassPointer = NULL;

//0x000048 (0x0002A8 - 0x000260)
//cDisplayPointManager[0x103DBCD0]
class AcDisplayPointManager : public AActor
{
public:
	TArray<struct FPropagatedDisplayPoint>             m_aOwnedPropagatedDisplayPoints;                  		// 0x000260 (0x000C)              
	TArray<class AcDisplayPointStatuePlinth*>          m_aStatuesDisplayPoints;                          		// 0x00026C (0x000C)              
	TArray<class AcPlayerGraffitiDisplayPoint*>        m_aGraffitiDisplayPoints;                         		// 0x000278 (0x000C)              
	TArray<class AcPlayerVehicleDisplayPoint*>         m_aVehicleDisplayPoints;                          		// 0x000284 (0x000C)              
	TArray<class AcAudioDisplayPoint*>                 m_aAudioDisplayPoints;                            		// 0x000290 (0x000C)              
	TArray<class AActor*>                              m_aDisplayPoints;                                 		// 0x00029C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDisplayPointManager");
		return pClassPointer;
	};

public:
	int RetNumGraffitiDisplayPoints();//APBGame.cDisplayPointManager.RetNumGraffitiDisplayPoints
	class AcPlayerVehicleDisplayPoint* FindVehicleDisplayPoints(class AcAPBVehicleBase* Vehicle);//APBGame.cDisplayPointManager.FindVehicleDisplayPoints
	int RetNumDisplayPoints();//APBGame.cDisplayPointManager.RetNumDisplayPoints
	int RetVehicleDisplayPoints();//APBGame.cDisplayPointManager.RetVehicleDisplayPoints
	void LevelLoadsComplete();//APBGame.cDisplayPointManager.LevelLoadsComplete
	int RetNumStatueDisplayPoints();//APBGame.cDisplayPointManager.RetNumStatueDisplayPoints
	int RetAudioDisplayPoints();//APBGame.cDisplayPointManager.RetAudioDisplayPoints
};
UClass* AcDisplayPointManager::pClassPointer = NULL;

//0x000021 (0x0002ED - 0x0002CC)
//cPlayerGraffitiDisplayPoint[0x103DBBA0]
class AcPlayerGraffitiDisplayPoint : public AcCustomGraffitiDisplayPoint
{
public:
	DWORD                                              VfTable_IiDisplayPoint;                           		// 0x0002CC (0x0004)              
	class UcDisplayPointComponent*                     m_DisplayPointComponent;                          		// 0x0002D0 (0x0004)              
	float                                              m_ePendingInteractionType;                        		// 0x0002D4 (0x0004)              
	DWORD                                              m_pOverridenGraffitiDisplayPointData;             		// 0x0002D8 (0x0004)              
	int                                                m_nCharaterOwnerUID;                              		// 0x0002DC (0x0004)              
	struct FString                                     m_sCharacterOwnerName;                            		// 0x0002E0 (0x000C)              
	unsigned char                                      m_eCharacterOwnerFaction;                         		// 0x0002EC (0x0001)              PROPERTY: etFaction

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerGraffitiDisplayPoint");
		return pClassPointer;
	};

public:
	void SetInitialState();//APBGame.cPlayerGraffitiDisplayPoint.SetInitialState
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cPlayerGraffitiDisplayPoint.EndUse
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cPlayerGraffitiDisplayPoint.IsCSASupported
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cPlayerGraffitiDisplayPoint.BeginUse
	class UcDisplayPointComponent* RetDisplayPointComponent();//APBGame.cPlayerGraffitiDisplayPoint.RetDisplayPointComponent
};
UClass* AcPlayerGraffitiDisplayPoint::pClassPointer = NULL;

//0x000078 (0x000320 - 0x0002A8)
//cAudioDisplayPoint[0x103DBA70]
class AcAudioDisplayPoint : public AcInteractiveDynamicSMActor
{
public:
	DWORD                                              VfTable_IiDisplayPoint;                           		// 0x0002A8 (0x0004)              
	class UcDisplayPointComponent*                     m_DisplayPointComponent;                          		// 0x0002AC (0x0004)              
	class AcAPBPlayerController*                       m_OwnerPlayerController;                          		// 0x0002B0 (0x0004)              
	class UcAudioDisplayPointInterface*                m_AudioDisplayPointInterface;                     		// 0x0002B4 (0x0004)              
	int                                                m_nCharaterOwnerUID;                              		// 0x0002B8 (0x0004)              
	struct FString                                     m_sCharacterOwnerName;                            		// 0x0002BC (0x000C)              
	unsigned char                                      m_eCharacterOwnerFaction;                         		// 0x0002C8 (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x0002C9[0x3];                                   		// 0x0002C9 (0x0003) MISSED OFFSET
	struct FDisplayPointMusicPlaybackInfo              m_MusicPlaybackInfo;                              		// 0x0002CC (0x001C)              
	struct FDisplayPointMusicNameInfo                  m_MusicNameInfo;                                  		// 0x0002E8 (0x0030)              
	float                                              m_fDisplayPointVolume;                            		// 0x000318 (0x0004)              
	float                                              m_fMusicVolumeMax;                                		// 0x00031C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioDisplayPoint");
		return pClassPointer;
	};

public:
	void SetInitialState();//APBGame.cAudioDisplayPoint.SetInitialState
	class AcAPBPlayerController* RetDisplayPointerOwnerPlayerController();//APBGame.cAudioDisplayPoint.RetDisplayPointerOwnerPlayerController
	void OnTrackVolumeUpdated();//APBGame.cAudioDisplayPoint.OnTrackVolumeUpdated
	void ReplicatedEvent(struct FName VarName);//APBGame.cAudioDisplayPoint.ReplicatedEvent
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cAudioDisplayPoint.IsCSASupported
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cAudioDisplayPoint.BeginUse
	void GetDebugText(struct FString* s1,struct FString* s2,struct FString* s3);//APBGame.cAudioDisplayPoint.GetDebugText
	void OnTrackInfoUpdated();//APBGame.cAudioDisplayPoint.OnTrackInfoUpdated
	bool IsLocallyControlled();//APBGame.cAudioDisplayPoint.IsLocallyControlled
	class UcDisplayPointComponent* RetDisplayPointComponent();//APBGame.cAudioDisplayPoint.RetDisplayPointComponent
};
UClass* AcAudioDisplayPoint::pClassPointer = NULL;

//0x000034 (0x0002DC - 0x0002A8)
//cDisplayPointStatuePlinth[0x103DB940]
class AcDisplayPointStatuePlinth : public AcInteractiveDynamicSMActor
{
public:
	DWORD                                              VfTable_IiDisplayPoint;                           		// 0x0002A8 (0x0004)              
	class AcStatueModel*                               m_CurrentStatue;                                  		// 0x0002AC (0x0004)              
	class UcDisplayPointComponent*                     m_DisplayPointComponent;                          		// 0x0002B0 (0x0004)              
	int                                                m_nCharaterOwnerUID;                              		// 0x0002B4 (0x0004)              
	struct FString                                     m_sCharacterOwnerName;                            		// 0x0002B8 (0x000C)              
	unsigned char                                      m_eCharacterOwnerFaction;                         		// 0x0002C4 (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x0002C5[0x3];                                   		// 0x0002C5 (0x0003) MISSED OFFSET
	float                                              m_fCSAHeightOffset;                               		// 0x0002C8 (0x0004)              
	float                                              m_fStatueScale;                                   		// 0x0002CC (0x0004)              
	class USpriteComponent*                            m_CSASprite;                                      		// 0x0002D0 (0x0004)              
	class USpriteComponent*                            m_DisplayPointSprite;                             		// 0x0002D4 (0x0004)              
	int                                                m_HUDMarkerID;                                    		// 0x0002D8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDisplayPointStatuePlinth");
		return pClassPointer;
	};

public:
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cDisplayPointStatuePlinth.BeginUse
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cDisplayPointStatuePlinth.ReplicatedEvent
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cDisplayPointStatuePlinth.IsCSASupported
	class UcDisplayPointComponent* RetDisplayPointComponent();//APBGame.cDisplayPointStatuePlinth.RetDisplayPointComponent
	class AcStatueModel* SpawnStatue();//APBGame.cDisplayPointStatuePlinth.SpawnStatue
	void GetDebugText(struct FString* s1,struct FString* s2,struct FString* s3);//APBGame.cDisplayPointStatuePlinth.GetDebugText
	void RemoveStatue();//APBGame.cDisplayPointStatuePlinth.RemoveStatue
	void Destroyed();//APBGame.cDisplayPointStatuePlinth.Destroyed
};
UClass* AcDisplayPointStatuePlinth::pClassPointer = NULL;

//0x000004 (0x0002AC - 0x0002A8)
//cStatueUsePoint[0x103DB810]
class AcStatueUsePoint : public AcInteractiveDynamicSMActor
{
public:
	class AcStatueDisplayPoint*                        m_StatueDisplayPoint;                             		// 0x0002A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStatueUsePoint");
		return pClassPointer;
	};

public:
	class AcStatueDisplayPoint* RetStatueDisplayPoint();//APBGame.cStatueUsePoint.RetStatueDisplayPoint
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cStatueUsePoint.BeginUse
	void GetDebugText(struct FString* s1,struct FString* s2,struct FString* s3);//APBGame.cStatueUsePoint.GetDebugText
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cStatueUsePoint.IsCSASupported
};
UClass* AcStatueUsePoint::pClassPointer = NULL;

//0x000030 (0x000294 - 0x000264)
//cPlayerVehicleDisplayPoint[0x103DB6E0]
class AcPlayerVehicleDisplayPoint : public AStaticMeshActor
{
public:
	DWORD                                              VfTable_IUseInterface;                            		// 0x000264 (0x0004)              
	DWORD                                              VfTable_IiDisplayPoint;                           		// 0x000268 (0x0004)              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x00026C (0x0004)              
	class AcPlayerVehicleSpawnDirection*               m_SpawnDirection;                                 		// 0x000270 (0x0004)              
	unsigned char                                      m_eBayState;                                      		// 0x000274 (0x0001)              PROPERTY: etSpawnBayState
	unsigned char                                      m_eCharacterOwnerFaction;                         		// 0x000275 (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x000276[0x2];                                   		// 0x000276 (0x0002) MISSED OFFSET
	class UcDisplayPointComponent*                     m_DisplayPointComponent;                          		// 0x000278 (0x0004)              
	class AcAPBVehicleBase*                            m_CurrentVehicle;                                 		// 0x00027C (0x0004)              
	class UcCompressedAssetCustomisation*              m_CompressedCustomisationData;                    		// 0x000280 (0x0004)              
	int                                                m_nCharaterOwnerUID;                              		// 0x000284 (0x0004)              
	struct FString                                     m_sCharacterOwnerName;                            		// 0x000288 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerVehicleDisplayPoint");
		return pClassPointer;
	};

public:
	void OnVehicleVariableReplicated();//APBGame.cPlayerVehicleDisplayPoint.OnVehicleVariableReplicated
	void SetBayState(unsigned char eBayState);//APBGame.cPlayerVehicleDisplayPoint.SetBayState
	bool IsCurrenlyShowingVehicle(class AcAPBVehicleBase* Vehicle);//APBGame.cPlayerVehicleDisplayPoint.IsCurrenlyShowingVehicle
	bool IsPlayerAllowedToUseSpawnBay(class AcAPBPlayerController* User);//APBGame.cPlayerVehicleDisplayPoint.IsPlayerAllowedToUseSpawnBay
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cPlayerVehicleDisplayPoint.ReplicatedEvent
	void SetInitialState();//APBGame.cPlayerVehicleDisplayPoint.SetInitialState
	FRotator RetSpawnDirection();//APBGame.cPlayerVehicleDisplayPoint.RetSpawnDirection
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cPlayerVehicleDisplayPoint.BeginUse
	bool IsOccupied();//APBGame.cPlayerVehicleDisplayPoint.IsOccupied
	void EmptySpawnBay();//APBGame.cPlayerVehicleDisplayPoint.EmptySpawnBay
	void OnSpawnBayStateChanged();//APBGame.cPlayerVehicleDisplayPoint.OnSpawnBayStateChanged
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cPlayerVehicleDisplayPoint.IsCSASupported
	class UcDisplayPointComponent* RetDisplayPointComponent();//APBGame.cPlayerVehicleDisplayPoint.RetDisplayPointComponent
	unsigned char RetBayState();//APBGame.cPlayerVehicleDisplayPoint.RetBayState
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cPlayerVehicleDisplayPoint.EndUse
	bool SpawnVehicle(class AcAPBPlayerController* UserController);//APBGame.cPlayerVehicleDisplayPoint.SpawnVehicle
	void OnVehicleCustomizationIsReady();//APBGame.cPlayerVehicleDisplayPoint.OnVehicleCustomizationIsReady
};
UClass* AcPlayerVehicleDisplayPoint::pClassPointer = NULL;

//0x000004 (0x000268 - 0x000264)
//cPlayerVehicleDisplayPointMesh[0x103DB5B0]
class AcPlayerVehicleDisplayPointMesh : public AStaticMeshActor
{
public:
	class AcPlayerVehicleDisplayPoint*                 m_PlayerVehicleDisplayPoint;                      		// 0x000264 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerVehicleDisplayPointMesh");
		return pClassPointer;
	};

public:
	class AcPlayerVehicleDisplayPoint* RetPlayerVehicleDisplayPoint();//APBGame.cPlayerVehicleDisplayPointMesh.RetPlayerVehicleDisplayPoint
};
UClass* AcPlayerVehicleDisplayPointMesh::pClassPointer = NULL;

//0x000034 (0x000294 - 0x000260)
//cStatueDisplayPoint[0x103DB480]
class AcStatueDisplayPoint : public AActor
{
public:
	DWORD                                              VfTable_IiDisplayPoint;                           		// 0x000260 (0x0004)              
	class AcStatueModel*                               m_CurrentStatue;                                  		// 0x000264 (0x0004)              
	float                                              m_fStatueScale;                                   		// 0x000268 (0x0004)              
	float                                              m_fHeightOffset;                                  		// 0x00026C (0x0004)              
	class USpriteComponent*                            m_EditorSprite;                                   		// 0x000270 (0x0004)              
	class USkeletalMeshComponent*                      m_EditorSkeletalMesh;                             		// 0x000274 (0x0004)              
	class UcDisplayPointComponent*                     m_DisplayPointComponent;                          		// 0x000278 (0x0004)              
	int                                                m_nCharaterOwnerUID;                              		// 0x00027C (0x0004)              
	struct FString                                     m_sCharacterOwnerName;                            		// 0x000280 (0x000C)              
	unsigned char                                      m_eCharacterOwnerFaction;                         		// 0x00028C (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x00028D[0x3];                                   		// 0x00028D (0x0003) MISSED OFFSET
	int                                                m_HUDMarkerID;                                    		// 0x000290 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStatueDisplayPoint");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cStatueDisplayPoint.ReplicatedEvent
	void RemoveStatue();//APBGame.cStatueDisplayPoint.RemoveStatue
	class AcStatueModel* SpawnStatue();//APBGame.cStatueDisplayPoint.SpawnStatue
	class UcDisplayPointComponent* RetDisplayPointComponent();//APBGame.cStatueDisplayPoint.RetDisplayPointComponent
	void Destroyed();//APBGame.cStatueDisplayPoint.Destroyed
};
UClass* AcStatueDisplayPoint::pClassPointer = NULL;

//0x000078 (0x0002EC - 0x000274)
//cStatueModel[0x103DB350]
class AcStatueModel : public ASkeletalMeshActor
{
public:
	struct FCompactGolemDescriptor                     m_CustomisationGuids;                             		// 0x000274 (0x0030)              
	struct FCompactGolemDescriptor                     m_PreviousCustomisationGuids;                     		// 0x0002A4 (0x0030)              
	class UcCompressedAssetCustomisation*              m_CompressedCustomisationData;                    		// 0x0002D4 (0x0004)              
	class UMaterial*                                   m_pParentMaterial;                                		// 0x0002D8 (0x0004)              
	class UMaterialInstanceConstant*                   m_pMaterialInst;                                  		// 0x0002DC (0x0004)              
	class UMaterialInstanceConstant*                   m_pHairMaterialInst;                              		// 0x0002E0 (0x0004)              
	class UTexture2D*                                  m_pHairNormalMap;                                 		// 0x0002E4 (0x0004)              
	class AActor*                                      m_DisplayPointOwner;                              		// 0x0002E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStatueModel");
		return pClassPointer;
	};

public:
	void SetDisplayPointOwner(class AActor* DisplayPointOwner);//APBGame.cStatueModel.SetDisplayPointOwner
	class AActor* RetDisplayPointOwner();//APBGame.cStatueModel.RetDisplayPointOwner
	void SetPlayerModelNew(class UcCompressedAssetCustomisation* Data);//APBGame.cStatueModel.SetPlayerModelNew
	void Destroyed();//APBGame.cStatueModel.Destroyed
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cStatueModel.ReplicatedEvent
	void NotifyCustomisationChanged();//APBGame.cStatueModel.NotifyCustomisationChanged
};
UClass* AcStatueModel::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iDisplayPoint[0x103DB220]
class UiDisplayPoint : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iDisplayPoint");
		return pClassPointer;
	};

public:
	class UcDisplayPointComponent* RetDisplayPointComponent();//APBGame.iDisplayPoint.RetDisplayPointComponent
};
UClass* UiDisplayPoint::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cExplosionsManager[0x103DB0F0]
class UcExplosionsManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cExplosionsManager");
		return pClassPointer;
	};

public:
	void Explosion(class AcAPBPlayerController* InstigatingController,class AActor* AttachActor,FVector3 Location,int ExplosionType,float fProjectileLifetime,int WeaponType,class AActor* pHitActor);//APBGame.cExplosionsManager.Explosion
	bool GetExplosionAttributes(int nExplosionType,struct FExplosion* Attributes);//APBGame.cExplosionsManager.GetExplosionAttributes
};
UClass* UcExplosionsManager::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDHostingConfigFile[0x103DAFC0]
class UcSDDHostingConfigFile : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDHostingConfigFile");
		return pClassPointer;
	};
};
UClass* UcSDDHostingConfigFile::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDChat[0x103DAE90]
class UcSDDChat : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDChat");
		return pClassPointer;
	};
};
UClass* UcSDDChat::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDClan[0x103DAD60]
class UcSDDClan : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDClan");
		return pClassPointer;
	};
};
UClass* UcSDDClan::pClassPointer = NULL;

//0x000020 (0x000118 - 0x0000F8)
//cUIAction_CreateInventoryItem[0x103DAC30]
class UcUIAction_CreateInventoryItem : public UcUIAction_HostingOp
{
public:
	struct FString                                     m_sInventoryItemType;                             		// 0x0000F8 (0x000C)              
	unsigned long                                      m_bWaitForItemReplication : 1;                    		// 0x000104 (0x0004) [0x00000001] 
	struct FGuid                                       m_CreatedItemGuid;                                		// 0x000108 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cUIAction_CreateInventoryItem");
		return pClassPointer;
	};

public:
	void OnItemCreateCallback(struct FGuid ItemGuid,unsigned char eErrorCode,class UObject* pUserData);//APBGame.cUIAction_CreateInventoryItem.OnItemCreateCallback
};
UClass* UcUIAction_CreateInventoryItem::pClassPointer = NULL;

//0x000010 (0x0000C4 - 0x0000B4)
//cUIAction_GetInventoryCategoryInfo[0x103DA9D0]
class UcUIAction_GetInventoryCategoryInfo : public UUIAction
{
public:
	struct FEnumeratedName                             m_eInventoryItemCategory;                         		// 0x0000B4 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cUIAction_GetInventoryCategoryInfo");
		return pClassPointer;
	};
};
UClass* UcUIAction_GetInventoryCategoryInfo::pClassPointer = NULL;

//0x000010 (0x0000C4 - 0x0000B4)
//cUIAction_GetInventoryItemName[0x103DA8A0]
class UcUIAction_GetInventoryItemName : public UUIAction
{
public:
	struct FGuid                                       m_ItemGUID;                                       		// 0x0000B4 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cUIAction_GetInventoryItemName");
		return pClassPointer;
	};
};
UClass* UcUIAction_GetInventoryItemName::pClassPointer = NULL;

//0x00001D (0x000115 - 0x0000F8)
//cUIAction_OperateOnInventoryItem[0x103DA770]
class UcUIAction_OperateOnInventoryItem : public UcUIAction_HostingOp
{
public:
	struct FGuid                                       m_ItemGUID;                                       		// 0x0000F8 (0x0010)              
	struct FString                                     m_sParams;                                        		// 0x000108 (0x000C)              
	unsigned char                                      m_eOperation;                                     		// 0x000114 (0x0001)              PROPERTY: etItemOperation

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cUIAction_OperateOnInventoryItem");
		return pClassPointer;
	};

public:
	void OnOperatedOnItemCallback(int eErr,struct FGuid ItemGuid,unsigned char eOperation,DWORD pUserData);//APBGame.cUIAction_OperateOnInventoryItem.OnOperatedOnItemCallback
};
UClass* UcUIAction_OperateOnInventoryItem::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//cAttributeManager[0x103DA640]
class UcAttributeManager : public UObject
{
public:
	class UGolemBase*                                  m_pMaleBase;                                      		// 0x000040 (0x0004)              
	class UGolemBase*                                  m_pFemaleBase;                                    		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAttributeManager");
		return pClassPointer;
	};

public:
	void CreateMakeUpColourAttribute(struct FAttributesData* pData,struct FName Variable,unsigned char eGender);//APBGame.cAttributeManager.CreateMakeUpColourAttribute
	void CreateAttribute(struct FAttributesData* pData,struct FName Variable,unsigned char ePropertyType,unsigned char eGender,struct FName MaxVariable,unsigned char eAssetRebuildType);//APBGame.cAttributeManager.CreateAttribute
	void CreateTESTextureAttribute(struct FAttributesData* pData,struct FName TESTextureName,struct FName LayerProjectionAreaName,struct FName LayerProjectionInvertName);//APBGame.cAttributeManager.CreateTESTextureAttribute
	class UcAttributeManager* GetInstance();//APBGame.cAttributeManager.GetInstance
	void CreateBaseArrayLocalisedString(struct FAttributesData* pData,struct FName ArrayVariable,struct FName Variable,struct FString sSection);//APBGame.cAttributeManager.CreateBaseArrayLocalisedString
	void AddCharacterAttributes(struct FAttributesData* pData);//APBGame.cAttributeManager.AddCharacterAttributes
	void CreateArrayAttribute(struct FAttributesData* pData,struct FName ArrayVariable,struct FName Variable,unsigned char ePropertyType,unsigned char eGender,struct FName MaxVariable,unsigned char eAssetRebuildType);//APBGame.cAttributeManager.CreateArrayAttribute
	void CreateColourAttribute(struct FAttributesData* pData,struct FName Variable,unsigned char eGender);//APBGame.cAttributeManager.CreateColourAttribute
	void CreateAttributeFromNode(struct FAttributesData* pData,struct FName NodeName,unsigned char eGender);//APBGame.cAttributeManager.CreateAttributeFromNode
};
UClass* UcAttributeManager::pClassPointer = NULL;

//0x000090 (0x0002F0 - 0x000260)
//cUploadManager[0x103DA510]
class AcUploadManager : public AActor
{
public:
	TArray<class UcAttribute*>                         m_aMaleAttributes;                                		// 0x000260 (0x000C)              
	TArray<class UcAttribute*>                         m_aFemaleAttributes;                              		// 0x00026C (0x000C)              
	unsigned char                                      m_aVehicleComponentRewardUnlocks[0x3C];           		// 0x000278 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_mapBaseNameToMandatoryComponents[0x3C];         		// 0x0002B4 (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cUploadManager");
		return pClassPointer;
	};

public:
	void BeginUpload(class AcAPBPlayerController* pPC,int nDataSize,struct FGuid nInventoryItemGuid,struct FGuid OriginalItemGuid);//APBGame.cUploadManager.BeginUpload
	bool GetUploadItemDataChunk(struct FDataChunk* newChunk,TArray<unsigned char> aData,int nChunk);//APBGame.cUploadManager.GetUploadItemDataChunk
	void UploadChunk(class AcAPBPlayerController* pPC,struct FDataChunk chunk,struct FGuid nInventoryItemGuid);//APBGame.cUploadManager.UploadChunk
	void Initialise();//APBGame.cUploadManager.Initialise
	class AcUploadManager* GetInstance();//APBGame.cUploadManager.GetInstance
};
UClass* AcUploadManager::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cAnimationInfo[0x103DA3E0]
class UcAnimationInfo : public UObject
{
public:
	class UAnimTree*                                   m_AnimTree;                                       		// 0x000040 (0x0004)              
	TArray<class UAnimSet*>                            m_aAnimSets;                                      		// 0x000044 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimationInfo");
		return pClassPointer;
	};
};
UClass* UcAnimationInfo::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//cSetupInfo[0x103DA2B0]
class UcSetupInfo : public UObject
{
public:
	class USkeletalMesh*                               m_SkeletalMesh;                                   		// 0x000040 (0x0004)              
	class UAnimTree*                                   m_AnimTree;                                       		// 0x000044 (0x0004)              
	TArray<class UAnimSet*>                            m_aAnimSets;                                      		// 0x000048 (0x000C)              
	class UcAnimationInfo*                             m_pAnimationInfo;                                 		// 0x000054 (0x0004)              
	class AcSetupTypeManager*                          m_pSTM;                                           		// 0x000058 (0x0004)              
	unsigned long                                      m_bIsManaged : 1;                                 		// 0x00005C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupInfo");
		return pClassPointer;
	};
};
UClass* UcSetupInfo::pClassPointer = NULL;

//0x00000C (0x00006C - 0x000060)
//cPedestrianSetupInfo[0x103DA180]
class UcPedestrianSetupInfo : public UcSetupInfo
{
public:
	struct FString                                     m_sPedestrianName;                                		// 0x000060 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianSetupInfo");
		return pClassPointer;
	};
};
UClass* UcPedestrianSetupInfo::pClassPointer = NULL;

//0x000070 (0x0002E4 - 0x000274)
//cRagdollableNPCSkeletalMeshActor[0x103DA050]
class AcRagdollableNPCSkeletalMeshActor : public ASkeletalMeshActor
{
public:
	DWORD                                              VfTable_ICombatTargetingInterface;                		// 0x000274 (0x0004)              
	DWORD                                              VfTable_IDamageInterface;                         		// 0x000278 (0x0004)              
	struct FNPCHitData                                 m_NPCHitData;                                     		// 0x00027C (0x0030)              
	class UPhysicsAsset*                               mPhysicsAsset_HighDetail;                         		// 0x0002AC (0x0004)              
	unsigned long                                      m_bCanShoot : 1;                                  		// 0x0002B0 (0x0004) [0x00000001] 
	unsigned long                                      m_bIsRagdollActive : 1;                           		// 0x0002B0 (0x0004) [0x00000002] 
	unsigned long                                      m_bIsRechargingHealth : 1;                        		// 0x0002B0 (0x0004) [0x00000004] 
	unsigned long                                      m_bHasFullHealth : 1;                             		// 0x0002B0 (0x0004) [0x00000008] 
	struct FCylinder                                   CameraNoRenderCylinder_High;                      		// 0x0002B4 (0x0008)              
	struct FCylinder                                   CameraNoRenderCylinder_FlickerBuffer;             		// 0x0002BC (0x0008)              
	int                                                m_nLastExplosionType;                             		// 0x0002C4 (0x0004)              
	FVector3                                           m_vLastExplosionLocation;                         		// 0x0002C8 (0x000C)              
	float                                              m_fTimeSinceRagdoll;                              		// 0x0002D4 (0x0004)              
	float                                              m_fHealth;                                        		// 0x0002D8 (0x0004)              
	float                                              m_fTimeSinceLastDamage;                           		// 0x0002DC (0x0004)              
	class UcAudioNPCInterface*                         m_AudioNPCInterface;                              		// 0x0002E0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cRagdollableNPCSkeletalMeshActor");
		return pClassPointer;
	};

public:
	void PlayRagdoll();//APBGame.cRagdollableNPCSkeletalMeshActor.PlayRagdoll
	bool CanBeDamaged(class AcAPBPlayerController* PC);//APBGame.cRagdollableNPCSkeletalMeshActor.CanBeDamaged
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//APBGame.cRagdollableNPCSkeletalMeshActor.TakeRadiusDamage
	void Die(class AController* EventInstigator,FVector3 HitLocation,FVector3 Momentum,class UClass* DamageType,int nWeaponType);//APBGame.cRagdollableNPCSkeletalMeshActor.Die
	bool IsSoft();//APBGame.cRagdollableNPCSkeletalMeshActor.IsSoft
	bool CanBeTargeted(class AcAPBPlayerController* PC);//APBGame.cRagdollableNPCSkeletalMeshActor.CanBeTargeted
	void ProcessDamage(int DamageAmount,class AController* EventInstigator,FVector3 HitLocation,FVector3 Momentum,class UClass* DamageType,int nWeaponType);//APBGame.cRagdollableNPCSkeletalMeshActor.ProcessDamage
	void TornOff();//APBGame.cRagdollableNPCSkeletalMeshActor.TornOff
	bool Restore(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.cRagdollableNPCSkeletalMeshActor.Restore
	bool IsHard();//APBGame.cRagdollableNPCSkeletalMeshActor.IsHard
	void RetExplosionOcclusionExtents(TArray<FVector3>* Verts,FVector3* ExplosionLocation);//APBGame.cRagdollableNPCSkeletalMeshActor.RetExplosionOcclusionExtents
	bool IsDynamicTarget();//APBGame.cRagdollableNPCSkeletalMeshActor.IsDynamicTarget
	bool IsStaticTarget();//APBGame.cRagdollableNPCSkeletalMeshActor.IsStaticTarget
	FVector3 GetWeaponPhysicsImpulse(FVector3 vHitLoc,FVector3 vMomentum,struct FTraceHitInfo* OutHitInfo,bool bIsHitReaction);//APBGame.cRagdollableNPCSkeletalMeshActor.GetWeaponPhysicsImpulse
	void GetCameraNoRenderCylinder(float* Radius,float* Height,bool bViewTarget,bool bHiddenLocally);//APBGame.cRagdollableNPCSkeletalMeshActor.GetCameraNoRenderCylinder
};
UClass* AcRagdollableNPCSkeletalMeshActor::pClassPointer = NULL;

//0x00007C (0x000360 - 0x0002E4)
//cNPCDriverSkeletalMeshActor[0x103D9F20]
class AcNPCDriverSkeletalMeshActor : public AcRagdollableNPCSkeletalMeshActor
{
public:
	DWORD                                              VfTable_IcIEventReaction;                         		// 0x0002E4 (0x0004)              
	class UcPedestrianSetupInfo*                       m_pNPCDriverSetupInfo;                            		// 0x0002E8 (0x0004)              
	int                                                m_bNPCDriverUsingProperAsset;                     		// 0x0002EC (0x0004)              
	int                                                m_nNPCDriverClientID;                             		// 0x0002F0 (0x0004)              
	class UcEventManager*                              m_pEM;                                            		// 0x0002F4 (0x0004)              
	class UcReactionManager*                           m_pRM;                                            		// 0x0002F8 (0x0004)              
	class UcNPCDriverSkeletalMeshComponent*            m_DriverSkeletalMeshComponent;                    		// 0x0002FC (0x0004)              
	int                                                m_nAssetIndex;                                    		// 0x000300 (0x0004)              
	int                                                m_nPedestrianType;                                		// 0x000304 (0x0004)              
	struct FDriverEjectData                            m_DriverEjectData;                                		// 0x000308 (0x000C)              
	unsigned long                                      m_bDriverInitialised : 1;                         		// 0x000314 (0x0004) [0x00000001] 
	unsigned long                                      m_bCollisionEnabled : 1;                          		// 0x000314 (0x0004) [0x00000002] 
	unsigned long                                      m_bForceDisableCollision : 1;                     		// 0x000314 (0x0004) [0x00000004] 
	unsigned long                                      m_bEjectLaterAnimFinished : 1;                    		// 0x000314 (0x0004) [0x00000008] 
	unsigned long                                      m_bRagdollDespawnTimerSet : 1;                    		// 0x000314 (0x0004) [0x00000010] 
	unsigned long                                      m_bVehicleMoved : 1;                              		// 0x000314 (0x0004) [0x00000020] 
	unsigned long                                      m_bEnableDebugRendering : 1;                      		// 0x000314 (0x0004) [0x00000040] 
	unsigned long                                      m_bEjectSequenceStarted : 1;                      		// 0x000314 (0x0004) [0x00000080] 
	DWORD                                              m_pBoundingCylinder;                              		// 0x000318 (0x0004)              
	DWORD                                              m_pBroadBoundingCylinder;                         		// 0x00031C (0x0004)              
	float                                              m_fEjectDuration;                                 		// 0x000320 (0x0004)              
	float                                              m_fTimeSinceCollisionOn;                          		// 0x000324 (0x0004)              
	float                                              m_fAnimTimeWhenCollisionEnabled;                  		// 0x000328 (0x0004)              
	struct FName                                       m_AnimWhenCollisionEnabled;                       		// 0x00032C (0x0008)              
	FVector3                                           m_vVehicleInitialLocation;                        		// 0x000334 (0x000C)              
	float                                              m_fBlockPlayerWaitingTime;                        		// 0x000340 (0x0004)              
	float                                              m_fCheckFloorTimer;                               		// 0x000344 (0x0004)              
	float                                              m_fWaitForDoorToOpenTime;                         		// 0x000348 (0x0004)              
	float                                              m_fCheckFloorIntervalTime;                        		// 0x00034C (0x0004)              
	float                                              m_fMaxDriverInsideVehicleMoveDistance;            		// 0x000350 (0x0004)              
	TArray<class URWTechReachSpec*>                    m_aRegisteredEdgeList;                            		// 0x000354 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCDriverSkeletalMeshActor");
		return pClassPointer;
	};

public:
	bool ReplicatedEvent_Native(struct FName pr_Name);//APBGame.cNPCDriverSkeletalMeshActor.ReplicatedEvent_Native
	class UcNPCDriverSkeletalMeshComponent* GetDriverMesh();//APBGame.cNPCDriverSkeletalMeshActor.GetDriverMesh
	void ForceUpdateLighting();//APBGame.cNPCDriverSkeletalMeshActor.ForceUpdateLighting
	void DestroyDriver();//APBGame.cNPCDriverSkeletalMeshActor.DestroyDriver
	void OnDriverDestroy();//APBGame.cNPCDriverSkeletalMeshActor.OnDriverDestroy
	void EnableCollision();//APBGame.cNPCDriverSkeletalMeshActor.EnableCollision
	void TriggerDeSpawnDriver();//APBGame.cNPCDriverSkeletalMeshActor.TriggerDeSpawnDriver
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cNPCDriverSkeletalMeshActor.ReplicatedEvent
	void DeRegisterWithPGEdges();//APBGame.cNPCDriverSkeletalMeshActor.DeRegisterWithPGEdges
	void EnterRagdoll();//APBGame.cNPCDriverSkeletalMeshActor.EnterRagdoll
	void TornOff();//APBGame.cNPCDriverSkeletalMeshActor.TornOff
	void OnAnimEnd(class UAnimNodeSequence* SeqNode,float PlayedTime,float ExcessTime);//APBGame.cNPCDriverSkeletalMeshActor.OnAnimEnd
	void DisableCollision();//APBGame.cNPCDriverSkeletalMeshActor.DisableCollision
};
UClass* AcNPCDriverSkeletalMeshActor::pClassPointer = NULL;

//0x000180 (0x000464 - 0x0002E4)
//cNPCSkeletalMeshActor[0x103D9DF0]
class AcNPCSkeletalMeshActor : public AcRagdollableNPCSkeletalMeshActor
{
public:
	DWORD                                              VfTable_ITaskTargetInterface;                     		// 0x0002E4 (0x0004)              
	DWORD                                              VfTable_IUseInterface;                            		// 0x0002E8 (0x0004)              
	DWORD                                              VfTable_IiNPCLookAt;                              		// 0x0002EC (0x0004)              
	int                                                m_nID;                                            		// 0x0002F0 (0x0004)              
	int                                                m_nTypeID;                                        		// 0x0002F4 (0x0004)              
	int                                                m_eNPCRaceType;                                   		// 0x0002F8 (0x0004)              
	int                                                m_nAudioType;                                     		// 0x0002FC (0x0004)              
	class UcNPCPedestrianBrain*                        m_pBrain;                                         		// 0x000300 (0x0004)              
	unsigned char                                      m_eBrainAndPhysRepState;                          		// 0x000304 (0x0001)              PROPERTY: etBrainAndPhysRepState
	unsigned char                                      m_eBrainAndPhysRepState_Replicated;               		// 0x000305 (0x0001)              PROPERTY: etBrainAndPhysRepState
	unsigned char                                      m_eNewTTIStage;                                   		// 0x000306 (0x0001)              PROPERTY: etTTIStage
	unsigned char                                      m_eNewTTIAnimationIndex;                          		// 0x000307 (0x0001)              PROPERTY: 
	unsigned char                                      m_eOverrideCSAState;                              		// 0x000308 (0x0001)              PROPERTY: etCSA_IATState
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x000309 (0x0001)              PROPERTY: etTaskTargetVFXState
	unsigned char                                      _0x00030A[0x2];                                   		// 0x00030A (0x0002) MISSED OFFSET
	DWORD                                              m_pPedestrianHeightManager;                       		// 0x00030C (0x0004)              
	DWORD                                              m_pPedestrianBankingManager;                      		// 0x000310 (0x0004)              
	DWORD                                              m_pPedestrianRotationManager;                     		// 0x000314 (0x0004)              
	float                                              m_fLocomotionSpeed;                               		// 0x000318 (0x0004)              
	class AcLCManager*                                 m_pLCManager;                                     		// 0x00031C (0x0004)              
	class UcPedestrianSetupInfo*                       m_pSetupInfo;                                     		// 0x000320 (0x0004)              
	unsigned long                                      m_bAssetsLoaded : 1;                              		// 0x000324 (0x0004) [0x00000001] 
	unsigned long                                      m_bUsingProperAsset : 1;                          		// 0x000324 (0x0004) [0x00000002] 
	unsigned long                                      m_bTTIInProgress : 1;                             		// 0x000324 (0x0004) [0x00000004] 
	unsigned long                                      m_bPlayDespawnParticleEffect : 1;                 		// 0x000324 (0x0004) [0x00000008] 
	unsigned long                                      m_bIsCrouching : 1;                               		// 0x000324 (0x0004) [0x00000010] 
	unsigned long                                      m_bIsBeingNudged : 1;                             		// 0x000324 (0x0004) [0x00000020] 
	unsigned long                                      m_bHasBeenNudged : 1;                             		// 0x000324 (0x0004) [0x00000040] 
	unsigned long                                      m_bRootMotionActive : 1;                          		// 0x000324 (0x0004) [0x00000080] 
	unsigned long                                      m_bShouldUpdateCollisionVolume : 1;               		// 0x000324 (0x0004) [0x00000100] 
	unsigned long                                      m_bShouldDetachSkeletalMeshComponent : 1;         		// 0x000324 (0x0004) [0x00000200] 
	unsigned long                                      m_bDebugOverrideClientPedAssets : 1;              		// 0x000324 (0x0004) [0x00000400] 
	unsigned long                                      m_bPlayerTaskRelevant : 1;                        		// 0x000324 (0x0004) [0x00000800] 
	unsigned long                                      m_bPlayerCanTriggerTask : 1;                      		// 0x000324 (0x0004) [0x00001000] 
	unsigned long                                      m_bMissionCanShoot : 1;                           		// 0x000324 (0x0004) [0x00002000] 
	int                                                m_nAssetIndex;                                    		// 0x000328 (0x0004)              
	int                                                m_nAssetIndex_Replicated;                         		// 0x00032C (0x0004)              
	class UMaterialInstanceConstant*                   m_RacialMatInst;                                  		// 0x000330 (0x0004)              
	class UMaterialInstanceConstant*                   m_ClothingMatInst;                                		// 0x000334 (0x0004)              
	struct FSPedStateReplicated                        m_PedState_ReplicatedInitial;                     		// 0x000338 (0x0040)              
	struct FSPedStateReplicated                        m_PedStateUpdate_Replicated;                      		// 0x000378 (0x0040)              
	float                                              m_afEvtCriteriaTimers_R[0x8];                     		// 0x0003B8 (0x0020)              
	struct FTTIReactionData                            m_TTIReactionData_Replicated;                     		// 0x0003D8 (0x0008)              
	struct FTTIReactionInProgressData                  m_TTIReactionInProgressData_Replicated;           		// 0x0003E0 (0x0010)              
	class UAnimNodeBlendList*                          m_pAnimWhileWalkingNode;                          		// 0x0003F0 (0x0004)              
	class UAnimNodeBlendList*                          m_pAnimWhileStationaryNode;                       		// 0x0003F4 (0x0004)              
	class UcAPBAnimNodeBlendList*                      m_pSyncedReactionAnimNode;                        		// 0x0003F8 (0x0004)              
	class UcAPBAnimNodeBlendList*                      m_pASyncedReactionAnimNode;                       		// 0x0003FC (0x0004)              
	class UcAPBAnimNodeBlendList*                      m_pStationaryReactionAnimNode;                    		// 0x000400 (0x0004)              
	class UcAnimNodeBlendAvoidCharacter*               m_pAnimNodeBlendAvoidCharacter;                   		// 0x000404 (0x0004)              
	class UAnimNodeScaleRateBySpeed*                   m_pPaceNode;                                      		// 0x000408 (0x0004)              
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x00040C (0x0004)              
	class UcTaskTargetComponentNPC*                    m_TaskTarget;                                     		// 0x000410 (0x0004)              
	class AcProp*                                      m_VignetteProp;                                   		// 0x000414 (0x0004)              
	class UcVignetteDescriptor*                        m_DefaultVignetteDescriptor;                      		// 0x000418 (0x0004)              
	int                                                m_nLastVNodeIDPlayedAt;                           		// 0x00041C (0x0004)              
	int                                                m_nNPCLookAtPriority;                             		// 0x000420 (0x0004)              
	float                                              m_fCrouchColVolRadiusModifier;                    		// 0x000424 (0x0004)              
	float                                              m_fCrouchColVolHeightModifier;                    		// 0x000428 (0x0004)              
	float                                              m_fTimeLeftBeforeSelfDestruct;                    		// 0x00042C (0x0004)              
	float                                              m_fTimeLeftBeforeRagdollDespawn;                  		// 0x000430 (0x0004)              
	class AcAPBVehicleBase*                            m_pNudgingVehicle;                                		// 0x000434 (0x0004)              
	float                                              m_cfg_fNudgeTimeoutDuration;                      		// 0x000438 (0x0004)              
	float                                              m_cfg_fNudgeRetractDelay;                         		// 0x00043C (0x0004)              
	float                                              m_fTimeSinceLastNudge;                            		// 0x000440 (0x0004)              
	FVector2                                           m_vNudgeOffsetSpring;                             		// 0x000444 (0x0008)              
	float                                              m_fCollisionVolumeUpdateTimer;                    		// 0x00044C (0x0004)              
	float                                              m_fVignetteStartHeight;                           		// 0x000450 (0x0004)              
	float                                              RagdollBadSleep;                                  		// 0x000454 (0x0004)              
	float                                              m_fAccumulatedDeltaSeconds;                       		// 0x000458 (0x0004)              
	int                                                m_nPhoneDialogueStartTime_ReplicatedInitial;      		// 0x00045C (0x0004)              
	int                                                m_nRepTaskOperationID;                            		// 0x000460 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCSkeletalMeshActor");
		return pClassPointer;
	};

public:
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cNPCSkeletalMeshActor.TriggerTaskTarget
	void ClientNotifyTaskRelevantChanged(bool i_bTaskRelevant);//APBGame.cNPCSkeletalMeshActor.ClientNotifyTaskRelevantChanged
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cNPCSkeletalMeshActor.IsCSASupported
	void ClientNotifyTaskOperationChanged(int nTaskOperationIndex);//APBGame.cNPCSkeletalMeshActor.ClientNotifyTaskOperationChanged
	class UcTaskTargetComponent* GetTaskTargetComponent();//APBGame.cNPCSkeletalMeshActor.GetTaskTargetComponent
	void ClientNotifyCanTriggerTaskChanged(bool i_bPlayerCanTriggerTask);//APBGame.cNPCSkeletalMeshActor.ClientNotifyCanTriggerTaskChanged
	void CleanUpTaskTarget();//APBGame.cNPCSkeletalMeshActor.CleanUpTaskTarget
	FVector3 GetLookAtPosition();//APBGame.cNPCSkeletalMeshActor.GetLookAtPosition
	class AcProp* GetVignetteProp();//APBGame.cNPCSkeletalMeshActor.GetVignetteProp
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cNPCSkeletalMeshActor.ResetTaskTarget
	void ReplicatedArrayEvent(struct FName sArrayName,int nElementIndex);//APBGame.cNPCSkeletalMeshActor.ReplicatedArrayEvent
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.cNPCSkeletalMeshActor.InitTaskTarget
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.cNPCSkeletalMeshActor.ActivateTaskTarget
	void ClientNotifyTaskVFXStateChanged(unsigned char eTriggeredState);//APBGame.cNPCSkeletalMeshActor.ClientNotifyTaskVFXStateChanged
	void UseProp(struct FName sUseTagName);//APBGame.cNPCSkeletalMeshActor.UseProp
	void OnAnimEndNative(class UAnimNodeSequence* pr_pSeqNode,float pr_fPlayedTime,float pr_fExcessTime);//APBGame.cNPCSkeletalMeshActor.OnAnimEndNative
	void CancelInteractionWithProp(class UActorComponent* pr_pProp);//APBGame.cNPCSkeletalMeshActor.CancelInteractionWithProp
	bool IsOpenWorldTarget();//APBGame.cNPCSkeletalMeshActor.IsOpenWorldTarget
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cNPCSkeletalMeshActor.BeginUse
	void ProcessDamage(int DamageAmount,class AController* EventInstigator,FVector3 HitLocation,FVector3 Momentum,class UClass* DamageType,int nWeaponType);//APBGame.cNPCSkeletalMeshActor.ProcessDamage
	int GetLookAtPriority();//APBGame.cNPCSkeletalMeshActor.GetLookAtPriority
	void OnAnimEnd(class UAnimNodeSequence* SeqNode,float PlayedTime,float ExcessTime);//APBGame.cNPCSkeletalMeshActor.OnAnimEnd
	void ReplicatedEvent(struct FName sVariableName);//APBGame.cNPCSkeletalMeshActor.ReplicatedEvent
	void Die(class AController* EventInstigator,FVector3 HitLocation,FVector3 Momentum,class UClass* DamageType,int nWeaponType);//APBGame.cNPCSkeletalMeshActor.Die
	void SetLookAtPriority(int pr_nLookAtPriority);//APBGame.cNPCSkeletalMeshActor.SetLookAtPriority
	bool ReplicatedArrayEvent_Native(struct FName pr_sArrayName,int pr_nElementIndex);//APBGame.cNPCSkeletalMeshActor.ReplicatedArrayEvent_Native
	void EnterRagdoll();//APBGame.cNPCSkeletalMeshActor.EnterRagdoll
	bool ReplicatedEvent_Native(struct FName pr_Name);//APBGame.cNPCSkeletalMeshActor.ReplicatedEvent_Native
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cNPCSkeletalMeshActor.PartiallyTriggerTaskTarget
	bool IsCSASupportedNative(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cNPCSkeletalMeshActor.IsCSASupportedNative
	void DeactivateTaskTarget();//APBGame.cNPCSkeletalMeshActor.DeactivateTaskTarget
	void MoveTargetState(class AActor* targetActor);//APBGame.cNPCSkeletalMeshActor.MoveTargetState
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cNPCSkeletalMeshActor.EndUse
	void TornOff();//APBGame.cNPCSkeletalMeshActor.TornOff
};
UClass* AcNPCSkeletalMeshActor::pClassPointer = NULL;

//0x000011 (0x0004CD - 0x0004BC)
//cNPCDriverSkeletalMeshComponent[0x103D9CC0]
class UcNPCDriverSkeletalMeshComponent : public USkeletalMeshDLODComponent
{
public:
	int                                                m_nNPCTypeDriver;                                 		// 0x0004BC (0x0004)              
	int                                                m_nAssetIndex;                                    		// 0x0004C0 (0x0004)              
	struct FName                                       m_NodePlayEjectAnimsOn;                           		// 0x0004C4 (0x0008)              
	unsigned char                                      m_LastEjectAnimation;                             		// 0x0004CC (0x0001)              PROPERTY: etNPCEjectAnimation

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNPCDriverSkeletalMeshComponent");
		return pClassPointer;
	};

public:
	void CancelEjectAnimation();//APBGame.cNPCDriverSkeletalMeshComponent.CancelEjectAnimation
	void MakeRootMotionFitGround(unsigned char eNPCEjectAnimation,unsigned char eVehiclePositionIndex,class AcAPBVehicleBase* VehicleInside);//APBGame.cNPCDriverSkeletalMeshComponent.MakeRootMotionFitGround
	void PlayEjectAnimation(unsigned char eNPCEjectAnimation,unsigned char eVehiclePositionIndex,class AcAPBVehicleBase* VehicleInside);//APBGame.cNPCDriverSkeletalMeshComponent.PlayEjectAnimation
};
UClass* UcNPCDriverSkeletalMeshComponent::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//cAPBMultiLaneRoute[0x103D9B90]
class UcAPBMultiLaneRoute : public UObject
{
public:
	TArray<struct FcAPBMultiLaneRouteSection>          m_aSections;                                      		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBMultiLaneRoute");
		return pClassPointer;
	};

public:
	void SetDefaultLane(int nSectionIndex,int nDefaultLane);//APBGame.cAPBMultiLaneRoute.SetDefaultLane
	int GetNextLaneIndex(int nSectionIndex,int nLaneIndex);//APBGame.cAPBMultiLaneRoute.GetNextLaneIndex
	int GetNumSections();//APBGame.cAPBMultiLaneRoute.GetNumSections
	void Render(class UCanvas* Canvas,class UcNPCVehicleBrain* pVehicleBrain);//APBGame.cAPBMultiLaneRoute.Render
	unsigned char GetDefaultLane(int nSectionIndex);//APBGame.cAPBMultiLaneRoute.GetDefaultLane
	void Empty();//APBGame.cAPBMultiLaneRoute.Empty
	void GetLocationAndDirection(struct FcRoutePosition pos,FVector3* vLocation,FVector3* vDirection);//APBGame.cAPBMultiLaneRoute.GetLocationAndDirection
	class URWTechReachSpec* GetLaneEdge(int nSectionIndex,int nLaneIndex);//APBGame.cAPBMultiLaneRoute.GetLaneEdge
	int GetPreviousLaneIndex(int nSectionIndex,int nLaneIndex);//APBGame.cAPBMultiLaneRoute.GetPreviousLaneIndex
	void SetTurnType(int nSectionIndex,unsigned char eTurnType);//APBGame.cAPBMultiLaneRoute.SetTurnType
	int AddLane(int nSectionIndex,class URWTechReachSpec* pLaneEdge);//APBGame.cAPBMultiLaneRoute.AddLane
	unsigned char GetTurnType(int nSectionIndex);//APBGame.cAPBMultiLaneRoute.GetTurnType
	int GetLaneIndex(int nSectionIndex,class URWTechReachSpec* pLaneEdge);//APBGame.cAPBMultiLaneRoute.GetLaneIndex
	void Render2D(class UCanvas* Canvas);//APBGame.cAPBMultiLaneRoute.Render2D
	int AddSection();//APBGame.cAPBMultiLaneRoute.AddSection
	int GetNumLanes(int nSectionIndex);//APBGame.cAPBMultiLaneRoute.GetNumLanes
};
UClass* UcAPBMultiLaneRoute::pClassPointer = NULL;

//0x000034 (0x000074 - 0x000040)
//cAPBRoute[0x103D9A60]
class UcAPBRoute : public UObject
{
public:
	class URWTechNode*                                 m_pStartNode;                                     		// 0x000040 (0x0004)              
	class URWTechNode*                                 m_pEndNode;                                       		// 0x000044 (0x0004)              
	TArray<class URWTechNode*>                         m_aNodes;                                         		// 0x000048 (0x000C)              
	int                                                m_nID;                                            		// 0x000054 (0x0004)              
	unsigned long                                      m_bSuccessfullyGenerated : 1;                     		// 0x000058 (0x0004) [0x00000001] 
	float                                              m_fCost;                                          		// 0x00005C (0x0004)              
	float                                              m_fShortestRouteLength;                           		// 0x000060 (0x0004)              
	float                                              m_fLength;                                        		// 0x000064 (0x0004)              
	TArray<unsigned char>                              m_aVehicleTypesAllowed;                           		// 0x000068 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBRoute");
		return pClassPointer;
	};
};
UClass* UcAPBRoute::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cAStarManager[0x103D9930]
class UcAStarManager : public UObject
{
public:
	class AcLCManager*                                 m_LCManager;                                      		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAStarManager");
		return pClassPointer;
	};

public:
	void SetLCManager(class AcLCManager* pr_LCManager);//APBGame.cAStarManager.SetLCManager
	bool FindRoute(class UcAPBRoute* pr_pRouteToFill,bool pr_bUseAllowedPaths);//APBGame.cAStarManager.FindRoute
};
UClass* UcAStarManager::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cPedestrianBlockManager[0x103D9800]
class UcPedestrianBlockManager : public UObject
{
public:
	class UcNodeManager*                               m_pNodeManager;                                   		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianBlockManager");
		return pClassPointer;
	};

public:
	void SetNodeManager(class UcNodeManager* pr_pNM);//APBGame.cPedestrianBlockManager.SetNodeManager
	class UcNodeManager* GetNodeManager();//APBGame.cPedestrianBlockManager.GetNodeManager
	class AcLCManager* GetLCManager();//APBGame.cPedestrianBlockManager.GetLCManager
	class AWorldInfo* GetWorldInfo();//APBGame.cPedestrianBlockManager.GetWorldInfo
};
UClass* UcPedestrianBlockManager::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//cPedestrianDetailedRoute[0x103D96D0]
class UcPedestrianDetailedRoute : public UObject
{
public:
	class UcPedestrianRouteFollower*                   m_pRouteFollower;                                 		// 0x000040 (0x0004)              
	TArray<class URWTechNode*>                         m_aNodes;                                         		// 0x000044 (0x000C)              
	TArray<FVector3>                                   m_aNodeOffsets;                                   		// 0x000050 (0x000C)              
	int                                                m_cfg_nNumSmoothingIterationsPerNode;             		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianDetailedRoute");
		return pClassPointer;
	};
};
UClass* UcPedestrianDetailedRoute::pClassPointer = NULL;

//0x000054 (0x000094 - 0x000040)
//cPedestrianLocomotion[0x103D95A0]
class UcPedestrianLocomotion : public UObject
{
public:
	class UcPedestrianRouteFollower*                   m_pRouteFollower;                                 		// 0x000040 (0x0004)              
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x000044 (0x0004)              
	FVector3                                           m_vPosition;                                      		// 0x000048 (0x000C)              
	FVector3                                           m_vDirection;                                     		// 0x000054 (0x000C)              
	FRotator                                           m_rRotation;                                      		// 0x000060 (0x000C)              
	FVector3                                           m_vVelocity;                                      		// 0x00006C (0x000C)              
	unsigned char                                      m_eLState;                                        		// 0x000078 (0x0001)              PROPERTY: etLocomotionState
	unsigned char                                      m_eNextLState;                                    		// 0x000079 (0x0001)              PROPERTY: etLocomotionState
	unsigned char                                      _0x00007A[0x2];                                   		// 0x00007A (0x0002) MISSED OFFSET
	float                                              m_fLocomotionSpeed;                               		// 0x00007C (0x0004)              
	class UcBaseLocomotionState*                       m_pCurrentState;                                  		// 0x000080 (0x0004)              
	class UcEdgeLocomotionState*                       m_pEdgeState;                                     		// 0x000084 (0x0004)              
	class UcSmoothLocomotionState*                     m_pSmoothState;                                   		// 0x000088 (0x0004)              
	class UcEdgeLocomotionStateControlPoints*          m_pEdgeStateControlPoints;                        		// 0x00008C (0x0004)              
	class UcSmoothLocomotionStateControlPoints*        m_pSmoothStateControlPoints;                      		// 0x000090 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianLocomotion");
		return pClassPointer;
	};
};
UClass* UcPedestrianLocomotion::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cPedestrianPathGenerator[0x103D9470]
class UcPedestrianPathGenerator : public UObject
{
public:
	class AcLCManager*                                 m_pLCManager;                                     		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianPathGenerator");
		return pClassPointer;
	};
};
UClass* UcPedestrianPathGenerator::pClassPointer = NULL;

//0x000044 (0x000084 - 0x000040)
//cPedestrianRouteFollower[0x103D9340]
class UcPedestrianRouteFollower : public UObject
{
public:
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x000040 (0x0004)              
	class UcPedestrianLocomotion*                      m_pLocomotion;                                    		// 0x000044 (0x0004)              
	unsigned char                                      m_eRState;                                        		// 0x000048 (0x0001)              PROPERTY: etRouteState
	unsigned char                                      _0x000049[0x3];                                   		// 0x000049 (0x0003) MISSED OFFSET
	class UcPedestrianDetailedRoute*                   m_pDTRoute;                                       		// 0x00004C (0x0004)              
	class URWTechNode*                                 m_pDTRouteNode;                                   		// 0x000050 (0x0004)              
	int                                                m_nDTRouteIndex;                                  		// 0x000054 (0x0004)              
	int                                                m_nScheduledRerouteIndex;                         		// 0x000058 (0x0004)              
	float                                              m_fLocomotionSpeed;                               		// 0x00005C (0x0004)              
	FVector3                                           m_vFirstDTRouteNodeOffset;                        		// 0x000060 (0x000C)              
	float                                              m_fLookAheadVarianceDistance;                     		// 0x00006C (0x0004)              
	float                                              m_fLookAheadDistance;                             		// 0x000070 (0x0004)              
	int                                                m_nNextCrossingNodeRouteIndex;                    		// 0x000074 (0x0004)              
	class UcPedestrianCrossing*                        m_pNextCrossing;                                  		// 0x000078 (0x0004)              
	float                                              m_fDistanceToStopLine;                            		// 0x00007C (0x0004)              
	DWORD                                              m_pEdgeUsageManager;                              		// 0x000080 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianRouteFollower");
		return pClassPointer;
	};

public:
	void SetLocomotionSpeed(float pr_fLocomotionSpeed);//APBGame.cPedestrianRouteFollower.SetLocomotionSpeed
};
UClass* UcPedestrianRouteFollower::pClassPointer = NULL;

//0x000170 (0x0001B0 - 0x000040)
//cVehicleRouteFollower[0x103D9210]
class UcVehicleRouteFollower : public UObject
{
public:
	class UcNPCVehicleBrain*                           m_pVehicleBrain;                                  		// 0x000040 (0x0004)              
	class UcAPBRoute*                                  m_PathfindingRoute;                               		// 0x000044 (0x0004)              
	class UcAPBMultiLaneRoute*                         m_DetailedRoute;                                  		// 0x000048 (0x0004)              
	struct FcCubicBezierCurveStruct                    m_Curve;                                          		// 0x00004C (0x0144)              
	class UcBaseSpeedState*                            m_pSpeedState;                                    		// 0x000190 (0x0004)              
	class UcBaseLaneState*                             m_pLaneState;                                     		// 0x000194 (0x0004)              
	class UcChangeSpeedState*                          m_pChangeSpeedState;                              		// 0x000198 (0x0004)              
	class UcConstantSpeedState*                        m_pConstantSpeedState;                            		// 0x00019C (0x0004)              
	class UcChangeLaneState*                           m_pChangeLaneState;                               		// 0x0001A0 (0x0004)              
	class UcFollowLaneState*                           m_pFollowLaneState;                               		// 0x0001A4 (0x0004)              
	float                                              m_fConstantTickTimeLeft;                          		// 0x0001A8 (0x0004)              
	int                                                m_nNextSpliceArrayIndex;                          		// 0x0001AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleRouteFollower");
		return pClassPointer;
	};

public:
	class UcFollowLaneState* GoToFollowLaneState(struct FcRoutePosition pos,float fInitialDistance);//APBGame.cVehicleRouteFollower.GoToFollowLaneState
	class UcConstantSpeedState* GoToConstantSpeedState(float fSpeed);//APBGame.cVehicleRouteFollower.GoToConstantSpeedState
	void OnLaneStateFinished();//APBGame.cVehicleRouteFollower.OnLaneStateFinished
	void SetPathfindingRoute(int pr_nRouteLUTIndex);//APBGame.cVehicleRouteFollower.SetPathfindingRoute
	void BuildMultiLaneRoute(class URWTechReachSpec* pStartingEdge);//APBGame.cVehicleRouteFollower.BuildMultiLaneRoute
	void RenderVehicleRoute2D(class UCanvas* Canvas);//APBGame.cVehicleRouteFollower.RenderVehicleRoute2D
	void SetLaneState(class UcBaseLaneState* pState);//APBGame.cVehicleRouteFollower.SetLaneState
	bool HasPriorityForJunction(class URWTechNode* pJunctionNode);//APBGame.cVehicleRouteFollower.HasPriorityForJunction
	void OnTick(float fTimeElapsed);//APBGame.cVehicleRouteFollower.OnTick
	bool LocomotionStep(float fTimeElapsed);//APBGame.cVehicleRouteFollower.LocomotionStep
	class URWTechNode* GetCurrentJunctionNode();//APBGame.cVehicleRouteFollower.GetCurrentJunctionNode
	void OnConstantTick(float fTimeElapsed);//APBGame.cVehicleRouteFollower.OnConstantTick
	class UcChangeLaneState* GoToChangeLaneState(struct FcRoutePosition StartPos,struct FcRoutePosition TargetPos,float fDistance);//APBGame.cVehicleRouteFollower.GoToChangeLaneState
	class UcChangeSpeedState* GoToChangeSpeedState(float fSpeed,float fAcceleration,float fTargetSpeed);//APBGame.cVehicleRouteFollower.GoToChangeSpeedState
	float GetSpeedMultiplier();//APBGame.cVehicleRouteFollower.GetSpeedMultiplier
	float GetDistAlongRegisteredEdge(class URWTechReachSpec* pEdge);//APBGame.cVehicleRouteFollower.GetDistAlongRegisteredEdge
	void RenderVehicleState(class UCanvas* Canvas);//APBGame.cVehicleRouteFollower.RenderVehicleState
	void PerformDetourRouteSplice();//APBGame.cVehicleRouteFollower.PerformDetourRouteSplice
	void OnSpeedStateFinished();//APBGame.cVehicleRouteFollower.OnSpeedStateFinished
	void SetSpeedState(class UcBaseSpeedState* pState);//APBGame.cVehicleRouteFollower.SetSpeedState
	bool IsStationary();//APBGame.cVehicleRouteFollower.IsStationary
	void RenderVehicleRoute(class UCanvas* Canvas);//APBGame.cVehicleRouteFollower.RenderVehicleRoute
	bool IsDecelerating();//APBGame.cVehicleRouteFollower.IsDecelerating
	void RenderVehicleState2D(class UCanvas* Canvas);//APBGame.cVehicleRouteFollower.RenderVehicleState2D
	bool IsAccelerating();//APBGame.cVehicleRouteFollower.IsAccelerating
};
UClass* UcVehicleRouteFollower::pClassPointer = NULL;

//0x000058 (0x0002B8 - 0x000260)
//cVehicleRouteGenerator[0x103D90E0]
class AcVehicleRouteGenerator : public AInfo
{
public:
	int                                                m_nIterationCount;                                		// 0x000260 (0x0004)              
	unsigned long                                      m_bIterationInProgress : 1;                       		// 0x000264 (0x0004) [0x00000001] 
	int                                                m_nMaxRouteCount;                                 		// 0x000268 (0x0004)              
	int                                                m_nMaxRouteCountEdgeID;                           		// 0x00026C (0x0004)              
	float                                              m_fRMS;                                           		// 0x000270 (0x0004)              
	float                                              m_fMinRMS;                                        		// 0x000274 (0x0004)              
	float                                              m_fAvgNormRouteCount;                             		// 0x000278 (0x0004)              
	TArray<class UcAPBRoute*>                          m_pBestRoutesArray;                               		// 0x00027C (0x000C)              
	class APathGraph*                                  m_pPathGraph;                                     		// 0x000288 (0x0004)              
	TArray<class URWTechReachSpec*>                    m_PathfindingEdges;                               		// 0x00028C (0x000C)              
	unsigned char                                      m_eRenderState;                                   		// 0x000298 (0x0001)              PROPERTY: eRenderStates
	unsigned char                                      _0x000299[0x3];                                   		// 0x000299 (0x0003) MISSED OFFSET
	class UcAStarManager*                              m_pAStarManager;                                  		// 0x00029C (0x0004)              
	class UcNodeManager*                               m_pNodeManager;                                   		// 0x0002A0 (0x0004)              
	TArray<unsigned char>                              m_aAllVehicleTypes;                               		// 0x0002A4 (0x000C)              
	DWORD                                              m_pAPBRouteTable;                                 		// 0x0002B0 (0x0004)              
	DWORD                                              m_pLastProcessedRoute;                            		// 0x0002B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleRouteGenerator");
		return pClassPointer;
	};

public:
	void UnRegisterWithDVis();//APBGame.cVehicleRouteGenerator.UnRegisterWithDVis
	float GetRouteLength(class UcAPBRoute* pr_pRoute);//APBGame.cVehicleRouteGenerator.GetRouteLength
	void PostBeginPlay();//APBGame.cVehicleRouteGenerator.PostBeginPlay
	class UcNodeManager* GetNodeManager();//APBGame.cVehicleRouteGenerator.GetNodeManager
	struct FLinearColor CovertWeightToRGB(float fValue);//APBGame.cVehicleRouteGenerator.CovertWeightToRGB
	void ProcessRoute(class UcAPBRoute* pr_Route);//APBGame.cVehicleRouteGenerator.ProcessRoute
	void CreateRouteArray(bool pr_bEditor);//APBGame.cVehicleRouteGenerator.CreateRouteArray
	void GetVehicleTypesFromSDD();//APBGame.cVehicleRouteGenerator.GetVehicleTypesFromSDD
	void CheckRouteLength();//APBGame.cVehicleRouteGenerator.CheckRouteLength
	bool IsVehiclePFNode(class URWTechNode* pNode);//APBGame.cVehicleRouteGenerator.IsVehiclePFNode
	void RegisterWithDVis();//APBGame.cVehicleRouteGenerator.RegisterWithDVis
	bool GenerateVehicleRoutes(TArray<class URWTechNode*> pr_pUnNodes);//APBGame.cVehicleRouteGenerator.GenerateVehicleRoutes
	void SaveRoutesInTable();//APBGame.cVehicleRouteGenerator.SaveRoutesInTable
	void Initialise();//APBGame.cVehicleRouteGenerator.Initialise
	void ReComputeARoute();//APBGame.cVehicleRouteGenerator.ReComputeARoute
	void ResetWeightsAndRoutes();//APBGame.cVehicleRouteGenerator.ResetWeightsAndRoutes
	void RollbackRoutes(TArray<class UcAPBRoute*> pr_pRouteArray);//APBGame.cVehicleRouteGenerator.RollbackRoutes
	void RollbackRoute(class UcAPBRoute* pr_pRoute);//APBGame.cVehicleRouteGenerator.RollbackRoute
	void DoCalculations();//APBGame.cVehicleRouteGenerator.DoCalculations
	void SetNodeManager(class UcNodeManager* pr_pNodeManager);//APBGame.cVehicleRouteGenerator.SetNodeManager
	void DoAStar();//APBGame.cVehicleRouteGenerator.DoAStar
};
UClass* AcVehicleRouteGenerator::pClassPointer = NULL;

//0x000058 (0x000098 - 0x000040)
//cEventManager[0x103D8FB0]
class UcEventManager : public UObject
{
public:
	class AcLCManager*                                 m_pLCManager;                                     		// 0x000040 (0x0004)              
	class UcIEventReaction*                            m_pOwner;                                         		// 0x000044 (0x0004)              
	unsigned char                                      _0x000048[0x4];                                   		// 0x000048 (0x0004) ALIGNEMENT
	TArray<class UcEventCriteria*>                     m_apEventCriteria;                                		// 0x00004C (0x000C)              
	DWORD                                              m_pmEvents;                                       		// 0x000058 (0x0004)              
	DWORD                                              m_pmActiveEvents;                                 		// 0x00005C (0x0004)              
	DWORD                                              m_pmmActiveEvents;                                		// 0x000060 (0x0004)              
	unsigned char                                      m_eClassScope;                                    		// 0x000064 (0x0001)              PROPERTY: etClassScope
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	int                                                m_nLastIDGiven;                                   		// 0x000068 (0x0004)              
	double                                             m_fLastTimeEventCountsCleared;                    		// 0x00006C (0x0008)              
	DWORD                                              m_pmWorldEventCounts;                             		// 0x000074 (0x0004)              
	DWORD                                              m_pInstantNotifierEvent;                          		// 0x000078 (0x0004)              
	TArray<DWORD>                                      m_aPendingEvents;                                 		// 0x00007C (0x000C)              
	DWORD                                              m_pmEventFactories;                               		// 0x000088 (0x0004)              
	TArray<DWORD>                                      m_apFactoryTypesLoaded;                           		// 0x00008C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEventManager");
		return pClassPointer;
	};
};
UClass* UcEventManager::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//cEventCriteria[0x103D8E80]
class UcEventCriteria : public UObject
{
public:
	class UcEventManager*                              m_pEventManager;                                  		// 0x000040 (0x0004)              
	unsigned char                                      m_eClassRole;                                     		// 0x000044 (0x0001)              PROPERTY: etClassRole
	unsigned char                                      _0x000045[0x3];                                   		// 0x000045 (0x0003) MISSED OFFSET
	int                                                m_nPriority;                                      		// 0x000048 (0x0004)              
	int                                                m_nIdxToRepTimerArray;                            		// 0x00004C (0x0004)              
	float                                              m_fTimeBetweenEvaluations;                        		// 0x000050 (0x0004)              
	float                                              m_fTimeTillNextEvaluation;                        		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEventCriteria");
		return pClassPointer;
	};
};
UClass* UcEventCriteria::pClassPointer = NULL;

//0x000008 (0x000060 - 0x000058)
//cRandomEventCriteria[0x103D8D50]
class UcRandomEventCriteria : public UcEventCriteria
{
public:
	float                                              m_fMaxTimeInterval;                               		// 0x000058 (0x0004)              
	float                                              m_fMinTimeInterval;                               		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cRandomEventCriteria");
		return pClassPointer;
	};
};
UClass* UcRandomEventCriteria::pClassPointer = NULL;

//0x000004 (0x000064 - 0x000060)
//cDriverRandomAnimEventCriteria[0x103D8C20]
class UcDriverRandomAnimEventCriteria : public UcRandomEventCriteria
{
public:
	class UcNPCVehicleBrain*                           m_pVehicleBrain;                                  		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDriverRandomAnimEventCriteria");
		return pClassPointer;
	};
};
UClass* UcDriverRandomAnimEventCriteria::pClassPointer = NULL;

//0x000000 (0x000060 - 0x000060)
//cPedIdleEventCriteria[0x103D8AF0]
class UcPedIdleEventCriteria : public UcRandomEventCriteria
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedIdleEventCriteria");
		return pClassPointer;
	};
};
UClass* UcPedIdleEventCriteria::pClassPointer = NULL;

//0x000004 (0x000064 - 0x000060)
//cPedRandomAnimEventCriteria[0x103D89C0]
class UcPedRandomAnimEventCriteria : public UcRandomEventCriteria
{
public:
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedRandomAnimEventCriteria");
		return pClassPointer;
	};
};
UClass* UcPedRandomAnimEventCriteria::pClassPointer = NULL;

//0x000014 (0x00006C - 0x000058)
//cVehicleBlockedEventCriteria[0x103D8890]
class UcVehicleBlockedEventCriteria : public UcEventCriteria
{
public:
	class UcNPCVehicleBrain*                           m_pVehicleBrain;                                  		// 0x000058 (0x0004)              
	float                                              m_fTimeLeftToActivateEvent;                       		// 0x00005C (0x0004)              
	float                                              m_fMinStationaryPeriod;                           		// 0x000060 (0x0004)              
	float                                              m_fTimeInterval;                                  		// 0x000064 (0x0004)              
	int                                                m_nTriggerCount;                                  		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleBlockedEventCriteria");
		return pClassPointer;
	};
};
UClass* UcVehicleBlockedEventCriteria::pClassPointer = NULL;

//0x00002C (0x00006C - 0x000040)
//cReaction[0x103D8760]
class UcReaction : public UObject
{
public:
	class UcReactionManager*                           m_pRM;                                            		// 0x000040 (0x0004)              
	int                                                m_nReactionID;                                    		// 0x000044 (0x0004)              
	struct FString                                     m_sName;                                          		// 0x000048 (0x000C)              
	unsigned char                                      m_eReplicationStatus;                             		// 0x000054 (0x0001)              PROPERTY: etReplicationStatus
	unsigned char                                      m_eReactionType;                                  		// 0x000055 (0x0001)              PROPERTY: etNPCReaction
	unsigned char                                      _0x000056[0x2];                                   		// 0x000056 (0x0002) MISSED OFFSET
	int                                                m_nPriority;                                      		// 0x000058 (0x0004)              
	float                                              m_fDelay;                                         		// 0x00005C (0x0004)              
	float                                              m_fDuration;                                      		// 0x000060 (0x0004)              
	unsigned long                                      m_bActive : 1;                                    		// 0x000064 (0x0004) [0x00000001] 
	int                                                m_nWorldEventID;                                  		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction");
		return pClassPointer;
	};
};
UClass* UcReaction::pClassPointer = NULL;

//0x000004 (0x000070 - 0x00006C)
//cReaction_LookAround[0x103D8630]
class UcReaction_LookAround : public UcReaction
{
public:
	class AActor*                                      m_pTargetActor;                                   		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_LookAround");
		return pClassPointer;
	};
};
UClass* UcReaction_LookAround::pClassPointer = NULL;

//0x00001C (0x000088 - 0x00006C)
//cReaction_LookAt[0x103D8500]
class UcReaction_LookAt : public UcReaction
{
public:
	class UiNPCLookAt*                                 m_TargetInterface;                                		// 0x00006C (0x0004)              
	unsigned char                                      _0x000070[0x4];                                   		// 0x000070 (0x0004) ALIGNEMENT
	class AActor*                                      m_pTargetActor;                                   		// 0x000074 (0x0004)              
	FVector3                                           m_vTargetLocation;                                		// 0x000078 (0x000C)              
	class USkelControlLookAt*                          m_pLookAtControl;                                 		// 0x000084 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_LookAt");
		return pClassPointer;
	};
};
UClass* UcReaction_LookAt::pClassPointer = NULL;

//0x000010 (0x00007C - 0x00006C)
//cReaction_SpawnDestroy[0x103D83D0]
class UcReaction_SpawnDestroy : public UcReaction
{
public:
	float                                              m_fTimeElapsed;                                   		// 0x00006C (0x0004)              
	unsigned char                                      m_ePedEvent;                                      		// 0x000070 (0x0001)              PROPERTY: etPedEvent
	unsigned char                                      _0x000071[0x3];                                   		// 0x000071 (0x0003) MISSED OFFSET
	float                                              m_fDestroyDuration;                               		// 0x000074 (0x0004)              
	unsigned long                                      m_bPlayParticleEffect : 1;                        		// 0x000078 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_SpawnDestroy");
		return pClassPointer;
	};
};
UClass* UcReaction_SpawnDestroy::pClassPointer = NULL;

//0x000000 (0x00007C - 0x00007C)
//cReaction_DespawnPedestrian[0x103D82A0]
class UcReaction_DespawnPedestrian : public UcReaction_SpawnDestroy
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_DespawnPedestrian");
		return pClassPointer;
	};
};
UClass* UcReaction_DespawnPedestrian::pClassPointer = NULL;

//0x000020 (0x00008C - 0x00006C)
//cReaction_TaskTargetInteraction[0x103D8170]
class UcReaction_TaskTargetInteraction : public UcReaction
{
public:
	unsigned char                                      m_eCurrentState;                                  		// 0x00006C (0x0001)              PROPERTY: etTTIState
	unsigned char                                      m_eCSAIndex;                                      		// 0x00006D (0x0001)              PROPERTY: etContextSensitiveActionBase
	unsigned char                                      m_eCurrentStage;                                  		// 0x00006E (0x0001)              PROPERTY: etTTIStage
	unsigned char                                      m_eAnimIndex;                                     		// 0x00006F (0x0001)              PROPERTY: 
	float                                              m_fTTIDuration;                                   		// 0x000070 (0x0004)              
	float                                              m_fAnimTimeElapsed;                               		// 0x000074 (0x0004)              
	float                                              m_fEndingDuration;                                		// 0x000078 (0x0004)              
	float                                              m_fBlendTime;                                     		// 0x00007C (0x0004)              
	class UAnimNodeBlendList*                          m_pAnimNode;                                      		// 0x000080 (0x0004)              
	float                                              m_fDurationWhenCancelled;                         		// 0x000084 (0x0004)              
	unsigned long                                      m_bCancelPending : 1;                             		// 0x000088 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_TaskTargetInteraction");
		return pClassPointer;
	};
};
UClass* UcReaction_TaskTargetInteraction::pClassPointer = NULL;

//0x000014 (0x000080 - 0x00006C)
//cReactionList[0x103D8040]
class UcReactionList : public UcReaction
{
public:
	int                                                m_nActiveAnim;                                    		// 0x00006C (0x0004)              
	TArray<struct FName>                               m_aAnimNames;                                     		// 0x000070 (0x000C)              
	unsigned long                                      m_bLoopAnimation : 1;                             		// 0x00007C (0x0004) [0x00000001] 
	unsigned long                                      m_bAdjustDuration : 1;                            		// 0x00007C (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReactionList");
		return pClassPointer;
	};

public:
	void AddAnimations(struct FString pr_sAnimationType);//APBGame.cReactionList.AddAnimations
	void LoadAnims();//APBGame.cReactionList.LoadAnims
};
UClass* UcReactionList::pClassPointer = NULL;

//0x000008 (0x000088 - 0x000080)
//cDriverReactionList[0x103D7F10]
class UcDriverReactionList : public UcReactionList
{
public:
	class UcAPBAnimNodeBlendList*                      m_pReactionBlendList;                             		// 0x000080 (0x0004)              
	float                                              m_fBlendTime;                                     		// 0x000084 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDriverReactionList");
		return pClassPointer;
	};

public:
	void AddAnimations(struct FString pr_sAnimationType);//APBGame.cDriverReactionList.AddAnimations
};
UClass* UcDriverReactionList::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_DriverAngry[0x103D7DE0]
class UcReaction_DriverAngry : public UcDriverReactionList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_DriverAngry");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_DriverAngry.LoadAnims
};
UClass* UcReaction_DriverAngry::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_DriverPanic[0x103D7CB0]
class UcReaction_DriverPanic : public UcDriverReactionList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_DriverPanic");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_DriverPanic.LoadAnims
};
UClass* UcReaction_DriverPanic::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_DriverStopAndPanic[0x103D7B80]
class UcReaction_DriverStopAndPanic : public UcReaction_DriverPanic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_DriverStopAndPanic");
		return pClassPointer;
	};
};
UClass* UcReaction_DriverStopAndPanic::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_VehicleCriticallyDamaged[0x103D7A50]
class UcReaction_VehicleCriticallyDamaged : public UcReaction_DriverStopAndPanic
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_VehicleCriticallyDamaged");
		return pClassPointer;
	};
};
UClass* UcReaction_VehicleCriticallyDamaged::pClassPointer = NULL;

//0x000004 (0x00008C - 0x000088)
//cReaction_DriverRandomAnim[0x103D7920]
class UcReaction_DriverRandomAnim : public UcDriverReactionList
{
public:
	int                                                m_nPerformedCount;                                		// 0x000088 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_DriverRandomAnim");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_DriverRandomAnim.LoadAnims
};
UClass* UcReaction_DriverRandomAnim::pClassPointer = NULL;

//0x000000 (0x00008C - 0x00008C)
//cReaction_DriverFrustrated[0x103D77F0]
class UcReaction_DriverFrustrated : public UcReaction_DriverRandomAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_DriverFrustrated");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_DriverFrustrated.LoadAnims
};
UClass* UcReaction_DriverFrustrated::pClassPointer = NULL;

//0x000014 (0x000094 - 0x000080)
//cReaction_DriverDeSpawn[0x103D76C0]
class UcReaction_DriverDeSpawn : public UcReactionList
{
public:
	float                                              m_fTimeElapsed;                                   		// 0x000080 (0x0004)              
	float                                              m_fDestroyDuration;                               		// 0x000084 (0x0004)              
	class UAnimNodeSequence*                           m_pAnimNodeSeq;                                   		// 0x000088 (0x0004)              
	unsigned char                                      m_LastEjectAnimation;                             		// 0x00008C (0x0001)              PROPERTY: etNPCEjectAnimation
	unsigned char                                      _0x00008D[0x3];                                   		// 0x00008D (0x0003) MISSED OFFSET
	unsigned long                                      m_bPlayParticleEffect : 1;                        		// 0x000090 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_DriverDeSpawn");
		return pClassPointer;
	};

public:
	void AddAnimations(struct FString pr_sAnimationType);//APBGame.cReaction_DriverDeSpawn.AddAnimations
	void LoadAnims();//APBGame.cReaction_DriverDeSpawn.LoadAnims
};
UClass* UcReaction_DriverDeSpawn::pClassPointer = NULL;

//0x000008 (0x000088 - 0x000080)
//cReaction_PlayAnimWhileStationary[0x103D7590]
class UcReaction_PlayAnimWhileStationary : public UcReactionList
{
public:
	class UcAPBAnimNodeBlendList*                      m_pReactionBlendList;                             		// 0x000080 (0x0004)              
	float                                              m_fBlendTime;                                     		// 0x000084 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_PlayAnimWhileStationary");
		return pClassPointer;
	};
};
UClass* UcReaction_PlayAnimWhileStationary::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_PedWaitingAnxious[0x103D7460]
class UcReaction_PedWaitingAnxious : public UcReaction_PlayAnimWhileStationary
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_PedWaitingAnxious");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_PedWaitingAnxious.LoadAnims
};
UClass* UcReaction_PedWaitingAnxious::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_PedWaitingGeneric[0x103D7330]
class UcReaction_PedWaitingGeneric : public UcReaction_PlayAnimWhileStationary
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_PedWaitingGeneric");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_PedWaitingGeneric.LoadAnims
};
UClass* UcReaction_PedWaitingGeneric::pClassPointer = NULL;

//0x000008 (0x000088 - 0x000080)
//cReaction_PlayAnimWhileWalking[0x103D7200]
class UcReaction_PlayAnimWhileWalking : public UcReactionList
{
public:
	class UcAPBAnimNodeBlendList*                      m_pReactionBlendList;                             		// 0x000080 (0x0004)              
	float                                              m_fBlendTime;                                     		// 0x000084 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_PlayAnimWhileWalking");
		return pClassPointer;
	};
};
UClass* UcReaction_PlayAnimWhileWalking::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_DelayedAnimWhileWalking[0x103D70D0]
class UcReaction_DelayedAnimWhileWalking : public UcReaction_PlayAnimWhileWalking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_DelayedAnimWhileWalking");
		return pClassPointer;
	};
};
UClass* UcReaction_DelayedAnimWhileWalking::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_Flinch[0x103D6FA0]
class UcReaction_Flinch : public UcReaction_DelayedAnimWhileWalking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_Flinch");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_Flinch.LoadAnims
};
UClass* UcReaction_Flinch::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_RandomAnim[0x103D6E70]
class UcReaction_RandomAnim : public UcReaction_DelayedAnimWhileWalking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_RandomAnim");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_RandomAnim.LoadAnims
};
UClass* UcReaction_RandomAnim::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_InstantAnimWhileWalking[0x103D6D40]
class UcReaction_InstantAnimWhileWalking : public UcReaction_PlayAnimWhileWalking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_InstantAnimWhileWalking");
		return pClassPointer;
	};
};
UClass* UcReaction_InstantAnimWhileWalking::pClassPointer = NULL;

//0x000004 (0x00008C - 0x000088)
//cReaction_RunAway[0x103D6C10]
class UcReaction_RunAway : public UcReaction_InstantAnimWhileWalking
{
public:
	float                                              m_fRunSpeed;                                      		// 0x000088 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_RunAway");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_RunAway.LoadAnims
};
UClass* UcReaction_RunAway::pClassPointer = NULL;

//0x000018 (0x0000A4 - 0x00008C)
//cReaction_RunIntoBuilding[0x103D6AE0]
class UcReaction_RunIntoBuilding : public UcReaction_RunAway
{
public:
	unsigned long                                      m_bDestroyNodeChosen : 1;                         		// 0x00008C (0x0004) [0x00000001] 
	float                                              m_fTimeInterval;                                  		// 0x000090 (0x0004)              
	float                                              m_fTimeSinceLastCheck;                            		// 0x000094 (0x0004)              
	FVector3                                           m_vEventLocation;                                 		// 0x000098 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_RunIntoBuilding");
		return pClassPointer;
	};
};
UClass* UcReaction_RunIntoBuilding::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_SyncedRandomAnim[0x103D69B0]
class UcReaction_SyncedRandomAnim : public UcReaction_InstantAnimWhileWalking
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_SyncedRandomAnim");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_SyncedRandomAnim.LoadAnims
};
UClass* UcReaction_SyncedRandomAnim::pClassPointer = NULL;

//0x000008 (0x000088 - 0x000080)
//cReaction_StopAndPlayAnim[0x103D6880]
class UcReaction_StopAndPlayAnim : public UcReactionList
{
public:
	float                                              m_fBlendTime;                                     		// 0x000080 (0x0004)              
	unsigned long                                      m_bPlayAnimFromStart : 1;                         		// 0x000084 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_StopAndPlayAnim");
		return pClassPointer;
	};
};
UClass* UcReaction_StopAndPlayAnim::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_BumpIntoPlayer[0x103D6750]
class UcReaction_BumpIntoPlayer : public UcReaction_StopAndPlayAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_BumpIntoPlayer");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_BumpIntoPlayer.LoadAnims
};
UClass* UcReaction_BumpIntoPlayer::pClassPointer = NULL;

//0x00000C (0x000094 - 0x000088)
//cReaction_Cower[0x103D6620]
class UcReaction_Cower : public UcReaction_StopAndPlayAnim
{
public:
	FVector3                                           m_vDangerLocation;                                		// 0x000088 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_Cower");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_Cower.LoadAnims
};
UClass* UcReaction_Cower::pClassPointer = NULL;

//0x000020 (0x0000A8 - 0x000088)
//cReaction_CrimeCommitted[0x103D64F0]
class UcReaction_CrimeCommitted : public UcReaction_StopAndPlayAnim
{
public:
	FVector3                                           m_vLookAt_S;                                      		// 0x000088 (0x000C)              
	FVector3                                           m_vCrimeLocation;                                 		// 0x000094 (0x000C)              
	float                                              m_fMaxDelay;                                      		// 0x0000A0 (0x0004)              
	unsigned long                                      m_bReactionCompleted : 1;                         		// 0x0000A4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_CrimeCommitted");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_CrimeCommitted.LoadAnims
};
UClass* UcReaction_CrimeCommitted::pClassPointer = NULL;

//0x000000 (0x000088 - 0x000088)
//cReaction_StationaryRandomAnim[0x103D63C0]
class UcReaction_StationaryRandomAnim : public UcReaction_StopAndPlayAnim
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReaction_StationaryRandomAnim");
		return pClassPointer;
	};

public:
	void LoadAnims();//APBGame.cReaction_StationaryRandomAnim.LoadAnims
};
UClass* UcReaction_StationaryRandomAnim::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//cReactionManager[0x103D6290]
class UcReactionManager : public UObject
{
public:
	class UcIEventReaction*                            m_pOwner;                                         		// 0x000040 (0x0004)              
	unsigned char                                      _0x000044[0x4];                                   		// 0x000044 (0x0004) ALIGNEMENT
	DWORD                                              m_pmReactions;                                    		// 0x000048 (0x0004)              
	class UcReaction*                                  m_pCurrentReaction;                               		// 0x00004C (0x0004)              
	class UcReaction*                                  m_pPendingReaction;                               		// 0x000050 (0x0004)              
	TArray<struct FReactionRequest>                    m_aPendingRequests;                               		// 0x000054 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cReactionManager");
		return pClassPointer;
	};
};
UClass* UcReactionManager::pClassPointer = NULL;

//0x00004C (0x00008C - 0x000040)
//cJunction[0x103D6160]
class UcJunction : public UObject
{
public:
	FVector3                                           m_vJunctionLocation;                              		// 0x000040 (0x000C)              
	unsigned char                                      m_eState;                                         		// 0x00004C (0x0001)              PROPERTY: etJunctionState
	unsigned char                                      _0x00004D[0x3];                                   		// 0x00004D (0x0003) MISSED OFFSET
	int                                                m_nCurrentStage;                                  		// 0x000050 (0x0004)              
	float                                              m_fTimeInCurrentStage;                            		// 0x000054 (0x0004)              
	TArray<struct FJunctionStage>                      m_aJunctionStages;                                		// 0x000058 (0x000C)              
	TArray<struct FNPCWaitingRecord>                   m_aPedsWaiting;                                   		// 0x000064 (0x000C)              
	TArray<class UcPedestrianCrossing*>                m_aPedestrianCrossings;                           		// 0x000070 (0x000C)              
	TArray<class AActor*>                              m_aNearbyVehicles;                                		// 0x00007C (0x000C)              
	float                                              m_fTimeSinceVehicleRegistrationUpdate;            		// 0x000088 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cJunction");
		return pClassPointer;
	};
};
UClass* UcJunction::pClassPointer = NULL;

//0x00005C (0x0000E8 - 0x00008C)
//cNonTrafficLightJunction[0x103D6030]
class UcNonTrafficLightJunction : public UcJunction
{
public:
	int                                                m_nIdxToStatusArray;                              		// 0x00008C (0x0004)              
	unsigned long                                      m_bHasPedestrianCrossing : 1;                     		// 0x000090 (0x0004) [0x00000001] 
	TArray<class URWTechReachSpec*>                    m_aPFEdges;                                       		// 0x000094 (0x000C)              
	struct FMap_Mirror                                 m_tVehiclesWaiting;                               		// 0x0000A0 (0x003C)              
	float                                              m_fRecycleCheckTimer;                             		// 0x0000DC (0x0004)              
	int                                                m_nRecycleCheckEdgeIndex;                         		// 0x0000E0 (0x0004)              
	int                                                m_nJunctionNodeID;                                		// 0x0000E4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cNonTrafficLightJunction");
		return pClassPointer;
	};
};
UClass* UcNonTrafficLightJunction::pClassPointer = NULL;

//0x000024 (0x0000B0 - 0x00008C)
//cTrafficLightJunction[0x103D5F00]
class UcTrafficLightJunction : public UcJunction
{
public:
	int                                                m_nIdxToStatusArray;                              		// 0x00008C (0x0004)              
	TArray<struct FtTrafficLightPair>                  m_aTrafficLightGroups;                            		// 0x000090 (0x000C)              
	float                                              m_fPrepareToHaltTimer;                            		// 0x00009C (0x0004)              
	float                                              m_fRecycleCheckTimer;                             		// 0x0000A0 (0x0004)              
	int                                                m_nRecycleCheckPairIndex;                         		// 0x0000A4 (0x0004)              
	unsigned long                                      m_bCheckingFirstEdge : 1;                         		// 0x0000A8 (0x0004) [0x00000001] 
	int                                                m_nJunctionNodeID;                                		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTrafficLightJunction");
		return pClassPointer;
	};
};
UClass* UcTrafficLightJunction::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//cJunctionManager[0x103D5DD0]
class UcJunctionManager : public UObject
{
public:
	DWORD                                              m_pJunctionMap;                                   		// 0x000040 (0x0004)              
	DWORD                                              m_pCrossingMap;                                   		// 0x000044 (0x0004)              
	TArray<class AcProp*>                              m_aRegistrationQueue;                             		// 0x000048 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cJunctionManager");
		return pClassPointer;
	};
};
UClass* UcJunctionManager::pClassPointer = NULL;

//0x000048 (0x000088 - 0x000040)
//cPedestrianCrossing[0x103D5CA0]
class UcPedestrianCrossing : public UObject
{
public:
	class UPedestrianCrossingLaneReachSpec*            m_pCrossingEdge;                                  		// 0x000040 (0x0004)              
	class UcJunction*                                  m_pJunction;                                      		// 0x000044 (0x0004)              
	FVector3                                           m_vCrossingDir;                                   		// 0x000048 (0x000C)              
	float                                              m_fStopLineDistance;                              		// 0x000054 (0x0004)              
	float                                              m_fStreetStartDistance;                           		// 0x000058 (0x0004)              
	float                                              m_fStreetEndDistance;                             		// 0x00005C (0x0004)              
	FVector3                                           m_vStopLinePoint1;                                		// 0x000060 (0x000C)              
	FVector3                                           m_vStopLinePoint2;                                		// 0x00006C (0x000C)              
	TArray<class UcNPCPedestrianBrain*>                m_aRegisteredPeds;                                		// 0x000078 (0x000C)              
	int                                                m_nNumberOfPedsInStreet;                          		// 0x000084 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianCrossing");
		return pClassPointer;
	};
};
UClass* UcPedestrianCrossing::pClassPointer = NULL;

//0x000024 (0x000064 - 0x000040)
//cPedestrianJunctionManager[0x103D5B70]
class UcPedestrianJunctionManager : public UObject
{
public:
	class UcNPCPedestrianBrain*                        m_pPedestrianBrain;                               		// 0x000040 (0x0004)              
	class UcPedestrianCrossing*                        m_pRegisteredCrossing;                            		// 0x000044 (0x0004)              
	class UcPedestrianCrossing*                        m_pRegisteredInStreetCrossing;                    		// 0x000048 (0x0004)              
	float                                              m_fTimeLeftToResumeWalking;                       		// 0x00004C (0x0004)              
	unsigned long                                      m_bStopped : 1;                                   		// 0x000050 (0x0004) [0x00000001] 
	float                                              m_cfg_fPedestrianStopLineCollisionDistance;       		// 0x000054 (0x0004)              
	float                                              m_cfg_fPedestrianInMotionCollisionDistance;       		// 0x000058 (0x0004)              
	float                                              m_cfg_fPedestrianStationaryCollisionDistance;     		// 0x00005C (0x0004)              
	float                                              m_cfg_fPedestrianMinCrossingStopTime;             		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPedestrianJunctionManager");
		return pClassPointer;
	};
};
UClass* UcPedestrianJunctionManager::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cAmmoDepotTriggerVolume[0x103D5A40]
class AcAmmoDepotTriggerVolume : public AcAPBTriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAmmoDepotTriggerVolume");
		return pClassPointer;
	};
};
UClass* AcAmmoDepotTriggerVolume::pClassPointer = NULL;

//0x000058 (0x0002F4 - 0x00029C)
//cAnimationDrivenTrigger[0x103D5910]
class AcAnimationDrivenTrigger : public AcAPBTriggerVolume
{
public:
	DWORD                                              VfTable_IUseInterface;                            		// 0x00029C (0x0004)              
	class UcAnimationDescriptor*                       m_Animation;                                      		// 0x0002A0 (0x0004)              
	class UcAnimationDescriptor*                       m_AlternativeAnimation;                           		// 0x0002A4 (0x0004)              
	class AActor*                                      m_Actor;                                          		// 0x0002A8 (0x0004)              
	FVector3                                           m_TargetEdge[0x2];                                		// 0x0002AC (0x0018)              
	FVector3                                           m_Dimensions;                                     		// 0x0002C4 (0x000C)              
	TArray<class AActor*>                              m_aIgnoreCollisionWith;                           		// 0x0002D0 (0x000C)              
	unsigned char                                      m_eGameplayEventCategory;                         		// 0x0002DC (0x0001)              PROPERTY: etGameplayEventCategory
	unsigned char                                      _0x0002DD[0x3];                                   		// 0x0002DD (0x0003) MISSED OFFSET
	class UcEdgeHighlightComponent*                    m_EdgeHighlightComponent;                         		// 0x0002E0 (0x0004)              
	class AcAnimationDrivenTrigger*                    m_OppositeTrigger;                                		// 0x0002E4 (0x0004)              
	unsigned long                                      m_bTaskItemPassable : 1;                          		// 0x0002E8 (0x0004) [0x00000001] 
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x0002EC (0x0004)              
	class UcAnimationDescriptor*                       m_AnimationToPlay;                                		// 0x0002F0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimationDrivenTrigger");
		return pClassPointer;
	};

public:
	FRotator Alignment(FVector3 Start,FVector3 End);//APBGame.cAnimationDrivenTrigger.Alignment
	void GetStartEdge(class APawn* Pawn,FVector3* Start,FVector3* End);//APBGame.cAnimationDrivenTrigger.GetStartEdge
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cAnimationDrivenTrigger.IsCSASupported
	void GetSnapLocation(class APawn* Pawn,FVector3* SnapLocation,FRotator* SnapRotation);//APBGame.cAnimationDrivenTrigger.GetSnapLocation
	class AcAnimationDrivenTrigger* RetOppositeTrigger();//APBGame.cAnimationDrivenTrigger.RetOppositeTrigger
	float RetStaminaDrain(class UcAnimationDescriptor* Animation);//APBGame.cAnimationDrivenTrigger.RetStaminaDrain
	bool IsTaskItemPassable();//APBGame.cAnimationDrivenTrigger.IsTaskItemPassable
	void GetTargetEdge(FVector3* Start,FVector3* End);//APBGame.cAnimationDrivenTrigger.GetTargetEdge
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cAnimationDrivenTrigger.EndUse
	void PostBeginPlay();//APBGame.cAnimationDrivenTrigger.PostBeginPlay
	void NativePostBeginPlay();//APBGame.cAnimationDrivenTrigger.NativePostBeginPlay
	FVector3 ClosestPointOnLine(FVector3 Point,FVector3 Start,FVector3 End);//APBGame.cAnimationDrivenTrigger.ClosestPointOnLine
	void GetExtraRootMotionPerSecond(class APawn* Pawn,FVector3 StartLocation,FVector3* ExtraRootMotionPerSecond,float* ContactTime,FRotator* SnapRotation);//APBGame.cAnimationDrivenTrigger.GetExtraRootMotionPerSecond
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cAnimationDrivenTrigger.BeginUse
};
UClass* AcAnimationDrivenTrigger::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//cPlayerVehicleSpawnDirection[0x103D57E0]
class AcPlayerVehicleSpawnDirection : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerVehicleSpawnDirection");
		return pClassPointer;
	};
};
UClass* AcPlayerVehicleSpawnDirection::pClassPointer = NULL;

//0x00001C (0x0002B4 - 0x000298)
//cAPBTempCover[0x103D56B0]
class AcAPBTempCover : public ADynamicSMActor
{
public:
	DWORD                                              VfTable_ICombatTargetingInterface;                		// 0x000298 (0x0004)              
	DWORD                                              VfTable_IDamageInterface;                         		// 0x00029C (0x0004)              
	float                                              m_Health;                                         		// 0x0002A0 (0x0004)              
	float                                              m_RespawnTime;                                    		// 0x0002A4 (0x0004)              
	double                                             m_TimeDestroyed;                                  		// 0x0002A8 (0x0008)              
	float                                              m_InitialHealth;                                  		// 0x0002B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBTempCover");
		return pClassPointer;
	};

public:
	void RetExplosionOcclusionExtents(TArray<FVector3>* Verts,FVector3* ExplosionLocation);//APBGame.cAPBTempCover.RetExplosionOcclusionExtents
	bool IsSoft();//APBGame.cAPBTempCover.IsSoft
	bool IsStaticTarget();//APBGame.cAPBTempCover.IsStaticTarget
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//APBGame.cAPBTempCover.TakeRadiusDamage
	bool CanBeDamaged(class AcAPBPlayerController* PC);//APBGame.cAPBTempCover.CanBeDamaged
	void PostBeginPlay();//APBGame.cAPBTempCover.PostBeginPlay
	void Tick(float DeltaTime);//APBGame.cAPBTempCover.Tick
	bool CanBeTargeted(class AcAPBPlayerController* PC);//APBGame.cAPBTempCover.CanBeTargeted
	bool Restore(int Amount,class AController* Healer,class UClass* DamageType);//APBGame.cAPBTempCover.Restore
	bool IsDynamicTarget();//APBGame.cAPBTempCover.IsDynamicTarget
	bool IsHard();//APBGame.cAPBTempCover.IsHard
};
UClass* AcAPBTempCover::pClassPointer = NULL;

//0x000008 (0x000110 - 0x000108)
//cTTSpawnInVolumeComponent[0x103D5580]
class UcTTSpawnInVolumeComponent : public UcTaskTargetComponent
{
public:
	class AcTaskItemSpawnZone*                         m_SpawnZone;                                      		// 0x000108 (0x0004)              
	int                                                m_nMaxAttempts;                                   		// 0x00010C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTTSpawnInVolumeComponent");
		return pClassPointer;
	};
};
UClass* UcTTSpawnInVolumeComponent::pClassPointer = NULL;

//0x000018 (0x000278 - 0x000260)
//cTaskTargetTaskItemSpawner[0x103D5450]
class AcTaskTargetTaskItemSpawner : public AActor
{
public:
	DWORD                                              VfTable_ITaskTargetInterface;                     		// 0x000260 (0x0004)              
	class UcTaskTargetComponent*                       m_TaskTargetComponent;                            		// 0x000264 (0x0004)              
	class AcTaskItemPickup*                            m_TaskItemPickup;                                 		// 0x000268 (0x0004)              
	unsigned char                                      m_eTaskTargetVFXState;                            		// 0x00026C (0x0001)              PROPERTY: etTaskTargetVFXState
	unsigned char                                      _0x00026D[0x3];                                   		// 0x00026D (0x0003) MISSED OFFSET
	int                                                m_nRepTaskOperationID;                            		// 0x000270 (0x0004)              
	unsigned long                                      m_bPlayerTaskRelevant : 1;                        		// 0x000274 (0x0004) [0x00000001] 
	unsigned long                                      m_bPlayerCanTriggerTask : 1;                      		// 0x000274 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskTargetTaskItemSpawner");
		return pClassPointer;
	};

public:
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.cTaskTargetTaskItemSpawner.ActivateTaskTarget
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.cTaskTargetTaskItemSpawner.InitTaskTarget
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cTaskTargetTaskItemSpawner.ResetTaskTarget
	void ClientNotifyTaskOperationChanged(int nTaskOperationIndex);//APBGame.cTaskTargetTaskItemSpawner.ClientNotifyTaskOperationChanged
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cTaskTargetTaskItemSpawner.PartiallyTriggerTaskTarget
	void MoveTargetState(class AActor* targetActor);//APBGame.cTaskTargetTaskItemSpawner.MoveTargetState
	bool IsTriggered();//APBGame.cTaskTargetTaskItemSpawner.IsTriggered
	class AcTaskItemPickup* RetTaskItemPickup();//APBGame.cTaskTargetTaskItemSpawner.RetTaskItemPickup
	void ClientNotifyTaskRelevantChanged(bool i_bTaskRelevant);//APBGame.cTaskTargetTaskItemSpawner.ClientNotifyTaskRelevantChanged
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cTaskTargetTaskItemSpawner.TriggerTaskTarget
	void OnItemPickedUp(class AcTaskItem* pTaskItem);//APBGame.cTaskTargetTaskItemSpawner.OnItemPickedUp
	void ClientNotifyCanTriggerTaskChanged(bool i_bPlayerCanTriggerTask);//APBGame.cTaskTargetTaskItemSpawner.ClientNotifyCanTriggerTaskChanged
	void ClientNotifyTaskVFXStateChanged(unsigned char eTriggeredState);//APBGame.cTaskTargetTaskItemSpawner.ClientNotifyTaskVFXStateChanged
	void DeactivateTaskTarget();//APBGame.cTaskTargetTaskItemSpawner.DeactivateTaskTarget
	class UcTaskTargetComponent* GetTaskTargetComponent();//APBGame.cTaskTargetTaskItemSpawner.GetTaskTargetComponent
	void ReplicatedEvent(struct FName VarName);//APBGame.cTaskTargetTaskItemSpawner.ReplicatedEvent
	void OnTaskItemSpawned(class AcTaskItem* pSpawnedTaskItem);//APBGame.cTaskTargetTaskItemSpawner.OnTaskItemSpawned
	void CleanUpTaskTarget();//APBGame.cTaskTargetTaskItemSpawner.CleanUpTaskTarget
};
UClass* AcTaskTargetTaskItemSpawner::pClassPointer = NULL;

//0x0000B7 (0x000110 - 0x000059)
//cPlayerControllerCSAComponent[0x103D5320]
class UcPlayerControllerCSAComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	struct FInteractionData                            m_InteractionData;                                		// 0x00005C (0x004C)              
	struct FInteractionData                            m_PendingInteractionData;                         		// 0x0000A8 (0x004C)              
	unsigned char                                      m_ePendingCSAType;                                		// 0x0000F4 (0x0001)              PROPERTY: etPendingCSAType
	unsigned char                                      m_eCurrentCSAState;                               		// 0x0000F5 (0x0001)              PROPERTY: etCSAState
	unsigned char                                      _0x0000F6[0x2];                                   		// 0x0000F6 (0x0002) MISSED OFFSET
	FVector3                                           m_vInitialPawnLocation;                           		// 0x0000F8 (0x000C)              
	unsigned long                                      m_bEndCSACalled : 1;                              		// 0x000104 (0x0004) [0x00000001] 
	double                                             m_dCSAStartTime;                                  		// 0x000108 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerControllerCSAComponent");
		return pClassPointer;
	};

public:
	void EndCSA(unsigned char eCSAState);//APBGame.cPlayerControllerCSAComponent.EndCSA
	void OnCSAAutoRouteFailed();//APBGame.cPlayerControllerCSAComponent.OnCSAAutoRouteFailed
	bool RetEndCSACalled();//APBGame.cPlayerControllerCSAComponent.RetEndCSACalled
	void ResetPendingCSA();//APBGame.cPlayerControllerCSAComponent.ResetPendingCSA
	void RegisterAnimationCallback(class AcAPBPawn* ApbPawn);//APBGame.cPlayerControllerCSAComponent.RegisterAnimationCallback
	float RetItemEffectivenessModifier();//APBGame.cPlayerControllerCSAComponent.RetItemEffectivenessModifier
	FVector3 RetInitialPawnLocation();//APBGame.cPlayerControllerCSAComponent.RetInitialPawnLocation
	void BeginPendingCSA(unsigned char ePendingCSAType);//APBGame.cPlayerControllerCSAComponent.BeginPendingCSA
	bool IsCSAPending();//APBGame.cPlayerControllerCSAComponent.IsCSAPending
	void OnCSACompletionCallback();//APBGame.cPlayerControllerCSAComponent.OnCSACompletionCallback
	class AActor* RetInteractiveActor();//APBGame.cPlayerControllerCSAComponent.RetInteractiveActor
	bool CanBeginCSA(unsigned char eCSA,class AActor* pInteractiveActor,int nIPIndex);//APBGame.cPlayerControllerCSAComponent.CanBeginCSA
	void OnCSATimeExpired(bool bOutroFinished);//APBGame.cPlayerControllerCSAComponent.OnCSATimeExpired
	void BeginCSA(unsigned char eCSA,class AActor* pInteractiveActor,int nIPIndex,float fOverideDuration);//APBGame.cPlayerControllerCSAComponent.BeginCSA
	void UnRegisterAnimationCallback(class AcAPBPawn* ApbPawn);//APBGame.cPlayerControllerCSAComponent.UnRegisterAnimationCallback
	void OnReceivedCSAAnimEvent(unsigned char eAnimEvent);//APBGame.cPlayerControllerCSAComponent.OnReceivedCSAAnimEvent
	bool IsCSAIndefinite();//APBGame.cPlayerControllerCSAComponent.IsCSAIndefinite
	bool IsCSAAnimationTimed();//APBGame.cPlayerControllerCSAComponent.IsCSAAnimationTimed
	bool IsCSATimed();//APBGame.cPlayerControllerCSAComponent.IsCSATimed
	unsigned char RetCSAPendingType();//APBGame.cPlayerControllerCSAComponent.RetCSAPendingType
};
UClass* UcPlayerControllerCSAComponent::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//cVendorContactInterface[0x16EFAE90]
class AcVendorContactInterface : public AReplicationInfo
{
public:
	unsigned long                                      m_bIsActive : 1;                                  		// 0x000260 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVendorContactInterface");
		return pClassPointer;
	};
};
UClass* AcVendorContactInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cPlayerControllerTypes[0x16EFAD60]
class UcPlayerControllerTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerControllerTypes");
		return pClassPointer;
	};
};
UClass* UcPlayerControllerTypes::pClassPointer = NULL;

//0x000034 (0x000294 - 0x000260)
//cVehicleCargoInventory[0x16EFAC30]
class AcVehicleCargoInventory : public AActor
{
public:
	TArray<struct FCargoTaskItem>                      m_aCargoItems;                                    		// 0x000260 (0x000C)              
	TArray<class AcAPBPawn*>                           m_aCargoPassengers;                               		// 0x00026C (0x000C)              
	int                                                m_nMaxPips;                                       		// 0x000278 (0x0004)              
	int                                                m_nMaxPassengers;                                 		// 0x00027C (0x0004)              
	int                                                m_nCurrentPips;                                   		// 0x000280 (0x0004)              
	int                                                m_nCurrentPassengers;                             		// 0x000284 (0x0004)              
	unsigned char                                      m_eCurrentCargoType;                              		// 0x000288 (0x0001)              PROPERTY: etCurrentCargoType
	unsigned char                                      _0x000289[0x3];                                   		// 0x000289 (0x0003) MISSED OFFSET
	class AcAPBVehicleBase*                            m_VehicleOwner;                                   		// 0x00028C (0x0004)              
	int                                                m_nNumMissionTaskItems;                           		// 0x000290 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleCargoInventory");
		return pClassPointer;
	};

public:
	void SpawnTaskItemPickups(FVector3 HitLocation,bool bApplyExplosionDamage);//APBGame.cVehicleCargoInventory.SpawnTaskItemPickups
	bool IsEmpty();//APBGame.cVehicleCargoInventory.IsEmpty
	void SetMaxPips(int nMax);//APBGame.cVehicleCargoInventory.SetMaxPips
	void SetCargoInventoryOwner(class AcAPBVehicleBase* VehicleOwner);//APBGame.cVehicleCargoInventory.SetCargoInventoryOwner
	class AcAPBPawn* GetPassenger(int nIndex);//APBGame.cVehicleCargoInventory.GetPassenger
	int RetCurrentPassengers();//APBGame.cVehicleCargoInventory.RetCurrentPassengers
	bool RemovePassenger(class AcAPBPawn* Passenger);//APBGame.cVehicleCargoInventory.RemovePassenger
	void DebugLogContents();//APBGame.cVehicleCargoInventory.DebugLogContents
	int RetNumTaskItems();//APBGame.cVehicleCargoInventory.RetNumTaskItems
	int RetCurrentPips();//APBGame.cVehicleCargoInventory.RetCurrentPips
	void KillPassengers(class AController* Killer,class UClass* DamageType,FVector3 HitLocation);//APBGame.cVehicleCargoInventory.KillPassengers
	void AddPassenger(class AcAPBPawn* Passenger);//APBGame.cVehicleCargoInventory.AddPassenger
	unsigned char RetNextTaskItemSizeForPlayer(class AcAPBPlayerController* pRetrievingPlayer);//APBGame.cVehicleCargoInventory.RetNextTaskItemSizeForPlayer
	void SetMaxPassengers(int nMax);//APBGame.cVehicleCargoInventory.SetMaxPassengers
	class AcEquipableTaskItem* PopTaskItem();//APBGame.cVehicleCargoInventory.PopTaskItem
	class AcEquipableTaskItem* TryRetrieveTaskItem(class AcAPBPlayerController* pRetrievingPlayer);//APBGame.cVehicleCargoInventory.TryRetrieveTaskItem
	unsigned char RetNextTaskItemSize();//APBGame.cVehicleCargoInventory.RetNextTaskItemSize
	bool IsAPassenger(class AcAPBPawn* Passenger);//APBGame.cVehicleCargoInventory.IsAPassenger
	int RetMaxPips();//APBGame.cVehicleCargoInventory.RetMaxPips
	int RetMaxPassengers();//APBGame.cVehicleCargoInventory.RetMaxPassengers
	void AddTaskItem(class AcEquipableTaskItem* TaskItem,int nInserterGroupID);//APBGame.cVehicleCargoInventory.AddTaskItem
	unsigned char RetCurrentCargoType();//APBGame.cVehicleCargoInventory.RetCurrentCargoType
};
UClass* AcVehicleCargoInventory::pClassPointer = NULL;

//0x000083 (0x0000DC - 0x000059)
//cPseudoKinematicComponent[0x16EFAB00]
class UcPseudoKinematicComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	class UMeshComponent*                              TriggerComponent;                                 		// 0x00005C (0x0004)              
	unsigned char                                      pkcState;                                         		// 0x000060 (0x0001)              PROPERTY: EPKCState
	unsigned char                                      m_eCurrentCollisionCategory;                      		// 0x000061 (0x0001)              PROPERTY: ECollisionCategory
	unsigned char                                      _0x000062[0x2];                                   		// 0x000062 (0x0002) MISSED OFFSET
	DWORD                                              pClientState;                                     		// 0x000064 (0x0004)              
	float                                              fTime_NoEncroach;                                 		// 0x000068 (0x0004)              
	float                                              fTime_NoKinematicCollision;                       		// 0x00006C (0x0004)              
	float                                              fTime_NoPseudoKinematicCollision;                 		// 0x000070 (0x0004)              
	float                                              fTime_NoLCSpawnBlockingVolumeCollision;           		// 0x000074 (0x0004)              
	float                                              fMinTime_NoEncroach;                              		// 0x000078 (0x0004)              
	float                                              fMinTime_NoKinematicCollision;                    		// 0x00007C (0x0004)              
	float                                              fMinTime_NoPseudoKinematicCollision;              		// 0x000080 (0x0004)              
	float                                              fMinTime_NoLCSpawnBlockingVolumeCollision;        		// 0x000084 (0x0004)              
	FVector3                                           vKinematicLocation;                               		// 0x000088 (0x000C)              
	FRotator                                           rKinematicRotation;                               		// 0x000094 (0x000C)              
	FVector3                                           vKinematicLinearVelocity;                         		// 0x0000A0 (0x000C)              
	FVector3                                           vKinematicAngularVelocity;                        		// 0x0000AC (0x000C)              
	DWORD                                              pRBState;                                         		// 0x0000B8 (0x0004)              
	struct FRigidBodyUnpackParams                      unpackParams;                                     		// 0x0000BC (0x0014)              
	class UMaterialInterface*                          originalMatInst;                                  		// 0x0000D0 (0x0004)              
	class UMaterialInstanceConstant*                   debugMatInst;                                     		// 0x0000D4 (0x0004)              
	unsigned long                                      bDebugColoration : 1;                             		// 0x0000D8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPseudoKinematicComponent");
		return pClassPointer;
	};

public:
	void SetKinematicPosition(FVector3 vLocation,FRotator rRotation);//APBGame.cPseudoKinematicComponent.SetKinematicPosition
	void EnterState(unsigned char eNewState);//APBGame.cPseudoKinematicComponent.EnterState
	bool IsEncroached();//APBGame.cPseudoKinematicComponent.IsEncroached
};
UClass* UcPseudoKinematicComponent::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cLaneCommand[0x16EFA9D0]
class UcLaneCommand : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLaneCommand");
		return pClassPointer;
	};
};
UClass* UcLaneCommand::pClassPointer = NULL;

//0x000054 (0x000094 - 0x000040)
//cVehicleLightsPattern[0x16EFA8A0]
class UcVehicleLightsPattern : public UObject
{
public:
	struct FString                                     m_sPatternName;                                   		// 0x000040 (0x000C)              
	struct FString                                     m_sPatternDescription;                            		// 0x00004C (0x000C)              
	TArray<unsigned char>                              m_UsedChannels;                                   		// 0x000058 (0x000C)              
	class UClass*                                      m_aLightsPatternClasses[0x9];                     		// 0x000064 (0x0024)              
	class UGolemobile*                                 m_MyGolemobile;                                   		// 0x000088 (0x0004)              
	unsigned long                                      m_bInvert : 1;                                    		// 0x00008C (0x0004) [0x00000001] 
	float                                              m_fTimeDilation;                                  		// 0x000090 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleLightsPattern");
		return pClassPointer;
	};

public:
	class UcVehicleLightsPattern* CreateLightsPatternObject(unsigned char PatternID,class UGolemobile* pGolemobileToUpdate);//APBGame.cVehicleLightsPattern.CreateLightsPatternObject
	void SetEmissiveValue(unsigned char EmissiveChannel,float fValue);//APBGame.cVehicleLightsPattern.SetEmissiveValue
	void UpdateLights(float fTimeDelta);//APBGame.cVehicleLightsPattern.UpdateLights
	void SwitchOff();//APBGame.cVehicleLightsPattern.SwitchOff
};
UClass* UcVehicleLightsPattern::pClassPointer = NULL;

//0x000004 (0x000098 - 0x000094)
//cVehicleLightsPattern_EnforcerPlaceholder[0x16EFA770]
class UcVehicleLightsPattern_EnforcerPlaceholder : public UcVehicleLightsPattern
{
public:
	float                                              fTotalTime;                                       		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleLightsPattern_EnforcerPlaceholder");
		return pClassPointer;
	};

public:
	void UpdateLights(float fTimeDelta);//APBGame.cVehicleLightsPattern_EnforcerPlaceholder.UpdateLights
};
UClass* UcVehicleLightsPattern_EnforcerPlaceholder::pClassPointer = NULL;

//0x000004 (0x000098 - 0x000094)
//cVehicleLightsPattern_P1P6[0x16EFA640]
class UcVehicleLightsPattern_P1P6 : public UcVehicleLightsPattern
{
public:
	float                                              fTotalTime;                                       		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleLightsPattern_P1P6");
		return pClassPointer;
	};

public:
	void UpdateLights(float fTimeDelta);//APBGame.cVehicleLightsPattern_P1P6.UpdateLights
};
UClass* UcVehicleLightsPattern_P1P6::pClassPointer = NULL;

//0x000004 (0x000098 - 0x000094)
//cVehicleLightsPattern_P1P6Inside[0x16EFA510]
class UcVehicleLightsPattern_P1P6Inside : public UcVehicleLightsPattern
{
public:
	float                                              fTotalTime;                                       		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleLightsPattern_P1P6Inside");
		return pClassPointer;
	};

public:
	void UpdateLights(float fTimeDelta);//APBGame.cVehicleLightsPattern_P1P6Inside.UpdateLights
};
UClass* UcVehicleLightsPattern_P1P6Inside::pClassPointer = NULL;

//0x000004 (0x000098 - 0x000094)
//cVehicleLightsPattern_P1P6Return[0x16EFA3E0]
class UcVehicleLightsPattern_P1P6Return : public UcVehicleLightsPattern
{
public:
	float                                              fTotalTime;                                       		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleLightsPattern_P1P6Return");
		return pClassPointer;
	};

public:
	void UpdateLights(float fTimeDelta);//APBGame.cVehicleLightsPattern_P1P6Return.UpdateLights
};
UClass* UcVehicleLightsPattern_P1P6Return::pClassPointer = NULL;

//0x000004 (0x000098 - 0x000094)
//cVehicleLightsPattern_SingleFlashP1P2[0x16EFA2B0]
class UcVehicleLightsPattern_SingleFlashP1P2 : public UcVehicleLightsPattern
{
public:
	float                                              fTotalTime;                                       		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleLightsPattern_SingleFlashP1P2");
		return pClassPointer;
	};

public:
	void UpdateLights(float fTimeDelta);//APBGame.cVehicleLightsPattern_SingleFlashP1P2.UpdateLights
};
UClass* UcVehicleLightsPattern_SingleFlashP1P2::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//cVehicleLightsPattern_TEST[0x16EFA180]
class UcVehicleLightsPattern_TEST : public UcVehicleLightsPattern
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleLightsPattern_TEST");
		return pClassPointer;
	};

public:
	void UpdateLights(float fTimeDelta);//APBGame.cVehicleLightsPattern_TEST.UpdateLights
};
UClass* UcVehicleLightsPattern_TEST::pClassPointer = NULL;

//0x000004 (0x000098 - 0x000094)
//cVehicleLightsPattern_TrebleFlashP1[0x16EFA050]
class UcVehicleLightsPattern_TrebleFlashP1 : public UcVehicleLightsPattern
{
public:
	float                                              fTotalTime;                                       		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleLightsPattern_TrebleFlashP1");
		return pClassPointer;
	};

public:
	void UpdateLights(float fTimeDelta);//APBGame.cVehicleLightsPattern_TrebleFlashP1.UpdateLights
};
UClass* UcVehicleLightsPattern_TrebleFlashP1::pClassPointer = NULL;

//0x000004 (0x000098 - 0x000094)
//cVehicleLightsPattern_TrebleFlashP1P2[0x16EF9F20]
class UcVehicleLightsPattern_TrebleFlashP1P2 : public UcVehicleLightsPattern
{
public:
	float                                              fTotalTime;                                       		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleLightsPattern_TrebleFlashP1P2");
		return pClassPointer;
	};

public:
	void UpdateLights(float fTimeDelta);//APBGame.cVehicleLightsPattern_TrebleFlashP1P2.UpdateLights
};
UClass* UcVehicleLightsPattern_TrebleFlashP1P2::pClassPointer = NULL;

//0x00008C (0x000164 - 0x0000D8)
//cAPBVehicleSimObj[0x16EF9DF0]
class UcAPBVehicleSimObj : public USVehicleSimCar
{
public:
	struct FInterpCurveFloat                           m_TorqueCurve;                                    		// 0x0000D8 (0x0010)              
	struct FInterpCurveFloat                           m_ShiftCurve;                                     		// 0x0000E8 (0x0010)              
	float                                              m_fRedlineRPM;                                    		// 0x0000F8 (0x0004)              
	float                                              m_fGearRatios[0x6];                               		// 0x0000FC (0x0018)              
	float                                              m_fLSDFactor;                                     		// 0x000114 (0x0004)              
	float                                              m_fIdleRPM;                                       		// 0x000118 (0x0004)              
	float                                              m_fThrottleSpeed;                                 		// 0x00011C (0x0004)              
	float                                              m_fTotalSpinVel;                                  		// 0x000120 (0x0004)              
	float                                              m_fEngineRPM;                                     		// 0x000124 (0x0004)              
	float                                              m_fGearChangeTime;                                		// 0x000128 (0x0004)              
	float                                              m_fLastHandbrakeFactor;                           		// 0x00012C (0x0004)              
	float                                              m_fCargoTorqueReductionFactorForItems;            		// 0x000130 (0x0004)              
	float                                              m_fCargoTorqueReductionFactorForPlayers;          		// 0x000134 (0x0004)              
	float                                              m_fMaxCargoTorqueReduction;                       		// 0x000138 (0x0004)              
	float                                              GEAR_CHANGE_TIME;                                 		// 0x00013C (0x0004)              
	float                                              fTrackedInput;                                    		// 0x000140 (0x0004)              
	double                                             fTimerStart;                                      		// 0x000144 (0x0008)              
	double                                             fElapsedOutput;                                   		// 0x00014C (0x0008)              
	double                                             fElapsedActual;                                   		// 0x000154 (0x0008)              
	float                                              fCurrentSteeringSpeed;                            		// 0x00015C (0x0004)              
	float                                              fCurrentSteeringValue;                            		// 0x000160 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBVehicleSimObj");
		return pClassPointer;
	};

public:
	float GetEngineRPM();//APBGame.cAPBVehicleSimObj.GetEngineRPM
	float GetCurrentPower();//APBGame.cAPBVehicleSimObj.GetCurrentPower
};
UClass* UcAPBVehicleSimObj::pClassPointer = NULL;

//0x0000D8 (0x000138 - 0x000060)
//cVehicleSetupInfo[0x16EF9CC0]
class UcVehicleSetupInfo : public UcSetupInfo
{
public:
	struct FString                                     m_sVehicleName;                                   		// 0x000060 (0x000C)              
	class USVehicleSimBase*                            m_SimObj;                                         		// 0x00006C (0x0004)              
	TArray<class USVehicleWheel*>                      m_aWheels;                                        		// 0x000070 (0x000C)              
	TArray<struct FName>                               m_aSeatSocketNames;                               		// 0x00007C (0x000C)              
	FVector3                                           m_vCOMOffset;                                     		// 0x000088 (0x000C)              
	FVector3                                           m_vInertiaTensorMultiplier;                       		// 0x000094 (0x000C)              
	unsigned long                                      m_bStayUpright : 1;                               		// 0x0000A0 (0x0004) [0x00000001] 
	float                                              m_fStayUprightRollResistAngle;                    		// 0x0000A4 (0x0004)              
	float                                              m_fStayUprightPitchResistAngle;                   		// 0x0000A8 (0x0004)              
	float                                              m_fStayUprightStiffness;                          		// 0x0000AC (0x0004)              
	float                                              m_fStayUprightDamping;                            		// 0x0000B0 (0x0004)              
	float                                              m_fUprightLiftStrength;                           		// 0x0000B4 (0x0004)              
	float                                              m_fUprightTorqueStrength;                         		// 0x0000B8 (0x0004)              
	float                                              m_fUprightTime;                                   		// 0x0000BC (0x0004)              
	FVector3                                           m_vBaseOffset;                                    		// 0x0000C0 (0x000C)              
	FVector3                                           m_vFarOffset;                                     		// 0x0000CC (0x000C)              
	FVector3                                           m_vWorstOffset;                                   		// 0x0000D8 (0x000C)              
	float                                              m_fCamDist;                                       		// 0x0000E4 (0x0004)              
	float                                              m_fFarCamDist;                                    		// 0x0000E8 (0x0004)              
	float                                              m_fHandbrakeRampdownTime;                         		// 0x0000EC (0x0004)              
	float                                              m_fHandbrakeThresholdSpeed;                       		// 0x0000F0 (0x0004)              
	float                                              m_fFrontRearBrakeBalance;                         		// 0x0000F4 (0x0004)              
	float                                              m_fMaxBrakeDeceleration;                          		// 0x0000F8 (0x0004)              
	float                                              m_fThrottleForceMultiplier;                       		// 0x0000FC (0x0004)              
	float                                              m_fTyreLongitudnalGrip;                           		// 0x000100 (0x0004)              
	float                                              m_fTyreLateralGrip;                               		// 0x000104 (0x0004)              
	float                                              m_fDragForceMultiplier;                           		// 0x000108 (0x0004)              
	class UPhysicsAsset*                               m_PhysicsAsset;                                   		// 0x00010C (0x0004)              
	TArray<class UMorphTargetSet*>                     m_aMorphSets;                                     		// 0x000110 (0x000C)              
	class UGolemobile*                                 m_pGolemobile;                                    		// 0x00011C (0x0004)              
	FVector3                                           m_BlobShadowScale3D;                              		// 0x000120 (0x000C)              
	FVector3                                           m_BlobShadowTranslation;                          		// 0x00012C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVehicleSetupInfo");
		return pClassPointer;
	};
};
UClass* UcVehicleSetupInfo::pClassPointer = NULL;

//0x00031C (0x00057C - 0x000260)
//cSetupTypeManager[0x16EF9B90]
class AcSetupTypeManager : public AActor
{
public:
	unsigned long                                      m_bEnabled : 1;                                   		// 0x000260 (0x0004) [0x00000001] 
	class UcSetupTypeMain*                             m_pSTMain;                                        		// 0x000264 (0x0004)              
	class UcClientSetupTypeHelper*                     m_pCSTHelper;                                     		// 0x000268 (0x0004)              
	struct FSActiveAssetIndexes                        m_aPedestrianAssetRange[0x14];                    		// 0x00026C (0x00F0)              
	struct FSActiveAssetIndexes                        m_aVehicleAssetRange[0x14];                       		// 0x00035C (0x00F0)              
	int                                                m_aPedestrianAssetRangeReceived[0x14];            		// 0x00044C (0x0050)              
	int                                                m_aVehicleAssetRangeReceived[0x14];               		// 0x00049C (0x0050)              
	unsigned char                                      m_mPedestrianTypeArrayOffsets[0x3C];              		// 0x0004EC (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_mVehicleCategoryArrayOffsets[0x3C];             		// 0x000528 (0x003C)              UNKNOWN PROPERTY: MapProperty
	float                                              m_cfg_fInitialPedestrianRotationInSeconds;        		// 0x000564 (0x0004)              
	float                                              m_cfg_fDefaultPedestrianRotationInSeconds;        		// 0x000568 (0x0004)              
	float                                              m_cfg_fInitialVehicleRotationInSeconds;           		// 0x00056C (0x0004)              
	float                                              m_cfg_fDefaultVehicleRotationInSeconds;           		// 0x000570 (0x0004)              
	float                                              m_cfg_fClientGCAndStreamDelayInSeconds;           		// 0x000574 (0x0004)              
	float                                              m_cfg_fReleaseDelayInSeconds;                     		// 0x000578 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupTypeManager");
		return pClassPointer;
	};

public:
	void ReceivedPedestrianAssetRangeOnClient(int pr_nAryOffset);//APBGame.cSetupTypeManager.ReceivedPedestrianAssetRangeOnClient
	void ReceivedVehicleAssetRangeOnClient(int pr_nAryOffset);//APBGame.cSetupTypeManager.ReceivedVehicleAssetRangeOnClient
	void ReplicatedArrayEvent(struct FName VarName,int nElement);//APBGame.cSetupTypeManager.ReplicatedArrayEvent
};
UClass* AcSetupTypeManager::pClassPointer = NULL;

//0x000010 (0x000274 - 0x000264)
//cStreamedLODStaticMeshActor[0x16EF9A60]
class AcStreamedLODStaticMeshActor : public AStaticMeshActor
{
public:
	class UcStreamedComponentSet*                      m_ComponentSet;                                   		// 0x000264 (0x0004)              
	FVector3                                           m_StreamingPriPos;                                		// 0x000268 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStreamedLODStaticMeshActor");
		return pClassPointer;
	};

public:
	bool IsLocked();//APBGame.cStreamedLODStaticMeshActor.IsLocked
	void UnlockHighLODs();//APBGame.cStreamedLODStaticMeshActor.UnlockHighLODs
	void PrepareComponent(class UActorComponent* pComponent,int nLOD);//APBGame.cStreamedLODStaticMeshActor.PrepareComponent
	void LockHighLODs();//APBGame.cStreamedLODStaticMeshActor.LockHighLODs
};
UClass* AcStreamedLODStaticMeshActor::pClassPointer = NULL;

//0x000030 (0x0002A4 - 0x000274)
//cStreamedBuildingActor[0x16EF9930]
class AcStreamedBuildingActor : public AcStreamedLODStaticMeshActor
{
public:
	class UTextureDynamicLookup*                       m_EmissiveLookupTexture;                          		// 0x000274 (0x0004)              
	unsigned long                                      m_bEmissiveLookupCreated : 1;                     		// 0x000278 (0x0004) [0x00000001] 
	unsigned long                                      m_bTransition : 1;                                		// 0x000278 (0x0004) [0x00000002] 
	int                                                m_nMaxEmissiveIndex;                              		// 0x00027C (0x0004)              
	int                                                m_nNumOnFeatures;                                 		// 0x000280 (0x0004)              
	float                                              m_LastEmissiveUpdateNTOD;                         		// 0x000284 (0x0004)              
	TArray<struct FMaterialInstanceList>               m_EmissiveMaterialInstances;                      		// 0x000288 (0x000C)              
	TArray<struct FMaterialInstanceList>               m_DebugHightlightMaterialInstances;               		// 0x000294 (0x000C)              
	int                                                m_nOverrideLightmapResolution;                    		// 0x0002A0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStreamedBuildingActor");
		return pClassPointer;
	};

public:
	void PrepareComponent(class UActorComponent* pComponent,int nLOD);//APBGame.cStreamedBuildingActor.PrepareComponent
};
UClass* AcStreamedBuildingActor::pClassPointer = NULL;

//0x000000 (0x000274 - 0x000274)
//cStreamedRoadActor[0x16EF9800]
class AcStreamedRoadActor : public AcStreamedLODStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStreamedRoadActor");
		return pClassPointer;
	};
};
UClass* AcStreamedRoadActor::pClassPointer = NULL;

//0x000000 (0x000274 - 0x000274)
//cStreamedTerrainActor[0x16EF96D0]
class AcStreamedTerrainActor : public AcStreamedLODStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStreamedTerrainActor");
		return pClassPointer;
	};
};
UClass* AcStreamedTerrainActor::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSetupTypeDef[0x16EF95A0]
class UcSetupTypeDef : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupTypeDef");
		return pClassPointer;
	};
};
UClass* UcSetupTypeDef::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//cClientSetupTypeHelper[0x16EF9470]
class UcClientSetupTypeHelper : public UObject
{
public:
	class UcPedestrianSetupInfo*                       m_pPedestrianMaleTempAsset;                       		// 0x000040 (0x0004)              
	class UcPedestrianSetupInfo*                       m_pPedestrianFemaleTempAsset;                     		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cClientSetupTypeHelper");
		return pClassPointer;
	};
};
UClass* UcClientSetupTypeHelper::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//cSetupTypeAssetRecord[0x16EF9340]
class UcSetupTypeAssetRecord : public UObject
{
public:
	struct FString                                     m_Name;                                           		// 0x000040 (0x000C)              
	int                                                m_nAssetIndex;                                    		// 0x00004C (0x0004)              
	int                                                m_nTypeOrCategoryIndex;                           		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupTypeAssetRecord");
		return pClassPointer;
	};
};
UClass* UcSetupTypeAssetRecord::pClassPointer = NULL;

//0x00000C (0x000060 - 0x000054)
//cSetupTypePedestrianAssetRecord[0x16EF9210]
class UcSetupTypePedestrianAssetRecord : public UcSetupTypeAssetRecord
{
public:
	int                                                m_nRaceType;                                      		// 0x000054 (0x0004)              
	unsigned char                                      m_AudioType;                                      		// 0x000058 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	class UcPedestrianSetupInfo*                       m_pSetupInfo;                                     		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupTypePedestrianAssetRecord");
		return pClassPointer;
	};
};
UClass* UcSetupTypePedestrianAssetRecord::pClassPointer = NULL;

//0x000004 (0x000058 - 0x000054)
//cSetupTypeVehicleAssetRecord[0x16EF90E0]
class UcSetupTypeVehicleAssetRecord : public UcSetupTypeAssetRecord
{
public:
	class UcVehicleSetupInfo*                          m_pSetupInfo;                                     		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupTypeVehicleAssetRecord");
		return pClassPointer;
	};
};
UClass* UcSetupTypeVehicleAssetRecord::pClassPointer = NULL;

//0x0000F4 (0x000134 - 0x000040)
//cSetupTypeDataStore[0x16EF8FB0]
class UcSetupTypeDataStore : public UObject
{
public:
	unsigned char                                      m_mPedestrianTypeRecords[0x3C];                   		// 0x000040 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_mVehicleCategoryRecords[0x3C];                  		// 0x00007C (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_mPedestrianAssetRecords[0x3C];                  		// 0x0000B8 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_mVehicleAssetRecords[0x3C];                     		// 0x0000F4 (0x003C)              UNKNOWN PROPERTY: MapProperty
	class UcSetupTypeMain*                             m_pSTMain;                                        		// 0x000130 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupTypeDataStore");
		return pClassPointer;
	};
};
UClass* UcSetupTypeDataStore::pClassPointer = NULL;

//0x0000E4 (0x000124 - 0x000040)
//cSetupTypeMain[0x16EF8E80]
class UcSetupTypeMain : public UObject
{
public:
	class UPackage*                                    m_PedestrianTypePackage;                          		// 0x000040 (0x0004)              
	class UPackage*                                    m_VehicleTypePackage;                             		// 0x000044 (0x0004)              
	TArray<struct FSActorWithSetupTypeRecord>          m_aPedsToWatch;                                   		// 0x000048 (0x000C)              
	TArray<struct FSActorWithSetupTypeRecord>          m_aVehsToWatch;                                   		// 0x000054 (0x000C)              
	TArray<int>                                        m_aPedestrianAssetsToStream;                      		// 0x000060 (0x000C)              
	TArray<int>                                        m_aVehicleAssetsToStream;                         		// 0x00006C (0x000C)              
	TArray<int>                                        m_aPedestrianAssetsToGC;                          		// 0x000078 (0x000C)              
	TArray<int>                                        m_aVehicleAssetsToGC;                             		// 0x000084 (0x000C)              
	unsigned char                                      m_mPedestrianTypeRecordTimers[0x3C];              		// 0x000090 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_mVehicleCategoryRecordTimers[0x3C];             		// 0x0000CC (0x003C)              UNKNOWN PROPERTY: MapProperty
	DWORD                                              m_pmmPedestrianAssetInstanceTimers;               		// 0x000108 (0x0004)              
	class UcSetupTypeTimer*                            m_pPedestrianRotationTimer;                       		// 0x00010C (0x0004)              
	class UcSetupTypeTimer*                            m_pVehicleRotationTimer;                          		// 0x000110 (0x0004)              
	class AcSetupTypeManager*                          m_pSTManager;                                     		// 0x000114 (0x0004)              
	class UcSetupTypeDataStore*                        m_pSTDataStore;                                   		// 0x000118 (0x0004)              
	class UcSetupTypeSDDMisc*                          m_pSTSDDMisc;                                     		// 0x00011C (0x0004)              
	class UcSetupTypeStreamCallback*                   m_pSTCallback;                                    		// 0x000120 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupTypeMain");
		return pClassPointer;
	};
};
UClass* UcSetupTypeMain::pClassPointer = NULL;

//0x000040 (0x000080 - 0x000040)
//cSetupTypeSDDMisc[0x16EF8D50]
class UcSetupTypeSDDMisc : public UObject
{
public:
	unsigned char                                      m_mNPCTypeVehicleCategoryTranslation[0x3C];       		// 0x000040 (0x003C)              UNKNOWN PROPERTY: MapProperty
	class UcSetupTypeMain*                             m_pSTMain;                                        		// 0x00007C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupTypeSDDMisc");
		return pClassPointer;
	};
};
UClass* UcSetupTypeSDDMisc::pClassPointer = NULL;

//0x000080 (0x0000C0 - 0x000040)
//cSetupTypeStreamCallback[0x16EF8C20]
class UcSetupTypeStreamCallback : public UObject
{
public:
	DWORD                                              VfTable_cObjectStreamingCallback;                 		// 0x000040 (0x0004)              
	unsigned char                                      m_mPedestrianSetupTypeIndex[0x3C];                		// 0x000044 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_mVehicleSetupTypeIndex[0x3C];                   		// 0x000080 (0x003C)              UNKNOWN PROPERTY: MapProperty
	class UcSetupTypeMain*                             m_pSTMain;                                        		// 0x0000BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupTypeStreamCallback");
		return pClassPointer;
	};
};
UClass* UcSetupTypeStreamCallback::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//cSetupTypeTimer[0x16EF8AF0]
class UcSetupTypeTimer : public UObject
{
public:
	unsigned char                                      m_eTimerState;                                    		// 0x000040 (0x0001)              PROPERTY: etTimerState
	unsigned char                                      _0x000041[0x3];                                   		// 0x000041 (0x0003) MISSED OFFSET
	double                                             m_fStartTime;                                     		// 0x000044 (0x0008)              
	double                                             m_fStopTime;                                      		// 0x00004C (0x0008)              
	int                                                m_nData;                                          		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSetupTypeTimer");
		return pClassPointer;
	};
};
UClass* UcSetupTypeTimer::pClassPointer = NULL;

//0x0000A0 (0x00050C - 0x00046C)
//RTWLVCPawn[0x16EF89C0]
class ARTWLVCPawn : public APawn
{
public:
	int                                                ViewPitchValue;                                   		// 0x00046C (0x0004)              
	int                                                MaxPitchVariation;                                		// 0x000470 (0x0004)              
	FRotator                                           CurrentCameraRotation;                            		// 0x000474 (0x000C)              
	float                                              OriginTargetDistance;                             		// 0x000480 (0x0004)              
	TArray<struct FCameraView>                         CameraViews;                                      		// 0x000484 (0x000C)              
	int                                                ActiveCameraViewIdx;                              		// 0x000490 (0x0004)              
	unsigned long                                      bShowUI : 1;                                      		// 0x000494 (0x0004) [0x00000001] 
	TArray<struct FString>                             MenuStates;                                       		// 0x000498 (0x000C)              
	int                                                ActiveStateIdx;                                   		// 0x0004A4 (0x0004)              
	class UAPBStudioVehicle*                           VehicleStudio;                                    		// 0x0004A8 (0x0004)              
	class UGolemobileBase*                             VehicleBase;                                      		// 0x0004AC (0x0004)              
	TArray<struct FString>                             CSStates;                                         		// 0x0004B0 (0x000C)              
	TArray<struct FString>                             CSParameters;                                     		// 0x0004BC (0x000C)              
	int                                                CSActiveParameterIdx;                             		// 0x0004C8 (0x0004)              
	int                                                CSCurrentStateIdx;                                		// 0x0004CC (0x0004)              
	class UDrawTESLayerComponent*                      TESLayerComponent;                                		// 0x0004D0 (0x0004)              
	class UObject*                                     PresetsPackage;                                   		// 0x0004D4 (0x0004)              
	struct FString                                     PresetsPackageName;                               		// 0x0004D8 (0x000C)              
	class UGolemobileDescriptor*                       PresetDescriptors[0xA];                           		// 0x0004E4 (0x0028)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWLVCPawn");
		return pClassPointer;
	};

public:
	void GetBoneEndPoints(struct FString BoneName,FVector3* Start,FVector3* End);//APBGame.RTWLVCPawn.GetBoneEndPoints
	void SetPreset(int Index);//APBGame.RTWLVCPawn.SetPreset
	void GetVehicleCustomisation(TArray<unsigned char>* aData);//APBGame.RTWLVCPawn.GetVehicleCustomisation
	void OnParameterChange(struct FString ParamName,unsigned char eType);//APBGame.RTWLVCPawn.OnParameterChange
	void LoadCustomisation(struct FString Filename);//APBGame.RTWLVCPawn.LoadCustomisation
	void LoadPresets();//APBGame.RTWLVCPawn.LoadPresets
	void SetProjectorToCamera();//APBGame.RTWLVCPawn.SetProjectorToCamera
	void DrawHUD(class AHUD* H);//APBGame.RTWLVCPawn.DrawHUD
	void ClearPresetDecals(bool bActivePresetOnly);//APBGame.RTWLVCPawn.ClearPresetDecals
	void NextGroup();//APBGame.RTWLVCPawn.NextGroup
	class UGolemobileDescriptor* LoadGolemobileDescriptor(struct FString DescriptorName);//APBGame.RTWLVCPawn.LoadGolemobileDescriptor
	void PreviousGroup();//APBGame.RTWLVCPawn.PreviousGroup
	void ClearSymbol();//APBGame.RTWLVCPawn.ClearSymbol
	void SavePresetsPackage();//APBGame.RTWLVCPawn.SavePresetsPackage
	void ToggleUI();//APBGame.RTWLVCPawn.ToggleUI
	void UpdateProjectionCylinder(bool bUpdateHeight);//APBGame.RTWLVCPawn.UpdateProjectionCylinder
	void PostBeginPlay();//APBGame.RTWLVCPawn.PostBeginPlay
	void OnStateEnter(struct FString StateName);//APBGame.RTWLVCPawn.OnStateEnter
	void SetGroup(int GroupIndex);//APBGame.RTWLVCPawn.SetGroup
	void LoadSymbol(struct FString sName);//APBGame.RTWLVCPawn.LoadSymbol
	void SetCameraViewFromIndex(int CameraViewIndex);//APBGame.RTWLVCPawn.SetCameraViewFromIndex
	void LoadPresetsPackage();//APBGame.RTWLVCPawn.LoadPresetsPackage
	void NextGroupItem();//APBGame.RTWLVCPawn.NextGroupItem
	void GetViewPointLocal(FVector3* Origin,FVector3* Direction,class UMeshComponent* MeshComp);//APBGame.RTWLVCPawn.GetViewPointLocal
	void PreviousCameraView();//APBGame.RTWLVCPawn.PreviousCameraView
	bool CalcCamera(float fDeltaTime,FVector3* out_CamLoc,FRotator* out_CamRot,float* out_FOV);//APBGame.RTWLVCPawn.CalcCamera
	void NextCameraView();//APBGame.RTWLVCPawn.NextCameraView
	void OnStateLeave(struct FString StateName);//APBGame.RTWLVCPawn.OnStateLeave
	void PreviousMenu();//APBGame.RTWLVCPawn.PreviousMenu
	void GenerateRandomVehicles(struct FString Parameters);//APBGame.RTWLVCPawn.GenerateRandomVehicles
	void ProcessInputData(struct FInputData Data);//APBGame.RTWLVCPawn.ProcessInputData
	void DrawStateHUD(class AHUD* H);//APBGame.RTWLVCPawn.DrawStateHUD
	void NextMenu();//APBGame.RTWLVCPawn.NextMenu
	void SaveCustomisation(struct FString Filename);//APBGame.RTWLVCPawn.SaveCustomisation
	FRotator ComputeCameraRotation(FVector3* Origin,FVector3* Target);//APBGame.RTWLVCPawn.ComputeCameraRotation
	void PreviousGroupItem();//APBGame.RTWLVCPawn.PreviousGroupItem
};
UClass* ARTWLVCPawn::pClassPointer = NULL;

//0x000214 (0x000680 - 0x00046C)
//RTWLCCPawn[0x16EF8890]
class ARTWLCCPawn : public APawn
{
public:
	int                                                ViewPitchValue;                                   		// 0x00046C (0x0004)              
	int                                                MaxPitchVariation;                                		// 0x000470 (0x0004)              
	FRotator                                           CurrentCameraRotation;                            		// 0x000474 (0x000C)              
	float                                              OriginTargetDistance;                             		// 0x000480 (0x0004)              
	TArray<struct FCameraView>                         CameraViews;                                      		// 0x000484 (0x000C)              
	int                                                ActiveCameraViewIdx;                              		// 0x000490 (0x0004)              
	unsigned long                                      bShowUI : 1;                                      		// 0x000494 (0x0004) [0x00000001] 
	TArray<struct FString>                             MenuStates;                                       		// 0x000498 (0x000C)              
	int                                                ActiveStateIdx;                                   		// 0x0004A4 (0x0004)              
	class UAPBStudioCharacter*                         CharacterStudio;                                  		// 0x0004A8 (0x0004)              
	class UGolemBase*                                  CharacterBase;                                    		// 0x0004AC (0x0004)              
	struct FString                                     CharacterBaseName;                                		// 0x0004B0 (0x000C)              
	TArray<struct FString>                             CSStates;                                         		// 0x0004BC (0x000C)              
	TArray<struct FString>                             CSParameters;                                     		// 0x0004C8 (0x000C)              
	int                                                CSActiveParameterIdx;                             		// 0x0004D4 (0x0004)              
	int                                                CSCurrentStateIdx;                                		// 0x0004D8 (0x0004)              
	class UDrawTESLayerComponent*                      TESLayerComponent;                                		// 0x0004DC (0x0004)              
	class UObject*                                     PresetsPackage;                                   		// 0x0004E0 (0x0004)              
	struct FString                                     PresetsPackageName;                               		// 0x0004E4 (0x000C)              
	class UGolemDescriptor*                            PresetDescriptors[0x64];                          		// 0x0004F0 (0x0190)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWLCCPawn");
		return pClassPointer;
	};

public:
	void NextGroup();//APBGame.RTWLCCPawn.NextGroup
	void PreviousMenu();//APBGame.RTWLCCPawn.PreviousMenu
	void NextMenu();//APBGame.RTWLCCPawn.NextMenu
	void SetGroup(int GroupIndex);//APBGame.RTWLCCPawn.SetGroup
	void NextCameraView();//APBGame.RTWLCCPawn.NextCameraView
	void CreateStudio();//APBGame.RTWLCCPawn.CreateStudio
	class UGolemDescriptor* LoadGolemDescriptor(struct FString DescriptorName);//APBGame.RTWLCCPawn.LoadGolemDescriptor
	void GenerateRandomCharacters(struct FString Parameters);//APBGame.RTWLCCPawn.GenerateRandomCharacters
	void ClearPresetDecals(bool bActivePresetOnly);//APBGame.RTWLCCPawn.ClearPresetDecals
	void PostBeginPlay();//APBGame.RTWLCCPawn.PostBeginPlay
	void ProcessInputData(struct FInputData Data);//APBGame.RTWLCCPawn.ProcessInputData
	void LoadSymbol(struct FString sName);//APBGame.RTWLCCPawn.LoadSymbol
	FRotator ComputeCameraRotation(FVector3* Origin,FVector3* Target);//APBGame.RTWLCCPawn.ComputeCameraRotation
	void GetViewPointLocal(FVector3* Origin,FVector3* Direction,class UMeshComponent* MeshComp);//APBGame.RTWLCCPawn.GetViewPointLocal
	void PreviousGroup();//APBGame.RTWLCCPawn.PreviousGroup
	void SetLOD(int nLOD);//APBGame.RTWLCCPawn.SetLOD
	void GetBoneEndPoints(struct FString BoneName,FVector3* Start,FVector3* End);//APBGame.RTWLCCPawn.GetBoneEndPoints
	void SaveCustomisation(struct FString Filename);//APBGame.RTWLCCPawn.SaveCustomisation
	void ToggleUI();//APBGame.RTWLCCPawn.ToggleUI
	void DrawHUD(class AHUD* H);//APBGame.RTWLCCPawn.DrawHUD
	void SaveBakedCharacter(struct FString PackageName,bool bCompress,int nNumLODs,bool bContactCharacter,bool bGenerateMaskTextures,struct FString MeshName);//APBGame.RTWLCCPawn.SaveBakedCharacter
	void GetCharacterCustomisation(TArray<unsigned char>* aData);//APBGame.RTWLCCPawn.GetCharacterCustomisation
	void UpdateProjectionCylinder(bool bUpdateHeight);//APBGame.RTWLCCPawn.UpdateProjectionCylinder
	void ResetMorphs();//APBGame.RTWLCCPawn.ResetMorphs
	void LoadPresets();//APBGame.RTWLCCPawn.LoadPresets
	void SetCameraViewFromIndex(int CameraViewIndex);//APBGame.RTWLCCPawn.SetCameraViewFromIndex
	void SaveMaskTextures(struct FString PackageName);//APBGame.RTWLCCPawn.SaveMaskTextures
	bool CalcCamera(float fDeltaTime,FVector3* out_CamLoc,FRotator* out_CamRot,float* out_FOV);//APBGame.RTWLCCPawn.CalcCamera
	void OnParameterChange(struct FString ParamName,unsigned char eType);//APBGame.RTWLCCPawn.OnParameterChange
	void OnStateEnter(struct FString StateName);//APBGame.RTWLCCPawn.OnStateEnter
	void OnStateLeave(struct FString StateName);//APBGame.RTWLCCPawn.OnStateLeave
	void PreviousGroupItem();//APBGame.RTWLCCPawn.PreviousGroupItem
	void NextGroupItem();//APBGame.RTWLCCPawn.NextGroupItem
	void SavePresetsPackage();//APBGame.RTWLCCPawn.SavePresetsPackage
	void ClearSymbol();//APBGame.RTWLCCPawn.ClearSymbol
	void LoadPresetsPackage();//APBGame.RTWLCCPawn.LoadPresetsPackage
	void SetPreset(int Index);//APBGame.RTWLCCPawn.SetPreset
	void LoadCustomisation(struct FString Filename);//APBGame.RTWLCCPawn.LoadCustomisation
	void PreviousCameraView();//APBGame.RTWLCCPawn.PreviousCameraView
	void SetProjectorToCamera();//APBGame.RTWLCCPawn.SetProjectorToCamera
	void DrawStateHUD(class AHUD* H);//APBGame.RTWLCCPawn.DrawStateHUD
};
UClass* ARTWLCCPawn::pClassPointer = NULL;

//0x00001C (0x00027C - 0x000260)
//cLocationBeaconActor[0x16EF8760]
class AcLocationBeaconActor : public AActor
{
public:
	struct FString                                     m_sBeaconIDTag;                                   		// 0x000260 (0x000C)              
	struct FEnumeratedName                             m_eBeaconType;                                    		// 0x00026C (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLocationBeaconActor");
		return pClassPointer;
	};
};
UClass* AcLocationBeaconActor::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cItemRestrictionBase[0x16EF8630]
class UcItemRestrictionBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionBase");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionBase::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//cItemRestrictionClass[0x16EF8500]
class UcItemRestrictionClass : public UcItemRestrictionBase
{
public:
	class UcItemRestrictionGroup*                      m_group;                                          		// 0x000040 (0x0004)              
	int                                                m_slotId;                                         		// 0x000044 (0x0004)              
	int                                                m_nSecondaryKey;                                  		// 0x000048 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionClass");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionClass::pClassPointer = NULL;

//0x000004 (0x000050 - 0x00004C)
//cItemRestrictionClassIcon[0x16EF83D0]
class UcItemRestrictionClassIcon : public UcItemRestrictionClass
{
public:
	class UcItemRestrictionIconData*                   m_iconData;                                       		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionClassIcon");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionClassIcon::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//cItemRestrictionCommentIcon[0x16EF82A0]
class UcItemRestrictionCommentIcon : public UcItemRestrictionBase
{
public:
	class UcItemRestrictionIconData*                   m_iconData;                                       		// 0x000040 (0x0004)              
	struct FIntPoint                                   m_size;                                           		// 0x000044 (0x0008)              
	unsigned long                                      m_beingResized : 1;                               		// 0x00004C (0x0004) [0x00000001] 
	struct FIntPoint                                   m_sizeBeforeResize;                               		// 0x000050 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionCommentIcon");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionCommentIcon::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//cItemRestrictionCull[0x16EF8170]
class UcItemRestrictionCull : public UcItemRestrictionBase
{
public:
	TArray<class UcItemRestrictionGroup*>              m_groups;                                         		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionCull");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionCull::pClassPointer = NULL;

//0x000004 (0x000050 - 0x00004C)
//cItemRestrictionCullIcon[0x16EF8040]
class UcItemRestrictionCullIcon : public UcItemRestrictionCull
{
public:
	class UcItemRestrictionIconData*                   m_iconData;                                       		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionCullIcon");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionCullIcon::pClassPointer = NULL;

//0x000088 (0x0000C8 - 0x000040)
//cItemRestrictionGroup[0x16EF7F10]
class UcItemRestrictionGroup : public UcItemRestrictionBase
{
public:
	unsigned long                                      m_compulsory : 1;                                 		// 0x000040 (0x0004) [0x00000001] 
	int                                                m_order;                                          		// 0x000044 (0x0004)              
	class UcItemRestrictionClass*                      m_class;                                          		// 0x000048 (0x0004)              
	TArray<class UcItemRestrictionCull*>               m_culls;                                          		// 0x00004C (0x000C)              
	TArray<class UcItemRestrictionGroup*>              m_dependencies;                                   		// 0x000058 (0x000C)              
	TArray<class UcItemRestrictionGroup*>              m_children;                                       		// 0x000064 (0x000C)              
	TArray<class UcItemRestrictionSwap*>               m_swaps;                                          		// 0x000070 (0x000C)              
	TArray<class UcItemRestrictionGroup*>              m_dependenciesInverse;                            		// 0x00007C (0x000C)              
	TArray<class UcItemRestrictionSwap*>               m_dependenciesInverseSwap;                        		// 0x000088 (0x000C)              
	TArray<class UcItemRestrictionSwap*>               m_filtersInverseSwap;                             		// 0x000094 (0x000C)              
	TArray<class UcItemRestrictionSwap*>               m_antiFiltersInverseSwap;                         		// 0x0000A0 (0x000C)              
	class UcItemRestrictionGroup*                      m_parent;                                         		// 0x0000AC (0x0004)              
	TArray<class UcItemRestrictionGroup*>              m_parentsNonOrdered;                              		// 0x0000B0 (0x000C)              
	TArray<class UcItemRestrictionGroup*>              m_childrenNonOrdered;                             		// 0x0000BC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionGroup");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionGroup::pClassPointer = NULL;

//0x000010 (0x0000D8 - 0x0000C8)
//cItemRestrictionGroupIcon[0x16EF7DE0]
class UcItemRestrictionGroupIcon : public UcItemRestrictionGroup
{
public:
	class UcItemRestrictionIconData*                   m_iconData;                                       		// 0x0000C8 (0x0004)              
	int                                                m_orderDisplayed;                                 		// 0x0000CC (0x0004)              
	int                                                m_orderMax;                                       		// 0x0000D0 (0x0004)              
	int                                                m_depth;                                          		// 0x0000D4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionGroupIcon");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionGroupIcon::pClassPointer = NULL;

//0x000030 (0x000070 - 0x000040)
//cItemRestrictionSwap[0x16EF7CB0]
class UcItemRestrictionSwap : public UcItemRestrictionBase
{
public:
	TArray<class UcItemRestrictionGroup*>              m_groups;                                         		// 0x000040 (0x000C)              
	TArray<class UcItemRestrictionGroup*>              m_dependencies;                                   		// 0x00004C (0x000C)              
	TArray<class UcItemRestrictionGroup*>              m_Filters;                                        		// 0x000058 (0x000C)              
	TArray<class UcItemRestrictionGroup*>              m_antiFilters;                                    		// 0x000064 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionSwap");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionSwap::pClassPointer = NULL;

//0x000004 (0x000074 - 0x000070)
//cItemRestrictionSwapIcon[0x16EF7B80]
class UcItemRestrictionSwapIcon : public UcItemRestrictionSwap
{
public:
	class UcItemRestrictionIconData*                   m_iconData;                                       		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionSwapIcon");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionSwapIcon::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//cItemRestrictionIconData[0x16EF7A50]
class UcItemRestrictionIconData : public UObject
{
public:
	struct FIntPoint                                   m_pos;                                            		// 0x000040 (0x0008)              
	unsigned long                                      m_beingMoved : 1;                                 		// 0x000048 (0x0004) [0x00000001] 
	struct FIntPoint                                   m_posBeforeMove;                                  		// 0x00004C (0x0008)              
	struct FString                                     m_sComment;                                       		// 0x000054 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionIconData");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionIconData::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cItemRestrictionTree[0x16EF7920]
class UcItemRestrictionTree : public UObject
{
public:
	int                                                m_maxSlotId;                                      		// 0x000040 (0x0004)              
	TArray<class UcItemRestrictionBase*>               m_nodes;                                          		// 0x000044 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cItemRestrictionTree");
		return pClassPointer;
	};
};
UClass* UcItemRestrictionTree::pClassPointer = NULL;

//0x0000FC (0x000604 - 0x000508)
//cHUDBase[0x16EF77F0]
class AcHUDBase : public AHUD
{
public:
	TArray<class UcUIDataStore_HUD*>                   m_aHUDDataStores;                                 		// 0x000508 (0x000C)              
	class UcUIDataStore_HUD*                           m_DistrictMapDS;                                  		// 0x000514 (0x0004)              
	unsigned long                                      m_bHUDScenesVisible : 1;                          		// 0x000518 (0x0004) [0x00000001] 
	unsigned long                                      m_bHUDScenesOpen : 1;                             		// 0x000518 (0x0004) [0x00000002] 
	unsigned long                                      m_bToggleHUDOverride : 1;                         		// 0x000518 (0x0004) [0x00000004] 
	unsigned long                                      m_bDataStoreRefresh : 1;                          		// 0x000518 (0x0004) [0x00000008] 
	unsigned long                                      m_bDrawDebugHUD : 1;                              		// 0x000518 (0x0004) [0x00000010] 
	unsigned long                                      m_bShowCharLocation : 1;                          		// 0x000518 (0x0004) [0x00000020] 
	unsigned long                                      m_bShowTime : 1;                                  		// 0x000518 (0x0004) [0x00000040] 
	unsigned long                                      m_bShowOwnName : 1;                               		// 0x000518 (0x0004) [0x00000080] 
	unsigned long                                      m_bHealthBarWarningFlashOn : 1;                   		// 0x000518 (0x0004) [0x00000100] 
	unsigned long                                      m_bHealthBarFlashOn : 1;                          		// 0x000518 (0x0004) [0x00000200] 
	unsigned long                                      m_bDrawDebugWeaponInfo : 1;                       		// 0x000518 (0x0004) [0x00000400] 
	unsigned long                                      m_bDrawDebugUnconsciousBar : 1;                   		// 0x000518 (0x0004) [0x00000800] 
	unsigned long                                      m_bDrawJobs : 1;                                  		// 0x000518 (0x0004) [0x00001000] 
	unsigned long                                      m_bDrawMessage : 1;                               		// 0x000518 (0x0004) [0x00002000] 
	unsigned long                                      flashAPB : 1;                                     		// 0x000518 (0x0004) [0x00004000] 
	unsigned long                                      m_bSuicide : 1;                                   		// 0x000518 (0x0004) [0x00008000] 
	unsigned long                                      m_bSameSideKill : 1;                              		// 0x000518 (0x0004) [0x00010000] 
	unsigned long                                      m_bPlayerOwnerDead : 1;                           		// 0x000518 (0x0004) [0x00020000] 
	unsigned long                                      m_bDrawMissionStats : 1;                          		// 0x000518 (0x0004) [0x00040000] 
	unsigned long                                      m_bShowDeathDebugHUD : 1;                         		// 0x000518 (0x0004) [0x00080000] 
	unsigned long                                      m_bShowBombHUD : 1;                               		// 0x000518 (0x0004) [0x00100000] 
	unsigned long                                      m_bBombTimerEnabled : 1;                          		// 0x000518 (0x0004) [0x00200000] 
	unsigned long                                      m_bDrawLocatorOverlays : 1;                       		// 0x000518 (0x0004) [0x00400000] 
	unsigned long                                      m_bDrawTaskItemSpawnLocations : 1;                		// 0x000518 (0x0004) [0x00800000] 
	unsigned long                                      m_bDrawOpenWorldTargetText : 1;                   		// 0x000518 (0x0004) [0x01000000] 
	unsigned long                                      m_bDrawBombLocations : 1;                         		// 0x000518 (0x0004) [0x02000000] 
	unsigned long                                      m_bDrawVehicleDebugInfo : 1;                      		// 0x000518 (0x0004) [0x04000000] 
	unsigned long                                      m_bDrawOpenWorldDropOffText : 1;                  		// 0x000518 (0x0004) [0x08000000] 
	unsigned long                                      m_bDrawHealthBars : 1;                            		// 0x000518 (0x0004) [0x10000000] 
	unsigned long                                      m_bHealthBarsOnlyDamaged : 1;                     		// 0x000518 (0x0004) [0x20000000] 
	unsigned long                                      m_bHealthBarsOwnPawn : 1;                         		// 0x000518 (0x0004) [0x40000000] 
	unsigned long                                      m_bHealthBarsDistanceFade : 1;                    		// 0x000518 (0x0004) [0x80000000] 
	unsigned long                                      m_bHealthBarsTargeted : 1;                        		// 0x00051C (0x0004) [0x00000001] 
	unsigned long                                      m_bHealthBarsDetailed : 1;                        		// 0x00051C (0x0004) [0x00000002] 
	FMatrix                                            m_OldViewProjectionMatrix;                        		// 0x000520 (0x0040)              
	FVector3                                           m_OldDynamicOrigin;                               		// 0x000560 (0x000C)              
	DWORD                                              m_FadeColor;                                      		// 0x00056C (0x0004)              
	float                                              m_fPreviousFadeAlpha;                             		// 0x000570 (0x0004)              
	float                                              m_fTargetFadeAlpha;                               		// 0x000574 (0x0004)              
	float                                              m_fFadeAlpha;                                     		// 0x000578 (0x0004)              
	float                                              m_fFadeAlphaTime;                                 		// 0x00057C (0x0004)              
	float                                              m_fFadeAlphaDelay;                                		// 0x000580 (0x0004)              
	float                                              m_fTargetFadeAlphaTime;                           		// 0x000584 (0x0004)              
	class AcAPBPawn*                                   m_pVehiclePawn;                                   		// 0x000588 (0x0004)              
	float                                              m_LowX;                                           		// 0x00058C (0x0004)              
	float                                              m_LowY;                                           		// 0x000590 (0x0004)              
	float                                              m_HighX;                                          		// 0x000594 (0x0004)              
	float                                              m_HighY;                                          		// 0x000598 (0x0004)              
	float                                              m_ScreenRadius;                                   		// 0x00059C (0x0004)              
	float                                              m_AreaRatio;                                      		// 0x0005A0 (0x0004)              
	float                                              m_fLocatorOverlayDrawDist;                        		// 0x0005A4 (0x0004)              
	class AcWeapon*                                    TempWeapon;                                       		// 0x0005A8 (0x0004)              
	TArray<struct FString>                             m_NPCTypes;                                       		// 0x0005AC (0x000C)              
	TArray<struct FHealthInfo>                         m_HealthRollovers;                                		// 0x0005B8 (0x000C)              
	class AActor*                                      m_OldTarget;                                      		// 0x0005C4 (0x0004)              
	struct FString                                     m_sMessage;                                       		// 0x0005C8 (0x000C)              
	int                                                m_nMessageAlpha;                                  		// 0x0005D4 (0x0004)              
	class AcAPBPlayerController*                       m_PC;                                             		// 0x0005D8 (0x0004)              
	class AcAPBPlayerReplicationInfo*                  m_PRI;                                            		// 0x0005DC (0x0004)              
	class AcDebugHUD*                                  m_pDebugHUD;                                      		// 0x0005E0 (0x0004)              
	int                                                m_nKillerCharacterUID;                            		// 0x0005E4 (0x0004)              
	int                                                m_nWeaponTypeID;                                  		// 0x0005E8 (0x0004)              
	float                                              m_fDeathRespawnTime;                              		// 0x0005EC (0x0004)              
	double                                             m_fBombEndTime;                                   		// 0x0005F0 (0x0008)              
	float                                              m_fGuardEndTime;                                  		// 0x0005F8 (0x0004)              
	float                                              m_fArmedGuardTimerEndTime;                        		// 0x0005FC (0x0004)              
	float                                              m_fCheckPointTimerEndTime;                        		// 0x000600 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHUDBase");
		return pClassPointer;
	};

public:
	void SelfSay(struct FString Message,int DisplayTime);//APBGame.cHUDBase.SelfSay
	void DebugOnArmedGuardTimerStarted(float fTimeRemaining);//APBGame.cHUDBase.DebugOnArmedGuardTimerStarted
	void DrawDebugHUD();//APBGame.cHUDBase.DrawDebugHUD
	void LoadDistrictEntryScene();//APBGame.cHUDBase.LoadDistrictEntryScene
	void GetBoxComponentExtents(class UcBoxComponent* Bounds,class AActor* Target,float* LowX,float* LowY,float* HighX,float* HighY);//APBGame.cHUDBase.GetBoxComponentExtents
	void OnDeadNotification(int _nKillerCharacterUID,int _nWeaponTypeID,float _nRespawnTime,bool _bSuicide,bool _bSameSideKill);//APBGame.cHUDBase.OnDeadNotification
	void DebugDrawTakeoverBar();//APBGame.cHUDBase.DebugDrawTakeoverBar
	void LocalSelfSayTimer();//APBGame.cHUDBase.LocalSelfSayTimer
	void DrawCurrentItemInfo(class AcAPBPawn* PawnOwner,float X,float Y,float fWidth,float fHeight);//APBGame.cHUDBase.DrawCurrentItemInfo
	void ShowOwnName(bool bEnable);//APBGame.cHUDBase.ShowOwnName
	void DrawVehicleRepairHUD(FVector3 TopLeftPos);//APBGame.cHUDBase.DrawVehicleRepairHUD
	void DebugAccuracyBar();//APBGame.cHUDBase.DebugAccuracyBar
	void DrawConsciousnessAndArrestedInfo(class AcAPBPawn* Character);//APBGame.cHUDBase.DrawConsciousnessAndArrestedInfo
	void DrawConsciousnessAndArrestInfoBars();//APBGame.cHUDBase.DrawConsciousnessAndArrestInfoBars
	void SelfSayTimer();//APBGame.cHUDBase.SelfSayTimer
	void DebugDrawArmedGuardTimerHUD();//APBGame.cHUDBase.DebugDrawArmedGuardTimerHUD
	void OutputNPCIDs(class UCanvas* pr_pCanvas,FVector3 pr_vViewerLocation);//APBGame.cHUDBase.OutputNPCIDs
	void SetHUDSceneVisible(struct FString sDatastoreTag,bool bVisible);//APBGame.cHUDBase.SetHUDSceneVisible
	void DebugOnBombTimerStarted(float fTimeRemaining);//APBGame.cHUDBase.DebugOnBombTimerStarted
	void DrawVehicleSpawnBays();//APBGame.cHUDBase.DrawVehicleSpawnBays
	void DrawVehicleEntryMarkers();//APBGame.cHUDBase.DrawVehicleEntryMarkers
	void DrawBombTimerHUD();//APBGame.cHUDBase.DrawBombTimerHUD
	void DebugOnBombTimerStopped();//APBGame.cHUDBase.DebugOnBombTimerStopped
	void DrawDeathHUD();//APBGame.cHUDBase.DrawDeathHUD
	void ToggleDebugUnconsciousInfo();//APBGame.cHUDBase.ToggleDebugUnconsciousInfo
	void DrawOpenWorldTargetText();//APBGame.cHUDBase.DrawOpenWorldTargetText
	void DrawGroupMemberStats(class UcGroup* pGroup,float X,float Y,float xSize,float ySize);//APBGame.cHUDBase.DrawGroupMemberStats
	void DrawArrestedProgress(class AcAPBPawn* Character,float fXPos,float fYPos,float fWidth,float fHeight);//APBGame.cHUDBase.DrawArrestedProgress
	void DrawKnockedOutProgress(class AcAPBPawn* Character,float fXPos,float fYPos,float fWidth,float fHeight);//APBGame.cHUDBase.DrawKnockedOutProgress
	void DrawJobsBegin();//APBGame.cHUDBase.DrawJobsBegin
	void DrawOpenWorldDropOffText();//APBGame.cHUDBase.DrawOpenWorldDropOffText
	void NativeTick(float DeltaTime);//APBGame.cHUDBase.NativeTick
	void LocalSelfSay(struct FString Message,int DisplayTime);//APBGame.cHUDBase.LocalSelfSay
	void ToggleDebugHUD();//APBGame.cHUDBase.ToggleDebugHUD
	void DrawJobsEnd();//APBGame.cHUDBase.DrawJobsEnd
	void DebugDrawChevron(FVector3 ChevronLocation,bool Top,FVector3 Dimensions,DWORD Colour);//APBGame.cHUDBase.DebugDrawChevron
	void DrawMissionStats();//APBGame.cHUDBase.DrawMissionStats
	void PreRender();//APBGame.cHUDBase.PreRender
	void SelfSayFadeTimer();//APBGame.cHUDBase.SelfSayFadeTimer
	void DrawBombLocations();//APBGame.cHUDBase.DrawBombLocations
	void AddHealthRollover(class AActor* A,unsigned char Alpha);//APBGame.cHUDBase.AddHealthRollover
	void DrawLocatorOverlays();//APBGame.cHUDBase.DrawLocatorOverlays
	void DrawVehicleDebugInfo();//APBGame.cHUDBase.DrawVehicleDebugInfo
	void ClientSelfSay(struct FString Message,int DisplayTime);//APBGame.cHUDBase.ClientSelfSay
	class AcAPBVehicle* GetBestEnterableVehicle();//APBGame.cHUDBase.GetBestEnterableVehicle
	void PostRender();//APBGame.cHUDBase.PostRender
	void Tick(float DeltaTime);//APBGame.cHUDBase.Tick
	void ToggleMissionStats();//APBGame.cHUDBase.ToggleMissionStats
	void ToggleDebugWeaponInfo();//APBGame.cHUDBase.ToggleDebugWeaponInfo
	void DrawProgressBar(float xLeft,float yTop,float fWidth,float fHeight,float fProgress,float fPadding);//APBGame.cHUDBase.DrawProgressBar
	void DrawHealthBar(class AActor* Target,FVector3 Center,unsigned char Alpha);//APBGame.cHUDBase.DrawHealthBar
	void InitiateGameFlow();//APBGame.cHUDBase.InitiateGameFlow
	bool Project(FVector3 pr_2D,FVector3* pr_3D);//APBGame.cHUDBase.Project
	void OnAliveNotification();//APBGame.cHUDBase.OnAliveNotification
	void DrawHoldableItems(float X,float Y);//APBGame.cHUDBase.DrawHoldableItems
	void DrawPlayerNames();//APBGame.cHUDBase.DrawPlayerNames
	void NativeDrawHUD();//APBGame.cHUDBase.NativeDrawHUD
	void FlashAPBTimer();//APBGame.cHUDBase.FlashAPBTimer
	void DebugSetBombHUDEnabled(bool bEnabled);//APBGame.cHUDBase.DebugSetBombHUDEnabled
	void DebugOnArmedGuardTimerStopped();//APBGame.cHUDBase.DebugOnArmedGuardTimerStopped
	void DrawHUD();//APBGame.cHUDBase.DrawHUD
	void PostBeginPlay();//APBGame.cHUDBase.PostBeginPlay
	void GetBoxExtents(struct FBoxSphereBounds Bounds,float* LowX,float* LowY,float* HighX,float* HighY);//APBGame.cHUDBase.GetBoxExtents
	void DrawHealthBars();//APBGame.cHUDBase.DrawHealthBars
	void DebugDrawCross(FVector3 CrossLocation,int Size);//APBGame.cHUDBase.DebugDrawCross
	void NativePostBeginPlay();//APBGame.cHUDBase.NativePostBeginPlay
	void DrawTaskItemSpawnLocations();//APBGame.cHUDBase.DrawTaskItemSpawnLocations
	void DrawHealthRollovers();//APBGame.cHUDBase.DrawHealthRollovers
	void ToggleDeathDebugHUD();//APBGame.cHUDBase.ToggleDeathDebugHUD
	void ScreenFade(DWORD NewFadeColor,unsigned char FromAlpha,unsigned char ToAlpha,float fFadeTime);//APBGame.cHUDBase.ScreenFade
	void DrawCharacterLocation();//APBGame.cHUDBase.DrawCharacterLocation
	void ToggleDataStoreRefresh();//APBGame.cHUDBase.ToggleDataStoreRefresh
};
UClass* AcHUDBase::pClassPointer = NULL;

//0x000050 (0x00059C - 0x00054C)
//APBGameEngine[0x16EF76C0]
class UAPBGameEngine : public UGameEngine
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x00054C (0x0004)              
	class UcHostingServer*                             m_HostingServer;                                  		// 0x000550 (0x0004)              
	class UcHostingImageServer*                        m_HostingImageServer;                             		// 0x000554 (0x0004)              
	struct FString                                     m_sPrecacheObjectPath;                            		// 0x000558 (0x000C)              
	class UObject*                                     m_PrecacheObject;                                 		// 0x000564 (0x0004)              
	class UcAPBConsoleCommands*                        m_Commands;                                       		// 0x000568 (0x0004)              
	class UcTextureStreamingTracker*                   m_TextureStreamingTracker;                        		// 0x00056C (0x0004)              
	class UcAssetDescriptorManager*                    m_AssetDescriptorManager;                         		// 0x000570 (0x0004)              
	class UcWeatherManager*                            m_WeatherManager;                                 		// 0x000574 (0x0004)              
	unsigned long                                      m_bOnlyLoadDatabaseAtChangelist : 1;              		// 0x000578 (0x0004) [0x00000001] 
	unsigned long                                      m_bSupressLoadingScreens : 1;                     		// 0x000578 (0x0004) [0x00000002] 
	unsigned long                                      m_bIsSoak : 1;                                    		// 0x000578 (0x0004) [0x00000004] 
	class UcUILoadingScreenManager*                    m_LoadingMovieMgr;                                		// 0x00057C (0x0004)              
	class UcHUDMarkerManager*                          m_HUDMarkerManager;                               		// 0x000580 (0x0004)              
	class UcAudioManager*                              m_AudioManager;                                   		// 0x000584 (0x0004)              
	DWORD                                              m_pStaticGameInfo;                                		// 0x000588 (0x0004)              
	class AGolemSpawnerActor*                          m_GolemSpawner;                                   		// 0x00058C (0x0004)              
	class AcFlythroughSpawnerActor*                    m_FlythroughSpawner;                              		// 0x000590 (0x0004)              
	DWORD                                              m_NamedSharedMemory;                              		// 0x000594 (0x0004)              
	DWORD                                              m_pMultiMonitorSupport;                           		// 0x000598 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBGameEngine");
		return pClassPointer;
	};

public:
	void OnConnectFailed(int nError);//APBGame.APBGameEngine.OnConnectFailed
	void OnWorldCleanup();//APBGame.APBGameEngine.OnWorldCleanup
	class UcAudioManager* RetAudioManager();//APBGame.APBGameEngine.RetAudioManager
	void OnBeginPlay();//APBGame.APBGameEngine.OnBeginPlay
	void OnConnectSuccess();//APBGame.APBGameEngine.OnConnectSuccess
};
UClass* UAPBGameEngine::pClassPointer = NULL;

//0x000030 (0x000150 - 0x000120)
//APBGameViewportClient[0x16EF7590]
class UAPBGameViewportClient : public UGameViewportClient
{
public:
	FVector2                                           m_MainViewportOffset;                             		// 0x000120 (0x0008)              
	FVector2                                           m_MainViewportSize;                               		// 0x000128 (0x0008)              
	class UcGameFocusTrackerInteraction*               m_pFocusInteraction;                              		// 0x000130 (0x0004)              
	float                                              m_fCurrentInactivityTimeout;                      		// 0x000134 (0x0004)              
	float                                              m_fUserInactiveTime;                              		// 0x000138 (0x0004)              
	unsigned long                                      m_bUserCurrentlyInactive : 1;                     		// 0x00013C (0x0004) [0x00000001] 
	unsigned long                                      m_bForceFadeIn : 1;                               		// 0x00013C (0x0004) [0x00000002] 
	int                                                m_nEnsureFadeInStacks;                            		// 0x000140 (0x0004)              
	struct FScriptDelegate                             __HandleTick__Delegate;                           		// 0x000144 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBGameViewportClient");
		return pClassPointer;
	};

public:
	void SetSplitscreenConfiguration(unsigned char SplitType);//APBGame.APBGameViewportClient.SetSplitscreenConfiguration
	void ForceFadeIn();//APBGame.APBGameViewportClient.ForceFadeIn
	void SetMainViewport(FVector2 vOffset,FVector2 VSize);//APBGame.APBGameViewportClient.SetMainViewport
	void UpdateInactivityFade(float i_fDeltaTime);//APBGame.APBGameViewportClient.UpdateInactivityFade
	void HandleTick(float DeltaTime);//APBGame.APBGameViewportClient.HandleTick
	void SetCustomInteractionObject(class UInteraction* InInteraction);//APBGame.APBGameViewportClient.SetCustomInteractionObject
	void DrawTransition(class UCanvas* Canvas);//APBGame.APBGameViewportClient.DrawTransition
	int GetNumCustomInteractions();//APBGame.APBGameViewportClient.GetNumCustomInteractions
	void EndEnsureUIVisible();//APBGame.APBGameViewportClient.EndEnsureUIVisible
	void BeginEnsureUIVisible();//APBGame.APBGameViewportClient.BeginEnsureUIVisible
	class UClass* GetCustomInteractionClass(int InIndex);//APBGame.APBGameViewportClient.GetCustomInteractionClass
	void Tick(float DeltaTime);//APBGame.APBGameViewportClient.Tick
};
UClass* UAPBGameViewportClient::pClassPointer = NULL;

//0x000004 (0x000078 - 0x000074)
//cGameFocusTrackerInteraction[0x16EF7460]
class UcGameFocusTrackerInteraction : public UInteraction
{
public:
	unsigned long                                      m_bBlockInput : 1;                                		// 0x000074 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGameFocusTrackerInteraction");
		return pClassPointer;
	};
};
UClass* UcGameFocusTrackerInteraction::pClassPointer = NULL;

//0x00000C (0x0000C8 - 0x0000BC)
//cSeqAct_WaitForObjectStreaming[0x16EF7330]
class UcSeqAct_WaitForObjectStreaming : public USeqAct_Latent
{
public:
	float                                              Timeout;                                          		// 0x0000BC (0x0004)              
	unsigned long                                      bFlushWhenComplete : 1;                           		// 0x0000C0 (0x0004) [0x00000001] 
	float                                              m_fElapsedTime;                                   		// 0x0000C4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSeqAct_WaitForObjectStreaming");
		return pClassPointer;
	};
};
UClass* UcSeqAct_WaitForObjectStreaming::pClassPointer = NULL;

//0x000030 (0x000538 - 0x000508)
//cDebugHUD[0x16EF7200]
class AcDebugHUD : public AHUD
{
public:
	class AcAPBPlayerController*                       PC;                                               		// 0x000508 (0x0004)              
	unsigned long                                      m_bEnableTimeDebug : 1;                           		// 0x00050C (0x0004) [0x00000001] 
	unsigned long                                      m_bShowActorNetRates : 1;                         		// 0x00050C (0x0004) [0x00000002] 
	unsigned long                                      m_bDrawServerPlayerCount : 1;                     		// 0x00050C (0x0004) [0x00000004] 
	unsigned long                                      m_bShowTimeOfDay : 1;                             		// 0x00050C (0x0004) [0x00000008] 
	unsigned long                                      m_bShowRangefinder : 1;                           		// 0x00050C (0x0004) [0x00000010] 
	unsigned long                                      m_bShowHeat : 1;                                  		// 0x00050C (0x0004) [0x00000020] 
	unsigned long                                      m_bShowActiveCrimes : 1;                          		// 0x00050C (0x0004) [0x00000040] 
	unsigned long                                      m_bActivityMessagesShow : 1;                      		// 0x00050C (0x0004) [0x00000080] 
	float                                              m_fTimeDebugHorzScale;                            		// 0x000510 (0x0004)              
	float                                              m_fTimeDebugVertScale;                            		// 0x000514 (0x0004)              
	float                                              TIME_DEBUG_WIDTH;                                 		// 0x000518 (0x0004)              
	float                                              TIME_DEBUG_HEIGHT;                                		// 0x00051C (0x0004)              
	float                                              TIME_DEBUG_POS_X;                                 		// 0x000520 (0x0004)              
	float                                              TIME_DEBUG_POS_Y;                                 		// 0x000524 (0x0004)              
	int                                                m_nHeatInfoRows;                                  		// 0x000528 (0x0004)              
	float                                              m_fHeatInfoTimeout;                               		// 0x00052C (0x0004)              
	int                                                m_nActivityMessagesMax;                           		// 0x000530 (0x0004)              
	float                                              m_fActivityMessagesTimeout;                       		// 0x000534 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDebugHUD");
		return pClassPointer;
	};

public:
	void DrawActivityMessages();//APBGame.cDebugHUD.DrawActivityMessages
	void DrawActorProxies();//APBGame.cDebugHUD.DrawActorProxies
	void DrawHeat();//APBGame.cDebugHUD.DrawHeat
	void DrawRangefinder();//APBGame.cDebugHUD.DrawRangefinder
	void DrawActorNetRates();//APBGame.cDebugHUD.DrawActorNetRates
	void DrawServerPlayerCount();//APBGame.cDebugHUD.DrawServerPlayerCount
	void DrawActiveCrimes();//APBGame.cDebugHUD.DrawActiveCrimes
	void DrawTimeDebugBar();//APBGame.cDebugHUD.DrawTimeDebugBar
	void DrawHUD();//APBGame.cDebugHUD.DrawHUD
	void DrawTimeOfDay();//APBGame.cDebugHUD.DrawTimeOfDay
};
UClass* AcDebugHUD::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAPBConsoleCommands[0x16EF70D0]
class UcAPBConsoleCommands : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBConsoleCommands");
		return pClassPointer;
	};

public:
	void RegisterAPBConsoleCommands_Script(class UcConsoleCommandManager* manager);//APBGame.cAPBConsoleCommands.RegisterAPBConsoleCommands_Script
	void RegisterAPBConsoleCommands();//APBGame.cAPBConsoleCommands.RegisterAPBConsoleCommands
	bool Command_APBEchoScript(unsigned char eMode,TArray<struct FString> arguments,class UcConsoleCommandManager* manager);//APBGame.cAPBConsoleCommands.Command_APBEchoScript
};
UClass* UcAPBConsoleCommands::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAudioEnums[0x16EF6FA0]
class UcAudioEnums : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioEnums");
		return pClassPointer;
	};
};
UClass* UcAudioEnums::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//cAsyncPackageNotify[0x16EF6E70]
class UcAsyncPackageNotify : public UObject
{
public:
	struct FName                                       m_PackageName;                                    		// 0x000040 (0x0008)              
	unsigned long                                      m_bLoaded : 1;                                    		// 0x000048 (0x0004) [0x00000001] 
	TArray<struct FAsyncObjectData>                    m_Objects;                                        		// 0x00004C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAsyncPackageNotify");
		return pClassPointer;
	};

public:
	bool IsFinishedLoading();//APBGame.cAsyncPackageNotify.IsFinishedLoading
};
UClass* UcAsyncPackageNotify::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cAsyncPackages[0x16EF6D40]
class UcAsyncPackages : public UObject
{
public:
	TArray<class UcAsyncPackageNotify*>                m_Packages;                                       		// 0x000040 (0x000C)              
	unsigned long                                      m_bLoadingStarted : 1;                            		// 0x00004C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAsyncPackages");
		return pClassPointer;
	};

public:
	bool IsFinishedLoading();//APBGame.cAsyncPackages.IsFinishedLoading
	void StartLoading();//APBGame.cAsyncPackages.StartLoading
	void NotifyPackageLoaded(class UObject* pPackage);//APBGame.cAsyncPackages.NotifyPackageLoaded
	void Empty();//APBGame.cAsyncPackages.Empty
};
UClass* UcAsyncPackages::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//cAction_PauseOnTrackImport[0x16EF6C10]
class UcAction_PauseOnTrackImport : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_PauseOnTrackImport");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_PauseOnTrackImport.IsValidUISequenceObject
};
UClass* UcAction_PauseOnTrackImport::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//cAction_ResumeOnLeavingTrackImport[0x16EF6AE0]
class UcAction_ResumeOnLeavingTrackImport : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_ResumeOnLeavingTrackImport");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_ResumeOnLeavingTrackImport.IsValidUISequenceObject
};
UClass* UcAction_ResumeOnLeavingTrackImport::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//cAction_SetThemeMusicOn[0x16EF69B0]
class UcAction_SetThemeMusicOn : public USequenceAction
{
public:
	unsigned long                                      m_bNonLinearMusic : 1;                            		// 0x0000AC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_SetThemeMusicOn");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_SetThemeMusicOn.IsValidUISequenceObject
};
UClass* UcAction_SetThemeMusicOn::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//cAction_WwiseFadeInEnvironment[0x16EF6880]
class UcAction_WwiseFadeInEnvironment : public USequenceAction
{
public:
	float                                              m_fTimeInSeconds;                                 		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_WwiseFadeInEnvironment");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_WwiseFadeInEnvironment.IsValidUISequenceObject
};
UClass* UcAction_WwiseFadeInEnvironment::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//cAction_WwiseFadeOutEnvironment[0x16EF6750]
class UcAction_WwiseFadeOutEnvironment : public USequenceAction
{
public:
	unsigned long                                      m_bFadeOutPlayerMusic : 1;                        		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      m_bFadeOutAmbience : 1;                           		// 0x0000AC (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_WwiseFadeOutEnvironment");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_WwiseFadeOutEnvironment.IsValidUISequenceObject
};
UClass* UcAction_WwiseFadeOutEnvironment::pClassPointer = NULL;

//0x000024 (0x0000D0 - 0x0000AC)
//cAction_WwiseGetSwitch[0x16EF6620]
class UcAction_WwiseGetSwitch : public USequenceAction
{
public:
	struct FString                                     m_strSwitchGroup;                                 		// 0x0000AC (0x000C)              
	int                                                m_nGameObjectID;                                  		// 0x0000B8 (0x0004)              
	unsigned long                                      m_bTryToGetSwitchStateName : 1;                   		// 0x0000BC (0x0004) [0x00000001] 
	int                                                m_nSwitchStateID;                                 		// 0x0000C0 (0x0004)              
	struct FString                                     m_sSwitchStateName;                               		// 0x0000C4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_WwiseGetSwitch");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_WwiseGetSwitch.IsValidUISequenceObject
};
UClass* UcAction_WwiseGetSwitch::pClassPointer = NULL;

//0x00000C (0x0000B8 - 0x0000AC)
//cAction_WwisePost3DEvent[0x16EF64F0]
class UcAction_WwisePost3DEvent : public USequenceAction
{
public:
	struct FString                                     m_strEventName;                                   		// 0x0000AC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_WwisePost3DEvent");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_WwisePost3DEvent.IsValidUISequenceObject
};
UClass* UcAction_WwisePost3DEvent::pClassPointer = NULL;

//0x000010 (0x0000C4 - 0x0000B4)
//cAction_WwisePostEvent[0x16EF63C0]
class UcAction_WwisePostEvent : public UUIAction
{
public:
	struct FString                                     m_strEventName;                                   		// 0x0000B4 (0x000C)              
	int                                                m_nGameObjectID;                                  		// 0x0000C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_WwisePostEvent");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_WwisePostEvent.IsValidUISequenceObject
};
UClass* UcAction_WwisePostEvent::pClassPointer = NULL;

//0x00000C (0x0000B8 - 0x0000AC)
//cAction_WwisePostLooping3DEvent[0x16EF6290]
class UcAction_WwisePostLooping3DEvent : public USequenceAction
{
public:
	struct FString                                     m_strEventName;                                   		// 0x0000AC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_WwisePostLooping3DEvent");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_WwisePostLooping3DEvent.IsValidUISequenceObject
};
UClass* UcAction_WwisePostLooping3DEvent::pClassPointer = NULL;

//0x000040 (0x0000F4 - 0x0000B4)
//cAction_WwiseSetMouseSpeedRTPC[0x16EF6160]
class UcAction_WwiseSetMouseSpeedRTPC : public UUIAction
{
public:
	struct FString                                     m_strRTPCName;                                    		// 0x0000B4 (0x000C)              
	float                                              m_fScaleFactor;                                   		// 0x0000C0 (0x0004)              
	int                                                m_nGameObjectID;                                  		// 0x0000C4 (0x0004)              
	float                                              m_fInterpolationSpeed;                            		// 0x0000C8 (0x0004)              
	float                                              m_fMouseSpeedCalculationDelay;                    		// 0x0000CC (0x0004)              
	float                                              m_fRTPCMaxValue;                                  		// 0x0000D0 (0x0004)              
	float                                              m_fMouseLastX;                                    		// 0x0000D4 (0x0004)              
	float                                              m_fMouseLastY;                                    		// 0x0000D8 (0x0004)              
	float                                              m_fTotalMouseTravel;                              		// 0x0000DC (0x0004)              
	float                                              m_fCounter;                                       		// 0x0000E0 (0x0004)              
	int                                                m_nUpdateState;                                   		// 0x0000E4 (0x0004)              
	float                                              m_afInterpolatedNumberState[0x3];                 		// 0x0000E8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_WwiseSetMouseSpeedRTPC");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_WwiseSetMouseSpeedRTPC.IsValidUISequenceObject
};
UClass* UcAction_WwiseSetMouseSpeedRTPC::pClassPointer = NULL;

//0x000054 (0x000100 - 0x0000AC)
//cAction_WwiseSetRTPCValue[0x16EF6030]
class UcAction_WwiseSetRTPCValue : public USequenceAction
{
public:
	struct FString                                     m_strRTPCName;                                    		// 0x0000AC (0x000C)              
	float                                              m_fRTPCValue;                                     		// 0x0000B8 (0x0004)              
	int                                                m_nGameObjectID;                                  		// 0x0000BC (0x0004)              
	struct FString                                     m_strRTPCNamePrefix;                              		// 0x0000C0 (0x000C)              
	struct FString                                     m_strRTPCNameSufix;                               		// 0x0000CC (0x000C)              
	unsigned long                                      m_bIncremental : 1;                               		// 0x0000D8 (0x0004) [0x00000001] 
	float                                              m_fRangeMin;                                      		// 0x0000DC (0x0004)              
	float                                              m_fRangeMax;                                      		// 0x0000E0 (0x0004)              
	float                                              m_fInterpolationSpeed;                            		// 0x0000E4 (0x0004)              
	float                                              m_afInterpolatedNumberState[0x3];                 		// 0x0000E8 (0x000C)              
	struct FString                                     m_sFullRTPCName;                                  		// 0x0000F4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_WwiseSetRTPCValue");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_WwiseSetRTPCValue.IsValidUISequenceObject
};
UClass* UcAction_WwiseSetRTPCValue::pClassPointer = NULL;

//0x000020 (0x0000CC - 0x0000AC)
//cAction_WwiseSetSwitch[0x16EF5F00]
class UcAction_WwiseSetSwitch : public USequenceAction
{
public:
	struct FString                                     m_strSwitchGroup;                                 		// 0x0000AC (0x000C)              
	struct FString                                     m_strSwitchState;                                 		// 0x0000B8 (0x000C)              
	int                                                m_nGameObjectID;                                  		// 0x0000C4 (0x0004)              
	unsigned long                                      m_bRememberSwitchName : 1;                        		// 0x0000C8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAction_WwiseSetSwitch");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//APBGame.cAction_WwiseSetSwitch.IsValidUISequenceObject
};
UClass* UcAction_WwiseSetSwitch::pClassPointer = NULL;

//0x00001C (0x00007C - 0x000060)
//cMusicStudioThemeDescriptor[0x16EF5DD0]
class UcMusicStudioThemeDescriptor : public UcAssetCustomisation
{
public:
	TArray<unsigned char>                              m_aThemeData;                                     		// 0x000060 (0x000C)              
	struct FGuid                                       m_ThemeGuid;                                      		// 0x00006C (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMusicStudioThemeDescriptor");
		return pClassPointer;
	};
};
UClass* UcMusicStudioThemeDescriptor::pClassPointer = NULL;

//0x000024 (0x000284 - 0x000260)
//cAudioEmitterPositioningActor[0x16EF5CA0]
class AcAudioEmitterPositioningActor : public AActor
{
public:
	struct FString                                     m_sEmitterName;                                   		// 0x000260 (0x000C)              
	struct FString                                     m_sEventName;                                     		// 0x00026C (0x000C)              
	float                                              m_fCullDistance;                                  		// 0x000278 (0x0004)              
	unsigned long                                      m_bBypassEnvironment : 1;                         		// 0x00027C (0x0004) [0x00000001] 
	unsigned long                                      m_bBypassObstruction : 1;                         		// 0x00027C (0x0004) [0x00000002] 
	unsigned long                                      m_bIsCollectable : 1;                             		// 0x00027C (0x0004) [0x00000004] 
	int                                                m_nMangledUniqueEmitterID;                        		// 0x000280 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioEmitterPositioningActor");
		return pClassPointer;
	};
};
UClass* AcAudioEmitterPositioningActor::pClassPointer = NULL;

//0x0000AC (0x0000EC - 0x000040)
//cAudioManager[0x16EF5B70]
class UcAudioManager : public UObject
{
public:
	FVector3                                           m_DebugPos1;                                      		// 0x000040 (0x000C)              
	FVector3                                           m_DebugPos2;                                      		// 0x00004C (0x000C)              
	FVector3                                           m_DebugLineStartPos;                              		// 0x000058 (0x000C)              
	FVector3                                           m_DebugLineEndPos;                                		// 0x000064 (0x000C)              
	TArray<struct FCollisionDebugInfo>                 m_aCollisionDebugInfo;                            		// 0x000070 (0x000C)              
	float                                              m_fLastAudioThreadTime;                           		// 0x00007C (0x0004)              
	float                                              m_fLastAudioThreadInterval;                       		// 0x000080 (0x0004)              
	float                                              m_fLastAudioThreadPercent;                        		// 0x000084 (0x0004)              
	float                                              m_fMaxAudioThreadTime;                            		// 0x000088 (0x0004)              
	float                                              m_fMaxAudioThreadInterval;                        		// 0x00008C (0x0004)              
	float                                              m_fMaxAudioThreadPercent;                         		// 0x000090 (0x0004)              
	unsigned long                                      m_bShowGeometryDebug : 1;                         		// 0x000094 (0x0004) [0x00000001] 
	unsigned long                                      m_bShowObstructionDebug : 1;                      		// 0x000094 (0x0004) [0x00000002] 
	unsigned long                                      m_bShowCollisionDebug : 1;                        		// 0x000094 (0x0004) [0x00000004] 
	unsigned long                                      m_bShowTracerDebug : 1;                           		// 0x000094 (0x0004) [0x00000008] 
	unsigned long                                      m_bDrawConcaveOutlines : 1;                       		// 0x000094 (0x0004) [0x00000010] 
	unsigned long                                      m_bReloadConcaveOutlines : 1;                     		// 0x000094 (0x0004) [0x00000020] 
	unsigned long                                      m_bPrintPriorityDebug : 1;                        		// 0x000094 (0x0004) [0x00000040] 
	unsigned long                                      m_bMuteMasterVolumeWhenLosingFocus : 1;           		// 0x000094 (0x0004) [0x00000080] 
	unsigned long                                      m_bInitialised : 1;                               		// 0x000094 (0x0004) [0x00000100] 
	unsigned long                                      m_bGameHasFocus : 1;                              		// 0x000094 (0x0004) [0x00000200] 
	unsigned long                                      m_bAudioIsMuted : 1;                              		// 0x000094 (0x0004) [0x00000400] 
	unsigned long                                      m_bIsLocalPlayerInWorld : 1;                      		// 0x000094 (0x0004) [0x00000800] 
	struct FString                                     m_sMusicServerIpAddress;                          		// 0x000098 (0x000C)              
	int                                                m_sMusicServerPort;                               		// 0x0000A4 (0x0004)              
	int                                                m_nPrioritisedExplosions;                         		// 0x0000A8 (0x0004)              
	int                                                m_nPrioritisedVehicles;                           		// 0x0000AC (0x0004)              
	int                                                m_nPrioritisedMusic;                              		// 0x0000B0 (0x0004)              
	int                                                m_nPrioritisedEmitters;                           		// 0x0000B4 (0x0004)              
	int                                                m_nPrioritisedNPCS;                               		// 0x0000B8 (0x0004)              
	int                                                m_nPrioritisedContacts;                           		// 0x0000BC (0x0004)              
	int                                                m_nPrioritisedVFX;                                		// 0x0000C0 (0x0004)              
	int                                                m_nPrioritisedImpacts;                            		// 0x0000C4 (0x0004)              
	int                                                m_nPrioritisedScrapes;                            		// 0x0000C8 (0x0004)              
	float                                              m_fMSLPerformanceEnterRadius;                     		// 0x0000CC (0x0004)              
	float                                              m_fMSLPerformanceLeaveRadius;                     		// 0x0000D0 (0x0004)              
	float                                              m_fMSLPerformanceSpectatorCheckTimeInterval;      		// 0x0000D4 (0x0004)              
	int                                                m_nMSLPerformanceCheckpointThreshold;             		// 0x0000D8 (0x0004)              
	int                                                m_nAudioMaxNumVoices;                             		// 0x0000DC (0x0004)              
	float                                              m_fAudioVolumeThreshold;                          		// 0x0000E0 (0x0004)              
	class UcMusicStudioManager*                        m_pMusicStudioManager;                            		// 0x0000E4 (0x0004)              
	float                                              m_fMasterVolume;                                  		// 0x0000E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioManager");
		return pClassPointer;
	};

public:
	void PrintPriorityManagerDebugInfo();//APBGame.cAudioManager.PrintPriorityManagerDebugInfo
	void ScriptSimpleEvent(int nEventMangledWwiseID);//APBGame.cAudioManager.ScriptSimpleEvent
	void OnDistrictExit();//APBGame.cAudioManager.OnDistrictExit
	void SaveOutline();//APBGame.cAudioManager.SaveOutline
	void ChangeOutlineColor(int outlineID,int R,int G,int B);//APBGame.cAudioManager.ChangeOutlineColor
	void ToggleAmbientAudio();//APBGame.cAudioManager.ToggleAmbientAudio
	void OnLogoutComplete();//APBGame.cAudioManager.OnLogoutComplete
	void SetMasterVolume(float fVolume);//APBGame.cAudioManager.SetMasterVolume
	void ContactDialogueTestStop();//APBGame.cAudioManager.ContactDialogueTestStop
	void OnMetaGroupExit();//APBGame.cAudioManager.OnMetaGroupExit
	void OnClanExit();//APBGame.cAudioManager.OnClanExit
	void ScriptPositionalEvent(FVector3 vPosition,int nEventMangledWwiseID);//APBGame.cAudioManager.ScriptPositionalEvent
	void ReloadAudioGarageData();//APBGame.cAudioManager.ReloadAudioGarageData
	void SetDebugBitmapDrawLevel(int nLevel);//APBGame.cAudioManager.SetDebugBitmapDrawLevel
	class UcMusicStudioManager* RetMusicStudioManager();//APBGame.cAudioManager.RetMusicStudioManager
	void TogglePriorityManagerDebugInfo();//APBGame.cAudioManager.TogglePriorityManagerDebugInfo
	void ToggleGeometryDebug();//APBGame.cAudioManager.ToggleGeometryDebug
	void ReloadConcaveOutlines();//APBGame.cAudioManager.ReloadConcaveOutlines
	void SetVolumeThreshold(float fVolumeThreshold);//APBGame.cAudioManager.SetVolumeThreshold
	void OnWorldEnter();//APBGame.cAudioManager.OnWorldEnter
	void SetVehicleDebugType(int nType);//APBGame.cAudioManager.SetVehicleDebugType
	void SetTimeOfDay(float fTOD);//APBGame.cAudioManager.SetTimeOfDay
	void OnBeginPlay();//APBGame.cAudioManager.OnBeginPlay
	void TermMusicStudio();//APBGame.cAudioManager.TermMusicStudio
	void DrawDebugText(class UCanvas* pCanvas);//APBGame.cAudioManager.DrawDebugText
	void OnExitUI();//APBGame.cAudioManager.OnExitUI
	int ScriptGetMangledWwiseID(struct FString sIDName);//APBGame.cAudioManager.ScriptGetMangledWwiseID
	void SetPushToTalk(bool bOn);//APBGame.cAudioManager.SetPushToTalk
	void DrawHUD(class UCanvas* pCanvas);//APBGame.cAudioManager.DrawHUD
	void Term();//APBGame.cAudioManager.Term
	void SetPlayerInWorld(bool bInWorld);//APBGame.cAudioManager.SetPlayerInWorld
	void ContactDialogueTestStart(struct FString sContactName,struct FString sEventName,int nIntervalBetweenTriggers);//APBGame.cAudioManager.ContactDialogueTestStart
	void SetMasterMute(bool bMute);//APBGame.cAudioManager.SetMasterMute
	void ToggleTracerDebug();//APBGame.cAudioManager.ToggleTracerDebug
	void Init(class UObject* SourceObject,struct FString strAudioType);//APBGame.cAudioManager.Init
	void DrawOutlines(class UCanvas* pCanvas);//APBGame.cAudioManager.DrawOutlines
	void OnBeginLogout();//APBGame.cAudioManager.OnBeginLogout
	void SetMasterVolumeInternal();//APBGame.cAudioManager.SetMasterVolumeInternal
	void OnGroupExit();//APBGame.cAudioManager.OnGroupExit
	void CalculateOutlineHoles();//APBGame.cAudioManager.CalculateOutlineHoles
	void InitMusicStudio();//APBGame.cAudioManager.InitMusicStudio
	void OnEnterUI(bool bMuteMusic,bool bMuteEngineSounds);//APBGame.cAudioManager.OnEnterUI
	void TickMusicStudio(float fDeltaSeconds);//APBGame.cAudioManager.TickMusicStudio
	void ToggleDrawConcaveOutlines();//APBGame.cAudioManager.ToggleDrawConcaveOutlines
	void DrawDebugLines();//APBGame.cAudioManager.DrawDebugLines
	void TriggerMemDump();//APBGame.cAudioManager.TriggerMemDump
	void SetMaxNumVoices(int nMaxNumVoices);//APBGame.cAudioManager.SetMaxNumVoices
	void ToggleObstructionDebug();//APBGame.cAudioManager.ToggleObstructionDebug
	void Tick(float fDeltaSeconds);//APBGame.cAudioManager.Tick
	void SetPushForPrivacy(bool bOn);//APBGame.cAudioManager.SetPushForPrivacy
	void Configure(struct FString MusicServerIpAddress,int MusicServerPort);//APBGame.cAudioManager.Configure
	void ProjectileEvent(FVector3 vStartPos,FVector3 vEndPos,int nAudioMaterial,float fSilencerRange,int nMangledWwiseIDForWeapon,bool bLocallyFired,unsigned char nDamageAmount,bool bLocalPlayerHit);//APBGame.cAudioManager.ProjectileEvent
	void ToggleCollisionDebug();//APBGame.cAudioManager.ToggleCollisionDebug
};
UClass* UcAudioManager::pClassPointer = NULL;

//0x00000B (0x000064 - 0x000059)
//cAudioScriptInterface[0x16EF5A40]
class UcAudioScriptInterface : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	unsigned long                                      m_bInitialised : 1;                               		// 0x00005C (0x0004) [0x00000001] 
	DWORD                                              m_pAudioImplementation;                           		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioScriptInterface");
		return pClassPointer;
	};

public:
	void Tick(float fDeltaSeconds);//APBGame.cAudioScriptInterface.Tick
};
UClass* UcAudioScriptInterface::pClassPointer = NULL;

//0x000018 (0x00007C - 0x000064)
//cAudioCharacterInterface[0x16EF5910]
class UcAudioCharacterInterface : public UcAudioScriptInterface
{
public:
	class AcAPBPawn*                                   m_AttachedCharacter;                              		// 0x000064 (0x0004)              
	int                                                m_nADAAudioMaterial;                              		// 0x000068 (0x0004)              
	struct FString                                     m_sLastMaterial;                                  		// 0x00006C (0x000C)              
	int                                                m_nPreviousHealth;                                		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioCharacterInterface");
		return pClassPointer;
	};

public:
	void PlayModifierSFX(int nWwiseID);//APBGame.cAudioCharacterInterface.PlayModifierSFX
	void StartWindupEvent();//APBGame.cAudioCharacterInterface.StartWindupEvent
	void Term();//APBGame.cAudioCharacterInterface.Term
	void StopFullyAutoWeaponFireEvent();//APBGame.cAudioCharacterInterface.StopFullyAutoWeaponFireEvent
	void StartFullyAutoWeaponFireEvent(bool bAmmoLeft,float fFireInterval,float fSilencerRange,bool bRequiresStopAtEnd);//APBGame.cAudioCharacterInterface.StartFullyAutoWeaponFireEvent
	void StopWindupEvent();//APBGame.cAudioCharacterInterface.StopWindupEvent
	void ReceiveDeathEvent();//APBGame.cAudioCharacterInterface.ReceiveDeathEvent
	void Tick(float fDeltaSeconds);//APBGame.cAudioCharacterInterface.Tick
	void SetItemSwitchValue(int nMangledWwiseID);//APBGame.cAudioCharacterInterface.SetItemSwitchValue
	void StopSemiAutoWeaponFireEvent();//APBGame.cAudioCharacterInterface.StopSemiAutoWeaponFireEvent
	void Init(class UObject* SourceObject,struct FString strAudioType);//APBGame.cAudioCharacterInterface.Init
	void SetWindupSwitchValue(int nWwiseID);//APBGame.cAudioCharacterInterface.SetWindupSwitchValue
	void ReceiveWeaponFireEvent(bool bAmmoLeft,float fSilencerRange);//APBGame.cAudioCharacterInterface.ReceiveWeaponFireEvent
};
UClass* UcAudioCharacterInterface::pClassPointer = NULL;

//0x000008 (0x00006C - 0x000064)
//cAudioDisplayPointInterface[0x16EF57E0]
class UcAudioDisplayPointInterface : public UcAudioScriptInterface
{
public:
	class AcAudioDisplayPoint*                         m_AttachedDisplayPoint;                           		// 0x000064 (0x0004)              
	int                                                m_nMusicLocalID;                                  		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioDisplayPointInterface");
		return pClassPointer;
	};

public:
	void Init(class UObject* SourceObject);//APBGame.cAudioDisplayPointInterface.Init
	void SetTrack();//APBGame.cAudioDisplayPointInterface.SetTrack
	void SetTrackVolume(float fNewVolume);//APBGame.cAudioDisplayPointInterface.SetTrackVolume
	void Tick(float fDeltaSeconds);//APBGame.cAudioDisplayPointInterface.Tick
	void Term();//APBGame.cAudioDisplayPointInterface.Term
};
UClass* UcAudioDisplayPointInterface::pClassPointer = NULL;

//0x000008 (0x00006C - 0x000064)
//cAudioNPCInterface[0x16EF56B0]
class UcAudioNPCInterface : public UcAudioScriptInterface
{
public:
	class AActor*                                      m_AttachedActor;                                  		// 0x000064 (0x0004)              
	float                                              m_fTimeSinceDialogue;                             		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioNPCInterface");
		return pClassPointer;
	};

public:
	void Term();//APBGame.cAudioNPCInterface.Term
	void Tick(float fDeltaSeconds);//APBGame.cAudioNPCInterface.Tick
	void SetSwitches(struct FString sVoiceSwitchValue,struct FString sClothingFootwearSwitchValue,struct FString sClothingArmsSwitchValue,struct FString sClothingLegsSwitchValue,struct FString sClothingAccessoriesSwitchValue);//APBGame.cAudioNPCInterface.SetSwitches
	void Init(class UObject* SourceObject,struct FString strAudioType);//APBGame.cAudioNPCInterface.Init
};
UClass* UcAudioNPCInterface::pClassPointer = NULL;

//0x000004 (0x000068 - 0x000064)
//cAudioProjectileInterface[0x16EF5580]
class UcAudioProjectileInterface : public UcAudioScriptInterface
{
public:
	class AcAPBProjectile*                             m_AttachedProjectile;                             		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioProjectileInterface");
		return pClassPointer;
	};

public:
	void NotifyBounce(float fSpeed,int nMaterial);//APBGame.cAudioProjectileInterface.NotifyBounce
	void Init(class UObject* SourceObject);//APBGame.cAudioProjectileInterface.Init
	void Term();//APBGame.cAudioProjectileInterface.Term
	void StartAudioEvent(int nEventID);//APBGame.cAudioProjectileInterface.StartAudioEvent
	void Tick(float fDeltaSeconds);//APBGame.cAudioProjectileInterface.Tick
};
UClass* UcAudioProjectileInterface::pClassPointer = NULL;

//0x000004 (0x000068 - 0x000064)
//cAudioPropInterface[0x16EF5450]
class UcAudioPropInterface : public UcAudioScriptInterface
{
public:
	class AcProp*                                      m_AttachedProp;                                   		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioPropInterface");
		return pClassPointer;
	};

public:
	void Term();//APBGame.cAudioPropInterface.Term
	void Init(class UObject* SourceObject);//APBGame.cAudioPropInterface.Init
	void Tick(float fDeltaSeconds);//APBGame.cAudioPropInterface.Tick
};
UClass* UcAudioPropInterface::pClassPointer = NULL;

//0x000004 (0x000068 - 0x000064)
//cAudioTaskItemInterface[0x16EF5320]
class UcAudioTaskItemInterface : public UcAudioScriptInterface
{
public:
	class AcTaskItemAudioProxy*                        m_AttachedActor;                                  		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioTaskItemInterface");
		return pClassPointer;
	};

public:
	void SetTimedExplosiveActive(bool i_bActive);//APBGame.cAudioTaskItemInterface.SetTimedExplosiveActive
	void Init(class UObject* SourceObject,struct FString strAudioType);//APBGame.cAudioTaskItemInterface.Init
	void Term();//APBGame.cAudioTaskItemInterface.Term
	void SetAudioTrack();//APBGame.cAudioTaskItemInterface.SetAudioTrack
	void Tick(float fDeltaSeconds);//APBGame.cAudioTaskItemInterface.Tick
	void StopGiftBoxAudio();//APBGame.cAudioTaskItemInterface.StopGiftBoxAudio
	void UpdateOwner();//APBGame.cAudioTaskItemInterface.UpdateOwner
	void UpdateEffectType();//APBGame.cAudioTaskItemInterface.UpdateEffectType
	void StartGiftBoxAudio(struct FString i_sEvent,struct FString i_sStopEvent);//APBGame.cAudioTaskItemInterface.StartGiftBoxAudio
};
UClass* UcAudioTaskItemInterface::pClassPointer = NULL;

//0x000044 (0x0000A8 - 0x000064)
//cAudioVehicleInterface[0x16EF51F0]
class UcAudioVehicleInterface : public UcAudioScriptInterface
{
public:
	class AcAPBVehicle*                                m_AttachedVehicle;                                		// 0x000064 (0x0004)              
	unsigned long                                      m_bPlayerDriven : 1;                              		// 0x000068 (0x0004) [0x00000001] 
	int                                                m_nMangledWwiseIDDoorOpenFront;                   		// 0x00006C (0x0004)              
	int                                                m_nMangledWwiseIDDoorOpenRearSide;                		// 0x000070 (0x0004)              
	int                                                m_nMangledWwiseIDDoorOpenBack;                    		// 0x000074 (0x0004)              
	int                                                m_nMangledWwiseIDDoorCloseFront;                  		// 0x000078 (0x0004)              
	int                                                m_nMangledWwiseIDDoorCloseRearSide;               		// 0x00007C (0x0004)              
	int                                                m_nMangledWwiseIDDoorCloseBack;                   		// 0x000080 (0x0004)              
	int                                                m_nMangledWwiseID_LC_VehicleType;                 		// 0x000084 (0x0004)              
	int                                                m_nMangledWwiseID_DamageType;                     		// 0x000088 (0x0004)              
	int                                                m_nMusicLocalID;                                  		// 0x00008C (0x0004)              
	float                                              m_fTimeSinceIdle;                                 		// 0x000090 (0x0004)              
	float                                              m_fLastVehicleSpeed;                              		// 0x000094 (0x0004)              
	int                                                m_nPreviousWheelsOnGround[0x4];                   		// 0x000098 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAudioVehicleInterface");
		return pClassPointer;
	};

public:
	void EngineStart();//APBGame.cAudioVehicleInterface.EngineStart
	int GetMusicLocalID();//APBGame.cAudioVehicleInterface.GetMusicLocalID
	void SetTrack();//APBGame.cAudioVehicleInterface.SetTrack
	void Term();//APBGame.cAudioVehicleInterface.Term
	void DoorOpenEvent(int nVehicleSeatPositionIndex);//APBGame.cAudioVehicleInterface.DoorOpenEvent
	void EngineStop();//APBGame.cAudioVehicleInterface.EngineStop
	void SetCustomisationFlags(int nEngineType,int nExhaustType,int nTurboType,int nTransmissionType,int nDumpValveType,int nGearChangeType,int nHornType,int nSirenType,int nAmpType,int nSpeakerType);//APBGame.cAudioVehicleInterface.SetCustomisationFlags
	void SetCriticalDamageState(int nDamageState);//APBGame.cAudioVehicleInterface.SetCriticalDamageState
	void Init(class UObject* SourceObject);//APBGame.cAudioVehicleInterface.Init
	void SetLivingCityDriven(bool bLCDriven);//APBGame.cAudioVehicleInterface.SetLivingCityDriven
	void DoorCloseEvent(int nVehicleSeatPositionIndex);//APBGame.cAudioVehicleInterface.DoorCloseEvent
	void PostRenderTick();//APBGame.cAudioVehicleInterface.PostRenderTick
	void OutputDebugText3D(class AHUD* HUD,struct FString outString,FVector3 vPosition,float fR,float fG,float fB);//APBGame.cAudioVehicleInterface.OutputDebugText3D
	void SetVehicleTypeInfo(float fWheelForceThreshold,float fWheelForceMax,int nMangledWwiseIDDoorOpenFront,int nMangledWwiseIDDoorOpenRearSide,int nMangledWwiseIDDoorOpenBack,int nMangledWwiseIDDoorCloseFront,int nMangledWwiseIDDoorCloseRearSide,int nMangledWwiseIDDoorCloseBack,int nMangledWwiseIDSuspensionType,int nMangledWwiseID_LC_VehicleType,int nMangledWwiseID_DamageType,float fAudioEnclosednessMax);//APBGame.cAudioVehicleInterface.SetVehicleTypeInfo
	void Tick(float fDeltaSeconds);//APBGame.cAudioVehicleInterface.Tick
};
UClass* UcAudioVehicleInterface::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//cMusicStudioManager[0x16EF50C0]
class UcMusicStudioManager : public UObject
{
public:
	DWORD                                              m_pPimpl;                                         		// 0x000040 (0x0004)              
	unsigned long                                      m_bInitialized : 1;                               		// 0x000044 (0x0004) [0x00000001] 
	unsigned long                                      m_bTracklistRefresh : 1;                          		// 0x000044 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMusicStudioManager");
		return pClassPointer;
	};

public:
	void StopAllThemes();//APBGame.cMusicStudioManager.StopAllThemes
	bool PlayThemeByGuid(struct FGuid _guid,bool bUpdateCache);//APBGame.cMusicStudioManager.PlayThemeByGuid
	void UnlockInstruments();//APBGame.cMusicStudioManager.UnlockInstruments
	bool PlayCharacterNameTheme(struct FString sCharacterName);//APBGame.cMusicStudioManager.PlayCharacterNameTheme
	void LoadAllInstruments(bool bAsyncLoad);//APBGame.cMusicStudioManager.LoadAllInstruments
	void FlushInstruments();//APBGame.cMusicStudioManager.FlushInstruments
	bool PlayCharacterUIDTheme(int nCharacterUID,struct FGuid* playRequestGuid);//APBGame.cMusicStudioManager.PlayCharacterUIDTheme
	void OnCharacterNameReceived(int nCharacterUID,struct FString sCharacterName);//APBGame.cMusicStudioManager.OnCharacterNameReceived
	void MusicStudioGenericCommand(struct FString sParam1,struct FString sParam2,struct FString sParam3,struct FString sParam4);//APBGame.cMusicStudioManager.MusicStudioGenericCommand
};
UClass* UcMusicStudioManager::pClassPointer = NULL;

//0x000063 (0x0000BC - 0x000059)
//cStreamedComponentSet[0x16EF4F90]
class UcStreamedComponentSet : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	DWORD                                              VfTable_cObjectStreamingCallback;                 		// 0x00005C (0x0004)              
	TArray<struct FtStreamedComponent>                 m_aComponents;                                    		// 0x000060 (0x000C)              
	TArray<float>                                      m_afLODDistances;                                 		// 0x00006C (0x000C)              
	int                                                m_LODSelectionTag;                                		// 0x000078 (0x0004)              
	int                                                m_nChosenComponent;                               		// 0x00007C (0x0004)              
	int                                                m_nAttachedComponent;                             		// 0x000080 (0x0004)              
	int                                                m_nPrevComponent;                                 		// 0x000084 (0x0004)              
	unsigned long                                      m_bModifiedAndUnsaved : 1;                        		// 0x000088 (0x0004) [0x00000001] 
	unsigned long                                      m_bLocked : 1;                                    		// 0x000088 (0x0004) [0x00000002] 
	unsigned long                                      m_bAlwaysLoadOnServer : 1;                        		// 0x000088 (0x0004) [0x00000004] 
	unsigned long                                      m_bForceStreamUpdate : 1;                         		// 0x000088 (0x0004) [0x00000008] 
	unsigned long                                      m_bIsLOD0Drawn : 1;                               		// 0x000088 (0x0004) [0x00000010] 
	unsigned long                                      m_bIsLOD1Drawn : 1;                               		// 0x000088 (0x0004) [0x00000020] 
	float                                              m_fTransitionBlendDuration;                       		// 0x00008C (0x0004)              
	TArray<struct FcDeferredDetachment>                m_DeferredDetachments;                            		// 0x000090 (0x000C)              
	TArray<struct FcDeferredDetachment>                m_DeferredEvictions;                              		// 0x00009C (0x000C)              
	int                                                m_nBlendSourceComponent;                          		// 0x0000A8 (0x0004)              
	int                                                m_nBlendTargetComponent;                          		// 0x0000AC (0x0004)              
	TArray<class UMaterialInterface*>                  m_ReferencedMaterials;                            		// 0x0000B0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cStreamedComponentSet");
		return pClassPointer;
	};

public:
	void LockHighLODs();//APBGame.cStreamedComponentSet.LockHighLODs
	void ChooseComponent(int nIndex);//APBGame.cStreamedComponentSet.ChooseComponent
	void RequestComponent(int nIndex);//APBGame.cStreamedComponentSet.RequestComponent
	void UnlockHighLODs();//APBGame.cStreamedComponentSet.UnlockHighLODs
	bool IsLocked();//APBGame.cStreamedComponentSet.IsLocked
	void EvictComponent(int nIndex);//APBGame.cStreamedComponentSet.EvictComponent
};
UClass* UcStreamedComponentSet::pClassPointer = NULL;

//0x00003C (0x00007C - 0x000040)
//CharacterBuildHelper[0x16EF4E60]
class UCharacterBuildHelper : public UObject
{
public:
	class UAPBStudioCharacter*                         m_pStudio;                                        		// 0x000040 (0x0004)              
	class UcGolemRenderTarget*                         m_pRenderTarget;                                  		// 0x000044 (0x0004)              
	class UcGolemRenderTarget*                         m_pMaskRenderTarget;                              		// 0x000048 (0x0004)              
	class UcGolemRenderTarget*                         m_pTempRenderTarget;                              		// 0x00004C (0x0004)              
	int                                                m_nRenderTargetSize;                              		// 0x000050 (0x0004)              
	DWORD                                              m_pBodyColourStack;                               		// 0x000054 (0x0004)              
	DWORD                                              m_pPartColourStack;                               		// 0x000058 (0x0004)              
	DWORD                                              m_pBodyNormalStack;                               		// 0x00005C (0x0004)              
	DWORD                                              m_pPartNormalStack;                               		// 0x000060 (0x0004)              
	DWORD                                              m_pMeshDebugPage;                                 		// 0x000064 (0x0004)              
	DWORD                                              m_pSeamExtDebugPage;                              		// 0x000068 (0x0004)              
	DWORD                                              m_pDiffuseMapDebugPage;                           		// 0x00006C (0x0004)              
	DWORD                                              m_pNormalMapDebugPage;                            		// 0x000070 (0x0004)              
	DWORD                                              m_pSummaryDebugPage;                              		// 0x000074 (0x0004)              
	float                                              m_fBuildTime;                                     		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.CharacterBuildHelper");
		return pClassPointer;
	};
};
UClass* UCharacterBuildHelper::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//VehicleBuildHelper[0x16EF4D30]
class UVehicleBuildHelper : public UObject
{
public:
	class UAPBStudioVehicle*                           m_pStudio;                                        		// 0x000040 (0x0004)              
	DWORD                                              m_pExteriorDebugPage;                             		// 0x000044 (0x0004)              
	DWORD                                              m_pInteriorDebugPage;                             		// 0x000048 (0x0004)              
	DWORD                                              m_pGlassDebugPage;                                		// 0x00004C (0x0004)              
	DWORD                                              m_pWheelsDebugPage;                               		// 0x000050 (0x0004)              
	DWORD                                              m_pMeshDebugPage;                                 		// 0x000054 (0x0004)              
	DWORD                                              m_pSeamExtDebugPage;                              		// 0x000058 (0x0004)              
	DWORD                                              m_pSummaryDebugPage;                              		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.VehicleBuildHelper");
		return pClassPointer;
	};
};
UClass* UVehicleBuildHelper::pClassPointer = NULL;

//0x00009C (0x0000DC - 0x000040)
//cUILoadingScreenManager[0x16EF4C00]
class UcUILoadingScreenManager : public UObject
{
public:
	DWORD                                              VfTable_FCallbackEventDevice;                     		// 0x000040 (0x0004)              
	DWORD                                              VfTable_FTickableObject;                          		// 0x000044 (0x0004)              
	struct FString                                     m_sLoadingMovie;                                  		// 0x000048 (0x000C)              
	unsigned long                                      m_bIsTickEnabled : 1;                             		// 0x000054 (0x0004) [0x00000001] 
	unsigned long                                      m_bIsLoadingScreenRendering : 1;                  		// 0x000054 (0x0004) [0x00000002] 
	int                                                m_nPrevClientHostingState;                        		// 0x000058 (0x0004)              
	struct FString                                     m_sCurrentPackageName;                            		// 0x00005C (0x000C)              
	struct FString                                     m_sPrevPackageName;                               		// 0x000068 (0x000C)              
	int                                                m_nDistrictUID;                                   		// 0x000074 (0x0004)              
	struct FString                                     m_sLMM_DistrictName;                              		// 0x000078 (0x000C)              
	struct FString                                     m_sLMM_LoadingText;                               		// 0x000084 (0x000C)              
	struct FString                                     m_sLMM_HintText;                                  		// 0x000090 (0x000C)              
	TArray<int>                                        m_anHintList;                                     		// 0x00009C (0x000C)              
	int                                                m_nHintIndex;                                     		// 0x0000A8 (0x0004)              
	double                                             m_dLastChangeTime;                                		// 0x0000AC (0x0008)              
	class UFont*                                       m_pLMM_Loading_Font;                              		// 0x0000B4 (0x0004)              
	class UFont*                                       m_pLMM_HintText_Font;                             		// 0x0000B8 (0x0004)              
	int                                                m_nCurrentLoadingMovieConfig;                     		// 0x0000BC (0x0004)              
	TArray<struct FLoadingMovieConfig>                 m_aPlaylist;                                      		// 0x0000C0 (0x000C)              
	FVector2                                           m_LoadingHeaderPosition;                          		// 0x0000CC (0x0008)              
	FVector2                                           m_LoadingHintPosition;                            		// 0x0000D4 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cUILoadingScreenManager");
		return pClassPointer;
	};
};
UClass* UcUILoadingScreenManager::pClassPointer = NULL;

//0x000004 (0x000088 - 0x000084)
//cMaterialInstanceDebugHighlight[0x16EF4AD0]
class UcMaterialInstanceDebugHighlight : public UMaterialInstance
{
public:
	DWORD                                              m_HighlightColor;                                 		// 0x000084 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMaterialInstanceDebugHighlight");
		return pClassPointer;
	};
};
UClass* UcMaterialInstanceDebugHighlight::pClassPointer = NULL;

//0x000093 (0x0000F8 - 0x000065)
//cAPBUberPostProcessEffect[0x16EF49A0]
class UcAPBUberPostProcessEffect : public UPostProcessEffect
{
public:
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	struct FBloomParameters                            BloomParameters;                                  		// 0x000068 (0x000C)              
	struct FDOFParameters                              DOFParameters;                                    		// 0x000074 (0x0020)              
	struct FToneMappingParameters                      ToneMappingParameters;                            		// 0x000094 (0x001C)              
	struct FColourAdjustParameters                     ColourAdjustParameters;                           		// 0x0000B0 (0x002C)              
	int                                                VisualiseRenderTarget;                            		// 0x0000DC (0x0004)              
	int                                                RenderTargetTapPoint;                             		// 0x0000E0 (0x0004)              
	unsigned long                                      bVisualiseAlpha : 1;                              		// 0x0000E4 (0x0004) [0x00000001] 
	struct FLinearColor                                RTVisScale;                                       		// 0x0000E8 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBUberPostProcessEffect");
		return pClassPointer;
	};
};
UClass* UcAPBUberPostProcessEffect::pClassPointer = NULL;

//0x00000F (0x000074 - 0x000065)
//cUIBlurPostProcessEffect[0x16EF4870]
class UcUIBlurPostProcessEffect : public UPostProcessEffect
{
public:
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	float                                              fBlurStrength;                                    		// 0x000068 (0x0004)              
	int                                                VisualiseRenderTarget;                            		// 0x00006C (0x0004)              
	int                                                RenderTargetTapPoint;                             		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cUIBlurPostProcessEffect");
		return pClassPointer;
	};
};
UClass* UcUIBlurPostProcessEffect::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//cPrecacheObject[0x16EF4740]
class UcPrecacheObject : public UObject
{
public:
	TArray<class UObject*>                             m_aObjects;                                       		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPrecacheObject");
		return pClassPointer;
	};
};
UClass* UcPrecacheObject::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cHUDMessageTypes[0x16EF4610]
class UcHUDMessageTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHUDMessageTypes");
		return pClassPointer;
	};
};
UClass* UcHUDMessageTypes::pClassPointer = NULL;

//0x000009 (0x000049 - 0x000040)
//APBAnimNotify_FootstepVFX[0x16EF44E0]
class UAPBAnimNotify_FootstepVFX : public UAnimNotify
{
public:
	struct FName                                       Bone;                                             		// 0x000040 (0x0008)              
	unsigned char                                      Weight;                                           		// 0x000048 (0x0001)              PROPERTY: FootstepWeight

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBAnimNotify_FootstepVFX");
		return pClassPointer;
	};
};
UClass* UAPBAnimNotify_FootstepVFX::pClassPointer = NULL;

//0x000018 (0x000070 - 0x000058)
//APBParticleFoldFloat[0x16EF43B0]
class UAPBParticleFoldFloat : public UDistributionFloatConstant
{
public:
	TArray<class UDistributionFloat*>                  Distributions;                                    		// 0x000058 (0x000C)              
	unsigned char                                      FoldOperation;                                    		// 0x000064 (0x0001)              PROPERTY: FloatFoldOp
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	float                                              InitialValue;                                     		// 0x000068 (0x0004)              
	float                                              ThresholdToZero;                                  		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBParticleFoldFloat");
		return pClassPointer;
	};
};
UClass* UAPBParticleFoldFloat::pClassPointer = NULL;

//0x00002B (0x000090 - 0x000065)
//APBParticleFoldVector[0x16EF4280]
class UAPBParticleFoldVector : public UDistributionVectorConstant
{
public:
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	TArray<class UDistributionVector*>                 Distributions;                                    		// 0x000068 (0x000C)              
	unsigned char                                      FoldOperation;                                    		// 0x000074 (0x0001)              PROPERTY: VectorFoldOp
	unsigned char                                      _0x000075[0x3];                                   		// 0x000075 (0x0003) MISSED OFFSET
	FVector3                                           InitialValue;                                     		// 0x000078 (0x000C)              
	FVector3                                           ThresholdToZero;                                  		// 0x000084 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBParticleFoldVector");
		return pClassPointer;
	};
};
UClass* UAPBParticleFoldVector::pClassPointer = NULL;

//0x000038 (0x000090 - 0x000058)
//APBParticleParameterFloat[0x16EF4150]
class UAPBParticleParameterFloat : public UDistributionFloatConstant
{
public:
	struct FString                                     ParentProperty;                                   		// 0x000058 (0x000C)              
	unsigned char                                      m_parentPropertyType;                             		// 0x000064 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	unsigned long                                      bAbsoluteOnly : 1;                                		// 0x000068 (0x0004) [0x00000001] 
	unsigned long                                      bClampToRange : 1;                                		// 0x000068 (0x0004) [0x00000002] 
	float                                              PropertyBias;                                     		// 0x00006C (0x0004)              
	float                                              PropertyScale;                                    		// 0x000070 (0x0004)              
	float                                              ClampMinimum;                                     		// 0x000074 (0x0004)              
	float                                              ClampMaximum;                                     		// 0x000078 (0x0004)              
	float                                              m_lastUpdateTime;                                 		// 0x00007C (0x0004)              
	float                                              m_lastUpdateValue;                                		// 0x000080 (0x0004)              
	TArray<int>                                        m_offsetPath;                                     		// 0x000084 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBParticleParameterFloat");
		return pClassPointer;
	};
};
UClass* UAPBParticleParameterFloat::pClassPointer = NULL;

//0x000063 (0x0000C8 - 0x000065)
//APBParticleParameterVector[0x16EF4020]
class UAPBParticleParameterVector : public UDistributionVectorConstant
{
public:
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	struct FString                                     ParentProperty;                                   		// 0x000068 (0x000C)              
	unsigned char                                      m_parentPropertyType;                             		// 0x000074 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000075[0x3];                                   		// 0x000075 (0x0003) MISSED OFFSET
	unsigned long                                      bAbsoluteOnly : 1;                                		// 0x000078 (0x0004) [0x00000001] 
	unsigned long                                      bClampToRange : 1;                                		// 0x000078 (0x0004) [0x00000002] 
	FVector3                                           PropertyBias;                                     		// 0x00007C (0x000C)              
	FVector3                                           PropertyScale;                                    		// 0x000088 (0x000C)              
	FVector3                                           ClampMinimum;                                     		// 0x000094 (0x000C)              
	FVector3                                           ClampMaximum;                                     		// 0x0000A0 (0x000C)              
	float                                              m_lastUpdateTime;                                 		// 0x0000AC (0x0004)              
	FVector3                                           m_lastUpdateValue;                                		// 0x0000B0 (0x000C)              
	TArray<int>                                        m_offsetPath;                                     		// 0x0000BC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBParticleParameterVector");
		return pClassPointer;
	};
};
UClass* UAPBParticleParameterVector::pClassPointer = NULL;

//0x000024 (0x00007C - 0x000058)
//APBParticleParameterVehicle[0x16EF3EF0]
class UAPBParticleParameterVehicle : public UDistributionFloatConstant
{
public:
	float                                              ScaleLatSlipAngle;                                		// 0x000058 (0x0004)              
	float                                              ScaleLongSlipRatio;                               		// 0x00005C (0x0004)              
	unsigned long                                      SpeedSignIndicatesDirection : 1;                  		// 0x000060 (0x0004) [0x00000001] 
	unsigned long                                      SpeedAffectsSlip : 1;                             		// 0x000060 (0x0004) [0x00000002] 
	unsigned long                                      PreviewHandbrake : 1;                             		// 0x000060 (0x0004) [0x00000004] 
	float                                              BiasSpeed;                                        		// 0x000064 (0x0004)              
	float                                              ScaleSpeed;                                       		// 0x000068 (0x0004)              
	float                                              HandbrakeMultiplier;                              		// 0x00006C (0x0004)              
	float                                              MinimumOutput;                                    		// 0x000070 (0x0004)              
	float                                              MaximumOutput;                                    		// 0x000074 (0x0004)              
	float                                              FinalScale;                                       		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBParticleParameterVehicle");
		return pClassPointer;
	};
};
UClass* UAPBParticleParameterVehicle::pClassPointer = NULL;

//0x00000C (0x00026C - 0x000260)
//cAPBTransientVFXManager[0x16EF3DC0]
class AcAPBTransientVFXManager : public AActor
{
public:
	TArray<class AEmitter*>                            m_poolEmitter;                                    		// 0x000260 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBTransientVFXManager");
		return pClassPointer;
	};

public:
	class AEmitter* CreateEmitter(struct FString systemName,FVector3 someLocation,FRotator someRotation,class AActor* someTarget);//APBGame.cAPBTransientVFXManager.CreateEmitter
	int PoolCount();//APBGame.cAPBTransientVFXManager.PoolCount
	class UParticleSystem* LoadSystem(struct FString systemName);//APBGame.cAPBTransientVFXManager.LoadSystem
	class AEmitter* SpawnEmitter();//APBGame.cAPBTransientVFXManager.SpawnEmitter
	void ReturnToPool(class AEmitter* i_pEmitter);//APBGame.cAPBTransientVFXManager.ReturnToPool
};
UClass* AcAPBTransientVFXManager::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iModifiable[0x16EF3C90]
class UiModifiable : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iModifiable");
		return pClassPointer;
	};
};
UClass* UiModifiable::pClassPointer = NULL;

//0x000014 (0x000274 - 0x000260)
//cWaypoint[0x16EF3B60]
class AcWaypoint : public AActor
{
public:
	int                                                m_HUDMarkerID;                                    		// 0x000260 (0x0004)              
	struct FEnumeratedName                             m_eHUDMarkerType;                                 		// 0x000264 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWaypoint");
		return pClassPointer;
	};

public:
	void NativePostBeginPlay();//APBGame.cWaypoint.NativePostBeginPlay
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cWaypoint.Touch
	void PostBeginPlay();//APBGame.cWaypoint.PostBeginPlay
	void Destroyed();//APBGame.cWaypoint.Destroyed
};
UClass* AcWaypoint::pClassPointer = NULL;

//0x0000FC (0x00013C - 0x000040)
//cWeatherManager[0x16EF3A30]
class UcWeatherManager : public UcWeatherManagerBase
{
public:
	struct FString                                     m_DefaultSettingsName;                            		// 0x000040 (0x000C)              
	class UcWeatherSettings*                           m_DefaultSettings;                                		// 0x00004C (0x0004)              
	TArray<class UHeightFogComponent*>                 m_FogComponents;                                  		// 0x000050 (0x000C)              
	TArray<class ULightComponent*>                     m_LightComponents;                                		// 0x00005C (0x000C)              
	int                                                m_nWeatherOverride;                               		// 0x000068 (0x0004)              
	unsigned long                                      m_bTransitionOverride : 1;                        		// 0x00006C (0x0004) [0x00000001] 
	unsigned long                                      bCachedPostProcessValid : 1;                      		// 0x00006C (0x0004) [0x00000002] 
	struct FPostProcessSettings                        CachedPostProcessSettings;                        		// 0x000070 (0x00CC)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWeatherManager");
		return pClassPointer;
	};
};
UClass* UcWeatherManager::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//cWeatherSettings[0x16EF3900]
class UcWeatherSettings : public UObject
{
public:
	TArray<struct FcWeatherType>                       Weather;                                          		// 0x000040 (0x000C)              
	TArray<class UMaterialInstanceConstant*>           MaterialInstances;                                		// 0x00004C (0x000C)              
	struct FcWeatherConstants                          Constants;                                        		// 0x000058 (0x000C)              
	float                                              TransitionTime;                                   		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cWeatherSettings");
		return pClassPointer;
	};
};
UClass* UcWeatherSettings::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSDDMissionJustification[0x16EF37D0]
class UcSDDMissionJustification : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSDDMissionJustification");
		return pClassPointer;
	};
};
UClass* UcSDDMissionJustification::pClassPointer = NULL;

//0x000034 (0x0002D0 - 0x00029C)
//cOpenWorldDropOff[0x16EF36A0]
class AcOpenWorldDropOff : public AcAPBTriggerVolume
{
public:
	struct FEnumeratedName                             m_eDropOffType;                                   		// 0x00029C (0x0010)              
	TArray<class AcAPBVehicleBase*>                    m_aPendingVehicles;                               		// 0x0002AC (0x000C)              
	int                                                m_nHUDMarkerID;                                   		// 0x0002B8 (0x0004)              
	TArray<struct FtPlayerDropOffPointsInfo>           m_aPlayerPoints;                                  		// 0x0002BC (0x000C)              
	unsigned long                                      m_bIsReplenishingPoints : 1;                      		// 0x0002C8 (0x0004) [0x00000001] 
	DWORD                                              m_pSddOpenWorldDropOff;                           		// 0x0002CC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cOpenWorldDropOff");
		return pClassPointer;
	};

public:
	void UpdatePointReplenishment();//APBGame.cOpenWorldDropOff.UpdatePointReplenishment
	void PostBeginPlay();//APBGame.cOpenWorldDropOff.PostBeginPlay
	void PostBeginPlayNative();//APBGame.cOpenWorldDropOff.PostBeginPlayNative
	void NotifyActorEnteredCheckpoint(class AActor* Other);//APBGame.cOpenWorldDropOff.NotifyActorEnteredCheckpoint
	void NotifyOpenWorldDropOffPlayerEvent(int nMessage,int nParam,class AActor* Emitter);//APBGame.cOpenWorldDropOff.NotifyOpenWorldDropOffPlayerEvent
	void NotifyActorLeftCheckpoint(class AActor* Other);//APBGame.cOpenWorldDropOff.NotifyActorLeftCheckpoint
	struct FLinearColor GetColour();//APBGame.cOpenWorldDropOff.GetColour
	void ProcessPendingVehicleDeliveries();//APBGame.cOpenWorldDropOff.ProcessPendingVehicleDeliveries
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cOpenWorldDropOff.Touch
	void UnTouch(class AActor* Other);//APBGame.cOpenWorldDropOff.UnTouch
};
UClass* AcOpenWorldDropOff::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cLCSDDTypes[0x16EF3570]
class UcLCSDDTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cLCSDDTypes");
		return pClassPointer;
	};
};
UClass* UcLCSDDTypes::pClassPointer = NULL;

//0x000004 (0x0002A0 - 0x00029C)
//cPlayerVehicleSpawnBay[0x16EF3440]
class AcPlayerVehicleSpawnBay : public AcAPBTriggerVolume
{
public:
	class AcPlayerVehicleSpawnDirection*               m_SpawnDirection;                                 		// 0x00029C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerVehicleSpawnBay");
		return pClassPointer;
	};
};
UClass* AcPlayerVehicleSpawnBay::pClassPointer = NULL;

//0x000030 (0x0002CC - 0x00029C)
//cPlayerVehicleSpawnZone[0x16EF3310]
class AcPlayerVehicleSpawnZone : public AcAPBTriggerVolume
{
public:
	DWORD                                              VfTable_IUseInterface;                            		// 0x00029C (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x0002A0 (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x0002A1[0x3];                                   		// 0x0002A1 (0x0003) MISSED OFFSET
	int                                                m_nHUDMarkerID;                                   		// 0x0002A4 (0x0004)              
	TArray<class AcPlayerVehicleSpawnBay*>             m_aSpawnBays;                                     		// 0x0002A8 (0x000C)              
	TArray<class AcPlayerVehicleSpawnInteractionPoint*> m_aSpawnInteractionPoints;                        		// 0x0002B4 (0x000C)              
	int                                                m_nRandomSeed;                                    		// 0x0002C0 (0x0004)              
	unsigned long                                      m_bAllowDirectInteractionWithVolume : 1;          		// 0x0002C4 (0x0004) [0x00000001] 
	class UcAPBUsableComponent*                        m_UseComponent;                                   		// 0x0002C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerVehicleSpawnZone");
		return pClassPointer;
	};

public:
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cPlayerVehicleSpawnZone.Touch
	struct FLinearColor GetColour();//APBGame.cPlayerVehicleSpawnZone.GetColour
	void NotifyTouch(class AActor* Other);//APBGame.cPlayerVehicleSpawnZone.NotifyTouch
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cPlayerVehicleSpawnZone.IsCSASupported
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cPlayerVehicleSpawnZone.EndUse
	unsigned char TrySpawnDeployedVehicle(class AcAPBPlayerController* pSpawningPlayer);//APBGame.cPlayerVehicleSpawnZone.TrySpawnDeployedVehicle
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cPlayerVehicleSpawnZone.BeginUse
	unsigned char RetFaction();//APBGame.cPlayerVehicleSpawnZone.RetFaction
	unsigned char CheckCanSpawnDeployedVehicle(class AcAPBPlayerController* pSpawningPlayer);//APBGame.cPlayerVehicleSpawnZone.CheckCanSpawnDeployedVehicle
};
UClass* AcPlayerVehicleSpawnZone::pClassPointer = NULL;

//0x000011 (0x0002B9 - 0x0002A8)
//cPlayerVehicleSpawnInteractionPoint[0x16EF31E0]
class AcPlayerVehicleSpawnInteractionPoint : public AcInteractiveDynamicSMActor
{
public:
	DWORD                                              VfTable_IiAmmoSupplier;                           		// 0x0002A8 (0x0004)              
	class AcPlayerVehicleSpawnZone*                    m_pSpawnZone;                                     		// 0x0002AC (0x0004)              
	int                                                m_nHUDMarkerID;                                   		// 0x0002B0 (0x0004)              
	class UcAmmoDepotComponent*                        m_AmmoDepotComponent;                             		// 0x0002B4 (0x0004)              
	unsigned char                                      m_eFaction;                                       		// 0x0002B8 (0x0001)              PROPERTY: etFaction

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerVehicleSpawnInteractionPoint");
		return pClassPointer;
	};

public:
	int AmmoClipsLeft();//APBGame.cPlayerVehicleSpawnInteractionPoint.AmmoClipsLeft
	unsigned char CheckCanPlayerAccessInventory(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cPlayerVehicleSpawnInteractionPoint.CheckCanPlayerAccessInventory
	float RetAmmoResupplyRange();//APBGame.cPlayerVehicleSpawnInteractionPoint.RetAmmoResupplyRange
	unsigned char CheckCanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cPlayerVehicleSpawnInteractionPoint.CheckCanResupplyPlayer
	void BeginResupply(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType);//APBGame.cPlayerVehicleSpawnInteractionPoint.BeginResupply
	class AActor* RetAmmoSupplierActor();//APBGame.cPlayerVehicleSpawnInteractionPoint.RetAmmoSupplierActor
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cPlayerVehicleSpawnInteractionPoint.BeginUse
	void NotifyConsumerAttributesModified(class UiAmmoConsumer* pConsumer);//APBGame.cPlayerVehicleSpawnInteractionPoint.NotifyConsumerAttributesModified
	void NotifySupplierAttributesModified();//APBGame.cPlayerVehicleSpawnInteractionPoint.NotifySupplierAttributesModified
	bool IsRangeBasedAmmoSupplier();//APBGame.cPlayerVehicleSpawnInteractionPoint.IsRangeBasedAmmoSupplier
	bool CanPlayerAccessInventory(class AcAPBPlayerController* pPlayer);//APBGame.cPlayerVehicleSpawnInteractionPoint.CanPlayerAccessInventory
	class UcAmmoDepotComponent* RetAmmoDepotComponent();//APBGame.cPlayerVehicleSpawnInteractionPoint.RetAmmoDepotComponent
	void CancelAllResupplyOperations();//APBGame.cPlayerVehicleSpawnInteractionPoint.CancelAllResupplyOperations
	bool CanResupplyPlayer(class AcAPBPlayerController* pPlayer,unsigned char eWeaponType,bool bCheckRange);//APBGame.cPlayerVehicleSpawnInteractionPoint.CanResupplyPlayer
	void BeginInventoryAccess(class AcAPBPlayerController* pPlayer,unsigned char eRequestedType);//APBGame.cPlayerVehicleSpawnInteractionPoint.BeginInventoryAccess
	bool IsLimitedAmmoSupplier();//APBGame.cPlayerVehicleSpawnInteractionPoint.IsLimitedAmmoSupplier
	void EndInventoryAccess(class AcAPBPlayerController* pPlayer,bool bCancel);//APBGame.cPlayerVehicleSpawnInteractionPoint.EndInventoryAccess
	FVector3 RetAmmoResupplyLocation();//APBGame.cPlayerVehicleSpawnInteractionPoint.RetAmmoResupplyLocation
	bool IsResupplyingPlayer(class AcAPBPlayerController* pPlayer);//APBGame.cPlayerVehicleSpawnInteractionPoint.IsResupplyingPlayer
	void EndResupply(class AcAPBPlayerController* pPlayer,bool bCancel,unsigned char eWeaponType);//APBGame.cPlayerVehicleSpawnInteractionPoint.EndResupply
	bool IsAmmoCarrier();//APBGame.cPlayerVehicleSpawnInteractionPoint.IsAmmoCarrier
	bool WithdrawAmmoClip();//APBGame.cPlayerVehicleSpawnInteractionPoint.WithdrawAmmoClip
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cPlayerVehicleSpawnInteractionPoint.IsCSASupported
};
UClass* AcPlayerVehicleSpawnInteractionPoint::pClassPointer = NULL;

//0x00001C (0x0002C4 - 0x0002A8)
//cPlayerUIInteractionPoint[0x16EF30B0]
class AcPlayerUIInteractionPoint : public AcInteractiveDynamicSMActor
{
public:
	struct FEnumeratedName                             m_eInteractionPointType;                          		// 0x0002A8 (0x0010)              
	unsigned char                                      m_eFaction;                                       		// 0x0002B8 (0x0001)              PROPERTY: etFaction
	unsigned char                                      _0x0002B9[0x3];                                   		// 0x0002B9 (0x0003) MISSED OFFSET
	int                                                m_nHUDMarkerID;                                   		// 0x0002BC (0x0004)              
	DWORD                                              m_pSddPlayerUIInteractionPoint;                   		// 0x0002C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerUIInteractionPoint");
		return pClassPointer;
	};

public:
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cPlayerUIInteractionPoint.IsCSASupported
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cPlayerUIInteractionPoint.BeginUse
};
UClass* AcPlayerUIInteractionPoint::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cSpeedModifierDeclarations[0x16EF2F80]
class UcSpeedModifierDeclarations : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSpeedModifierDeclarations");
		return pClassPointer;
	};
};
UClass* UcSpeedModifierDeclarations::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//SpawnPointInterface[0x16EF2E50]
class USpawnPointInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.SpawnPointInterface");
		return pClassPointer;
	};
};
UClass* USpawnPointInterface::pClassPointer = NULL;

//0x000024 (0x000284 - 0x000260)
//cMinigameSpawner[0x16EF2D20]
class AcMinigameSpawner : public AActor
{
public:
	DWORD                                              VfTable_ITaskTargetInterface;                     		// 0x000260 (0x0004)              
	class AcDistrictBlock*                             m_pBlock;                                         		// 0x000264 (0x0004)              
	TArray<struct FEnumeratedName>                     m_Themes;                                         		// 0x000268 (0x000C)              
	TArray<int>                                        m_ThemesOrdinals;                                 		// 0x000274 (0x000C)              
	class UcTaskTargetComponent*                       m_TaskTarget;                                     		// 0x000280 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigameSpawner");
		return pClassPointer;
	};

public:
	void DeactivateTaskTarget();//APBGame.cMinigameSpawner.DeactivateTaskTarget
	void CleanUpTaskTarget();//APBGame.cMinigameSpawner.CleanUpTaskTarget
	void ActivateTaskTarget(class UMissionObjective* i_pMissionObjective,bool i_bShowHUDMarkers);//APBGame.cMinigameSpawner.ActivateTaskTarget
	void TriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cMinigameSpawner.TriggerTaskTarget
	void InitTaskTarget(class AcMission* i_pMission);//APBGame.cMinigameSpawner.InitTaskTarget
	void PartiallyTriggerTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cMinigameSpawner.PartiallyTriggerTaskTarget
	class UcTaskTargetComponent* GetTaskTargetComponent();//APBGame.cMinigameSpawner.GetTaskTargetComponent
	void MoveTargetState(class AActor* targetActor);//APBGame.cMinigameSpawner.MoveTargetState
	void ResetTaskTarget(class AcAPBPlayerController* pPC);//APBGame.cMinigameSpawner.ResetTaskTarget
};
UClass* AcMinigameSpawner::pClassPointer = NULL;

//0x000024 (0x000204 - 0x0001E0)
//cMinigameVolumeHightlightComponent[0x16EF2BF0]
class UcMinigameVolumeHightlightComponent : public UPrimitiveComponent
{
public:
	struct FLinearColor                                m_TopColor;                                       		// 0x0001E0 (0x0010)              
	struct FLinearColor                                m_BottomColor;                                    		// 0x0001F0 (0x0010)              
	class UMaterialInterface*                          m_pMaterial;                                      		// 0x000200 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigameVolumeHightlightComponent");
		return pClassPointer;
	};
};
UClass* UcMinigameVolumeHightlightComponent::pClassPointer = NULL;

//0x0000A8 (0x00032C - 0x000284)
//cMinigame[0x16EF2AC0]
class AcMinigame : public AcMission
{
public:
	struct FMinigameLocationData                       m_LocationData;                                   		// 0x000284 (0x0010)              
	int                                                m_nLocationOrdinal;                               		// 0x000294 (0x0004)              
	unsigned long                                      m_bActive : 1;                                    		// 0x000298 (0x0004) [0x00000001] 
	unsigned long                                      m_bReplicateHUDMarkerID : 1;                      		// 0x000298 (0x0004) [0x00000002] 
	unsigned long                                      m_bClientPlayedStartEffect : 1;                   		// 0x000298 (0x0004) [0x00000004] 
	unsigned long                                      m_bClientPlayedEndEffect : 1;                     		// 0x000298 (0x0004) [0x00000008] 
	float                                              m_fIntroductionTime;                              		// 0x00029C (0x0004)              
	float                                              m_fGameplayTimeout;                               		// 0x0002A0 (0x0004)              
	int                                                m_nGameplayTimeoutRepCount;                       		// 0x0002A4 (0x0004)              
	int                                                m_nOutOfMissionHUDMarkerID;                       		// 0x0002A8 (0x0004)              
	int                                                m_nPrimaryHUDMarkerID;                            		// 0x0002AC (0x0004)              
	int                                                m_nLastKillerUID;                                 		// 0x0002B0 (0x0004)              
	unsigned char                                      m_ParticipationTimers[0x3C];                      		// 0x0002B4 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_CachedPlayers[0x3C];                            		// 0x0002F0 (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName PropertyName);//APBGame.cMinigame.ReplicatedEvent
	void SimulateTimeout();//APBGame.cMinigame.SimulateTimeout
	void RefreshUIData(int i_nIndex);//APBGame.cMinigame.RefreshUIData
	void ClientSetNotice(struct FString i_sNoticeKey,float i_fTime,bool i_bShowTimer);//APBGame.cMinigame.ClientSetNotice
	bool ClientSetObjective(struct FString i_sObjectiveKey,bool i_bOptional);//APBGame.cMinigame.ClientSetObjective
	void ActiveChanged();//APBGame.cMinigame.ActiveChanged
	void ClientClearNotice();//APBGame.cMinigame.ClientClearNotice
	void ClientUpdateObjective();//APBGame.cMinigame.ClientUpdateObjective
	bool IsIntroductionTimeOver();//APBGame.cMinigame.IsIntroductionTimeOver
	void UpdateLocation();//APBGame.cMinigame.UpdateLocation
	bool IsActive();//APBGame.cMinigame.IsActive
};
UClass* AcMinigame::pClassPointer = NULL;

//0x000074 (0x0003A0 - 0x00032C)
//cMinigame_BlockFDM[0x16EF2990]
class AcMinigame_BlockFDM : public AcMinigame
{
public:
	DWORD                                              m_pBlockFDMSettings;                              		// 0x00032C (0x0004)              
	struct FBlockFDM_ReplicatedTeamData                m_ReplicatedTeamData[0x2];                        		// 0x000330 (0x0010)              
	struct FBlockFDM_ServerTeamData                    m_ServerTeamData[0x2];                            		// 0x000340 (0x0020)              
	unsigned char                                      m_PlayerData[0x3C];                               		// 0x000360 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned long                                      m_bLocalPlayerInArea : 1;                         		// 0x00039C (0x0004) [0x00000001] 
	unsigned long                                      m_bInAreaTimerStarted : 1;                        		// 0x00039C (0x0004) [0x00000002] 
	unsigned long                                      m_bClientLocalAreaTimerStarted : 1;               		// 0x00039C (0x0004) [0x00000004] 
	unsigned long                                      m_bClientShownInitialEntered : 1;                 		// 0x00039C (0x0004) [0x00000008] 
	unsigned long                                      m_bUsingEntireDistrict : 1;                       		// 0x00039C (0x0004) [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_BlockFDM");
		return pClassPointer;
	};

public:
	void ActorLeftArea(class AActor* i_pOldActor);//APBGame.cMinigame_BlockFDM.ActorLeftArea
	void UpdateLocation();//APBGame.cMinigame_BlockFDM.UpdateLocation
	void ClientUpdateObjective();//APBGame.cMinigame_BlockFDM.ClientUpdateObjective
	void ReplicatedEvent(struct FName VarName);//APBGame.cMinigame_BlockFDM.ReplicatedEvent
	void UnTouch(class AActor* Other);//APBGame.cMinigame_BlockFDM.UnTouch
	void ActorEnteredArea(class AActor* i_pNewActor);//APBGame.cMinigame_BlockFDM.ActorEnteredArea
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cMinigame_BlockFDM.Touch
};
UClass* AcMinigame_BlockFDM::pClassPointer = NULL;

//0x00002C (0x000358 - 0x00032C)
//cMinigame_GoldenWeapon[0x16EF2860]
class AcMinigame_GoldenWeapon : public AcMinigame
{
public:
	DWORD                                              m_pSettings;                                      		// 0x00032C (0x0004)              
	class AcAPBPlayerController*                       m_pCurrentGunHolder;                              		// 0x000330 (0x0004)              
	class AcMinigamePickup*                            m_pGunPickup;                                     		// 0x000334 (0x0004)              
	class UObject*                                     m_pTargetAsset;                                   		// 0x000338 (0x0004)              
	unsigned long                                      m_bProtagonistKillComplete : 1;                   		// 0x00033C (0x0004) [0x00000001] 
	unsigned long                                      m_bProtagonistDelivered : 1;                      		// 0x00033C (0x0004) [0x00000002] 
	unsigned long                                      m_bClientHoldsWeapon : 1;                         		// 0x00033C (0x0004) [0x00000004] 
	unsigned long                                      m_bWeaponHasBeenPickedUp : 1;                     		// 0x00033C (0x0004) [0x00000008] 
	float                                              m_fPickupTimeout;                                 		// 0x000340 (0x0004)              
	float                                              m_fMinigameTimeout;                               		// 0x000344 (0x0004)              
	int                                                m_nCountedKills;                                  		// 0x000348 (0x0004)              
	int                                                m_nClientCountedKills;                            		// 0x00034C (0x0004)              
	DWORD                                              m_aTeams[0x2];                                    		// 0x000350 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_GoldenWeapon");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cMinigame_GoldenWeapon.ReplicatedEvent
	void UpdateLocation();//APBGame.cMinigame_GoldenWeapon.UpdateLocation
	void ClientUpdateObjective();//APBGame.cMinigame_GoldenWeapon.ClientUpdateObjective
};
UClass* AcMinigame_GoldenWeapon::pClassPointer = NULL;

//0x000070 (0x00039C - 0x00032C)
//cMinigame_GunGame[0x16EF2730]
class AcMinigame_GunGame : public AcMinigame
{
public:
	DWORD                                              m_pGunGameSettings;                               		// 0x00032C (0x0004)              
	TArray<DWORD>                                      m_aWeaponSetup;                                   		// 0x000330 (0x000C)              
	DWORD                                              m_aTeams[0x2];                                    		// 0x00033C (0x0008)              
	float                                              m_fGameTimer;                                     		// 0x000344 (0x0004)              
	unsigned char                                      m_CachedPlayerData[0x3C];                         		// 0x000348 (0x003C)              UNKNOWN PROPERTY: MapProperty
	int                                                m_nLastLevelOrdinal;                              		// 0x000384 (0x0004)              
	int                                                m_nClientLevel;                                   		// 0x000388 (0x0004)              
	int                                                m_nClientAccKills;                                		// 0x00038C (0x0004)              
	int                                                m_nClientAccScore;                                		// 0x000390 (0x0004)              
	int                                                m_nClientScore;                                   		// 0x000394 (0x0004)              
	unsigned long                                      m_bClientInArea : 1;                              		// 0x000398 (0x0004) [0x00000001] 
	unsigned long                                      m_bClientInAreaTimerStarted : 1;                  		// 0x000398 (0x0004) [0x00000002] 
	unsigned long                                      m_bUsingArea : 1;                                 		// 0x000398 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_GunGame");
		return pClassPointer;
	};

public:
	void UnTouch(class AActor* Other);//APBGame.cMinigame_GunGame.UnTouch
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cMinigame_GunGame.Touch
	void ClientUpdateHUDMarker();//APBGame.cMinigame_GunGame.ClientUpdateHUDMarker
	void ActorLeftArea(class AActor* i_pOldActor);//APBGame.cMinigame_GunGame.ActorLeftArea
	float GetBoundsTimer();//APBGame.cMinigame_GunGame.GetBoundsTimer
	void UpdateLocation();//APBGame.cMinigame_GunGame.UpdateLocation
	void ClientUpdateObjective();//APBGame.cMinigame_GunGame.ClientUpdateObjective
	void ReplicatedEvent(struct FName PropertyName);//APBGame.cMinigame_GunGame.ReplicatedEvent
	void ActorEnteredArea(class AActor* i_pNewActor);//APBGame.cMinigame_GunGame.ActorEnteredArea
};
UClass* AcMinigame_GunGame::pClassPointer = NULL;

//0x000008 (0x000334 - 0x00032C)
//cMinigame_InternalTest[0x16EF2600]
class AcMinigame_InternalTest : public AcMinigame
{
public:
	DWORD                                              m_pTeam;                                          		// 0x00032C (0x0004)              
	float                                              m_fTimer;                                         		// 0x000330 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_InternalTest");
		return pClassPointer;
	};
};
UClass* AcMinigame_InternalTest::pClassPointer = NULL;

//0x000004 (0x000330 - 0x00032C)
//cMinigame_Matchmaking[0x16EF24D0]
class AcMinigame_Matchmaking : public AcMinigame
{
public:
	unsigned long                                      m_bMatchmakingEnabled : 1;                        		// 0x00032C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_Matchmaking");
		return pClassPointer;
	};
};
UClass* AcMinigame_Matchmaking::pClassPointer = NULL;

//0x000158 (0x000488 - 0x000330)
//cMinigame_WeaponDrop[0x16EF23A0]
class AcMinigame_WeaponDrop : public AcMinigame_Matchmaking
{
public:
	DWORD                                              m_pSettings;                                      		// 0x000330 (0x0004)              
	TArray<class AcMinigameSpawner*>                   m_pInactiveSpawners;                              		// 0x000334 (0x000C)              
	unsigned char                                      m_DropLocations[0x3C];                            		// 0x000340 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_pActiveSpawners[0x3C];                          		// 0x00037C (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_pWaitingWeapons[0x3C];                          		// 0x0003B8 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_pRespawningSpawners[0x3C];                      		// 0x0003F4 (0x003C)              UNKNOWN PROPERTY: MapProperty
	int                                                m_nInitialTeamLives;                              		// 0x000430 (0x0004)              
	int                                                m_nTeamLives[0x2];                                		// 0x000434 (0x0008)              
	int                                                m_nLowLivesCount[0x2];                            		// 0x00043C (0x0008)              
	struct FMinigameWeaponDropTeamData                 m_TeamData[0x2];                                  		// 0x000444 (0x0008)              
	DWORD                                              m_pWaitingTeam;                                   		// 0x00044C (0x0004)              
	unsigned long                                      m_bReevaluateAllSpawns : 1;                       		// 0x000450 (0x0004) [0x00000001] 
	unsigned long                                      m_bDelayProtagonistUpdates : 1;                   		// 0x000450 (0x0004) [0x00000002] 
	unsigned long                                      m_bPingMarkersActive : 1;                         		// 0x000450 (0x0004) [0x00000004] 
	unsigned long                                      m_bClientIsHighestTimeAlive : 1;                  		// 0x000450 (0x0004) [0x00000008] 
	unsigned long                                      m_bClientIsHighScore : 1;                         		// 0x000450 (0x0004) [0x00000010] 
	unsigned long                                      m_bClientIsHighScorer : 1;                        		// 0x000450 (0x0004) [0x00000020] 
	unsigned long                                      m_bClientIsProtagonist : 1;                       		// 0x000450 (0x0004) [0x00000040] 
	unsigned long                                      m_bClientHoldingPickup : 1;                       		// 0x000450 (0x0004) [0x00000080] 
	unsigned long                                      m_bMatchmakingInProgress : 1;                     		// 0x000450 (0x0004) [0x00000100] 
	unsigned long                                      m_bHadFirstPickup : 1;                            		// 0x000450 (0x0004) [0x00000200] 
	unsigned long                                      m_bHasHadNonEmptyTeams : 1;                       		// 0x000450 (0x0004) [0x00000400] 
	class AcAPBPlayerController*                       m_pProtagonist;                                   		// 0x000454 (0x0004)              
	float                                              m_fMarkerPingTimer;                               		// 0x000458 (0x0004)              
	TArray<int>                                        m_PingMarkersID;                                  		// 0x00045C (0x000C)              
	FVector3                                           m_PingMarkerOffset;                               		// 0x000468 (0x000C)              
	int                                                m_nHighScore;                                     		// 0x000474 (0x0004)              
	float                                              m_fAliveScoreTimer;                               		// 0x000478 (0x0004)              
	float                                              m_fClientAliveTime;                               		// 0x00047C (0x0004)              
	int                                                m_nClientScore;                                   		// 0x000480 (0x0004)              
	float                                              m_fClientScoreMultiplier;                         		// 0x000484 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_WeaponDrop");
		return pClassPointer;
	};

public:
	void ClientUpdateObjective();//APBGame.cMinigame_WeaponDrop.ClientUpdateObjective
	void ReplicatedEvent(struct FName PropertyName);//APBGame.cMinigame_WeaponDrop.ReplicatedEvent
	void UpdateLocation();//APBGame.cMinigame_WeaponDrop.UpdateLocation
};
UClass* AcMinigame_WeaponDrop::pClassPointer = NULL;

//0x00002C (0x000358 - 0x00032C)
//cMinigame_VIP[0x16EF2270]
class AcMinigame_VIP : public AcMinigame
{
public:
	DWORD                                              m_pVIPSettings;                                   		// 0x00032C (0x0004)              
	int                                                m_nVIPKiller;                                     		// 0x000330 (0x0004)              
	TArray<int>                                        m_aVIPAssists;                                    		// 0x000334 (0x000C)              
	float                                              m_fAliveTimer;                                    		// 0x000340 (0x0004)              
	int                                                m_nPreyKills;                                     		// 0x000344 (0x0004)              
	class AcAPBPlayerController*                       m_pVIP;                                           		// 0x000348 (0x0004)              
	unsigned long                                      m_bAddingPrey : 1;                                		// 0x00034C (0x0004) [0x00000001] 
	unsigned long                                      m_bPreyWon : 1;                                   		// 0x00034C (0x0004) [0x00000002] 
	unsigned long                                      m_bHuntersWon : 1;                                		// 0x00034C (0x0004) [0x00000004] 
	unsigned long                                      m_bShame : 1;                                     		// 0x00034C (0x0004) [0x00000008] 
	unsigned long                                      m_bClientIsPrey : 1;                              		// 0x00034C (0x0004) [0x00000010] 
	unsigned long                                      m_bClientIsVIP : 1;                               		// 0x00034C (0x0004) [0x00000020] 
	DWORD                                              m_pHunterTeam;                                    		// 0x000350 (0x0004)              
	DWORD                                              m_pPreyTeam;                                      		// 0x000354 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_VIP");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cMinigame_VIP.ReplicatedEvent
	void ClientUpdateObjective();//APBGame.cMinigame_VIP.ClientUpdateObjective
};
UClass* AcMinigame_VIP::pClassPointer = NULL;

//0x000004 (0x000330 - 0x00032C)
//cSingleObjectiveMinigame[0x16EF2140]
class AcSingleObjectiveMinigame : public AcMinigame
{
public:
	DWORD                                              VfTable_IMissionObjective;                        		// 0x00032C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSingleObjectiveMinigame");
		return pClassPointer;
	};
};
UClass* AcSingleObjectiveMinigame::pClassPointer = NULL;

//0x0000A0 (0x0003D0 - 0x000330)
//cMinigame_FindTarget[0x16EF2010]
class AcMinigame_FindTarget : public AcSingleObjectiveMinigame
{
public:
	DWORD                                              m_pSettings;                                      		// 0x000330 (0x0004)              
	TArray<class AcMinigamePickup*>                    m_pPickups;                                       		// 0x000334 (0x000C)              
	class UObject*                                     m_pTargetAsset;                                   		// 0x000340 (0x0004)              
	DWORD                                              m_pNPCOperation;                                  		// 0x000344 (0x0004)              
	DWORD                                              m_pNPCSubOperation;                               		// 0x000348 (0x0004)              
	unsigned char                                      m_ActiveNPCs[0x3C];                               		// 0x00034C (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned long                                      m_DisconnectingAllNPCs : 1;                       		// 0x000388 (0x0004) [0x00000001] 
	unsigned long                                      m_bAddingTargets : 1;                             		// 0x000388 (0x0004) [0x00000002] 
	unsigned long                                      m_bHasBeenFound : 1;                              		// 0x000388 (0x0004) [0x00000004] 
	unsigned long                                      m_bClientHasFound : 1;                            		// 0x000388 (0x0004) [0x00000008] 
	unsigned char                                      m_nNPCRequests[0x3C];                             		// 0x00038C (0x003C)              UNKNOWN PROPERTY: MapProperty
	int                                                m_nPendingSpawnRequests;                          		// 0x0003C8 (0x0004)              
	DWORD                                              m_PlayerTargetTeam;                               		// 0x0003CC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_FindTarget");
		return pClassPointer;
	};

public:
	void UpdateLocation();//APBGame.cMinigame_FindTarget.UpdateLocation
};
UClass* AcMinigame_FindTarget::pClassPointer = NULL;

//0x000074 (0x0003A4 - 0x000330)
//cMinigame_Infection[0x16EF1EE0]
class AcMinigame_Infection : public AcSingleObjectiveMinigame
{
public:
	DWORD                                              m_pInfectionSettings;                             		// 0x000330 (0x0004)              
	class AcAPBPlayerController*                       m_pInfectedLeader;                                		// 0x000334 (0x0004)              
	float                                              m_fTotalGameTimer;                                		// 0x000338 (0x0004)              
	float                                              m_fNoSurviversTimer;                              		// 0x00033C (0x0004)              
	float                                              m_fInfectedMajorityTimer;                         		// 0x000340 (0x0004)              
	float                                              m_fMarkerPingTimer;                               		// 0x000344 (0x0004)              
	TArray<int>                                        m_PingMarkersID;                                  		// 0x000348 (0x000C)              
	unsigned long                                      m_bPingMarkersActive : 1;                         		// 0x000354 (0x0004) [0x00000001] 
	unsigned long                                      m_bProcessingInfectedAdd : 1;                     		// 0x000354 (0x0004) [0x00000002] 
	unsigned long                                      m_bProcessingLeaderAutoKill : 1;                  		// 0x000354 (0x0004) [0x00000004] 
	unsigned long                                      m_bSurvivorMajority : 1;                          		// 0x000354 (0x0004) [0x00000008] 
	unsigned long                                      m_bPendingSurvivorRatioUpdate : 1;                		// 0x000354 (0x0004) [0x00000010] 
	unsigned long                                      m_bClientIsLeader : 1;                            		// 0x000354 (0x0004) [0x00000020] 
	unsigned long                                      m_bClientIsInfected : 1;                          		// 0x000354 (0x0004) [0x00000040] 
	unsigned long                                      m_bClientIsInEndZone : 1;                         		// 0x000354 (0x0004) [0x00000080] 
	FVector3                                           m_ProtagonistOffset;                              		// 0x000358 (0x000C)              
	FVector3                                           m_SurvivorOffset;                                 		// 0x000364 (0x000C)              
	int                                                m_nProtagonistMarkerID;                           		// 0x000370 (0x0004)              
	DWORD                                              m_pInfectedTeam;                                  		// 0x000374 (0x0004)              
	DWORD                                              m_pSurvivorTeam;                                  		// 0x000378 (0x0004)              
	int                                                m_nSurvivorsLeft;                                 		// 0x00037C (0x0004)              
	int                                                m_nInfectedCount;                                 		// 0x000380 (0x0004)              
	int                                                m_nLeaderUID;                                     		// 0x000384 (0x0004)              
	int                                                m_nEndBlockHUDMarker;                             		// 0x000388 (0x0004)              
	TArray<class AcAPBPlayerController*>               m_PendingInfected;                                		// 0x00038C (0x000C)              
	TArray<class AcAPBPlayerController*>               m_PendingSurvivors;                               		// 0x000398 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_Infection");
		return pClassPointer;
	};

public:
	void ActorLeftArea(class AActor* i_pOldActor);//APBGame.cMinigame_Infection.ActorLeftArea
	void ClientUpdateObjective();//APBGame.cMinigame_Infection.ClientUpdateObjective
	void UnTouch(class AActor* Other);//APBGame.cMinigame_Infection.UnTouch
	void ReplicatedEvent(struct FName VarName);//APBGame.cMinigame_Infection.ReplicatedEvent
	void UpdateLocation();//APBGame.cMinigame_Infection.UpdateLocation
	void ActorEnteredArea(class AActor* i_pNewActor);//APBGame.cMinigame_Infection.ActorEnteredArea
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cMinigame_Infection.Touch
	void SetBlockMarkerVisible(bool i_bVisible);//APBGame.cMinigame_Infection.SetBlockMarkerVisible
};
UClass* AcMinigame_Infection::pClassPointer = NULL;

//0x0000C4 (0x000468 - 0x0003A4)
//cMinigame_Infection_ItemCollection[0x16EF1DB0]
class AcMinigame_Infection_ItemCollection : public AcMinigame_Infection
{
public:
	DWORD                                              m_pInfectionICSettings;                           		// 0x0003A4 (0x0004)              
	DWORD                                              m_pTaskItemOperation;                             		// 0x0003A8 (0x0004)              
	unsigned char                                      m_PlayerPickupData[0x3C];                         		// 0x0003AC (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_ActiveItems[0x3C];                              		// 0x0003E8 (0x003C)              UNKNOWN PROPERTY: MapProperty
	TArray<class AcTaskItem*>                          m_InactiveItems;                                  		// 0x000424 (0x000C)              
	TArray<class AcMinigameSpawner*>                   m_ActiveSpawners;                                 		// 0x000430 (0x000C)              
	TArray<class AcMinigameSpawner*>                   m_InactiveSpawners;                               		// 0x00043C (0x000C)              
	int                                                m_nMaxItemCounts;                                 		// 0x000448 (0x0004)              
	int                                                m_nPendingItemSpawnCount;                         		// 0x00044C (0x0004)              
	float                                              m_fPendingItemSpawnTimer;                         		// 0x000450 (0x0004)              
	int                                                m_nActualItemsMinimum;                            		// 0x000454 (0x0004)              
	int                                                m_nActualItemsTarget;                             		// 0x000458 (0x0004)              
	int                                                m_nItemsTriggered;                                		// 0x00045C (0x0004)              
	float                                              m_fItemCollectionTimer;                           		// 0x000460 (0x0004)              
	unsigned long                                      m_bPendingCompleteCheck : 1;                      		// 0x000464 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_Infection_ItemCollection");
		return pClassPointer;
	};

public:
	void UpdateLocation();//APBGame.cMinigame_Infection_ItemCollection.UpdateLocation
	void ReplicatedEvent(struct FName VarName);//APBGame.cMinigame_Infection_ItemCollection.ReplicatedEvent
};
UClass* AcMinigame_Infection_ItemCollection::pClassPointer = NULL;

//0x000008 (0x000470 - 0x000468)
//cMinigame_Infection_IC_RichFX[0x16EF1C80]
class AcMinigame_Infection_IC_RichFX : public AcMinigame_Infection_ItemCollection
{
public:
	DWORD                                              m_pRichFXSettings;                                		// 0x000468 (0x0004)              
	unsigned long                                      m_bClientPlayingMusic : 1;                        		// 0x00046C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_Infection_IC_RichFX");
		return pClassPointer;
	};

public:
	void UpdateMusicPlaying();//APBGame.cMinigame_Infection_IC_RichFX.UpdateMusicPlaying
	void ReplicatedEvent(struct FName VarName);//APBGame.cMinigame_Infection_IC_RichFX.ReplicatedEvent
	void UpdateLocation();//APBGame.cMinigame_Infection_IC_RichFX.UpdateLocation
};
UClass* AcMinigame_Infection_IC_RichFX::pClassPointer = NULL;

//0x000004 (0x0003A8 - 0x0003A4)
//cMinigame_Infection_VIP[0x16EF1B50]
class AcMinigame_Infection_VIP : public AcMinigame_Infection
{
public:
	DWORD                                              m_pInfectionVIPSettings;                          		// 0x0003A4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_Infection_VIP");
		return pClassPointer;
	};
};
UClass* AcMinigame_Infection_VIP::pClassPointer = NULL;

//0x0001FC (0x00052C - 0x000330)
//cMinigame_Mug[0x16EF1A20]
class AcMinigame_Mug : public AcSingleObjectiveMinigame
{
public:
	DWORD                                              m_pMugSettings;                                   		// 0x000330 (0x0004)              
	DWORD                                              m_pNPCOperation[0x2];                             		// 0x000334 (0x0008)              
	DWORD                                              m_pItemOperation;                                 		// 0x00033C (0x0004)              
	DWORD                                              m_pNPCSubOperation[0x2];                          		// 0x000340 (0x0008)              
	TArray<class AcTaskItem*>                          m_InactiveTaskItems;                              		// 0x000348 (0x000C)              
	unsigned char                                      m_ActiveTaskItems[0x3C];                          		// 0x000354 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_CachedDeliveredItems[0x3C];                     		// 0x000390 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      m_ActiveNPCs[0x3C];                               		// 0x0003CC (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned long                                      m_DisconnectingAllNPCs : 1;                       		// 0x000408 (0x0004) [0x00000001] 
	unsigned long                                      m_bPlayerPickedUpItem : 1;                        		// 0x000408 (0x0004) [0x00000002] 
	unsigned long                                      m_bCarrierMarkersNeedUpdate : 1;                  		// 0x000408 (0x0004) [0x00000004] 
	unsigned long                                      m_bMainTimerStarted : 1;                          		// 0x000408 (0x0004) [0x00000008] 
	unsigned long                                      m_bClientIsProtagonist : 1;                       		// 0x000408 (0x0004) [0x00000010] 
	class AcAPBPlayerController*                       m_pProtagonist;                                   		// 0x00040C (0x0004)              
	DWORD                                              m_aTeams[0x2];                                    		// 0x000410 (0x0008)              
	TArray<int>                                        m_Carriers;                                       		// 0x000418 (0x000C)              
	unsigned char                                      m_CarrierData[0x3C];                              		// 0x000424 (0x003C)              UNKNOWN PROPERTY: MapProperty
	float                                              m_TargetNumNPCs;                                  		// 0x000460 (0x0004)              
	float                                              m_fInactivityTimeoutTimer;                        		// 0x000464 (0x0004)              
	int                                                m_nTotalDeliveredItems;                           		// 0x000468 (0x0004)              
	int                                                m_nEnforcerItemCountLowerBound;                   		// 0x00046C (0x0004)              
	int                                                m_nCriminalItemCountLowerBound;                   		// 0x000470 (0x0004)              
	unsigned char                                      m_NPCSpawnRequestIDs[0x3C];                       		// 0x000474 (0x003C)              UNKNOWN PROPERTY: MapProperty
	int                                                m_nPendingSpawnRequests;                          		// 0x0004B0 (0x0004)              
	int                                                m_nLastCarrierMarker;                             		// 0x0004B4 (0x0004)              
	int                                                m_nLastOOMCarierMarkers;                          		// 0x0004B8 (0x0004)              
	double                                             m_LastCarrierMarkerUpdate;                        		// 0x0004BC (0x0008)              
	int                                                m_nClientNumHeldItems;                            		// 0x0004C4 (0x0004)              
	int                                                m_nClientDeliveredItems;                          		// 0x0004C8 (0x0004)              
	int                                                m_nClientNumDeliveries;                           		// 0x0004CC (0x0004)              
	int                                                m_nClientCarrierTypeIndex;                        		// 0x0004D0 (0x0004)              
	int                                                m_nNumActiveTaskItems;                            		// 0x0004D4 (0x0004)              
	int                                                m_nNumActiveNPCs;                                 		// 0x0004D8 (0x0004)              
	float                                              m_fClientImmuneTimeLeft;                          		// 0x0004DC (0x0004)              
	int                                                m_nRepImmuneCount;                                		// 0x0004E0 (0x0004)              
	struct FLookupMap_Mirror                           m_ClientDropOffMarkerTypes;                       		// 0x0004E4 (0x0048)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigame_Mug");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//APBGame.cMinigame_Mug.ReplicatedEvent
	void ClientUpdateObjective();//APBGame.cMinigame_Mug.ClientUpdateObjective
	void UpdateLocation();//APBGame.cMinigame_Mug.UpdateLocation
};
UClass* AcMinigame_Mug::pClassPointer = NULL;

//0x000030 (0x0002A8 - 0x000278)
//cMinigamePickup[0x16EF18F0]
class AcMinigamePickup : public AcPickupBase
{
public:
	class AcMinigame*                                  m_pTargetMinigame;                                		// 0x000278 (0x0004)              
	class UParticleSystemComponent*                    m_pParticleSystemComponent;                       		// 0x00027C (0x0004)              
	class UObject*                                     m_pAsset;                                         		// 0x000280 (0x0004)              
	struct FString                                     m_sAssetName;                                     		// 0x000284 (0x000C)              
	struct FString                                     m_sParticleSystemTemplate;                        		// 0x000290 (0x000C)              
	struct FString                                     m_sSFXName;                                       		// 0x00029C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cMinigamePickup");
		return pClassPointer;
	};

public:
	void StartSFX();//APBGame.cMinigamePickup.StartSFX
	void TornOff();//APBGame.cMinigamePickup.TornOff
	void SetupParticleSystem();//APBGame.cMinigamePickup.SetupParticleSystem
	void ReplicatedEvent(struct FName VarName);//APBGame.cMinigamePickup.ReplicatedEvent
	void EndUse(class AcAPBPlayerController* UserController,unsigned char eCSA,int nIPIndex,unsigned char eCSAState);//APBGame.cMinigamePickup.EndUse
	void BeginUse(class APawn* User,unsigned char eCSA,int nIPIndex);//APBGame.cMinigamePickup.BeginUse
	void ServerIllegalLocation_APB(struct FString sErrorMessage);//APBGame.cMinigamePickup.ServerIllegalLocation_APB
	void SetupMesh();//APBGame.cMinigamePickup.SetupMesh
	bool IsCSASupported(unsigned char eCSA,class APawn* User,int nIPIndex);//APBGame.cMinigamePickup.IsCSASupported
};
UClass* AcMinigamePickup::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cTutorialManager[0x16EF17C0]
class UcTutorialManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTutorialManager");
		return pClassPointer;
	};
};
UClass* UcTutorialManager::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//cAPBAnimNotify_VFX[0x16EF1690]
class UcAPBAnimNotify_VFX : public UAnimNotify
{
public:
	class UClass*                                      NotifyTarget;                                     		// 0x000040 (0x0004)              
	struct FName                                       NotifyName;                                       		// 0x000044 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBAnimNotify_VFX");
		return pClassPointer;
	};
};
UClass* UcAPBAnimNotify_VFX::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_ActorBase[0x16EF1560]
class UcVisualFX_ActorBase : public UcVisualFXBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_ActorBase");
		return pClassPointer;
	};
};
UClass* UcVisualFX_ActorBase::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Pawn[0x16EF1430]
class UcVisualFX_Pawn : public UcVisualFX_ActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Pawn");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Pawn::pClassPointer = NULL;

//0x000028 (0x0000D0 - 0x0000A8)
//cVisualFX_Pawn_ContinuousEffect[0x16EF1300]
class UcVisualFX_Pawn_ContinuousEffect : public UcVisualFX_Pawn
{
public:
	class UParticleSystemComponent*                    m_ContinousEffectParticleSystemComponent;         		// 0x0000A8 (0x0004)              
	struct FName                                       m_ContinousEffectParticleSystemBone;              		// 0x0000AC (0x0008)              
	struct FString                                     m_sContinuousSFX;                                 		// 0x0000B4 (0x000C)              
	struct FString                                     m_sStopContinuousSFX;                             		// 0x0000C0 (0x000C)              
	unsigned long                                      m_bSFXRunning : 1;                                		// 0x0000CC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Pawn_ContinuousEffect");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Pawn_ContinuousEffect::pClassPointer = NULL;

//0x00000C (0x0000DC - 0x0000D0)
//cVisualFX_Pawn_ContinuousEffect_SkelMesh[0x16EF11D0]
class UcVisualFX_Pawn_ContinuousEffect_SkelMesh : public UcVisualFX_Pawn_ContinuousEffect
{
public:
	class USkeletalMeshComponent*                      m_ContiuousEffect_SkeletalMeshComponent;          		// 0x0000D0 (0x0004)              
	struct FName                                       m_ContinousEffectSkeletalMeshBone;                		// 0x0000D4 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Pawn_ContinuousEffect_SkelMesh");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Pawn_ContinuousEffect_SkelMesh::pClassPointer = NULL;

//0x00000C (0x0000DC - 0x0000D0)
//cVisualFX_Pawn_ContinuousEffect_StaticMesh[0x16EF10A0]
class UcVisualFX_Pawn_ContinuousEffect_StaticMesh : public UcVisualFX_Pawn_ContinuousEffect
{
public:
	class UStaticMeshComponent*                        m_ContiuousEffect_StaticMeshComponent;            		// 0x0000D0 (0x0004)              
	struct FName                                       m_ContinousEffectStaticMeshBone;                  		// 0x0000D4 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Pawn_ContinuousEffect_StaticMesh");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Pawn_ContinuousEffect_StaticMesh::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Pedestrian[0x16EF0F70]
class UcVisualFX_Pedestrian : public UcVisualFX_ActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Pedestrian");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Pedestrian::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Prop[0x16EF0E40]
class UcVisualFX_Prop : public UcVisualFX_ActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Prop");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Prop::pClassPointer = NULL;

//0x00006C (0x000114 - 0x0000A8)
//cVisualFX_Prop_ContinuousDamage[0x16EF0D10]
class UcVisualFX_Prop_ContinuousDamage : public UcVisualFX_Prop
{
public:
	class UParticleSystemComponent*                    m_DamageStateParticleSystemComponent;             		// 0x0000A8 (0x0004)              
	class UParticleSystemComponent*                    m_DamageStateParticleSystemComponent;             		// 0x0000AC (0x0004)              
	class UParticleSystemComponent*                    m_DestroyedParticleSystemComponent;               		// 0x0000B0 (0x0004)              
	class UParticleSystemComponent*                    m_RecoverParticleSystemComponent;                 		// 0x0000B4 (0x0004)              
	struct FString                                     m_DamageStateSFX;                                 		// 0x0000B8 (0x000C)              
	struct FString                                     m_StopDamageStateSFX;                             		// 0x0000C4 (0x000C)              
	struct FString                                     m_DamageStateSFX;                                 		// 0x0000D0 (0x000C)              
	struct FString                                     m_StopDamageStateSFX;                             		// 0x0000DC (0x000C)              
	struct FString                                     m_DestroyedSFX;                                   		// 0x0000E8 (0x000C)              
	struct FString                                     m_StopDestroyedSFX;                               		// 0x0000F4 (0x000C)              
	struct FString                                     m_RecoverSFX;                                     		// 0x000100 (0x000C)              
	class UParticleSystemComponent*                    m_pActiveComponent;                               		// 0x00010C (0x0004)              
	DWORD                                              m_pStopEvent;                                     		// 0x000110 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Prop_ContinuousDamage");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Prop_ContinuousDamage::pClassPointer = NULL;

//0x000050 (0x0000F8 - 0x0000A8)
//cVisualFX_Prop_FireHydrant[0x16EF0BE0]
class UcVisualFX_Prop_FireHydrant : public UcVisualFX_Prop
{
public:
	FVector3                                           m_vTriggerOffset;                                 		// 0x0000A8 (0x000C)              
	float                                              m_fTriggerHeight;                                 		// 0x0000B4 (0x0004)              
	float                                              m_fTriggerRadius;                                 		// 0x0000B8 (0x0004)              
	class UParticleSystemComponent*                    m_DamageParticleSystemComponent;                  		// 0x0000BC (0x0004)              
	class UParticleSystemComponent*                    m_BreakParticleSystemComponent;                   		// 0x0000C0 (0x0004)              
	class UParticleSystemComponent*                    m_SprayParticleSystemComponent;                   		// 0x0000C4 (0x0004)              
	class UParticleSystemComponent*                    m_BlockedParticleSystemComponent;                 		// 0x0000C8 (0x0004)              
	float                                              m_fSprayTime;                                     		// 0x0000CC (0x0004)              
	float                                              m_fPostSprayActiveTime;                           		// 0x0000D0 (0x0004)              
	struct FString                                     m_sDestroyedSFX;                                  		// 0x0000D4 (0x000C)              
	struct FString                                     m_sDamageSFX;                                     		// 0x0000E0 (0x000C)              
	float                                              m_fCurrentSprayTime;                              		// 0x0000EC (0x0004)              
	float                                              m_fCurrentActiveTime;                             		// 0x0000F0 (0x0004)              
	class ATrigger*                                    m_pTrigger;                                       		// 0x0000F4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Prop_FireHydrant");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Prop_FireHydrant::pClassPointer = NULL;

//0x000060 (0x000108 - 0x0000A8)
//cVisualFX_Prop_MultiVFX[0x16EF0AB0]
class UcVisualFX_Prop_MultiVFX : public UcVisualFX_Prop
{
public:
	TArray<class UParticleSystemComponent*>            m_DamageStateParticleSystemComponents;            		// 0x0000A8 (0x000C)              
	TArray<class UParticleSystemComponent*>            m_DamageStateParticleSystemComponents;            		// 0x0000B4 (0x000C)              
	TArray<class UParticleSystemComponent*>            m_DestroyedParticleSystemComponents;              		// 0x0000C0 (0x000C)              
	TArray<class UParticleSystemComponent*>            m_RecoverParticleSystemComponents;                		// 0x0000CC (0x000C)              
	struct FString                                     m_DamageStateSFX;                                 		// 0x0000D8 (0x000C)              
	struct FString                                     m_DamageStateSFX;                                 		// 0x0000E4 (0x000C)              
	struct FString                                     m_DestroyedSFX;                                   		// 0x0000F0 (0x000C)              
	struct FString                                     m_RecoverSFX;                                     		// 0x0000FC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Prop_MultiVFX");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Prop_MultiVFX::pClassPointer = NULL;

//0x000044 (0x0000EC - 0x0000A8)
//cVisualFX_Prop_Simple[0x16EF0980]
class UcVisualFX_Prop_Simple : public UcVisualFX_Prop
{
public:
	class UParticleSystemComponent*                    m_DamageParticleSystemComponent;                  		// 0x0000A8 (0x0004)              
	class UParticleSystem*                             m_DamageStateParticleSystem;                      		// 0x0000AC (0x0004)              
	class UParticleSystem*                             m_DamageStateParticleSystem;                      		// 0x0000B0 (0x0004)              
	class UParticleSystem*                             m_DestroyedParticleSystem;                        		// 0x0000B4 (0x0004)              
	class UParticleSystem*                             m_RecoverParticleSystem;                          		// 0x0000B8 (0x0004)              
	struct FString                                     m_DamageStateSFX;                                 		// 0x0000BC (0x000C)              
	struct FString                                     m_DamageStateSFX;                                 		// 0x0000C8 (0x000C)              
	struct FString                                     m_DestroyedSFX;                                   		// 0x0000D4 (0x000C)              
	struct FString                                     m_RecoverSFX;                                     		// 0x0000E0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Prop_Simple");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Prop_Simple::pClassPointer = NULL;

//0x000020 (0x00010C - 0x0000EC)
//cVisualFX_Prop_ContinuousEffect[0x16EF0850]
class UcVisualFX_Prop_ContinuousEffect : public UcVisualFX_Prop_Simple
{
public:
	class UParticleSystemComponent*                    m_ContinousEffectParticleSystemComponent;         		// 0x0000EC (0x0004)              
	struct FString                                     m_sContinuousSFX;                                 		// 0x0000F0 (0x000C)              
	struct FString                                     m_sStopContinuousSFX;                             		// 0x0000FC (0x000C)              
	unsigned long                                      m_bSFXRunning : 1;                                		// 0x000108 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Prop_ContinuousEffect");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Prop_ContinuousEffect::pClassPointer = NULL;

//0x000060 (0x000108 - 0x0000A8)
//cVisualFX_SimpleActor[0x16EF0720]
class UcVisualFX_SimpleActor : public UcVisualFX_ActorBase
{
public:
	class UParticleSystemComponent*                    m_SpawnEffectParticleSystemComponent;             		// 0x0000A8 (0x0004)              
	class UParticleSystemComponent*                    m_DespawnEffectParticleSystemComponent;           		// 0x0000AC (0x0004)              
	class UParticleSystemComponent*                    m_ContinousEffectParticleSystemComponent;         		// 0x0000B0 (0x0004)              
	struct FName                                       m_ParticleEffectBone;                             		// 0x0000B4 (0x0008)              
	struct FString                                     m_sSpawnSFX;                                      		// 0x0000BC (0x000C)              
	struct FString                                     m_sDespawnSFX;                                    		// 0x0000C8 (0x000C)              
	struct FString                                     m_sContinuousSFX;                                 		// 0x0000D4 (0x000C)              
	struct FString                                     m_sStopContinuousSFX;                             		// 0x0000E0 (0x000C)              
	unsigned long                                      m_bHideOtherComponentsDuringDespawn : 1;          		// 0x0000EC (0x0004) [0x00000001] 
	unsigned long                                      m_bHideOtherComponentsDuringSpawn : 1;            		// 0x0000EC (0x0004) [0x00000002] 
	unsigned long                                      m_bSFXRunning : 1;                                		// 0x0000EC (0x0004) [0x00000004] 
	unsigned long                                      m_bDespawning : 1;                                		// 0x0000EC (0x0004) [0x00000008] 
	unsigned long                                      m_bSpawning : 1;                                  		// 0x0000EC (0x0004) [0x00000010] 
	float                                              m_fDespawnHideTiming;                             		// 0x0000F0 (0x0004)              
	float                                              m_fSpawnShowTiming;                               		// 0x0000F4 (0x0004)              
	float                                              m_fTiming;                                        		// 0x0000F8 (0x0004)              
	TArray<class UPrimitiveComponent*>                 m_HiddenComponents;                               		// 0x0000FC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_SimpleActor");
		return pClassPointer;
	};
};
UClass* UcVisualFX_SimpleActor::pClassPointer = NULL;

//0x000044 (0x0000EC - 0x0000A8)
//cVisualFX_VehicleActor[0x16EF05F0]
class UcVisualFX_VehicleActor : public UcVisualFX_ActorBase
{
public:
	class UParticleSystemComponent*                    m_SpawnParticleSystemComponent;                   		// 0x0000A8 (0x0004)              
	class UParticleSystemComponent*                    m_DespawnParticleSystemComponent;                 		// 0x0000AC (0x0004)              
	class UParticleSystemComponent*                    m_DamageStateParticleSystemComponents[0x5];       		// 0x0000B0 (0x0014)              
	class UParticleSystem*                             m_NormalExplosionVFX;                             		// 0x0000C4 (0x0004)              
	class UParticleSystem*                             m_SmallExplosionVFX;                              		// 0x0000C8 (0x0004)              
	class UParticleSystem*                             m_WreckExplosionVFX;                              		// 0x0000CC (0x0004)              
	TArray<class UParticleSystemComponent*>            m_WheelParticleSystemComponents;                  		// 0x0000D0 (0x000C)              
	TArray<class UParticleSystemComponent*>            m_SecondaryWheelParticleSystemComponents;         		// 0x0000DC (0x000C)              
	class AEmitter*                                    m_pSpawnedExplosionEmitter;                       		// 0x0000E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_VehicleActor");
		return pClassPointer;
	};
};
UClass* UcVisualFX_VehicleActor::pClassPointer = NULL;

//0x000010 (0x0000B8 - 0x0000A8)
//cVisualFX_Aggregate[0x16EF04C0]
class UcVisualFX_Aggregate : public UcVisualFXBase
{
public:
	TArray<class UcVisualFXBase*>                      Components;                                       		// 0x0000A8 (0x000C)              
	unsigned long                                      bReset : 1;                                       		// 0x0000B4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Aggregate");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Aggregate::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Dummy[0x16EF0390]
class UcVisualFX_Dummy : public UcVisualFXBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Dummy");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Dummy::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_TaskTargetBase[0x16EF0260]
class UcVisualFX_TaskTargetBase : public UcVisualFXBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_TaskTargetBase");
		return pClassPointer;
	};
};
UClass* UcVisualFX_TaskTargetBase::pClassPointer = NULL;

//0x000018 (0x0000C0 - 0x0000A8)
//cVisualFX_Checkpoint[0x16EF0130]
class UcVisualFX_Checkpoint : public UcVisualFX_TaskTargetBase
{
public:
	class UParticleSystemComponent*                    m_pParticleSystemComponent;                       		// 0x0000A8 (0x0004)              
	class UParticleSystem*                             m_pDefaultSystem;                                 		// 0x0000AC (0x0004)              
	class UParticleSystem*                             m_pNeutralSystem;                                 		// 0x0000B0 (0x0004)              
	class UParticleSystem*                             m_pEnemyOwnedSystem;                              		// 0x0000B4 (0x0004)              
	class UParticleSystem*                             m_pFriendlyOwnedSystem;                           		// 0x0000B8 (0x0004)              
	unsigned long                                      m_bSupportTerritoryControl : 1;                   		// 0x0000BC (0x0004) [0x00000001] 
	unsigned long                                      m_bWasHidden : 1;                                 		// 0x0000BC (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Checkpoint");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Checkpoint::pClassPointer = NULL;

//0x000010 (0x0000B8 - 0x0000A8)
//cVisualFX_Task_Arson[0x16EF0000]
class UcVisualFX_Task_Arson : public UcVisualFX_TaskTargetBase
{
public:
	class UParticleSystemComponent*                    m_pArsonParticleSystemComponent;                  		// 0x0000A8 (0x0004)              
	struct FString                                     m_sArsonSFX;                                      		// 0x0000AC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Arson");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Arson::pClassPointer = NULL;

//0x00001C (0x0000D4 - 0x0000B8)
//cVisualFX_Task_Arson_PlayerCharacter[0x17D0FE20]
class UcVisualFX_Task_Arson_PlayerCharacter : public UcVisualFX_Task_Arson
{
public:
	class UParticleSystemComponent*                    m_pLighterParticleSystemComponent;                		// 0x0000B8 (0x0004)              
	class UParticleSystemComponent*                    m_pPetrolSplashParticleSystemComponent;           		// 0x0000BC (0x0004)              
	class UParticleSystemComponent*                    m_pPetrolPouringParticleSystemComponent;          		// 0x0000C0 (0x0004)              
	struct FName                                       m_PetrolBoneName;                                 		// 0x0000C4 (0x0008)              
	struct FName                                       m_FlameBoneName;                                  		// 0x0000CC (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Arson_PlayerCharacter");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Arson_PlayerCharacter::pClassPointer = NULL;

//0x000028 (0x0000E0 - 0x0000B8)
//cVisualFX_Task_Arson_Prop[0x17D0FCF0]
class UcVisualFX_Task_Arson_Prop : public UcVisualFX_Task_Arson
{
public:
	unsigned long                                      m_bHasExplosion : 1;                              		// 0x0000B8 (0x0004) [0x00000001] 
	float                                              m_fTimeBeforeExplosion;                           		// 0x0000BC (0x0004)              
	class UParticleSystemComponent*                    m_ExplosionParticleSystemComponent;               		// 0x0000C0 (0x0004)              
	struct FString                                     m_sExplosionSFX;                                  		// 0x0000C4 (0x000C)              
	struct FString                                     m_sStopArsonSFX;                                  		// 0x0000D0 (0x000C)              
	float                                              m_fExplosionTimer;                                		// 0x0000DC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Arson_Prop");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Arson_Prop::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_BreakIn[0x17D0FBC0]
class UcVisualFX_Task_BreakIn : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_BreakIn");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_BreakIn::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_Burglary[0x17D0FA90]
class UcVisualFX_Task_Burglary : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Burglary");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Burglary::pClassPointer = NULL;

//0x000044 (0x0000EC - 0x0000A8)
//cVisualFX_Task_Burglary_Prop[0x17D0F960]
class UcVisualFX_Task_Burglary_Prop : public UcVisualFX_Task_Burglary
{
public:
	class UParticleSystemComponent*                    m_ImpactParticleSystemComponent;                  		// 0x0000A8 (0x0004)              
	class UParticleSystemComponent*                    m_WrenchParticleSystemComponent;                  		// 0x0000AC (0x0004)              
	class UParticleSystemComponent*                    m_BreakParticleSystemComponent;                   		// 0x0000B0 (0x0004)              
	class UParticleSystemComponent*                    m_SecondaryBreakParticleSystemComponent;          		// 0x0000B4 (0x0004)              
	unsigned long                                      m_bAttachImpactToPawn : 1;                        		// 0x0000B8 (0x0004) [0x00000001] 
	unsigned long                                      m_bOperationInProgress : 1;                       		// 0x0000B8 (0x0004) [0x00000002] 
	struct FName                                       m_ImpactAttachName;                               		// 0x0000BC (0x0008)              
	struct FString                                     m_sImpactSFX;                                     		// 0x0000C4 (0x000C)              
	struct FString                                     m_sWrenchSFX;                                     		// 0x0000D0 (0x000C)              
	struct FString                                     m_sBreakSFX;                                      		// 0x0000DC (0x000C)              
	class AcAPBPawn*                                   m_pInteractingPawn;                               		// 0x0000E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Burglary_Prop");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Burglary_Prop::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_Bust[0x17D0F830]
class UcVisualFX_Task_Bust : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Bust");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Bust::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_CSI[0x17D0F700]
class UcVisualFX_Task_CSI : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_CSI");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_CSI::pClassPointer = NULL;

//0x00000C (0x0000B4 - 0x0000A8)
//cVisualFX_Task_CSI_PlayerCharacter[0x17D0F5D0]
class UcVisualFX_Task_CSI_PlayerCharacter : public UcVisualFX_Task_CSI
{
public:
	class UParticleSystemComponent*                    m_pFlashParticleSystemComponent;                  		// 0x0000A8 (0x0004)              
	struct FName                                       m_FlashBoneName;                                  		// 0x0000AC (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_CSI_PlayerCharacter");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_CSI_PlayerCharacter::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_ForcedEntry[0x17D0F4A0]
class UcVisualFX_Task_ForcedEntry : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_ForcedEntry");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_ForcedEntry::pClassPointer = NULL;

//0x000030 (0x0000D8 - 0x0000A8)
//cVisualFX_Task_ForcedEntry_Prop[0x17D0F370]
class UcVisualFX_Task_ForcedEntry_Prop : public UcVisualFX_Task_ForcedEntry
{
public:
	class UParticleSystemComponent*                    m_ImpactParticleSystemComponent;                  		// 0x0000A8 (0x0004)              
	class UParticleSystemComponent*                    m_BreakParticleSystemComponent;                   		// 0x0000AC (0x0004)              
	unsigned long                                      m_bPlayImpactOnBreak : 1;                         		// 0x0000B0 (0x0004) [0x00000001] 
	unsigned long                                      m_bAttachImpactToPawn : 1;                        		// 0x0000B0 (0x0004) [0x00000002] 
	unsigned long                                      m_bOperationInProgress : 1;                       		// 0x0000B0 (0x0004) [0x00000004] 
	struct FName                                       m_ImpactAttachName;                               		// 0x0000B4 (0x0008)              
	struct FString                                     m_sImpactSFX;                                     		// 0x0000BC (0x000C)              
	struct FString                                     m_sBreakSFX;                                      		// 0x0000C8 (0x000C)              
	class AcAPBPawn*                                   m_pInteractingPawn;                               		// 0x0000D4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_ForcedEntry_Prop");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_ForcedEntry_Prop::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_Hacking[0x17D0F240]
class UcVisualFX_Task_Hacking : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Hacking");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Hacking::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_Hotwire[0x17D0F110]
class UcVisualFX_Task_Hotwire : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Hotwire");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Hotwire::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_PlayerArrest[0x17D0EFE0]
class UcVisualFX_Task_PlayerArrest : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_PlayerArrest");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_PlayerArrest::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_PlayerRescue[0x17D0EEB0]
class UcVisualFX_Task_PlayerRescue : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_PlayerRescue");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_PlayerRescue::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_RamRaid[0x17D0ED80]
class UcVisualFX_Task_RamRaid : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_RamRaid");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_RamRaid::pClassPointer = NULL;

//0x000030 (0x0000D8 - 0x0000A8)
//cVisualFX_Task_RamRaid_Prop[0x17D0EC50]
class UcVisualFX_Task_RamRaid_Prop : public UcVisualFX_Task_RamRaid
{
public:
	class UParticleSystemComponent*                    m_DamageParticleSystemComponent;                  		// 0x0000A8 (0x0004)              
	class UParticleSystem*                             m_DamageStateParticleSystem;                      		// 0x0000AC (0x0004)              
	class UParticleSystem*                             m_DamageStateParticleSystem;                      		// 0x0000B0 (0x0004)              
	struct FString                                     m_DamageStateSFX;                                 		// 0x0000B4 (0x000C)              
	struct FString                                     m_DamageStateSFX;                                 		// 0x0000C0 (0x000C)              
	struct FString                                     m_SuccessSFX;                                     		// 0x0000CC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_RamRaid_Prop");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_RamRaid_Prop::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_Sabotage[0x17D0EB20]
class UcVisualFX_Task_Sabotage : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Sabotage");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Sabotage::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_Vandalism[0x17D0E9F0]
class UcVisualFX_Task_Vandalism : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Vandalism");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Vandalism::pClassPointer = NULL;

//0x000024 (0x0000CC - 0x0000A8)
//cVisualFX_Task_Vandalism_Prop[0x17D0E8C0]
class UcVisualFX_Task_Vandalism_Prop : public UcVisualFX_Task_Vandalism
{
public:
	class UParticleSystemComponent*                    m_DamageParticleSystemComponent;                  		// 0x0000A8 (0x0004)              
	class UParticleSystem*                             m_DamageStateParticleSystem;                      		// 0x0000AC (0x0004)              
	class UParticleSystem*                             m_DamageStateParticleSystem;                      		// 0x0000B0 (0x0004)              
	struct FString                                     m_DamageStateSFX;                                 		// 0x0000B4 (0x000C)              
	struct FString                                     m_DamageStateSFX;                                 		// 0x0000C0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Vandalism_Prop");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Vandalism_Prop::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_TaskBombBase[0x17D0E790]
class UcVisualFX_TaskBombBase : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_TaskBombBase");
		return pClassPointer;
	};
};
UClass* UcVisualFX_TaskBombBase::pClassPointer = NULL;

//0x000074 (0x00011C - 0x0000A8)
//cVisualFX_Task_Bomb_Prop[0x17D0E660]
class UcVisualFX_Task_Bomb_Prop : public UcVisualFX_TaskBombBase
{
public:
	TArray<struct FVFXBombSecondaryExplosion>          m_SecondaryExplosions;                            		// 0x0000A8 (0x000C)              
	class UParticleSystemComponent*                    m_BlinkingParticleSystemComponent;                		// 0x0000B4 (0x0004)              
	class UParticleSystem*                             m_SlowBlinkParticleSystem;                        		// 0x0000B8 (0x0004)              
	class UParticleSystem*                             m_FastBlinkParticleSystem;                        		// 0x0000BC (0x0004)              
	class UParticleSystemComponent*                    m_ExplosionParticleSystemComponent;               		// 0x0000C0 (0x0004)              
	TArray<class UParticleSystem*>                     m_ExplosionParticleSystems;                       		// 0x0000C4 (0x000C)              
	FVector3                                           m_vRelativeBombLocation;                          		// 0x0000D0 (0x000C)              
	FRotator                                           m_RelativeBombRotation;                           		// 0x0000DC (0x000C)              
	TArray<class USkeletalMesh*>                       m_BombMeshes;                                     		// 0x0000E8 (0x000C)              
	float                                              m_fPostDefusalTimeout;                            		// 0x0000F4 (0x0004)              
	int                                                m_nFastBlinkingSecondsRemaining;                  		// 0x0000F8 (0x0004)              
	TArray<class UParticleSystemComponent*>            m_BlinkingComponents;                             		// 0x0000FC (0x000C)              
	class ASkeletalMeshActor*                          m_SpawnedBombMesh;                                		// 0x000108 (0x0004)              
	int                                                m_nBombLevel;                                     		// 0x00010C (0x0004)              
	float                                              m_fHideBombTimer;                                 		// 0x000110 (0x0004)              
	unsigned long                                      m_bSecondariesNeedTick : 1;                       		// 0x000114 (0x0004) [0x00000001] 
	unsigned long                                      m_bSet : 1;                                       		// 0x000114 (0x0004) [0x00000002] 
	unsigned long                                      m_bOutroPlayed : 1;                               		// 0x000114 (0x0004) [0x00000004] 
	class AcAPBPawn*                                   m_pPlantingPawn;                                  		// 0x000118 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Bomb_Prop");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Bomb_Prop::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_BombDisposal[0x17D0E530]
class UcVisualFX_Task_BombDisposal : public UcVisualFX_TaskBombBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_BombDisposal");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_BombDisposal::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_Bombing[0x17D0E400]
class UcVisualFX_Task_Bombing : public UcVisualFX_TaskBombBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Bombing");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Bombing::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_TaskGraffitiBase[0x17D0E2D0]
class UcVisualFX_TaskGraffitiBase : public UcVisualFX_TaskTargetBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_TaskGraffitiBase");
		return pClassPointer;
	};
};
UClass* UcVisualFX_TaskGraffitiBase::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_AntiGraffiti[0x17D0E1A0]
class UcVisualFX_Task_AntiGraffiti : public UcVisualFX_TaskGraffitiBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_AntiGraffiti");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_AntiGraffiti::pClassPointer = NULL;

//0x000000 (0x0000A8 - 0x0000A8)
//cVisualFX_Task_Graffiti[0x17D0E070]
class UcVisualFX_Task_Graffiti : public UcVisualFX_TaskGraffitiBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Graffiti");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Graffiti::pClassPointer = NULL;

//0x00000C (0x0000B4 - 0x0000A8)
//cVisualFX_Task_Graffiti_PlayerCharacter[0x17D0DF40]
class UcVisualFX_Task_Graffiti_PlayerCharacter : public UcVisualFX_TaskGraffitiBase
{
public:
	class UParticleSystemComponent*                    m_pSprayParticleSystemComponent;                  		// 0x0000A8 (0x0004)              
	struct FName                                       m_SprayBoneName;                                  		// 0x0000AC (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Graffiti_PlayerCharacter");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Graffiti_PlayerCharacter::pClassPointer = NULL;

//0x000014 (0x000274 - 0x000260)
//cVisualFX_TestActor[0x17D0DE10]
class AcVisualFX_TestActor : public AActor
{
public:
	unsigned long                                      bStarted : 1;                                     		// 0x000260 (0x0004) [0x00000001] 
	struct FName                                       TriggerEvent;                                     		// 0x000264 (0x0008)              
	class UClass*                                      TriggerClass;                                     		// 0x00026C (0x0004)              
	class UcVisualFXBase*                              TargetVFX;                                        		// 0x000270 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_TestActor");
		return pClassPointer;
	};

public:
	void RestartEffect();//APBGame.cVisualFX_TestActor.RestartEffect
};
UClass* AcVisualFX_TestActor::pClassPointer = NULL;

//0x000018 (0x0000C0 - 0x0000A8)
//cVisualFX_Weapon[0x17D0DCE0]
class UcVisualFX_Weapon : public UcVisualFXBase
{
public:
	class UParticleSystemComponent*                    m_pMuzzleFlashParticleSystemComponent;            		// 0x0000A8 (0x0004)              
	class UParticleSystemComponent*                    m_pEjectCasingParticleSystemComponent;            		// 0x0000AC (0x0004)              
	float                                              m_fMuzzleFlashDelay;                              		// 0x0000B0 (0x0004)              
	float                                              m_fEjectCasingDelay;                              		// 0x0000B4 (0x0004)              
	float                                              m_fCurrentMuzzleFlashDelay;                       		// 0x0000B8 (0x0004)              
	float                                              m_fCurrentEjectCasingDelay;                       		// 0x0000BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Weapon");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Weapon::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//APBSeqEvent_cWeapon[0x1DF8FA90]
class UAPBSeqEvent_cWeapon : public UAPBSeqEvent_Actor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSeqEvent_cWeapon");
		return pClassPointer;
	};
};
UClass* UAPBSeqEvent_cWeapon::pClassPointer = NULL;

//0x000004 (0x00029C - 0x000298)
//APBSpinnyCube[0x1DF8F960]
class AAPBSpinnyCube : public ADynamicSMActor
{
public:
	float                                              rotationSpeed;                                    		// 0x000298 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBSpinnyCube");
		return pClassPointer;
	};

public:
	void Tick(float DeltaTime);//APBGame.APBSpinnyCube.Tick
	void PreBeginPlay();//APBGame.APBSpinnyCube.PreBeginPlay
};
UClass* AAPBSpinnyCube::pClassPointer = NULL;

//0x000000 (0x000078 - 0x000078)
//cActorFactorySkeletalMeshDLOD[0x1DF8F830]
class UcActorFactorySkeletalMeshDLOD : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cActorFactorySkeletalMeshDLOD");
		return pClassPointer;
	};
};
UClass* UcActorFactorySkeletalMeshDLOD::pClassPointer = NULL;

//0x000000 (0x000264 - 0x000264)
//cAdvertisement[0x1DF8F700]
class AcAdvertisement : public AStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAdvertisement");
		return pClassPointer;
	};
};
UClass* AcAdvertisement::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cAnimNotify_BlendToRagdoll[0x1DF8F5D0]
class UcAnimNotify_BlendToRagdoll : public UAnimNotify_Scripted
{
public:
	float                                              fRandomBlendTime;                                 		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_BlendToRagdoll");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotify_BlendToRagdoll.Notify
};
UClass* UcAnimNotify_BlendToRagdoll::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//cAnimNotify_DestroyHeldObject[0x1DF8F4A0]
class UcAnimNotify_DestroyHeldObject : public UAnimNotify_Scripted
{
public:
	struct FName                                       m_sSocketName;                                    		// 0x000040 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_DestroyHeldObject");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotify_DestroyHeldObject.Notify
};
UClass* UcAnimNotify_DestroyHeldObject::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//cAnimNotify_PlayWeaponAnimation[0x1DF8F370]
class UcAnimNotify_PlayWeaponAnimation : public UAnimNotify_Scripted
{
public:
	struct FName                                       m_sAnimationName;                                 		// 0x000040 (0x0008)              
	unsigned long                                      m_bCrouched : 1;                                  		// 0x000048 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_PlayWeaponAnimation");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotify_PlayWeaponAnimation.Notify
};
UClass* UcAnimNotify_PlayWeaponAnimation::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cAnimNotify_ShowWeapon[0x1DF8F240]
class UcAnimNotify_ShowWeapon : public UAnimNotify_Scripted
{
public:
	unsigned long                                      m_bShow : 1;                                      		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      m_bCrouched : 1;                                  		// 0x000040 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_ShowWeapon");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotify_ShowWeapon.Notify
};
UClass* UcAnimNotify_ShowWeapon::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cAnimNotify_SpawnHeldObject[0x1DF8F110]
class UcAnimNotify_SpawnHeldObject : public UAnimNotify_Scripted
{
public:
	class UStaticMesh*                                 m_HeldObject;                                     		// 0x000040 (0x0004)              
	class USkeletalMesh*                               m_HeldObjectSkeletal;                             		// 0x000044 (0x0004)              
	struct FName                                       m_sSocketName;                                    		// 0x000048 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotify_SpawnHeldObject");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotify_SpawnHeldObject.Notify
};
UClass* UcAnimNotify_SpawnHeldObject::pClassPointer = NULL;

//0x000001 (0x000041 - 0x000040)
//cAnimNotifyLogical_TaskItem[0x1DF8EFE0]
class UcAnimNotifyLogical_TaskItem : public UcAnimNotifyLogical
{
public:
	unsigned char                                      m_eTaskItemNotify;                                		// 0x000040 (0x0001)              PROPERTY: etTaskItemNotify

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyLogical_TaskItem");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotifyLogical_TaskItem.Notify
};
UClass* UcAnimNotifyLogical_TaskItem::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//cAnimNotifyLogical_UseProp[0x1DF8EEB0]
class UcAnimNotifyLogical_UseProp : public UcAnimNotifyLogical
{
public:
	struct FName                                       m_sUseTagName;                                    		// 0x000040 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAnimNotifyLogical_UseProp");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//APBGame.cAnimNotifyLogical_UseProp.Notify
};
UClass* UcAnimNotifyLogical_UseProp::pClassPointer = NULL;

//0x000000 (0x000460 - 0x000460)
//cAPBDebugGameInfo[0x1DF8ED80]
class AcAPBDebugGameInfo : public AAPBGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBDebugGameInfo");
		return pClassPointer;
	};
};
UClass* AcAPBDebugGameInfo::pClassPointer = NULL;

//0x000030 (0x001160 - 0x001130)
//cAPBDebugPlayerController[0x1DF8EC50]
class AcAPBDebugPlayerController : public AcAPBPlayerController
{
public:
	float                                              WeaponImpulse;                                    		// 0x001130 (0x0004)              
	float                                              HoldDistanceMin;                                  		// 0x001134 (0x0004)              
	float                                              HoldDistanceMax;                                  		// 0x001138 (0x0004)              
	float                                              ThrowImpulse;                                     		// 0x00113C (0x0004)              
	float                                              ChangeHoldDistanceIncrement;                      		// 0x001140 (0x0004)              
	class URB_Handle*                                  PhysicsGrabber;                                   		// 0x001144 (0x0004)              
	float                                              HoldDistance;                                     		// 0x001148 (0x0004)              
	unsigned char                                      _0x00114C[0x4];                                   		// 0x00114C (0x0004) MISSED OFFSET
	struct FQuat                                       HoldOrientation;                                  		// 0x001150 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cAPBDebugPlayerController");
		return pClassPointer;
	};

public:
	void StopAltFire(unsigned char FireModeNum);//APBGame.cAPBDebugPlayerController.StopAltFire
	void StartFire(unsigned char FireModeNum);//APBGame.cAPBDebugPlayerController.StartFire
	void PlayerTick(float DeltaTime);//APBGame.cAPBDebugPlayerController.PlayerTick
	void StartAltFire(unsigned char FireModeNum);//APBGame.cAPBDebugPlayerController.StartAltFire
	void PrevWeapon();//APBGame.cAPBDebugPlayerController.PrevWeapon
	void NextWeapon();//APBGame.cAPBDebugPlayerController.NextWeapon
};
UClass* AcAPBDebugPlayerController::pClassPointer = NULL;

//0x000008 (0x000288 - 0x000280)
//cCrimeTargetZone[0x1DF8EB20]
class AcCrimeTargetZone : public AcPlaceholderLocator
{
public:
	unsigned char                                      m_eCrimeTargetZone;                               		// 0x000280 (0x0001)              PROPERTY: etCrimeTargetZone
	unsigned char                                      _0x000281[0x3];                                   		// 0x000281 (0x0003) MISSED OFFSET
	float                                              m_ZoneRadius;                                     		// 0x000284 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cCrimeTargetZone");
		return pClassPointer;
	};

public:
	struct FString GetDisplayName();//APBGame.cCrimeTargetZone.GetDisplayName
	float GetZoneRadius();//APBGame.cCrimeTargetZone.GetZoneRadius
	unsigned char GetCrimeTargetZoneType();//APBGame.cCrimeTargetZone.GetCrimeTargetZoneType
};
UClass* AcCrimeTargetZone::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cDebugMiniMap[0x1DF8E9F0]
class UcDebugMiniMap : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDebugMiniMap");
		return pClassPointer;
	};
};
UClass* UcDebugMiniMap::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cDisplayArea[0x1DF8E8C0]
class AcDisplayArea : public AcAPBVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cDisplayArea");
		return pClassPointer;
	};

public:
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//APBGame.cDisplayArea.Touch
	void UnTouch(class AActor* Other);//APBGame.cDisplayArea.UnTouch
};
UClass* AcDisplayArea::pClassPointer = NULL;

//0x000008 (0x001DB8 - 0x001DB0)
//cEnfPerfCar[0x1DF8E790]
class AcEnfPerfCar : public AcAPBVehicle
{
public:
	class UGolemobileBase*                             VehicleBaseHACK;                                  		// 0x001DB0 (0x0004)              
	float                                              m_fRandomPhase;                                   		// 0x001DB4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cEnfPerfCar");
		return pClassPointer;
	};

public:
	void Tick(float DeltaTime);//APBGame.cEnfPerfCar.Tick
	void PostBeginPlay();//APBGame.cEnfPerfCar.PostBeginPlay
};
UClass* AcEnfPerfCar::pClassPointer = NULL;

//0x000018 (0x000278 - 0x000260)
//cFlythroughSpawnerActor[0x1DF8E660]
class AcFlythroughSpawnerActor : public AActor
{
public:
	TArray<class AcFlythroughSkeletalMeshActor*>       spawnedPedestrians;                               		// 0x000260 (0x000C)              
	TArray<class AcFlythroughSkeletalMeshActor*>       spawnedVehicles;                                  		// 0x00026C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cFlythroughSpawnerActor");
		return pClassPointer;
	};

public:
	void DestroyFlythroughActor(int nActorIndex,unsigned char actorType);//APBGame.cFlythroughSpawnerActor.DestroyFlythroughActor
	void DestroyAllFlythroughActors(unsigned char actorType);//APBGame.cFlythroughSpawnerActor.DestroyAllFlythroughActors
	void SpawnFlythroughActor(FVector3 characterLocation,FRotator characterRotation,int meshIndex,unsigned char actorType);//APBGame.cFlythroughSpawnerActor.SpawnFlythroughActor
};
UClass* AcFlythroughSpawnerActor::pClassPointer = NULL;

//0x000004 (0x001DB4 - 0x001DB0)
//cGangPerfCar[0x1DF8E530]
class AcGangPerfCar : public AcAPBVehicle
{
public:
	class UGolemobileBase*                             VehicleBaseHACK;                                  		// 0x001DB0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cGangPerfCar");
		return pClassPointer;
	};
};
UClass* AcGangPerfCar::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cHostingSubscription[0x1DF8E400]
class UcHostingSubscription : public UObject
{
public:
	class UcHostingClient*                             m_HostingClient;                                  		// 0x000040 (0x0004)              
	struct FScriptDelegate                             ___OnSubscriptionInfo__Delegate;                  		// 0x000044 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cHostingSubscription");
		return pClassPointer;
	};

public:
	void Init(class UcHostingClient* Client);//APBGame.cHostingSubscription.Init
	void _OnSubscriptionInfo(int nRemainingSecondsHourly,int nRemainingSecondsMonthly);//APBGame.cHostingSubscription._OnSubscriptionInfo
	void OnSubscriptionInfo(int nRemainingSecondsHourly,int nRemainingSecondsMonthly);//APBGame.cHostingSubscription.OnSubscriptionInfo
};
UClass* UcHostingSubscription::pClassPointer = NULL;

//0x00000C (0x00026C - 0x000260)
//cObjectReferencer[0x1DF8E2D0]
class AcObjectReferencer : public AActor
{
public:
	TArray<class UObject*>                             m_pReferences;                                    		// 0x000260 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cObjectReferencer");
		return pClassPointer;
	};
};
UClass* AcObjectReferencer::pClassPointer = NULL;

//0x000000 (0x000278 - 0x000278)
//cPausedEmitter[0x1DF8E1A0]
class AcPausedEmitter : public AEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPausedEmitter");
		return pClassPointer;
	};
};
UClass* AcPausedEmitter::pClassPointer = NULL;

//0x000000 (0x0002CC - 0x0002CC)
//cPersonalGraffitiDisplayPoint[0x1DF8E070]
class AcPersonalGraffitiDisplayPoint : public AcCustomGraffitiDisplayPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPersonalGraffitiDisplayPoint");
		return pClassPointer;
	};
};
UClass* AcPersonalGraffitiDisplayPoint::pClassPointer = NULL;

//0x000004 (0x00032C - 0x000328)
//cPhysicsCube[0x1DF8DF40]
class AcPhysicsCube : public AKActor
{
public:
	unsigned long                                      bForceAwake : 1;                                  		// 0x000328 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPhysicsCube");
		return pClassPointer;
	};

public:
	void Tick(float DeltaTime);//APBGame.cPhysicsCube.Tick
};
UClass* AcPhysicsCube::pClassPointer = NULL;

//0x000003 (0x0002F0 - 0x0002ED)
//cPlayerGraffitiDisplayPointPlaceholder[0x1DF8DE10]
class AcPlayerGraffitiDisplayPointPlaceholder : public AcPlayerGraffitiDisplayPoint
{
public:
	unsigned char                                      _0x0002ED[0x3];                                   		// 0x0002ED (0x0003) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerGraffitiDisplayPointPlaceholder");
		return pClassPointer;
	};
};
UClass* AcPlayerGraffitiDisplayPointPlaceholder::pClassPointer = NULL;

//0x000000 (0x000280 - 0x000280)
//cPlayerVehicleSpawnPoint[0x1DF8DCE0]
class AcPlayerVehicleSpawnPoint : public AcPlaceholderLocator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPlayerVehicleSpawnPoint");
		return pClassPointer;
	};
};
UClass* AcPlayerVehicleSpawnPoint::pClassPointer = NULL;

//0x000000 (0x0000A0 - 0x0000A0)
//cPropComponent_PlayAnimation[0x1DF8DBB0]
class UcPropComponent_PlayAnimation : public UcPropComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cPropComponent_PlayAnimation");
		return pClassPointer;
	};
};
UClass* UcPropComponent_PlayAnimation::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cRamRaidTriggerVolume[0x1DF8DA80]
class AcRamRaidTriggerVolume : public AcTaskTargetTriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cRamRaidTriggerVolume");
		return pClassPointer;
	};
};
UClass* AcRamRaidTriggerVolume::pClassPointer = NULL;

//0x000000 (0x000274 - 0x000274)
//cSkeletalMeshDLODActor[0x1DF8D950]
class AcSkeletalMeshDLODActor : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSkeletalMeshDLODActor");
		return pClassPointer;
	};
};
UClass* AcSkeletalMeshDLODActor::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//cSpriteActor[0x1DF8D820]
class AcSpriteActor : public AActor
{
public:
	class USpriteComponent*                            DisplayComponent;                                 		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cSpriteActor");
		return pClassPointer;
	};
};
UClass* AcSpriteActor::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cTaskOperation[0x1DF8D6F0]
class UcTaskOperation : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTaskOperation");
		return pClassPointer;
	};
};
UClass* UcTaskOperation::pClassPointer = NULL;

//0x00000C (0x00026C - 0x000260)
//cTempHitMarker[0x1DF8D5C0]
class AcTempHitMarker : public AActor
{
public:
	class USkeletalMeshComponent*                      m_Mesh;                                           		// 0x000260 (0x0004)              
	float                                              m_DisplayTime;                                    		// 0x000264 (0x0004)              
	float                                              m_RemoveTime;                                     		// 0x000268 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cTempHitMarker");
		return pClassPointer;
	};

public:
	void PostBeginPlay();//APBGame.cTempHitMarker.PostBeginPlay
	void Timer();//APBGame.cTempHitMarker.Timer
	void SetColour(DWORD Colour);//APBGame.cTempHitMarker.SetColour
};
UClass* AcTempHitMarker::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//cVendorVolume[0x1DF8D490]
class AcVendorVolume : public AcAPBTriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVendorVolume");
		return pClassPointer;
	};
};
UClass* AcVendorVolume::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//cVisualFX_PropAggregate_ArsonBombing[0x1DF8D360]
class UcVisualFX_PropAggregate_ArsonBombing : public UcVisualFX_Aggregate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_PropAggregate_ArsonBombing");
		return pClassPointer;
	};
};
UClass* UcVisualFX_PropAggregate_ArsonBombing::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//cVisualFX_PropAggregate_ArsonTaskEntrance[0x1DF8D230]
class UcVisualFX_PropAggregate_ArsonTaskEntrance : public UcVisualFX_PropAggregate_TaskEntrance
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_PropAggregate_ArsonTaskEntrance");
		return pClassPointer;
	};
};
UClass* UcVisualFX_PropAggregate_ArsonTaskEntrance::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//cVisualFX_PropAggregate_TaskEntrance[0x1DF8D100]
class UcVisualFX_PropAggregate_TaskEntrance : public UcVisualFX_Aggregate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_PropAggregate_TaskEntrance");
		return pClassPointer;
	};
};
UClass* UcVisualFX_PropAggregate_TaskEntrance::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//cVisualFX_PropAggregate_Bombing[0x1DF8CFD0]
class UcVisualFX_PropAggregate_Bombing : public UcVisualFX_Aggregate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_PropAggregate_Bombing");
		return pClassPointer;
	};
};
UClass* UcVisualFX_PropAggregate_Bombing::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//cVisualFX_PropAggregate_Burglary[0x1DF8CEA0]
class UcVisualFX_PropAggregate_Burglary : public UcVisualFX_Aggregate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_PropAggregate_Burglary");
		return pClassPointer;
	};
};
UClass* UcVisualFX_PropAggregate_Burglary::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//cVisualFX_PropAggregate_BurglaryVandalism[0x1DF8CD70]
class UcVisualFX_PropAggregate_BurglaryVandalism : public UcVisualFX_Aggregate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_PropAggregate_BurglaryVandalism");
		return pClassPointer;
	};
};
UClass* UcVisualFX_PropAggregate_BurglaryVandalism::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//cVisualFX_PropAggregate_ForcedEntry[0x1DF8CC40]
class UcVisualFX_PropAggregate_ForcedEntry : public UcVisualFX_Aggregate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_PropAggregate_ForcedEntry");
		return pClassPointer;
	};
};
UClass* UcVisualFX_PropAggregate_ForcedEntry::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//cVisualFX_PropAggregate_ShopFront[0x1DF8CB10]
class UcVisualFX_PropAggregate_ShopFront : public UcVisualFX_Aggregate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_PropAggregate_ShopFront");
		return pClassPointer;
	};
};
UClass* UcVisualFX_PropAggregate_ShopFront::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//cVisualFX_Task_Arson_Vehicle[0x1DF8C9E0]
class UcVisualFX_Task_Arson_Vehicle : public UcVisualFX_Task_Arson
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_Task_Arson_Vehicle");
		return pClassPointer;
	};
};
UClass* UcVisualFX_Task_Arson_Vehicle::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//cVisualFX_VehicleAggregate[0x1DF8C8B0]
class UcVisualFX_VehicleAggregate : public UcVisualFX_Aggregate
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.cVisualFX_VehicleAggregate");
		return pClassPointer;
	};
};
UClass* UcVisualFX_VehicleAggregate::pClassPointer = NULL;

//0x000000 (0x0002A8 - 0x0002A8)
//DirectionalCurveLight[0x1DF8C780]
class ADirectionalCurveLight : public ACurveLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.DirectionalCurveLight");
		return pClassPointer;
	};
};
UClass* ADirectionalCurveLight::pClassPointer = NULL;

//0x000000 (0x000284 - 0x000284)
//DynamicSMPropActor[0x1DF8C650]
class ADynamicSMPropActor : public ASMPropActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.DynamicSMPropActor");
		return pClassPointer;
	};
};
UClass* ADynamicSMPropActor::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//iPropActor[0x1DF8C520]
class UiPropActor : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.iPropActor");
		return pClassPointer;
	};

public:
	void SetMaterialDamageLevel(float fLevel);//APBGame.iPropActor.SetMaterialDamageLevel
	int RetVariant();//APBGame.iPropActor.RetVariant
	void SetEmissiveLevel(float fLevel);//APBGame.iPropActor.SetEmissiveLevel
	float RetEmissiveLevel();//APBGame.iPropActor.RetEmissiveLevel
	float RetMaterialDamageLevel();//APBGame.iPropActor.RetMaterialDamageLevel
	void SetVariant(int nVariant);//APBGame.iPropActor.SetVariant
};
UClass* UiPropActor::pClassPointer = NULL;

//0x000000 (0x000680 - 0x000680)
//RTWLCCFemalePawn[0x1DF8C3F0]
class ARTWLCCFemalePawn : public ARTWLCCPawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWLCCFemalePawn");
		return pClassPointer;
	};
};
UClass* ARTWLCCFemalePawn::pClassPointer = NULL;

//0x00000C (0x000414 - 0x000408)
//RTWLCCGameInfo[0x1DF8C2C0]
class ARTWLCCGameInfo : public AGameInfo
{
public:
	struct FString                                     DefaultPawnClassName;                             		// 0x000408 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWLCCGameInfo");
		return pClassPointer;
	};

public:
	bool RestartPlayer(class AController* NewPlayer);//APBGame.RTWLCCGameInfo.RestartPlayer
	bool AllowCheats(class APlayerController* P);//APBGame.RTWLCCGameInfo.AllowCheats
	class UClass* GetDefaultPlayerClass(class AController* C);//APBGame.RTWLCCGameInfo.GetDefaultPlayerClass
	void PostLogin(class APlayerController* NewPlayer);//APBGame.RTWLCCGameInfo.PostLogin
};
UClass* ARTWLCCGameInfo::pClassPointer = NULL;

//0x000004 (0x00050C - 0x000508)
//RTWLCCHUD[0x1DF8C190]
class ARTWLCCHUD : public AHUD
{
public:
	class UTexture2D*                                  HUDTexture;                                       		// 0x000508 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWLCCHUD");
		return pClassPointer;
	};

public:
	void DrawHUD();//APBGame.RTWLCCHUD.DrawHUD
};
UClass* ARTWLCCHUD::pClassPointer = NULL;

//0x000000 (0x000680 - 0x000680)
//RTWLCCMalePawn[0x1DF8C060]
class ARTWLCCMalePawn : public ARTWLCCPawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWLCCMalePawn");
		return pClassPointer;
	};
};
UClass* ARTWLCCMalePawn::pClassPointer = NULL;

//0x000004 (0x0006D0 - 0x0006CC)
//RTWLCCPlayerController[0x1DF8BF30]
class ARTWLCCPlayerController : public AcHostingPlayerController
{
public:
	unsigned long                                      bKeyReleased : 1;                                 		// 0x0006CC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWLCCPlayerController");
		return pClassPointer;
	};

public:
	void UpdateCameraRotation();//APBGame.RTWLCCPlayerController.UpdateCameraRotation
	void UpdateCustomisation();//APBGame.RTWLCCPlayerController.UpdateCustomisation
	void SymbolEditor();//APBGame.RTWLCCPlayerController.SymbolEditor
};
UClass* ARTWLCCPlayerController::pClassPointer = NULL;

//0x000000 (0x000164 - 0x000164)
//RTWLCCPlayerInput[0x1DF8BE00]
class URTWLCCPlayerInput : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWLCCPlayerInput");
		return pClassPointer;
	};
};
UClass* URTWLCCPlayerInput::pClassPointer = NULL;

//0x000000 (0x000408 - 0x000408)
//RTWLVCGameInfo[0x1DF8BCD0]
class ARTWLVCGameInfo : public AGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWLVCGameInfo");
		return pClassPointer;
	};

public:
	bool RestartPlayer(class AController* NewPlayer);//APBGame.RTWLVCGameInfo.RestartPlayer
	bool AllowCheats(class APlayerController* P);//APBGame.RTWLVCGameInfo.AllowCheats
};
UClass* ARTWLVCGameInfo::pClassPointer = NULL;

//0x000004 (0x0006D0 - 0x0006CC)
//RTWLVCPlayerController[0x1DF8BBA0]
class ARTWLVCPlayerController : public AcHostingPlayerController
{
public:
	unsigned long                                      bKeyReleased : 1;                                 		// 0x0006CC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.RTWLVCPlayerController");
		return pClassPointer;
	};

public:
	void UpdateCameraRotation();//APBGame.RTWLVCPlayerController.UpdateCameraRotation
	void SymbolEditor();//APBGame.RTWLVCPlayerController.SymbolEditor
	void UpdateCustomisation();//APBGame.RTWLVCPlayerController.UpdateCustomisation
};
UClass* ARTWLVCPlayerController::pClassPointer = NULL;

//0x000000 (0x000284 - 0x000284)
//StaticSMPropActor[0x1DF8BA70]
class AStaticSMPropActor : public ASMPropActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.StaticSMPropActor");
		return pClassPointer;
	};
};
UClass* AStaticSMPropActor::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//APBServerCommandlet[0x10354F90]
class UAPBServerCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class APBGame.APBServerCommandlet");
		return pClassPointer;
	};
};
UClass* UAPBServerCommandlet::pClassPointer = NULL;

#ifdef _MSC_VER
	#pragma pack(pop)
#endif