
/*
-----------------------------------------------------------------
 - UConst
-----------------------------------------------------------------
*/
#define CONST_NUM_NPC_TYPES                                      6
#define CONST_TRACEFLAG_Bullet                                   1
#define CONST_TRACEFLAG_PhysicsVolumes                           2
#define CONST_TRACEFLAG_SkipMovers                               4
#define CONST_TRACEFLAG_Blocking                                 8
#define CONST_REP_RBLOCATION_ERROR_TOLERANCE_SQ                  16.0f
#define CONST_TRACEFLAG_Targeting                                16
#define CONST_MINFLOORZ                                          0.7
#define CONST_ACTORMAXSTEPHEIGHT                                 35.0
#define CONST_RBSTATE_LINVELSCALE                                10.0
#define CONST_RBSTATE_ANGVELSCALE                                1000.0
#define CONST_RB_None                                            0x00
#define CONST_RB_NeedsUpdate                                     0x01
#define CONST_RB_Sleeping                                        0x02
#define CONST_SDPG_NumBits                                       3
#define CONST_MAX_ACTIVE_CAMERA_ANIMS                            8
#define CONST_LATENT_MOVETOWARD                                  503
#define CONST_MAXPOSITIONERRORSQUARED                            3.0
#define CONST_MAXNEARZEROVELOCITYSQUARED                         9.0
#define CONST_MAXVEHICLEPOSITIONERRORSQUARED                     900.0
#define CONST_CLIENTADJUSTUPDATECOST                             180.0
#define CONST_MAXCLIENTUPDATEINTERVAL                            0.25
#define CONST_BLOCKEDPATHCOST                                    10000000
#define CONST_INFINITE_PATH_COST                                 10000000
#define CONST_COVERLINK_ExposureDot                              0.4f
#define CONST_COVERLINK_EdgeCheckDot                             0.25f
#define CONST_COVERLINK_EdgeExposureDot                          0.85f
#define CONST_COVERLINK_DangerDist                               1536.f
#define CONST_EDGE_NOT_FLAT_VALUE                                -10000000000000000
#define CONST_EDGE_NOT_FLAT_VALUE_THRESHOLD                      -1000000000000000
#define CONST_CONVERT_CM_SEC_TO_MPH                              0.022374
#define CONST_ACTORPROXYFLAG_None                                0x00
#define CONST_ACTORPROXYFLAG_Init                                0x01
#define CONST_ACTORPROXYFLAG_NetworkReferenced                   0x02
#define CONST_ACTORPROXYFLAG_NetworkReplicated                   0x04
#define CONST_ACTORPROXYFLAG_DistanceVisible                     0x08
#define CONST_ACTORPROXYFLAG_DistanceInferable                   0x10
#define CONST_ACTORPROXYFLAG_NoDelete                            0x20
#define CONST_ACTORPROXYFLAG_All                                 0x3F
#define CONST_COMMANDFLAG_Cyclic                                 0x0001
#define CONST_COMMANDFLAG_Local_Client_Debug                     0x0010
#define CONST_COMMANDFLAG_Local_Client_Release                   0x0020
#define CONST_COMMANDFLAG_Local_Server_Debug                     0x0040
#define CONST_COMMANDFLAG_Local_Server_Release                   0x0080
#define CONST_COMMANDFLAG_Client_To_Clients_Debug                0x0100
#define CONST_COMMANDFLAG_Client_To_Clients_Release              0x0200
#define CONST_COMMANDFLAG_Server_To_Clients_Debug                0x0400
#define CONST_COMMANDFLAG_Server_To_Clients_Release              0x0800
#define CONST_COMMANDFLAG_Client_To_Server_Debug                 0x1000
#define CONST_COMMANDFLAG_Client_To_Server_Release               0x2000
#define CONST_COMMANDFLAG_Local_Client                           0x0030
#define CONST_COMMANDFLAG_Local_Server                           0x00C0
#define CONST_COMMANDFLAG_Client_To_Clients                      0x0300
#define CONST_COMMANDFLAG_Server_To_Clients                      0x0C00
#define CONST_COMMANDFLAG_Client_To_Server                       0x3000
#define CONST_MaxPoints                                          20
#define CONST_MaxSegments                                        19
#define CONST_TEMP_SPLITSCREEN_INDEX                             0
#define CONST_PRIVATE_NotEditorSelectable                        0x001
#define CONST_PRIVATE_TreeHidden                                 0x002
#define CONST_PRIVATE_NotFocusable                               0x004
#define CONST_PRIVATE_NotDockable                                0x008
#define CONST_PRIVATE_NotRotatable                               0x010
#define CONST_PRIVATE_ManagedStyle                               0x020
#define CONST_PRIVATE_TreeHiddenRecursive                        0x042
#define CONST_PRIVATE_EditorNoDelete                             0x080
#define CONST_PRIVATE_EditorNoRename                             0x100
#define CONST_PRIVATE_EditorNoReparent                           0x200
#define CONST_PRIVATE_PropagateState                             0x400
#define CONST_PRIVATE_KeepFocusedState                           0x800
#define CONST_PRIVATE_Protected                                  0x380
#define CONST_ASPECTRATIO_Normal                                 1.333333f
#define CONST_ASPECTRATIO_Monitor                                1.25f
#define CONST_ASPECTRATIO_Widescreen                             1.777778f
#define CONST_DEFAULT_SIZE_X                                     1024
#define CONST_DEFAULT_SIZE_Y                                     768
#define CONST_SCENE_DATASTORE_TAG                                'SceneData'
#define CONST_MAX_SUPPORTED_GAMEPADS                             4
#define CONST_BACKGROUND_ALPHA                                   150
#define CONST_BORDER_X                                           10.0
#define CONST_BORDER_Y                                           5.0
#define CONST_NUM_PAGES_ON_INDEX                                 25
#define CONST_PAGE_TOGGLE_KEY                                    'Divide'
#define CONST_PAGE_BACK_KEY                                      'NumPadZero'
#define CONST_PAGE_BACK_KEY_ALT                                  'Escape'
#define CONST_PAGE_SELECT_KEY                                    'Enter'
#define CONST_PAGE_MOVEUP_KEY                                    'NumPadEight'
#define CONST_PAGE_MOVEDOWN_KEY                                  'NumPadTwo'
#define CONST_PAGE_MOVELEFT_KEY                                  'NumPadFour'
#define CONST_PAGE_MOVERIGHT_KEY                                 'NumPadSix'
#define CONST_PAGE_PGUP_KEY                                      'NumPadNine'
#define CONST_PAGE_PGDN_KEY                                      'NumPadThree'
#define CONST_PAGE_REFRESH_KEY                                   'NumPadFive'
#define CONST_MaxHistory                                         16
#define CONST_DEFAULT_UISKIN                                     "DefaultUISkin.DefaultSkin"
#define CONST_UnknownCellDataFieldName                           'NAME_None'
#define CONST_FIRST_DEFAULT_DATABINDING_INDEX                    100
#define CONST_TOOLTIP_BINDING_INDEX                              100
#define CONST_CONTEXTMENU_BINDING_INDEX                          101
#define CONST_ACTIVE_DISABLED_BINDING_INDEX                      102
#define CONST_ConsolePromptText                                  "(> "
#define CONST_cUILabelButtonBinding_ImageOverlay                 2
#define CONST_TEXT_CHANGED_NOTIFY_MASK                           0x1
#define CONST_INDEX_CHANGED_NOTIFY_MASK                          0x2
#define CONST_ConsolePromptText                                  "(> "
#define CONST_CAPTION_DATABINDING_INDEX                          0
#define CONST_TOOLTIP_DATABINDING_INDEX                          1
#define CONST_DESCRIPTION_DATABINDING_INDEX                      2
#define CONST_ResizeBufferPixels                                 5
#define CONST_UIKEY_MoveCursorLeft                               'UIKEY_MoveCursorLeft'
#define CONST_UIKEY_MoveCursorRight                              'UIKEY_MoveCursorRight'
#define CONST_PROGRESSBAR_VALUE_BINDING_INDEX                    0
#define CONST_PROGRESSBAR_PIVOT_POINT_BINDING_INDEX              1
#define CONST_NUM_SAVE_SLOTS_KEY                                 "NumSaveSlots"
#define CONST_DATA_STORE_ID_KEY                                  "DataStoreID"
#define CONST_SAVE_DATA_BLOB_NAME_KEY                            "DataBlobName"
#define CONST_SAVE_SYSTEM_VERSION_KEY                            "CloudSaveSystemVersion"
#define CONST_COMMON_DATA_SAVE_SLOT_INDEX                        -1
#define CONST_GET_SAVE_SLOT_ERROR                                -2
#define CONST_GET_SAVE_SLOT_INVALID                              -1
#define CONST_NULLCHARACTER                                      127
#define CONST_Ammo_None                                          0
#define CONST_CameraHandyCamPresetNone                           0
#define CONST_CameraShakePreset_None                             0
#define CONST_ClothingItemCategory_None                          0
#define CONST_Contact_None                                       0
#define CONST_CSA_InputMapping_None                              0
#define CONST_DisplayPoint_None                                  0
#define CONST_District_None                                      0
#define CONST_Equipment_Equipment__None                          0
#define CONST_GolemPartClass_None                                0
#define CONST_HeatActionAffect_None                              0
#define CONST_HeatActionAffect_EndMission                        1
#define CONST_HeatActionAffect_StartMissionAsOwner               2
#define CONST_HeatLevel_None                                     0
#define CONST_HUDColour_None                                     0
#define CONST_DMM_None                                           0
#define CONST_HUDIcon_None                                       0
#define CONST_HUDMarkerOffset_None                               0
#define CONST_HUDMarkerOffset_UseAutoRouteLocation               1
#define CONST_HUDMarkerVisual_None                               0
#define CONST_HUDMarkerVisual_MinigameDebugLocation              1
#define CONST_HUDTaskMarker_None                                 0
#define CONST_HUDTextureIcon_None                                0
#define CONST_InventoryItemInfraCategory_None                    0
#define CONST_InventoryItemInfraCategory_MarketplaceCash         1
#define CONST_InventoryItemType_None                             0
#define CONST_InventoryItemType_Equipment__None                  1
#define CONST_InventoryItemType_Mod_None                         2
#define CONST_InventoryItemType_Mod_Vacant                       3
#define CONST_InventoryItemType_Reward_GenericReward             4
#define CONST_InventoryItemType_Reward_LeagueReward              5
#define CONST_InventoryItemType_Reward_RedemptionKeyReward       6
#define CONST_InventoryItemType_Token_DisplayPoint               7
#define CONST_InventoryItemType_Usable_None                      8
#define CONST_Any                                                0
#define CONST_MissionUIMissionTemplateProfile_None               0
#define CONST_ModifierCategory_None                              0
#define CONST_Modifier_Mod_None                                  0
#define CONST_Modifier_Mod_Vacant                                1
#define CONST_NotorietyEffect_None                               0
#define CONST_NotorietyLevel_None                                0
#define CONST_OpenWorldOperation_None                            0
#define CONST_PrestigeEffect_None                                0
#define CONST_PrestigeLevel_None                                 0
#define CONST_ShopUIFilter_Ammo                                  0
#define CONST_ShopUIFilter_Armory_ItemCat_Ammo                   1
#define CONST_ShopUIFilter_ItemCat_All                           2
#define CONST_ShopUIFilter_None                                  3
#define CONST_ShopUIFilterRestriction_None                       0
#define CONST_TaskItemTag_None                                   0
#define CONST_TaskObjective_None                                 0
#define CONST_TaskObjective_OppositionDefault                    1
#define CONST_TaskOperation_None                                 0
#define CONST_TaskOperation_OppositionDefault                    1
#define CONST_MissionUITaskOperationProfile_None                 0
#define CONST_MissionUITaskOperationProfile_Simple               1
#define CONST_TaskTargetAllocation_A_None                        0
#define CONST_VehicleCritical_None                               0
#define CONST_VehicleDamageHandlingEffect_NoDamage               0
#define CONST_VehicleDamageLevel_NoDamage                        0
#define CONST_Modifier_Vehicle_Mod_None                          0
#define CONST_Modifier_Vehicle_Mod_Vacant                        1
#define CONST_VehicleUIComponentCategory_None                    0
#define CONST_VFXType_None                                       0
#define CONST_WeaponCurve_None                                   0
#define CONST_WeaponLoadout_None                                 0
#define CONST_WeaponLoadout_Empty                                1
#define CONST_Unlock_WeaponSkin_None                             0
#define CONST_Weapon_None                                        0
#define CONST_WitnessableCrime_None                              0
#define CONST_WitnessableCrime_CSA_End                           1
#define CONST_EXTENDED_NODE_TYPES                                7
#define CONST_NOTEXTENDED                                        0
#define CONST_BDPNODE                                            1
#define CONST_BJDPNODE                                           2
#define CONST_SDDPNODE                                           4
#define CONST_SDNODE                                             8
#define CONST_VDPNODE                                            16
#define CONST_VNODE                                              32

/*
-----------------------------------------------------------------
 - UEnum
-----------------------------------------------------------------
*/
enum ESliderType
{
	ST_1D = 0,
	ST_2D = 1,
	ST_MAX = 2,
};
enum EAnimAimDir
{
	ANIMAIM_LEFTUP = 0,
	ANIMAIM_CENTERUP = 1,
	ANIMAIM_RIGHTUP = 2,
	ANIMAIM_LEFTCENTER = 3,
	ANIMAIM_CENTERCENTER = 4,
	ANIMAIM_RIGHTCENTER = 5,
	ANIMAIM_LEFTDOWN = 6,
	ANIMAIM_CENTERDOWN = 7,
	ANIMAIM_RIGHTDOWN = 8,
	ANIMAIM_MAX = 9,
};
enum ERootBoneAxis
{
	RBA_Default = 0,
	RBA_Discard = 1,
	RBA_Translate = 2,
	RBA_MAX = 3,
};
enum ERootRotationOption
{
	RRO_Default = 0,
	RRO_Discard = 1,
	RRO_Extract = 2,
	RRO_MAX = 3,
};
enum EBaseBlendType
{
	BBT_ByActorTag = 0,
	BBT_ByActorClass = 1,
	BBT_MAX = 2,
};
enum etUserTypes
{
	kUT_NPCPedestrian = 0,
	kUT_NPCVehicle = 1,
	kUT_PlayerOnFoot = 2,
	kUT_PlayerVehicle = 3,
	kUT_UnhingedProp = 4,
	kUT_MAX = 5,
};
enum EPhysics
{
	PHYS_None = 0,
	PHYS_Walking = 1,
	PHYS_Falling = 2,
	PHYS_Rotating = 3,
	PHYS_Projectile = 4,
	PHYS_Interpolating = 5,
	PHYS_RigidBody = 6,
	PHYS_Unused = 7,
	PHYS_MAX = 8,
};
enum EMoveDir
{
	MD_Stationary = 0,
	MD_Forward = 1,
	MD_Backward = 2,
	MD_Left = 3,
	MD_Right = 4,
	MD_Up = 5,
	MD_Down = 6,
	MD_MAX = 7,
};
enum ENetRole
{
	ROLE_None = 0,
	ROLE_SimulatedProxy = 1,
	ROLE_AutonomousProxy = 2,
	ROLE_Authority = 3,
	ROLE_MAX = 4,
};
enum etDamageInfoType
{
	DAMAGEINFO_INVALID = 0,
	DAMAGEINFO_Explosion = 1,
	DAMAGEINFO_RayWeapon = 2,
	DAMAGEINFO_COUNT = 3,
	DAMAGEINFO_MAX = 4,
};
enum ECollisionType
{
	COLLIDE_CustomDefault = 0,
	COLLIDE_NoCollision = 1,
	COLLIDE_BlockAll = 2,
	COLLIDE_BlockWeapons = 3,
	COLLIDE_TouchAll = 4,
	COLLIDE_TouchWeapons = 5,
	COLLIDE_BlockAllButWeapons = 6,
	COLLIDE_TouchAllButWeapons = 7,
	COLLIDE_BlockAllButWeaponsAndProjectiles = 8,
	COLLIDE_MAX = 9,
};
enum ETravelType
{
	TRAVEL_Absolute = 0,
	TRAVEL_Partial = 1,
	TRAVEL_Relative = 2,
	TRAVEL_MAX = 3,
};
enum ECsgOper
{
	CSG_Active = 0,
	CSG_Add = 1,
	CSG_Subtract = 2,
	CSG_Intersect = 3,
	CSG_Deintersect = 4,
	CSG_MAX = 5,
};
enum EStreamingVolumeUsage
{
	SVB_Loading = 0,
	SVB_LoadingAndVisibility = 1,
	SVB_VisibilityBlockingOnLoad = 2,
	SVB_BlockingOnLoad = 3,
	SVB_LoadingNotVisible = 4,
	SVB_MAX = 5,
};
enum ParticleDecalMode
{
	PDM_Modulate = 0,
	PDM_Add = 1,
	PDM_MAX = 2,
};
enum ParticleDecalProjection
{
	PDP_Box = 0,
	PDP_Cone = 1,
	PDP_Sphere = 2,
	PDP_MAX = 3,
};
enum ELightAffectsClassification
{
	LAC_USER_SELECTED = 0,
	LAC_DYNAMIC_AFFECTING = 1,
	LAC_STATIC_AFFECTING = 2,
	LAC_DYNAMIC_AND_STATIC_AFFECTING = 3,
	LAC_MAX = 4,
};
enum ELightShadowMode
{
	LightShadow_Normal = 0,
	LightShadow_Modulate = 1,
	LightShadow_ModulateBetter = 2,
	LightShadow_MAX = 3,
};
enum EShadowProjectionTechnique
{
	ShadowProjTech_Default = 0,
	ShadowProjTech_PCF = 1,
	ShadowProjTech_VSM = 2,
	ShadowProjTech_BPCF_Low = 3,
	ShadowProjTech_BPCF_Medium = 4,
	ShadowProjTech_BPCF_High = 5,
	ShadowProjTech_MAX = 6,
};
enum EShadowFilterQuality
{
	SFQ_Low = 0,
	SFQ_Medium = 1,
	SFQ_High = 2,
	SFQ_MAX = 3,
};
enum ESceneDepthPriorityGroup
{
	SDPG_UnrealEdBackground = 0,
	SDPG_World = 1,
	SDPG_Foreground = 2,
	SDPG_UnrealEdForeground = 3,
	SDPG_PostProcess = 4,
	SDPG_MAX = 5,
};
enum EDetailMode
{
	DM_Low = 0,
	DM_Medium = 1,
	DM_High = 2,
	DM_MAX = 3,
};
enum ERBCollisionChannel
{
	RBCC_Default = 0,
	RBCC_Nothing = 1,
	RBCC_Pawn = 2,
	RBCC_Vehicle = 3,
	RBCC_Water = 4,
	RBCC_GameplayPhysics = 5,
	RBCC_EffectPhysics = 6,
	RBCC_Untitled1 = 7,
	RBCC_Untitled2 = 8,
	RBCC_Untitled3 = 9,
	RBCC_Untitled4 = 10,
	RBCC_Cloth = 11,
	RBCC_FluidDrain = 12,
	RBCC_SoftBody = 13,
	RBCC_MAX = 14,
};
enum etAPBPrimitiveType
{
	APBPT_Unknown = 0,
	APBPT_PlayerCharacter = 1,
	APBPT_PlayerVehicle = 2,
	APBPT_NPCPedestrian = 3,
	APBPT_NPCVehicle = 4,
	APBPT_MAX = 5,
};
enum etTNTStatPrimitiveType
{
	kTNTPT_Unknown = 0,
	kTNTPT_Building = 1,
	kTNTPT_BuildingCollision = 2,
	kTNTPT_Road = 3,
	kTNTPT_Terrain = 4,
	kTNTPT_StaticProp = 5,
	kTNTPT_cProp = 6,
	kTNTPT_FeatureGroup = 7,
	kTNTPT_PlayerCharacter = 8,
	kTNTPT_PlayerVehicle = 9,
	kTNTPT_NPC = 10,
	kTNTPT_NPCVehicle = 11,
	kTNTPT_Graffiti = 12,
	kTNTPT_Statue = 13,
	kTNTPT_Decal = 14,
	kTNTPT_Holdable = 15,
	kTNTPT_ParticleSystem = 16,
	kTNTPT_Misc = 17,
	kTNTPT_Contact = 18,
	kTNTPT_Foliage = 19,
	kTNTPT_MAX = 20,
};
enum ERadialImpulseFalloff
{
	RIF_Constant = 0,
	RIF_Linear = 1,
	RIF_MAX = 2,
};
enum ESleepFamily
{
	SF_Normal = 0,
	SF_Sensitive = 1,
	SF_Vehicle = 2,
	SF_MAX = 3,
};
enum EFilterMode
{
	FM_None = 0,
	FM_Ignore = 1,
	FM_Affect = 2,
	FM_MAX = 3,
};
enum EInfluenceType
{
	Fluid_Flow = 0,
	Fluid_Raindrops = 1,
	Fluid_Wave = 2,
	Fluid_Sphere = 3,
	Fluid_MAX = 4,
};
enum ERootMotionMode
{
	RMM_Translate = 0,
	RMM_Velocity = 1,
	RMM_Ignore = 2,
	RMM_Accel = 3,
	RMM_APB_Cosmetic = 4,
	RMM_MAX = 5,
};
enum ERootMotionRotationMode
{
	RMRM_Ignore = 0,
	RMRM_RotateActor = 1,
	RMRM_MAX = 2,
};
enum EFaceFXBlendMode
{
	FXBM_Overwrite = 0,
	FXBM_Additive = 1,
	FXBM_MAX = 2,
};
enum EFaceFXRegOp
{
	FXRO_Add = 0,
	FXRO_Multiply = 1,
	FXRO_Replace = 2,
	FXRO_MAX = 3,
};
enum EParticleSystemUpdateMode
{
	EPSUM_RealTime = 0,
	EPSUM_FixedTime = 1,
	EPSUM_MAX = 2,
};
enum ParticleSystemLODMethod
{
	PARTICLESYSTEMLODMETHOD_Automatic = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet = 1,
	PARTICLESYSTEMLODMETHOD_MAX = 2,
};
enum EParticleSysParamType
{
	PSPT_None = 0,
	PSPT_Scalar = 1,
	PSPT_Vector = 2,
	PSPT_Color = 3,
	PSPT_Actor = 4,
	PSPT_Material = 5,
	PSPT_MAX = 6,
};
enum EParticleEventType
{
	EPET_Any = 0,
	EPET_Spawn = 1,
	EPET_Death = 2,
	EPET_Collision = 3,
	EPET_Kismet = 4,
	EPET_MAX = 5,
};
enum ESceneCaptureViewMode
{
	SceneCapView_Lit = 0,
	SceneCapView_Unlit = 1,
	SceneCapView_LitNoShadows = 2,
	SceneCapView_Wire = 3,
	SceneCapView_MAX = 4,
};
enum FFB_ForceFieldCoordinates
{
	FFB_CARTESIAN = 0,
	FFB_SPHERICAL = 1,
	FFB_CYLINDRICAL = 2,
	FFB_TOROIDAL = 3,
	FFB_MAX = 4,
};
enum ReverbPreset
{
	REVERB_Default = 0,
	REVERB_Bathroom = 1,
	REVERB_StoneRoom = 2,
	REVERB_Auditorium = 3,
	REVERB_ConcertHall = 4,
	REVERB_Cave = 5,
	REVERB_Hallway = 6,
	REVERB_StoneCorridor = 7,
	REVERB_Alley = 8,
	REVERB_Forest = 9,
	REVERB_City = 10,
	REVERB_Mountains = 11,
	REVERB_Quarry = 12,
	REVERB_Plain = 13,
	REVERB_ParkingLot = 14,
	REVERB_SewerPipe = 15,
	REVERB_Underwater = 16,
	REVERB_SmallRoom = 17,
	REVERB_MediumRoom = 18,
	REVERB_LargeRoom = 19,
	REVERB_MediumHall = 20,
	REVERB_LargeHall = 21,
	REVERB_Plate = 22,
	REVERB_MAX = 23,
};
enum EProxyBehaviour
{
	PROXYBEHAVIOUR_Default = 0,
	PROXYBEHAVIOUR_Always = 1,
	PROXYBEHAVIOUR_Never = 2,
	PROXYBEHAVIOUR_MAX = 3,
};
enum EViewTargetBlendFunction
{
	VTBlend_Linear = 0,
	VTBlend_Cubic = 1,
	VTBlend_EaseIn = 2,
	VTBlend_EaseOut = 3,
	VTBlend_EaseInOut = 4,
	VTBlend_MAX = 5,
};
enum EOnlineDataAdvertisementType
{
	ODAT_DontAdvertise = 0,
	ODAT_OnlineService = 1,
	ODAT_QoS = 2,
	ODAT_OnlineServiceAndQoS = 3,
	ODAT_MAX = 4,
};
enum ESettingsDataType
{
	SDT_Empty = 0,
	SDT_Int32 = 1,
	SDT_Int64 = 2,
	SDT_Double = 3,
	SDT_String = 4,
	SDT_Float = 5,
	SDT_Blob = 6,
	SDT_DateTime = 7,
	SDT_MAX = 8,
};
enum EPropertyValueMappingType
{
	PVMT_RawValue = 0,
	PVMT_PredefinedValues = 1,
	PVMT_Ranged = 2,
	PVMT_IdMapped = 3,
	PVMT_MAX = 4,
};
enum EAuthStatus
{
	AUS_NotStarted = 0,
	AUS_Pending = 1,
	AUS_Authenticated = 2,
	AUS_Failed = 3,
	AUS_MAX = 4,
};
enum ELoginStatus
{
	LS_NotLoggedIn = 0,
	LS_UsingLocalProfile = 1,
	LS_LoggedIn = 2,
	LS_MAX = 3,
};
enum EFeaturePrivilegeLevel
{
	FPL_Disabled = 0,
	FPL_EnabledFriendsOnly = 1,
	FPL_Enabled = 2,
	FPL_MAX = 3,
};
enum ENetworkNotificationPosition
{
	NNP_TopLeft = 0,
	NNP_TopCenter = 1,
	NNP_TopRight = 2,
	NNP_CenterLeft = 3,
	NNP_Center = 4,
	NNP_CenterRight = 5,
	NNP_BottomLeft = 6,
	NNP_BottomCenter = 7,
	NNP_BottomRight = 8,
	NNP_MAX = 9,
};
enum EOnlineGameState
{
	OGS_NoSession = 0,
	OGS_Pending = 1,
	OGS_Starting = 2,
	OGS_InProgress = 3,
	OGS_Ending = 4,
	OGS_Ended = 5,
	OGS_MAX = 6,
};
enum EOnlineEnumerationReadState
{
	OERS_NotStarted = 0,
	OERS_InProgress = 1,
	OERS_Done = 2,
	OERS_Failed = 3,
	OERS_MAX = 4,
};
enum EOnlineFriendState
{
	OFS_Offline = 0,
	OFS_Online = 1,
	OFS_Away = 2,
	OFS_Busy = 3,
	OFS_MAX = 4,
};
enum EOnlineContentType
{
	OCT_Downloaded = 0,
	OCT_SaveGame = 1,
	OCT_MAX = 2,
};
enum EOnlineServerConnectionStatus
{
	OSCS_NotConnected = 0,
	OSCS_Connected = 1,
	OSCS_ConnectionDropped = 2,
	OSCS_NoNetworkConnection = 3,
	OSCS_ServiceUnavailable = 4,
	OSCS_UpdateRequired = 5,
	OSCS_ServersTooBusy = 6,
	OSCS_DuplicateLoginDetected = 7,
	OSCS_InvalidUser = 8,
	OSCS_MAX = 9,
};
enum ENATType
{
	NAT_Unknown = 0,
	NAT_Open = 1,
	NAT_Moderate = 2,
	NAT_Strict = 3,
	NAT_MAX = 4,
};
enum ELanBeaconState
{
	LANB_NotUsingLanBeacon = 0,
	LANB_Hosting = 1,
	LANB_Searching = 2,
	LANB_MAX = 3,
};
enum EOnlineAccountCreateStatus
{
	OACS_CreateSuccessful = 0,
	OACS_UnknownError = 1,
	OACS_InvalidUserName = 2,
	OACS_InvalidPassword = 3,
	OACS_InvalidUniqueUserName = 4,
	OACS_UniqueUserNameInUse = 5,
	OACS_ServiceUnavailable = 6,
	OACS_MAX = 7,
};
enum EOnlineNewsType
{
	ONT_Unknown = 0,
	ONT_GameNews = 1,
	ONT_ContentAnnouncements = 2,
	ONT_Misc = 3,
	ONT_MAX = 4,
};
enum EOnlineGameSearchEntryType
{
	OGSET_Property = 0,
	OGSET_LocalizedSetting = 1,
	OGSET_ObjectProperty = 2,
	OGSET_MAX = 3,
};
enum EOnlineGameSearchComparisonType
{
	OGSCT_Equals = 0,
	OGSCT_NotEquals = 1,
	OGSCT_GreaterThan = 2,
	OGSCT_GreaterThanEquals = 3,
	OGSCT_LessThan = 4,
	OGSCT_LessThanEquals = 5,
	OGSCT_MAX = 6,
};
enum EOnlineGameSearchSortType
{
	OGSSO_Ascending = 0,
	OGSSO_Descending = 1,
	OGSSO_MAX = 2,
};
enum EInputTypes
{
	IT_XAxis = 0,
	IT_YAxis = 1,
	IT_MAX = 2,
};
enum EInputMatchAction
{
	IMA_GreaterThan = 0,
	IMA_LessThan = 1,
	IMA_MAX = 2,
};
enum EProgressMessageType
{
	PMT_Clear = 0,
	PMT_Information = 1,
	PMT_AdminMessage = 2,
	PMT_DownloadProgress = 3,
	PMT_ConnectionFailure = 4,
	PMT_PeerConnectionFailure = 5,
	PMT_PeerHostMigrationFailure = 6,
	PMT_SocketFailure = 7,
	PMT_MAX = 8,
};
enum EAgentMoveState
{
	EAMS_Move = 0,
	EAMS_Idle = 1,
	EAMS_MAX = 2,
};
enum ECrowdAttractorMode
{
	ECAM_MoveTarget = 0,
	ECAM_Repulsor = 1,
	ECAM_MAX = 2,
};
enum ENodeTypes
{
	ENavigationPoint = 0,
	E_LiftCenter = 1,
	E_LiftExit = 2,
	E_Objective = 3,
	E_PathNode = 4,
	E__CoverNode = 5,
	E__VolumePathNode = 6,
	E_PickupFactory = 7,
	E_PlayerStart = 8,
	E_RWTechNode = 9,
	E__Pedestrian = 10,
	E__Road = 11,
	E_Teleporter = 12,
	E__RoadLane = 13,
	E__VehicleFeature = 14,
	E__PedestrianCrossingLane = 15,
	E__PavementLane = 16,
	E__PedestrianFeature = 17,
	ENodeTypes_MAX = 18,
};
enum ECoverAction
{
	CA_Default = 0,
	CA_BlindLeft = 1,
	CA_BlindRight = 2,
	CA_LeanLeft = 3,
	CA_LeanRight = 4,
	CA_StepLeft = 5,
	CA_StepRight = 6,
	CA_PopUp = 7,
	CA_BlindUp = 8,
	CA_PeekLeft = 9,
	CA_PeekRight = 10,
	CA_PeekUp = 11,
	CA_MAX = 12,
};
enum ECoverDirection
{
	CD_Default = 0,
	CD_Left = 1,
	CD_Right = 2,
	CD_Up = 3,
	CD_MAX = 4,
};
enum ECoverType
{
	CT_None = 0,
	CT_Standing = 1,
	CT_MidLevel = 2,
	CT_MAX = 3,
};
enum ECoverLocationDescription
{
	CoverDesc_None = 0,
	CoverDesc_InWindow = 1,
	CoverDesc_InDoorway = 2,
	CoverDesc_BehindCar = 3,
	CoverDesc_BehindTruck = 4,
	CoverDesc_OnTruck = 5,
	CoverDesc_BehindBarrier = 6,
	CoverDesc_BehindColumn = 7,
	CoverDesc_BehindCrate = 8,
	CoverDesc_BehindWall = 9,
	CoverDesc_BehindStatue = 10,
	CoverDesc_BehindSandbags = 11,
	CoverDesc_MAX = 12,
};
enum EDoorType
{
	DOOR_Shoot = 0,
	DOOR_Touch = 1,
	DOOR_MAX = 2,
};
enum ECoverGroupFillAction
{
	CGFA_Overwrite = 0,
	CGFA_Add = 1,
	CGFA_Remove = 2,
	CGFA_Clear = 3,
	CGFA_Cylinder = 4,
	CGFA_MAX = 5,
};
enum FWFileType
{
	FWFT_Log = 0,
	FWFT_Stats = 1,
	FWFT_HTML = 2,
	FWFT_User = 3,
	FWFT_Debug = 4,
	FWFT_MAX = 5,
};
enum EStandbyType
{
	STDBY_Rx = 0,
	STDBY_Tx = 1,
	STDBY_BadPing = 2,
	STDBY_MAX = 3,
};
enum ERouteFillAction
{
	RFA_Overwrite = 0,
	RFA_Add = 1,
	RFA_Remove = 2,
	RFA_Clear = 3,
	RFA_MAX = 4,
};
enum ERouteDirection
{
	ERD_Forward = 0,
	ERD_Reverse = 1,
	ERD_MAX = 2,
};
enum ERouteType
{
	ERT_Linear = 0,
	ERT_Loop = 1,
	ERT_Circle = 2,
	ERT_MAX = 3,
};
enum EAmbientOcclusionQuality
{
	AO_High = 0,
	AO_Medium = 1,
	AO_Low = 2,
	AO_MAX = 3,
};
enum EWorldState
{
	WORLDSTATE_Initial = 0,
	WORLDSTATE_LevelsLoaded_WaitingReady = 1,
	WORLDSTATE_Ready = 2,
	WORLDSTATE_MAX = 3,
};
enum ENetMode
{
	NM_Standalone = 0,
	NM_DedicatedServer = 1,
	NM_ListenServer = 2,
	NM_Client = 3,
	NM_MAX = 4,
};
enum EConsoleType
{
	CONSOLE_Any = 0,
	CONSOLE_Xbox360 = 1,
	CONSOLE_PS3 = 2,
	CONSOLE_MAX = 3,
};
enum etPhysCorrectMode
{
	kPHYS_CORRECT_None = 0,
	kPHYS_CORRECT_Epic = 1,
	kPHYS_CORRECT_Predicted = 2,
	kPHYS_CORRECT_MAX = 3,
};
enum etTimeOfDayMode
{
	kTODM_Accelerated = 0,
	kTODM_Fixed = 1,
	kTODM_MAX = 2,
};
enum EHostMigrationProgress
{
	HostMigration_None = 0,
	HostMigration_FindingNewHost = 1,
	HostMigration_MigratingAsHost = 2,
	HostMigration_MigratingAsClient = 3,
	HostMigration_ClientTravel = 4,
	HostMigration_HostReadyToTravel = 5,
	HostMigration_Failed = 6,
	HostMigration_MAX = 7,
};
enum EWeaponFireType
{
	EWFT_InstantHit = 0,
	EWFT_Projectile = 1,
	EWFT_Custom = 2,
	EWFT_None = 3,
	EWFT_MAX = 4,
};
enum FFG_ForceFieldCoordinates
{
	FFG_CARTESIAN = 0,
	FFG_SPHERICAL = 1,
	FFG_CYLINDRICAL = 2,
	FFG_TOROIDAL = 3,
	FFG_MAX = 4,
};
enum etTurnType
{
	eLeft = 0,
	eRight = 1,
	eNoTurn = 2,
	etTurnType_MAX = 3,
};
enum etVehicleTypes
{
	eCar = 0,
	eBus = 1,
	etVehicleTypes_MAX = 2,
};
enum EPathSearchType
{
	PST_Default = 0,
	PST_Breadth = 1,
	PST_NewBestPathTo = 2,
	PST_Constraint = 3,
	PST_MAX = 4,
};
enum EScalingRule
{
	eSCALINGRULE_NoScaling = 0,
	eSCALINGRULE_UniformOnly = 1,
	eSCALINGRULE_AnyScaling = 2,
	eSCALINGRULE_MAX = 3,
};
enum EPrefabInstanceState
{
	PIS_Uninitialised = 0,
	PIS_Instantiated = 1,
	PIS_PoolInstantiated = 2,
	PIS_PoolFree = 3,
	PIS_Destroyed = 4,
	PIS_MAX = 5,
};
enum ERadialForceType
{
	RFT_Force = 0,
	RFT_Impulse = 1,
	RFT_MAX = 2,
};
enum AnimationCompressionFormat
{
	ACF_None = 0,
	ACF_Float96NoW = 1,
	ACF_Fixed48NoW = 2,
	ACF_IntervalFixed32NoW = 3,
	ACF_Fixed32NoW = 4,
	ACF_Float32NoW = 5,
	ACF_MAX = 6,
};
enum etAnimNotifyCategory
{
	ANIMNOTIFYCATEGORY_GENERAL = 0,
	ANIMNOTIFYCATEGORY_AUDIO = 1,
	ANIMNOTIFYCATEGORY_MAX = 2,
};
enum etAnimSetAnimationCategory
{
	ASAC_Unknown = 0,
	ASAC_Weapons = 1,
	ASAC_Props = 2,
	ASAC_GenerapProps = 3,
	ASAC_Vehicle = 4,
	ASAC_Character = 5,
	ASAC_Character_CharacterStudio = 6,
	ASAC_Character_Contacts = 7,
	ASAC_Character_Contacts_Social = 8,
	ASAC_Character_LC = 9,
	ASAC_Character_Vehicle = 10,
	ASAC_Character_CSAs = 11,
	ASAC_Character_Emote = 12,
	ASAC_Character_DeathAndImpact = 13,
	ASAC_Character_Weapons = 14,
	ASAC_Character_Player = 15,
	ASAC_MAX = 16,
};
enum ESoundMode
{
	SOUNDMODE_NORMAL = 0,
	SOUNDMODE_SLOWMOTION = 1,
	SOUNDMODE_DEATH = 2,
	SOUNDMODE_COVER = 3,
	SOUNDMODE_ROADIE_RUN = 4,
	SOUNDMODE_TACCOM = 5,
	SOUNDMODE_RADIO = 6,
	SOUNDMODE_MAX = 7,
};
enum etMode
{
	kMODE_ProcessArguments = 0,
	kMODE_CyclePrevious = 1,
	kMODE_CycleNext = 2,
	kMODE_MAX = 3,
};
enum EPointSelection
{
	PS_Normal = 0,
	PS_Random = 1,
	PS_Reverse = 2,
	PS_MAX = 3,
};
enum EMaterialAdjustmentType
{
	ADJUST_None = 0,
	ADJUST_Normal = 1,
	ADJUST_Justified = 2,
	ADJUST_Bound = 3,
	ADJUST_Stretch = 4,
	ADJUST_MAX = 5,
};
enum EPositionEvalType
{
	EVALPOS_None = 0,
	EVALPOS_PixelViewport = 1,
	EVALPOS_PixelScene = 2,
	EVALPOS_PixelOwner = 3,
	EVALPOS_PercentageViewport = 4,
	EVALPOS_PercentageOwner = 5,
	EVALPOS_PercentageScene = 6,
	EVALPOS_PercentageViewportWS = 7,
	EVALPOS_MAX = 8,
};
enum EUIExtentEvalType
{
	UIEXTENTEVAL_Pixels = 0,
	UIEXTENTEVAL_PercentSelf = 1,
	UIEXTENTEVAL_PercentOwner = 2,
	UIEXTENTEVAL_PercentScene = 3,
	UIEXTENTEVAL_PercentViewport = 4,
	UIEXTENTEVAL_UIListPercentRemaining = 5,
	UIEXTENTEVAL_MAX = 6,
};
enum EUIDockPaddingEvalType
{
	UIPADDINGEVAL_Pixels = 0,
	UIPADDINGEVAL_PercentTarget = 1,
	UIPADDINGEVAL_PercentOwner = 2,
	UIPADDINGEVAL_PercentScene = 3,
	UIPADDINGEVAL_PercentViewport = 4,
	UIPADDINGEVAL_MAX = 5,
};
enum EUIAutoSizeConstraintType
{
	UIAUTOSIZEREGION_Minimum = 0,
	UIAUTOSIZEREGION_Maximum = 1,
	UIAUTOSIZEREGION_MAX = 2,
};
enum ETextClipMode
{
	CLIP_None = 0,
	CLIP_Normal = 1,
	CLIP_Ellipsis = 2,
	CLIP_Wrap = 3,
	CLIP_MAX = 4,
};
enum ETextAutoScaleMode
{
	UIAUTOSCALE_None = 0,
	UIAUTOSCALE_Normal = 1,
	UIAUTOSCALE_Justified = 2,
	UIAUTOSCALE_ResolutionBased = 3,
	UIAUTOSCALE_MAX = 4,
};
enum EUIAlignment
{
	UIALIGN_Left = 0,
	UIALIGN_Center = 1,
	UIALIGN_Right = 2,
	UIALIGN_Default = 3,
	UIALIGN_MAX = 4,
};
enum EUIListElementState
{
	ELEMENT_Normal = 0,
	ELEMENT_Active = 1,
	ELEMENT_Selected = 2,
	ELEMENT_Pressed = 3,
	ELEMENT_Dragged = 4,
	ELEMENT_UnderCursor = 5,
	ELEMENT_MAX = 6,
};
enum EColumnHeaderState
{
	COLUMNHEADER_Normal = 0,
	COLUMNHEADER_PrimarySort = 1,
	COLUMNHEADER_SecondarySort = 2,
	COLUMNHEADER_MAX = 3,
};
enum EUIThumnailListItemState
{
	THUMBNAIL_Normal = 0,
	THUMBNAIL_Selected = 1,
	THUMBNAIL_Dragged = 2,
	THUMBNAIL_Disabled = 3,
	THUMBNAIL_MouseOver = 4,
	THUMBNAIL_MAX = 5,
};
enum EUIOrientation
{
	UIORIENT_Horizontal = 0,
	UIORIENT_Vertical = 1,
	UIORIENT_MAX = 2,
};
enum EUIWidgetFace
{
	UIFACE_Left = 0,
	UIFACE_Top = 1,
	UIFACE_Right = 2,
	UIFACE_Bottom = 3,
	UIFACE_MAX = 4,
};
enum EUIAspectRatioConstraint
{
	UIASPECTRATIO_AdjustNone = 0,
	UIASPECTRATIO_AdjustWidthViewport = 1,
	UIASPECTRATIO_AdjustHeightViewport = 2,
	UIASPECTRATIO_AdjustWidthWidget = 3,
	UIASPECTRATIO_AdjustHeightWidget = 4,
	UIASPECTRATIO_MAX = 5,
};
enum EUIDefaultPenColor
{
	UIPEN_White = 0,
	UIPEN_Black = 1,
	UIPEN_Grey = 2,
	UIPEN_MAX = 3,
};
enum ENavigationLinkType
{
	NAVLINK_Automatic = 0,
	NAVLINK_Manual = 1,
	NAVLINK_MAX = 2,
};
enum EScreenInputMode
{
	INPUTMODE_None = 0,
	INPUTMODE_Locked = 1,
	INPUTMODE_MatchingOnly = 2,
	INPUTMODE_ActiveOnly = 3,
	INPUTMODE_Free = 4,
	INPUTMODE_Simultaneous = 5,
	INPUTMODE_MAX = 6,
};
enum ESplitscreenRenderMode
{
	SPLITRENDER_Fullscreen = 0,
	SPLITRENDER_PlayerOwner = 1,
	SPLITRENDER_MAX = 2,
};
enum EUIDataProviderFieldType
{
	DATATYPE_Property = 0,
	DATATYPE_Provider = 1,
	DATATYPE_RangeProperty = 2,
	DATATYPE_Collection = 3,
	DATATYPE_ProviderCollection = 4,
	DATATYPE_MAX = 5,
};
enum ERotationAnchor
{
	RA_Absolute = 0,
	RA_Center = 1,
	RA_PivotLeft = 2,
	RA_PivotRight = 3,
	RA_PivotTop = 4,
	RA_PivotBottom = 5,
	RA_UpperLeft = 6,
	RA_UpperRight = 7,
	RA_LowerLeft = 8,
	RA_LowerRight = 9,
	RA_MAX = 10,
};
enum EInputPlatformType
{
	IPT_PC = 0,
	IPT = 1,
	IPT_PS3 = 2,
	IPT_MAX = 3,
};
enum EUIAnimType
{
	EAT_None = 0,
	EAT_Position = 1,
	EAT_RelPosition = 2,
	EAT_Rotation = 3,
	EAT_RelRotation = 4,
	EAT_Color = 5,
	EAT_Opacity = 6,
	EAT_Visibility = 7,
	EAT_Scale = 8,
	EAT_Left = 9,
	EAT_Top = 10,
	EAT_Right = 11,
	EAT_Bottom = 12,
	EAT_MAX = 13,
};
enum EUIAnimNotifyType
{
	EANT_WidgetFunction = 0,
	EANT_SceneFunction = 1,
	EANT_KismetEvent = 2,
	EANT_Sound = 3,
	EANT_MAX = 4,
};
enum EProviderAccessType
{
	ACCESS_ReadOnly = 0,
	ACCESS_PerField = 1,
	ACCESS_WriteAll = 2,
	ACCESS_MAX = 3,
};
enum EStatsFetchType
{
	SFT_Player = 0,
	SFT_CenteredOnPlayer = 1,
	SFT_Friends = 2,
	SFT_TopRankings = 3,
	SFT_MAX = 4,
};
enum EUIDragAndDropOperation
{
	EUIDNDOP_None = 0,
	EUIDNDOP_InsertDrop = 1,
	EUIDNDOP_InsertDrop_RemoveDrag = 2,
	EUIDNDOP_ModifyDrop = 3,
	EUIDNDOP_ModifyDrop_RemoveDrag = 4,
	EUIDNDOP_MAX = 5,
};
enum EFocusActionResultIndex
{
	FOCUSACTRESULT_Success = 0,
	FOCUSACTRESULT_Failure = 1,
	FOCUSACTRESULT_MAX = 2,
};
enum EFeaturePrivilegeMode
{
	FPM_Online = 0,
	FPM_Chat = 1,
	FPM_DownloadUserContent = 2,
	FPM_PurchaseContent = 3,
	FPM_MAX = 4,
};
enum ECalloutButtonLayoutType
{
	CBLT_None = 0,
	CBLT_DockLeft = 1,
	CBLT_DockRight = 2,
	CBLT_MAX = 3,
};
enum EFrameBoxImage
{
	FBI_TopLeft = 0,
	FBI_Top = 1,
	FBI_TopRight = 2,
	FBI_CenterLeft = 3,
	FBI_Center = 4,
	FBI_CenterRight = 5,
	FBI_BottomLeft = 6,
	FBI_Bottom = 7,
	FBI_BottomRight = 8,
	FBI_MAX = 9,
};
enum ESafeRegionType
{
	ESRT_FullRegion = 0,
	ESRT_TextSafeRegion = 1,
	ESRT_MAX = 2,
};
enum EEditBoxCharacterSet
{
	CHARSET_All = 0,
	CHARSET_NoSpecial = 1,
	CHARSET_AlphaOnly = 2,
	CHARSET_NumericOnly = 3,
	CHARSET_APB_AccountName = 4,
	CHARSET_APB_CharacterName = 5,
	CHARSET_AlphaNumeric = 6,
	CHARSET_APB_Password = 7,
	CHARSET_APB_ItemName = 8,
	CHARSET_NaturalNumber = 9,
	CHARSET_APB_CharacterNameUnlimited = 10,
	CHARSET_APB_LicensePlate = 11,
	CHARSET_MAX = 12,
};
enum ECellAutoSizeMode
{
	CELLAUTOSIZE_None = 0,
	CELLAUTOSIZE_Uniform = 1,
	CELLAUTOSIZE_Constrain = 2,
	CELLAUTOSIZE_AdjustList = 3,
	CELLAUTOSIZE_FillRemaining = 4,
	CELLAUTOSIZE_MAX = 5,
};
enum ECellLinkType
{
	LINKED_None = 0,
	LINKED_Rows = 1,
	LINKED_Columns = 2,
	LINKED_MAX = 3,
};
enum EListWrapBehavior
{
	LISTWRAP_None = 0,
	LISTWRAP_Smooth = 1,
	LISTWRAP_Jump = 2,
	LISTWRAP_MAX = 3,
};
enum EContextMenuItemType
{
	CMIT_Normal = 0,
	CMIT_Submenu = 1,
	CMIT_Separator = 2,
	CMIT_Check = 3,
	CMIT_Radio = 4,
	CMIT_MAX = 5,
};
enum EUITabAutosizeType
{
	TAST_Manual = 0,
	TAST_Fill = 1,
	TAST_Auto = 2,
	TAST_Const = 3,
	TAST_MAX = 4,
};
enum ESceneLayer
{
	SceneLayer_HUD_WS = 0,
	SceneLayer_HUD_2D = 1,
	SceneLayer_MainDialog = 2,
	SceneLayer_CustomCanvas = 3,
	SceneLayer_CustomScene = 4,
	SceneLayer_CustomMain = 5,
	SceneLayer_ChatDialog = 6,
	SceneLayer_MessageDialog = 7,
	SceneLayer_MAX = 8,
};
enum ECondIsFocusedResultIndex
{
	ISFOCUSEDRESULT_True = 0,
	ISFOCUSEDRESULT_False = 1,
	ISFOCUSEDRESULT_MAX = 2,
};
enum EParticleEventOutputType
{
	ePARTICLEOUT_Spawn = 0,
	ePARTICLEOUT_Death = 1,
	ePARTICLEOUT_Collision = 2,
	ePARTICLEOUT_Kismet = 3,
	ePARTICLEOUT_MAX = 4,
};
enum EEventOnMouseOverResultIndex
{
	ONLISTCELLMOUSEOVERRESULT_Active = 0,
	ONLISTCELLMOUSEOVERRESULT_OnLeave = 1,
	ONLISTCELLMOUSEOVERRESULT_MAX = 2,
};
enum etAINodeType
{
	eVignetteNode = 0,
	eVignetteDecisionPoint = 1,
	eSpawnPoint = 2,
	eNone = 3,
	etAINodeType_MAX = 4,
};
enum EPlatformInterfaceDataType
{
	PIDT_None = 0,
	PIDT_Int = 1,
	PIDT_Float = 2,
	PIDT_String = 3,
	PIDT_Object = 4,
	PIDT_Custom = 5,
	PIDT_MAX = 6,
};
enum ECloudStorageDelegate
{
	CSD_KeyValueReadComplete = 0,
	CSD_KeyValueWriteComplete = 1,
	CSD_ValueChanged = 2,
	CSD_DocumentQueryComplete = 3,
	CSD_DocumentReadComplete = 4,
	CSD_DocumentWriteComplete = 5,
	CSD_DocumentConflictDetected = 6,
	CSD_MAX = 7,
};
enum EFacebookIntegrationDelegate
{
	FID_AuthorizationComplete = 0,
	FID_FacebookRequestComplete = 1,
	FID_DialogComplete = 2,
	FID_FriendsListComplete = 3,
	FID_MAX = 4,
};
enum EInAppMessageInterfaceDelegate
{
	IAMD_InAppSMSUIComplete = 0,
	IAMD_InAppEmailComplete = 1,
	IAMD_MAX = 2,
};
enum EAdManagerDelegate
{
	AMD_ClickedBanner = 0,
	AMD_UserClosedAd = 1,
	AMD_MAX = 2,
};
enum EMicroTransactionDelegate
{
	MTD_PurchaseQueryComplete = 0,
	MTD_PurchaseComplete = 1,
	MTD_MAX = 2,
};
enum EMicroTransactionResult
{
	MTR_Succeeded = 0,
	MTR_Failed = 1,
	MTR_Canceled = 2,
	MTR_RestoredFromServer = 3,
	MTR_MAX = 4,
};
enum ETwitterRequestMethod
{
	TRM_Get = 0,
	TRM_Post = 1,
	TRM_Delete = 2,
	TRM_MAX = 3,
};
enum ETwitterIntegrationDelegate
{
	TID_AuthorizeComplete = 0,
	TID_TweetUIComplete = 1,
	TID_RequestComplete = 2,
	TID_MAX = 3,
};
enum SaveDataVersionSupport
{
	SaveDataVersionSupportLessThenEqual = 0,
	SaveDataVersionSupportEqual = 1,
	SaveDataVersionSupportAny = 2,
	SaveDataVersionSupport_MAX = 3,
};
enum SaveSlotOperationEnum
{
	SSO_SET = 0,
	SSO_GET = 1,
	SSO_DELETE = 2,
	SSO_MAX = 3,
};
enum DistributionParamMode
{
	DPM_Normal = 0,
	DPM_Abs = 1,
	DPM_Direct = 2,
	DPM_MAX = 3,
};
enum ETransitionType
{
	TT_None = 0,
	TT_Paused = 1,
	TT_Loading = 2,
	TT_Saving = 3,
	TT_Connecting = 4,
	TT_Precaching = 5,
	TT_MAX = 6,
};
enum EFullyLoadPackageType
{
	FULLYLOAD_Map = 0,
	FULLYLOAD_Game_PreLoadClass = 1,
	FULLYLOAD_Game_PostLoadClass = 2,
	FULLYLOAD_Always = 3,
	FULLYLOAD_MAX = 4,
};
enum EFontImportCharacterSet
{
	FontICS_Default = 0,
	FontICS_Ansi = 1,
	FontICS_Symbol = 2,
	FontICS_MAX = 3,
};
enum EWaveformFunction
{
	WF_Constant = 0,
	WF_LinearIncreasing = 1,
	WF_LinearDecreasing = 2,
	WF_Sin0to90 = 3,
	WF_Sin90to180 = 4,
	WF_Sin0to180 = 5,
	WF_Noise = 6,
	WF_MAX = 7,
};
enum ESplitScreenType
{
	eSST_NONE = 0,
	eSST_2P_HORIZONTAL = 1,
	eSST_2P_VERTICAL = 2,
	eSST_3P_FAVOR_TOP = 3,
	eSST_3P_FAVOR_BOTTOM = 4,
	eSST_4P = 5,
	eSST_COUNT = 6,
	eSST_NOVALUE = 7,
	eSST_MAX = 8,
};
enum ESafeZoneType
{
	eSZ_TOP = 0,
	eSZ_BOTTOM = 1,
	eSZ_LEFT = 2,
	eSZ_RIGHT = 3,
	eSZ_MAX = 4,
};
enum EInterpTrackMoveFrame
{
	IMF_World = 0,
	IMF_RelativeToInitial = 1,
	IMF_MAX = 2,
};
enum EInterpTrackMoveRotMode
{
	IMR_Keyframed = 0,
	IMR_LookAtGroup = 1,
	IMR_MAX = 2,
};
enum ETrackToggleAction
{
	ETTA_Off = 0,
	ETTA_On = 1,
	ETTA_Toggle = 2,
	ETTA_MAX = 3,
};
enum ESceneTextureType
{
	SceneTex_Lighting = 0,
	SceneTex_Filter = 1,
	SceneTex_MAX = 2,
};
enum EMaterialVectorCoordTransform
{
	TRANSFORM_World = 0,
	TRANSFORM_View = 1,
	TRANSFORM_Local = 2,
	TRANSFORM_MAX = 3,
};
enum EMaterialPositionTransform
{
	TRANSFORMPOS_World = 0,
	TRANSFORMPOS_MAX = 1,
};
enum EOnlineProfilePropertyOwner
{
	OPPO_None = 0,
	OPPO_OnlineService = 1,
	OPPO_Game = 2,
	OPPO_MAX = 3,
};
enum EOnlinePlayerStorageAsyncState
{
	OPAS_NotStarted = 0,
	OPAS_Read = 1,
	OPAS_Write = 2,
	OPAS_Finished = 3,
	OPAS_MAX = 4,
};
enum EProfileSettingID
{
	PSI_Unknown = 0,
	PSI_ControllerVibration = 1,
	PSI_YInversion = 2,
	PSI_GamerCred = 3,
	PSI_GamerRep = 4,
	PSI_VoiceMuted = 5,
	PSI_VoiceThruSpeakers = 6,
	PSI_VoiceVolume = 7,
	PSI_GamerPictureKey = 8,
	PSI_GamerMotto = 9,
	PSI_GamerTitlesPlayed = 10,
	PSI_GamerAchievementsEarned = 11,
	PSI_GameDifficulty = 12,
	PSI_ControllerSensitivity = 13,
	PSI_PreferredColor1 = 14,
	PSI_PreferredColor2 = 15,
	PSI_AutoAim = 16,
	PSI_AutoCenter = 17,
	PSI_MovementControl = 18,
	PSI_RaceTransmission = 19,
	PSI_RaceCameraLocation = 20,
	PSI_RaceBrakeControl = 21,
	PSI_RaceAcceleratorControl = 22,
	PSI_GameCredEarned = 23,
	PSI_GameAchievementsEarned = 24,
	PSI_EndLiveIds = 25,
	PSI_ProfileVersionNum = 26,
	PSI_ProfileSaveCount = 27,
	PSI_MAX = 28,
};
enum EProfileDifficultyOptions
{
	PDO_Normal = 0,
	PDO_Easy = 1,
	PDO_Hard = 2,
	PDO_MAX = 3,
};
enum EProfileControllerSensitivityOptions
{
	PCSO_Medium = 0,
	PCSO_Low = 1,
	PCSO_High = 2,
	PCSO_MAX = 3,
};
enum EProfilePreferredColorOptions
{
	PPCO_None = 0,
	PPCO_Black = 1,
	PPCO_White = 2,
	PPCO_Yellow = 3,
	PPCO_Orange = 4,
	PPCO_Pink = 5,
	PPCO_Red = 6,
	PPCO_Purple = 7,
	PPCO_Blue = 8,
	PPCO_Green = 9,
	PPCO_Brown = 10,
	PPCO_Silver = 11,
	PPCO_MAX = 12,
};
enum EProfileAutoAimOptions
{
	PAAO_Off = 0,
	PAAO_On = 1,
	PAAO_MAX = 2,
};
enum EProfileAutoCenterOptions
{
	PACO_Off = 0,
	PACO_On = 1,
	PACO_MAX = 2,
};
enum EProfileMovementControlOptions
{
	PMCO_L_Thumbstick = 0,
	PMCO_R_Thumbstick = 1,
	PMCO_MAX = 2,
};
enum EProfileRaceTransmissionOptions
{
	PRTO_Auto = 0,
	PRTO_Manual = 1,
	PRTO_MAX = 2,
};
enum EProfileRaceCameraLocationOptions
{
	PRCLO_Behind = 0,
	PRCLO_Front = 1,
	PRCLO_Inside = 2,
	PRCLO_MAX = 3,
};
enum EProfileRaceBrakeControlOptions
{
	PRBCO_Trigger = 0,
	PRBCO_Button = 1,
	PRBCO_MAX = 2,
};
enum EProfileRaceAcceleratorControlOptions
{
	PRACO_Trigger = 0,
	PRACO_Button = 1,
	PRACO_MAX = 2,
};
enum EProfileYInversionOptions
{
	PYIO_Off = 0,
	PYIO_On = 1,
	PYIO_MAX = 2,
};
enum EProfileXInversionOptions
{
	PXIO_Off = 0,
	PXIO_On = 1,
	PXIO_MAX = 2,
};
enum EProfileOmniDirEvadeOptions
{
	PODI_Off = 0,
	PODI_On = 1,
	PODI_MAX = 2,
};
enum EProfileControllerVibrationToggleOptions
{
	PCVTO_Off = 0,
	PCVTO_IgnoreThis = 1,
	PCVTO_IgnoreThis2 = 2,
	PCVTO_On = 3,
	PCVTO_MAX = 4,
};
enum EProfileVoiceThruSpeakersOptions
{
	PVTSO_Off = 0,
	PVTSO_On = 1,
	PVTSO_Both = 2,
	PVTSO_MAX = 3,
};
enum EParticleBurstMethod
{
	EPBM_Instant = 0,
	EPBM_Interpolated = 1,
	EPBM_MAX = 2,
};
enum EParticleSubUVInterpMethod
{
	PSUVIM_None = 0,
	PSUVIM_Linear = 1,
	PSUVIM_Linear_Blend = 2,
	PSUVIM_Random = 3,
	PSUVIM_Random_Blend = 4,
	PSUVIM_MAX = 5,
};
enum EEmitterRenderMode
{
	ERM_Normal = 0,
	ERM_Point = 1,
	ERM_Cross = 2,
	ERM_None = 3,
	ERM_MAX = 4,
};
enum EParticleScreenAlignment
{
	PSA_Square = 0,
	PSA_Rectangle = 1,
	PSA_Velocity = 2,
	PSA_TypeSpecific = 3,
	PSA_MAX = 4,
};
enum EModuleType
{
	EPMT_General = 0,
	EPMT_TypeData = 1,
	EPMT_Beam = 2,
	EPMT_Trail = 3,
	EPMT_Spawn = 4,
	EPMT_Required = 5,
	EPMT_Event = 6,
	EPMT_MAX = 7,
};
enum EParticleSourceSelectionMethod
{
	EPSSM_Random = 0,
	EPSSM_Sequential = 1,
	EPSSM_MAX = 2,
};
enum EAttractorParticleSelectionMethod
{
	EAPSM_Random = 0,
	EAPSM_Sequential = 1,
	EAPSM_MAX = 2,
};
enum Beam2SourceTargetMethod
{
	PEB2STM_Default = 0,
	PEB2STM_UserSet = 1,
	PEB2STM_Emitter = 2,
	PEB2STM_Particle = 3,
	PEB2STM_Actor = 4,
	PEB2STM_MAX = 5,
};
enum Beam2SourceTargetTangentMethod
{
	PEB2STTM_Direct = 0,
	PEB2STTM_UserSet = 1,
	PEB2STTM_Distribution = 2,
	PEB2STTM_Emitter = 3,
	PEB2STTM_MAX = 4,
};
enum BeamModifierType
{
	PEB2MT_Source = 0,
	PEB2MT_Target = 1,
	PEB2MT_MAX = 2,
};
enum EParticleCollisionComplete
{
	EPCC_Kill = 0,
	EPCC_Freeze = 1,
	EPCC_HaltCollisions = 2,
	EPCC_FreezeTranslation = 3,
	EPCC_FreezeRotation = 4,
	EPCC_FreezeMovement = 5,
	EPCC_MAX = 6,
};
enum ELocationEmitterSelectionMethod
{
	ELESM_Random = 0,
	ELESM_Sequential = 1,
	ELESM_MAX = 2,
};
enum CylinderHeightAxis
{
	PMLPC_HEIGHTAXIS_X = 0,
	PMLPC_HEIGHTAXIS_Y = 1,
	PMLPC_HEIGHTAXIS_Z = 2,
	PMLPC_HEIGHTAXIS_MAX = 3,
};
enum EOrbitChainMode
{
	EOChainMode_Add = 0,
	EOChainMode_Scale = 1,
	EOChainMode_Link = 2,
	EOChainMode_MAX = 3,
};
enum EParticleAxisLock
{
	EPAL_NONE = 0,
	EPAL_X = 1,
	EPAL_Y = 2,
	EPAL_Z = 3,
	EPAL_NEGATIVE_X = 4,
	EPAL_NEGATIVE_Y = 5,
	EPAL_NEGATIVE_Z = 6,
	EPAL_ROTATE_X = 7,
	EPAL_ROTATE_Y = 8,
	EPAL_ROTATE_Z = 9,
	EPAL_MAX = 10,
};
enum ETrail2SourceMethod
{
	PET2SRCM_Default = 0,
	PET2SRCM_Particle = 1,
	PET2SRCM_Actor = 2,
	PET2SRCM_MAX = 3,
};
enum ETrail2SpawnMethod
{
	PET2SM_Emitter = 0,
	PET2SM_Velocity = 1,
	PET2SM_Distance = 2,
	PET2SM_MAX = 3,
};
enum ETrailTaperMethod
{
	PETTM_None = 0,
	PETTM_Full = 1,
	PETTM_Partial = 2,
	PETTM_MAX = 3,
};
enum EBeamMethod
{
	PEBM_Distance = 0,
	PEBM_EndPoints = 1,
	PEBM_EndPoints_Interpolated = 2,
	PEBM_UserSet_EndPoints = 3,
	PEBM_UserSet_EndPoints_Interpolated = 4,
	PEBM_MAX = 5,
};
enum EBeamEndPointMethod
{
	PEBEPM_Calculated = 0,
	PEBEPM_Distribution = 1,
	PEBEPM_Distribution_Constant = 2,
	PEBEPM_MAX = 3,
};
enum EBeam2Method
{
	PEB2M_Distance = 0,
	PEB2M_Target = 1,
	PEB2M_Branch = 2,
	PEB2M_MAX = 3,
};
enum EBeamTaperMethod
{
	PEBTM_None = 0,
	PEBTM_Full = 1,
	PEBTM_Partial = 2,
	PEBTM_MAX = 3,
};
enum EMeshScreenAlignment
{
	PSMA_MeshFaceCameraWithRoll = 0,
	PSMA_MeshFaceCameraWithSpin = 1,
	PSMA_MeshFaceCameraWithLockedAxis = 2,
	PSMA_MAX = 3,
};
enum EPhysXMeshRotationMethod
{
	PMRM_Disabled = 0,
	PMRM_Spherical = 1,
	PMRM_Box = 2,
	PMRM_LongBox = 3,
	PMRM_FlatBox = 4,
	PMRM_MAX = 5,
};
enum etActivityMessageLocation
{
	ActivityMessageLocation_ActionMessage = 0,
	ActivityMessageLocation_DistrictMapMessage = 1,
	ActivityMessageLocation_ChatMessage = 2,
	ActivityMessageLocation_StandardMessage = 3,
	ActivityMessageLocation_ScoreboardMessage = 4,
	ActivityMessageLocation_RespawnMessage = 5,
	ActivityMessageLocation_MAX = 6,
};
enum etActivityMessageParameterConversion
{
	AMPC_AchievementName = 0,
	AMPC_AmmoType = 1,
	AMPC_AssistName = 2,
	AMPC_CharacterName = 3,
	AMPC_ContactName = 4,
	AMPC_DailyActivityTitle = 5,
	AMPC_DisplayPointName = 6,
	AMPC_DistrictBlock = 7,
	AMPC_DistrictName = 8,
	AMPC_ElectiveSpawnUnavailableReason = 9,
	AMPC_GameplayObjectDescription = 10,
	AMPC_ItemDisplayName = 11,
	AMPC_JustificationText = 12,
	AMPC_Locale = 13,
	AMPC_LocationBeacon = 14,
	AMPC_MedalDescription = 15,
	AMPC_MedalName = 16,
	AMPC_MinigameName = 17,
	AMPC_Number = 18,
	AMPC_OfferType = 19,
	AMPC_OrganisationName = 20,
	AMPC_RatingLevelName = 21,
	AMPC_RewardDisplayName = 22,
	AMPC_RoleName = 23,
	AMPC_Score = 24,
	AMPC_SddRow_Contact = 25,
	AMPC_SddRow_Heat = 26,
	AMPC_SddRow_Medal = 27,
	AMPC_SddRow_Organisation = 28,
	AMPC_SddRow_RedeemableReward = 29,
	AMPC_SddRow_RewardDescription = 30,
	AMPC_SddRow_Role = 31,
	AMPC_StreetName = 32,
	AMPC_TaskMarkerIndex = 33,
	AMPC_ThreatLevelName = 34,
	AMPC_TutorialTitle = 35,
	AMPC_VehicleName = 36,
	AMPC_WeaponIcon = 37,
	AMPC_MAX = 38,
};
enum etAPBPawnConstant
{
	APBPawnConstant_ArrestTime = 0,
	APBPawnConstant_DistanceSprintedBeforeGameplayEvent = 1,
	APBPawnConstant_FallDeathMomentumScale = 2,
	APBPawnConstant_HitReactionAngleConstraint = 3,
	APBPawnConstant_ImmuneToDamageTimeInitial = 4,
	APBPawnConstant_ImmuneToDamageTimeOnRespawnExtended = 5,
	APBPawnConstant_ImmuneToDamageTimeOnRespawnNormal = 6,
	APBPawnConstant_ImmuneToStaminaDamageTime = 7,
	APBPawnConstant_ImmunityCheckDelay = 8,
	APBPawnConstant_ImmunityDistanceMax = 9,
	APBPawnConstant_JumpOffDamageBase = 10,
	APBPawnConstant_JumpOffDamageVelocityMultiplier = 11,
	APBPawnConstant_JumpOffFailDamage = 12,
	APBPawnConstant_JumpOffMinimalDamage = 13,
	APBPawnConstant_StaminaExhaustedThreshold = 14,
	APBPawnConstant_SwitchToUnarmedTime = 15,
	APBPawnConstant_WeaponAccuracyCooldownPerSecond = 16,
	APBPawnConstant_WeaponFireRateTechnicalLimit = 17,
	APBPawnConstant_MAX = 18,
};
enum etAPBViewportType
{
	VWT_16to9_Full = 0,
	VWT_4to3_Full = 1,
	VWT_MAX = 2,
};
enum etCameraConstant
{
	CameraConstant_CloseIn16_9BackAdjust = 0,
	CameraConstant_CloseIn16_9HeightAdjust = 1,
	CameraConstant_CloseIn16_9RightAdjust = 2,
	CameraConstant_CloseIn16_9RightAdjustPitchScalar = 3,
	CameraConstant_CloseIn4_3BackAdjust = 4,
	CameraConstant_CloseIn4_3HeightAdjust = 5,
	CameraConstant_CloseIn4_3RightAdjust = 6,
	CameraConstant_CloseIn4_3RightAdjustPitchScalar = 7,
	CameraConstant_CrouchAndSideSwapCameraRollSpeed = 8,
	CameraConstant_CrouchAndSideSwapCameraSpeed = 9,
	CameraConstant_CrouchCloseIn16_9BackAdjust = 10,
	CameraConstant_CrouchCloseIn16_9HeightAdjust = 11,
	CameraConstant_CrouchCloseIn16_9RightAdjust = 12,
	CameraConstant_CrouchCloseIn16_9RightAdjustPitchScalar = 13,
	CameraConstant_CrouchCloseIn4_3BackAdjust = 14,
	CameraConstant_CrouchCloseIn4_3HeightAdjust = 15,
	CameraConstant_CrouchCloseIn4_3RightAdjust = 16,
	CameraConstant_CrouchCloseIn4_3RightAdjustPitchScalar = 17,
	CameraConstant_CrouchFarOut16_9BackAdjust = 18,
	CameraConstant_CrouchFarOut16_9HeightAdjust = 19,
	CameraConstant_CrouchFarOut16_9RightAdjust = 20,
	CameraConstant_CrouchFarOut16_9RightAdjustPitchScalar = 21,
	CameraConstant_CrouchFarOut4_3BackAdjust = 22,
	CameraConstant_CrouchFarOut4_3HeightAdjust = 23,
	CameraConstant_CrouchFarOut4_3RightAdjust = 24,
	CameraConstant_CrouchFarOut4_3RightAdjustPitchScalar = 25,
	CameraConstant_FarOut16_9BackAdjust = 26,
	CameraConstant_FarOut16_9HeightAdjust = 27,
	CameraConstant_FarOut16_9RightAdjust = 28,
	CameraConstant_FarOut16_9RightAdjustPitchScalar = 29,
	CameraConstant_FarOut4_3BackAdjust = 30,
	CameraConstant_FarOut4_3HeightAdjust = 31,
	CameraConstant_FarOut4_3RightAdjust = 32,
	CameraConstant_FarOut4_3RightAdjustPitchScalar = 33,
	CameraConstant_HandyCamBlendFromSpeed = 34,
	CameraConstant_PenetrationBlendInTime = 35,
	CameraConstant_PenetrationBlendOutTime = 36,
	CameraConstant_SafeLocBlendSpeed = 37,
	CameraConstant_VaultFenceCameraRotationSpeed = 38,
	CameraConstant_ZoomSpeedPerSecond = 39,
	CameraConstant_MAX = 40,
};
enum etCameraHandyCamPresetExported
{
	CameraHandyCamPresetExported_None = 0,
	CameraHandyCamPresetExported_Debug = 1,
	CameraHandyCamPresetExported_Running = 2,
	CameraHandyCamPresetExported_Sprinting = 3,
	CameraHandyCamPresetExported_Walking = 4,
	CameraHandyCamPresetExported_MAX = 5,
};
enum etCameraShakePresetExported
{
	CameraShakePresetExported_None = 0,
	CameraShakePresetExported_APBScreenShake1 = 1,
	CameraShakePresetExported_APBScreenShake2 = 2,
	CameraShakePresetExported_APBScreenShake3 = 3,
	CameraShakePresetExported_APBScreenShake4 = 4,
	CameraShakePresetExported_APBScreenShake5 = 5,
	CameraShakePresetExported_APBScreenShake6 = 6,
	CameraShakePresetExported_HeavyLanding = 7,
	CameraShakePresetExported_MAX = 8,
};
enum etCapacityItemType
{
	Capacity_Clothing = 0,
	Capacity_Clothing = 1,
	Capacity_Clothing = 2,
	Capacity_Clothing = 3,
	Capacity_Clothing_Max = 4,
	Capacity_Outfit = 5,
	Capacity_Outfit = 6,
	Capacity_Outfit = 7,
	Capacity_Outfit_Max = 8,
	Capacity_Songs = 9,
	Capacity_Songs = 10,
	Capacity_Songs = 11,
	Capacity_Songs = 12,
	Capacity_Songs_Max = 13,
	Capacity_Symbol = 14,
	Capacity_Symbol = 15,
	Capacity_Symbol = 16,
	Capacity_Symbol = 17,
	Capacity_Symbol_Max = 18,
	Capacity_Themes = 19,
	Capacity_Themes = 20,
	Capacity_Themes = 21,
	Capacity_Themes = 22,
	Capacity_Themes_Max = 23,
	Capacity_Vehicle = 24,
	Capacity_Vehicle = 25,
	Capacity_Vehicle = 26,
	Capacity_Vehicle = 27,
	Capacity_Vehicle_Max = 28,
	Capacity_FnMod = 29,
	Capacity_Weapon = 30,
	Capacity_Clothing = 31,
	Capacity_Symbol = 32,
	Capacity_MAX = 33,
};
enum etCCameraMode
{
	CameraMode_None = 0,
	CameraMode_ADA = 1,
	CameraMode_AttachToActor = 2,
	CameraMode_Death = 3,
	CameraMode_DefaultCharacter = 4,
	CameraMode_Director = 5,
	CameraMode_Driving = 6,
	CameraMode_Fly = 7,
	CameraMode_LeanTowardScreenCentre = 8,
	CameraMode_MarksManShip = 9,
	CameraMode_Passenger = 10,
	CameraMode_Sprinting = 11,
	CameraMode_Unstick = 12,
	CameraMode_VehicleDeath = 13,
	CameraMode_VehicleMarksmanship = 14,
	CameraMode_MAX = 15,
};
enum etCharacterStatus
{
	GMS_None = 0,
	GMS_Dead = 1,
	GMS_TaskParticipant = 2,
	GMS_NonTaskParticipant = 3,
	GMS_Stunned = 4,
	GMS_Arrested = 5,
	GMS_Driving = 6,
	GMS_OutOfDistrict = 7,
	GMS_Ready = 8,
	GMS_DND = 9,
	GMS_AFK = 10,
	GMS_Disconnected = 11,
	GMS_MAX = 12,
};
enum etCharacterVOIPStatus
{
	VOIP_Active_High = 0,
	VOIP_Active_Low = 1,
	VOIP_Active_Medium = 2,
	VOIP_InChannel = 3,
	VOIP_Muted = 4,
	VOIP_None = 5,
	VOIP_NotInChannel = 6,
	VOIP_MAX = 7,
};
enum etChatConstant
{
	ChatConstant_SayRadius = 0,
	ChatConstant_YellRadius = 1,
	ChatConstant_MAX = 2,
};
enum etChatState
{
	kChatState_Normal = 0,
	kChatState_AFK = 1,
	kChatState_DND = 2,
	kChatState_MAX = 3,
};
enum etChatTag
{
	ChatTag_None = 0,
	ChatTag_Dev = 1,
	ChatTag_GM = 2,
	ChatTag_SPCM = 3,
	ChatTag_STAFF = 4,
	ChatTag_MAX = 5,
};
enum etClanRank
{
	Leader = 0,
	Officer = 1,
	Member = 2,
	etClanRank_MAX = 3,
};
enum etContactType
{
	ContactType_None = 0,
	ContactType_Ambient = 1,
	ContactType_Fixer = 2,
	ContactType_MissionProvider = 3,
	ContactType_Organisation = 4,
	ContactType_TurfContact = 5,
	ContactType_MAX = 6,
};
enum etContextSensitiveActionBase
{
	CSA_None = 0,
	CSA_AntiGraffiti = 1,
	CSA_Arrest = 2,
	CSA_Arrested = 3,
	CSA_AudioDisplayPoint = 4,
	CSA_BuildingBreakIn = 5,
	CSA_BuildingForcedEntry = 6,
	CSA_CargoInteraction = 7,
	CSA_CrimeSceneInvestigation = 8,
	CSA_CrimeSceneInvestigation_Vehicle = 9,
	CSA_DefuseBomb = 10,
	CSA_DefuseVehicleBomb = 11,
	CSA_DeployAmmoCarrier = 12,
	CSA_DropTaskItem = 13,
	CSA_EnterVehicle = 14,
	CSA_Graffiti = 15,
	CSA_GraffitiDisplayPoint_Billboard = 16,
	CSA_GraffitiDisplayPoint_Default = 17,
	CSA_GraffitiDisplayPoint_Targeted = 18,
	CSA_Hacking = 19,
	CSA_Hacking_Vehicle = 20,
	CSA_Hotwire = 21,
	CSA_InventoryAccess = 22,
	CSA_MugPlayer = 23,
	CSA_MugPlayerInvoked = 24,
	CSA_NPCForcibleArrest = 25,
	CSA_NPCMugging = 26,
	CSA_NPCStopSearch = 27,
	CSA_OpenAmmoPurchase = 28,
	CSA_OpenGarage = 29,
	CSA_OpenGiftBox = 30,
	CSA_OpenInventory = 31,
	CSA_OpenInventory_Legacy = 32,
	CSA_OpenLocker = 33,
	CSA_OpenMailBox = 34,
	CSA_OpenMarketPlace = 35,
	CSA_OpenMusicStudio = 36,
	CSA_OpenPersona = 37,
	CSA_OpenSymbolDesigner = 38,
	CSA_OpenWardrobe = 39,
	CSA_PassTaskItem = 40,
	CSA_PassTaskItemToCargoHold = 41,
	CSA_PickupTaskItem = 42,
	CSA_PickupTaskItem_Small = 43,
	CSA_PlantBomb = 44,
	CSA_PlantVehicleBomb = 45,
	CSA_PlayerFound = 46,
	CSA_PlayerInteractionMenu = 47,
	CSA_RCE_Door = 48,
	CSA_RCE_Fence = 49,
	CSA_RCE_Ladder = 50,
	CSA_ReceiveTaskItem = 51,
	CSA_ReceiveTaskItemFromCargoHold = 52,
	CSA_Rescue = 53,
	CSA_Rescued = 54,
	CSA_ResupplyAmmo = 55,
	CSA_ResupplyAmmo_Legacy = 56,
	CSA_Sabotage = 57,
	CSA_Sabotage_Vehicle = 58,
	CSA_SetAlight = 59,
	CSA_SetVehicleAlight = 60,
	CSA_SpawnVehicle = 61,
	CSA_SpawnVehicle_Legacy = 62,
	CSA_SpeakToContact = 63,
	CSA_StatueDisplayPoint = 64,
	CSA_VehicleBreakIn = 65,
	CSA_MAX = 66,
};
enum etCrimeTargetCategory
{
	CrimeTargetCategory_NPC = 0,
	CrimeTargetCategory_Vehicle = 1,
	CrimeTargetCategory_Environmental = 2,
	CrimeTargetCategory_Prop = 3,
	CrimeTargetCategory_Max = 4,
};
enum etCrimeTargetEnvironmental
{
	CrimeTargetEnvironmental_RamRaid = 0,
	CrimeTargetEnvironmental_Arson = 1,
	CrimeTargetEnvironmental_PickupPoint = 2,
	CrimeTargetEnvironmental_Graffiti = 3,
	CrimeTargetEnvironmental_MAX = 4,
};
enum etCrimeTargetType
{
	CrimeTargetType_BrownCollarWorker = 0,
	CrimeTargetType_Businessman = 1,
	CrimeTargetType_BusinessmanGoingHome = 2,
	CrimeTargetType_Clubber = 3,
	CrimeTargetType_ClubberGoingHome = 4,
	CrimeTargetType_CorporateBusinessman = 5,
	CrimeTargetType_GenericEntertainment = 6,
	CrimeTargetType_GenericHungry = 7,
	CrimeTargetType_GenericShopper = 8,
	CrimeTargetType_GenericShopperGoingHome = 9,
	CrimeTargetType_Vehicle = 10,
	CrimeTargetType_FamilyCar = 11,
	CrimeTargetType_SportsCar = 12,
	CrimeTargetType_RamRaidTarget = 13,
	CrimeTargetType_ArsonTarget = 14,
	CrimeTargetType_PickupPoint = 15,
	CrimeTargetType_GraffitiTarget = 16,
	CrimeTargetType_PropTarget = 17,
	CrimeTargetType_Max = 18,
};
enum etCrimeTargetZone
{
	CrimeTargetZone_Vandalism = 0,
	CrimeTargetZone_Mugging = 1,
	CrimeTargetZone_VehicleTheft = 2,
	CrimeTargetZone_Assassination = 3,
	CrimeTargetZone_HitAndRun = 4,
	CrimeTargetZone_Max = 5,
};
enum etCrimeType
{
	CrimeType_Assault = 0,
	CrimeType_Mugging = 1,
	CrimeType_Kidnapping = 2,
	CrimeType_VehicleTheft = 3,
	CrimeType_HitAndRun = 4,
	CrimeType_Assassination = 5,
	CrimeType_RamRaid = 6,
	CrimeType_Arson = 7,
	CrimeType_PickUp = 8,
	CrimeType_Vandalism = 9,
	CrimeType_Graffiti = 10,
	CrimeType_TestAttackProp = 11,
	CrimeType_Max = 12,
};
enum etCSA_IATState
{
	CSA_IATState_None = 0,
	CSA_IATState_APBPawn_AmmoCarrierDeployed = 1,
	CSA_IATState_APBPawn_Arrested = 2,
	CSA_IATState_APBPawn_Default = 3,
	CSA_IATState_APBPawn_Unconscious = 4,
	CSA_IATState_APBVehicle_ArsonTarget = 5,
	CSA_IATState_APBVehicle_BombTarget = 6,
	CSA_IATState_APBVehicle_Default = 7,
	CSA_IATState_AmmoDepot_Default = 8,
	CSA_IATState_AmmoShopFront_Default = 9,
	CSA_IATState_AmmoVendingMachine_Default = 10,
	CSA_IATState_AudioDisplayPoint_Default = 11,
	CSA_IATState_Contact_Default = 12,
	CSA_IATState_GraffitiCrimeTarget_Default = 13,
	CSA_IATState_GrafittiDisplayPoint_Default = 14,
	CSA_IATState_MailBox_Default = 15,
	CSA_IATState_NPC_MuggingTarget = 16,
	CSA_IATState_NPC_NoUseAllowed = 17,
	CSA_IATState_NPC_OpenWorldTarget = 18,
	CSA_IATState_PlayerVehicleDisplayPoint_Default = 19,
	CSA_IATState_PlayerVehicleSpawnZone_Default = 20,
	CSA_IATState_Prop_ArsonTarget = 21,
	CSA_IATState_Prop_BombPlanted = 22,
	CSA_IATState_Prop_BombTarget = 23,
	CSA_IATState_Prop_BurglaryTarget = 24,
	CSA_IATState_Prop_CSITarget = 25,
	CSA_IATState_Prop_Default = 26,
	CSA_IATState_Prop_ForcedEntryTarget = 27,
	CSA_IATState_Prop_HackingTarget = 28,
	CSA_IATState_Prop_OpenWorldTarget = 29,
	CSA_IATState_Prop_SabotageTarget = 30,
	CSA_IATState_RouteControlElement_Default = 31,
	CSA_IATState_RouteControlElement_Door = 32,
	CSA_IATState_RouteControlElement_Fence = 33,
	CSA_IATState_RouteControlElement_Ladder = 34,
	CSA_IATState_StatueDisplayPoint_Default = 35,
	CSA_IATState_TaskItemPickup_GiftBox = 36,
	CSA_IATState_TaskItemPickup_Normal = 37,
	CSA_IATState_TaskItemPickup_Slow = 38,
	CSA_IATState_TaskItemPickup_Small = 39,
	CSA_IATState_UIInteractionPoint_Default = 40,
	CSA_IATState_MAX = 41,
};
enum etCSAAlignmentType
{
	CSA_AT_None = 0,
	CSA_AT_Rotate_ActorLocation = 1,
	CSA_AT_Rotate_ActorNormal = 2,
	CSA_AT_MAX = 3,
};
enum etCSAAnimEvent
{
	CSAAnimEvent_None = 0,
	CSAAnimEvent_EndInteraction = 1,
	CSAAnimEvent_MAX = 2,
};
enum etCSAAnimType
{
	CSAAnimType_None = 0,
	CSAAnimType_1Phase = 1,
	CSAAnimType_1Phase_RCE = 2,
	CSAAnimType_1Phase_TaskItem = 3,
	CSAAnimType_3Phase = 4,
	CSAAnimType_MAX = 5,
};
enum etCSAAutoRouteType
{
	CSA_AutoRouteType_None = 0,
	CSA_AutoRouteType_Offset = 1,
	CSA_AutoRouteType_Socket = 2,
	CSA_AutoRouteType_MAX = 3,
};
enum etCSAEndPoint
{
	CSAEndPoint_None = 0,
	CSAEndPoint_Outro_Cosmetic = 1,
	CSAEndPoint_Outro_Logical_AnimDuration = 2,
	CSAEndPoint_Outro_Logical_AnimNotify = 3,
	CSAEndPoint_Outro_Logical_Timed = 4,
	CSAEndPoint_MAX = 5,
};
enum etCSAInputType
{
	CSA_InputType_None = 0,
	CSA_InputType_PressAndHold = 1,
	CSA_InputType_Toggle = 2,
	CSA_InputType_MAX = 3,
};
enum etCSALineCheckType
{
	CSA_LCT_None = 0,
	CSA_LCT_Blocking = 1,
	CSA_LCT_Static = 2,
	CSA_LCT_MAX = 3,
};
enum etCSAState
{
	CSAState_None = 0,
	CSAState_Cancel = 1,
	CSAState_InProgress = 2,
	CSAState_Success = 3,
	CSAState_MAX = 4,
};
enum etCSAType
{
	CSAType_None = 0,
	CSAType_Action = 1,
	CSAType_UseEquipment = 2,
	CSAType_Invoked = 3,
	CSAType_Ammo = 4,
	CSAType_MAX = 5,
};
enum etCustomisedAssetPriority
{
	CAMPriority_SelfCharacter = 0,
	CAMPriority_SelfVehicle = 1,
	CAMPriority_Groupmate = 2,
	CAMPriority_Friend = 3,
	CAMPriority_SameMission = 4,
	CAMPriority_Threat11 = 5,
	CAMPriority_Threat13 = 6,
	CAMPriority_SideMate = 7,
	CAMPriority_MAX = 8,
};
enum etDeployedUsableArray
{
	DeployedUsableArray_None = 0,
	DeployedUsableArray_Character = 1,
	DeployedUsableArray_Vehicle = 2,
	DeployedUsableArray_MAX = 3,
};
enum etDifficultyRating
{
	Difficulty_VeryEasy = 0,
	Difficulty_Easy = 1,
	Difficulty_Medium = 2,
	Difficulty_Hard = 3,
	Difficulty_VeryHard = 4,
	Difficulty_MAX = 5,
};
enum etDirection
{
	Direction_None = 0,
	Direction_Left = 1,
	Direction_Right = 2,
	Direction_MAX = 3,
};
enum etDisplayPointActivationType
{
	DisplayPointActivationType_None = 0,
	DisplayPointActivationType_Free = 1,
	DisplayPointActivationType_Purchasable = 2,
	DisplayPointActivationType_Winnable = 3,
	DisplayPointActivationType_MAX = 4,
};
enum etDisplayPointType
{
	DisplayPointType_None = 0,
	DisplayPointType_Audio = 1,
	DisplayPointType_Graffiti = 2,
	DisplayPointType_Statue = 3,
	DisplayPointType_Vehicle = 4,
	DisplayPointType_MAX = 5,
};
enum etEncumbrance
{
	Encumbrance_None = 0,
	Encumbrance_Small_No_Crouch_Move = 1,
	Encumbrance_Small_No_Crouch = 2,
	Encumbrance_Small_No_Jump = 3,
	Encumbrance_Small_No_Crouch_Move_Or_Jump = 4,
	Encumbrance_Small_No_Crouch_Or_Jump = 5,
	Encumbrance_Medium = 6,
	Encumbrance_Medium_No_Crouch_Move = 7,
	Encumbrance_Medium_No_Crouch = 8,
	Encumbrance_Medium_No_Jump = 9,
	Encumbrance_Medium_No_Crouch_Move_Or_Jump = 10,
	Encumbrance_Medium_No_Crouch_Or_Jump = 11,
	Encumbrance_Large = 12,
	Encumbrance_Large_No_Crouch_Move = 13,
	Encumbrance_Large_No_Crouch = 14,
	Encumbrance_Large_No_Jump = 15,
	Encumbrance_Large_No_Crouch_Move_Or_Jump = 16,
	Encumbrance_All = 17,
	Encumbrance_Small_No_Sprint = 18,
	Encumbrance_MAX = 19,
};
enum etErrorCode
{
	ERROR_OK = 0,
	ERROR_ASYNCHRONOUS = 1,
	ERROR_ABANDON_TIMER_ACTIVE = 2,
	ERROR_ALREADY_HAS_MISSION = 3,
	ERROR_ALREADY_INTERACTING = 4,
	ERROR_AWAITING_REPLICATION = 5,
	ERROR_BAD_SDD_DATA = 6,
	ERROR_CANT_EQUIP_ITEM_IN_VEHICLE = 7,
	ERROR_CANT_UNDEPLOY_ITEM_IN_VEHICLE = 8,
	ERROR_CONTACT_LOCKED = 9,
	ERROR_CONTACT_NOT_MISSION_PROVIDER = 10,
	ERROR_CONTACT_NOT_TUTOR = 11,
	ERROR_CONTACT_NOT_FOUND_IN_LEVEL = 12,
	ERROR_CONTROLLER_HAS_NO_PAWN = 13,
	ERROR_CONTROLLER_HAS_NO_SCORER = 14,
	ERROR_COULD_NOT_DEPLOY_ITEM = 15,
	ERROR_DECLINE_TIMER_ACTIVE = 16,
	ERROR_FEE_TOO_SMALL = 17,
	ERROR_GROUP_TOO_LARGE = 18,
	ERROR_GROUP_TOO_SMALL = 19,
	ERROR_ILLEGAL_CATEGORY = 20,
	ERROR_INSIDE_VEHICLE = 21,
	ERROR_OUTSIDE_AMMO_ZONE = 22,
	ERROR_INSUFFICIENT_CASH = 23,
	ERROR_INSUFFICIENT_MILESTONE = 24,
	ERROR_INSUFFICIENT_RATING = 25,
	ERROR_INSUFFICIENT_ROLE = 26,
	ERROR_INVALID_CONTACT = 27,
	ERROR_INVALID_CONTROLLER = 28,
	ERROR_INVALID_CREATOR = 29,
	ERROR_INVALID_DEPLOYMENT_SLOT = 30,
	ERROR_INVALID_DISPLAY_POINT_TYPE = 31,
	ERROR_INVALID_DISTRICT = 32,
	ERROR_INVALID_DURATION = 33,
	ERROR_INVALID_FACTION = 34,
	ERROR_INVALID_FNMOD = 35,
	ERROR_INVALID_FNMOD_SLOT = 36,
	ERROR_INVALID_FNMOD_SLOT_NOT_VACANT = 37,
	ERROR_INVALID_FNMOD_TYPE = 38,
	ERROR_INVALID_INVENTORY_SLOT = 39,
	ERROR_INVALID_ITEM_NOT_CUSTOMISABLE = 40,
	ERROR_INVALID_ITEM_TYPE = 41,
	ERROR_INVALID_LOCOMOTION_STATE = 42,
	ERROR_INVALID_METADATA_FILTER = 43,
	ERROR_INVALID_MISSION = 44,
	ERROR_INVALID_PARAM = 45,
	ERROR_INVALID_QUANTITY = 46,
	ERROR_INVALID_SEX = 47,
	ERROR_INVALID_TIME_OF_DAY = 48,
	ERROR_INVENTORY_LOCKED_FROM_TRANSACTION = 49,
	ERROR_DISALLOW_HEAT_LEVEL = 50,
	ERROR_INVALID_USABLE_SLOT = 51,
	ERROR_INVENTORY_TABLE_FULL = 52,
	ERROR_ITEM_DOESNT_NEED_REFURBISHED = 53,
	ERROR_ITEM_IS_DEPLOYED = 54,
	ERROR_ITEM_IS_STACKED = 55,
	ERROR_ITEM_IS_TIME_LIMITED = 56,
	ERROR_ITEM_NOT_ACTIVE = 57,
	ERROR_ITEM_NOT_AVAILABLE = 58,
	ERROR_ITEM_NOT_BOUND = 59,
	ERROR_ITEM_NOT_DEPLOYED = 60,
	ERROR_ITEM_NOT_FOR_SALE = 61,
	ERROR_ITEM_NOT_FOUND = 62,
	ERROR_ITEM_NOT_PAID_FOR = 63,
	ERROR_ITEM_NOT_TRADEABLE = 64,
	ERROR_ITEM_NOT_REMOVABLE = 65,
	ERROR_ITEM_NOT_UNLOCKED = 66,
	ERROR_LEADER_ABSENT = 67,
	ERROR_MISSION_ACTIVE = 68,
	ERROR_NOT_CLIENT_FUNCTION = 69,
	ERROR_NOT_HOSTED_MODE = 70,
	ERROR_NOT_LEADER = 71,
	ERROR_NO_ITEMS_IN_PACKAGE = 72,
	ERROR_NO_PLEDGED_CONTACT = 73,
	ERROR_NO_VENDOR_CONTACT = 74,
	ERROR_PLAYER_DIDNT_CREATE_ITEM = 75,
	ERROR_SLOT_IN_USE = 76,
	ERROR_STACKING_SLOT_UNAVAILABLE = 77,
	ERROR_STRING_TOO_LONG = 78,
	ERROR_TIME_TOO_EARLY = 79,
	ERROR_TIME_TOO_LATE = 80,
	ERROR_KNOWN_TRANSACTION_FAILURE = 81,
	ERROR_UNKNOWN_TRANSACTION_FAILURE = 82,
	ERROR_UNKNOWN_CATEGORY = 83,
	ERROR_UNKNOWN_COMMAND = 84,
	ERROR_UNKNOWN_DISPLAY_POINT = 85,
	ERROR_USABLE_ACTIVE = 86,
	ERROR_USABLE_INACTIVE = 87,
	ERROR_USABLE_AFFECTED_ITEM_NOT_DEPLOYED = 88,
	ERROR_USABLE_FNMOD_UNAVAILABLE = 89,
	ERROR_USABLE_GLOBAL_COOLDOWN_TIMER_ACTIVE = 90,
	ERROR_USABLE_REUSE_GROUP_MISSION_CHECK_FAILED = 91,
	ERROR_USABLE_REUSE_GROUP_TIMER_ACTIVE = 92,
	ERROR_XML_FAILURE = 93,
	ERROR_LAST_UNDERWEAR = 94,
	ERROR_USABLE_PLAYER_IN_VEHICLE = 95,
	ERROR_INVALID_CLAN = 96,
	ERROR_USABLE_NOT_DRIVING_VEHICLE = 97,
	ERROR_USABLE_STACK_LIMIT = 98,
	ERROR_INVENTORY_FULL_REWARD = 99,
	ERROR_ITEM_CREATE_STACK_COMBINED = 100,
	ERROR_FEATURE_UNAVAILABLE = 101,
	ERROR_WEAPON_DISABLED = 102,
	ERROR_MAX = 103,
};
enum etFacialHairRandomGeneration
{
	FacialHairRandomGeneration_ChanceOfFacialHair = 0,
	FacialHairRandomGeneration_ChanceOfBodilyHair = 1,
	FacialHairRandomGeneration_MAX = 2,
};
enum etFaction
{
	kFACTION_None = 0,
	kFACTION_Enforcer = 1,
	kFACTION_Criminal = 2,
	kFACTION_Both = 3,
	kFACTION_MAX = 4,
};
enum etFeedbackMessage
{
	FeedbackQuestion_None = 0,
	FeedbackQuestion_Standard = 1,
	FeedbackQuestion_Special = 2,
	FeedbackQuestion_BalancedMatch = 3,
	FeedbackQuestion_NotReadyNag = 4,
	FeedbackQuestion_MAX = 5,
};
enum etFireOffset
{
	FireOffset_Normal = 0,
	FireOffset_VehicleLeft = 1,
	FireOffset_VehicleRight = 2,
	FireOffset_Grenade = 3,
	FireOffset_LeanTowardScreenCentre = 4,
	FireOffset_MAX = 5,
};
enum etFormulaOperation
{
	FormulaOperation_None = 0,
	FormulaOperation_Add = 1,
	FormulaOperation_Divide = 2,
	FormulaOperation_Multiply = 3,
	FormulaOperation_Subtract = 4,
	FormulaOperation_MAX = 5,
};
enum etFXMaterialImpact
{
	FXMI_Default = 0,
	FXMI_Concrete = 1,
	FXMI_MetalVehicle = 2,
	FXMI_Metal = 3,
	FXMI_Flesh = 4,
	FXMI_Wood = 5,
	FXMI_Asphalt = 6,
	FXMI_Brick = 7,
	FXMI_Foliage = 8,
	FXMI_Glass = 9,
	FXMI_Stone = 10,
	FXMI_Earth = 11,
	FXMI_Cloth = 12,
	FXMI_Water = 13,
	FXMI_Sand = 14,
	FXMI_ShallowWater = 15,
	FXMI_MAX = 16,
};
enum etGameplayEventCategory
{
	GameplayEventCategory_None = 0,
	GameplayEventCategory_Abandon_Match = 1,
	GameplayEventCategory_Abandon_Match_Fail = 2,
	GameplayEventCategory_Always_Witnessable = 3,
	GameplayEventCategory_AmmoZone_Begin = 4,
	GameplayEventCategory_AmmoZone_BuySomeAmmo = 5,
	GameplayEventCategory_AmmoZone_Deactivate = 6,
	GameplayEventCategory_AmmoZone_PurchasedAmmo_Manually = 7,
	GameplayEventCategory_Ammo_FromLocker = 8,
	GameplayEventCategory_Arrest_Player = 9,
	GameplayEventCategory_ArrestedBy_Enforcer = 10,
	GameplayEventCategory_Attacked_InvulnerablePlayer = 11,
	GameplayEventCategory_Auction_Create = 12,
	GameplayEventCategory_AutoKick_Inactivity = 13,
	GameplayEventCategory_AutoKick_SuicidesWarning = 14,
	GameplayEventCategory_AutoKick_TeamKillsWarning = 15,
	GameplayEventCategory_Autokill_AtUnsafeHeight = 16,
	GameplayEventCategory_Autokill_InsideGeometry = 17,
	GameplayEventCategory_Become_Group_Leader = 18,
	GameplayEventCategory_Become_Side_Leader = 19,
	GameplayEventCategory_Become_Side_VIP = 20,
	GameplayEventCategory_CSA_Begin = 21,
	GameplayEventCategory_CSA_End = 22,
	GameplayEventCategory_CallFor_Backup = 23,
	GameplayEventCategory_CashPool_LargeStash = 24,
	GameplayEventCategory_Cash_Received = 25,
	GameplayEventCategory_Cash_Received_PremiumBonus = 26,
	GameplayEventCategory_Chaos_Score = 27,
	GameplayEventCategory_Clan_Member = 28,
	GameplayEventCategory_Contact_Error = 29,
	GameplayEventCategory_Contact_LevelUp = 30,
	GameplayEventCategory_Contact_Pledge = 31,
	GameplayEventCategory_Contact_Referal = 32,
	GameplayEventCategory_ContactsComplete = 33,
	GameplayEventCategory_Customisation_ItemUploaded = 34,
	GameplayEventCategory_CustomiseStats_Broker = 35,
	GameplayEventCategory_CustomiseStats_FashionMogul = 36,
	GameplayEventCategory_CustomiseStats_ImageDesign = 37,
	GameplayEventCategory_CustomiseStats_Profiteer = 38,
	GameplayEventCategory_CustomiseStats_WeaponSmith_FNModsApplied = 39,
	GameplayEventCategory_DailyActivityAccept = 40,
	GameplayEventCategory_DailyActivityComplete = 41,
	GameplayEventCategory_Damage_Player = 42,
	GameplayEventCategory_Damage_Prop = 43,
	GameplayEventCategory_Damage_Vehicle = 44,
	GameplayEventCategory_Damaged_TaskTarget_ObstructionDamage = 45,
	GameplayEventCategory_Death1 = 46,
	GameplayEventCategory_Death2 = 47,
	GameplayEventCategory_DeathContagion = 48,
	GameplayEventCategory_DeliverItem_CashPool = 49,
	GameplayEventCategory_DeliverItem_Checkpoint = 50,
	GameplayEventCategory_DeliverItem_Mission = 51,
	GameplayEventCategory_DeliverItem_OpenWorld = 52,
	GameplayEventCategory_DeliverItem_OpenWorld_Fail = 53,
	GameplayEventCategory_DeliverVehicle_Fail = 54,
	GameplayEventCategory_DeliverVehicle_OpenWorld = 55,
	GameplayEventCategory_DeployAmmoCarrier = 56,
	GameplayEventCategory_Destroy_Prop = 57,
	GameplayEventCategory_Destroy_Vehicle = 58,
	GameplayEventCategory_DisplayPoint_Taken = 59,
	GameplayEventCategory_Display_Graffiti_Fail = 60,
	GameplayEventCategory_DistrictEnter = 61,
	GameplayEventCategory_DistrictLeave = 62,
	GameplayEventCategory_Drive_StolenVehicle = 63,
	GameplayEventCategory_Drive_Vehicle = 64,
	GameplayEventCategory_DroppedWeapon_PlayerKill = 65,
	GameplayEventCategory_Earned_Medal = 66,
	GameplayEventCategory_ElectiveSpawn_Unavailable = 67,
	GameplayEventCategory_ElectiveSpawn_VehicleSpawn = 68,
	GameplayEventCategory_Ended_ArrestStreak = 69,
	GameplayEventCategory_Ended_KillStreak = 70,
	GameplayEventCategory_Ended_Mission = 71,
	GameplayEventCategory_Ended_Mission2 = 72,
	GameplayEventCategory_Ended_MissionType = 73,
	GameplayEventCategory_Enter_Resupply_Zone = 74,
	GameplayEventCategory_GiftBox_Opened = 75,
	GameplayEventCategory_Grenade_Cook_Tutorial = 76,
	GameplayEventCategory_Grenade_Throw_Tutorial = 77,
	GameplayEventCategory_GroupWaypointSpam = 78,
	GameplayEventCategory_Health_Regenerated = 79,
	GameplayEventCategory_Heat_ChangeLevel = 80,
	GameplayEventCategory_Hijack_LCVehicle = 81,
	GameplayEventCategory_Hotwire_Vehicle = 82,
	GameplayEventCategory_ItemOperation_Fail = 83,
	GameplayEventCategory_JoinGroup = 84,
	GameplayEventCategory_JoinGroup_LeaderInDifferentMission = 85,
	GameplayEventCategory_KillAssist_Player = 86,
	GameplayEventCategory_KillStats_AgainstTaskItemCarriers = 87,
	GameplayEventCategory_Kill_DriverAssist = 88,
	GameplayEventCategory_Kill_EnemyTeamAnnihilation = 89,
	GameplayEventCategory_Kill_FromBehind = 90,
	GameplayEventCategory_Kill_GroupInVehicle = 91,
	GameplayEventCategory_Kill_Group_LeaningOutOfVehicle = 92,
	GameplayEventCategory_Kill_Pedestrian = 93,
	GameplayEventCategory_Kill_Player = 94,
	GameplayEventCategory_Kill_Player_InVehicleWithGrenade = 95,
	GameplayEventCategory_Kill_Player_LeaningOutOfVehicle = 96,
	GameplayEventCategory_Kill_Player_PickedUpWeapon = 97,
	GameplayEventCategory_Kill_Player_TrackedWeaponType = 98,
	GameplayEventCategory_Kill_PrimarySecondary = 99,
	GameplayEventCategory_Kill_WhileDriving = 100,
	GameplayEventCategory_Knocked_Out = 101,
	GameplayEventCategory_Knocked_Player_Out = 102,
	GameplayEventCategory_MailBox_Begin = 103,
	GameplayEventCategory_MailBox_RetrieveItemAttachment = 104,
	GameplayEventCategory_Minigame_BlockFDM_DisablePvP = 105,
	GameplayEventCategory_Minigame_BlockFDM_EnterBlock = 106,
	GameplayEventCategory_Minigame_BlockFDM_ExitBlock = 107,
	GameplayEventCategory_Minigame_Complete = 108,
	GameplayEventCategory_Minigame_Ending = 109,
	GameplayEventCategory_Minigame_GoldenGun_DropOff = 110,
	GameplayEventCategory_Minigame_GoldenGun_Pickup = 111,
	GameplayEventCategory_Minigame_GoldenGun_TurnIn = 112,
	GameplayEventCategory_Minigame_GunGame_CompletionScore = 113,
	GameplayEventCategory_Minigame_GunGame_ReachedRank = 114,
	GameplayEventCategory_Minigame_GunGame_ReachedScoreLimit = 115,
	GameplayEventCategory_Minigame_Infection_EnteredEndArea = 116,
	GameplayEventCategory_Minigame_Infection_FirstLeaderSelected = 117,
	GameplayEventCategory_Minigame_Infection_Infected_Joined = 118,
	GameplayEventCategory_Minigame_Infection_Infected_Majority = 119,
	GameplayEventCategory_Minigame_Infection_Item_Count_Gain = 120,
	GameplayEventCategory_Minigame_Infection_Item_Count_Lost = 121,
	GameplayEventCategory_Minigame_Infection_LeaderDethroned = 122,
	GameplayEventCategory_Minigame_Infection_LeftEndArea = 123,
	GameplayEventCategory_Minigame_Infection_Ping = 124,
	GameplayEventCategory_Minigame_Infection_PlayerConverted = 125,
	GameplayEventCategory_Minigame_Infection_PlayerConverted_Converter = 126,
	GameplayEventCategory_Minigame_Infection_PlayerConverted_Leader = 127,
	GameplayEventCategory_Minigame_Infection_PlayerEndedInArea = 128,
	GameplayEventCategory_Minigame_Infection_Survivor_Added = 129,
	GameplayEventCategory_Minigame_Infection_Survivor_Survived = 130,
	GameplayEventCategory_Minigame_Kills = 131,
	GameplayEventCategory_Minigame_Mugging_Delivery = 132,
	GameplayEventCategory_Minigame_Mugging_HeldItemsAtEnd = 133,
	GameplayEventCategory_Minigame_Mugging_Invulnerability_Denied = 134,
	GameplayEventCategory_Minigame_Mugging_MuggedNPC = 135,
	GameplayEventCategory_Minigame_Mugging_NPC_Kill = 136,
	GameplayEventCategory_Minigame_Mugging_NoDrops_GainedItems = 137,
	GameplayEventCategory_Minigame_Mugging_NoDrops_LostItems = 138,
	GameplayEventCategory_Minigame_Mugging_Pickup = 139,
	GameplayEventCategory_Minigame_Mugging_PlayerMug_Muggee = 140,
	GameplayEventCategory_Minigame_Mugging_PlayerMug_Mugger = 141,
	GameplayEventCategory_Minigame_Player_Joined = 142,
	GameplayEventCategory_Minigame_Player_Left = 143,
	GameplayEventCategory_Minigame_Protagonist_Assigned = 144,
	GameplayEventCategory_Minigame_Started = 145,
	GameplayEventCategory_Minigame_VIP_Hunt_InProgress = 146,
	GameplayEventCategory_Minigame_VIP_Hunt_Started = 147,
	GameplayEventCategory_Minigame_WaitingForPlayers = 148,
	GameplayEventCategory_Mission_AwardMVP = 149,
	GameplayEventCategory_Mission_BackupGroupArrived = 150,
	GameplayEventCategory_Mission_BackupPlayerArrived = 151,
	GameplayEventCategory_Mission_CashPaid = 152,
	GameplayEventCategory_Mission_DispatchedVsGroup = 153,
	GameplayEventCategory_Mission_DispatchedVsPlayer = 154,
	GameplayEventCategory_Mission_Ended_ProvingGrounds = 155,
	GameplayEventCategory_Mission_Ended_Tutorial = 156,
	GameplayEventCategory_Mission_Immunity_Start = 157,
	GameplayEventCategory_Mission_ObjectiveCompleted = 158,
	GameplayEventCategory_Mission_ObjectiveCompleted_Tutorial = 159,
	GameplayEventCategory_Mission_Offer = 160,
	GameplayEventCategory_Mission_OppositionAdded = 161,
	GameplayEventCategory_Mission_OppositionAssigned = 162,
	GameplayEventCategory_Mission_OppositionPlayerRemoved = 163,
	GameplayEventCategory_Mission_OvertimeStarted = 164,
	GameplayEventCategory_Mission_OwnerGroupAdded = 165,
	GameplayEventCategory_Mission_OwnerPlayerAdded = 166,
	GameplayEventCategory_Mission_OwnerPlayerRemoved = 167,
	GameplayEventCategory_Mission_Stage = 168,
	GameplayEventCategory_Mission_TaskTargetCompleted = 169,
	GameplayEventCategory_ModeTimer = 170,
	GameplayEventCategory_Modification_Attached = 171,
	GameplayEventCategory_Modifier_Unapplied = 172,
	GameplayEventCategory_Mug_Pedestrian = 173,
	GameplayEventCategory_NotReadyNagMessage = 174,
	GameplayEventCategory_On_ArrestStreak = 175,
	GameplayEventCategory_On_KillStreak = 176,
	GameplayEventCategory_On_TakeoutStreak = 177,
	GameplayEventCategory_OpenWorldItem_Spawned = 178,
	GameplayEventCategory_Organisation_LevelUp = 179,
	GameplayEventCategory_OutOf_Bullets = 180,
	GameplayEventCategory_OutOf_Grenades = 181,
	GameplayEventCategory_OutOf_Projectiles = 182,
	GameplayEventCategory_Passenger_StolenVehicle = 183,
	GameplayEventCategory_PickedUpWeapon_ScavengedAmmo = 184,
	GameplayEventCategory_PlayerTaskTargetProtected = 185,
	GameplayEventCategory_Player_Aim_Tutorial = 186,
	GameplayEventCategory_Player_Camera_Switch_Tutorial = 187,
	GameplayEventCategory_Player_Crouch_Tutorial = 188,
	GameplayEventCategory_Player_Emote = 189,
	GameplayEventCategory_Player_Jump_Tutorial = 190,
	GameplayEventCategory_Player_Lean_Tutorial = 191,
	GameplayEventCategory_Player_OpenedMap_Tutorial = 192,
	GameplayEventCategory_ProvingGrounds_Challenge_MissionWarning = 193,
	GameplayEventCategory_ProvingGrounds_IncrementChallengeScore = 194,
	GameplayEventCategory_ProvingGrounds_QualifyForReward_Bronze = 195,
	GameplayEventCategory_ProvingGrounds_WaitingForMission = 196,
	GameplayEventCategory_RadarJam_Enemy = 197,
	GameplayEventCategory_RamRaidOrBust_OpenWorld = 198,
	GameplayEventCategory_Rating_Changed = 199,
	GameplayEventCategory_ReadyStateChanged_Group = 200,
	GameplayEventCategory_ReadyStateChanged_Player = 201,
	GameplayEventCategory_Receive_CashOnly_Reward = 202,
	GameplayEventCategory_Receive_Cash_TokenOnly_Reward = 203,
	GameplayEventCategory_Receive_Damage = 204,
	GameplayEventCategory_Receive_TokenOnly_Reward = 205,
	GameplayEventCategory_ReceivedHoldPointsScore = 206,
	GameplayEventCategory_RemovedFromGroup = 207,
	GameplayEventCategory_Repaired_Vehicle = 208,
	GameplayEventCategory_Rescue_Arrested_Player = 209,
	GameplayEventCategory_Rescued_By_Player = 210,
	GameplayEventCategory_Resupplied_AmmoClips = 211,
	GameplayEventCategory_Resupply_Fail = 212,
	GameplayEventCategory_Resupply_Fail_PickedUpWeapon = 213,
	GameplayEventCategory_RewardPackage_ConsumptionError = 214,
	GameplayEventCategory_Reward_NewMail = 215,
	GameplayEventCategory_Reward_RandomRewardGained = 216,
	GameplayEventCategory_Role_LevelUp = 217,
	GameplayEventCategory_Song_Produced = 218,
	GameplayEventCategory_SpawnInDistrict = 219,
	GameplayEventCategory_SpawnPlayer = 220,
	GameplayEventCategory_SprintedDistance = 221,
	GameplayEventCategory_Start_Mission = 222,
	GameplayEventCategory_StolenItem = 223,
	GameplayEventCategory_Tag_Enemy = 224,
	GameplayEventCategory_TaskItem_Spawned = 225,
	GameplayEventCategory_Task_Item_Delivered = 226,
	GameplayEventCategory_Task_Time_OneMinuteRemaining = 227,
	GameplayEventCategory_TeamLeadershipVote_Begin = 228,
	GameplayEventCategory_TeamLeadershipVote_End = 229,
	GameplayEventCategory_TestFire_Weapon = 230,
	GameplayEventCategory_Threat_Changed = 231,
	GameplayEventCategory_TutorialNodeComplete = 232,
	GameplayEventCategory_UseProp_Door = 233,
	GameplayEventCategory_UseProp_Fence = 234,
	GameplayEventCategory_UseProp_Ladder = 235,
	GameplayEventCategory_Vehicle_BeginRepair = 236,
	GameplayEventCategory_Vehicle_BrokenInto = 237,
	GameplayEventCategory_Vehicle_Cargo_Full = 238,
	GameplayEventCategory_Vehicle_Critical = 239,
	GameplayEventCategory_Vehicle_EndRepair = 240,
	GameplayEventCategory_Vehicle_EnterFail = 241,
	GameplayEventCategory_Vehicle_ReceiveDamage = 242,
	GameplayEventCategory_Vehicle_SpawnFail = 243,
	GameplayEventCategory_Vehicle_SpawnSuccess = 244,
	GameplayEventCategory_Vehicle_Unequipped = 245,
	GameplayEventCategory_Vendor_Item_Buy_Joker = 246,
	GameplayEventCategory_Weapon_Deployed = 247,
	GameplayEventCategory_Weapon_Empty_Magazine = 248,
	GameplayEventCategory_Weapon_Unequipped = 249,
	GameplayEventCategory_WinStreak_Mission = 250,
	GameplayEventCategory_Witness_Crime = 251,
	GameplayEventCategory_WitnessedBy_Enforcer = 252,
	GameplayEventCategory_WitnessedBy_NPC = 253,
	GameplayEventCategory_Won_Match = 254,
	GameplayEventCategory_MAX = 255,
};
enum etGameplayEventCategory2
{
	GameplayEventCategory2_None = 0,
	GameplayEventCategory2_DailyActivityAutoAssigned = 1,
	GameplayEventCategory2_FnMod_Disabled = 2,
	GameplayEventCategory2_Minigame_FindTarget_TargetFound = 3,
	GameplayEventCategory2_Minigame_Infection_KilledInfected = 4,
	GameplayEventCategory2_Minigame_Protagonist_Killed = 5,
	GameplayEventCategory2_Minigame_Teleported = 6,
	GameplayEventCategory2_Minigame_WeaponDrop_AliveScore = 7,
	GameplayEventCategory2_Minigame_WeaponDrop_FirstPickup = 8,
	GameplayEventCategory2_Minigame_WeaponDrop_HighScore = 9,
	GameplayEventCategory2_Minigame_WeaponDrop_HighScore_Death = 10,
	GameplayEventCategory2_Minigame_WeaponDrop_HighScore_Killed = 11,
	GameplayEventCategory2_Minigame_WeaponDrop_LowLives = 12,
	GameplayEventCategory2_Minigame_WeaponDrop_WeaponSpawned = 13,
	GameplayEventCategory2_Mission_ObjectiveProximity = 14,
	GameplayEventCategory2_TimeLimitedReward_Assigned = 15,
	GameplayEventCategory2_TimeLimitedReward_Released = 16,
	GameplayEventCategory2_Weapon_Disabled = 17,
	GameplayEventCategory2_MAX = 18,
};
enum etGameplayEventMutuallyExclusiveGroup
{
	GameplayEventMutuallyExclusiveGroup_NotExclusive = 0,
	GameplayEventMutuallyExclusiveGroup = 1,
	GameplayEventMutuallyExclusiveGroup = 2,
	GameplayEventMutuallyExclusiveGroup = 3,
	GameplayEventMutuallyExclusiveGroup = 4,
	GameplayEventMutuallyExclusiveGroup = 5,
	GameplayEventMutuallyExclusiveGroup = 6,
	GameplayEventMutuallyExclusiveGroup = 7,
	GameplayEventMutuallyExclusiveGroup = 8,
	GameplayEventMutuallyExclusiveGroup = 9,
	GameplayEventMutuallyExclusiveGroup = 10,
	GameplayEventMutuallyExclusiveGroup = 11,
	GameplayEventMutuallyExclusiveGroup = 12,
	GameplayEventMutuallyExclusiveGroup = 13,
	GameplayEventMutuallyExclusiveGroup = 14,
	GameplayEventMutuallyExclusiveGroup = 15,
	GameplayEventMutuallyExclusiveGroup_MAX = 16,
};
enum etGraffitiInteractionType
{
	GraffitiInteractionType_Default = 0,
	GraffitiInteractionType_TargetedClose = 1,
	GraffitiInteractionType_TargetedDistant = 2,
	GraffitiInteractionType_MAX = 3,
};
enum etHeatConstant
{
	HeatConstant_DecayDelay = 0,
	HeatConstant_DecayInterval = 1,
	HeatConstant_DecayRate = 2,
	HeatConstant_EquilibriumAmount = 3,
	HeatConstant_HeatAmountMax = 4,
	HeatConstant_PayForHeatPrice = 5,
	HeatConstant_UnDecayDelay = 6,
	HeatConstant_UnDecayInterval = 7,
	HeatConstant_UnDecayRate = 8,
	HeatConstant_MAX = 9,
};
enum etHeatFunctionality
{
	RulesetHeat_Off = 0,
	RulesetHeat_NoPvPUnlockToAllOpposingFaction = 1,
	RulesetHeat_Full = 2,
	RulesetHeat_MAX = 3,
};
enum etHostingConfigFileAccountPersistentId
{
	kConfigAccountPersistentNone = 0,
	kConfigAccountPersistent1 = 1,
	kConfigAccountPersistent2 = 2,
	kConfigAccountPersistent3 = 3,
	kConfigAccountPersistent4 = 4,
	kConfigAccountPersistent5 = 5,
	etHostingConfigFileAccountPersistentId_MAX = 6,
};
enum etHostingConfigFileCharacterPersistentId
{
	kConfigCharacterPersistentNone = 0,
	kConfigCharacterPersistent1 = 1,
	kConfigCharacterPersistent2 = 2,
	kConfigCharacterPersistent3 = 3,
	kConfigCharacterPersistent4 = 4,
	kConfigCharacterPersistent5 = 5,
	etHostingConfigFileCharacterPersistentId_MAX = 6,
};
enum etHUDCeremonyMsgType
{
	HUDCeremonyMsgType_None = 0,
	HUDCeremonyMsgType_Contact = 1,
	HUDCeremonyMsgType_Heat = 2,
	HUDCeremonyMsgType_Medal = 3,
	HUDCeremonyMsgType_Organisation = 4,
	HUDCeremonyMsgType_RedeemableReward = 5,
	HUDCeremonyMsgType_Role = 6,
	HUDCeremonyMsgType_Threat = 7,
	HUDCeremonyMsgType_WeaponPickup = 8,
	HUDCeremonyMsgType_MAX = 9,
};
enum etHUDConstant
{
	HUDConstant_ActionMessage_FadeOutTime = 0,
	HUDConstant_ActionMessage_MaxDisplayedMessages = 1,
	HUDConstant_ActionMessage_OpaqueDisplayTime = 2,
	HUDConstant_Ammo_MaxQuantity = 3,
	HUDConstant_Ammo_MinQuantity = 4,
	HUDConstant_ChatNotification_DisplayTime = 5,
	HUDConstant_ChatNotification_UpdateMessageDelay = 6,
	HUDConstant_Chat_MaxTabNum = 7,
	HUDConstant_CrimeList_BarDuration = 8,
	HUDConstant_DistrictMap_MouseOverSizeModifier = 9,
	HUDConstant_DistrictMessage_MaxMessages = 10,
	HUDConstant_HUDMarker_ArrowDrawDistance = 11,
	HUDConstant_HUDMarker_FlashRate = 12,
	HUDConstant_HUDMessage_SpawnHideTime = 13,
	HUDConstant_Heat_FlashDuration = 14,
	HUDConstant_Heat_FlashTriggerAmount = 15,
	HUDConstant_Heat_RateOfChangePerSecond = 16,
	HUDConstant_Hit_BloodFadeTime = 17,
	HUDConstant_Hit_DamageMax = 18,
	HUDConstant_Hit_DamageMin = 19,
	HUDConstant_Hit_NumIndicators = 20,
	HUDConstant_Hit_ThicknessMax = 21,
	HUDConstant_Hit_ThicknessMin = 22,
	HUDConstant_Hit_TimeMax = 23,
	HUDConstant_Hit_TimeMin = 24,
	HUDConstant_InfoBrowser_DistanceThreshold = 25,
	HUDConstant_InfoBrowser_RouteControl_EndFadeDistancePct = 26,
	HUDConstant_InfoBrowser_RouteControl_StartFadeDistancePct = 27,
	HUDConstant_Lobby_GametimeLowWarning = 28,
	HUDConstant_Locale_HudMsgSupressTime = 29,
	HUDConstant_Locale_PlayerHeight = 30,
	HUDConstant_Locale_PlayerRadius = 31,
	HUDConstant_LowHealthAndStamina_Blur = 32,
	HUDConstant_LowHealth_Begin = 33,
	HUDConstant_LowHealth_End = 34,
	HUDConstant_LowHealth_MaxOpacity = 35,
	HUDConstant_LowHealth_Power = 36,
	HUDConstant_LowStamina_Begin = 37,
	HUDConstant_LowStamina_End = 38,
	HUDConstant_LowStamina_MaxOpacity = 39,
	HUDConstant_LowStamina_Power = 40,
	HUDConstant_Mail_OpacityRateOfChange = 41,
	HUDConstant_MeshViewer_NightLevel = 42,
	HUDConstant_MeshViewer_TimeOfDay = 43,
	HUDConstant_MissionTimeLimit_AudioThreashold_Seconds = 44,
	HUDConstant_MissionTimeLimit_BonusDisplayTime = 45,
	HUDConstant_MissionTimeLimit_ChangeDisplayTime = 46,
	HUDConstant_MissionTimeLimit_TimeRunningOutDisplayTime = 47,
	HUDConstant_MissionValue_ChangeDisplayTime = 48,
	HUDConstant_MusicInfo_ShowDelay = 49,
	HUDConstant_MusicInfo_UpdateDelay = 50,
	HUDConstant_RadarRadius_InVehicle = 51,
	HUDConstant_RadarRadius_Min = 52,
	HUDConstant_RadarRadius_OnFoot = 53,
	HUDConstant_Radar_ContourDistance = 54,
	HUDConstant_Reticule_RateOfChange = 55,
	HUDConstant_Standing_RateOfChange = 56,
	HUDConstant_TaskMarker_BufferX = 57,
	HUDConstant_TaskMarker_BufferY = 58,
	HUDConstant_TaskMarker_DistanceMax = 59,
	HUDConstant_TaskMarker_DistanceMin = 60,
	HUDConstant_TaskMarker_Ellipse_ScreenHeightPercentage = 61,
	HUDConstant_TaskMarker_Ellipse_ScreenWidthPercentage = 62,
	HUDConstant_TaskMarker_OpacityMax = 63,
	HUDConstant_TaskMarker_OpacityRateOfChange = 64,
	HUDConstant_TaskMarker_OverlapOpacity = 65,
	HUDConstant_TaskMarker_ProjectionPadding = 66,
	HUDConstant_TaskMarker_ScreenSize = 67,
	HUDConstant_TutorialDistrictExitPromptDelay = 68,
	HUDConstant_Tutorials_ReticuleTime = 69,
	HUDConstant_VOIP_Active_LowMax = 70,
	HUDConstant_VOIP_Active_MediumMax = 71,
	HUDConstant_WSCI_DefaultMarkerSize = 72,
	HUDConstant_WSCI_FadeDistance = 73,
	HUDConstant_WSCI_MaxOpacity = 74,
	HUDConstant_WSCI_MaxScale = 75,
	HUDConstant_WSCI_MinScale = 76,
	HUDConstant_WSCI_OffsetZ = 77,
	HUDConstant_WSCI_OpacityRateOfChange = 78,
	HUDConstant_WSCI_OverlapOpacity1 = 79,
	HUDConstant_WSCI_OverlapOpacity2 = 80,
	HUDConstant_Waypoints_MaxNumGroup = 81,
	HUDConstant_Waypoints_MaxNumPersonal = 82,
	HUDConstant_WeaponInfo_DeltaOpacity = 83,
	HUDConstant_WeaponInfo_InCarNoEquipOpacity = 84,
	HUDConstant_WeaponInfo_InCarOpacity = 85,
	HUDConstant_ZoneNotifier_FlashRate = 86,
	HUDConstant_ZoneNotifier_SphereTestRadius = 87,
	HUDConstant_MAX = 88,
};
enum etHUDConstantBool
{
	HUDConstantBool_CharacterMarkers_ShowCarPassengers = 0,
	HUDConstantBool_CharacterMarkers_ShowThreat = 1,
	HUDConstantBool_Radar_FullModeOnly = 2,
	HUDConstantBool_Radar_ShowContours = 3,
	HUDConstantBool_Radar_ShowMap = 4,
	HUDConstantBool_Radar_ZoomEnabled = 5,
	HUDConstantBool_Reticule_ShowBlockedLineOfSight = 6,
	HUDConstantBool_ScoreboardOn = 7,
	HUDConstantBool_TargetInfo_On = 8,
	HUDConstantBool_TaskMarkers_OnEdge_Distance = 9,
	HUDConstantBool_TaskMarkers_OnEdge_ID = 10,
	HUDConstantBool_TaskMarkers_OnEdge_Objective = 11,
	HUDConstantBool_TaskMarkers_OnEdge_Text = 12,
	HUDConstantBool_MAX = 13,
};
enum etHUDInfoBrowser
{
	InfoBrowser_None = 0,
	InfoBrowser_Character = 1,
	InfoBrowser_Contact = 2,
	InfoBrowser_DisplayPoint = 3,
	InfoBrowser_MissionTarget = 4,
	InfoBrowser_OpenWorld = 5,
	InfoBrowser_RouteControl = 6,
	InfoBrowser_Vehicle = 7,
	InfoBrowser_Vending = 8,
	InfoBrowser_WeaponPickup = 9,
	InfoBrowser_MAX = 10,
};
enum etHUDMarkerCategory
{
	HUDMarkerCategory_None = 0,
	HUDMarkerCategory_RouteControl = 1,
	HUDMarkerCategory_HiddenDuringTask = 2,
	HUDMarkerCategory_VehiclePosition = 3,
	HUDMarkerCategory_VehicleSpawnBay = 4,
	HUDMarkerCategory_AmmoSupplyZone = 5,
	HUDMarkerCategory_GroupPlayer = 6,
	HUDMarkerCategory_OppositionPlayer = 7,
	HUDMarkerCategory_Vehicle = 8,
	HUDMarkerCategory_Task = 9,
	HUDMarkerCategory_SpawnZone = 10,
	HUDMarkerCategory_VehicleSpawnZone = 11,
	HUDMarkerCategory_VehicleRepairZone = 12,
	HUDMarkerCategory_CustomisationZone = 13,
	HUDMarkerCategory_MusicZone = 14,
	HUDMarkerCategory_MarketplaceZone = 15,
	HUDMarkerCategory_GMPlayer = 16,
	HUDMarkerCategory_DisplayPoint = 17,
	HUDMarkerCategory_Waypoint = 18,
	HUDMarkerCategory_OpenWorldDropOff = 19,
	HUDMarkerCategory_Fame = 20,
	HUDMarkerCategory_Misc = 21,
	HUDMarkerCategory_Minigame = 22,
	HUDMarkerCategory_MAX = 23,
};
enum etHUDMarkerState
{
	HUDMarkerState_Active = 0,
	HUDMarkerState_Flashing = 1,
	HUDMarkerState_Greyed = 2,
	HUDMarkerState_Inactive = 3,
	HUDMarkerState_Ping_Always = 4,
	HUDMarkerState_Ping_BoomBox = 5,
	HUDMarkerState_Ping_Crouched_Moving = 6,
	HUDMarkerState_Ping_Crouched_Static = 7,
	HUDMarkerState_Ping_FireDefault = 8,
	HUDMarkerState_Ping_Marksmanship = 9,
	HUDMarkerState_Ping_Running = 10,
	HUDMarkerState_Ping_Sprinting = 11,
	HUDMarkerState_Ping_Static = 12,
	HUDMarkerState_Ping_Vehicle_Moving = 13,
	HUDMarkerState_Ping_Vehicle_Static = 14,
	HUDMarkerState_Ping_Walking = 15,
	HUDMarkerState_Task_Misc = 16,
	HUDMarkerState_Task_Neutral = 17,
	HUDMarkerState_Task_OppositionAttack = 18,
	HUDMarkerState_Task_OppositionDefend = 19,
	HUDMarkerState_Task_OwnerAttack = 20,
	HUDMarkerState_Task_OwnerDefend = 21,
	HUDMarkerState_MAX = 22,
};
enum etHUDMarkerUsage
{
	HUDMarkerUsage_MiniMap = 0,
	HUDMarkerUsage_SpawnSelect = 1,
	HUDMarkerUsage_All = 2,
	HUDMarkerUsage_MAX = 3,
};
enum etHUDMessageRank
{
	HUDMessagePriority_Low = 0,
	HUDMessagePriority_Medium = 1,
	HUDMessagePriority_High = 2,
	HUDMessagePriority_Tutorial = 3,
	HUDMessagePriority_Instant = 4,
	HUDMessagePriority_MAX = 5,
};
enum etHUDMessageType
{
	HUDMessageType_Standard = 0,
	HUDMessageType_Locale = 1,
	HUDMessageType_Action = 2,
	HUDMessageType_Scoreboard = 3,
	HUDMessageType_Chat = 4,
	HUDMessageType_MAX = 5,
};
enum etHUDPopUpItemRule
{
	HUDPopUpItemRule_Disabled = 0,
	HUDPopUpItemRule_Enabled = 1,
	HUDPopUpItemRule_InMission = 2,
	HUDPopUpItemRule_NotInMission = 3,
	HUDPopUpItemRule_InCustomisation = 4,
	HUDPopUpItemRule_InSocialDistrict = 5,
	HUDPopUpItemRule_InActionDistrict = 6,
	HUDPopUpItemRule_CanUnpledgeFromContact = 7,
	HUDPopUpItemRule_InAmmoResupplyZone = 8,
	HUDPopUpItemRule_CanOpenScoreboard = 9,
	HUDPopUpItemRule_LFGEnabled = 10,
	HUDPopUpItemRule_LFGDisabled = 11,
	HUDPopUpItemRule_MAX = 12,
};
enum etHUDReticule
{
	Reticule_Explosive = 0,
	Reticule_Ranged = 1,
	Reticule_Unarmed = 2,
	Reticule_Vehicle = 3,
	Reticule_Sniper = 4,
	Reticule_None = 5,
	Reticule_Snowflake = 6,
	Reticule_Spotter = 7,
	Reticule_Anubis = 8,
	Reticule_RedDot = 9,
	Reticule_Sprinting = 10,
	Reticule_Anubis_Prototype = 11,
	Reticule_Ranged_Shotgun_Apoc = 12,
	Reticule_MAX = 13,
};
enum etHUDWSCharInfo
{
	HUDWSCharInfo_None = 0,
	HUDWSCharInfo_Player_MaxHeat = 1,
	HUDWSCharInfo_Player_MissionFriendly = 2,
	HUDWSCharInfo_Player_MissionOpposition = 3,
	HUDWSCharInfo_Player_NeutralFriendly = 4,
	HUDWSCharInfo_Player_NeutralOpposition = 5,
	HUDWSCharInfo_MAX = 6,
};
enum etHUDZoneNotifier
{
	HUDZoneNotifier_None = 0,
	HUDZoneNotifier_Customisation = 1,
	HUDZoneNotifier_Marketplace = 2,
	HUDZoneNotifier_Supply = 3,
	HUDZoneNotifier_VehicleRepair = 4,
	HUDZoneNotifier_VehicleSpawn = 5,
	HUDZoneNotifier_MAX = 6,
};
enum etInteractiveActorCategory
{
	InteractiveActorCategory_None = 0,
	InteractiveActorCategory_PedestrianCharacter = 1,
	InteractiveActorCategory_PlayerCharacter = 2,
	InteractiveActorCategory_Vehicle = 3,
	InteractiveActorCategory_Prop = 4,
	InteractiveActorCategory_StaticActor = 5,
	InteractiveActorCategory_TriggerVolume = 6,
	InteractiveActorCategory_MAX = 7,
};
enum etInteractiveActorType
{
	InteractiveActorType_None = 0,
	InteractiveActorType_APBPawn = 1,
	InteractiveActorType_GrafittiDisplayPoint = 2,
	InteractiveActorType_TaskItemPickup = 3,
	InteractiveActorType_RouteControlElement = 4,
	InteractiveActorType_Contact = 5,
	InteractiveActorType_AudioDisplayPoint = 6,
	InteractiveActorType_PlayerVehicleSpawnZone = 7,
	InteractiveActorType_AmmoDepot = 8,
	InteractiveActorType_AmmoCarrier = 9,
	InteractiveActorType_StatueDisplayPoint = 10,
	InteractiveActorType_MailBox = 11,
	InteractiveActorType_APBVehicle = 12,
	InteractiveActorType_NPC = 13,
	InteractiveActorType_Prop = 14,
	InteractiveActorType_PlayerVehicleDisplayPoint = 15,
	InteractiveActorType_GraffitiCrimeTarget = 16,
	InteractiveActorType_AmmoVendingMachine = 17,
	InteractiveActorType_AmmoShopFront = 18,
	InteractiveActorType_UIInteractionPoint = 19,
	InteractiveActorType_MAX = 20,
};
enum etInventoryItemCategory
{
	InventoryItemCategory_None = 0,
	InventoryItemCategory_Capacity = 1,
	InventoryItemCategory_Character = 2,
	InventoryItemCategory_Clothing = 3,
	InventoryItemCategory_DisplayPointToken = 4,
	InventoryItemCategory_Dummy = 5,
	InventoryItemCategory_Equipment = 6,
	InventoryItemCategory_FnMod = 7,
	InventoryItemCategory_Instrument = 8,
	InventoryItemCategory_MarketplaceCash = 9,
	InventoryItemCategory_Outfit = 10,
	InventoryItemCategory_RewardPackage = 11,
	InventoryItemCategory_Song = 12,
	InventoryItemCategory_Symbol = 13,
	InventoryItemCategory_Theme = 14,
	InventoryItemCategory_Unlock = 15,
	InventoryItemCategory_UsableToken = 16,
	InventoryItemCategory_Vehicle = 17,
	InventoryItemCategory_Weapon = 18,
	InventoryItemCategory_MAX = 19,
};
enum etInventoryItemCategoryLimited
{
	InventoryItemCategoryLimited_None = 0,
	InventoryItemCategoryLimited_Character = 1,
	InventoryItemCategoryLimited_Clothing = 2,
	InventoryItemCategoryLimited_Outfit = 3,
	InventoryItemCategoryLimited_Song = 4,
	InventoryItemCategoryLimited_Symbol = 5,
	InventoryItemCategoryLimited_Theme = 6,
	InventoryItemCategoryLimited_Vehicle = 7,
	InventoryItemCategoryLimited_Weapon = 8,
	InventoryItemCategoryLimited_MAX = 9,
};
enum etInventoryItemSubCategory
{
	InventoryItemSubCategory_None = 0,
	InventoryItemSubCategory_Capacity = 1,
	InventoryItemSubCategory_Character = 2,
	InventoryItemSubCategory_ClothingAccessory = 3,
	InventoryItemSubCategory_ClothingArmour = 4,
	InventoryItemSubCategory_ClothingBadges = 5,
	InventoryItemSubCategory_ClothingBelts = 6,
	InventoryItemSubCategory_ClothingBodyHair = 7,
	InventoryItemSubCategory_ClothingBottoms = 8,
	InventoryItemSubCategory_ClothingEyewear = 9,
	InventoryItemSubCategory_ClothingFacialHair = 10,
	InventoryItemSubCategory_ClothingFootwear = 11,
	InventoryItemSubCategory_ClothingHandWear = 12,
	InventoryItemSubCategory_ClothingHeadwear = 13,
	InventoryItemSubCategory_ClothingJewellery = 14,
	InventoryItemSubCategory_ClothingMasks = 15,
	InventoryItemSubCategory_ClothingOverall = 16,
	InventoryItemSubCategory_ClothingSkirtsAndDresses = 17,
	InventoryItemSubCategory_ClothingTop = 18,
	InventoryItemSubCategory_ClothingUnderwear = 19,
	InventoryItemSubCategory_ClothingWebbing = 20,
	InventoryItemSubCategory_DisplayPointToken = 21,
	InventoryItemSubCategory_Dummy = 22,
	InventoryItemSubCategory_Equipment = 23,
	InventoryItemSubCategory_FnModCharacter = 24,
	InventoryItemSubCategory_FnModVehicle = 25,
	InventoryItemSubCategory_FnModWeapon = 26,
	InventoryItemSubCategory_Instrument = 27,
	InventoryItemSubCategory_MarketplaceCash = 28,
	InventoryItemSubCategory_Outfit = 29,
	InventoryItemSubCategory_RewardPackageClothing = 30,
	InventoryItemSubCategory_RewardPackageUnlockPrimitives = 31,
	InventoryItemSubCategory_RewardPackageUnlockTitles = 32,
	InventoryItemSubCategory_RewardPackageUnlockVehicle = 33,
	InventoryItemSubCategory_RewardPackageUnlockVehicleParts = 34,
	InventoryItemSubCategory_RewardPackageUnlockWeapon = 35,
	InventoryItemSubCategory_RewardPackageUnlockWeaponSkin = 36,
	InventoryItemSubCategory_Song = 37,
	InventoryItemSubCategory_Symbol = 38,
	InventoryItemSubCategory_Theme = 39,
	InventoryItemSubCategory_UnlockCapacity = 40,
	InventoryItemSubCategory_UnlockClothing = 41,
	InventoryItemSubCategory_UnlockDisplayPoint = 42,
	InventoryItemSubCategory_UnlockEmote = 43,
	InventoryItemSubCategory_UnlockEquipment = 44,
	InventoryItemSubCategory_UnlockFeature = 45,
	InventoryItemSubCategory_UnlockFnMod = 46,
	InventoryItemSubCategory_UnlockGeneric = 47,
	InventoryItemSubCategory_UnlockInstrument = 48,
	InventoryItemSubCategory_UnlockPrimitive = 49,
	InventoryItemSubCategory_UnlockRewardPackage = 50,
	InventoryItemSubCategory_UnlockSong = 51,
	InventoryItemSubCategory_UnlockSymbol = 52,
	InventoryItemSubCategory_UnlockTheme = 53,
	InventoryItemSubCategory_UnlockTitle = 54,
	InventoryItemSubCategory_UnlockUsable = 55,
	InventoryItemSubCategory_UnlockVehicle = 56,
	InventoryItemSubCategory_UnlockVehicleComponent = 57,
	InventoryItemSubCategory_UnlockWeapon = 58,
	InventoryItemSubCategory_UnlockWeaponSkin = 59,
	InventoryItemSubCategory_UsableToken = 60,
	InventoryItemSubCategory_VehicleCar = 61,
	InventoryItemSubCategory_VehicleTruck = 62,
	InventoryItemSubCategory_VehicleVan = 63,
	InventoryItemSubCategory_WeaponGrenade = 64,
	InventoryItemSubCategory_WeaponMelee = 65,
	InventoryItemSubCategory_WeaponPrimary = 66,
	InventoryItemSubCategory_WeaponSecondary = 67,
	InventoryItemSubCategory_WeaponWitnessing = 68,
	InventoryItemSubCategory_MAX = 69,
};
enum etLoadingMovieTransitionType
{
	LMTT_AllFactions_Generic = 0,
	LMTT_Enforcer_Generic = 1,
	LMTT_Enforcer_Leagues = 2,
	LMTT_Criminal_Generic = 3,
	LMTT_Criminal_Leagues = 4,
	LMTT_AllFactions_Leagues = 5,
	LMTT_MAX = 6,
};
enum etLoadingScreenHintDomain
{
	LoadingScreenHintDomain_Action = 0,
	LoadingScreenHintDomain_Social = 1,
	LoadingScreenHintDomain_Either = 2,
	LoadingScreenHintDomain_MAX = 3,
};
enum etLocaleTypePriority
{
	BlockVolume = 0,
	Street = 1,
	LocationBeacon = 2,
	etLocaleTypePriority_MAX = 3,
};
enum etMailConstant
{
	MailConstant_Cost = 0,
	MailConstant_SoftLimit = 1,
	MailConstant_MAX = 2,
};
enum etMailDetach
{
	kMailDetach_None = 0,
	kMailDetach_Cash = 1,
	kMailDetach_Item = 2,
	kMailDetach_MAX = 3,
};
enum etMailDuration
{
	MailDuration_Short = 0,
	MailDuration_Long = 1,
	MailDuration_MAX = 2,
};
enum etMailInfo
{
	kMailInfo_None = 0,
	kMailInfo_Unread = 1,
	kMailInfo_Expired = 2,
	kMailInfo_MAX = 3,
};
enum etMailSort
{
	kMailSort_Default = 0,
	kMailSort_Sender_Name_ASC = 1,
	kMailSort_Sender_Name_DESC = 2,
	kMailSort_Send_Time_ASC = 3,
	kMailSort_Send_Time_DESC = 4,
	kMailSort_Expiration_Time_ASC = 5,
	kMailSort_Expiration_Time_DESC = 6,
	kMailSort_Read_ASC = 7,
	kMailSort_Read_DESC = 8,
	kMailSort_Subject_ASC = 9,
	kMailSort_Subject_DESC = 10,
	kMailSort_MAX = 11,
};
enum etMarketplaceAuctionType
{
	kMarketplaceAuctionType_None = 0,
	kMarketplaceAuctionType_Cash = 1,
	kMarketplaceAuctionType_MAX = 2,
};
enum etMarketplaceCashType
{
	MarketplaceCash = 0,
	etMarketplaceCashType_MAX = 1,
};
enum etMarketplaceConstant
{
	MarketplaceConstant_Tariff = 0,
	MarketplaceConstant_MaximumAuctions = 1,
	MarketplaceConstant_MinimumCash = 2,
	MarketplaceConstant_MAX = 3,
};
enum etMarketplaceDuration
{
	MarketplaceDuration_Short = 0,
	MarketplaceDuration_Medium = 1,
	MarketplaceDuration_Long = 2,
	MarketplaceDuration_MAX = 3,
};
enum etMarketplaceInfo
{
	kMarketplaceInfo_None = 0,
	kMarketplaceInfo_Auction_Expired = 1,
	kMarketplaceInfo_Auction_Sold = 2,
	kMarketplaceInfo_Auction_Won = 3,
	kMarketplaceInfo_Auction_Outbid = 4,
	kMarketplaceInfo_Auction_Cancelled = 5,
	kMarketplaceInfo_MAX = 6,
};
enum etMarketplaceListType
{
	kMarketplaceList_Auction = 0,
	kMarketplaceList_MyAuction = 1,
	kMarketplaceList_MyBid = 2,
	kMarketplaceList_MAX = 3,
};
enum etMarketplaceSearch
{
	kMarketplaceSearch_Default = 0,
	kMarketplaceSearch_Item = 1,
	kMarketplaceSearch_Seller = 2,
	kMarketplaceSearch_MAX = 3,
};
enum etMarketplaceSort
{
	kMarketplaceSort_Default = 0,
	kMarketplaceSort_Item_Name_ASC = 1,
	kMarketplaceSort_Item_Name_DESC = 2,
	kMarketplaceSort_Item_Rating_ASC = 3,
	kMarketplaceSort_Item_Rating_DESC = 4,
	kMarketplaceSort_Expiration_Time_ASC = 5,
	kMarketplaceSort_Expiration_Time_DESC = 6,
	kMarketplaceSort_Seller_Name_ASC = 7,
	kMarketplaceSort_Seller_Name_DESC = 8,
	kMarketplaceSort_Bid_Price_ASC = 9,
	kMarketplaceSort_Bid_Price_DESC = 10,
	kMarketplaceSort_Buyout_Price_ASC = 11,
	kMarketplaceSort_Buyout_Price_DESC = 12,
	kMarketplaceSort_Gender_ASC = 13,
	kMarketplaceSort_Gender_DESC = 14,
	kMarketplaceSort_High_Bidder_Name_ASC = 15,
	kMarketplaceSort_High_Bidder_Name_DESC = 16,
	kMarketplaceSort_Item_Faction_ASC = 17,
	kMarketplaceSort_Item_Faction_DESC = 18,
	kMarketplaceSort_MAX = 19,
};
enum etMarketplaceTimeLeft
{
	MarketplaceTimeLeft_VeryShort = 0,
	MarketplaceTimeLeft_Short = 1,
	MarketplaceTimeLeft_Medium = 2,
	MarketplaceTimeLeft_Long = 3,
	MarketplaceTimeLeft_VeryLong = 4,
	MarketplaceTimeLeft_MAX = 5,
};
enum etMissionCriminalDispatchTypes
{
	kCRIMINALDISPATCH_MissionVsEnforcers = 0,
	kCRIMINALDISPATCH_MissionVsCriminals = 1,
	kCRIMINALDISPATCH_Backup = 2,
	kCRIMINALDISPATCH_MAX = 3,
};
enum etMissionEnforcerDispatchTypes
{
	kENFORCERDISPATCH_MissionVsCriminals = 0,
	kENFORCERDISPATCH_Backup = 1,
	kENFORCERDISPATCH_Bounty = 2,
	kENFORCERDISPATCH_MAX = 3,
};
enum etMissionResultReason
{
	eMRR_None = 0,
	eMRR_Abandoned = 1,
	eMRR_ChallengeCycled = 2,
	eMRR_CompletedUnopposed = 3,
	eMRR_Declined = 4,
	eMRR_Emergency = 5,
	eMRR_Forced = 6,
	eMRR_ObjectiveCompleted = 7,
	eMRR_ObjectiveFailed = 8,
	eMRR_OppositionDestroyedOwnerTarget = 9,
	eMRR_OwnersDestroyedOwnerTarget = 10,
	eMRR_Reassigned = 11,
	eMRR_RemovedFromSide = 12,
	eMRR_SideTooSmall = 13,
	eMRR_TimedOut = 14,
	eMRR_VipKillLimitReached = 15,
	eMRR_WonFinalObjective = 16,
	eMRR_WonMostObjectives = 17,
	eMRR_MAX = 18,
};
enum etMissionUITrackedValue
{
	MissionUITrackedValue_None = 0,
	MissionUITrackedValue_TaskTargetsTriggeredOwners = 1,
	MissionUITrackedValue_TaskTargetsTriggeredOpposition = 2,
	MissionUITrackedValue_TaskItemsDelivered = 3,
	MissionUITrackedValue_CheckpointsTriggeredLocalPlayer = 4,
	MissionUITrackedValue_VIPLivesLostOwners = 5,
	MissionUITrackedValue_TakeoutsOwners = 6,
	MissionUITrackedValue_TakeoutsOpposition = 7,
	MissionUITrackedValue_BombTimer = 8,
	MissionUITrackedValue_GraffitiPointState = 9,
	MissionUITrackedValue_ArmedGuardTimer = 10,
	MissionUITrackedValue_TakeoutBalanceOwnerOpposition = 11,
	MissionUITrackedValue_CheckpointTerritoryState = 12,
	MissionUITrackedValue_MovingTargetState = 13,
	MissionUITrackedValue_BombState = 14,
	MissionUITrackedValue_TakeoutBalanceOppositionOwner = 15,
	MissionUITrackedValue_SurvivalTimer = 16,
	MissionUITrackedValue_EscapeBar = 17,
	MissionUITrackedValue_EscapePenaltyTimer = 18,
	MissionUITrackedValue_BombsArmed = 19,
	MissionUITrackedValue_MovingTargetsHeldOwners = 20,
	MissionUITrackedValue_MovingTargetsHeldOpposition = 21,
	MissionUITrackedValue_ObjectivesWonOwners = 22,
	MissionUITrackedValue_ObjectivesWonOpposition = 23,
	MissionUITrackedValue_TaskTargetsTriggeredOwners_SumConcStages = 24,
	MissionUITrackedValue_TaskTargetsTriggeredOpposition_SumConcStages = 25,
	MissionUITrackedValue_TaskItemsDeliveredOpposition = 26,
	MissionUITrackedValue_BombsArmed_SumConcStages = 27,
	MissionUITrackedValue_VIPLivesLostOpposition = 28,
	MissionUITrackedValue_VehiclesDelivered = 29,
	MissionUITrackedValue_VehiclesDeliveredOpposition = 30,
	MissionUITrackedValue_BombsArmedOpposition = 31,
	MissionUITrackedValue_BombsArmedOpposition_SumConcStages = 32,
	MissionUITrackedValue_ObjectiveHoldPointsOwners = 33,
	MissionUITrackedValue_ObjectiveHoldPointsOpposition = 34,
	MissionUITrackedValue_DescriptionTextOnly = 35,
	MissionUITrackedValue_MAX = 36,
};
enum etMissionUITrackedValueDisplay
{
	MissionUITrackedValueDisplay_None = 0,
	MissionUITrackedValueDisplay_Percentage = 1,
	MissionUITrackedValueDisplay_Bar = 2,
	MissionUITrackedValueDisplay_Percentage_Inverse = 3,
	MissionUITrackedValueDisplay_Bar_Inverse = 4,
	MissionUITrackedValueDisplay_Counter = 5,
	MissionUITrackedValueDisplay_Counter_Inverse = 6,
	MissionUITrackedValueDisplay_LimitedCounter = 7,
	MissionUITrackedValueDisplay_LimitedCounter_Inverse = 8,
	MissionUITrackedValueDisplay_Time = 9,
	MissionUITrackedValueDisplay_Time_Inverse = 10,
	MissionUITrackedValueDisplay_MAX = 11,
};
enum etModifierClass
{
	ModifierClass_None = 0,
	ModifierClass_Character = 1,
	ModifierClass_Vehicle = 2,
	ModifierClass_Weapon = 3,
	ModifierClass_MAX = 4,
};
enum etModifierEffectType
{
	ModifierEffectType_None = 0,
	ModifierEffectType_APBPawnConstant_ArrestTime = 1,
	ModifierEffectType_APBPawnConstant_JumpOffDamageBase = 2,
	ModifierEffectType_APBPawnConstant_JumpOffDamageVelocityMultiplier = 3,
	ModifierEffectType_APBPawnConstant_JumpOffFailDamage = 4,
	ModifierEffectType_APBPawn_JumpOffDamageTotal = 5,
	ModifierEffectType_Character_JumpZ = 6,
	ModifierEffectType_DesignerConstant2_EnvironmentDamageMultiplier = 7,
	ModifierEffectType_DesignerConstant2_ExplosionDamageMultiplier = 8,
	ModifierEffectType_DesignerConstant2_FriendlyExplosiveDamageMultiplier = 9,
	ModifierEffectType_DesignerConstant2_FriendlyWeaponDamageMultiplier = 10,
	ModifierEffectType_DesignerConstant2_SelfExplosiveDamageMultiplier = 11,
	ModifierEffectType_DesignerConstant2_SelfWeaponDamageMultiplier = 12,
	ModifierEffectType_DesignerConstant2_VehicleCollisionDamageMultiplier = 13,
	ModifierEffectType_DesignerConstant2_VehicleDamageThresholdMultiplier = 14,
	ModifierEffectType_DesignerConstant2_VehicleWeaponDamageMultiplier = 15,
	ModifierEffectType_DesignerConstant_AccelerationRate = 16,
	ModifierEffectType_DesignerConstant_AirControl = 17,
	ModifierEffectType_DesignerConstant_ArrestStreakArrests = 18,
	ModifierEffectType_DesignerConstant_CarSurfingMinSpeed = 19,
	ModifierEffectType_DesignerConstant_FallingDamageMultiplier = 20,
	ModifierEffectType_DesignerConstant_FallingDamageSpeedThreshold = 21,
	ModifierEffectType_DesignerConstant_FallingDamageStaminaMultiplier = 22,
	ModifierEffectType_DesignerConstant_FallingWindedSpeedThreshold = 23,
	ModifierEffectType_DesignerConstant_FieldSupplierRadiusPlayer = 24,
	ModifierEffectType_DesignerConstant_FieldSupplierRadiusVehicle = 25,
	ModifierEffectType_DesignerConstant_MaxJumpZ = 26,
	ModifierEffectType_DesignerConstant_PlayerHealth = 27,
	ModifierEffectType_DesignerConstant_PlayerHealthRegenerationDelay = 28,
	ModifierEffectType_DesignerConstant_PlayerHealthRegenerationDuration = 29,
	ModifierEffectType_DesignerConstant_PlayerMarksmanshipSpeed = 30,
	ModifierEffectType_DesignerConstant_PlayerRunSpeed = 31,
	ModifierEffectType_DesignerConstant_PlayerSprintSpeed = 32,
	ModifierEffectType_DesignerConstant_PlayerStamina = 33,
	ModifierEffectType_DesignerConstant_PlayerWalkSpeed = 34,
	ModifierEffectType_DesignerConstant_PlayerWalkSpeedCrouched = 35,
	ModifierEffectType_DesignerConstant_VehicleCriticalMaxDuration = 36,
	ModifierEffectType_DesignerConstant_VehicleCriticalMinDuration = 37,
	ModifierEffectType_DesignerConstant_VehicleHitDeathSpeed = 38,
	ModifierEffectType_Explosion_Damage = 39,
	ModifierEffectType_Explosion_GroundZeroRadius = 40,
	ModifierEffectType_Explosion_HardDamageModifier = 41,
	ModifierEffectType_Explosion_Radius = 42,
	ModifierEffectType_Explosion_StunDamage = 43,
	ModifierEffectType_Explosion_Type = 44,
	ModifierEffectType_FXMaterialImpact_FXMO_Flesh = 45,
	ModifierEffectType_RangedWeaponType_AccuracyPower = 46,
	ModifierEffectType_RangedWeaponType_CrouchModifier = 47,
	ModifierEffectType_RangedWeaponType_ExplosionType = 48,
	ModifierEffectType_RangedWeaponType_FreeAmmo = 49,
	ModifierEffectType_RangedWeaponType_InVehicleModifier = 50,
	ModifierEffectType_RangedWeaponType_JumpModifier = 51,
	ModifierEffectType_RangedWeaponType_LeanModifier = 52,
	ModifierEffectType_RangedWeaponType_MarksmanshipFOV16 = 53,
	ModifierEffectType_RangedWeaponType_MarksmanshipFOV4 = 54,
	ModifierEffectType_RangedWeaponType_MarksmanshipModifier = 55,
	ModifierEffectType_RangedWeaponType_MaxPierceCount = 56,
	ModifierEffectType_RangedWeaponType_MaxRange = 57,
	ModifierEffectType_RangedWeaponType_MaxTimeBetweenShots = 58,
	ModifierEffectType_RangedWeaponType_MinDamageRange = 59,
	ModifierEffectType_RangedWeaponType_MinNumShots = 60,
	ModifierEffectType_RangedWeaponType_MinNumShots_MarksmanshipOnly = 61,
	ModifierEffectType_RangedWeaponType_MinimumCrosshairWidth = 62,
	ModifierEffectType_RangedWeaponType_MinimumDamagePercentage = 63,
	ModifierEffectType_RangedWeaponType_OverallShotModifierCap = 64,
	ModifierEffectType_RangedWeaponType_PerShotModifier = 65,
	ModifierEffectType_RangedWeaponType_PerShotModifier_MarksmanshipOnly = 66,
	ModifierEffectType_RangedWeaponType_PierceDamageReduction = 67,
	ModifierEffectType_RangedWeaponType_PierceDamageScale = 68,
	ModifierEffectType_RangedWeaponType_RadiusAtTenMetres = 69,
	ModifierEffectType_RangedWeaponType_RampDistance = 70,
	ModifierEffectType_RangedWeaponType_RaySpreadAtTenMetres = 71,
	ModifierEffectType_RangedWeaponType_RaySpreadAtTenMetres_MarksmanshipOnly = 72,
	ModifierEffectType_RangedWeaponType_RaysPerShot = 73,
	ModifierEffectType_RangedWeaponType_Recoil = 74,
	ModifierEffectType_RangedWeaponType_RecoveryDelay = 75,
	ModifierEffectType_RangedWeaponType_RecoveryDelay_MarksmanshipOnly = 76,
	ModifierEffectType_RangedWeaponType_RecoveryPerSecond = 77,
	ModifierEffectType_RangedWeaponType_RecoveryPerSecond_MarksmanshipOnly = 78,
	ModifierEffectType_RangedWeaponType_RunModifier = 79,
	ModifierEffectType_RangedWeaponType_SprintModifier = 80,
	ModifierEffectType_RangedWeaponType_TracerFrequency = 81,
	ModifierEffectType_RangedWeaponType_WalkModifier = 82,
	ModifierEffectType_Special_DisableCSA = 83,
	ModifierEffectType_Special_FieldSupplier = 84,
	ModifierEffectType_Special_MaxHealth_Participation = 85,
	ModifierEffectType_Special_MaxStamina_Participation = 86,
	ModifierEffectType_Special_PointOfInterest = 87,
	ModifierEffectType_Special_RadarJammer = 88,
	ModifierEffectType_Special_RadarPing = 89,
	ModifierEffectType_Special_RemoteDetonator = 90,
	ModifierEffectType_Special_SpotOnDetonate = 91,
	ModifierEffectType_Special_Spotter = 92,
	ModifierEffectType_Special_StartRegen_AE = 93,
	ModifierEffectType_Special_TakeDamage = 94,
	ModifierEffectType_ThrownGrenade_DecrementAmmoCapacity = 95,
	ModifierEffectType_VehicleDamageVFX_FinalStateOverride = 96,
	ModifierEffectType_VehicleSetupType_BreakInCSADuration = 97,
	ModifierEffectType_VehicleSetupType_Brick = 98,
	ModifierEffectType_VehicleSetupType_ChassisTorqueFactor = 99,
	ModifierEffectType_VehicleSetupType_CollisionDamage = 100,
	ModifierEffectType_VehicleSetupType_ComOffsetX = 101,
	ModifierEffectType_VehicleSetupType_ComOffsetZ = 102,
	ModifierEffectType_VehicleSetupType_DamageableModifier = 103,
	ModifierEffectType_VehicleSetupType_DriveType = 104,
	ModifierEffectType_VehicleSetupType_EngineBrakingFactor = 105,
	ModifierEffectType_VehicleSetupType_FinalDriveRatio = 106,
	ModifierEffectType_VehicleSetupType_FrontLatFactor = 107,
	ModifierEffectType_VehicleSetupType_FrontLongFactor = 108,
	ModifierEffectType_VehicleSetupType_MainCargoPipCapacity = 109,
	ModifierEffectType_VehicleSetupType_MaxBrakeTorque = 110,
	ModifierEffectType_VehicleSetupType_MaxDirt = 111,
	ModifierEffectType_VehicleSetupType_MaxDust = 112,
	ModifierEffectType_VehicleSetupType_MaxHealth = 113,
	ModifierEffectType_VehicleSetupType_MaxRepairTimeSecs = 114,
	ModifierEffectType_VehicleSetupType_MaxReverseSpeed = 115,
	ModifierEffectType_VehicleSetupType_MaxSpeed = 116,
	ModifierEffectType_VehicleSetupType_MobileRadarTower = 117,
	ModifierEffectType_VehicleSetupType_Muffler = 118,
	ModifierEffectType_VehicleSetupType_PointOfInterest = 119,
	ModifierEffectType_VehicleSetupType_RadarRange = 120,
	ModifierEffectType_VehicleSetupType_RearHandbrakeLat = 121,
	ModifierEffectType_VehicleSetupType_RearHandbrakeLong = 122,
	ModifierEffectType_VehicleSetupType_RearLatFactor = 123,
	ModifierEffectType_VehicleSetupType_RearLongFactor = 124,
	ModifierEffectType_VehicleSetupType_ReverseThrottle = 125,
	ModifierEffectType_VehicleSetupType_Spawning = 126,
	ModifierEffectType_VehicleSetupType_SteerAngle_0ms = 127,
	ModifierEffectType_VehicleSetupType_SteerAngle_12ms = 128,
	ModifierEffectType_VehicleSetupType_SteerAngle_22ms = 129,
	ModifierEffectType_VehicleSetupType_SteerSpeed = 130,
	ModifierEffectType_VehicleSetupType_Suspension_Damping = 131,
	ModifierEffectType_VehicleSetupType_Suspension_Stiffness = 132,
	ModifierEffectType_VehicleSetupType_Torque_2500RPM = 133,
	ModifierEffectType_VehicleSetupType_Torque_4500RPM = 134,
	ModifierEffectType_VehicleSetupType_Torque_500RPM = 135,
	ModifierEffectType_VehicleSetupType_Torque_7000RPM = 136,
	ModifierEffectType_VehicleSetupType_WheelBoneOffset_FrontHeight = 137,
	ModifierEffectType_VehicleSetupType_WheelBoneOffset_RearHeight = 138,
	ModifierEffectType_VehicleSetupType_WheelMeshOffset_FrontHeight = 139,
	ModifierEffectType_VehicleSetupType_WheelMeshOffset_RearHeight = 140,
	ModifierEffectType_WeaponRecoil_MarksmanshipPitchPercentage = 141,
	ModifierEffectType_WeaponRecoil_MarksmanshipYawPercentage = 142,
	ModifierEffectType_WeaponRecoil_PitchMax = 143,
	ModifierEffectType_WeaponRecoil_PitchMin = 144,
	ModifierEffectType_WeaponRecoil_PitchRecoveryPercentageMax = 145,
	ModifierEffectType_WeaponRecoil_PitchRecoveryPercentageMin = 146,
	ModifierEffectType_WeaponRecoil_RecoilExp = 147,
	ModifierEffectType_WeaponRecoil_RecoilTime = 148,
	ModifierEffectType_WeaponRecoil_RecoverExp = 149,
	ModifierEffectType_WeaponRecoil_RecoverTime = 150,
	ModifierEffectType_WeaponRecoil_YawNegativeMax = 151,
	ModifierEffectType_WeaponRecoil_YawNegativeMin = 152,
	ModifierEffectType_WeaponRecoil_YawNegativeRecoveryPercentageMax = 153,
	ModifierEffectType_WeaponRecoil_YawNegativeRecoveryPercentageMin = 154,
	ModifierEffectType_WeaponRecoil_YawPositiveMax = 155,
	ModifierEffectType_WeaponRecoil_YawPositiveMin = 156,
	ModifierEffectType_WeaponRecoil_YawPositiveRecoveryPercentageMax = 157,
	ModifierEffectType_WeaponRecoil_YawPositiveRecoveryPercentageMin = 158,
	ModifierEffectType_WeaponType_AmmoCategory = 159,
	ModifierEffectType_WeaponType_AmmoPoolCapacity = 160,
	ModifierEffectType_WeaponType_BurstInterval = 161,
	ModifierEffectType_WeaponType_BurstShots = 162,
	ModifierEffectType_WeaponType_CanSprint = 163,
	ModifierEffectType_WeaponType_ChamberedQuickReload = 164,
	ModifierEffectType_WeaponType_CrouchSpeed = 165,
	ModifierEffectType_WeaponType_Encumbrance = 166,
	ModifierEffectType_WeaponType_EquipInVehicle = 167,
	ModifierEffectType_WeaponType_EquipTime = 168,
	ModifierEffectType_WeaponType_FireInterval = 169,
	ModifierEffectType_WeaponType_FireInterval_MarksmanshipOnly = 170,
	ModifierEffectType_WeaponType_FireState_MarksmanshipOnly = 171,
	ModifierEffectType_WeaponType_HUDReticule = 172,
	ModifierEffectType_WeaponType_HUDReticuleMarksmanship = 173,
	ModifierEffectType_WeaponType_HardDamageModifier = 174,
	ModifierEffectType_WeaponType_HealthDamage = 175,
	ModifierEffectType_WeaponType_HealthDamage_MarksmanshipOnly = 176,
	ModifierEffectType_WeaponType_HolsterTime = 177,
	ModifierEffectType_WeaponType_ImpulseStrength = 178,
	ModifierEffectType_WeaponType_LessLethal = 179,
	ModifierEffectType_WeaponType_MagazineCapacity = 180,
	ModifierEffectType_WeaponType_MagazineWarningAmount = 181,
	ModifierEffectType_WeaponType_MarksmanshipSpeed = 182,
	ModifierEffectType_WeaponType_PingDistance = 183,
	ModifierEffectType_WeaponType_RagdollImpulseScale = 184,
	ModifierEffectType_WeaponType_ReloadTime = 185,
	ModifierEffectType_WeaponType_ResupplyDelaySecs = 186,
	ModifierEffectType_WeaponType_ResupplyUnits = 187,
	ModifierEffectType_WeaponType_RunSpeed = 188,
	ModifierEffectType_WeaponType_SoftDamageModifier = 189,
	ModifierEffectType_WeaponType_SprintDelay = 190,
	ModifierEffectType_WeaponType_SprintDelay_MarksmanshipOnly = 191,
	ModifierEffectType_WeaponType_SprintSpeed = 192,
	ModifierEffectType_WeaponType_StaminaDamage = 193,
	ModifierEffectType_WeaponType_Tagger = 194,
	ModifierEffectType_WeaponType_TaggerDuration = 195,
	ModifierEffectType_WeaponType_WalkSpeed = 196,
	ModifierEffectType_WeaponType_WeaponFiringState = 197,
	ModifierEffectType_WeaponType_WeaponProjectile = 198,
	ModifierEffectType_MAX = 199,
};
enum etModifierItemEffectType
{
	ModifierItemEffectType_None = 0,
	ModifierItemEffectType_Character_EquipItem = 1,
	ModifierItemEffectType_MAX = 2,
};
enum etModifierStackingSlot
{
	ModifierStackingSlot_None = 0,
	ModifierStackingSlot_cActivated = 1,
	ModifierStackingSlot_cConsumable = 2,
	ModifierStackingSlot_cHealth = 3,
	ModifierStackingSlot_cMinigame = 4,
	ModifierStackingSlot_cUtility = 5,
	ModifierStackingSlot_vActivated = 6,
	ModifierStackingSlot_vChassis = 7,
	ModifierStackingSlot_vEngine = 8,
	ModifierStackingSlot_vGeneric = 9,
	ModifierStackingSlot_vTrunk = 10,
	ModifierStackingSlot_wBarrel = 11,
	ModifierStackingSlot_wMagazine = 12,
	ModifierStackingSlot_wReceiver = 13,
	ModifierStackingSlot_wUpperRail = 14,
	ModifierStackingSlot_MAX = 15,
};
enum etModifierType
{
	ModifierType_None = 0,
	ModifierType_Activatable = 1,
	ModifierType_Permanent = 2,
	ModifierType_MAX = 3,
};
enum etNameQuery
{
	kNameQuery_Chat = 0,
	kNameQuery_Item = 1,
	kNameQuery_MAX = 2,
};
enum etNPCCategory
{
	LCPedestrian = 0,
	LCVehicle = 1,
	etNPCCategory_MAX = 2,
};
enum etNPCEvent
{
	LC_NonProps_ColdHands = 0,
	LC_NonProps_Fem_Ambients = 1,
	LC_NonProps_Fem_ListenMusic = 2,
	LC_NonProps_Fem_TalkMobile = 3,
	LC_NonProps_LookSkyward = 4,
	LC_NonProps_Prototype = 5,
	LC_NonProps_Stand_Ambients = 6,
	LC_NonProps_Texting = 7,
	LC_Vignette_BankMachine_Male = 8,
	LC_Vignette_BinLitter_Male = 9,
	LC_Vignette_MailBox_Male = 10,
	LC_Vignette_Newspaper_Male = 11,
	LC_Vignette_Observe_Male = 12,
	LC_Vignette_Parkbench_Backless_Male = 13,
	LC_Vignette_Parkbench_Universal_Male = 14,
	LC_Vignette_Payphone_Male = 15,
	LC_Vignette_TaxiWait = 16,
	LC_Vignette_VendingMachine_Male = 17,
	LC_Vignette_WallLean_Male = 18,
	NO_EVENT = 19,
	eAvoidLoudVehicleNotifier = 20,
	eAvoidVehicle = 21,
	eAvoidVehicleNotifier = 22,
	eBumpIntoPlayer = 23,
	eCrimeCommitted = 24,
	eDespawnPedestrian = 25,
	eDriverBlocked = 26,
	eDriverDespawn = 27,
	eDriverPanic = 28,
	eDriverRandomAnim = 29,
	eDriverStopAndPanic = 30,
	eLookAround = 31,
	eLookAt = 32,
	eMinorCollision = 33,
	eNotifier = 34,
	eNotifierTimed = 35,
	eOnTopOfActor = 36,
	ePedIdle = 37,
	ePedestrianPanic = 38,
	eRandomAnim = 39,
	eSpawnDestroy = 40,
	eTaskTargetInteraction = 41,
	eVehicleCriticallyDamaged = 42,
	etNPCEvent_MAX = 43,
};
enum etNPCReaction
{
	NO_REACTION = 0,
	rBumpIntoPlayer = 1,
	rCower = 2,
	rCrimeCommitted = 3,
	rDespawnPedestrian = 4,
	rDriverAngry = 5,
	rDriverBlocked = 6,
	rDriverDeSpawn = 7,
	rDriverPanic = 8,
	rDriverRandomAnim = 9,
	rDriverStopAndPanic = 10,
	rLookAround = 11,
	rLookAt = 12,
	rPedWaitingAnxious = 13,
	rPedWaitingGeneric = 14,
	rReRouteToVignetteNode = 15,
	rRunAway = 16,
	rRunIntoBuilding = 17,
	rSpawnDestroy = 18,
	rStationaryRandomAnim = 19,
	rTaskTargetInteraction = 20,
	rVehicleCriticallyDamaged = 21,
	etNPCReaction_MAX = 22,
};
enum etNPCWorldEvent
{
	WorldEvent_Arson = 0,
	WorldEvent_AvoidVehicle = 1,
	WorldEvent_AvoidVehicleHorn = 2,
	WorldEvent_AvoidVehicleSiren = 3,
	WorldEvent_Bombing = 4,
	WorldEvent_BuildingBreakIn = 5,
	WorldEvent_BulletFired = 6,
	WorldEvent_BulletHit = 7,
	WorldEvent_Deathmatch = 8,
	WorldEvent_DebugShout = 9,
	WorldEvent_DestroyProp = 10,
	WorldEvent_Explosion = 11,
	WorldEvent_Graffiti = 12,
	WorldEvent_GrenadeCook = 13,
	WorldEvent_GrenadeThrown = 14,
	WorldEvent_Hijack = 15,
	WorldEvent_ItemDelivery = 16,
	WorldEvent_LookAtPlayer = 17,
	WorldEvent_LookAtShopfront = 18,
	WorldEvent_LookAtVehicleSiren = 19,
	WorldEvent_Mugging = 20,
	WorldEvent_NPCDeath = 21,
	WorldEvent_None = 22,
	WorldEvent_Pickup = 23,
	WorldEvent_RamRaid = 24,
	WorldEvent_Rendezvous = 25,
	WorldEvent_StolenLargeObject = 26,
	WorldEvent_TerritoryControl = 27,
	WorldEvent_Vandalism = 28,
	WorldEvent_VehicleCollision = 29,
	WorldEvent_VehicleLocked = 30,
	WorldEvent_VehicleUnlocked = 31,
	WorldEvent_WitnessableCrimeDefault = 32,
	WorldEvent_MAX = 33,
};
enum etOnFootDeathAnimation
{
	eDA_None = 0,
	eDA_Backwards = 1,
	eDA_Explosion_Backwards = 2,
	eDA_Explosion_Forwards = 3,
	eDA_Explosion_Left = 4,
	eDA_Explosion_Right = 5,
	eDA_Fall = 6,
	eDA_Forwards = 7,
	eDA_MAX = 8,
};
enum etOpenWorldConstant
{
	OpenWorldConstant_CashPoolHUDMarkerAmount_Crim = 0,
	OpenWorldConstant_CashPoolHUDMarkerAmount_Enf = 1,
	OpenWorldConstant_CashPoolLargeStash = 2,
	OpenWorldConstant_DropOffDeliveryPointReplenishmentDelay = 3,
	OpenWorldConstant_DropOffLargeTaskItemDeliveryPoints = 4,
	OpenWorldConstant_DropOffMediumTaskItemDeliveryPoints = 5,
	OpenWorldConstant_DropOffSmallTaskItemDeliveryPoints = 6,
	OpenWorldConstant_DropOffVehicleDeliveryPoints = 7,
	OpenWorldConstant_LargeTaskItemSizePoints = 8,
	OpenWorldConstant_MediumTaskItemSizePoints = 9,
	OpenWorldConstant_SmallTaskItemsLimit = 10,
	OpenWorldConstant_TaskItemTimeOut = 11,
	OpenWorldConstant_MAX = 12,
};
enum etOrganisation
{
	Organisation_None = 0,
	Organisation_CriminalDefault = 1,
	Organisation_GKings = 2,
	Organisation_BloodRoses = 3,
	Organisation_Praetorian = 4,
	Organisation_PrentissTigers = 5,
	Organisation_RedRain = 6,
	Organisation_SPPD = 7,
	Organisation_EnforcerDefault = 8,
	Organisation_EnforcerSeasonal = 9,
	Organisation_CriminalSeasonal = 10,
	Organisation_JokerDistribution = 11,
	Organisation_JokerAffiliates = 12,
	Organisation_Armas = 13,
	Organisation_ArmasJB = 14,
	Organisation_ArmasNTJB = 15,
	Organisation_Tutorial = 16,
	Organisation_Anarchists = 17,
	Organisation_MAX = 18,
};
enum etPawnHitReaction_BoneList
{
	aHitReactionBoneList = 0,
	etPawnHitReaction_BoneList_MAX = 1,
};
enum etPawnHitReaction_BoneRemapTable
{
	aHitReactionBoneRemapTable1 = 0,
	aHitReactionBoneRemapTable2 = 1,
	etPawnHitReaction_BoneRemapTable_MAX = 2,
};
enum etPawnHitReaction_Bool
{
	bEnableHitReactionBoneSprings = 0,
	etPawnHitReaction_Bool_MAX = 1,
};
enum etPawnHitReaction_ConstrainedBoneList
{
	aHitReactionConstrainedBoneList = 0,
	etPawnHitReaction_ConstrainedBoneList_MAX = 1,
};
enum etPawnHitReaction_Float
{
	fHitReactionBlendOutTime = 0,
	fHitReactionImpulseScale = 1,
	fHitReactionImpulseScaleWalking = 2,
	fHitReactionImpulseScaleRunning = 3,
	fHitReactionImpulseScaleSprinting = 4,
	fHitReactionImpulseScaleLocalPlayer = 5,
	fHitReactionMassEffectScale = 6,
	etPawnHitReaction_Float_MAX = 7,
};
enum etPawnHitReaction_SpringList
{
	aHitReactionSpringList = 0,
	etPawnHitReaction_SpringList_MAX = 1,
};
enum etPawnHitReaction_Vector2D
{
	vHitReactionMotorStrength = 0,
	vHitReactionSpringStrength = 1,
	etPawnHitReaction_Vector2D_MAX = 2,
};
enum etPawnHitReactionType
{
	PawnHitReaction_BoneList = 0,
	PawnHitReaction_ConstrainedBoneList = 1,
	PawnHitReaction_SpringList = 2,
	PawnHitReaction_BoneRemapTable = 3,
	PawnHitReaction_Float = 4,
	PawnHitReaction_Vector2D = 5,
	PawnHitReaction_Bool = 6,
	PawnHitReaction_MAX = 7,
};
enum etPedestrianPaletteType
{
	F_Business_City = 0,
	F_Business_Local = 1,
	F_Clubber_Casual = 2,
	F_Clubber_Fashion = 3,
	F_Industrial_DockWorker = 4,
	F_Industrial_FactoryWorker = 5,
	F_LowerClass_TrailerTrash = 6,
	F_LowerClass_Welfare = 7,
	F_MiddleClass_Casual = 8,
	F_MiddleClass_Professional = 9,
	F_Seedy_Grifter = 10,
	F_Seedy_Hobo = 11,
	F_Uniformed_Casual = 12,
	F_Uniformed_Smart = 13,
	F_UpperClass_Casual = 14,
	F_UpperClass_Fashion = 15,
	F_Urban1_HipHop = 16,
	F_Urban1_Rocker = 17,
	F_Urban2_Athletic = 18,
	F_Urban2_Emo = 19,
	M_Business_City = 20,
	M_Business_City_AsianDyed_06 = 21,
	M_Business_Local = 22,
	M_Clubber_Casual = 23,
	M_Clubber_Fashion = 24,
	M_Industrial_DockWorker = 25,
	M_Industrial_FactoryWorker = 26,
	M_LowerClass_TrailerTrash = 27,
	M_LowerClass_Welfare = 28,
	M_MiddleClass_Casual = 29,
	M_MiddleClass_Professional = 30,
	M_Seedy_Grifter = 31,
	M_Seedy_Hobo = 32,
	M_Uniformed_Casual = 33,
	M_Uniformed_Professional = 34,
	M_Uniformed_Smart_AsianDyed_06 = 35,
	M_UpperClass_Casual = 36,
	M_UpperClass_Fashion = 37,
	M_Urban1_HipHop = 38,
	M_Urban1_Rocker = 39,
	M_Urban2_Athletic = 40,
	M_Urban2_Emo = 41,
	etPedestrianPaletteType_MAX = 42,
};
enum etPedestrianTempSetup
{
	Male = 0,
	Female = 1,
	etPedestrianTempSetup_MAX = 2,
};
enum etPedestrianTTIReaction
{
	NPCMugging = 0,
	etPedestrianTTIReaction_MAX = 1,
};
enum etPlayerRadarPings
{
	Pings_None = 0,
	Pings_Partial = 1,
	Pings_Full = 2,
	Pings_MAX = 3,
};
enum etPopulation
{
	kPopulation_Low = 0,
	kPopulation_Medium = 1,
	kPopulation_High = 2,
	kPopulation_Full = 3,
	kPopulation_MAX = 4,
};
enum etPrimitiveType
{
	kPrimitive_Vinyl = 0,
	kPrimitive_Decal = 1,
	kPrimitive_Font = 2,
	kPrimitive_MAX = 3,
};
enum etPvPRule
{
	PvPRule_DisabledAlways = 0,
	PvPRule_EnabledAlways = 1,
	PvPRule_EnabledFriendsOnly = 2,
	PvPRule_EnabledEnemiesOnly = 3,
	PvPRule_EnabledFriendsAndEnemiesOnly = 4,
	PvPRule_MAX = 5,
};
enum etPvPType
{
	PvPType_Environment = 0,
	PvPType_PlayerEnforcer = 1,
	PvPType_PlayerCriminal = 2,
	PvPType_PlayerVIP = 3,
	PvPType_FFA = 4,
	PvPType_MAX = 5,
};
enum etRCEType
{
	RCEType_None = 0,
	RCEType_Door = 1,
	RCEType_Fence = 2,
	RCEType_Ladder = 3,
	RCEType_MAX = 4,
};
enum etSkillRatingConstant
{
	SkillRatingConstant_InitialMean = 0,
	SkillRatingConstant_InitialStandardDeviation = 1,
	SkillRatingConstant_Beta = 2,
	SkillRatingConstant_DynamicsFactor = 3,
	SkillRatingConstant_DrawProbability = 4,
	SkillRatingConstant_ConservativeStandardDeviationMultiplier = 5,
	SkillRatingConstant_InTrainingStandardDeviationThreshold = 6,
	SkillRatingConstant_InTrainingMatchNumThreshold = 7,
	SkillRatingConstant_AllowedMeanChangeStdDevMultiplier = 8,
	SkillRatingConstant_MinAllowedConsRating = 9,
	SkillRatingConstant_MaxAllowedConsRating = 10,
	SkillRatingConstant_MAX = 11,
};
enum etSpawnConstant
{
	SpawnConstant_DistrictMapBackgroundOpactiy = 0,
	SpawnConstant_ElectiveSpawn_1_FadeToGreyTime = 1,
	SpawnConstant_ElectiveSpawn_2_ShowElectiveSpawnScreenTime = 2,
	SpawnConstant_ElectiveSpawn_3_ShowForcedSpawnScreenTime = 3,
	SpawnConstant_ElectiveSpawn_4_AutomaticSpawnTime = 4,
	SpawnConstant_ElectiveSpawn_5_KillSwitchTime = 5,
	SpawnConstant_ElectiveSpawn_AddToMapZoom = 6,
	SpawnConstant_ElectiveSpawn_MaxRelaxationAttempts = 7,
	SpawnConstant_ElectiveSpawn_MaxSpawnZones = 8,
	SpawnConstant_ElectiveSpawn_VehicleCooldownTime = 9,
	SpawnConstant_ElectiveSpawn_VehicleDamagePercentage = 10,
	SpawnConstant_GroundPlacementHeightOffset = 11,
	SpawnConstant_MissionDefaultRespawnTime = 12,
	SpawnConstant_MissionDefaultRespawnTimeIncrement = 13,
	SpawnConstant_MissionMinPlayerRespawnDistance = 14,
	SpawnConstant_RespawnRetryInterval = 15,
	SpawnConstant_RespawnTransitionScreenFadeInTime = 16,
	SpawnConstant_RespawnTransitionScreenFadeOutTime = 17,
	SpawnConstant_SpawnWaveRefreshRateSeconds = 18,
	SpawnConstant_UnstickRespawnDelaySeconds = 19,
	SpawnConstant_MAX = 20,
};
enum etSpawnDestroyData
{
	Spawn = 0,
	Destroy = 1,
	etSpawnDestroyData_MAX = 2,
};
enum etSpawnVariable
{
	SpawnVariable_None = 0,
	SpawnVariable_Default = 1,
	SpawnVariable_PGBeacon = 2,
	SpawnVariable_PGCrate = 3,
	SpawnVariable_DefaultRelaxation = 4,
	SpawnVariable_ActionRelaxation = 5,
	SpawnVariable_Minigame_GoldenGun = 6,
	SpawnVariable_Minigame_Mugging = 7,
	SpawnVariable_Minigame_BlockFDM = 8,
	SpawnVariable_Minigame_VIP = 9,
	SpawnVariable_TestDistricts = 10,
	SpawnVariable_MAX = 11,
};
enum etTaskItemAnimationType
{
	TaskItemAnimationType_None = 0,
	TaskItemAnimationType_Medium = 1,
	TaskItemAnimationType_Large = 2,
	TaskItemAnimationType_MAX = 3,
};
enum etTaskItemBatch
{
	TaskItemBatch_None = 0,
	TaskItemBatch_A = 1,
	TaskItemBatch_B = 2,
	TaskItemBatch_C = 3,
	TaskItemBatch_D = 4,
	TaskItemBatch_E = 5,
	TaskItemBatch_F = 6,
	TaskItemBatch_G = 7,
	TaskItemBatch_H = 8,
	TaskItemBatch_MAX = 9,
};
enum etTaskItemCategory
{
	TaskItemCategory_None = 0,
	TaskItemCategory_Electrical = 1,
	TaskItemCategory_Evidence = 2,
	TaskItemCategory_Financial = 3,
	TaskItemCategory_Generic = 4,
	TaskItemCategory_Hazard = 5,
	TaskItemCategory_Baggage = 6,
	TaskItemCategory_Personal = 7,
	TaskItemCategory_Test_HouseholdTech = 8,
	TaskItemCategory_Storage = 9,
	TaskItemCategory_Event = 10,
	TaskItemCategory_Deployables = 11,
	TaskItemCategory_Event_Seasonal = 12,
	TaskItemCategory_MAX = 13,
};
enum etTaskItemSize
{
	TaskItemSize_None = 0,
	TaskItemSize_Small = 1,
	TaskItemSize_MediumCarried = 2,
	TaskItemSize_LargeCarried = 3,
	TaskItemSize_Vehicle = 4,
	TaskItemSize_CashPool = 5,
	TaskItemSize_MAX = 6,
};
enum etTaskItemSpecificationMethod
{
	TISM_ByTaskItemVariety = 0,
	TISM_ByTaskItemSubCategory = 1,
	TISM_ByTaskItemCategory = 2,
	TISM_MAX = 3,
};
enum etTaskItemVisibility
{
	ItemVisibility_VisibleAlways = 0,
	ItemVisibility_HiddenAlways = 1,
	ItemVisibility_VisibleUntilFirstPickup = 2,
	ItemVisibility_MAX = 3,
};
enum etTaskMemberRequirement
{
	MemberRequirement_AllMembersSimultaneously = 0,
	MemberRequirement_AllMembersSequentially = 1,
	MemberRequirement_AnyMember = 2,
	MemberRequirement_MAX = 3,
};
enum etTaskObjectiveStage
{
	TaskObjectiveStage = 0,
	TaskObjectiveStage_01 = 1,
	TaskObjectiveStage_02 = 2,
	TaskObjectiveStage_03 = 3,
	TaskObjectiveStage_04 = 4,
	TaskObjectiveStage_05 = 5,
	TaskObjectiveStage_06 = 6,
	TaskObjectiveStage_07 = 7,
	TaskObjectiveStage_08 = 8,
	TaskObjectiveStage_09 = 9,
	TaskObjectiveStage = 10,
	TaskObjectiveStage = 11,
	TaskObjectiveStage = 12,
	TaskObjectiveStage = 13,
	TaskObjectiveStage = 14,
	TaskObjectiveStage = 15,
	TaskObjectiveStage = 16,
	TaskObjectiveStage = 17,
	TaskObjectiveStage = 18,
	TaskObjectiveStage = 19,
	TaskObjectiveStage = 20,
	TaskObjectiveStage = 21,
	TaskObjectiveStage = 22,
	TaskObjectiveStage = 23,
	TaskObjectiveStage = 24,
	TaskObjectiveStage = 25,
	TaskObjectiveStage = 26,
	TaskObjectiveStage = 27,
	TaskObjectiveStage = 28,
	TaskObjectiveStage = 29,
	TaskObjectiveStage = 30,
	TaskObjectiveStage = 31,
	TaskObjectiveStage = 32,
	TaskObjectiveStage = 33,
	TaskObjectiveStage = 34,
	TaskObjectiveStage = 35,
	TaskObjectiveStage = 36,
	TaskObjectiveStage = 37,
	TaskObjectiveStage = 38,
	TaskObjectiveStage = 39,
	TaskObjectiveStage_MAX = 40,
};
enum etTaskOperationCategory
{
	TaskOperationCategory_None = 0,
	TaskOperationCategory_AntiGraffiti = 1,
	TaskOperationCategory_ArmedGuard = 2,
	TaskOperationCategory_Arson = 3,
	TaskOperationCategory_BombDisposal = 4,
	TaskOperationCategory_Bombing = 5,
	TaskOperationCategory_Burglary = 6,
	TaskOperationCategory_Bust = 7,
	TaskOperationCategory_CrimeSceneInvestigation = 8,
	TaskOperationCategory_Deathmatch = 9,
	TaskOperationCategory_DefaultOpposition = 10,
	TaskOperationCategory_Delivery = 11,
	TaskOperationCategory_Escape = 12,
	TaskOperationCategory_Escort = 13,
	TaskOperationCategory_ForcedArrest = 14,
	TaskOperationCategory_ForcedEntry = 15,
	TaskOperationCategory_Graffiti = 16,
	TaskOperationCategory_Hacking = 17,
	TaskOperationCategory_MovingTarget = 18,
	TaskOperationCategory_Mugging = 19,
	TaskOperationCategory_Pickup = 20,
	TaskOperationCategory_RamRaid = 21,
	TaskOperationCategory_Rendezvous = 22,
	TaskOperationCategory_Sabotage = 23,
	TaskOperationCategory_StopAndSearch = 24,
	TaskOperationCategory_Survival = 25,
	TaskOperationCategory_TakeOverDeathmatch = 26,
	TaskOperationCategory_TerritoryControl = 27,
	TaskOperationCategory_Vandalism = 28,
	TaskOperationCategory_VehicleCargo = 29,
	TaskOperationCategory_VehicleLooting = 30,
	TaskOperationCategory_VehicleTheft = 31,
	TaskOperationCategory_MAX = 32,
};
enum etTaskTargetCategory
{
	TaskTargetCategory_None = 0,
	TaskTargetCategory_NPC_Pedestrian = 1,
	TaskTargetCategory_ParkedVehicle = 2,
	TaskTargetCategory_ObjectivePoint = 3,
	TaskTargetCategory_StaticActor = 4,
	TaskTargetCategory_TriggerVolume = 5,
	TaskTargetCategory_GraffitiPoint = 6,
	TaskTargetCategory_StandAloneProp = 7,
	TaskTargetCategory_ItemSpawnPoint = 8,
	TaskTargetCategory_Checkpoint = 9,
	TaskTargetCategory_MAX = 10,
};
enum etTaskTargetClass
{
	TaskTargetClass_None = 0,
	TaskTargetClass_GraffitiPoint = 1,
	TaskTargetClass_ItemSpawnPoint = 2,
	TaskTargetClass_Checkpoint = 3,
	TaskTargetClass_NPC = 4,
	TaskTargetClass_Prop = 5,
	TaskTargetClass_VehicleSpawnPoint = 6,
	TaskTargetClass_MinigameSpawner = 7,
	TaskTargetClass_MAX = 8,
};
enum etTaskTargetGraffiti
{
	Graffiti_Default = 0,
	Graffiti_MAX = 1,
};
enum etTaskTargetSpecificationMethod
{
	TTSM_SpecificTaskTargetType = 0,
	TTSM_AnyOneTypeFromClass = 1,
	TTSM_AnyMixFromClass = 2,
	TTSM_MAX = 3,
};
enum etTESProjectionInfo
{
	TESProjectionInfo_Body_MaxProjections = 0,
	TESProjectionInfo_Body_MaxPrimitives = 1,
	TESProjectionInfo_Body_AverageNumItems = 2,
	TESProjectionInfo_ComplexityCutOff_LowMed = 3,
	TESProjectionInfo_ComplexityCutOff_MedHigh = 4,
	TESProjectionInfo_Vehicle_MaxProjections = 5,
	TESProjectionInfo_Vehicle_MaxPrimitives = 6,
	TESProjectionInfo_Symbol_MaxPrimitives = 7,
	TESProjectionInfo_MAX = 8,
};
enum etTimeOfDayAvailability
{
	TimeOfDayAvailability_0000 = 0,
	TimeOfDayAvailability_0001 = 1,
	TimeOfDayAvailability_0010 = 2,
	TimeOfDayAvailability_0011 = 3,
	TimeOfDayAvailability_0100 = 4,
	TimeOfDayAvailability_0101 = 5,
	TimeOfDayAvailability_0110 = 6,
	TimeOfDayAvailability_0111 = 7,
	TimeOfDayAvailability = 8,
	TimeOfDayAvailability = 9,
	TimeOfDayAvailability = 10,
	TimeOfDayAvailability = 11,
	TimeOfDayAvailability = 12,
	TimeOfDayAvailability = 13,
	TimeOfDayAvailability = 14,
	TimeOfDayAvailability = 15,
	TimeOfDayAvailability_Always = 16,
	TimeOfDayAvailability_MAX = 17,
};
enum etTimeofDayPeriod
{
	TimeofDayPeriod_Morning = 0,
	TimeofDayPeriod_Afternoon = 1,
	TimeofDayPeriod_Evening = 2,
	TimeofDayPeriod_Night = 3,
	TimeofDayPeriod_MAX = 4,
};
enum etTrackedActivityOperation
{
	TrackedActivityOperation_None = 0,
	TrackedActivityOperation_0_DivideBy = 1,
	TrackedActivityOperation_0_DivideBy_1_Percent = 2,
	TrackedActivityOperation_Sum = 3,
	TrackedActivityOperation_Min = 4,
	TrackedActivityOperation_MAX = 5,
};
enum etTrackedActivityUnitConversion
{
	TrackedActivityUnitConversion_None = 0,
	TrackedActivityUnitConversion_Days_Hours_Minutes_Seconds = 1,
	TrackedActivityUnitConversion_FixedPoint = 2,
	TrackedActivityUnitConversion_MAX = 3,
};
enum etTTINPCEndingType
{
	Despawn = 0,
	WalkAway = 1,
	RunAway = 2,
	Die = 3,
	etTTINPCEndingType_MAX = 4,
};
enum etTTIPlayerAnimType
{
	IntroAnim = 0,
	MainAnim1 = 1,
	MainAnim2 = 2,
	MainAnim3 = 3,
	OutroAnim = 4,
	IdleAnim = 5,
	etTTIPlayerAnimType_MAX = 6,
};
enum etTutorialBypassBehaviour
{
	TutorialBypassBehaviour_None = 0,
	TutorialBypassBehaviour_MaxOutTutorContacts_NoRewards = 1,
	TutorialBypassBehaviour_MaxOutTutorContacts_FullRewards = 2,
	TutorialBypassBehaviour_MAX = 3,
};
enum etTutorialPosition
{
	TopLeft = 0,
	MiddleLeft = 1,
	BottomLeft = 2,
	etTutorialPosition_MAX = 3,
};
enum etTutorialType
{
	Small = 0,
	Large = 1,
	etTutorialType_MAX = 2,
};
enum etVehicleBatch
{
	VehicleBatch_None = 0,
	VehicleBatch_A = 1,
	VehicleBatch_B = 2,
	VehicleBatch_C = 3,
	VehicleBatch_D = 4,
	VehicleBatch_E = 5,
	VehicleBatch_F = 6,
	VehicleBatch_G = 7,
	VehicleBatch_H = 8,
	VehicleBatch_MAX = 9,
};
enum etVehicleColour
{
	White = 0,
	Silver = 1,
	Grey = 2,
	SlateGrey = 3,
	DarkGrey = 4,
	Black = 5,
	CadetBlue = 6,
	RoyalBlue = 7,
	MediumBlue = 8,
	Blue = 9,
	DarkBlueMike = 10,
	LightSlateGrey = 11,
	Cyan = 12,
	MediumSeaGreen = 13,
	SeaGreenStig = 14,
	DarkCyan = 15,
	DarkSeaGreen = 16,
	Green = 17,
	DarkGreen = 18,
	DarkOliveGreen = 19,
	Orange = 20,
	Red = 21,
	DarkRed = 22,
	Brown = 23,
	DarkBrownPranay = 24,
	Khaki = 25,
	HoneyDew = 26,
	LightPink = 27,
	Yellow = 28,
	Golden = 29,
	DarkOrange = 30,
	DarkGolden = 31,
	Silver_Metallic = 32,
	Grey_Metallic = 33,
	SlateGrey_Metallic = 34,
	LightSlateGrey_Metallic = 35,
	DarkSeaGreen_Metallic = 36,
	HoneyDew_Metallic = 37,
	Orange_Metallic = 38,
	etVehicleColour_MAX = 39,
};
enum etVehicleDamageVFXState
{
	VehicleDamageVFX_None = 0,
	VehicleDamageVFX_DamageState1 = 1,
	VehicleDamageVFX_DamageState2 = 2,
	VehicleDamageVFX_DamageState3 = 3,
	VehicleDamageVFX_DamageState4 = 4,
	VehicleDamageVFX_MAX = 5,
};
enum etVehicleDistricts
{
	None_ = 0,
	Financial = 1,
	etVehicleDistricts_MAX = 2,
};
enum etVehicleDriveType
{
	kVehicleDriveRWD = 0,
	kVehicleDriveFWD = 1,
	kVehicleDriveAWD = 2,
	etVehicleDriveType_MAX = 3,
};
enum etVehicleGear
{
	VehicleGear_Reverse = 0,
	VehicleGear = 1,
	VehicleGear = 2,
	VehicleGear = 3,
	VehicleGear = 4,
	VehicleGear = 5,
	VehicleGear = 6,
	VehicleGear_MAX = 7,
};
enum etVehicleInteractionAnimation
{
	kVIA_Open_Door = 0,
	kVIA_Close_Door = 1,
	kVIA_Close_Door_From_Inside = 2,
	kVIA_Get_In_And_Close_Door = 3,
	kVIA_Open_Door_And_Get_Out = 4,
	kVIA_Open_Door_And_Bail_Out = 5,
	kVIA_Swap_Seats = 6,
	kVIA_Enter_VCP = 7,
	kVIA_Exit_VCP = 8,
	kVIA_Eject_Doing_Initial_Criminal = 9,
	kVIA_Eject_Doing_Initial_Enforcer = 10,
	kVIA_Eject_Doing_Later_Criminal = 11,
	kVIA_Eject_Doing_Later_Enforcer = 12,
	kVIA_Eject_Seat_Slide_Criminal = 13,
	kVIA_Eject_Seat_Slide_Enforcer = 14,
	kVIA_Death = 15,
	kVIA_DeathLean = 16,
	kVIA_MAX = 17,
};
enum etVehicleModelClass
{
	VehicleModelClass_None = 0,
	VehicleModelClass_MAX = 1,
};
enum etVehiclePositionIndex
{
	VehiclePositionIndex_FrontLeft = 0,
	VehiclePositionIndex_FrontRight = 1,
	VehiclePositionIndex_RearLeft = 2,
	VehiclePositionIndex_RearRight = 3,
	VehiclePositionIndex_Cargo = 4,
	VehiclePositionIndex_MAX = 5,
};
enum etVehicleSetupType
{
	VehicleSetupType_None = 0,
	VehicleSetupType_AmbientSUV_PickupKingCab = 1,
	VehicleSetupType_AmbientSUV_SUV = 2,
	VehicleSetupType_AmbientTruck_BoxBackCurtain = 3,
	VehicleSetupType_AmbientUtility_2DoorCabriolet = 4,
	VehicleSetupType_AmbientUtility_2DoorCoupe = 5,
	VehicleSetupType_AmbientTruck_Cement = 6,
	VehicleSetupType_AmbientUtility_2DoorHatchbackVan = 7,
	VehicleSetupType_AmbientTruck_Garbage = 8,
	VehicleSetupType_AmbientUtility_4DoorEstate = 9,
	VehicleSetupType_AmbientUtility_4DoorEstateVan = 10,
	VehicleSetupType_AmbientUtility_4DoorHatchback = 11,
	VehicleSetupType_AmbientUtility_4DoorSedan = 12,
	VehicleSetupType_AmbientUtility_ClassicMuscle = 13,
	VehicleSetupType_AmbientUtility_ExecSaloon = 14,
	VehicleSetupType_AmbientUtility_LowRider = 15,
	VehicleSetupType_AmbientUtility_SportSUV = 16,
	VehicleSetupType_AmbientUtility_Taxi = 17,
	VehicleSetupType_AmbientVan_Ambulance = 18,
	VehicleSetupType_AmbientVan_ArmouredVan = 19,
	VehicleSetupType_AmbientVan_StandardVan = 20,
	VehicleSetupType_CriminalCarrying = 21,
	VehicleSetupType_CriminalCompact = 22,
	VehicleSetupType_CriminalPerformance = 23,
	VehicleSetupType_EnforcerCarrying = 24,
	VehicleSetupType_EnforcerCompact = 25,
	VehicleSetupType_EnforcerPerformance = 26,
	VehicleSetupType_AmbientSUV_Pickup = 27,
	VehicleSetupType_AmbientUtility_Roadster = 28,
	VehicleSetupType_Armas_AmbientUtility_ClassicMuscle1 = 29,
	VehicleSetupType_Rally_2DoorHatchbackVan = 30,
	VehicleSetupType_TestVehicle = 31,
	VehicleSetupType_TestVehicle2 = 32,
	VehicleSetupType_Minigame_ClassicMuscle_Infection = 33,
	VehicleSetupType_AmbientUtility_4DoorRally = 34,
	VehicleSetupType_ExoticMuscle = 35,
	VehicleSetupType_MAX = 36,
};
enum etVehicleSpecificationMethod
{
	VehicleSpecification_ByVehicleCategory = 0,
	VehicleSpecification_ByVehicleSubCategory = 1,
	VehicleSpecification_SpecificVehicleSetupType = 2,
	VehicleSpecification_MAX = 3,
};
enum etVehicleTempSetup
{
	VehicleTempSetup_2DoorCar = 0,
	VehicleTempSetup_4DoorCar = 1,
	VehicleTempSetup_KingCab = 2,
	VehicleTempSetup_Roadster = 3,
	VehicleTempSetup_VanStandard = 4,
	VehicleTempSetup_2DrCoupe = 5,
	VehicleTempSetup_2DrVan = 6,
	VehicleTempSetup_4DrEstate = 7,
	VehicleTempSetup_ClassicMuscle = 8,
	VehicleTempSetup_Utility1Estate = 9,
	VehicleTempSetup_EstateVan = 10,
	VehicleTempSetup_ExecSaloon = 11,
	VehicleTempSetup_Hatchback = 12,
	VehicleTempSetup_Lowrider = 13,
	VehicleTempSetup_Pickup = 14,
	VehicleTempSetup_Saloon = 15,
	VehicleTempSetup_SportsSUV = 16,
	VehicleTempSetup_SUV = 17,
	VehicleTempSetup_Taxi = 18,
	VehicleTempSetup_TruckCurtain = 19,
	VehicleTempSetup_VanAmbulance = 20,
	VehicleTempSetup_VanArmoured = 21,
	VehicleTempSetup_CrimCarrying = 22,
	VehicleTempSetup_CrimCompact = 23,
	VehicleTempSetup_CrimPerformance = 24,
	VehicleTempSetup_EnfCarrying = 25,
	VehicleTempSetup_EnfCompact = 26,
	VehicleTempSetup_EnfPerformance = 27,
	VehicleTempSetup_ExoticMuscle = 28,
	VehicleTempSetup_MAX = 29,
};
enum etVehicleUICategory
{
	VehicleUICategory_None = 0,
	VehicleUICategory_MAX = 1,
};
enum etVIPAssignmentMethod
{
	VIPAssignmentMethod_SideLeader = 0,
	VIPAssignmentMethod_HighestHeatPlayer = 1,
	VIPAssignmentMethod_MAX = 2,
};
enum etWarningPromptGroup
{
	WPG_Warning_Email = 0,
	WPG_Warning_Vending = 1,
	WPG_Warning_MAX = 2,
};
enum etWeaponClass
{
	Grenade = 0,
	Projectile = 1,
	Raycast = 2,
	ShotGun = 3,
	Witnessing = 4,
	etWeaponClass_MAX = 5,
};
enum etWeaponFiringState
{
	WeaponNone = 0,
	WeaponSemi = 1,
	WeaponAuto = 2,
	WeaponBurst = 3,
	WeaponCooking = 4,
	etWeaponFiringState_MAX = 5,
};
enum etWeaponImpactClass
{
	WIC_Null = 0,
	WIC_Small = 1,
	WIC_Medium = 2,
	WIC_Heavy = 3,
	WIC_Explosive = 4,
	WIC_Melee = 5,
	WIC_Shotgun = 6,
	WIC_NonLethal = 7,
	WIC_MAX = 8,
};
enum etWeaponOverrideType
{
	WeaponOverrideUseDeployed = 0,
	WeaponOverrideUseFromInventoryOrDeployed = 1,
	WeaponOverrideUseFromInventoryOrEmpty = 2,
	WeaponOverrideUseFromInventoryOrCreate = 3,
	WeaponOverrideAlwaysCreate = 4,
	etWeaponOverrideType_MAX = 5,
};
enum etWeaponPickupAvailability
{
	WPA_OwnerOnly = 0,
	WPA_OwnerTeam = 1,
	WPA_OpposingTeam = 2,
	WPA_OwnerMission = 3,
	WPA_OwnerFaction = 4,
	WPA_NonOwnerFaction = 5,
	WPA_NonOwner = 6,
	WPA_Everyone = 7,
	WPA_MAX = 8,
};
enum etWitnessingFunctionality
{
	RulesetWitnessing_Off = 0,
	RulesetWitnessing_HeatGenerated = 1,
	RulesetWitnessing_HeatAndMissionsGenerated = 2,
	RulesetWitnessing_MAX = 3,
};
enum etWorldFaction
{
	kWorldFaction_Normal = 0,
	kWorldFaction_Recommended = 1,
	kWorldFaction_Full = 2,
	kWorldFaction_MAX = 3,
};
enum etYesNoEither
{
	kYNE_Either = 0,
	kYNE_Yes = 1,
	kYNE_No = 2,
	kYNE_MAX = 3,
};
enum ESimulationMethod
{
	ESM_SPH = 0,
	ESM_NO_PARTICLE_INTERACTION = 1,
	ESM_MIXED_MODE = 2,
	ESM_MAX = 3,
};
enum EPacketSizeMultiplier
{
	EPSM = 0,
	EPSM = 1,
	EPSM = 2,
	EPSM = 3,
	EPSM = 4,
	EPSM = 5,
	EPSM_MAX = 6,
};
enum etExtendedNodeTypeIndex
{
	eBDPNode = 0,
	eBJDPNode = 1,
	eSDDPNode = 2,
	eSDNode = 3,
	eVDPNode = 4,
	eVNode = 5,
	eNotExtended = 6,
	etExtendedNodeTypeIndex_MAX = 7,
};
enum etVehicleSpawnFreq
{
	kVSF_None = 0,
	kVSF_VeryLow = 1,
	kVSF_Low = 2,
	kVSF_Medium = 3,
	kVSF_High = 4,
	kVSF_VeryHigh = 5,
	kVSF_MAX = 6,
};
enum EBoneControlSpace
{
	BCS_WorldSpace = 0,
	BCS_ActorSpace = 1,
	BCS_ComponentSpace = 2,
	BCS_ParentBoneSpace = 3,
	BCS_BoneSpace = 4,
	BCS_OtherBoneSpace = 5,
	BCS_MAX = 6,
};
enum ESplineControlRotMode
{
	SCR_NoChange = 0,
	SCR_AlongSpline = 1,
	SCR_Interpolate = 2,
	SCR_MAX = 3,
};
enum ClothBoneType
{
	CLOTHBONE_Fixed = 0,
	CLOTHBONE_BreakableAttachment = 1,
	CLOTHBONE_MAX = 2,
};
enum SoftBodyBoneType
{
	SOFTBODYBONE_Fixed = 0,
	SOFTBODYBONE_BreakableAttachment = 1,
	SOFTBODYBONE_TwoWayAttachment = 2,
	SOFTBODYBONE_MAX = 3,
};
enum SoundDistanceModel
{
	ATTENUATION_Linear = 0,
	ATTENUATION_Logarithmic = 1,
	ATTENUATION_Inverse = 2,
	ATTENUATION_LogReverse = 3,
	ATTENUATION_NaturalSound = 4,
	ATTENUATION_MAX = 5,
};
enum EDecompressionType
{
	DTYPE_Setup = 0,
	DTYPE_Invalid = 1,
	DTYPE_Preview = 2,
	DTYPE_Native = 3,
	DTYPE_RealTime = 4,
	DTYPE_MAX = 5,
};
enum ETTSSpeaker
{
	TTSSPEAKER_Paul = 0,
	TTSSPEAKER_Harry = 1,
	TTSSPEAKER_Frank = 2,
	TTSSPEAKER_Dennis = 3,
	TTSSPEAKER_Kit = 4,
	TTSSPEAKER_Betty = 5,
	TTSSPEAKER_Ursula = 6,
	TTSSPEAKER_Rita = 7,
	TTSSPEAKER_Wendy = 8,
	TTSSPEAKER_MAX = 9,
};
enum EMaterialUsage
{
	MATUSAGE_SkeletalMesh = 0,
	MATUSAGE_ParticleSprites = 1,
	MATUSAGE_BeamTrails = 2,
	MATUSAGE_ParticleSubUV = 3,
	MATUSAGE_Foliage = 4,
	MATUSAGE_SpeedTree = 5,
	MATUSAGE_StaticLighting = 6,
	MATUSAGE_GammaCorrection = 7,
	MATUSAGE_LensFlare = 8,
	MATUSAGE_InstancedMeshParticles = 9,
	MATUSAGE_FluidSurface = 10,
	MATUSAGE_Decals = 11,
	MATUSAGE_SHLight = 12,
	MATUSAGE_MAX = 13,
};
enum EUVMappingType
{
	UVTYPE_Standard = 0,
	UVTYPE_BoundingBox = 1,
	UVTYPE_GlobalTerrainMap = 2,
	UVTYPE_MAX = 3,
};
enum EUVMappingSubtype
{
	UVSUBTYPE_Planar = 0,
	UVSUBTYPE_Railing = 1,
	UVSUBTYPE_EdgeMatch = 2,
	UVSUBTYPE_Grime = 3,
	UVSUBTYPE_MAX = 4,
};
enum EBlendMode
{
	BLEND_Opaque = 0,
	BLEND_Masked = 1,
	BLEND_Translucent = 2,
	BLEND_Additive = 3,
	BLEND_Modulate = 4,
	BLEND_OpaqueWriteAlpha = 5,
	BLEND_Translucent_PreMulAlpha = 6,
	BLEND_SoftMasked = 7,
	BLEND_AlphaComposite = 8,
	BLEND_DitheredTranslucent = 9,
	BLEND_MAX = 10,
};
enum EMaterialLightingModel
{
	MLM_Phong = 0,
	MLM_NonDirectional = 1,
	MLM_Unlit = 2,
	MLM_SHPRT = 3,
	MLM_Custom = 4,
	MLM_MAX = 5,
};
enum TextureCompressionSettings
{
	TC_Default = 0,
	TC_Normalmap = 1,
	TC_Displacementmap = 2,
	TC_NormalmapAlpha = 3,
	TC_Grayscale = 4,
	TC_HighDynamicRange = 5,
	TC_VehicleNormalmap = 6,
	TC_DistanceField = 7,
	TC_Normalmap_X_Y = 8,
	TC_MAX = 9,
};
enum EPixelFormat
{
	PF_Unknown = 0,
	PF_A32B32G32R32F = 1,
	PF_A8R8G8B8 = 2,
	PF_G8 = 3,
	PF_G16 = 4,
	PF_DXT1 = 5,
	PF_DXT3 = 6,
	PF_DXT5 = 7,
	PF_UYVY = 8,
	PF_FloatRGB = 9,
	PF_FloatRGBA = 10,
	PF_DepthStencil = 11,
	PF_ShadowDepth = 12,
	PF_FilteredShadowDepth = 13,
	PF_R32F = 14,
	PF_G16R16 = 15,
	PF_G16R16F = 16,
	PF_G16R16F_FILTER = 17,
	PF_G32R32F = 18,
	PF_A2B10G10R10 = 19,
	PF_A16B16G16R16 = 20,
	PF_D24 = 21,
	PF_R16F = 22,
	PF_R16F_FILTER = 23,
	PF_BC5 = 24,
	PF_V8U8 = 25,
	PF_A1 = 26,
	PF_FloatR11G11B10 = 27,
	PF_A4R4G4B4 = 28,
	PF_R5G6B5 = 29,
	PF_RGBA32_Unordered = 30,
	PF_MAX = 31,
};
enum TextureFilter
{
	TF_Nearest = 0,
	TF_Linear = 1,
	TF_MAX = 2,
};
enum TextureAddress
{
	TA_Wrap = 0,
	TA_Clamp = 1,
	TA_Mirror = 2,
	TA_Border = 3,
	TA_MAX = 4,
};
enum TextureGroup
{
	TEXTUREGROUP_World = 0,
	TEXTUREGROUP_WorldNormalMap = 1,
	TEXTUREGROUP_WorldSpecular = 2,
	TEXTUREGROUP_Character = 3,
	TEXTUREGROUP_CharacterNormalMap = 4,
	TEXTUREGROUP_CharacterSpecular = 5,
	TEXTUREGROUP_Weapon = 6,
	TEXTUREGROUP_WeaponNormalMap = 7,
	TEXTUREGROUP_WeaponSpecular = 8,
	TEXTUREGROUP_Vehicle = 9,
	TEXTUREGROUP_VehicleNormalMap = 10,
	TEXTUREGROUP_VehicleSpecular = 11,
	TEXTUREGROUP_Cinematic = 12,
	TEXTUREGROUP_Effects = 13,
	TEXTUREGROUP_Skybox = 14,
	TEXTUREGROUP_UI = 15,
	TEXTUREGROUP_LightAndShadowMap = 16,
	TEXTUREGROUP_RenderTarget = 17,
	TEXTUREGROUP_GolemCharacter = 18,
	TEXTUREGROUP_GolemVehicle = 19,
	TEXTUREGROUP_LCPedestrian = 20,
	TEXTUREGROUP_LCVehicle = 21,
	TEXTUREGROUP_MAX = 22,
};
enum ETextureMipCount
{
	TMC_ResidentMips = 0,
	TMC_AllMips = 1,
	TMC_MAX = 2,
};
enum etTextureCategory
{
	TEXCAT_Unknown = 0,
	TEXCAT_Environment = 1,
	TEXCAT_Prop = 2,
	TEXCAT_Signage = 3,
	TEXCAT_PlayerCharacter = 4,
	TEXCAT_PlayerVehicle = 5,
	TEXCAT_PlayerGraffiti = 6,
	TEXCAT_PlayerStatue = 7,
	TEXCAT_LCPedestrian = 8,
	TEXCAT_LCVehicle = 9,
	TEXCAT_CharacterShared = 10,
	TEXCAT_VehicleShared = 11,
	TEXCAT_Pickup = 12,
	TEXCAT_CharacterSource = 13,
	TEXCAT_VehicleSource = 14,
	TEXCAT_PrimitiveSource = 15,
	TEXCAT_UI = 16,
	TEXCAT_UI_StreamedIcon = 17,
	TEXCAT_VFX = 18,
	TEXCAT_LightAndShadowMap = 19,
	TEXCAT_RenderTarget = 20,
	TEXCAT_NonFinal = 21,
	TEXCAT_Contact = 22,
	TEXCAT_BuildingCollision = 23,
	TEXCAT_Engine = 24,
	TEXCAT_Volumes = 25,
	TEXCAT_ColourLookupTable = 26,
	TEXCAT_MAX = 27,
};
enum etTextureUsage
{
	TEXUSE_Diffuse = 0,
	TEXUSE_Normal = 1,
	TEXUSE_MAX = 2,
};
enum CropMode
{
	CROP_None = 0,
	CROP_Alpha = 1,
	CROP_RGB = 2,
	CROP_RGBA = 3,
	CROP_MAX = 4,
};
enum DistanceFieldResolutionMode
{
	DF_Visual = 0,
	DF_Auto = 1,
	DF = 2,
	DF = 3,
	DF = 4,
	DF_MAX = 5,
};
enum TextureFlipBookMethod
{
	TFBM_UL_ROW = 0,
	TFBM_UL_COL = 1,
	TFBM_UR_ROW = 2,
	TFBM_UR_COL = 3,
	TFBM_LL_ROW = 4,
	TFBM_LL_COL = 5,
	TFBM_LR_ROW = 6,
	TFBM_LR_COL = 7,
	TFBM_RANDOM = 8,
	TFBM_MAX = 9,
};
enum EMovieStreamSource
{
	MovieStream_File = 0,
	MovieStream_Memory = 1,
	MovieStream_MAX = 2,
};
enum EWheelSide
{
	SIDE_None = 0,
	SIDE_Left = 1,
	SIDE_Right = 2,
	SIDE_MAX = 3,
};
enum ETerrainMappingType
{
	TMT_Auto = 0,
	TMT_XY = 1,
	TMT_XZ = 2,
	TMT_YZ = 3,
	TMT_MAX = 4,
};
enum EFadeType
{
	EFT_None = 0,
	EFT_Fading = 1,
	EFT_Pulsing = 2,
	EFT_MAX = 3,
};

/*
-----------------------------------------------------------------
 - Structs
-----------------------------------------------------------------
*/
//0x000058
//AnimBlendChild[0x17C638E0]
struct FAnimBlendChild
{
	struct FName                                       Name;                                             		// 0x000000 (0x0008)              
	class UAnimNode*                                   Anim;                                             		// 0x000008 (0x0004)              
	float                                              Weight;                                           		// 0x00000C (0x0004)              
	float                                              TotalWeight;                                      		// 0x000010 (0x0004)              
	int                                                bHasRootMotion;                                   		// 0x000014 (0x0004)              
	unsigned char                                      _0x000018[0x8];                                   		// 0x000018 (0x0008) MISSED OFFSET
	struct FBoneAtom                                   RootMotion;                                       		// 0x000020 (0x0030)              
	unsigned long                                      bMirrorSkeleton : 1;                              		// 0x000050 (0x0004) [0x00000001] 
	int                                                DrawY;                                            		// 0x000054 (0x0004)              
};
//0x00001C
//AimTransform[0x17C63878]
struct FAimTransform
{
	struct FQuat                                       Quaternion;                                       		// 0x000000 (0x0010)              
	FVector3                                           Translation;                                      		// 0x000010 (0x000C)              
};
//0x000130
//AimComponent[0x17C63810]
struct FAimComponent
{
	struct FName                                       BoneName;                                         		// 0x000000 (0x0008)              
	unsigned char                                      _0x000008[0x8];                                   		// 0x000008 (0x0008) MISSED OFFSET
	struct FAimTransform                               LU;                                               		// 0x000010 (0x0020)              
	struct FAimTransform                               LC;                                               		// 0x000030 (0x0020)              
	struct FAimTransform                               LD;                                               		// 0x000050 (0x0020)              
	struct FAimTransform                               CU;                                               		// 0x000070 (0x0020)              
	struct FAimTransform                               CC;                                               		// 0x000090 (0x0020)              
	struct FAimTransform                               CD;                                               		// 0x0000B0 (0x0020)              
	struct FAimTransform                               RU;                                               		// 0x0000D0 (0x0020)              
	struct FAimTransform                               RC;                                               		// 0x0000F0 (0x0020)              
	struct FAimTransform                               RD;                                               		// 0x000110 (0x0020)              
};
//0x00006C
//AimOffsetProfile[0x17C637A8]
struct FAimOffsetProfile
{
	struct FName                                       ProfileName;                                      		// 0x000000 (0x0008)              
	FVector2                                           HorizontalRange;                                  		// 0x000008 (0x0008)              
	FVector2                                           VerticalRange;                                    		// 0x000010 (0x0008)              
	TArray<struct FAimComponent>                       AimComponents;                                    		// 0x000018 (0x000C)              
	struct FName                                       AnimName_LU;                                      		// 0x000024 (0x0008)              
	struct FName                                       AnimName_LC;                                      		// 0x00002C (0x0008)              
	struct FName                                       AnimName_LD;                                      		// 0x000034 (0x0008)              
	struct FName                                       AnimName_CU;                                      		// 0x00003C (0x0008)              
	struct FName                                       AnimName_CC;                                      		// 0x000044 (0x0008)              
	struct FName                                       AnimName_CD;                                      		// 0x00004C (0x0008)              
	struct FName                                       AnimName_RU;                                      		// 0x000054 (0x0008)              
	struct FName                                       AnimName_RC;                                      		// 0x00005C (0x0008)              
	struct FName                                       AnimName_RD;                                      		// 0x000064 (0x0008)              
};
//0x000010
//AnimInfo[0x17C63740]
struct FAnimInfo
{
	struct FName                                       AnimSeqName;                                      		// 0x000000 (0x0008)              
	class UAnimSequence*                               AnimSeq;                                          		// 0x000008 (0x0004)              
	int                                                AnimLinkupIndex;                                  		// 0x00000C (0x0004)              
};
//0x00001C
//AnimBlendInfo[0x17C636D8]
struct FAnimBlendInfo
{
	struct FName                                       AnimName;                                         		// 0x000000 (0x0008)              
	struct FAnimInfo                                   AnimInfo;                                         		// 0x000008 (0x0010)              
	float                                              Weight;                                           		// 0x000018 (0x0004)              
};
//0x000015
//RandomAnimInfo[0x17C63670]
struct FRandomAnimInfo
{
	float                                              Chance;                                           		// 0x000000 (0x0004)              
	unsigned char                                      LoopCountMin;                                     		// 0x000004 (0x0001)              PROPERTY: 
	unsigned char                                      LoopCountMax;                                     		// 0x000005 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000006[0x2];                                   		// 0x000006 (0x0002) MISSED OFFSET
	float                                              BlendInTime;                                      		// 0x000008 (0x0004)              
	FVector2                                           PlayRateRange;                                    		// 0x00000C (0x0008)              
	unsigned char                                      LoopCount;                                        		// 0x000014 (0x0001)              PROPERTY: 
};
//0x000030
//ChildBoneBlendInfo[0x17C63608]
struct FChildBoneBlendInfo
{
	TArray<float>                                      TargetPerBoneWeight;                              		// 0x000000 (0x000C)              
	struct FName                                       InitTargetStartBone;                              		// 0x00000C (0x0008)              
	float                                              InitPerBoneIncrease;                              		// 0x000014 (0x0004)              
	struct FName                                       OldStartBone;                                     		// 0x000018 (0x0008)              
	float                                              OldBoneIncrease;                                  		// 0x000020 (0x0004)              
	TArray<unsigned char>                              TargetRequiredBones;                              		// 0x000024 (0x000C)              
};
//0x000020
//SynchGroup[0x17C635A0]
struct FSynchGroup
{
	TArray<class UAnimNodeSequence*>                   SeqNodes;                                         		// 0x000000 (0x000C)              
	class UAnimNodeSequence*                           MasterNode;                                       		// 0x00000C (0x0004)              
	struct FName                                       GroupName;                                        		// 0x000010 (0x0008)              
	unsigned long                                      bFireSlaveNotifies : 1;                           		// 0x000018 (0x0004) [0x00000001] 
	float                                              RateScale;                                        		// 0x00001C (0x0004)              
};
//0x000020
//AnimGroup[0x17C63538]
struct FAnimGroup
{
	TArray<class UAnimNodeSequence*>                   SeqNodes;                                         		// 0x000000 (0x000C)              
	class UAnimNodeSequence*                           SynchMaster;                                      		// 0x00000C (0x0004)              
	class UAnimNodeSequence*                           NotifyMaster;                                     		// 0x000010 (0x0004)              
	struct FName                                       GroupName;                                        		// 0x000014 (0x0008)              
	float                                              RateScale;                                        		// 0x00001C (0x0004)              
};
//0x000010
//SkelControlListHead[0x17C634D0]
struct FSkelControlListHead
{
	struct FName                                       BoneName;                                         		// 0x000000 (0x0008)              
	class USkelControlBase*                            ControlHead;                                      		// 0x000008 (0x0004)              
	int                                                DrawY;                                            		// 0x00000C (0x0004)              
};
//0x00001C
//TimerData[0x17C63468]
struct FTimerData
{
	unsigned long                                      bLoop : 1;                                        		// 0x000000 (0x0004) [0x00000001] 
	struct FScriptDelegate                             Function;                                         		// 0x000004 (0x000C)              
	float                                              Rate;                                             		// 0x000010 (0x0004)              
	float                                              Count;                                            		// 0x000014 (0x0004)              
	unsigned long                                      bPaused : 1;                                      		// 0x000018 (0x0004) [0x00000001] 
};
//0x00001C
//TraceHitInfo[0x17C63400]
struct FTraceHitInfo
{
	class UMaterial*                                   Material;                                         		// 0x000000 (0x0004)              
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x000004 (0x0004)              
	int                                                Item;                                             		// 0x000008 (0x0004)              
	int                                                LevelIndex;                                       		// 0x00000C (0x0004)              
	struct FName                                       BoneName;                                         		// 0x000010 (0x0008)              
	class UPrimitiveComponent*                         HitComponent;                                     		// 0x000018 (0x0004)              
};
//0x000030
//DamageInfo[0x17C63398]
struct FDamageInfo
{
	unsigned char                                      m_eDamageInfoType;                                		// 0x000000 (0x0001)              PROPERTY: etDamageInfoType
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	int                                                m_DamageAmount;                                   		// 0x000004 (0x0004)              
	float                                              m_Radius;                                         		// 0x000008 (0x0004)              
	FVector3                                           m_HitLocation;                                    		// 0x00000C (0x000C)              
	FVector3                                           m_HitDir;                                         		// 0x000018 (0x000C)              
	struct FName                                       m_BoneName;                                       		// 0x000024 (0x0008)              
	int                                                m_RefCount;                                       		// 0x00002C (0x0004)              
};
//0x000044
//ImpactInfo[0x17C63330]
struct FImpactInfo
{
	class AActor*                                      HitActor;                                         		// 0x000000 (0x0004)              
	FVector3                                           HitLocation;                                      		// 0x000004 (0x000C)              
	FVector3                                           HitNormal;                                        		// 0x000010 (0x000C)              
	FVector3                                           RayDir;                                           		// 0x00001C (0x000C)              
	struct FTraceHitInfo                               HitInfo;                                          		// 0x000028 (0x001C)              
};
//0x000028
//tLocationInfo[0x17C632C8]
struct FtLocationInfo
{
	FVector3                                           Position;                                         		// 0x000000 (0x000C)              
	unsigned char                                      _0x00000C[0x4];                                   		// 0x00000C (0x0004) MISSED OFFSET
	struct FQuat                                       Orientation;                                      		// 0x000010 (0x0010)              
	double                                             LastUpdateTime;                                   		// 0x000020 (0x0008)              
};
//0x000014
//AnimSlotInfo[0x17C63260]
struct FAnimSlotInfo
{
	struct FName                                       SlotName;                                         		// 0x000000 (0x0008)              
	TArray<float>                                      ChannelWeights;                                   		// 0x000008 (0x000C)              
};
//0x00000C
//AnimSlotDesc[0x17C631F8]
struct FAnimSlotDesc
{
	struct FName                                       SlotName;                                         		// 0x000000 (0x0008)              
	int                                                NumChannels;                                      		// 0x000008 (0x0004)              
};
//0x000040
//RigidBodyState[0x17C63190]
struct FRigidBodyState
{
	FVector3                                           Position;                                         		// 0x000000 (0x000C)              
	unsigned char                                      _0x00000C[0x4];                                   		// 0x00000C (0x0004) MISSED OFFSET
	struct FQuat                                       Quaternion;                                       		// 0x000010 (0x0010)              
	FVector3                                           LinVel;                                           		// 0x000020 (0x000C)              
	FVector3                                           AngVel;                                           		// 0x00002C (0x000C)              
	unsigned char                                      bNewData;                                         		// 0x000038 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000039[0x3];                                   		// 0x000039 (0x0003) MISSED OFFSET
	unsigned long                                      bSleeping : 1;                                    		// 0x00003C (0x0004) [0x00000001] 
	unsigned long                                      bForceState : 1;                                  		// 0x00003C (0x0004) [0x00000002] 
};
//0x000014
//RigidBodyUnpackParams[0x17C63128]
struct FRigidBodyUnpackParams
{
	float                                              fDT;                                              		// 0x000000 (0x0004)              
	float                                              fAbsorbDelay;                                     		// 0x000004 (0x0004)              
	float                                              fMaxAbsorbRate_Position;                          		// 0x000008 (0x0004)              
	float                                              fMaxAbsorbRate_Angle;                             		// 0x00000C (0x0004)              
	unsigned long                                      bIsOverLimit : 1;                                 		// 0x000010 (0x0004) [0x00000001] 
	unsigned long                                      bAllowLimitSnap : 1;                              		// 0x000010 (0x0004) [0x00000002] 
};
//0x00003C
//RigidBodyContactInfo[0x17C630C0]
struct FRigidBodyContactInfo
{
	FVector3                                           ContactPosition;                                  		// 0x000000 (0x000C)              
	FVector3                                           ContactNormal;                                    		// 0x00000C (0x000C)              
	float                                              ContactPenetration;                               		// 0x000018 (0x0004)              
	FVector3                                           ContactVelocity[0x2];                             		// 0x00001C (0x0018)              
	class UPhysicalMaterial*                           PhysMaterial[0x2];                                		// 0x000034 (0x0008)              
};
//0x000024
//CollisionImpactData[0x17C63058]
struct FCollisionImpactData
{
	TArray<struct FRigidBodyContactInfo>               ContactInfos;                                     		// 0x000000 (0x000C)              
	FVector3                                           TotalNormalForceVector;                           		// 0x00000C (0x000C)              
	FVector3                                           TotalFrictionForceVector;                         		// 0x000018 (0x000C)              
};
//0x00000C
//AsyncLineCheckResult[0x17C62FF0]
struct FAsyncLineCheckResult
{
	int                                                bCheckStarted;                                    		// 0x000000 (0x0004)              
	int                                                bCheckCompleted;                                  		// 0x000004 (0x0004)              
	int                                                bHit;                                             		// 0x000008 (0x0004)              
};
//0x000028
//ReplicatedHitImpulse[0x17C62F88]
struct FReplicatedHitImpulse
{
	FVector3                                           AppliedImpulse;                                   		// 0x000000 (0x000C)              
	FVector3                                           HitLocation;                                      		// 0x00000C (0x000C)              
	struct FName                                       BoneName;                                         		// 0x000018 (0x0008)              
	unsigned char                                      ImpulseCount;                                     		// 0x000020 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000021[0x3];                                   		// 0x000021 (0x0003) MISSED OFFSET
	unsigned long                                      bRadialImpulse : 1;                               		// 0x000024 (0x0004) [0x00000001] 
};
//0x000014
//NavReference[0x17C62F20]
struct FNavReference
{
	class ANavigationPoint*                            Nav;                                              		// 0x000000 (0x0004)              
	struct FGuid                                       Guid;                                             		// 0x000004 (0x0010)              
};
//0x000010
//GeomSelection[0x17C62EB8]
struct FGeomSelection
{
	int                                                Type;                                             		// 0x000000 (0x0004)              
	int                                                Index;                                            		// 0x000004 (0x0004)              
	int                                                SelectionIndex;                                   		// 0x000008 (0x0004)              
	float                                              SelStrength;                                      		// 0x00000C (0x0004)              
};
//0x000008
//CullDistanceSizePair[0x17C62E50]
struct FCullDistanceSizePair
{
	float                                              Size;                                             		// 0x000000 (0x0004)              
	float                                              CullDistance;                                     		// 0x000004 (0x0004)              
};
//0x000048
//FoliageMesh[0x17C62DE8]
struct FFoliageMesh
{
	class UStaticMesh*                                 InstanceStaticMesh;                               		// 0x000000 (0x0004)              
	class UMaterialInterface*                          Material;                                         		// 0x000004 (0x0004)              
	float                                              MaxDrawRadius;                                    		// 0x000008 (0x0004)              
	float                                              MinTransitionRadius;                              		// 0x00000C (0x0004)              
	float                                              MinThinningRadius;                                		// 0x000010 (0x0004)              
	FVector3                                           MinScale;                                         		// 0x000014 (0x000C)              
	FVector3                                           MaxScale;                                         		// 0x000020 (0x000C)              
	float                                              MinUniformScale;                                  		// 0x00002C (0x0004)              
	float                                              MaxUniformScale;                                  		// 0x000030 (0x0004)              
	float                                              SwayScale;                                        		// 0x000034 (0x0004)              
	int                                                Seed;                                             		// 0x000038 (0x0004)              
	float                                              SurfaceAreaPerInstance;                           		// 0x00003C (0x0004)              
	unsigned long                                      bCreateInstancesOnBSP : 1;                        		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      bCreateInstancesOnStaticMeshes : 1;               		// 0x000040 (0x0004) [0x00000002] 
	unsigned long                                      bCreateInstancesOnTerrain : 1;                    		// 0x000040 (0x0004) [0x00000004] 
	class UFoliageComponent*                           Component;                                        		// 0x000044 (0x0004)              
};
//0x000010
//AudioComponentParam[0x17C62D80]
struct FAudioComponentParam
{
	struct FName                                       ParamName;                                        		// 0x000000 (0x0008)              
	float                                              FloatParam;                                       		// 0x000008 (0x0004)              
	class USoundNodeWave*                              WaveParam;                                        		// 0x00000C (0x0004)              
};
//0x000004
//LightingChannelContainer[0x17C62D18]
struct FLightingChannelContainer
{
	unsigned long                                      bInitialized : 1;                                 		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      BSP : 1;                                          		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      Static : 1;                                       		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      Dynamic : 1;                                      		// 0x000000 (0x0004) [0x00000008] 
	unsigned long                                      CompositeDynamic : 1;                             		// 0x000000 (0x0004) [0x00000010] 
	unsigned long                                      Skybox : 1;                                       		// 0x000000 (0x0004) [0x00000020] 
	unsigned long                                      Unnamed : 1;                                      		// 0x000000 (0x0004) [0x00000040] 
	unsigned long                                      Unnamed : 1;                                      		// 0x000000 (0x0004) [0x00000080] 
	unsigned long                                      Unnamed : 1;                                      		// 0x000000 (0x0004) [0x00000100] 
	unsigned long                                      Unnamed : 1;                                      		// 0x000000 (0x0004) [0x00000200] 
	unsigned long                                      Unnamed : 1;                                      		// 0x000000 (0x0004) [0x00000400] 
	unsigned long                                      Unnamed : 1;                                      		// 0x000000 (0x0004) [0x00000800] 
	unsigned long                                      Cinematic : 1;                                    		// 0x000000 (0x0004) [0x00001000] 
	unsigned long                                      Cinematic : 1;                                    		// 0x000000 (0x0004) [0x00002000] 
	unsigned long                                      Cinematic : 1;                                    		// 0x000000 (0x0004) [0x00004000] 
	unsigned long                                      Cinematic : 1;                                    		// 0x000000 (0x0004) [0x00008000] 
	unsigned long                                      Cinematic : 1;                                    		// 0x000000 (0x0004) [0x00010000] 
	unsigned long                                      Cinematic : 1;                                    		// 0x000000 (0x0004) [0x00020000] 
	unsigned long                                      Gameplay : 1;                                     		// 0x000000 (0x0004) [0x00040000] 
	unsigned long                                      Gameplay : 1;                                     		// 0x000000 (0x0004) [0x00080000] 
	unsigned long                                      Gameplay : 1;                                     		// 0x000000 (0x0004) [0x00100000] 
	unsigned long                                      Gameplay : 1;                                     		// 0x000000 (0x0004) [0x00200000] 
};
//0x000004
//MaterialViewRelevance[0x17C62CB0]
struct FMaterialViewRelevance
{
	unsigned long                                      bOpaque : 1;                                      		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bTranslucent : 1;                                 		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      bDistortion : 1;                                  		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      bLit : 1;                                         		// 0x000000 (0x0004) [0x00000008] 
	unsigned long                                      bUsesSceneColor : 1;                              		// 0x000000 (0x0004) [0x00000010] 
};
//0x000004
//RBCollisionChannelContainer[0x17C62C48]
struct FRBCollisionChannelContainer
{
	unsigned long                                      Default : 1;                                      		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      Nothing : 1;                                      		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      Pawn : 1;                                         		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      Vehicle : 1;                                      		// 0x000000 (0x0004) [0x00000008] 
	unsigned long                                      Water : 1;                                        		// 0x000000 (0x0004) [0x00000010] 
	unsigned long                                      GameplayPhysics : 1;                              		// 0x000000 (0x0004) [0x00000020] 
	unsigned long                                      EffectPhysics : 1;                                		// 0x000000 (0x0004) [0x00000040] 
	unsigned long                                      Untitled1 : 1;                                    		// 0x000000 (0x0004) [0x00000080] 
	unsigned long                                      Untitled2 : 1;                                    		// 0x000000 (0x0004) [0x00000100] 
	unsigned long                                      Untitled3 : 1;                                    		// 0x000000 (0x0004) [0x00000200] 
	unsigned long                                      Untitled4 : 1;                                    		// 0x000000 (0x0004) [0x00000400] 
	unsigned long                                      Cloth : 1;                                        		// 0x000000 (0x0004) [0x00000800] 
	unsigned long                                      FluidDrain : 1;                                   		// 0x000000 (0x0004) [0x00001000] 
	unsigned long                                      SoftBody : 1;                                     		// 0x000000 (0x0004) [0x00002000] 
};
//0x000048
//KSphereElem[0x17C62BE0]
struct FKSphereElem
{
	FMatrix                                            TM;                                               		// 0x000000 (0x0040)              
	float                                              Radius;                                           		// 0x000040 (0x0004)              
	unsigned long                                      bNoRBCollision : 1;                               		// 0x000044 (0x0004) [0x00000001] 
	unsigned long                                      bPerPolyShape : 1;                                		// 0x000044 (0x0004) [0x00000002] 
};
//0x000050
//KBoxElem[0x17C62B78]
struct FKBoxElem
{
	FMatrix                                            TM;                                               		// 0x000000 (0x0040)              
	float                                              X;                                                		// 0x000040 (0x0004)              
	float                                              Y;                                                		// 0x000044 (0x0004)              
	float                                              Z;                                                		// 0x000048 (0x0004)              
	unsigned long                                      bNoRBCollision : 1;                               		// 0x00004C (0x0004) [0x00000001] 
	unsigned long                                      bPerPolyShape : 1;                                		// 0x00004C (0x0004) [0x00000002] 
};
//0x00004C
//KSphylElem[0x17C62B10]
struct FKSphylElem
{
	FMatrix                                            TM;                                               		// 0x000000 (0x0040)              
	float                                              Radius;                                           		// 0x000040 (0x0004)              
	float                                              Length;                                           		// 0x000044 (0x0004)              
	unsigned long                                      bNoRBCollision : 1;                               		// 0x000048 (0x0004) [0x00000001] 
	unsigned long                                      bPerPolyShape : 1;                                		// 0x000048 (0x0004) [0x00000002] 
};
//0x000064
//KConvexElem[0x17C62AA8]
struct FKConvexElem
{
	TArray<FVector3>                                   VertexData;                                       		// 0x000000 (0x000C)              
	TArray<struct FPlane>                              PermutedVertexData;                               		// 0x00000C (0x000C)              
	TArray<int>                                        FaceTriData;                                      		// 0x000018 (0x000C)              
	TArray<FVector3>                                   EdgeDirections;                                   		// 0x000024 (0x000C)              
	TArray<FVector3>                                   FaceNormalDirections;                             		// 0x000030 (0x000C)              
	TArray<struct FPlane>                              FacePlaneData;                                    		// 0x00003C (0x000C)              
	struct FBox                                        ElemBox;                                          		// 0x000048 (0x001C)              
};
//0x000034
//KAggregateGeom[0x17C62A40]
struct FKAggregateGeom
{
	TArray<struct FKSphereElem>                        SphereElems;                                      		// 0x000000 (0x000C)              
	TArray<struct FKBoxElem>                           BoxElems;                                         		// 0x00000C (0x000C)              
	TArray<struct FKSphylElem>                         SphylElems;                                       		// 0x000018 (0x000C)              
	TArray<struct FKConvexElem>                        ConvexElems;                                      		// 0x000024 (0x000C)              
	DWORD                                              RenderInfo;                                       		// 0x000030 (0x0004)              
};
//0x00000C
//KCachedConvexDataElement[0x17C629D8]
struct FKCachedConvexDataElement
{
	TArray<unsigned char>                              ConvexElementData;                                		// 0x000000 (0x000C)              
};
//0x00000C
//KCachedConvexData[0x17C62970]
struct FKCachedConvexData
{
	TArray<struct FKCachedConvexDataElement>           CachedConvexElements;                             		// 0x000000 (0x000C)              
};
//0x00000C
//KCachedConvexData_Mirror[0x17C62908]
struct FKCachedConvexData_Mirror
{
	TArray<int>                                        CachedConvexElements;                             		// 0x000000 (0x000C)              
};
//0x000014
//DecalReceiver[0x17C628A0]
struct FDecalReceiver
{
	DWORD                                              RenderData;                                       		// 0x000000 (0x0004)              
	struct FString                                     m_sComponentName;                                 		// 0x000004 (0x000C)              
	int                                                m_ComponentNameCRC;                               		// 0x000010 (0x0004)              
};
//0x000004
//LightMapRef[0x17C62838]
struct FLightMapRef
{
	DWORD                                              Reference;                                        		// 0x000000 (0x0004)              
};
//0x000020
//FoliageInstanceBase[0x17C627D0]
struct FFoliageInstanceBase
{
	FVector3                                           Location;                                         		// 0x000000 (0x000C)              
	float                                              DistanceFactorSquared;                            		// 0x00000C (0x0004)              
	int                                                AOAndShadowMap;                                   		// 0x000010 (0x0004)              
	int                                                XAxis;                                            		// 0x000014 (0x0004)              
	int                                                YAxis;                                            		// 0x000018 (0x0004)              
	int                                                ZAxis;                                            		// 0x00001C (0x0004)              
};
//0x000010 (0x000030 - 0x000020)
//GatheredFoliageInstance[0x17C62768]
struct FGatheredFoliageInstance : FFoliageInstanceBase
{
	DWORD                                              StaticLighting[0x4];                              		// 0x000020 (0x0010)              
};
//0x000010
//LensFlareElementCurvePair[0x17C62700]
struct FLensFlareElementCurvePair
{
	struct FString                                     CurveName;                                        		// 0x000000 (0x000C)              
	class UObject*                                     CurveObject;                                      		// 0x00000C (0x0004)              
};
//0x000140
//LensFlareElement[0x17C62698]
struct FLensFlareElement
{
	struct FName                                       ElementName;                                      		// 0x000000 (0x0008)              
	float                                              RayDistance;                                      		// 0x000008 (0x0004)              
	unsigned long                                      bIsEnabled : 1;                                   		// 0x00000C (0x0004) [0x00000001] 
	unsigned long                                      bUseSourceDistance : 1;                           		// 0x00000C (0x0004) [0x00000002] 
	unsigned long                                      bNormalizeRadialDistance : 1;                     		// 0x00000C (0x0004) [0x00000004] 
	unsigned long                                      bModulateColorBySource : 1;                       		// 0x00000C (0x0004) [0x00000008] 
	FVector3                                           Size;                                             		// 0x000010 (0x000C)              
	TArray<class UMaterialInterface*>                  LFMaterials;                                      		// 0x00001C (0x000C)              
	struct FRawDistributionFloat                       LFMaterialIndex;                                  		// 0x000028 (0x001C)              
	struct FRawDistributionFloat                       Scaling;                                          		// 0x000044 (0x001C)              
	struct FRawDistributionVector                      AxisScaling;                                      		// 0x000060 (0x001C)              
	struct FRawDistributionFloat                       Rotation;                                         		// 0x00007C (0x001C)              
	struct FRawDistributionVector                      Color;                                            		// 0x000098 (0x001C)              
	struct FRawDistributionFloat                       Alpha;                                            		// 0x0000B4 (0x001C)              
	struct FRawDistributionVector                      Offset;                                           		// 0x0000D0 (0x001C)              
	struct FRawDistributionVector                      DistMap_Scale;                                    		// 0x0000EC (0x001C)              
	struct FRawDistributionVector                      DistMap_Color;                                    		// 0x000108 (0x001C)              
	struct FRawDistributionFloat                       DistMap_Alpha;                                    		// 0x000124 (0x001C)              
};
//0x000000
//LensFlareElementInstance[0x17C62630]
struct FLensFlareElementInstance
{
};
//0x000008
//ActiveMorph[0x17C625C8]
struct FActiveMorph
{
	class UMorphTarget*                                Target;                                           		// 0x000000 (0x0004)              
	float                                              Weight;                                           		// 0x000004 (0x0004)              
};
//0x000030
//Attachment[0x17C62560]
struct FAttachment
{
	class UActorComponent*                             Component;                                        		// 0x000000 (0x0004)              
	struct FName                                       BoneName;                                         		// 0x000004 (0x0008)              
	FVector3                                           RelativeLocation;                                 		// 0x00000C (0x000C)              
	FRotator                                           RelativeRotation;                                 		// 0x000018 (0x000C)              
	FVector3                                           RelativeScale;                                    		// 0x000024 (0x000C)              
};
//0x000010
//BonePair[0x17C624F8]
struct FBonePair
{
	struct FName                                       Bones[0x2];                                       		// 0x000000 (0x0010)              
};
//0x000024
//StaticMeshComponentLODInfo[0x17C62490]
struct FStaticMeshComponentLODInfo
{
	TArray<class UShadowMap2D*>                        ShadowMaps;                                       		// 0x000000 (0x000C)              
	TArray<class UObject*>                             ShadowVertexBuffers;                              		// 0x00000C (0x000C)              
	DWORD                                              LightMap;                                         		// 0x000018 (0x0004)              
	class UShadowMap2D*                                m_AOMap2D;                                        		// 0x00001C (0x0004)              
	class UObject*                                     m_AOMap1D;                                        		// 0x000020 (0x0004)              
};
//0x00000C
//MaterialArray[0x17C62428]
struct FMaterialArray
{
	TArray<class UMaterialInterface*>                  A;                                                		// 0x000000 (0x000C)              
};
//0x000028
//CoverMeshes[0x17C623C0]
struct FCoverMeshes
{
	class UStaticMesh*                                 Base;                                             		// 0x000000 (0x0004)              
	class UStaticMesh*                                 LeanLeft;                                         		// 0x000004 (0x0004)              
	class UStaticMesh*                                 LeanRight;                                        		// 0x000008 (0x0004)              
	class UStaticMesh*                                 Climb;                                            		// 0x00000C (0x0004)              
	class UStaticMesh*                                 Mantle;                                           		// 0x000010 (0x0004)              
	class UStaticMesh*                                 SlipLeft;                                         		// 0x000014 (0x0004)              
	class UStaticMesh*                                 SlipRight;                                        		// 0x000018 (0x0004)              
	class UStaticMesh*                                 SwatLeft;                                         		// 0x00001C (0x0004)              
	class UStaticMesh*                                 SwatRight;                                        		// 0x000020 (0x0004)              
	class UStaticMesh*                                 PopUp;                                            		// 0x000024 (0x0004)              
};
//0x000000
//ParticleEmitterInstance[0x17C62358]
struct FParticleEmitterInstance
{
};
//0x000028
//ParticleSysParam[0x17C622F0]
struct FParticleSysParam
{
	struct FName                                       Name;                                             		// 0x000000 (0x0008)              
	unsigned char                                      ParamType;                                        		// 0x000008 (0x0001)              PROPERTY: EParticleSysParamType
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	float                                              Scalar;                                           		// 0x00000C (0x0004)              
	FVector3                                           Vector;                                           		// 0x000010 (0x000C)              
	DWORD                                              Color;                                            		// 0x00001C (0x0004)              
	class AActor*                                      Actor;                                            		// 0x000020 (0x0004)              
	class UMaterialInterface*                          Material;                                         		// 0x000024 (0x0004)              
};
//0x000034
//ParticleEventData[0x17C62288]
struct FParticleEventData
{
	int                                                Type;                                             		// 0x000000 (0x0004)              
	struct FName                                       EventName;                                        		// 0x000004 (0x0008)              
	float                                              EmitterTime;                                      		// 0x00000C (0x0004)              
	FVector3                                           Location;                                         		// 0x000010 (0x000C)              
	FVector3                                           Direction;                                        		// 0x00001C (0x000C)              
	FVector3                                           Velocity;                                         		// 0x000028 (0x000C)              
};
//0x000000 (0x000034 - 0x000034)
//ParticleEventSpawnData[0x17C62220]
struct FParticleEventSpawnData : FParticleEventData
{
};
//0x000004 (0x000038 - 0x000034)
//ParticleEventDeathData[0x17C621B8]
struct FParticleEventDeathData : FParticleEventData
{
	float                                              ParticleTime;                                     		// 0x000034 (0x0004)              
};
//0x000020 (0x000054 - 0x000034)
//ParticleEventCollideData[0x17C62150]
struct FParticleEventCollideData : FParticleEventData
{
	float                                              ParticleTime;                                     		// 0x000034 (0x0004)              
	FVector3                                           Normal;                                           		// 0x000038 (0x000C)              
	float                                              Time;                                             		// 0x000044 (0x0004)              
	int                                                Item;                                             		// 0x000048 (0x0004)              
	struct FName                                       BoneName;                                         		// 0x00004C (0x0008)              
};
//0x000010 (0x000044 - 0x000034)
//ParticleEventKismetData[0x17C620E8]
struct FParticleEventKismetData : FParticleEventData
{
	unsigned long                                      UsePSysCompLocation : 1;                          		// 0x000034 (0x0004) [0x00000001] 
	FVector3                                           Normal;                                           		// 0x000038 (0x000C)              
};
//0x000020
//SpeedTreeStaticLight[0x17C62080]
struct FSpeedTreeStaticLight
{
	struct FGuid                                       Guid;                                             		// 0x000000 (0x0010)              
	class UShadowMap1D*                                BranchAndFrondShadowMap;                          		// 0x000010 (0x0004)              
	class UShadowMap1D*                                LeafMeshShadowMap;                                		// 0x000014 (0x0004)              
	class UShadowMap1D*                                LeafCardShadowMap;                                		// 0x000018 (0x0004)              
	class UShadowMap1D*                                BillboardShadowMap;                               		// 0x00001C (0x0004)              
};
//0x000004
//LightMapRef[0x17C62018]
struct FLightMapRef
{
	DWORD                                              Reference;                                        		// 0x000000 (0x0004)              
};
//0x000018
//TerrainkDOPTree[0x17C61FB0]
struct FTerrainkDOPTree
{
	TArray<int>                                        Nodes;                                            		// 0x000000 (0x000C)              
	TArray<int>                                        Triangles;                                        		// 0x00000C (0x000C)              
};
//0x00000C
//TerrainBVTree[0x17C61F48]
struct FTerrainBVTree
{
	TArray<int>                                        Nodes;                                            		// 0x000000 (0x000C)              
};
//0x000004
//RBCollisionChannelContainer[0x17C61EE0]
struct FRBCollisionChannelContainer
{
	unsigned long                                      Default : 1;                                      		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      Nothing : 1;                                      		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      Pawn : 1;                                         		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      Vehicle : 1;                                      		// 0x000000 (0x0004) [0x00000008] 
	unsigned long                                      Water : 1;                                        		// 0x000000 (0x0004) [0x00000010] 
	unsigned long                                      GameplayPhysics : 1;                              		// 0x000000 (0x0004) [0x00000020] 
	unsigned long                                      EffectPhysics : 1;                                		// 0x000000 (0x0004) [0x00000040] 
	unsigned long                                      Untitled1 : 1;                                    		// 0x000000 (0x0004) [0x00000080] 
	unsigned long                                      Untitled2 : 1;                                    		// 0x000000 (0x0004) [0x00000100] 
	unsigned long                                      Untitled3 : 1;                                    		// 0x000000 (0x0004) [0x00000200] 
	unsigned long                                      Untitled4 : 1;                                    		// 0x000000 (0x0004) [0x00000400] 
	unsigned long                                      FluidDrain : 1;                                   		// 0x000000 (0x0004) [0x00000800] 
	unsigned long                                      Cloth : 1;                                        		// 0x000000 (0x0004) [0x00001000] 
	unsigned long                                      SoftBody : 1;                                     		// 0x000000 (0x0004) [0x00002000] 
};
//0x00000C
//BloomParameters[0x17C61E78]
struct FBloomParameters
{
	float                                              BloomScale;                                       		// 0x000000 (0x0004)              
	float                                              BloomThreshold;                                   		// 0x000004 (0x0004)              
	float                                              BloomBlurKernelSize;                              		// 0x000008 (0x0004)              
};
//0x000020
//DOFParameters[0x17C61E10]
struct FDOFParameters
{
	float                                              ForegroundStartDistance;                          		// 0x000000 (0x0004)              
	float                                              ForegroundEndDistance;                            		// 0x000004 (0x0004)              
	float                                              BackgroundStartDistance;                          		// 0x000008 (0x0004)              
	float                                              BackgroundEndDistance;                            		// 0x00000C (0x0004)              
	float                                              MaxBlurForeground;                                		// 0x000010 (0x0004)              
	float                                              MaxBlurBackground;                                		// 0x000014 (0x0004)              
	float                                              BlurKernelSize;                                   		// 0x000018 (0x0004)              
	int                                                CircleOfConfusionDilation;                        		// 0x00001C (0x0004)              
};
//0x000014
//MotionBlurParameters[0x17C61DA8]
struct FMotionBlurParameters
{
	float                                              MaxVelocity;                                      		// 0x000000 (0x0004)              
	float                                              Amount;                                           		// 0x000004 (0x0004)              
	unsigned long                                      FullMotionBlur : 1;                               		// 0x000008 (0x0004) [0x00000001] 
	float                                              CameraRotationThreshold;                          		// 0x00000C (0x0004)              
	float                                              CameraTranslationThreshold;                       		// 0x000010 (0x0004)              
};
//0x00001C
//ToneMappingParameters[0x17C61D40]
struct FToneMappingParameters
{
	unsigned long                                      bIrisResponse : 1;                                		// 0x000000 (0x0004) [0x00000001] 
	float                                              MiddleGrey;                                       		// 0x000004 (0x0004)              
	float                                              Lwhite;                                           		// 0x000008 (0x0004)              
	float                                              AdaptionRate;                                     		// 0x00000C (0x0004)              
	float                                              AdaptionSlope;                                    		// 0x000010 (0x0004)              
	float                                              MinAdaptationIn;                                  		// 0x000014 (0x0004)              
	float                                              MaxAdaptationIn;                                  		// 0x000018 (0x0004)              
};
//0x00002C
//ColourAdjustParameters[0x17C61CD8]
struct FColourAdjustParameters
{
	float                                              Brightness;                                       		// 0x000000 (0x0004)              
	float                                              Contrast;                                         		// 0x000004 (0x0004)              
	float                                              Gamma;                                            		// 0x000008 (0x0004)              
	float                                              Saturation;                                       		// 0x00000C (0x0004)              
	FVector3                                           PerChannelPower;                                  		// 0x000010 (0x000C)              
	struct FLinearColor                                DesaturatedColour;                                		// 0x00001C (0x0010)              
};
//0x000018
//LUTBlender[0x17C61C70]
struct FLUTBlender
{
	TArray<class UTexture*>                            LUTTextures;                                      		// 0x000000 (0x000C)              
	TArray<float>                                      LUTWeights;                                       		// 0x00000C (0x000C)              
};
//0x0000CC
//PostProcessSettings[0x17C61C08]
struct FPostProcessSettings
{
	unsigned long                                      bEnableBloom : 1;                                 		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bEnableDOF : 1;                                   		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      bEnableMotionBlur : 1;                            		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      bEnableSceneEffect : 1;                           		// 0x000000 (0x0004) [0x00000008] 
	unsigned long                                      bEnableAO : 1;                                    		// 0x000000 (0x0004) [0x00000010] 
	unsigned long                                      Bloom_Override : 1;                               		// 0x000000 (0x0004) [0x00000020] 
	struct FBloomParameters                            BloomParameters;                                  		// 0x000004 (0x000C)              
	float                                              Bloom_InterpolationDuration;                      		// 0x000010 (0x0004)              
	unsigned long                                      DOF_Override : 1;                                 		// 0x000014 (0x0004) [0x00000001] 
	struct FDOFParameters                              DOFParameters;                                    		// 0x000018 (0x0020)              
	float                                              DOF_InterpolationDuration;                        		// 0x000038 (0x0004)              
	unsigned long                                      MotionBlur_Override : 1;                          		// 0x00003C (0x0004) [0x00000001] 
	struct FMotionBlurParameters                       MotionBlurParameters;                             		// 0x000040 (0x0014)              
	float                                              MotionBlur_InterpolationDuration;                 		// 0x000054 (0x0004)              
	unsigned long                                      ToneMapping_Override : 1;                         		// 0x000058 (0x0004) [0x00000001] 
	struct FToneMappingParameters                      ToneMappingParameters;                            		// 0x00005C (0x001C)              
	float                                              ToneMapping_InterpolationDuration;                		// 0x000078 (0x0004)              
	unsigned long                                      ColourAdjust_Override : 1;                        		// 0x00007C (0x0004) [0x00000001] 
	struct FColourAdjustParameters                     ColourAdjustParameters;                           		// 0x000080 (0x002C)              
	float                                              ColourAdjust_InterpolationDuration;               		// 0x0000AC (0x0004)              
	class UTexture*                                    ColorGrading_LookupTable;                         		// 0x0000B0 (0x0004)              
	struct FLUTBlender                                 ColorGradingLUT;                                  		// 0x0000B4 (0x0018)              
};
//0x00000C
//ReverbSettings[0x17C61BA0]
struct FReverbSettings
{
	unsigned char                                      ReverbType;                                       		// 0x000000 (0x0001)              PROPERTY: ReverbPreset
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	float                                              Volume;                                           		// 0x000004 (0x0004)              
	float                                              FadeTime;                                         		// 0x000008 (0x0004)              
};
//0x000018
//StProxiesManagerParams[0x17C61B38]
struct FStProxiesManagerParams
{
	unsigned char                                      eServerBehaviour;                                 		// 0x000000 (0x0001)              PROPERTY: EProxyBehaviour
	unsigned char                                      eClientBehaviour;                                 		// 0x000001 (0x0001)              PROPERTY: EProxyBehaviour
	unsigned char                                      _0x000002[0x2];                                   		// 0x000002 (0x0002) MISSED OFFSET
	unsigned long                                      bShowDebugActors : 1;                             		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      bUseLimbo : 1;                                    		// 0x000004 (0x0004) [0x00000002] 
	float                                              fViewRadius;                                      		// 0x000008 (0x0004)              
	float                                              fViewRadiusHysteresisCoef;                        		// 0x00000C (0x0004)              
	float                                              fFrameTimeLimit;                                  		// 0x000010 (0x0004)              
	float                                              fWaitServerReplicationTime;                       		// 0x000014 (0x0004)              
};
//0x000024
//TCameraCache[0x17C61AD0]
struct FTCameraCache
{
	double                                             TimeStamp;                                        		// 0x000000 (0x0008)              
	struct FTPOV                                       POV;                                              		// 0x000008 (0x001C)              
};
//0x00002C
//TViewTarget[0x17C61A68]
struct FTViewTarget
{
	class AActor*                                      Target;                                           		// 0x000000 (0x0004)              
	class AController*                                 Controller;                                       		// 0x000004 (0x0004)              
	struct FTPOV                                       POV;                                              		// 0x000008 (0x001C)              
	float                                              AspectRatio;                                      		// 0x000024 (0x0004)              
	class APlayerReplicationInfo*                      PRI;                                              		// 0x000028 (0x0004)              
};
//0x00000C
//ViewTargetTransitionParams[0x17C61A00]
struct FViewTargetTransitionParams
{
	float                                              BlendTime;                                        		// 0x000000 (0x0004)              
	unsigned char                                      BlendFunction;                                    		// 0x000004 (0x0001)              PROPERTY: EViewTargetBlendFunction
	unsigned char                                      _0x000005[0x3];                                   		// 0x000005 (0x0003) MISSED OFFSET
	float                                              BlendExp;                                         		// 0x000008 (0x0004)              
};
//0x000008
//VisiblePortalInfo[0x17C61998]
struct FVisiblePortalInfo
{
	class AActor*                                      Source;                                           		// 0x000000 (0x0004)              
	class AActor*                                      Destination;                                      		// 0x000004 (0x0004)              
};
//0x000014
//MusicTrackParamStruct[0x17C61930]
struct FMusicTrackParamStruct
{
	float                                              FadeInTime;                                       		// 0x000000 (0x0004)              
	float                                              FadeInVolumeLevel;                                		// 0x000004 (0x0004)              
	float                                              DelayBetweenOldAndNewTrack;                       		// 0x000008 (0x0004)              
	float                                              FadeOutTime;                                      		// 0x00000C (0x0004)              
	float                                              FadeOutVolumeLevel;                               		// 0x000010 (0x0004)              
};
//0x000024
//MusicTrackStruct[0x17C618C8]
struct FMusicTrackStruct
{
	struct FMusicTrackParamStruct                      Params;                                           		// 0x000000 (0x0014)              
	struct FName                                       TrackType;                                        		// 0x000014 (0x0008)              
	class USoundCue*                                   TheSoundCue;                                      		// 0x00001C (0x0004)              
	unsigned long                                      bAutoPlay : 1;                                    		// 0x000020 (0x0004) [0x00000001] 
};
//0x000009
//LocalizedStringSetting[0x17C61860]
struct FLocalizedStringSetting
{
	int                                                Id;                                               		// 0x000000 (0x0004)              
	int                                                ValueIndex;                                       		// 0x000004 (0x0004)              
	unsigned char                                      AdvertisementType;                                		// 0x000008 (0x0001)              PROPERTY: EOnlineDataAdvertisementType
};
//0x00000C
//SettingsData[0x17C617F8]
struct FSettingsData
{
	unsigned char                                      Type;                                             		// 0x000000 (0x0001)              PROPERTY: ESettingsDataType
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	int                                                Value1;                                           		// 0x000004 (0x0004)              
	DWORD                                              Value2;                                           		// 0x000008 (0x0004)              
};
//0x000011
//SettingsProperty[0x17C61790]
struct FSettingsProperty
{
	int                                                PropertyId;                                       		// 0x000000 (0x0004)              
	struct FSettingsData                               Data;                                             		// 0x000004 (0x000C)              
	unsigned char                                      AdvertisementType;                                		// 0x000010 (0x0001)              PROPERTY: EOnlineDataAdvertisementType
};
//0x000010
//StringIdToStringMapping[0x17C61728]
struct FStringIdToStringMapping
{
	int                                                Id;                                               		// 0x000000 (0x0004)              
	struct FName                                       Name;                                             		// 0x000004 (0x0008)              
	unsigned long                                      bIsWildcard : 1;                                  		// 0x00000C (0x0004) [0x00000001] 
};
//0x000024
//LocalizedStringSettingMetaData[0x17C616C0]
struct FLocalizedStringSettingMetaData
{
	int                                                Id;                                               		// 0x000000 (0x0004)              
	struct FName                                       Name;                                             		// 0x000004 (0x0008)              
	struct FString                                     ColumnHeaderText;                                 		// 0x00000C (0x000C)              
	TArray<struct FStringIdToStringMapping>            ValueMappings;                                    		// 0x000018 (0x000C)              
};
//0x00000C
//IdToStringMapping[0x17C61658]
struct FIdToStringMapping
{
	int                                                Id;                                               		// 0x000000 (0x0004)              
	struct FName                                       Name;                                             		// 0x000004 (0x0008)              
};
//0x000040
//SettingsPropertyPropertyMetaData[0x17C615F0]
struct FSettingsPropertyPropertyMetaData
{
	int                                                Id;                                               		// 0x000000 (0x0004)              
	struct FName                                       Name;                                             		// 0x000004 (0x0008)              
	struct FString                                     ColumnHeaderText;                                 		// 0x00000C (0x000C)              
	unsigned char                                      MappingType;                                      		// 0x000018 (0x0001)              PROPERTY: EPropertyValueMappingType
	unsigned char                                      _0x000019[0x3];                                   		// 0x000019 (0x0003) MISSED OFFSET
	TArray<struct FIdToStringMapping>                  ValueMappings;                                    		// 0x00001C (0x000C)              
	TArray<struct FSettingsData>                       PredefinedValues;                                 		// 0x000028 (0x000C)              
	float                                              MinVal;                                           		// 0x000034 (0x0004)              
	float                                              MaxVal;                                           		// 0x000038 (0x0004)              
	float                                              RangeIncrement;                                   		// 0x00003C (0x0004)              
};
//0x000008
//UniqueNetId[0x17C61588]
struct FUniqueNetId
{
	struct FQWord                                      Uid;                                              		// 0x000000 (0x0008)              
};
//0x000010
//BaseAuthSession[0x17C61520]
struct FBaseAuthSession
{
	int                                                EndPointIP;                                       		// 0x000000 (0x0004)              
	int                                                EndPointPort;                                     		// 0x000004 (0x0004)              
	struct FUniqueNetId                                EndPointUID;                                      		// 0x000008 (0x0008)              
};
//0x000004 (0x000014 - 0x000010)
//LocalAuthSession[0x17C614B8]
struct FLocalAuthSession : FBaseAuthSession
{
	int                                                SessionUID;                                       		// 0x000010 (0x0004)              
};
//0x000008 (0x000018 - 0x000010)
//AuthSession[0x17C61450]
struct FAuthSession : FBaseAuthSession
{
	unsigned char                                      AuthStatus;                                       		// 0x000010 (0x0001)              PROPERTY: EAuthStatus
	unsigned char                                      _0x000011[0x3];                                   		// 0x000011 (0x0003) MISSED OFFSET
	int                                                AuthTicketUID;                                    		// 0x000014 (0x0004)              
};
//0x00000C
//FriendsQuery[0x17C613E8]
struct FFriendsQuery
{
	struct FUniqueNetId                                UniqueId;                                         		// 0x000000 (0x0008)              
	unsigned long                                      bIsFriend : 1;                                    		// 0x000008 (0x0004) [0x00000001] 
};
//0x000030
//OnlineFriend[0x17C61380]
struct FOnlineFriend
{
	struct FUniqueNetId                                UniqueId;                                         		// 0x000000 (0x0008)              
	struct FQWord                                      SessionId;                                        		// 0x000008 (0x0008)              
	struct FString                                     NickName;                                         		// 0x000010 (0x000C)              
	struct FString                                     PresenceInfo;                                     		// 0x00001C (0x000C)              
	unsigned char                                      FriendState;                                      		// 0x000028 (0x0001)              PROPERTY: EOnlineFriendState
	unsigned char                                      _0x000029[0x3];                                   		// 0x000029 (0x0003) MISSED OFFSET
	unsigned long                                      bIsOnline : 1;                                    		// 0x00002C (0x0004) [0x00000001] 
	unsigned long                                      bIsPlaying : 1;                                   		// 0x00002C (0x0004) [0x00000002] 
	unsigned long                                      bIsPlayingThisGame : 1;                           		// 0x00002C (0x0004) [0x00000004] 
	unsigned long                                      bIsJoinable : 1;                                  		// 0x00002C (0x0004) [0x00000008] 
	unsigned long                                      bHasVoiceSupport : 1;                             		// 0x00002C (0x0004) [0x00000010] 
	unsigned long                                      bHaveInvited : 1;                                 		// 0x00002C (0x0004) [0x00000020] 
	unsigned long                                      bHasInvitedYou : 1;                               		// 0x00002C (0x0004) [0x00000040] 
};
//0x00004C
//OnlineContent[0x17C61318]
struct FOnlineContent
{
	unsigned char                                      ContentType;                                      		// 0x000000 (0x0001)              PROPERTY: EOnlineContentType
	unsigned char                                      UserIndex;                                        		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000002[0x2];                                   		// 0x000002 (0x0002) MISSED OFFSET
	unsigned long                                      bIsCorrupt : 1;                                   		// 0x000004 (0x0004) [0x00000001] 
	int                                                DeviceID;                                         		// 0x000008 (0x0004)              
	int                                                LicenseMask;                                      		// 0x00000C (0x0004)              
	struct FString                                     FriendlyName;                                     		// 0x000010 (0x000C)              
	struct FString                                     Filename;                                         		// 0x00001C (0x000C)              
	struct FString                                     ContentPath;                                      		// 0x000028 (0x000C)              
	TArray<struct FString>                             ContentPackages;                                  		// 0x000034 (0x000C)              
	TArray<struct FString>                             ContentFiles;                                     		// 0x000040 (0x000C)              
};
//0x000004 (0x000050 - 0x00004C)
//OnlineCrossTitleContent[0x17C612B0]
struct FOnlineCrossTitleContent : FOnlineContent
{
	int                                                TitleId;                                          		// 0x00004C (0x0004)              
};
//0x000008
//OnlineRegistrant[0x17C61248]
struct FOnlineRegistrant
{
	struct FUniqueNetId                                PlayerNetId;                                      		// 0x000000 (0x0008)              
};
//0x00000C (0x000014 - 0x000008)
//OnlineArbitrationRegistrant[0x17C611E0]
struct FOnlineArbitrationRegistrant : FOnlineRegistrant
{
	struct FQWord                                      MachineId;                                        		// 0x000008 (0x0008)              
	int                                                Trustworthiness;                                  		// 0x000010 (0x0004)              
};
//0x000014
//SpeechRecognizedWord[0x17C61178]
struct FSpeechRecognizedWord
{
	int                                                WordId;                                           		// 0x000000 (0x0004)              
	struct FString                                     WordText;                                         		// 0x000004 (0x000C)              
	float                                              Confidence;                                       		// 0x000010 (0x0004)              
};
//0x000010
//OnlinePlayerScore[0x17C61110]
struct FOnlinePlayerScore
{
	struct FUniqueNetId                                PlayerID;                                         		// 0x000000 (0x0008)              
	int                                                TeamID;                                           		// 0x000008 (0x0004)              
	int                                                Score;                                            		// 0x00000C (0x0004)              
};
//0x000004
//LocalTalker[0x17C610A8]
struct FLocalTalker
{
	unsigned long                                      bHasVoice : 1;                                    		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bHasNetworkedVoice : 1;                           		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      bIsRecognizingSpeech : 1;                         		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      bWasTalking : 1;                                  		// 0x000000 (0x0004) [0x00000008] 
	unsigned long                                      bIsTalking : 1;                                   		// 0x000000 (0x0004) [0x00000010] 
	unsigned long                                      bIsRegistered : 1;                                		// 0x000000 (0x0004) [0x00000020] 
};
//0x000010
//RemoteTalker[0x17C61040]
struct FRemoteTalker
{
	struct FUniqueNetId                                TalkerId;                                         		// 0x000000 (0x0008)              
	float                                              LastNotificationTime;                             		// 0x000008 (0x0004)              
	unsigned long                                      bWasTalking : 1;                                  		// 0x00000C (0x0004) [0x00000001] 
	unsigned long                                      bIsTalking : 1;                                   		// 0x00000C (0x0004) [0x00000002] 
	unsigned long                                      bIsRegistered : 1;                                		// 0x00000C (0x0004) [0x00000004] 
};
//0x000024
//OnlineFriendMessage[0x17C60FD8]
struct FOnlineFriendMessage
{
	struct FUniqueNetId                                SendingPlayerId;                                  		// 0x000000 (0x0008)              
	struct FString                                     SendingPlayerNick;                                		// 0x000008 (0x000C)              
	unsigned long                                      bIsFriendInvite : 1;                              		// 0x000014 (0x0004) [0x00000001] 
	unsigned long                                      bIsGameInvite : 1;                                		// 0x000014 (0x0004) [0x00000002] 
	unsigned long                                      bWasAccepted : 1;                                 		// 0x000014 (0x0004) [0x00000004] 
	unsigned long                                      bWasDenied : 1;                                   		// 0x000014 (0x0004) [0x00000008] 
	struct FString                                     Message;                                          		// 0x000018 (0x000C)              
};
//0x00000C
//NamedInterface[0x17C60F70]
struct FNamedInterface
{
	struct FName                                       InterfaceName;                                    		// 0x000000 (0x0008)              
	class UObject*                                     InterfaceObject;                                  		// 0x000008 (0x0004)              
};
//0x000014
//NamedInterfaceDef[0x17C60F08]
struct FNamedInterfaceDef
{
	struct FName                                       InterfaceName;                                    		// 0x000000 (0x0008)              
	struct FString                                     InterfaceClassName;                               		// 0x000008 (0x000C)              
};
//0x000028
//EmsFile[0x17C60EA0]
struct FEmsFile
{
	struct FString                                     Hash;                                             		// 0x000000 (0x000C)              
	struct FString                                     DLName;                                           		// 0x00000C (0x000C)              
	struct FString                                     Filename;                                         		// 0x000018 (0x000C)              
	int                                                FileSize;                                         		// 0x000024 (0x0004)              
};
//0x00001C
//TitleFile[0x17C60E38]
struct FTitleFile
{
	struct FString                                     Filename;                                         		// 0x000000 (0x000C)              
	unsigned char                                      AsyncState;                                       		// 0x00000C (0x0001)              PROPERTY: EOnlineEnumerationReadState
	unsigned char                                      _0x00000D[0x3];                                   		// 0x00000D (0x0003) MISSED OFFSET
	TArray<unsigned char>                              Data;                                             		// 0x000010 (0x000C)              
};
//0x000034
//CommunityContentFile[0x17C60DD0]
struct FCommunityContentFile
{
	int                                                ContentId;                                        		// 0x000000 (0x0004)              
	int                                                FileId;                                           		// 0x000004 (0x0004)              
	int                                                ContentType;                                      		// 0x000008 (0x0004)              
	int                                                FileSize;                                         		// 0x00000C (0x0004)              
	struct FUniqueNetId                                Owner;                                            		// 0x000010 (0x0008)              
	int                                                DownloadCount;                                    		// 0x000018 (0x0004)              
	float                                              AverageRating;                                    		// 0x00001C (0x0004)              
	int                                                RatingCount;                                      		// 0x000020 (0x0004)              
	int                                                LastRatingGiven;                                  		// 0x000024 (0x0004)              
	struct FString                                     LocalFilePath;                                    		// 0x000028 (0x000C)              
};
//0x000010
//CommunityContentMetadata[0x17C60D68]
struct FCommunityContentMetadata
{
	int                                                ContentType;                                      		// 0x000000 (0x0004)              
	TArray<struct FSettingsProperty>                   MetadataItems;                                    		// 0x000004 (0x000C)              
};
//0x000028
//NamedSession[0x17C60D00]
struct FNamedSession
{
	struct FName                                       SessionName;                                      		// 0x000000 (0x0008)              
	DWORD                                              SessionInfo;                                      		// 0x000008 (0x0004)              
	class UOnlineGameSettings*                         GameSettings;                                     		// 0x00000C (0x0004)              
	TArray<struct FOnlineRegistrant>                   Registrants;                                      		// 0x000010 (0x000C)              
	TArray<struct FOnlineArbitrationRegistrant>        ArbitrationRegistrants;                           		// 0x00001C (0x000C)              
};
//0x000038
//AchievementDetails[0x17C60C98]
struct FAchievementDetails
{
	int                                                Id;                                               		// 0x000000 (0x0004)              
	struct FString                                     AchievementName;                                  		// 0x000004 (0x000C)              
	struct FString                                     Description;                                      		// 0x000010 (0x000C)              
	struct FString                                     HowTo;                                            		// 0x00001C (0x000C)              
	class USurface*                                    Image;                                            		// 0x000028 (0x0004)              
	unsigned char                                      MonthEarned;                                      		// 0x00002C (0x0001)              PROPERTY: 
	unsigned char                                      DayEarned;                                        		// 0x00002D (0x0001)              PROPERTY: 
	unsigned char                                      YearEarned;                                       		// 0x00002E (0x0001)              PROPERTY: 
	unsigned char                                      DayOfWeekEarned;                                  		// 0x00002F (0x0001)              PROPERTY: 
	int                                                GamerPoints;                                      		// 0x000030 (0x0004)              
	unsigned long                                      bIsSecret : 1;                                    		// 0x000034 (0x0004) [0x00000001] 
	unsigned long                                      bWasAchievedOnline : 1;                           		// 0x000034 (0x0004) [0x00000002] 
	unsigned long                                      bWasAchievedOffline : 1;                          		// 0x000034 (0x0004) [0x00000004] 
};
//0x000038
//OnlinePartyMember[0x17C60C30]
struct FOnlinePartyMember
{
	struct FUniqueNetId                                UniqueId;                                         		// 0x000000 (0x0008)              
	struct FString                                     NickName;                                         		// 0x000008 (0x000C)              
	unsigned char                                      LocalUserNum;                                     		// 0x000014 (0x0001)              PROPERTY: 
	unsigned char                                      NatType;                                          		// 0x000015 (0x0001)              PROPERTY: ENATType
	unsigned char                                      _0x000016[0x2];                                   		// 0x000016 (0x0002) MISSED OFFSET
	int                                                TitleId;                                          		// 0x000018 (0x0004)              
	unsigned long                                      bIsLocal : 1;                                     		// 0x00001C (0x0004) [0x00000001] 
	unsigned long                                      bIsInPartyVoice : 1;                              		// 0x00001C (0x0004) [0x00000002] 
	unsigned long                                      bIsTalking : 1;                                   		// 0x00001C (0x0004) [0x00000004] 
	unsigned long                                      bIsInGameSession : 1;                             		// 0x00001C (0x0004) [0x00000008] 
	unsigned long                                      bIsPlayingThisGame : 1;                           		// 0x00001C (0x0004) [0x00000010] 
	struct FQWord                                      SessionId;                                        		// 0x000020 (0x0008)              
	int                                                Data1;                                            		// 0x000028 (0x0004)              
	int                                                Data2;                                            		// 0x00002C (0x0004)              
	int                                                Data3;                                            		// 0x000030 (0x0004)              
	int                                                Data4;                                            		// 0x000034 (0x0004)              
};
//0x000004
//SocialPostPrivileges[0x17C60BC8]
struct FSocialPostPrivileges
{
	unsigned long                                      bCanPostImage : 1;                                		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bCanPostLink : 1;                                 		// 0x000000 (0x0004) [0x00000002] 
};
//0x000004
//SocialPostImageFlags[0x17C60B60]
struct FSocialPostImageFlags
{
	unsigned long                                      bIsUserGeneratedImage : 1;                        		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bIsGameGeneratedImage : 1;                        		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      bIsAchievementImage : 1;                          		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      bIsMediaImage : 1;                                		// 0x000000 (0x0004) [0x00000008] 
};
//0x000034
//SocialPostImageInfo[0x17C60AF8]
struct FSocialPostImageInfo
{
	struct FSocialPostImageFlags                       Flags;                                            		// 0x000000 (0x0004)              
	struct FString                                     MessageText;                                      		// 0x000004 (0x000C)              
	struct FString                                     TitleText;                                        		// 0x000010 (0x000C)              
	struct FString                                     PictureCaption;                                   		// 0x00001C (0x000C)              
	struct FString                                     PictureDescription;                               		// 0x000028 (0x000C)              
};
//0x000018 (0x00004C - 0x000034)
//SocialPostLinkInfo[0x17C60A90]
struct FSocialPostLinkInfo : FSocialPostImageInfo
{
	struct FString                                     TitleURL;                                         		// 0x000034 (0x000C)              
	struct FString                                     PictureURL;                                       		// 0x000040 (0x000C)              
};
//0x000008
//OnlineGameSearchResult[0x17C60A28]
struct FOnlineGameSearchResult
{
	class UOnlineGameSettings*                         GameSettings;                                     		// 0x000000 (0x0004)              
	DWORD                                              PlatformData;                                     		// 0x000004 (0x0004)              
};
//0x000028
//OverrideSkill[0x17C609C0]
struct FOverrideSkill
{
	int                                                LeaderboardId;                                    		// 0x000000 (0x0004)              
	TArray<struct FUniqueNetId>                        Players;                                          		// 0x000004 (0x000C)              
	TArray<double>                                     Mus;                                              		// 0x000010 (0x000C)              
	TArray<double>                                     Sigmas;                                           		// 0x00001C (0x000C)              
};
//0x000014
//NamedObjectProperty[0x17C60958]
struct FNamedObjectProperty
{
	struct FName                                       ObjectPropertyName;                               		// 0x000000 (0x0008)              
	struct FString                                     ObjectPropertyValue;                              		// 0x000008 (0x000C)              
};
//0x00000E
//OnlineGameSearchParameter[0x17C608F0]
struct FOnlineGameSearchParameter
{
	int                                                EntryId;                                          		// 0x000000 (0x0004)              
	struct FName                                       ObjectPropertyName;                               		// 0x000004 (0x0008)              
	unsigned char                                      EntryType;                                        		// 0x00000C (0x0001)              PROPERTY: EOnlineGameSearchEntryType
	unsigned char                                      ComparisonType;                                   		// 0x00000D (0x0001)              PROPERTY: EOnlineGameSearchComparisonType
};
//0x00000E
//OnlineGameSearchSortClause[0x17C60888]
struct FOnlineGameSearchSortClause
{
	int                                                EntryId;                                          		// 0x000000 (0x0004)              
	struct FName                                       ObjectPropertyName;                               		// 0x000004 (0x0008)              
	unsigned char                                      EntryType;                                        		// 0x00000C (0x0001)              PROPERTY: EOnlineGameSearchEntryType
	unsigned char                                      SortType;                                         		// 0x00000D (0x0001)              PROPERTY: EOnlineGameSearchSortType
};
//0x00000C
//OnlineGameSearchORClause[0x17C60820]
struct FOnlineGameSearchORClause
{
	TArray<struct FOnlineGameSearchParameter>          OrParams;                                         		// 0x000000 (0x000C)              
};
//0x000018
//OnlineGameSearchQuery[0x17C607B8]
struct FOnlineGameSearchQuery
{
	TArray<struct FOnlineGameSearchORClause>           OrClauses;                                        		// 0x000000 (0x000C)              
	TArray<struct FOnlineGameSearchSortClause>         SortClauses;                                      		// 0x00000C (0x000C)              
};
//0x000035
//ClientAdjustment[0x17C60750]
struct FClientAdjustment
{
	double                                             TimeStamp;                                        		// 0x000000 (0x0008)              
	unsigned char                                      newPhysics;                                       		// 0x000008 (0x0001)              PROPERTY: EPhysics
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	FVector3                                           NewLoc;                                           		// 0x00000C (0x000C)              
	FVector3                                           NewVel;                                           		// 0x000018 (0x000C)              
	class AActor*                                      NewBase;                                          		// 0x000024 (0x0004)              
	FVector3                                           NewFloor;                                         		// 0x000028 (0x000C)              
	unsigned char                                      bAckGoodMove;                                     		// 0x000034 (0x0001)              PROPERTY: 
};
//0x000010
//ConnectedPeerInfo[0x17C606E8]
struct FConnectedPeerInfo
{
	struct FUniqueNetId                                PlayerID;                                         		// 0x000000 (0x0008)              
	unsigned char                                      NatType;                                          		// 0x000008 (0x0001)              PROPERTY: ENATType
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	unsigned long                                      bLostConnectionToHost : 1;                        		// 0x00000C (0x0004) [0x00000001] 
};
//0x00000D
//InputEntry[0x17C60680]
struct FInputEntry
{
	unsigned char                                      Type;                                             		// 0x000000 (0x0001)              PROPERTY: EInputTypes
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	float                                              Value;                                            		// 0x000004 (0x0004)              
	float                                              TimeDelta;                                        		// 0x000008 (0x0004)              
	unsigned char                                      Action;                                           		// 0x00000C (0x0001)              PROPERTY: EInputMatchAction
};
//0x00003C
//InputMatchRequest[0x17C60618]
struct FInputMatchRequest
{
	TArray<struct FInputEntry>                         Inputs;                                           		// 0x000000 (0x000C)              
	class AActor*                                      MatchActor;                                       		// 0x00000C (0x0004)              
	struct FScriptDelegate                             MatchFunc;                                        		// 0x000010 (0x000C)              
	struct FScriptDelegate                             FailedFunc;                                       		// 0x00001C (0x000C)              
	struct FName                                       RequestName;                                      		// 0x000028 (0x0008)              
	int                                                MatchIdx;                                         		// 0x000030 (0x0004)              
	double                                             LastMatchTime;                                    		// 0x000034 (0x0008)              
};
//0x000034
//DebugTextInfo[0x17C605B0]
struct FDebugTextInfo
{
	class AActor*                                      SrcActor;                                         		// 0x000000 (0x0004)              
	FVector3                                           SrcActorOffset;                                   		// 0x000004 (0x000C)              
	FVector3                                           SrcActorDesiredOffset;                            		// 0x000010 (0x000C)              
	struct FString                                     DebugText;                                        		// 0x00001C (0x000C)              
	float                                              TimeRemaining;                                    		// 0x000028 (0x0004)              
	float                                              Duration;                                         		// 0x00002C (0x0004)              
	DWORD                                              TextColor;                                        		// 0x000030 (0x0004)              
};
//0x00001C
//CheckpointRecord[0x17C60548]
struct FCheckpointRecord
{
	FVector3                                           Location;                                         		// 0x000000 (0x000C)              
	FRotator                                           Rotation;                                         		// 0x00000C (0x000C)              
	unsigned long                                      bIsShutdown : 1;                                  		// 0x000018 (0x0004) [0x00000001] 
};
//0x000028
//IndexedRBState[0x17C604E0]
struct FIndexedRBState
{
	FVector3                                           CenterOfMass;                                     		// 0x000000 (0x000C)              
	FVector3                                           LinearVelocity;                                   		// 0x00000C (0x000C)              
	FVector3                                           AngularVelocity;                                  		// 0x000018 (0x000C)              
	int                                                Index;                                            		// 0x000024 (0x0004)              
};
//0x000018
//RBVolumeFill[0x17C60478]
struct FRBVolumeFill
{
	TArray<struct FIndexedRBState>                     RBStates;                                         		// 0x000000 (0x000C)              
	TArray<FVector3>                                   Positions;                                        		// 0x00000C (0x000C)              
};
//0x000020
//EmitterBaseInfo[0x17C60410]
struct FEmitterBaseInfo
{
	class UParticleSystemComponent*                    PSC;                                              		// 0x000000 (0x0004)              
	class AActor*                                      Base;                                             		// 0x000004 (0x0004)              
	FVector3                                           RelativeLocation;                                 		// 0x000008 (0x000C)              
	FRotator                                           RelativeRotation;                                 		// 0x000014 (0x000C)              
};
//0x00001C
//ConsoleMessage[0x17C603A8]
struct FConsoleMessage
{
	struct FString                                     Text;                                             		// 0x000000 (0x000C)              
	DWORD                                              TextColor;                                        		// 0x00000C (0x0004)              
	double                                             MessageLife;                                      		// 0x000010 (0x0008)              
	class APlayerReplicationInfo*                      PRI;                                              		// 0x000018 (0x0004)              
};
//0x000044
//HudLocalizedMessage[0x17C60340]
struct FHudLocalizedMessage
{
	class UClass*                                      Message;                                          		// 0x000000 (0x0004)              
	struct FString                                     StringMessage;                                    		// 0x000004 (0x000C)              
	int                                                Switch;                                           		// 0x000010 (0x0004)              
	double                                             EndOfLife;                                        		// 0x000014 (0x0008)              
	float                                              Lifetime;                                         		// 0x00001C (0x0004)              
	float                                              PosY;                                             		// 0x000020 (0x0004)              
	DWORD                                              DrawColor;                                        		// 0x000024 (0x0004)              
	int                                                FontSize;                                         		// 0x000028 (0x0004)              
	class UFont*                                       StringFont;                                       		// 0x00002C (0x0004)              
	float                                              DX;                                               		// 0x000030 (0x0004)              
	float                                              DY;                                               		// 0x000034 (0x0004)              
	unsigned long                                      Drawn : 1;                                        		// 0x000038 (0x0004) [0x00000001] 
	int                                                Count;                                            		// 0x00003C (0x0004)              
	class UObject*                                     OptionalObject;                                   		// 0x000040 (0x0004)              
};
//0x000018
//KeyValuePair[0x17C602D8]
struct FKeyValuePair
{
	struct FString                                     Key;                                              		// 0x000000 (0x000C)              
	struct FString                                     Value;                                            		// 0x00000C (0x000C)              
};
//0x00002C
//PlayerResponseLine[0x17C60270]
struct FPlayerResponseLine
{
	int                                                PlayerNum;                                        		// 0x000000 (0x0004)              
	int                                                PlayerID;                                         		// 0x000004 (0x0004)              
	struct FString                                     PlayerName;                                       		// 0x000008 (0x000C)              
	int                                                Ping;                                             		// 0x000014 (0x0004)              
	int                                                Score;                                            		// 0x000018 (0x0004)              
	int                                                StatsID;                                          		// 0x00001C (0x0004)              
	TArray<struct FKeyValuePair>                       PlayerInfo;                                       		// 0x000020 (0x000C)              
};
//0x000060
//ServerResponseLine[0x17C60208]
struct FServerResponseLine
{
	int                                                ServerID;                                         		// 0x000000 (0x0004)              
	struct FString                                     IP;                                               		// 0x000004 (0x000C)              
	int                                                Port;                                             		// 0x000010 (0x0004)              
	int                                                QueryPort;                                        		// 0x000014 (0x0004)              
	struct FString                                     ServerName;                                       		// 0x000018 (0x000C)              
	struct FString                                     MapName;                                          		// 0x000024 (0x000C)              
	struct FString                                     GameType;                                         		// 0x000030 (0x000C)              
	int                                                CurrentPlayers;                                   		// 0x00003C (0x0004)              
	int                                                MaxPlayers;                                       		// 0x000040 (0x0004)              
	int                                                Ping;                                             		// 0x000044 (0x0004)              
	TArray<struct FKeyValuePair>                       ServerInfo;                                       		// 0x000048 (0x000C)              
	TArray<struct FPlayerResponseLine>                 PlayerInfo;                                       		// 0x000054 (0x000C)              
};
//0x000031
//NavigationOctreeObject[0x17C601A0]
struct FNavigationOctreeObject
{
	struct FBox                                        BoundingBox;                                      		// 0x000000 (0x001C)              
	FVector3                                           BoxCenter;                                        		// 0x00001C (0x000C)              
	DWORD                                              OctreeNode;                                       		// 0x000028 (0x0004)              
	class UObject*                                     Owner;                                            		// 0x00002C (0x0004)              
	unsigned char                                      OwnerType;                                        		// 0x000030 (0x0001)              PROPERTY: 
};
//0x000010
//DebugNavCost[0x17C60138]
struct FDebugNavCost
{
	struct FString                                     Desc;                                             		// 0x000000 (0x000C)              
	int                                                Cost;                                             		// 0x00000C (0x0004)              
};
//0x000008 (0x00001C - 0x000014)
//CoverReference[0x17C600D0]
struct FCoverReference : FNavReference
{
	int                                                SlotIdx;                                          		// 0x000014 (0x0004)              
	int                                                Direction;                                        		// 0x000018 (0x0004)              
};
//0x000010
//LinkSlotHelper[0x17C60068]
struct FLinkSlotHelper
{
	class ACoverLink*                                  Link;                                             		// 0x000000 (0x0004)              
	TArray<int>                                        Slots;                                            		// 0x000004 (0x000C)              
};
//0x000008
//CoverInfo[0x17C60000]
struct FCoverInfo
{
	class ACoverLink*                                  Link;                                             		// 0x000000 (0x0004)              
	int                                                SlotIdx;                                          		// 0x000004 (0x0004)              
};
//0x00000C
//TargetInfo[0x1D09FF88]
struct FTargetInfo
{
	class AActor*                                      Target;                                           		// 0x000000 (0x0004)              
	int                                                SlotIdx;                                          		// 0x000004 (0x0004)              
	int                                                Direction;                                        		// 0x000008 (0x0004)              
};
//0x000034
//CovPosInfo[0x1D09FF20]
struct FCovPosInfo
{
	class ACoverLink*                                  Link;                                             		// 0x000000 (0x0004)              
	int                                                LtSlotIdx;                                        		// 0x000004 (0x0004)              
	int                                                RtSlotIdx;                                        		// 0x000008 (0x0004)              
	float                                              LtToRtPct;                                        		// 0x00000C (0x0004)              
	FVector3                                           Location;                                         		// 0x000010 (0x000C)              
	FVector3                                           Normal;                                           		// 0x00001C (0x000C)              
	FVector3                                           Tangent;                                          		// 0x000028 (0x000C)              
};
//0x000004
//FireLinkItem[0x1D09FEB8]
struct FFireLinkItem
{
	unsigned char                                      SrcType;                                          		// 0x000000 (0x0001)              PROPERTY: ECoverType
	unsigned char                                      SrcAction;                                        		// 0x000001 (0x0001)              PROPERTY: ECoverAction
	unsigned char                                      DestType;                                         		// 0x000002 (0x0001)              PROPERTY: ECoverType
	unsigned char                                      DestAction;                                       		// 0x000003 (0x0001)              PROPERTY: ECoverAction
};
//0x000030
//FireLink[0x1D09FE50]
struct FFireLink
{
	struct FNavReference                               TargetMarker;                                     		// 0x000000 (0x0014)              
	TArray<struct FFireLinkItem>                       Items;                                            		// 0x000014 (0x000C)              
	FVector3                                           LastMarkerLocation;                               		// 0x000020 (0x000C)              
	unsigned long                                      bFallbackLink : 1;                                		// 0x00002C (0x0004) [0x00000001] 
};
//0x000018
//ExposedLink[0x1D09FDE8]
struct FExposedLink
{
	struct FNavReference                               TargetMarker;                                     		// 0x000000 (0x0014)              
	float                                              ExposedScale;                                     		// 0x000014 (0x0004)              
};
//0x000018
//DangerLink[0x1D09FD80]
struct FDangerLink
{
	struct FNavReference                               DangerNav;                                        		// 0x000000 (0x0014)              
	int                                                DangerCost;                                       		// 0x000014 (0x0004)              
};
//0x0000B9
//CoverSlot[0x1D09FD18]
struct FCoverSlot
{
	class APawn*                                       SlotOwner;                                        		// 0x000000 (0x0004)              
	float                                              SlotValidAfterTime;                               		// 0x000004 (0x0004)              
	unsigned char                                      ForceCoverType;                                   		// 0x000008 (0x0001)              PROPERTY: ECoverType
	unsigned char                                      CoverType;                                        		// 0x000009 (0x0001)              PROPERTY: ECoverType
	unsigned char                                      _0x00000A[0x2];                                   		// 0x00000A (0x0002) MISSED OFFSET
	FVector3                                           LocationOffset;                                   		// 0x00000C (0x000C)              
	FRotator                                           RotationOffset;                                   		// 0x000018 (0x000C)              
	TArray<unsigned char>                              Actions;                                          		// 0x000024 (0x000C)              
	TArray<struct FFireLink>                           FireLinks;                                        		// 0x000030 (0x000C)              
	TArray<struct FFireLink>                           ForcedFireLinks;                                  		// 0x00003C (0x000C)              
	TArray<struct FCoverInfo>                          RejectedFireLinks;                                		// 0x000048 (0x000C)              
	TArray<struct FExposedLink>                        ExposedFireLinks;                                 		// 0x000054 (0x000C)              
	TArray<struct FDangerLink>                         DangerLinks;                                      		// 0x000060 (0x000C)              
	struct FCoverReference                             MantleTarget;                                     		// 0x00006C (0x001C)              
	TArray<struct FCoverReference>                     TurnTarget;                                       		// 0x000088 (0x000C)              
	TArray<struct FCoverReference>                     SlipTarget;                                       		// 0x000094 (0x000C)              
	TArray<struct FCoverReference>                     OverlapClaims;                                    		// 0x0000A0 (0x000C)              
	unsigned long                                      bLeanLeft : 1;                                    		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bLeanRight : 1;                                   		// 0x0000AC (0x0004) [0x00000002] 
	unsigned long                                      bForceCanPopUp : 1;                               		// 0x0000AC (0x0004) [0x00000004] 
	unsigned long                                      bCanPopUp : 1;                                    		// 0x0000AC (0x0004) [0x00000008] 
	unsigned long                                      bCanMantle : 1;                                   		// 0x0000AC (0x0004) [0x00000010] 
	unsigned long                                      bCanClimbUp : 1;                                  		// 0x0000AC (0x0004) [0x00000020] 
	unsigned long                                      bForceCanCoverSlip_Left : 1;                      		// 0x0000AC (0x0004) [0x00000040] 
	unsigned long                                      bForceCanCoverSlip_Right : 1;                     		// 0x0000AC (0x0004) [0x00000080] 
	unsigned long                                      bCanCoverSlip_Left : 1;                           		// 0x0000AC (0x0004) [0x00000100] 
	unsigned long                                      bCanCoverSlip_Right : 1;                          		// 0x0000AC (0x0004) [0x00000200] 
	unsigned long                                      bCanSwatTurn_Left : 1;                            		// 0x0000AC (0x0004) [0x00000400] 
	unsigned long                                      bCanSwatTurn_Right : 1;                           		// 0x0000AC (0x0004) [0x00000800] 
	unsigned long                                      bEnabled : 1;                                     		// 0x0000AC (0x0004) [0x00001000] 
	unsigned long                                      bAllowPopup : 1;                                  		// 0x0000AC (0x0004) [0x00002000] 
	unsigned long                                      bAllowMantle : 1;                                 		// 0x0000AC (0x0004) [0x00004000] 
	unsigned long                                      bAllowCoverSlip : 1;                              		// 0x0000AC (0x0004) [0x00008000] 
	unsigned long                                      bAllowClimbUp : 1;                                		// 0x0000AC (0x0004) [0x00010000] 
	unsigned long                                      bAllowSwatTurn : 1;                               		// 0x0000AC (0x0004) [0x00020000] 
	unsigned long                                      bSelected : 1;                                    		// 0x0000AC (0x0004) [0x00040000] 
	float                                              LeanTraceDist;                                    		// 0x0000B0 (0x0004)              
	class ACoverSlotMarker*                            SlotMarker;                                       		// 0x0000B4 (0x0004)              
	unsigned char                                      LocationDescription;                              		// 0x0000B8 (0x0001)              PROPERTY: ECoverLocationDescription
};
//0x000002
//ManualCoverTypeInfo[0x1D09FCB0]
struct FManualCoverTypeInfo
{
	unsigned char                                      SlotIndex;                                        		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      ManualCoverType;                                  		// 0x000001 (0x0001)              PROPERTY: ECoverType
};
//0x000034
//CoverReplicationInfo[0x1D09FC48]
struct FCoverReplicationInfo
{
	class ACoverLink*                                  Link;                                             		// 0x000000 (0x0004)              
	TArray<unsigned char>                              SlotsEnabled;                                     		// 0x000004 (0x000C)              
	TArray<unsigned char>                              SlotsDisabled;                                    		// 0x000010 (0x000C)              
	TArray<unsigned char>                              SlotsAdjusted;                                    		// 0x00001C (0x000C)              
	TArray<struct FManualCoverTypeInfo>                SlotsCoverTypeChanged;                            		// 0x000028 (0x000C)              
};
//0x000008
//AutomatedTestingDatum[0x1D09FBE0]
struct FAutomatedTestingDatum
{
	int                                                NumberOfMatchesPlayed;                            		// 0x000000 (0x0004)              
	int                                                NumMapListCyclesDone;                             		// 0x000004 (0x0004)              
};
//0x000000
//TerrainHeight[0x1D09FB78]
struct FTerrainHeight
{
};
//0x000000
//TerrainInfoData[0x1D09FB10]
struct FTerrainInfoData
{
};
//0x000000
//TerrainWeightedMaterial[0x1D09FAA8]
struct FTerrainWeightedMaterial
{
};
//0x000030
//TerrainLayer[0x1D09FA40]
struct FTerrainLayer
{
	struct FString                                     Name;                                             		// 0x000000 (0x000C)              
	class UTerrainLayerSetup*                          Setup;                                            		// 0x00000C (0x0004)              
	int                                                AlphaMapIndex;                                    		// 0x000010 (0x0004)              
	unsigned long                                      Highlighted : 1;                                  		// 0x000014 (0x0004) [0x00000001] 
	unsigned long                                      WireframeHighlighted : 1;                         		// 0x000014 (0x0004) [0x00000002] 
	unsigned long                                      Hidden : 1;                                       		// 0x000014 (0x0004) [0x00000004] 
	DWORD                                              HighlightColor;                                   		// 0x000018 (0x0004)              
	DWORD                                              WireframeColor;                                   		// 0x00001C (0x0004)              
	int                                                MinX;                                             		// 0x000020 (0x0004)              
	int                                                MinY;                                             		// 0x000024 (0x0004)              
	int                                                MaxX;                                             		// 0x000028 (0x0004)              
	int                                                MaxY;                                             		// 0x00002C (0x0004)              
};
//0x000000
//AlphaMap[0x1D09F9D8]
struct FAlphaMap
{
};
//0x000014
//TerrainDecorationInstance[0x1D09F970]
struct FTerrainDecorationInstance
{
	class UPrimitiveComponent*                         Component;                                        		// 0x000000 (0x0004)              
	float                                              X;                                                		// 0x000004 (0x0004)              
	float                                              Y;                                                		// 0x000008 (0x0004)              
	float                                              Scale;                                            		// 0x00000C (0x0004)              
	int                                                Yaw;                                              		// 0x000010 (0x0004)              
};
//0x000024
//TerrainDecoration[0x1D09F908]
struct FTerrainDecoration
{
	class UPrimitiveComponentFactory*                  Factory;                                          		// 0x000000 (0x0004)              
	float                                              MinScale;                                         		// 0x000004 (0x0004)              
	float                                              MaxScale;                                         		// 0x000008 (0x0004)              
	float                                              Density;                                          		// 0x00000C (0x0004)              
	float                                              SlopeRotationBlend;                               		// 0x000010 (0x0004)              
	int                                                RandSeed;                                         		// 0x000014 (0x0004)              
	TArray<struct FTerrainDecorationInstance>          Instances;                                        		// 0x000018 (0x000C)              
};
//0x00001C
//TerrainDecoLayer[0x1D09F8A0]
struct FTerrainDecoLayer
{
	struct FString                                     Name;                                             		// 0x000000 (0x000C)              
	TArray<struct FTerrainDecoration>                  Decorations;                                      		// 0x00000C (0x000C)              
	int                                                AlphaMapIndex;                                    		// 0x000018 (0x0004)              
};
//0x000000
//TerrainMaterialResource[0x1D09F838]
struct FTerrainMaterialResource
{
};
//0x00000C
//CachedTerrainMaterialArray[0x1D09F7D0]
struct FCachedTerrainMaterialArray
{
	TArray<DWORD>                                      CachedMaterials;                                  		// 0x000000 (0x000C)              
};
//0x00000C
//SelectedTerrainVertex[0x1D09F768]
struct FSelectedTerrainVertex
{
	int                                                X;                                                		// 0x000000 (0x0004)              
	int                                                Y;                                                		// 0x000004 (0x0004)              
	int                                                Weight;                                           		// 0x000008 (0x0004)              
};
//0x000020
//NetViewer[0x1D09F700]
struct FNetViewer
{
	class APlayerController*                           InViewer;                                         		// 0x000000 (0x0004)              
	class AActor*                                      Viewer;                                           		// 0x000004 (0x0004)              
	FVector3                                           ViewLocation;                                     		// 0x000008 (0x000C)              
	FVector3                                           ViewDir;                                          		// 0x000014 (0x000C)              
};
//0x000004
//CompartmentRunList[0x1D09F698]
struct FCompartmentRunList
{
	unsigned long                                      RigidBody : 1;                                    		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      Fluid : 1;                                        		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      Cloth : 1;                                        		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      SoftBody : 1;                                     		// 0x000000 (0x0004) [0x00000008] 
};
//0x00000C
//PhysXSimulationProperties[0x1D09F630]
struct FPhysXSimulationProperties
{
	unsigned long                                      bUseHardware : 1;                                 		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bFixedTimeStep : 1;                               		// 0x000000 (0x0004) [0x00000002] 
	float                                              TimeStep;                                         		// 0x000004 (0x0004)              
	int                                                MaxSubSteps;                                      		// 0x000008 (0x0004)              
};
//0x00003C
//PhysXSceneProperties[0x1D09F5C8]
struct FPhysXSceneProperties
{
	struct FPhysXSimulationProperties                  PrimaryScene;                                     		// 0x000000 (0x000C)              
	struct FPhysXSimulationProperties                  CompartmentRigidBody;                             		// 0x00000C (0x000C)              
	struct FPhysXSimulationProperties                  CompartmentFluid;                                 		// 0x000018 (0x000C)              
	struct FPhysXSimulationProperties                  CompartmentCloth;                                 		// 0x000024 (0x000C)              
	struct FPhysXSimulationProperties                  CompartmentSoftBody;                              		// 0x000030 (0x000C)              
};
//0x000018
//PhysXEmitterVerticalProperties[0x1D09F560]
struct FPhysXEmitterVerticalProperties
{
	unsigned long                                      bDisableLod : 1;                                  		// 0x000000 (0x0004) [0x00000001] 
	int                                                ParticlesLodMin;                                  		// 0x000004 (0x0004)              
	int                                                ParticlesLodMax;                                  		// 0x000008 (0x0004)              
	int                                                PacketsPerPhysXParticleSystemMax;                 		// 0x00000C (0x0004)              
	unsigned long                                      bApplyCylindricalPacketCulling : 1;               		// 0x000010 (0x0004) [0x00000001] 
	float                                              SpawnLodVsFifoBias;                               		// 0x000014 (0x0004)              
};
//0x000018
//PhysXVerticalProperties[0x1D09F4F8]
struct FPhysXVerticalProperties
{
	struct FPhysXEmitterVerticalProperties             Emitters;                                         		// 0x000000 (0x0018)              
};
//0x00000C
//BuildingTypeArray[0x1D09F490]
struct FBuildingTypeArray
{
	TArray<class URWTechNode*>                         SpawnDestroyPoints;                               		// 0x000000 (0x000C)              
};
//0x000020
//VehicleRouteDetails[0x1D09F428]
struct FVehicleRouteDetails
{
	int                                                RouteID;                                          		// 0x000000 (0x0004)              
	int                                                LinkRouteID;                                      		// 0x000004 (0x0004)              
	TArray<unsigned char>                              m_aVehicleTypesAllowed;                           		// 0x000008 (0x000C)              
	TArray<class URWTechNode*>                         PathNodes;                                        		// 0x000014 (0x000C)              
};
//0x000014
//BlockToBlockRouteRecord[0x1D09F3C0]
struct FBlockToBlockRouteRecord
{
	int                                                m_nRecycledRoute_LUTEntry_Index;                  		// 0x000000 (0x0004)              
	int                                                m_nRecycledRoute_LUTEntry_RouteIndex;             		// 0x000004 (0x0004)              
	TArray<int>                                        m_aBlockIDs;                                      		// 0x000008 (0x000C)              
};
//0x00000C
//BlockToBlockLUTEntry[0x1D09F358]
struct FBlockToBlockLUTEntry
{
	TArray<struct FBlockToBlockRouteRecord>            m_aRoutes;                                        		// 0x000000 (0x000C)              
};
//0x000018
//WithinABlockRouteRecord[0x1D09F2F0]
struct FWithinABlockRouteRecord
{
	int                                                m_nRecycledRoute_LUTEntry_Index;                  		// 0x000000 (0x0004)              
	int                                                m_nRecycledRoute_LUTEntry_RouteIndex;             		// 0x000004 (0x0004)              
	float                                              m_fCost;                                          		// 0x000008 (0x0004)              
	TArray<class URWTechNode*>                         m_aNodes;                                         		// 0x00000C (0x000C)              
};
//0x00000C
//WithinABlockLUTEntry[0x1D09F288]
struct FWithinABlockLUTEntry
{
	TArray<struct FWithinABlockRouteRecord>            m_aRoutes;                                        		// 0x000000 (0x000C)              
};
//0x000010
//WithinABlockRoutes[0x1D09F220]
struct FWithinABlockRoutes
{
	int                                                m_nBitsToShiftWABLUTIndex;                        		// 0x000000 (0x0004)              
	TArray<struct FWithinABlockLUTEntry>               m_aWithinABlockLUT;                               		// 0x000004 (0x000C)              
};
//0x00001C
//HostMigrationState[0x1D09F1B8]
struct FHostMigrationState
{
	unsigned char                                      HostMigrationProgress;                            		// 0x000000 (0x0001)              PROPERTY: EHostMigrationProgress
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	float                                              HostMigrationElapsedTime;                         		// 0x000004 (0x0004)              
	float                                              HostMigrationTravelCountdown;                     		// 0x000008 (0x0004)              
	struct FString                                     HostMigrationTravelURL;                           		// 0x00000C (0x000C)              
	unsigned long                                      bHostMigrationEnabled : 1;                        		// 0x000018 (0x0004) [0x00000001] 
};
//0x000015
//PathSizeInfo[0x1D09F150]
struct FPathSizeInfo
{
	struct FName                                       Desc;                                             		// 0x000000 (0x0008)              
	float                                              Radius;                                           		// 0x000008 (0x0004)              
	float                                              Height;                                           		// 0x00000C (0x0004)              
	float                                              CrouchHeight;                                     		// 0x000010 (0x0004)              
	unsigned char                                      PathColor;                                        		// 0x000014 (0x0001)              PROPERTY: 
};
//0x000020
//NonLocalVehicleState[0x1D09F0E8]
struct FNonLocalVehicleState
{
	FVector3                                           m_Position;                                       		// 0x000000 (0x000C)              
	unsigned char                                      _0x00000C[0x4];                                   		// 0x00000C (0x0004) MISSED OFFSET
	struct FQuat                                       m_Quaternion;                                     		// 0x000010 (0x0010)              
};
//0x000048
//VehicleState[0x1D09F080]
struct FVehicleState
{
	struct FRigidBodyState                             RBState;                                          		// 0x000000 (0x0040)              
	unsigned char                                      PackedGearSteeringThrottle;                       		// 0x000040 (0x0001)              PROPERTY: 
	unsigned char                                      PackedBrakeGasHandbrake;                          		// 0x000041 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000042[0x2];                                   		// 0x000042 (0x0002) MISSED OFFSET
	int                                                ServerView;                                       		// 0x000044 (0x0004)              
};
//0x000008
//tLinkerAndNetIndex[0x1D09F018]
struct FtLinkerAndNetIndex
{
	int                                                LinkerIndex;                                      		// 0x000000 (0x0004)              
	int                                                NetIndex;                                         		// 0x000004 (0x0004)              
};
//0x000014
//stReplacement[0x1D09EFB0]
struct FstReplacement
{
	class UObject*                                     ArchetypeToReplace;                               		// 0x000000 (0x0004)              
	class UObject*                                     ReplacementObject;                                		// 0x000004 (0x0004)              
	struct FName                                       ReplacementName;                                  		// 0x000008 (0x0008)              
	class UcActorProxy*                                Proxy;                                            		// 0x000010 (0x0004)              
};
//0x000004
//CheckpointRecord[0x1D09EF48]
struct FCheckpointRecord
{
	unsigned long                                      bCollideActors : 1;                               		// 0x000000 (0x0004) [0x00000001] 
};
//0x000008
//LevelStreamingData[0x1D09EEE0]
struct FLevelStreamingData
{
	unsigned long                                      bShouldBeLoaded : 1;                              		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bShouldBeVisible : 1;                             		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x000000 (0x0004) [0x00000004] 
	class ULevelStreaming*                             Level;                                            		// 0x000004 (0x0004)              
};
//0x000010
//AnimNotifyEvent[0x1D09EE78]
struct FAnimNotifyEvent
{
	float                                              Time;                                             		// 0x000000 (0x0004)              
	class UAnimNotify*                                 Notify;                                           		// 0x000004 (0x0004)              
	struct FName                                       Comment;                                          		// 0x000008 (0x0008)              
};
//0x000024
//RawAnimSequenceTrack[0x1D09EE10]
struct FRawAnimSequenceTrack
{
	TArray<FVector3>                                   PosKeys;                                          		// 0x000000 (0x000C)              
	TArray<struct FQuat>                               RotKeys;                                          		// 0x00000C (0x000C)              
	TArray<float>                                      KeyTimes;                                         		// 0x000018 (0x000C)              
};
//0x000018
//TranslationTrack[0x1D09EDA8]
struct FTranslationTrack
{
	TArray<FVector3>                                   PosKeys;                                          		// 0x000000 (0x000C)              
	TArray<float>                                      Times;                                            		// 0x00000C (0x000C)              
};
//0x000018
//RotationTrack[0x1D09ED40]
struct FRotationTrack
{
	TArray<struct FQuat>                               RotKeys;                                          		// 0x000000 (0x000C)              
	TArray<float>                                      Times;                                            		// 0x00000C (0x000C)              
};
//0x000030
//CompressedTrack[0x1D09ECD8]
struct FCompressedTrack
{
	TArray<unsigned char>                              ByteStream;                                       		// 0x000000 (0x000C)              
	TArray<float>                                      Times;                                            		// 0x00000C (0x000C)              
	float                                              Mins[0x3];                                        		// 0x000018 (0x000C)              
	float                                              Ranges[0x3];                                      		// 0x000024 (0x000C)              
};
//0x000028
//AnimSetMeshLinkup[0x1D09EC70]
struct FAnimSetMeshLinkup
{
	struct FGuid                                       SkelMeshLinkupGUID;                               		// 0x000000 (0x0010)              
	TArray<int>                                        BoneToTrackTable;                                 		// 0x000010 (0x000C)              
	TArray<unsigned char>                              BoneUseAnimTranslation;                           		// 0x00001C (0x000C)              
};
//0x000034
//Listener[0x1D09EC08]
struct FListener
{
	class APortalVolume*                               PortalVolume;                                     		// 0x000000 (0x0004)              
	FVector3                                           Location;                                         		// 0x000004 (0x000C)              
	FVector3                                           Up;                                               		// 0x000010 (0x000C)              
	FVector3                                           Right;                                            		// 0x00001C (0x000C)              
	FVector3                                           Front;                                            		// 0x000028 (0x000C)              
};
//0x000008
//ModeSettings[0x1D09EBA0]
struct FModeSettings
{
	unsigned char                                      Mode;                                             		// 0x000000 (0x0001)              PROPERTY: ESoundMode
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	float                                              FadeTime;                                         		// 0x000004 (0x0004)              
};
//0x000014
//SoundGroupProperties[0x1D09EB38]
struct FSoundGroupProperties
{
	float                                              Volume;                                           		// 0x000000 (0x0004)              
	float                                              Pitch;                                            		// 0x000004 (0x0004)              
	float                                              VoiceCenterChannelVolume;                         		// 0x000008 (0x0004)              
	float                                              VoiceRadioVolume;                                 		// 0x00000C (0x0004)              
	unsigned long                                      bApplyEffects : 1;                                		// 0x000010 (0x0004) [0x00000001] 
	unsigned long                                      bAlwaysPlay : 1;                                  		// 0x000010 (0x0004) [0x00000002] 
	unsigned long                                      bIsUISound : 1;                                   		// 0x000010 (0x0004) [0x00000004] 
	unsigned long                                      bIsMusic : 1;                                     		// 0x000010 (0x0004) [0x00000008] 
	unsigned long                                      bNoReverb : 1;                                    		// 0x000010 (0x0004) [0x00000010] 
};
//0x000028
//SoundGroup[0x1D09EAD0]
struct FSoundGroup
{
	struct FSoundGroupProperties                       Properties;                                       		// 0x000000 (0x0014)              
	struct FName                                       GroupName;                                        		// 0x000014 (0x0008)              
	TArray<struct FName>                               ChildGroupNames;                                  		// 0x00001C (0x000C)              
};
//0x000010
//SoundGroupAdjuster[0x1D09EA68]
struct FSoundGroupAdjuster
{
	struct FName                                       GroupName;                                        		// 0x000000 (0x0008)              
	float                                              VolumeAdjuster;                                   		// 0x000008 (0x0004)              
	float                                              PitchAdjuster;                                    		// 0x00000C (0x0004)              
};
//0x00000C
//SoundGroupEffect[0x1D09EA00]
struct FSoundGroupEffect
{
	TArray<struct FSoundGroupAdjuster>                 GroupEffect;                                      		// 0x000000 (0x000C)              
};
//0x000008
//StProxyReferencer[0x1D09E998]
struct FStProxyReferencer
{
	class AActor*                                      pActor;                                           		// 0x000000 (0x0004)              
	class UField*                                      pProp;                                            		// 0x000004 (0x0004)              
};
//0x000014
//CanvasIcon[0x1D09E930]
struct FCanvasIcon
{
	class UTexture2D*                                  Texture;                                          		// 0x000000 (0x0004)              
	float                                              U;                                                		// 0x000004 (0x0004)              
	float                                              V;                                                		// 0x000008 (0x0004)              
	float                                              UL;                                               		// 0x00000C (0x0004)              
	float                                              VL;                                               		// 0x000010 (0x0004)              
};
//0x000024
//DepthFieldGlowInfo[0x1D09E8C8]
struct FDepthFieldGlowInfo
{
	unsigned long                                      bEnableGlow : 1;                                  		// 0x000000 (0x0004) [0x00000001] 
	struct FLinearColor                                GlowColor;                                        		// 0x000004 (0x0010)              
	FVector2                                           GlowOuterRadius;                                  		// 0x000014 (0x0008)              
	FVector2                                           GlowInnerRadius;                                  		// 0x00001C (0x0008)              
};
//0x000028
//FontRenderInfo[0x1D09E860]
struct FFontRenderInfo
{
	unsigned long                                      bClipText : 1;                                    		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bEnableShadow : 1;                                		// 0x000000 (0x0004) [0x00000002] 
	struct FDepthFieldGlowInfo                         GlowInfo;                                         		// 0x000004 (0x0024)              
};
//0x000030
//CanvasUVTri[0x1D09E7F8]
struct FCanvasUVTri
{
	FVector2                                           V0_Pos;                                           		// 0x000000 (0x0008)              
	FVector2                                           V0_UV;                                            		// 0x000008 (0x0008)              
	FVector2                                           V1_Pos;                                           		// 0x000010 (0x0008)              
	FVector2                                           V1_UV;                                            		// 0x000018 (0x0008)              
	FVector2                                           V2_Pos;                                           		// 0x000020 (0x0008)              
	FVector2                                           V2_UV;                                            		// 0x000028 (0x0008)              
};
//0x000028
//TextSizingParameters[0x1D09E790]
struct FTextSizingParameters
{
	float                                              DrawX;                                            		// 0x000000 (0x0004)              
	float                                              DrawY;                                            		// 0x000004 (0x0004)              
	float                                              DrawXL;                                           		// 0x000008 (0x0004)              
	float                                              DrawYL;                                           		// 0x00000C (0x0004)              
	FVector2                                           Scaling;                                          		// 0x000010 (0x0008)              
	class UFont*                                       DrawFont;                                         		// 0x000018 (0x0004)              
	FVector2                                           SpacingAdjust;                                    		// 0x00001C (0x0008)              
	float                                              ViewportHeight;                                   		// 0x000024 (0x0004)              
};
//0x000014
//WrappedStringElement[0x1D09E728]
struct FWrappedStringElement
{
	struct FString                                     Value;                                            		// 0x000000 (0x000C)              
	FVector2                                           LineExtent;                                       		// 0x00000C (0x0008)              
};
//0x000024
//tPageItem[0x1D09E6C0]
struct FtPageItem
{
	struct FString                                     m_ItemName;                                       		// 0x000000 (0x000C)              
	struct FString                                     m_UsageString;                                    		// 0x00000C (0x000C)              
	struct FString                                     m_HelpString;                                     		// 0x000018 (0x000C)              
};
//0x000144
//cCubicBezierCurveStruct[0x1D09E658]
struct FcCubicBezierCurveStruct
{
	FVector3                                           m_aPoints[0x14];                                  		// 0x000000 (0x00F0)              
	float                                              m_aSegmentLengths[0x13];                          		// 0x0000F0 (0x004C)              
	int                                                m_nNumPoints;                                     		// 0x00013C (0x0004)              
	float                                              m_fLength;                                        		// 0x000140 (0x0004)              
};
//0x000020
//SeqOpInputLink[0x1D09E5F0]
struct FSeqOpInputLink
{
	struct FString                                     LinkDesc;                                         		// 0x000000 (0x000C)              
	unsigned long                                      bHasImpulse : 1;                                  		// 0x00000C (0x0004) [0x00000001] 
	unsigned long                                      bDisabled : 1;                                    		// 0x00000C (0x0004) [0x00000002] 
	unsigned long                                      bDisabledPIE : 1;                                 		// 0x00000C (0x0004) [0x00000004] 
	class USequenceOp*                                 LinkedOp;                                         		// 0x000010 (0x0004)              
	int                                                DrawY;                                            		// 0x000014 (0x0004)              
	unsigned long                                      bHidden : 1;                                      		// 0x000018 (0x0004) [0x00000001] 
	float                                              ActivateDelay;                                    		// 0x00001C (0x0004)              
};
//0x000008
//SeqOpOutputInputLink[0x1D09E588]
struct FSeqOpOutputInputLink
{
	class USequenceOp*                                 LinkedOp;                                         		// 0x000000 (0x0004)              
	int                                                InputLinkIdx;                                     		// 0x000004 (0x0004)              
};
//0x00002C
//SeqOpOutputLink[0x1D09E520]
struct FSeqOpOutputLink
{
	TArray<struct FSeqOpOutputInputLink>               Links;                                            		// 0x000000 (0x000C)              
	struct FString                                     LinkDesc;                                         		// 0x00000C (0x000C)              
	unsigned long                                      bHasImpulse : 1;                                  		// 0x000018 (0x0004) [0x00000001] 
	unsigned long                                      bDisabled : 1;                                    		// 0x000018 (0x0004) [0x00000002] 
	unsigned long                                      bDisabledPIE : 1;                                 		// 0x000018 (0x0004) [0x00000004] 
	class USequenceOp*                                 LinkedOp;                                         		// 0x00001C (0x0004)              
	float                                              ActivateDelay;                                    		// 0x000020 (0x0004)              
	int                                                DrawY;                                            		// 0x000024 (0x0004)              
	unsigned long                                      bHidden : 1;                                      		// 0x000028 (0x0004) [0x00000001] 
};
//0x000040
//SeqVarLink[0x1D09E4B8]
struct FSeqVarLink
{
	class UClass*                                      ExpectedType;                                     		// 0x000000 (0x0004)              
	TArray<class USequenceVariable*>                   LinkedVariables;                                  		// 0x000004 (0x000C)              
	struct FString                                     LinkDesc;                                         		// 0x000010 (0x000C)              
	struct FName                                       LinkVar;                                          		// 0x00001C (0x0008)              
	struct FName                                       PropertyName;                                     		// 0x000024 (0x0008)              
	unsigned long                                      bWriteable : 1;                                   		// 0x00002C (0x0004) [0x00000001] 
	unsigned long                                      bHidden : 1;                                      		// 0x00002C (0x0004) [0x00000002] 
	int                                                MinVars;                                          		// 0x000030 (0x0004)              
	int                                                MaxVars;                                          		// 0x000034 (0x0004)              
	int                                                DrawX;                                            		// 0x000038 (0x0004)              
	class UField*                                      CachedProperty;                                   		// 0x00003C (0x0004)              
};
//0x000024
//SeqEventLink[0x1D09E450]
struct FSeqEventLink
{
	class UClass*                                      ExpectedType;                                     		// 0x000000 (0x0004)              
	TArray<class USequenceEvent*>                      LinkedEvents;                                     		// 0x000004 (0x000C)              
	struct FString                                     LinkDesc;                                         		// 0x000010 (0x000C)              
	int                                                DrawX;                                            		// 0x00001C (0x0004)              
	unsigned long                                      bHidden : 1;                                      		// 0x000020 (0x0004) [0x00000001] 
};
//0x000010
//ActivateOp[0x1D09E3E8]
struct FActivateOp
{
	class USequenceOp*                                 ActivatorOp;                                      		// 0x000000 (0x0004)              
	class USequenceOp*                                 Op;                                               		// 0x000004 (0x0004)              
	int                                                InputIdx;                                         		// 0x000008 (0x0004)              
	float                                              RemainingDelay;                                   		// 0x00000C (0x0004)              
};
//0x000018
//SavedTransform[0x1D09E380]
struct FSavedTransform
{
	FVector3                                           Location;                                         		// 0x000000 (0x000C)              
	FRotator                                           Rotation;                                         		// 0x00000C (0x000C)              
};
//0x00000C
//LevelStreamingNameCombo[0x1D09E318]
struct FLevelStreamingNameCombo
{
	class ULevelStreaming*                             Level;                                            		// 0x000000 (0x0004)              
	struct FName                                       LevelName;                                        		// 0x000004 (0x0008)              
};
//0x000008
//SwitchRange[0x1D09E2B0]
struct FSwitchRange
{
	int                                                Min;                                              		// 0x000000 (0x0004)              
	int                                                Max;                                              		// 0x000004 (0x0004)              
};
//0x000000 (0x000010 - 0x000010)
//WIDGET_ID[0x1D09E248]
struct FWIDGET_ID : FGuid
{
};
//0x000000 (0x000010 - 0x000010)
//STYLE_ID[0x1D09E1E0]
struct FSTYLE_ID : FGuid
{
};
//0x000014
//UIRangeData[0x1D09E178]
struct FUIRangeData
{
	float                                              CurrentValue;                                     		// 0x000000 (0x0004)              
	float                                              MinValue;                                         		// 0x000004 (0x0004)              
	float                                              MaxValue;                                         		// 0x000008 (0x0004)              
	float                                              NudgeValue;                                       		// 0x00000C (0x0004)              
	unsigned long                                      bIntRange : 1;                                    		// 0x000010 (0x0004) [0x00000001] 
};
//0x000040
//UIProviderScriptFieldValue[0x1D09E110]
struct FUIProviderScriptFieldValue
{
	struct FName                                       PropertyTag;                                      		// 0x000000 (0x0008)              
	unsigned char                                      PropertyType;                                     		// 0x000008 (0x0001)              PROPERTY: EUIDataProviderFieldType
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	struct FString                                     StringValue;                                      		// 0x00000C (0x000C)              
	class USurface*                                    ImageValue;                                       		// 0x000018 (0x0004)              
	TArray<int>                                        ArrayValue;                                       		// 0x00001C (0x000C)              
	struct FUIRangeData                                RangeValue;                                       		// 0x000028 (0x0014)              
	class UObject*                                     ObjectValue;                                      		// 0x00003C (0x0004)              
};
//0x000004 (0x000044 - 0x000040)
//UIProviderFieldValue[0x1D09E0A8]
struct FUIProviderFieldValue : FUIProviderScriptFieldValue
{
	DWORD                                              CustomStringNode;                                 		// 0x000040 (0x0004)              
};
//0x000020
//UIStyleReference[0x1D09E040]
struct FUIStyleReference
{
	struct FName                                       DefaultStyleTag;                                  		// 0x000000 (0x0008)              
	class UClass*                                      RequiredStyleClass;                               		// 0x000008 (0x0004)              
	struct FSTYLE_ID                                   AssignedStyleID;                                  		// 0x00000C (0x0010)              
	class UUIStyle*                                    ResolvedStyle;                                    		// 0x00001C (0x0004)              
};
//0x000006
//UIScreenValue[0x1D09DFD8]
struct FUIScreenValue
{
	float                                              Value;                                            		// 0x000000 (0x0004)              
	unsigned char                                      ScaleType;                                        		// 0x000004 (0x0001)              PROPERTY: EPositionEvalType
	unsigned char                                      Orientation;                                      		// 0x000005 (0x0001)              PROPERTY: EUIOrientation
};
//0x000006
//UIScreenValue_Extent[0x1D09DF70]
struct FUIScreenValue_Extent
{
	float                                              Value;                                            		// 0x000000 (0x0004)              
	unsigned char                                      ScaleType;                                        		// 0x000004 (0x0001)              PROPERTY: EUIExtentEvalType
	unsigned char                                      Orientation;                                      		// 0x000005 (0x0001)              PROPERTY: EUIOrientation
};
//0x00000A
//UIScreenValue_Position[0x1D09DF08]
struct FUIScreenValue_Position
{
	float                                              Value[0x2];                                       		// 0x000000 (0x0008)              
	unsigned char                                      ScaleType[0x2];                                   		// 0x000008 (0x0002)              PROPERTY: EPositionEvalType
};
//0x000019
//UIScreenValue_Bounds[0x1D09DEA0]
struct FUIScreenValue_Bounds
{
	float                                              Value[0x4];                                       		// 0x000000 (0x0010)              
	unsigned char                                      ScaleType[0x4];                                   		// 0x000010 (0x0004)              PROPERTY: EPositionEvalType
	unsigned char                                      bInvalidated[0x4];                                		// 0x000014 (0x0004)              PROPERTY: 
	unsigned char                                      AspectRatioMode;                                  		// 0x000018 (0x0001)              PROPERTY: EUIAspectRatioConstraint
};
//0x000006 (0x000010 - 0x00000A)
//UIAnchorPosition[0x1D09DE38]
struct FUIAnchorPosition : FUIScreenValue_Position
{
	unsigned char                                      _0x00000A[0x2];                                   		// 0x00000A (0x0002) MISSED OFFSET
	float                                              ZDepth;                                           		// 0x00000C (0x0004)              
};
//0x000002 (0x00000C - 0x00000A)
//ScreenPositionRange[0x1D09DDD0]
struct FScreenPositionRange : FUIScreenValue_Position
{
	unsigned char                                      _0x00000A[0x2];                                   		// 0x00000A (0x0002) MISSED OFFSET
};
//0x000014
//UIScreenValue_DockPadding[0x1D09DD68]
struct FUIScreenValue_DockPadding
{
	float                                              PaddingValue[0x4];                                		// 0x000000 (0x0010)              
	unsigned char                                      PaddingScaleType[0x4];                            		// 0x000010 (0x0004)              PROPERTY: EUIDockPaddingEvalType
};
//0x00000A
//UIScreenValue_AutoSizeRegion[0x1D09DD00]
struct FUIScreenValue_AutoSizeRegion
{
	float                                              Value[0x2];                                       		// 0x000000 (0x0008)              
	unsigned char                                      EvalType[0x2];                                    		// 0x000008 (0x0002)              PROPERTY: EUIExtentEvalType
};
//0x000002 (0x00000C - 0x00000A)
//AutoSizePadding[0x1D09DC98]
struct FAutoSizePadding : FUIScreenValue_AutoSizeRegion
{
	unsigned char                                      _0x00000A[0x2];                                   		// 0x00000A (0x0002) MISSED OFFSET
};
//0x00001C
//AutoSizeData[0x1D09DC30]
struct FAutoSizeData
{
	struct FUIScreenValue_AutoSizeRegion               Extent;                                           		// 0x000000 (0x000C)              
	struct FAutoSizePadding                            Padding;                                          		// 0x00000C (0x000C)              
	unsigned long                                      bAutoSizeEnabled : 1;                             		// 0x000018 (0x0004) [0x00000001] 
};
//0x000018
//UIRenderingSubregion[0x1D09DBC8]
struct FUIRenderingSubregion
{
	struct FUIScreenValue_Extent                       ClampRegionSize;                                  		// 0x000000 (0x0008)              
	struct FUIScreenValue_Extent                       ClampRegionOffset;                                		// 0x000008 (0x0008)              
	unsigned char                                      ClampRegionAlignment;                             		// 0x000010 (0x0001)              PROPERTY: EUIAlignment
	unsigned char                                      _0x000011[0x3];                                   		// 0x000011 (0x0003) MISSED OFFSET
	unsigned long                                      bSubregionEnabled : 1;                            		// 0x000014 (0x0004) [0x00000001] 
};
//0x000014
//InputEventSubscription[0x1D09DB60]
struct FInputEventSubscription
{
	struct FName                                       KeyName;                                          		// 0x000000 (0x0008)              
	TArray<class UUIScreenObject*>                     Subscribers;                                      		// 0x000008 (0x000C)              
};
//0x000008
//DefaultEventSpecification[0x1D09DAF8]
struct FDefaultEventSpecification
{
	class UUIEvent*                                    EventTemplate;                                    		// 0x000000 (0x0004)              
	class UClass*                                      EventState;                                       		// 0x000004 (0x0004)              
};
//0x000024
//InputKeyAction[0x1D09DA90]
struct FInputKeyAction
{
	struct FName                                       InputKeyName;                                     		// 0x000000 (0x0008)              
	unsigned char                                      InputKeyState;                                    		// 0x000008 (0x0001)              PROPERTY: EInputEvent
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	TArray<struct FSeqOpOutputInputLink>               TriggeredOps;                                     		// 0x00000C (0x000C)              
	TArray<class USequenceOp*>                         ActionsToExecute;                                 		// 0x000018 (0x000C)              
};
//0x000004 (0x000028 - 0x000024)
//StateInputKeyAction[0x1D09DA28]
struct FStateInputKeyAction : FInputKeyAction
{
	class UClass*                                      Scope;                                            		// 0x000024 (0x0004)              
};
//0x000008
//PlayerInteractionData[0x1D09D9C0]
struct FPlayerInteractionData
{
	class UUIObject*                                   FocusedControl;                                   		// 0x000000 (0x0004)              
	class UUIObject*                                   LastFocusedControl;                               		// 0x000004 (0x0004)              
};
//0x000014
//UIFocusPropagationData[0x1D09D958]
struct FUIFocusPropagationData
{
	class UUIObject*                                   FirstFocusTarget;                                 		// 0x000000 (0x0004)              
	class UUIObject*                                   LastFocusTarget;                                  		// 0x000004 (0x0004)              
	class UUIObject*                                   NextFocusTarget;                                  		// 0x000008 (0x0004)              
	class UUIObject*                                   PrevFocusTarget;                                  		// 0x00000C (0x0004)              
	unsigned long                                      bPendingReceiveFocus : 1;                         		// 0x000010 (0x0004) [0x00000001] 
};
//0x000024
//UINavigationData[0x1D09D8F0]
struct FUINavigationData
{
	class UUIObject*                                   NavigationTarget[0x4];                            		// 0x000000 (0x0010)              
	class UUIObject*                                   ForcedNavigationTarget[0x4];                      		// 0x000010 (0x0010)              
	unsigned char                                      bNullOverride[0x4];                               		// 0x000020 (0x0004)              PROPERTY: 
};
//0x000038
//UIDockingSet[0x1D09D888]
struct FUIDockingSet
{
	class UUIObject*                                   OwnerWidget;                                      		// 0x000000 (0x0004)              
	class UUIObject*                                   TargetWidget[0x4];                                		// 0x000004 (0x0010)              
	struct FUIScreenValue_DockPadding                  DockPadding;                                      		// 0x000014 (0x0014)              
	unsigned long                                      bLockWidthWhenDocked : 1;                         		// 0x000028 (0x0004) [0x00000001] 
	unsigned long                                      bLockHeightWhenDocked : 1;                        		// 0x000028 (0x0004) [0x00000002] 
	unsigned char                                      TargetFace[0x4];                                  		// 0x00002C (0x0004)              PROPERTY: EUIWidgetFace
	unsigned char                                      bResolved[0x4];                                   		// 0x000030 (0x0004)              PROPERTY: 
	unsigned char                                      bLinking[0x4];                                    		// 0x000034 (0x0004)              PROPERTY: 
};
//0x000005
//UIDockingNode[0x1D09D820]
struct FUIDockingNode
{
	class UUIObject*                                   Widget;                                           		// 0x000000 (0x0004)              
	unsigned char                                      Face;                                             		// 0x000004 (0x0001)              PROPERTY: EUIWidgetFace
};
//0x00006D
//UIRotation[0x1D09D7B8]
struct FUIRotation
{
	FRotator                                           Rotation;                                         		// 0x000000 (0x000C)              
	unsigned char                                      _0x00000C[0x4];                                   		// 0x00000C (0x0004) MISSED OFFSET
	FMatrix                                            TransformMatrix;                                  		// 0x000010 (0x0040)              
	struct FUIAnchorPosition                           AnchorPosition;                                   		// 0x000050 (0x0010)              
	struct FUIScreenValue_Position                     Anchor;                                           		// 0x000060 (0x000C)              
	unsigned char                                      AnchorType;                                       		// 0x00006C (0x0001)              PROPERTY: ERotationAnchor
};
//0x000030
//UIDataStoreBinding[0x1D09D750]
struct FUIDataStoreBinding
{
	class UUIDataStoreSubscriber*                      Subscriber;                                       		// 0x000000 (0x0004)              
	unsigned char                                      RequiredFieldType;                                		// 0x000008 (0x0001)              PROPERTY: EUIDataProviderFieldType
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	struct FString                                     MarkupString;                                     		// 0x00000C (0x000C)              
	int                                                BindingIndex;                                     		// 0x000018 (0x0004)              
	struct FName                                       DataStoreName;                                    		// 0x00001C (0x0008)              
	struct FName                                       DataStoreField;                                   		// 0x000024 (0x0008)              
	class UUIDataStore*                                ResolvedDataStore;                                		// 0x00002C (0x0004)              
};
//0x000010
//UIStyleSubscriberReference[0x1D09D6E8]
struct FUIStyleSubscriberReference
{
	struct FName                                       SubscriberId;                                     		// 0x000000 (0x0008)              
	class UUIStyleResolver*                            Subscriber;                                       		// 0x000008 (0x0004)              
};
//0x00000C
//StyleReferenceId[0x1D09D680]
struct FStyleReferenceId
{
	struct FName                                       StyleReferenceTag;                                		// 0x000000 (0x0008)              
	class UField*                                      StyleProperty;                                    		// 0x000008 (0x0004)              
};
//0x000004
//UITextAttributes[0x1D09D618]
struct FUITextAttributes
{
	unsigned long                                      Bold : 1;                                         		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      Italic : 1;                                       		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      Underline : 1;                                    		// 0x000000 (0x0004) [0x00000004] 
	unsigned long                                      Shadow : 1;                                       		// 0x000000 (0x0004) [0x00000008] 
	unsigned long                                      Strikethrough : 1;                                		// 0x000000 (0x0004) [0x00000010] 
	unsigned long                                      AllCaps : 1;                                      		// 0x000000 (0x0004) [0x00000020] 
};
//0x00000E
//UIImageAdjustmentData[0x1D09D5B0]
struct FUIImageAdjustmentData
{
	struct FScreenPositionRange                        ProtectedRegion;                                  		// 0x000000 (0x000C)              
	unsigned char                                      AdjustmentType;                                   		// 0x00000C (0x0001)              PROPERTY: EMaterialAdjustmentType
	unsigned char                                      Alignment;                                        		// 0x00000D (0x0001)              PROPERTY: EUIAlignment
};
//0x000010
//TextureCoordinates[0x1D09D548]
struct FTextureCoordinates
{
	float                                              U;                                                		// 0x000000 (0x0004)              
	float                                              V;                                                		// 0x000004 (0x0004)              
	float                                              UL;                                               		// 0x000008 (0x0004)              
	float                                              VL;                                               		// 0x00000C (0x0004)              
};
//0x00001C
//UIStringCaretParameters[0x1D09D4E0]
struct FUIStringCaretParameters
{
	unsigned long                                      bDisplayCaret : 1;                                		// 0x000000 (0x0004) [0x00000001] 
	unsigned char                                      CaretType;                                        		// 0x000004 (0x0001)              PROPERTY: EUIDefaultPenColor
	unsigned char                                      _0x000005[0x3];                                   		// 0x000005 (0x0003) MISSED OFFSET
	float                                              CaretWidth;                                       		// 0x000008 (0x0004)              
	struct FName                                       CaretStyle;                                       		// 0x00000C (0x0008)              
	int                                                CaretPosition;                                    		// 0x000014 (0x0004)              
	class UMaterialInterface*                          CaretMaterial;                                    		// 0x000018 (0x0004)              
};
//0x000048
//RenderParameters[0x1D09D478]
struct FRenderParameters
{
	float                                              DrawX;                                            		// 0x000000 (0x0004)              
	float                                              DrawY;                                            		// 0x000004 (0x0004)              
	float                                              DrawXL;                                           		// 0x000008 (0x0004)              
	float                                              DrawYL;                                           		// 0x00000C (0x0004)              
	FVector2                                           Scaling;                                          		// 0x000010 (0x0008)              
	class UFont*                                       DrawFont;                                         		// 0x000018 (0x0004)              
	unsigned long                                      MonospaceFont : 1;                                		// 0x00001C (0x0004) [0x00000001] 
	unsigned char                                      TextAlignment[0x2];                               		// 0x000020 (0x0002)              PROPERTY: EUIAlignment
	unsigned char                                      _0x000022[0x2];                                   		// 0x000022 (0x0002) MISSED OFFSET
	FVector2                                           ImageExtent;                                      		// 0x000024 (0x0008)              
	struct FTextureCoordinates                         DrawCoords;                                       		// 0x00002C (0x0010)              
	FVector2                                           SpacingAdjust;                                    		// 0x00003C (0x0008)              
	float                                              ViewportHeight;                                   		// 0x000044 (0x0004)              
};
//0x000005
//TextAutoScaleValue[0x1D09D410]
struct FTextAutoScaleValue
{
	float                                              MinScale;                                         		// 0x000000 (0x0004)              
	unsigned char                                      AutoScaleMode;                                    		// 0x000004 (0x0001)              PROPERTY: ETextAutoScaleMode
};
//0x000020
//UIStyleOverride[0x1D09D3A8]
struct FUIStyleOverride
{
	struct FLinearColor                                DrawColor;                                        		// 0x000000 (0x0010)              
	float                                              Opacity;                                          		// 0x000010 (0x0004)              
	float                                              Padding[0x2];                                     		// 0x000014 (0x0008)              
	unsigned long                                      bOverrideDrawColor : 1;                           		// 0x00001C (0x0004) [0x00000001] 
	unsigned long                                      bOverrideOpacity : 1;                             		// 0x00001C (0x0004) [0x00000002] 
	unsigned long                                      bOverridePadding : 1;                             		// 0x00001C (0x0004) [0x00000004] 
};
//0x00002C (0x00004C - 0x000020)
//UITextStyleOverride[0x1D09D340]
struct FUITextStyleOverride : FUIStyleOverride
{
	class UFont*                                       DrawFont;                                         		// 0x000020 (0x0004)              
	unsigned long                                      MonospaceFont : 1;                                		// 0x000024 (0x0004) [0x00000001] 
	struct FUITextAttributes                           TextAttributes;                                   		// 0x000028 (0x0004)              
	unsigned char                                      TextAlignment[0x2];                               		// 0x00002C (0x0002)              PROPERTY: EUIAlignment
	unsigned char                                      ClipMode;                                         		// 0x00002E (0x0001)              PROPERTY: ETextClipMode
	unsigned char                                      ClipAlignment;                                    		// 0x00002F (0x0001)              PROPERTY: EUIAlignment
	struct FTextAutoScaleValue                         AutoScaling;                                      		// 0x000030 (0x0008)              
	float                                              DrawScale[0x2];                                   		// 0x000038 (0x0008)              
	float                                              SpacingAdjust[0x2];                               		// 0x000040 (0x0008)              
	unsigned long                                      bOverrideDrawFont : 1;                            		// 0x000048 (0x0004) [0x00000001] 
	unsigned long                                      bOverrideAttributes : 1;                          		// 0x000048 (0x0004) [0x00000002] 
	unsigned long                                      bOverrideAlignment : 1;                           		// 0x000048 (0x0004) [0x00000004] 
	unsigned long                                      bOverrideClipMode : 1;                            		// 0x000048 (0x0004) [0x00000008] 
	unsigned long                                      bOverrideClipAlignment : 1;                       		// 0x000048 (0x0004) [0x00000010] 
	unsigned long                                      bOverrideAutoScale : 1;                           		// 0x000048 (0x0004) [0x00000020] 
	unsigned long                                      bOverrideScale : 1;                               		// 0x000048 (0x0004) [0x00000040] 
	unsigned long                                      bOverrideSpacingAdjust : 1;                       		// 0x000048 (0x0004) [0x00000080] 
};
//0x000034 (0x000054 - 0x000020)
//UIImageStyleOverride[0x1D09D2D8]
struct FUIImageStyleOverride : FUIStyleOverride
{
	struct FTextureCoordinates                         Coordinates;                                      		// 0x000020 (0x0010)              
	struct FUIImageAdjustmentData                      Formatting[0x2];                                  		// 0x000030 (0x0020)              
	unsigned long                                      bOverrideCoordinates : 1;                         		// 0x000050 (0x0004) [0x00000001] 
	unsigned long                                      bOverrideFormatting : 1;                          		// 0x000050 (0x0004) [0x00000002] 
};
//0x000090
//UICombinedStyleData[0x1D09D270]
struct FUICombinedStyleData
{
	struct FLinearColor                                TextColor;                                        		// 0x000000 (0x0010)              
	struct FLinearColor                                ImageColor;                                       		// 0x000010 (0x0010)              
	float                                              TextPadding[0x2];                                 		// 0x000020 (0x0008)              
	float                                              ImagePadding[0x2];                                		// 0x000028 (0x0008)              
	class UFont*                                       DrawFont;                                         		// 0x000030 (0x0004)              
	unsigned long                                      MonospaceFont : 1;                                		// 0x000034 (0x0004) [0x00000001] 
	class USurface*                                    FallbackImage;                                    		// 0x000038 (0x0004)              
	struct FTextureCoordinates                         AtlasCoords;                                      		// 0x00003C (0x0010)              
	struct FUITextAttributes                           TextAttributes;                                   		// 0x00004C (0x0004)              
	unsigned char                                      TextAlignment[0x2];                               		// 0x000050 (0x0002)              PROPERTY: EUIAlignment
	unsigned char                                      TextClipMode;                                     		// 0x000052 (0x0001)              PROPERTY: ETextClipMode
	unsigned char                                      TextClipAlignment;                                		// 0x000053 (0x0001)              PROPERTY: EUIAlignment
	struct FUIImageAdjustmentData                      AdjustmentType[0x2];                              		// 0x000054 (0x0020)              
	struct FTextAutoScaleValue                         TextAutoScaling;                                  		// 0x000074 (0x0008)              
	FVector2                                           TextScale;                                        		// 0x00007C (0x0008)              
	FVector2                                           TextSpacingAdjust;                                		// 0x000084 (0x0008)              
	unsigned long                                      bInitialized : 1;                                 		// 0x00008C (0x0004) [0x00000001] 
};
//0x000130
//UIStringNodeModifier[0x1D09D208]
struct FUIStringNodeModifier
{
	struct FUICombinedStyleData                        CustomStyleData;                                  		// 0x000000 (0x0090)              
	struct FUICombinedStyleData                        BaseStyleData;                                    		// 0x000090 (0x0090)              
	TArray<struct FModifierData>                       ModifierStack;                                    		// 0x000120 (0x000C)              
	class UUIState*                                    CurrentMenuState;                                 		// 0x00012C (0x0004)              
};
//0x000010
//ModifierData[0x1D09D1A0]
struct FModifierData
{
	class UUIStyle_Data*                               Style;                                            		// 0x000000 (0x0004)              
	TArray<class UFont*>                               InlineFontStack;                                  		// 0x000004 (0x000C)              
};
//0x00002C
//UIStringNode[0x1D09D138]
struct FUIStringNode
{
	DWORD                                              VfTable;                                          		// 0x000000 (0x0004)              
	class UUIDataStore*                                NodeDataStore;                                    		// 0x000004 (0x0004)              
	DWORD                                              ParentNode;                                       		// 0x000008 (0x0004)              
	struct FString                                     SourceText;                                       		// 0x00000C (0x000C)              
	FVector2                                           Extent;                                           		// 0x000018 (0x0008)              
	FVector2                                           Scaling;                                          		// 0x000020 (0x0008)              
	unsigned long                                      bForceWrap : 1;                                   		// 0x000028 (0x0004) [0x00000001] 
};
//0x00009C (0x0000C8 - 0x00002C)
//UIStringNode_Text[0x1D09D0D0]
struct FUIStringNode_Text : FUIStringNode
{
	struct FString                                     RenderedText;                                     		// 0x00002C (0x000C)              
	struct FUICombinedStyleData                        NodeStyleParameters;                              		// 0x000038 (0x0090)              
};
//0x00001C (0x000048 - 0x00002C)
//UIStringNode_Image[0x1D09D068]
struct FUIStringNode_Image : FUIStringNode
{
	FVector2                                           ForcedExtent;                                     		// 0x00002C (0x0008)              
	struct FTextureCoordinates                         TexCoords;                                        		// 0x000034 (0x0010)              
	class UUITexture*                                  RenderedImage;                                    		// 0x000044 (0x0004)              
};
//0x000000 (0x00002C - 0x00002C)
//UIStringNode_NestedMarkupParent[0x1D09D000]
struct FUIStringNode_NestedMarkupParent : FUIStringNode
{
};
//0x000000 (0x0000C8 - 0x0000C8)
//UIStringNode_FormattedNodeParent[0x1D09CF98]
struct FUIStringNode_FormattedNodeParent : FUIStringNode_Text
{
};
//0x000014
//WrappedStringElement[0x1D09CF30]
struct FWrappedStringElement
{
	struct FString                                     Value;                                            		// 0x000000 (0x000C)              
	FVector2                                           LineExtent;                                       		// 0x00000C (0x0008)              
};
//0x00000C
//UIMouseCursor[0x1D09CEC8]
struct FUIMouseCursor
{
	struct FName                                       CursorStyle;                                      		// 0x000000 (0x0008)              
	class UUITexture*                                  Cursor;                                           		// 0x000008 (0x0004)              
};
//0x000020
//InputEventParameters[0x1D09CE60]
struct FInputEventParameters
{
	int                                                PlayerIndex;                                      		// 0x000000 (0x0004)              
	int                                                ControllerId;                                     		// 0x000004 (0x0004)              
	struct FName                                       InputKeyName;                                     		// 0x000008 (0x0008)              
	unsigned char                                      EventType;                                        		// 0x000010 (0x0001)              PROPERTY: EInputEvent
	unsigned char                                      _0x000011[0x3];                                   		// 0x000011 (0x0003) MISSED OFFSET
	float                                              InputDelta;                                       		// 0x000014 (0x0004)              
	float                                              DeltaTime;                                        		// 0x000018 (0x0004)              
	unsigned long                                      bAltPressed : 1;                                  		// 0x00001C (0x0004) [0x00000001] 
	unsigned long                                      bCtrlPressed : 1;                                 		// 0x00001C (0x0004) [0x00000002] 
	unsigned long                                      bShiftPressed : 1;                                		// 0x00001C (0x0004) [0x00000004] 
};
//0x000008 (0x000028 - 0x000020)
//SubscribedInputEventParameters[0x1D09CDF8]
struct FSubscribedInputEventParameters : FInputEventParameters
{
	struct FName                                       InputAliasName;                                   		// 0x000020 (0x0008)              
};
//0x000024
//UIAxisEmulationDefinition[0x1D09CD90]
struct FUIAxisEmulationDefinition
{
	struct FName                                       AxisInputKey;                                     		// 0x000000 (0x0008)              
	struct FName                                       AdjacentAxisInputKey;                             		// 0x000008 (0x0008)              
	unsigned long                                      bEmulateButtonPress : 1;                          		// 0x000010 (0x0004) [0x00000001] 
	struct FName                                       InputKeyToEmulate[0x2];                           		// 0x000014 (0x0010)              
};
//0x000009
//RawInputKeyEventData[0x1D09CD28]
struct FRawInputKeyEventData
{
	struct FName                                       InputKeyName;                                     		// 0x000000 (0x0008)              
	unsigned char                                      ModifierKeyFlags;                                 		// 0x000008 (0x0001)              PROPERTY: 
};
//0x000014
//UIInputActionAlias[0x1D09CCC0]
struct FUIInputActionAlias
{
	struct FName                                       InputAliasName;                                   		// 0x000000 (0x0008)              
	TArray<struct FRawInputKeyEventData>               LinkedInputKeys;                                  		// 0x000008 (0x000C)              
};
//0x00000C
//UIInputAliasValue[0x1D09CC58]
struct FUIInputAliasValue
{
	unsigned char                                      ModifierFlagMask;                                 		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FName                                       InputAliasName;                                   		// 0x000004 (0x0008)              
};
//0x00003C
//UIInputAliasMap[0x1D09CBF0]
struct FUIInputAliasMap
{
	struct FMultiMap_Mirror                            InputAliasLookupTable;                            		// 0x000000 (0x003C)              
};
//0x00001C
//UIInputAliasStateMap[0x1D09CB88]
struct FUIInputAliasStateMap
{
	struct FString                                     StateClassName;                                   		// 0x000000 (0x000C)              
	class UClass*                                      State;                                            		// 0x00000C (0x0004)              
	TArray<struct FUIInputActionAlias>                 StateInputAliases;                                		// 0x000010 (0x000C)              
};
//0x000094
//UIInputAliasClassMap[0x1D09CB20]
struct FUIInputAliasClassMap
{
	struct FString                                     WidgetClassName;                                  		// 0x000000 (0x000C)              
	class UClass*                                      WidgetClass;                                      		// 0x00000C (0x0004)              
	TArray<struct FUIInputAliasStateMap>               WidgetStates;                                     		// 0x000010 (0x000C)              
	unsigned char                                      StateLookupTable[0x3C];                           		// 0x00001C (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      StateReverseLookupTable[0x3C];                    		// 0x000058 (0x003C)              UNKNOWN PROPERTY: MapProperty
};
//0x000010
//PlayerDataStoreGroup[0x1D09CAB8]
struct FPlayerDataStoreGroup
{
	class ULocalPlayer*                                PlayerOwner;                                      		// 0x000000 (0x0004)              
	TArray<class UUIDataStore*>                        DataStores;                                       		// 0x000004 (0x000C)              
};
//0x000014
//tEntityType[0x1D09CA50]
struct FtEntityType
{
	unsigned long                                      bActive : 1;                                      		// 0x000000 (0x0004) [0x00000001] 
	float                                              fRadius;                                          		// 0x000004 (0x0004)              
	DWORD                                              Colour;                                           		// 0x000008 (0x0004)              
	class UTexture2D*                                  pTexture;                                         		// 0x00000C (0x0004)              
	int                                                nPercentageToMagnify;                             		// 0x000010 (0x0004)              
};
//0x000018
//AutoCompleteCommand[0x1D09C9E8]
struct FAutoCompleteCommand
{
	struct FString                                     Command;                                          		// 0x000000 (0x000C)              
	struct FString                                     Desc;                                             		// 0x00000C (0x000C)              
};
//0x00001C
//AutoCompleteNode[0x1D09C980]
struct FAutoCompleteNode
{
	int                                                IndexChar;                                        		// 0x000000 (0x0004)              
	TArray<int>                                        AutoCompleteListIndices;                          		// 0x000004 (0x000C)              
	TArray<DWORD>                                      ChildNodes;                                       		// 0x000010 (0x000C)              
};
//0x00002C
//KeyBind[0x1D09C918]
struct FKeyBind
{
	struct FName                                       Name;                                             		// 0x000000 (0x0008)              
	struct FName                                       AdditionalName1;                                  		// 0x000008 (0x0008)              
	struct FString                                     Command;                                          		// 0x000010 (0x000C)              
	unsigned long                                      Control : 1;                                      		// 0x00001C (0x0004) [0x00000001] 
	unsigned long                                      Shift : 1;                                        		// 0x00001C (0x0004) [0x00000002] 
	unsigned long                                      Alt : 1;                                          		// 0x00001C (0x0004) [0x00000004] 
	struct FName                                       Group;                                            		// 0x000020 (0x0008)              
	unsigned long                                      DrivingVehicleOnly : 1;                           		// 0x000028 (0x0004) [0x00000001] 
	unsigned long                                      OnFootOnly : 1;                                   		// 0x000028 (0x0004) [0x00000002] 
	unsigned long                                      bAllowInScaleformUI : 1;                          		// 0x000028 (0x0004) [0x00000004] 
};
//0x000010
//UIKeyRepeatData[0x1D09C8B0]
struct FUIKeyRepeatData
{
	struct FName                                       CurrentRepeatKey;                                 		// 0x000000 (0x0008)              
	double                                             NextRepeatTime;                                   		// 0x000008 (0x0008)              
};
//0x000004 (0x000014 - 0x000010)
//UIAxisEmulationData[0x1D09C848]
struct FUIAxisEmulationData : FUIKeyRepeatData
{
	unsigned long                                      bEnabled : 1;                                     		// 0x000010 (0x0004) [0x00000001] 
};
//0x00000C
//UIAnimationNotify[0x1D09C7E0]
struct FUIAnimationNotify
{
	unsigned char                                      NotifyType;                                       		// 0x000000 (0x0001)              PROPERTY: EUIAnimNotifyType
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FName                                       NotifyName;                                       		// 0x000004 (0x0008)              
};
//0x000038
//UIAnimationRawData[0x1D09C778]
struct FUIAnimationRawData
{
	float                                              DestAsFloat;                                      		// 0x000000 (0x0004)              
	struct FLinearColor                                DestAsColor;                                      		// 0x000004 (0x0010)              
	FRotator                                           DestAsRotator;                                    		// 0x000014 (0x000C)              
	FVector3                                           DestAsVector;                                     		// 0x000020 (0x000C)              
	struct FUIAnimationNotify                          DestAsNotify;                                     		// 0x00002C (0x000C)              
};
//0x00003C
//UIAnimationKeyFrame[0x1D09C710]
struct FUIAnimationKeyFrame
{
	float                                              TimeMark;                                         		// 0x000000 (0x0004)              
	struct FUIAnimationRawData                         Data;                                             		// 0x000004 (0x0038)              
};
//0x00001C
//UIAnimTrack[0x1D09C6A8]
struct FUIAnimTrack
{
	unsigned char                                      TrackType;                                        		// 0x000000 (0x0001)              PROPERTY: EUIAnimType
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FName                                       TrackWidgetTag;                                   		// 0x000004 (0x0008)              
	TArray<struct FUIAnimationKeyFrame>                KeyFrames;                                        		// 0x00000C (0x000C)              
	class UUIObject*                                   TargetWidget;                                     		// 0x000018 (0x0004)              
};
//0x00002C
//UIAnimSeqRef[0x1D09C640]
struct FUIAnimSeqRef
{
	class UUIAnimationSeq*                             SeqRef;                                           		// 0x000000 (0x0004)              
	float                                              PlaybackRate;                                     		// 0x000004 (0x0004)              
	float                                              AnimTime;                                         		// 0x000008 (0x0004)              
	unsigned long                                      bIsPlaying : 1;                                   		// 0x00000C (0x0004) [0x00000001] 
	unsigned long                                      bIsLooping : 1;                                   		// 0x00000C (0x0004) [0x00000002] 
	int                                                LoopCount;                                        		// 0x000010 (0x0004)              
	FVector3                                           InitialRenderOffset;                              		// 0x000014 (0x000C)              
	FRotator                                           InitialRotation;                                  		// 0x000020 (0x000C)              
};
//0x000018
//UIDataProviderField[0x1D09C5D8]
struct FUIDataProviderField
{
	struct FName                                       FieldTag;                                         		// 0x000000 (0x0008)              
	unsigned char                                      FieldType;                                        		// 0x000008 (0x0001)              PROPERTY: EUIDataProviderFieldType
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	TArray<class UUIDataProvider*>                     FieldProviders;                                   		// 0x00000C (0x000C)              
};
//0x000010
//ProfileSettingsArrayProvider[0x1D09C570]
struct FProfileSettingsArrayProvider
{
	int                                                ProfileSettingsId;                                		// 0x000000 (0x0004)              
	struct FName                                       ProfileSettingsName;                              		// 0x000004 (0x0008)              
	class UUIDataProvider_OnlineProfileSettingsArray*  Provider;                                         		// 0x00000C (0x0004)              
};
//0x00001C
//GameResourceDataProvider[0x1D09C508]
struct FGameResourceDataProvider
{
	struct FName                                       ProviderTag;                                      		// 0x000000 (0x0008)              
	struct FString                                     ProviderClassName;                                		// 0x000008 (0x000C)              
	unsigned long                                      bExpandProviders : 1;                             		// 0x000014 (0x0004) [0x00000001] 
	class UClass*                                      ProviderClass;                                    		// 0x000018 (0x0004)              
};
//0x00000C
//GameDataProviderTypes[0x1D09C4A0]
struct FGameDataProviderTypes
{
	class UClass*                                      GameDataProviderClass;                            		// 0x000000 (0x0004)              
	class UClass*                                      PlayerDataProviderClass;                          		// 0x000004 (0x0004)              
	class UClass*                                      TeamDataProviderClass;                            		// 0x000008 (0x0004)              
};
//0x000010
//PlayerDataProviderTypes[0x1D09C438]
struct FPlayerDataProviderTypes
{
	class UClass*                                      PlayerOwnerDataProviderClass;                     		// 0x000000 (0x0004)              
	class UClass*                                      CurrentWeaponDataProviderClass;                   		// 0x000004 (0x0004)              
	class UClass*                                      WeaponDataProviderClass;                          		// 0x000008 (0x0004)              
	class UClass*                                      PowerupDataProviderClass;                         		// 0x00000C (0x0004)              
};
//0x000028
//GameSearchCfg[0x1D09C3D0]
struct FGameSearchCfg
{
	class UClass*                                      GameSearchClass;                                  		// 0x000000 (0x0004)              
	class UClass*                                      DefaultGameSettingsClass;                         		// 0x000004 (0x0004)              
	class UClass*                                      SearchResultsProviderClass;                       		// 0x000008 (0x0004)              
	class UUIDataProvider_Settings*                    DesiredSettingsProvider;                          		// 0x00000C (0x0004)              
	TArray<class UUIDataProvider_Settings*>            SearchResults;                                    		// 0x000010 (0x000C)              
	class UOnlineGameSearch*                           Search;                                           		// 0x00001C (0x0004)              
	struct FName                                       SearchName;                                       		// 0x000020 (0x0008)              
};
//0x000014
//PlayerNickMetaData[0x1D09C368]
struct FPlayerNickMetaData
{
	struct FName                                       PlayerNickName;                                   		// 0x000000 (0x0008)              
	struct FString                                     PlayerNickColumnName;                             		// 0x000008 (0x000C)              
};
//0x000014
//RankMetaData[0x1D09C300]
struct FRankMetaData
{
	struct FName                                       RankName;                                         		// 0x000000 (0x0008)              
	struct FString                                     RankColumnName;                                   		// 0x000008 (0x000C)              
};
//0x000014
//GameSettingsCfg[0x1D09C298]
struct FGameSettingsCfg
{
	class UClass*                                      GameSettingsClass;                                		// 0x000000 (0x0004)              
	class UUIDataProvider_Settings*                    Provider;                                         		// 0x000004 (0x0004)              
	class UOnlineGameSettings*                         GameSettings;                                     		// 0x000008 (0x0004)              
	struct FName                                       SettingsName;                                     		// 0x00000C (0x0008)              
};
//0x000018
//UIInputKeyData[0x1D09C230]
struct FUIInputKeyData
{
	struct FRawInputKeyEventData                       InputKeyData;                                     		// 0x000000 (0x000C)              
	struct FString                                     ButtonFontMarkupString;                           		// 0x00000C (0x000C)              
};
//0x000050
//UIDataStoreInputAlias[0x1D09C1C8]
struct FUIDataStoreInputAlias
{
	struct FName                                       AliasName;                                        		// 0x000000 (0x0008)              
	struct FUIInputKeyData                             PlatformInputKeys[0x3];                           		// 0x000008 (0x0048)              
};
//0x00001C
//UIMenuInputMap[0x1D09C160]
struct FUIMenuInputMap
{
	struct FName                                       FieldName;                                        		// 0x000000 (0x0008)              
	struct FName                                       Set;                                              		// 0x000008 (0x0008)              
	struct FString                                     MappedText;                                       		// 0x000010 (0x000C)              
};
//0x00000C
//UISoundCue[0x1D09C0F8]
struct FUISoundCue
{
	struct FName                                       SoundName;                                        		// 0x000000 (0x0008)              
	class USoundCue*                                   SoundToPlay;                                      		// 0x000008 (0x0004)              
};
//0x000010
//SettingsArrayProvider[0x1D09C090]
struct FSettingsArrayProvider
{
	int                                                SettingsId;                                       		// 0x000000 (0x0004)              
	struct FName                                       SettingsName;                                     		// 0x000004 (0x0008)              
	class UUIDataProvider_SettingsArray*               Provider;                                         		// 0x00000C (0x0004)              
};
//0x000008
//UIDragItem[0x1D09C028]
struct FUIDragItem
{
	int                                                DragWidgetCollectionIndex;                        		// 0x000000 (0x0004)              
	class UObject*                                     ItemData;                                         		// 0x000004 (0x0004)              
};
//0x000030
//UIDragState[0x1D09BFC0]
struct FUIDragState
{
	class UUIObject*                                   DragWidget;                                       		// 0x000000 (0x0004)              
	class UUIObject*                                   DropWidget;                                       		// 0x000004 (0x0004)              
	class UUIObject*                                   LastDropWidget;                                   		// 0x000008 (0x0004)              
	unsigned char                                      Operation;                                        		// 0x00000C (0x0001)              PROPERTY: EUIDragAndDropOperation
	unsigned char                                      _0x00000D[0x3];                                   		// 0x00000D (0x0003) MISSED OFFSET
	class USurface*                                    DragImage;                                        		// 0x000010 (0x0004)              
	TArray<struct FUIDragItem>                         Items;                                            		// 0x000014 (0x000C)              
	TArray<int>                                        DropWidgetCollectionIndex;                        		// 0x000020 (0x000C)              
	unsigned long                                      AltHeld : 1;                                      		// 0x00002C (0x0004) [0x00000001] 
	unsigned long                                      CtrlHeld : 1;                                     		// 0x00002C (0x0004) [0x00000002] 
	unsigned long                                      ShiftHeld : 1;                                    		// 0x00002C (0x0004) [0x00000004] 
};
//0x000030
//CornerSizes[0x1D09BF58]
struct FCornerSizes
{
	float                                              TopLeft[0x2];                                     		// 0x000000 (0x0008)              
	float                                              TopRight[0x2];                                    		// 0x000008 (0x0008)              
	float                                              BottomLeft[0x2];                                  		// 0x000010 (0x0008)              
	float                                              BottomRight[0x2];                                 		// 0x000018 (0x0008)              
	float                                              TopHeight;                                        		// 0x000020 (0x0004)              
	float                                              BottomHeight;                                     		// 0x000024 (0x0004)              
	float                                              CenterLeftWidth;                                  		// 0x000028 (0x0004)              
	float                                              CenterRightWidth;                                 		// 0x00002C (0x0004)              
};
//0x000014
//CellHitDetectionInfo[0x1D09BEF0]
struct FCellHitDetectionInfo
{
	int                                                HitColumn;                                        		// 0x000000 (0x0004)              
	int                                                HitRow;                                           		// 0x000004 (0x0004)              
	int                                                ResizeColumn;                                     		// 0x000008 (0x0004)              
	int                                                ResizeRow;                                        		// 0x00000C (0x0004)              
	unsigned long                                      bRowDisabled : 1;                                 		// 0x000010 (0x0004) [0x00000001] 
	unsigned long                                      bCellDisabled : 1;                                		// 0x000010 (0x0004) [0x00000002] 
	unsigned long                                      bOverColumnHeader : 1;                            		// 0x000010 (0x0004) [0x00000004] 
};
//0x00001C
//ContextMenuItem[0x1D09BE88]
struct FContextMenuItem
{
	class UUIContextMenu*                              OwnerMenu;                                        		// 0x000000 (0x0004)              
	DWORD                                              ParentItem;                                       		// 0x000004 (0x0004)              
	unsigned char                                      ItemType;                                         		// 0x000008 (0x0001)              PROPERTY: EContextMenuItemType
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	struct FString                                     ItemText;                                         		// 0x00000C (0x000C)              
	int                                                ItemId;                                           		// 0x000018 (0x0004)              
};
//0x000028
//ArchetypeInstancePair[0x1D09BE20]
struct FArchetypeInstancePair
{
	class UUIObject*                                   WidgetArchetype;                                  		// 0x000000 (0x0004)              
	class UUIObject*                                   WidgetInstance;                                   		// 0x000004 (0x0004)              
	float                                              ArchetypeBounds[0x4];                             		// 0x000008 (0x0010)              
	float                                              InstanceBounds[0x4];                              		// 0x000018 (0x0010)              
};
//0x000020
//StyleDataReference[0x1D09BDB8]
struct FStyleDataReference
{
	class UUIStyle*                                    OwnerStyle;                                       		// 0x000000 (0x0004)              
	struct FSTYLE_ID                                   SourceStyleID;                                    		// 0x000004 (0x0010)              
	class UUIStyle*                                    SourceStyle;                                      		// 0x000014 (0x0004)              
	class UUIState*                                    SourceState;                                      		// 0x000018 (0x0004)              
	class UUIStyle_Data*                               CustomStyleData;                                  		// 0x00001C (0x0004)              
};
//0x000009
//SwitchClassInfo[0x1D09BD50]
struct FSwitchClassInfo
{
	struct FName                                       ClassName;                                        		// 0x000000 (0x0008)              
	unsigned char                                      bFallThru;                                        		// 0x000008 (0x0001)              PROPERTY: 
};
//0x00000C
//SwitchNameCase[0x1D09BCE8]
struct FSwitchNameCase
{
	struct FName                                       NameValue;                                        		// 0x000000 (0x0008)              
	unsigned long                                      bFallThru : 1;                                    		// 0x000008 (0x0004) [0x00000001] 
};
//0x000008
//SwitchObjectCase[0x1D09BC80]
struct FSwitchObjectCase
{
	class UObject*                                     ObjectValue;                                      		// 0x000000 (0x0004)              
	unsigned long                                      bFallThru : 1;                                    		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      bDefaultValue : 1;                                		// 0x000004 (0x0004) [0x00000002] 
};
//0x000018
//QueuedActivationInfo[0x1D09BC18]
struct FQueuedActivationInfo
{
	class AActor*                                      InOriginator;                                     		// 0x000000 (0x0004)              
	class AActor*                                      InInstigator;                                     		// 0x000004 (0x0004)              
	TArray<int>                                        ActivateIndices;                                  		// 0x000008 (0x000C)              
	unsigned long                                      bPushTop : 1;                                     		// 0x000014 (0x0004) [0x00000001] 
};
//0x00000C
//ArrayOfEdges[0x1D09BBB0]
struct FArrayOfEdges
{
	TArray<class URWTechReachSpec*>                    m_aEdges;                                         		// 0x000000 (0x000C)              
};
//0x000030
//PlatformInterfaceData[0x1D09BB48]
struct FPlatformInterfaceData
{
	struct FName                                       DataName;                                         		// 0x000000 (0x0008)              
	unsigned char                                      Type;                                             		// 0x000008 (0x0001)              PROPERTY: EPlatformInterfaceDataType
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	int                                                IntValue;                                         		// 0x00000C (0x0004)              
	float                                              FloatValue;                                       		// 0x000010 (0x0004)              
	struct FString                                     StringValue;                                      		// 0x000014 (0x000C)              
	struct FString                                     StringValue2;                                     		// 0x000020 (0x000C)              
	class UObject*                                     ObjectValue;                                      		// 0x00002C (0x0004)              
};
//0x000034
//PlatformInterfaceDelegateResult[0x1D09BAE0]
struct FPlatformInterfaceDelegateResult
{
	unsigned long                                      bSuccessful : 1;                                  		// 0x000000 (0x0004) [0x00000001] 
	struct FPlatformInterfaceData                      Data;                                             		// 0x000004 (0x0030)              
};
//0x00000C
//DelegateArray[0x1D09BA78]
struct FDelegateArray
{
	TArray<struct FScriptDelegate>                     Delegates;                                        		// 0x000000 (0x000C)              
};
//0x000018
//EventStringParam[0x1D09BA10]
struct FEventStringParam
{
	struct FString                                     ParamName;                                        		// 0x000000 (0x000C)              
	struct FString                                     ParamValue;                                       		// 0x00000C (0x000C)              
};
//0x000018
//NotificationMessageInfo[0x1D09B9A8]
struct FNotificationMessageInfo
{
	struct FString                                     Key;                                              		// 0x000000 (0x000C)              
	struct FString                                     Value;                                            		// 0x00000C (0x000C)              
};
//0x000020
//NotificationInfo[0x1D09B940]
struct FNotificationInfo
{
	unsigned long                                      bIsLocal : 1;                                     		// 0x000000 (0x0004) [0x00000001] 
	struct FString                                     MessageBody;                                      		// 0x000004 (0x000C)              
	int                                                BadgeNumber;                                      		// 0x000010 (0x0004)              
	TArray<struct FNotificationMessageInfo>            MessageInfo;                                      		// 0x000014 (0x000C)              
};
//0x000024
//LaunchNotificationInfo[0x1D09B8D8]
struct FLaunchNotificationInfo
{
	unsigned long                                      bWasLaunchedViaNotification : 1;                  		// 0x000000 (0x0004) [0x00000001] 
	struct FNotificationInfo                           Notification;                                     		// 0x000004 (0x0020)              
};
//0x000018
//FacebookFriend[0x1D09B870]
struct FFacebookFriend
{
	struct FString                                     Name;                                             		// 0x000000 (0x000C)              
	struct FString                                     Id;                                               		// 0x00000C (0x000C)              
};
//0x00003C
//PurchaseInfo[0x1D09B808]
struct FPurchaseInfo
{
	struct FString                                     Identifier;                                       		// 0x000000 (0x000C)              
	struct FString                                     DisplayName;                                      		// 0x00000C (0x000C)              
	struct FString                                     DisplayDescription;                               		// 0x000018 (0x000C)              
	struct FString                                     DisplayPrice;                                     		// 0x000024 (0x000C)              
	struct FString                                     CurrencyType;                                     		// 0x000030 (0x000C)              
};
//0x000010
//GetSaveDataCallbackStruct[0x1D09B7A0]
struct FGetSaveDataCallbackStruct
{
	int                                                SlotIndex;                                        		// 0x000000 (0x0004)              
	struct FScriptDelegate                             Callback;                                         		// 0x000004 (0x000C)              
};
//0x000010
//SetSaveDataCallbackStruct[0x1D09B738]
struct FSetSaveDataCallbackStruct
{
	int                                                SlotIndex;                                        		// 0x000000 (0x0004)              
	struct FScriptDelegate                             Callback;                                         		// 0x000004 (0x000C)              
};
//0x000005
//SaveSlotOperation[0x1D09B6D0]
struct FSaveSlotOperation
{
	int                                                SlotIndex;                                        		// 0x000000 (0x0004)              
	unsigned char                                      SlotOperation;                                    		// 0x000004 (0x0001)              PROPERTY: SaveSlotOperationEnum
};
//0x000015
//PresetGeneratedPoint[0x1D09B668]
struct FPresetGeneratedPoint
{
	float                                              KeyIn;                                            		// 0x000000 (0x0004)              
	float                                              KeyOut;                                           		// 0x000004 (0x0004)              
	unsigned long                                      TangentsValid : 1;                                		// 0x000008 (0x0004) [0x00000001] 
	float                                              TangentIn;                                        		// 0x00000C (0x0004)              
	float                                              TangentOut;                                       		// 0x000010 (0x0004)              
	unsigned char                                      IntepMode;                                        		// 0x000014 (0x0001)              PROPERTY: EInterpCurveMode
};
//0x000008
//StatColorMapEntry[0x1D09B600]
struct FStatColorMapEntry
{
	float                                              In;                                               		// 0x000000 (0x0004)              
	DWORD                                              Out;                                              		// 0x000004 (0x0004)              
};
//0x000018
//StatColorMapping[0x1D09B598]
struct FStatColorMapping
{
	struct FString                                     StatName;                                         		// 0x000000 (0x000C)              
	TArray<struct FStatColorMapEntry>                  ColorMap;                                         		// 0x00000C (0x000C)              
};
//0x000024
//DropNoteInfo[0x1D09B530]
struct FDropNoteInfo
{
	FVector3                                           Location;                                         		// 0x000000 (0x000C)              
	FRotator                                           Rotation;                                         		// 0x00000C (0x000C)              
	struct FString                                     Comment;                                          		// 0x000018 (0x000C)              
};
//0x000044
//URL[0x1D09B4C8]
struct FURL
{
	struct FString                                     Protocol;                                         		// 0x000000 (0x000C)              
	struct FString                                     Host;                                             		// 0x00000C (0x000C)              
	int                                                Port;                                             		// 0x000018 (0x0004)              
	struct FString                                     Map;                                              		// 0x00001C (0x000C)              
	TArray<struct FString>                             Op;                                               		// 0x000028 (0x000C)              
	struct FString                                     Portal;                                           		// 0x000034 (0x000C)              
	int                                                Valid;                                            		// 0x000040 (0x0004)              
};
//0x00000C
//LevelStreamingStatus[0x1D09B460]
struct FLevelStreamingStatus
{
	struct FName                                       PackageName;                                      		// 0x000000 (0x0008)              
	unsigned long                                      bShouldBeLoaded : 1;                              		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      bShouldBeVisible : 1;                             		// 0x000008 (0x0004) [0x00000002] 
};
//0x000028
//FullyLoadedPackagesInfo[0x1D09B3F8]
struct FFullyLoadedPackagesInfo
{
	unsigned char                                      FullyLoadType;                                    		// 0x000000 (0x0001)              PROPERTY: EFullyLoadPackageType
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FString                                     Tag;                                              		// 0x000004 (0x000C)              
	TArray<struct FName>                               PackagesToLoad;                                   		// 0x000010 (0x000C)              
	TArray<class UObject*>                             LoadedObjects;                                    		// 0x00001C (0x000C)              
};
//0x000094
//FontImportOptionsData[0x1D09B390]
struct FFontImportOptionsData
{
	struct FString                                     FontName;                                         		// 0x000000 (0x000C)              
	float                                              Height;                                           		// 0x00000C (0x0004)              
	unsigned long                                      bEnableAntialiasing : 1;                          		// 0x000010 (0x0004) [0x00000001] 
	unsigned long                                      bEnableBold : 1;                                  		// 0x000010 (0x0004) [0x00000002] 
	unsigned long                                      bEnableItalic : 1;                                		// 0x000010 (0x0004) [0x00000004] 
	unsigned long                                      bEnableUnderline : 1;                             		// 0x000010 (0x0004) [0x00000008] 
	unsigned long                                      bAlphaOnly : 1;                                   		// 0x000010 (0x0004) [0x00000010] 
	unsigned char                                      CharacterSet;                                     		// 0x000014 (0x0001)              PROPERTY: EFontImportCharacterSet
	unsigned char                                      _0x000015[0x3];                                   		// 0x000015 (0x0003) MISSED OFFSET
	struct FString                                     Chars;                                            		// 0x000018 (0x000C)              
	struct FString                                     UnicodeRange;                                     		// 0x000024 (0x000C)              
	struct FString                                     CharsFilePath;                                    		// 0x000030 (0x000C)              
	struct FString                                     CharsFileWildcard;                                		// 0x00003C (0x000C)              
	unsigned long                                      bCreatePrintableOnly : 1;                         		// 0x000048 (0x0004) [0x00000001] 
	struct FLinearColor                                ForegroundColor;                                  		// 0x00004C (0x0010)              
	unsigned long                                      bEnableDropShadow : 1;                            		// 0x00005C (0x0004) [0x00000001] 
	int                                                TexturePageWidth;                                 		// 0x000060 (0x0004)              
	int                                                TexturePageMaxHeight;                             		// 0x000064 (0x0004)              
	int                                                XPadding;                                         		// 0x000068 (0x0004)              
	int                                                YPadding;                                         		// 0x00006C (0x0004)              
	int                                                ExtendBoxTop;                                     		// 0x000070 (0x0004)              
	int                                                ExtendBoxBottom;                                  		// 0x000074 (0x0004)              
	int                                                ExtendBoxRight;                                   		// 0x000078 (0x0004)              
	int                                                ExtendBoxLeft;                                    		// 0x00007C (0x0004)              
	unsigned long                                      bEnableLegacyMode : 1;                            		// 0x000080 (0x0004) [0x00000001] 
	int                                                Kerning;                                          		// 0x000084 (0x0004)              
	unsigned long                                      bUseDistanceFieldAlpha : 1;                       		// 0x000088 (0x0004) [0x00000001] 
	int                                                DistanceFieldScaleFactor;                         		// 0x00008C (0x0004)              
	float                                              DistanceFieldScanRadiusScale;                     		// 0x000090 (0x0004)              
};
//0x000018
//FontCharacter[0x1D09B328]
struct FFontCharacter
{
	int                                                StartU;                                           		// 0x000000 (0x0004)              
	int                                                StartV;                                           		// 0x000004 (0x0004)              
	int                                                USize;                                            		// 0x000008 (0x0004)              
	int                                                VSize;                                            		// 0x00000C (0x0004)              
	unsigned char                                      TextureIndex;                                     		// 0x000010 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000011[0x3];                                   		// 0x000011 (0x0003) MISSED OFFSET
	int                                                VerticalOffset;                                   		// 0x000014 (0x0004)              
};
//0x000038
//CacheSlot[0x1D09B2C0]
struct FCacheSlot
{
	int                                                nCharacter;                                       		// 0x000000 (0x0004)              
	int                                                nTexture;                                         		// 0x000004 (0x0004)              
	int                                                nX;                                               		// 0x000008 (0x0004)              
	int                                                nY;                                               		// 0x00000C (0x0004)              
	int                                                nSizeX;                                           		// 0x000010 (0x0004)              
	int                                                nSizeY;                                           		// 0x000014 (0x0004)              
	float                                              fU;                                               		// 0x000018 (0x0004)              
	float                                              fV;                                               		// 0x00001C (0x0004)              
	float                                              fSizeU;                                           		// 0x000020 (0x0004)              
	float                                              fSizeV;                                           		// 0x000024 (0x0004)              
	int                                                nOffsetX;                                         		// 0x000028 (0x0004)              
	int                                                nOffsetY;                                         		// 0x00002C (0x0004)              
	unsigned long                                      bInUse : 1;                                       		// 0x000030 (0x0004) [0x00000001] 
	unsigned long                                      bUsedThisFrame : 1;                               		// 0x000030 (0x0004) [0x00000002] 
	int                                                nFramesSinceLastUsed;                             		// 0x000034 (0x0004)              
};
//0x000008
//DelayedChar[0x1D09B258]
struct FDelayedChar
{
	DWORD                                              pCharacter;                                       		// 0x000000 (0x0004)              
	int                                                nTexture;                                         		// 0x000004 (0x0004)              
};
//0x000008
//WaveformSample[0x1D09B1F0]
struct FWaveformSample
{
	unsigned char                                      LeftAmplitude;                                    		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      RightAmplitude;                                   		// 0x000001 (0x0001)              PROPERTY: 
	unsigned char                                      LeftFunction;                                     		// 0x000002 (0x0001)              PROPERTY: EWaveformFunction
	unsigned char                                      RightFunction;                                    		// 0x000003 (0x0001)              PROPERTY: EWaveformFunction
	float                                              Duration;                                         		// 0x000004 (0x0004)              
};
//0x000010
//TitleSafeZoneArea[0x1D09B188]
struct FTitleSafeZoneArea
{
	float                                              MaxPercentX;                                      		// 0x000000 (0x0004)              
	float                                              MaxPercentY;                                      		// 0x000004 (0x0004)              
	float                                              RecommendedPercentX;                              		// 0x000008 (0x0004)              
	float                                              RecommendedPercentY;                              		// 0x00000C (0x0004)              
};
//0x000010
//PerPlayerSplitscreenData[0x1D09B120]
struct FPerPlayerSplitscreenData
{
	float                                              SizeX;                                            		// 0x000000 (0x0004)              
	float                                              SizeY;                                            		// 0x000004 (0x0004)              
	float                                              OriginX;                                          		// 0x000008 (0x0004)              
	float                                              OriginY;                                          		// 0x00000C (0x0004)              
};
//0x00000C
//SplitscreenData[0x1D09B0B8]
struct FSplitscreenData
{
	TArray<struct FPerPlayerSplitscreenData>           PlayerData;                                       		// 0x000000 (0x000C)              
};
//0x000029
//IniLocFileEntry[0x1D09B050]
struct FIniLocFileEntry
{
	struct FString                                     Filename;                                         		// 0x000000 (0x000C)              
	struct FString                                     DLName;                                           		// 0x00000C (0x000C)              
	struct FString                                     HashCode;                                         		// 0x000018 (0x000C)              
	unsigned long                                      bIsUnicode : 1;                                   		// 0x000024 (0x0004) [0x00000001] 
	unsigned char                                      ReadState;                                        		// 0x000028 (0x0001)              PROPERTY: EOnlineEnumerationReadState
};
//0x000030
//CurveEdEntry[0x1D09AFE8]
struct FCurveEdEntry
{
	class UObject*                                     CurveObject;                                      		// 0x000000 (0x0004)              
	class UObject*                                     NotifyObjectChanged;                              		// 0x000004 (0x0004)              
	DWORD                                              CurveColor;                                       		// 0x000008 (0x0004)              
	struct FString                                     CurveName;                                        		// 0x00000C (0x000C)              
	int                                                bHideCurve;                                       		// 0x000018 (0x0004)              
	int                                                bColorCurve;                                      		// 0x00001C (0x0004)              
	int                                                bFloatingPointColorCurve;                         		// 0x000020 (0x0004)              
	int                                                bClamp;                                           		// 0x000024 (0x0004)              
	float                                              ClampLow;                                         		// 0x000028 (0x0004)              
	float                                              ClampHigh;                                        		// 0x00002C (0x0004)              
};
//0x000028
//CurveEdTab[0x1D09AF80]
struct FCurveEdTab
{
	struct FString                                     TabName;                                          		// 0x000000 (0x000C)              
	TArray<struct FCurveEdEntry>                       Curves;                                           		// 0x00000C (0x000C)              
	float                                              ViewStartInput;                                   		// 0x000018 (0x0004)              
	float                                              ViewEndInput;                                     		// 0x00001C (0x0004)              
	float                                              ViewStartOutput;                                  		// 0x000020 (0x0004)              
	float                                              ViewEndOutput;                                    		// 0x000024 (0x0004)              
};
//0x000010
//InterpEdSelKey[0x1D09AF18]
struct FInterpEdSelKey
{
	class UInterpGroup*                                Group;                                            		// 0x000000 (0x0004)              
	int                                                TrackIndex;                                       		// 0x000004 (0x0004)              
	int                                                KeyIndex;                                         		// 0x000008 (0x0004)              
	float                                              UnsnappedPosition;                                		// 0x00000C (0x0004)              
};
//0x000014
//DirectorTrackCut[0x1D09AEB0]
struct FDirectorTrackCut
{
	double                                             Time;                                             		// 0x000000 (0x0008)              
	float                                              TransitionTime;                                   		// 0x000008 (0x0004)              
	struct FName                                       TargetCamGroup;                                   		// 0x00000C (0x0008)              
};
//0x00000C
//EventTrackKey[0x1D09AE48]
struct FEventTrackKey
{
	float                                              Time;                                             		// 0x000000 (0x0004)              
	struct FName                                       EventName;                                        		// 0x000004 (0x0008)              
};
//0x00001C
//FaceFXTrackKey[0x1D09ADE0]
struct FFaceFXTrackKey
{
	float                                              StartTime;                                        		// 0x000000 (0x0004)              
	struct FString                                     FaceFXGroupName;                                  		// 0x000004 (0x000C)              
	struct FString                                     FaceFXSeqName;                                    		// 0x000010 (0x000C)              
};
//0x00001C
//AnimControlTrackKey[0x1D09AD78]
struct FAnimControlTrackKey
{
	float                                              StartTime;                                        		// 0x000000 (0x0004)              
	struct FName                                       AnimSeqName;                                      		// 0x000004 (0x0008)              
	float                                              AnimStartOffset;                                  		// 0x00000C (0x0004)              
	float                                              AnimEndOffset;                                    		// 0x000010 (0x0004)              
	float                                              AnimPlayRate;                                     		// 0x000014 (0x0004)              
	unsigned long                                      bLooping : 1;                                     		// 0x000018 (0x0004) [0x00000001] 
	unsigned long                                      bReverse : 1;                                     		// 0x000018 (0x0004) [0x00000002] 
};
//0x00000C
//InterpLookupPoint[0x1D09AD10]
struct FInterpLookupPoint
{
	struct FName                                       GroupName;                                        		// 0x000000 (0x0008)              
	float                                              Time;                                             		// 0x000008 (0x0004)              
};
//0x00000C
//InterpLookupTrack[0x1D09ACA8]
struct FInterpLookupTrack
{
	TArray<struct FInterpLookupPoint>                  Points;                                           		// 0x000000 (0x000C)              
};
//0x000005
//ToggleTrackKey[0x1D09AC40]
struct FToggleTrackKey
{
	float                                              Time;                                             		// 0x000000 (0x0004)              
	unsigned char                                      ToggleAction;                                     		// 0x000004 (0x0001)              PROPERTY: ETrackToggleAction
};
//0x000010
//SoundTrackKey[0x1D09ABD8]
struct FSoundTrackKey
{
	float                                              Time;                                             		// 0x000000 (0x0004)              
	float                                              Volume;                                           		// 0x000004 (0x0004)              
	float                                              Pitch;                                            		// 0x000008 (0x0004)              
	class USoundCue*                                   Sound;                                            		// 0x00000C (0x0004)              
};
//0x00001C
//ExpressionInput[0x1D09AB70]
struct FExpressionInput
{
	class UMaterialExpression*                         Expression;                                       		// 0x000000 (0x0004)              
	int                                                Mask;                                             		// 0x000004 (0x0004)              
	int                                                MaskR;                                            		// 0x000008 (0x0004)              
	int                                                MaskG;                                            		// 0x00000C (0x0004)              
	int                                                MaskB;                                            		// 0x000010 (0x0004)              
	int                                                MaskA;                                            		// 0x000014 (0x0004)              
	int                                                GCC64_Padding;                                    		// 0x000018 (0x0004)              
};
//0x000018
//MorphNodeConn[0x1D09AB08]
struct FMorphNodeConn
{
	TArray<class UMorphNodeBase*>                      ChildNodes;                                       		// 0x000000 (0x000C)              
	struct FName                                       ConnName;                                         		// 0x00000C (0x0008)              
	int                                                DrawY;                                            		// 0x000014 (0x0004)              
};
//0x00000C
//MMStats_Timer[0x1D09AAA0]
struct FMMStats_Timer
{
	unsigned long                                      bInProgress : 1;                                  		// 0x000000 (0x0004) [0x00000001] 
	double                                             MSecs;                                            		// 0x000004 (0x0008)              
};
//0x000018
//OnlineProfileSetting[0x1D09AA38]
struct FOnlineProfileSetting
{
	unsigned char                                      Owner;                                            		// 0x000000 (0x0001)              PROPERTY: EOnlineProfilePropertyOwner
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	struct FSettingsProperty                           ProfileSetting;                                   		// 0x000004 (0x0014)              
};
//0x000014
//RecentParty[0x1D09A9D0]
struct FRecentParty
{
	struct FUniqueNetId                                PartyLeader;                                      		// 0x000000 (0x0008)              
	TArray<struct FUniqueNetId>                        PartyMembers;                                     		// 0x000008 (0x000C)              
};
//0x000010
//CurrentPlayerMet[0x1D09A968]
struct FCurrentPlayerMet
{
	int                                                TeamNum;                                          		// 0x000000 (0x0004)              
	int                                                Skill;                                            		// 0x000004 (0x0004)              
	struct FUniqueNetId                                NetId;                                            		// 0x000008 (0x0008)              
};
//0x000010
//OnlineStatsColumn[0x1D09A900]
struct FOnlineStatsColumn
{
	int                                                ColumnNo;                                         		// 0x000000 (0x0004)              
	struct FSettingsData                               StatValue;                                        		// 0x000004 (0x000C)              
};
//0x00002C
//OnlineStatsRow[0x1D09A898]
struct FOnlineStatsRow
{
	struct FUniqueNetId                                PlayerID;                                         		// 0x000000 (0x0008)              
	struct FSettingsData                               Rank;                                             		// 0x000008 (0x000C)              
	struct FString                                     NickName;                                         		// 0x000014 (0x000C)              
	TArray<struct FOnlineStatsColumn>                  Columns;                                          		// 0x000020 (0x000C)              
};
//0x000018
//ColumnMetaData[0x1D09A830]
struct FColumnMetaData
{
	int                                                Id;                                               		// 0x000000 (0x0004)              
	struct FName                                       Name;                                             		// 0x000004 (0x0008)              
	struct FString                                     ColumnName;                                       		// 0x00000C (0x000C)              
};
//0x00000C
//ParticleBurst[0x1D09A7C8]
struct FParticleBurst
{
	int                                                Count;                                            		// 0x000000 (0x0004)              
	int                                                CountLow;                                         		// 0x000004 (0x0004)              
	float                                              Time;                                             		// 0x000008 (0x0004)              
};
//0x000010
//ParticleCurvePair[0x1D09A760]
struct FParticleCurvePair
{
	struct FString                                     CurveName;                                        		// 0x000000 (0x000C)              
	class UObject*                                     CurveObject;                                      		// 0x00000C (0x0004)              
};
//0x000004
//BeamModifierOptions[0x1D09A6F8]
struct FBeamModifierOptions
{
	unsigned long                                      bModify : 1;                                      		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bScale : 1;                                       		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      bLock : 1;                                        		// 0x000000 (0x0004) [0x00000004] 
};
//0x00001C
//ParticleEvent_GenerateInfo[0x1D09A690]
struct FParticleEvent_GenerateInfo
{
	unsigned char                                      Type;                                             		// 0x000000 (0x0001)              PROPERTY: EParticleEventType
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	int                                                Frequency;                                        		// 0x000004 (0x0004)              
	int                                                LowFreq;                                          		// 0x000008 (0x0004)              
	int                                                ParticleFrequency;                                		// 0x00000C (0x0004)              
	unsigned long                                      FirstTimeOnly : 1;                                		// 0x000010 (0x0004) [0x00000001] 
	unsigned long                                      LastTimeOnly : 1;                                 		// 0x000010 (0x0004) [0x00000002] 
	unsigned long                                      UseReflectedImpactVector : 1;                     		// 0x000010 (0x0004) [0x00000004] 
	struct FName                                       CustomName;                                       		// 0x000014 (0x0008)              
};
//0x000004
//OrbitOptions[0x1D09A628]
struct FOrbitOptions
{
	unsigned long                                      bProcessDuringSpawn : 1;                          		// 0x000000 (0x0004) [0x00000001] 
	unsigned long                                      bProcessDuringUpdate : 1;                         		// 0x000000 (0x0004) [0x00000002] 
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x000000 (0x0004) [0x00000004] 
};
//0x000028
//EmitterDynamicParameter[0x1D09A5C0]
struct FEmitterDynamicParameter
{
	struct FName                                       ParamName;                                        		// 0x000000 (0x0008)              
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x000008 (0x0004) [0x00000001] 
	struct FRawDistributionFloat                       ParamValue;                                       		// 0x00000C (0x001C)              
};
//0x00000C
//BeamTargetData[0x1D09A558]
struct FBeamTargetData
{
	struct FName                                       TargetName;                                       		// 0x000000 (0x0008)              
	float                                              TargetPercentage;                                 		// 0x000008 (0x0004)              
};
//0x000010
//PhysXEmitterVerticalLodProperties[0x1D09A4F0]
struct FPhysXEmitterVerticalLodProperties
{
	float                                              WeightForFifo;                                    		// 0x000000 (0x0004)              
	float                                              WeightForSpawnLod;                                		// 0x000004 (0x0004)              
	float                                              SpawnLodRateVsLifeBias;                           		// 0x000008 (0x0004)              
	float                                              RelativeFadeoutTime;                              		// 0x00000C (0x0004)              
};
//0x000008
//SynchronizedActorVisibilityHistory[0x1D09A488]
struct FSynchronizedActorVisibilityHistory
{
	DWORD                                              State;                                            		// 0x000000 (0x0004)              
	DWORD                                              CriticalSection;                                  		// 0x000004 (0x0004)              
};
//0x0000E0
//CurrentPostProcessVolumeInfo[0x1D09A420]
struct FCurrentPostProcessVolumeInfo
{
	struct FPostProcessSettings                        LastSettings;                                     		// 0x000000 (0x00CC)              
	class APostProcessVolume*                          LastVolumeUsed;                                   		// 0x0000CC (0x0004)              
	double                                             BlendStartTime;                                   		// 0x0000D0 (0x0008)              
	double                                             LastBlendTime;                                    		// 0x0000D8 (0x0008)              
};
//0x000008
//LinearDOFSetup[0x1D09A3B8]
struct FLinearDOFSetup
{
	unsigned char                                      bLimited;                                         		// 0x000000 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000001[0x3];                                   		// 0x000001 (0x0003) MISSED OFFSET
	float                                              LimitSize;                                        		// 0x000004 (0x0004)              
};
//0x000005
//BoneMirrorInfo[0x1D09A350]
struct FBoneMirrorInfo
{
	int                                                SourceIndex;                                      		// 0x000000 (0x0004)              
	unsigned char                                      BoneFlipAxis;                                     		// 0x000004 (0x0001)              PROPERTY: EAxis
};
//0x000020
//SkeletalMeshLODInfo[0x1D09A2E8]
struct FSkeletalMeshLODInfo
{
	float                                              DisplayFactor;                                    		// 0x000000 (0x0004)              
	float                                              LODHysteresis;                                    		// 0x000004 (0x0004)              
	TArray<int>                                        LODMaterialMap;                                   		// 0x000008 (0x000C)              
	TArray<unsigned long>                              bEnableShadowCasting;                             		// 0x000014 (0x000C)              
};
//0x000018
//ClothSpecialBoneInfo[0x1D09A280]
struct FClothSpecialBoneInfo
{
	struct FName                                       BoneName;                                         		// 0x000000 (0x0008)              
	unsigned char                                      BoneType;                                         		// 0x000008 (0x0001)              PROPERTY: ClothBoneType
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	TArray<int>                                        AttachedVertexIndices;                            		// 0x00000C (0x000C)              
};
//0x000010
//SoftBodyTetraLink[0x1D09A218]
struct FSoftBodyTetraLink
{
	int                                                Index;                                            		// 0x000000 (0x0004)              
	FVector3                                           Bary;                                             		// 0x000004 (0x000C)              
};
//0x000018
//SoftBodySpecialBoneInfo[0x1D09A1B0]
struct FSoftBodySpecialBoneInfo
{
	struct FName                                       BoneName;                                         		// 0x000000 (0x0008)              
	unsigned char                                      BoneType;                                         		// 0x000008 (0x0001)              PROPERTY: SoftBodyBoneType
	unsigned char                                      _0x000009[0x3];                                   		// 0x000009 (0x0003) MISSED OFFSET
	TArray<int>                                        AttachedVertexIndices;                            		// 0x00000C (0x000C)              
};
//0x000008
//SoundNodeEditorData[0x1D09A148]
struct FSoundNodeEditorData
{
	int                                                NodePosX;                                         		// 0x000000 (0x0004)              
	int                                                NodePosY;                                         		// 0x000004 (0x0004)              
};
//0x000010
//AmbientSoundSlot[0x1D09A0E0]
struct FAmbientSoundSlot
{
	class USoundNodeWave*                              Wave;                                             		// 0x000000 (0x0004)              
	float                                              PitchScale;                                       		// 0x000004 (0x0004)              
	float                                              VolumeScale;                                      		// 0x000008 (0x0004)              
	float                                              Weight;                                           		// 0x00000C (0x0004)              
};
//0x00003C
//DistanceDatum[0x1D09A078]
struct FDistanceDatum
{
	struct FRawDistributionFloat                       FadeInDistance;                                   		// 0x000000 (0x001C)              
	struct FRawDistributionFloat                       FadeOutDistance;                                  		// 0x00001C (0x001C)              
	float                                              Volume;                                           		// 0x000038 (0x0004)              
};
//0x000014
//SubtitleCue[0x1D09A010]
struct FSubtitleCue
{
	struct FString                                     Text;                                             		// 0x000000 (0x000C)              
	double                                             Time;                                             		// 0x00000C (0x0008)              
};
//0x000008
//MatureTimings[0x1D099FA8]
struct FMatureTimings
{
	float                                              StartBleep;                                       		// 0x000000 (0x0004)              
	float                                              EndBleep;                                         		// 0x000004 (0x0004)              
};
//0x00001C
//RecognisableWord[0x1D099F40]
struct FRecognisableWord
{
	int                                                Id;                                               		// 0x000000 (0x0004)              
	struct FString                                     ReferenceWord;                                    		// 0x000004 (0x000C)              
	struct FString                                     PhoneticWord;                                     		// 0x000010 (0x000C)              
};
//0x000048
//RecogVocabulary[0x1D099ED8]
struct FRecogVocabulary
{
	TArray<struct FRecognisableWord>                   WhoDictionary;                                    		// 0x000000 (0x000C)              
	TArray<struct FRecognisableWord>                   WhatDictionary;                                   		// 0x00000C (0x000C)              
	TArray<struct FRecognisableWord>                   WhereDictionary;                                  		// 0x000018 (0x000C)              
	struct FString                                     VocabName;                                        		// 0x000024 (0x000C)              
	TArray<unsigned char>                              VocabData;                                        		// 0x000030 (0x000C)              
	TArray<unsigned char>                              WorkingVocabData;                                 		// 0x00003C (0x000C)              
};
//0x000010
//RecogUserData[0x1D099E70]
struct FRecogUserData
{
	int                                                ActiveVocabularies;                               		// 0x000000 (0x0004)              
	TArray<unsigned char>                              UserData;                                         		// 0x000004 (0x000C)              
};
//0x000008
//ChannelParams[0x1D099E08]
struct FChannelParams
{
	unsigned char                                      Type;                                             		// 0x000000 (0x0001)              PROPERTY: EUVMappingType
	unsigned char                                      Subtype;                                          		// 0x000001 (0x0001)              PROPERTY: EUVMappingSubtype
	unsigned char                                      _0x000002[0x2];                                   		// 0x000002 (0x0002) MISSED OFFSET
	class UTexture*                                    Tex;                                              		// 0x000004 (0x0004)              
};
//0x00001C
//MaterialInput[0x1D099DA0]
struct FMaterialInput
{
	class UMaterialExpression*                         Expression;                                       		// 0x000000 (0x0004)              
	int                                                Mask;                                             		// 0x000004 (0x0004)              
	int                                                MaskR;                                            		// 0x000008 (0x0004)              
	int                                                MaskG;                                            		// 0x00000C (0x0004)              
	int                                                MaskB;                                            		// 0x000010 (0x0004)              
	int                                                MaskA;                                            		// 0x000014 (0x0004)              
	int                                                GCC64_Padding;                                    		// 0x000018 (0x0004)              
};
//0x000008 (0x000024 - 0x00001C)
//ColorMaterialInput[0x1D099D38]
struct FColorMaterialInput : FMaterialInput
{
	unsigned long                                      UseConstant : 1;                                  		// 0x00001C (0x0004) [0x00000001] 
	DWORD                                              Constant;                                         		// 0x000020 (0x0004)              
};
//0x000008 (0x000024 - 0x00001C)
//ScalarMaterialInput[0x1D099CD0]
struct FScalarMaterialInput : FMaterialInput
{
	unsigned long                                      UseConstant : 1;                                  		// 0x00001C (0x0004) [0x00000001] 
	float                                              Constant;                                         		// 0x000020 (0x0004)              
};
//0x000010 (0x00002C - 0x00001C)
//VectorMaterialInput[0x1D099C68]
struct FVectorMaterialInput : FMaterialInput
{
	unsigned long                                      UseConstant : 1;                                  		// 0x00001C (0x0004) [0x00000001] 
	FVector3                                           Constant;                                         		// 0x000020 (0x000C)              
};
//0x00000C (0x000028 - 0x00001C)
//Vector2MaterialInput[0x1D099C00]
struct FVector2MaterialInput : FMaterialInput
{
	unsigned long                                      UseConstant : 1;                                  		// 0x00001C (0x0004) [0x00000001] 
	float                                              ConstantX;                                        		// 0x000020 (0x0004)              
	float                                              ConstantY;                                        		// 0x000024 (0x0004)              
};
//0x000020
//FontParameterValue[0x1D099B98]
struct FFontParameterValue
{
	struct FName                                       ParameterName;                                    		// 0x000000 (0x0008)              
	class UFont*                                       FontValue;                                        		// 0x000008 (0x0004)              
	int                                                FontPage;                                         		// 0x00000C (0x0004)              
	struct FGuid                                       ExpressionGUID;                                   		// 0x000010 (0x0010)              
};
//0x00001C
//ScalarParameterValue[0x1D099B30]
struct FScalarParameterValue
{
	struct FName                                       ParameterName;                                    		// 0x000000 (0x0008)              
	float                                              ParameterValue;                                   		// 0x000008 (0x0004)              
	struct FGuid                                       ExpressionGUID;                                   		// 0x00000C (0x0010)              
};
//0x00001C
//TextureParameterValue[0x1D099AC8]
struct FTextureParameterValue
{
	struct FName                                       ParameterName;                                    		// 0x000000 (0x0008)              
	class UTexture*                                    ParameterValue;                                   		// 0x000008 (0x0004)              
	struct FGuid                                       ExpressionGUID;                                   		// 0x00000C (0x0010)              
};
//0x000028
//VectorParameterValue[0x1D099A60]
struct FVectorParameterValue
{
	struct FName                                       ParameterName;                                    		// 0x000000 (0x0008)              
	struct FLinearColor                                ParameterValue;                                   		// 0x000008 (0x0010)              
	struct FGuid                                       ExpressionGUID;                                   		// 0x000018 (0x0010)              
};
//0x000034
//ParameterValueOverTime[0x1D0999F8]
struct FParameterValueOverTime
{
	struct FGuid                                       ExpressionGUID;                                   		// 0x000000 (0x0010)              
	double                                             StartTime;                                        		// 0x000010 (0x0008)              
	struct FName                                       ParameterName;                                    		// 0x000018 (0x0008)              
	unsigned long                                      bLoop : 1;                                        		// 0x000020 (0x0004) [0x00000001] 
	unsigned long                                      bAutoActivate : 1;                                		// 0x000020 (0x0004) [0x00000002] 
	float                                              CycleTime;                                        		// 0x000024 (0x0004)              
	unsigned long                                      bNormalizeTime : 1;                               		// 0x000028 (0x0004) [0x00000001] 
	float                                              OffsetTime;                                       		// 0x00002C (0x0004)              
	unsigned long                                      bOffsetFromEnd : 1;                               		// 0x000030 (0x0004) [0x00000001] 
};
//0x000008 (0x00003C - 0x000034)
//FontParameterValueOverTime[0x1D099990]
struct FFontParameterValueOverTime : FParameterValueOverTime
{
	class UFont*                                       FontValue;                                        		// 0x000034 (0x0004)              
	int                                                FontPage;                                         		// 0x000038 (0x0004)              
};
//0x000014 (0x000048 - 0x000034)
//ScalarParameterValueOverTime[0x1D099928]
struct FScalarParameterValueOverTime : FParameterValueOverTime
{
	float                                              ParameterValue;                                   		// 0x000034 (0x0004)              
	struct FInterpCurveFloat                           ParameterValueCurve;                              		// 0x000038 (0x0010)              
};
//0x000004 (0x000038 - 0x000034)
//TextureParameterValueOverTime[0x1D0998C0]
struct FTextureParameterValueOverTime : FParameterValueOverTime
{
	class UTexture*                                    ParameterValue;                                   		// 0x000034 (0x0004)              
};
//0x000020 (0x000054 - 0x000034)
//VectorParameterValueOverTime[0x1D099858]
struct FVectorParameterValueOverTime : FParameterValueOverTime
{
	struct FLinearColor                                ParameterValue;                                   		// 0x000034 (0x0010)              
	struct FInterpCurveVector                          ParameterValueCurve;                              		// 0x000044 (0x0010)              
};
//0x000040
//Texture3DMipMap[0x1D0997F0]
struct FTexture3DMipMap
{
	struct FUntypedBulkData_Mirror                     Data;                                             		// 0x000000 (0x0034)              
	int                                                SizeX;                                            		// 0x000034 (0x0004)              
	int                                                SizeY;                                            		// 0x000038 (0x0004)              
	int                                                SizeZ;                                            		// 0x00003C (0x0004)              
};
//0x000040
//Texture2DMipMap[0x1D099788]
struct FTexture2DMipMap
{
	struct FTextureMipBulkData_Mirror                  Data;                                             		// 0x000000 (0x0038)              
	int                                                SizeX;                                            		// 0x000038 (0x0004)              
	int                                                SizeY;                                            		// 0x00003C (0x0004)              
};
//0x00000C
//TextureLinkedListMirror[0x1D099720]
struct FTextureLinkedListMirror
{
	DWORD                                              Element;                                          		// 0x000000 (0x0004)              
	DWORD                                              Next;                                             		// 0x000004 (0x0004)              
	DWORD                                              PrevLink;                                         		// 0x000008 (0x0004)              
};
//0x000000
//TerrainWeightedMaterial[0x1D0996B8]
struct FTerrainWeightedMaterial
{
};
//0x00001C
//SourceTexture2DRegion[0x1D099650]
struct FSourceTexture2DRegion
{
	int                                                OffsetX;                                          		// 0x000000 (0x0004)              
	int                                                OffsetY;                                          		// 0x000004 (0x0004)              
	int                                                SizeX;                                            		// 0x000008 (0x0004)              
	int                                                SizeY;                                            		// 0x00000C (0x0004)              
	int                                                DestOffsetX;                                      		// 0x000010 (0x0004)              
	int                                                DestOffsetY;                                      		// 0x000014 (0x0004)              
	class UTexture2D*                                  Texture2D;                                        		// 0x000018 (0x0004)              
};
//0x000010
//FilterLimit[0x1D0995E8]
struct FFilterLimit
{
	unsigned long                                      Enabled : 1;                                      		// 0x000000 (0x0004) [0x00000001] 
	float                                              Base;                                             		// 0x000004 (0x0004)              
	float                                              NoiseScale;                                       		// 0x000008 (0x0004)              
	float                                              NoiseAmount;                                      		// 0x00000C (0x0004)              
};
//0x000054
//TerrainFilteredMaterial[0x1D099580]
struct FTerrainFilteredMaterial
{
	unsigned long                                      UseNoise : 1;                                     		// 0x000000 (0x0004) [0x00000001] 
	float                                              NoiseScale;                                       		// 0x000004 (0x0004)              
	float                                              NoisePercent;                                     		// 0x000008 (0x0004)              
	struct FFilterLimit                                MinHeight;                                        		// 0x00000C (0x0010)              
	struct FFilterLimit                                MaxHeight;                                        		// 0x00001C (0x0010)              
	struct FFilterLimit                                MinSlope;                                         		// 0x00002C (0x0010)              
	struct FFilterLimit                                MaxSlope;                                         		// 0x00003C (0x0010)              
	float                                              Alpha;                                            		// 0x00004C (0x0004)              
	class UTerrainMaterial*                            Material;                                         		// 0x000050 (0x0004)              
};
//0x000038
//TerrainFoliageMesh[0x1D099518]
struct FTerrainFoliageMesh
{
	class UStaticMesh*                                 StaticMesh;                                       		// 0x000000 (0x0004)              
	class UMaterialInterface*                          Material;                                         		// 0x000004 (0x0004)              
	int                                                Density;                                          		// 0x000008 (0x0004)              
	float                                              MaxDrawRadius;                                    		// 0x00000C (0x0004)              
	float                                              MinTransitionRadius;                              		// 0x000010 (0x0004)              
	float                                              MinScale;                                         		// 0x000014 (0x0004)              
	float                                              MaxScale;                                         		// 0x000018 (0x0004)              
	float                                              MinUniformScale;                                  		// 0x00001C (0x0004)              
	float                                              MaxUniformScale;                                  		// 0x000020 (0x0004)              
	float                                              MinThinningRadius;                                		// 0x000024 (0x0004)              
	int                                                Seed;                                             		// 0x000028 (0x0004)              
	float                                              SwayScale;                                        		// 0x00002C (0x0004)              
	float                                              AlphaMapThreshold;                                		// 0x000030 (0x0004)              
	float                                              SlopeRotationBlend;                               		// 0x000034 (0x0004)              
};
//0x000008
//UIStringSelectionRegion[0x1D0994B0]
struct FUIStringSelectionRegion
{
	int                                                SelectionStartCharIndex;                          		// 0x000000 (0x0004)              
	int                                                SelectionEndCharIndex;                            		// 0x000004 (0x0004)              
};
//0x00000C
//UIListSortingParameters[0x1D099448]
struct FUIListSortingParameters
{
	int                                                PrimaryIndex;                                     		// 0x000000 (0x0004)              
	int                                                SecondaryIndex;                                   		// 0x000004 (0x0004)              
	unsigned long                                      bReversePrimarySorting : 1;                       		// 0x000008 (0x0004) [0x00000001] 
	unsigned long                                      bReverseSecondarySorting : 1;                     		// 0x000008 (0x0004) [0x00000002] 
	unsigned long                                      bCaseSensitive : 1;                               		// 0x000008 (0x0004) [0x00000004] 
	unsigned long                                      bIntSortPrimary : 1;                              		// 0x000008 (0x0004) [0x00000008] 
	unsigned long                                      bIntSortSecondary : 1;                            		// 0x000008 (0x0004) [0x00000010] 
	unsigned long                                      bFloatSortPrimary : 1;                            		// 0x000008 (0x0004) [0x00000020] 
	unsigned long                                      bFloatSortSecondary : 1;                          		// 0x000008 (0x0004) [0x00000040] 
};
//0x000014
//UIListItemDataBinding[0x1D0993E0]
struct FUIListItemDataBinding
{
	class UUIListElementCellProvider*                  DataSourceProvider;                               		// 0x000000 (0x0004)              
	struct FName                                       DataSourceTag;                                    		// 0x000008 (0x0008)              
	int                                                DataSourceIndex;                                  		// 0x000010 (0x0004)              
};
//0x000040
//UIListElementCell[0x1D099378]
struct FUIListElementCell
{
	int                                                ContainerElementIndex;                            		// 0x000000 (0x0004)              
	class UUIList*                                     OwnerList;                                        		// 0x000004 (0x0004)              
	struct FUIStyleReference                           m_CellStyle;                                      		// 0x000008 (0x0020)              
	unsigned char                                      CellState;                                        		// 0x000028 (0x0001)              PROPERTY: EUIListElementState
	unsigned char                                      _0x000029[0x3];                                   		// 0x000029 (0x0003) MISSED OFFSET
	class UUITexture*                                  m_CellBackground;                                 		// 0x00002C (0x0004)              
	unsigned long                                      bScaleContentsToFit : 1;                          		// 0x000030 (0x0004) [0x00000001] 
	struct FName                                       CellDataField;                                    		// 0x000034 (0x0008)              
	class UObject*                                     ValueObject;                                      		// 0x00003C (0x0004)              
};
//0x000030 (0x000070 - 0x000040)
//UIListElementCellTemplate[0x1D099310]
struct FUIListElementCellTemplate : FUIListElementCell
{
	struct FString                                     ColumnHeaderText;                                 		// 0x000040 (0x000C)              
	struct FUIScreenValue_Extent                       CellSize;                                         		// 0x00004C (0x0008)              
	unsigned long                                      bCellSizeIgnoredForScaling : 1;                   		// 0x000054 (0x0004) [0x00000001] 
	struct FUIScreenValue_Position                     CellOffset;                                       		// 0x000058 (0x000C)              
	int                                                CellOffsetRelativeToCell;                         		// 0x000064 (0x0004)              
	unsigned long                                      bAvoidHitByCursor : 1;                            		// 0x000068 (0x0004) [0x00000001] 
	float                                              CellPosition;                                     		// 0x00006C (0x0004)              
};
//0x000021
//UIListItem[0x1D0992A8]
struct FUIListItem
{
	struct FUIListItemDataBinding                      DataSource;                                       		// 0x000000 (0x0014)              
	TArray<struct FUIListElementCell>                  Cells;                                            		// 0x000014 (0x000C)              
	unsigned char                                      ElementState;                                     		// 0x000020 (0x0001)              PROPERTY: EUIListElementState
};
//0x00000C
//UIElementCellSchema[0x1D099240]
struct FUIElementCellSchema
{
	TArray<struct FUIListElementCellTemplate>          Cells;                                            		// 0x000000 (0x000C)              
};
//0x00000C
//SoundEventMapping[0x1D0991D8]
struct FSoundEventMapping
{
	struct FName                                       SoundEventName;                                   		// 0x000000 (0x0008)              
	class USoundCue*                                   SoundToPlay;                                      		// 0x000008 (0x0004)              
};
//0x00000C
//StaticMeshLODElement[0x02FA10A8]
struct FStaticMeshLODElement
{
	class UMaterialInterface*                          Material;                                         		// 0x000000 (0x0004)              
	unsigned long                                      bEnableShadowCasting : 1;                         		// 0x000004 (0x0004) [0x00000001] 
	unsigned long                                      bEnableCollision : 1;                             		// 0x000008 (0x0004) [0x00000001] 
};
//0x00000C
//StaticMeshLODInfo[0x02FA1040]
struct FStaticMeshLODInfo
{
	TArray<struct FStaticMeshLODElement>               Elements;                                         		// 0x000000 (0x000C)              
};

/*
-----------------------------------------------------------------
 - Classes
-----------------------------------------------------------------
*/
//0x00000D (0x000059 - 0x00004C)
//ActorComponent[0x026BF960]
class UActorComponent : public UComponent
{
public:
	DWORD                                              Scene;                                            		// 0x00004C (0x0004)              
	class AActor*                                      Owner;                                            		// 0x000050 (0x0004)              
	unsigned long                                      bAttached : 1;                                    		// 0x000054 (0x0004) [0x00000001] 
	unsigned long                                      bTickInEditor : 1;                                		// 0x000054 (0x0004) [0x00000002] 
	unsigned long                                      bNeedsReattach : 1;                               		// 0x000054 (0x0004) [0x00000004] 
	unsigned long                                      bNeedsUpdateTransform : 1;                        		// 0x000054 (0x0004) [0x00000008] 
	unsigned char                                      TickGroup;                                        		// 0x000058 (0x0001)              PROPERTY: ETickingGroup

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorComponent");
		return pClassPointer;
	};

public:
	void ForceUpdate(bool bTransformOnly);//Engine.ActorComponent.ForceUpdate
	void SetComponentRBFixed(bool bFixed);//Engine.ActorComponent.SetComponentRBFixed
	void SetTickGroup(unsigned char NewTickGroup);//Engine.ActorComponent.SetTickGroup
};
UClass* UActorComponent::pClassPointer = NULL;

//0x0000AB (0x000104 - 0x000059)
//cBlobShadowComponent[0x026BEB20]
class UcBlobShadowComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	unsigned long                                      m_bEnabled : 1;                                   		// 0x00005C (0x0004) [0x00000001] 
	FVector3                                           m_Scale3D;                                        		// 0x000060 (0x000C)              
	FVector3                                           m_Translation;                                    		// 0x00006C (0x000C)              
	class UTexture*                                    m_Texture;                                        		// 0x000078 (0x0004)              
	float                                              m_fCullDistance;                                  		// 0x00007C (0x0004)              
	FMatrix                                            m_CachedParentToWorld;                            		// 0x000080 (0x0040)              
	FMatrix                                            m_LocalToWorld;                                   		// 0x0000C0 (0x0040)              
	DWORD                                              SceneInfo;                                        		// 0x000100 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cBlobShadowComponent");
		return pClassPointer;
	};

public:
	void RecalcLocalToWorld();//Engine.cBlobShadowComponent.RecalcLocalToWorld
	void SetScale3D(FVector3 Scale3D);//Engine.cBlobShadowComponent.SetScale3D
	void SetTranslation(FVector3 Translation);//Engine.cBlobShadowComponent.SetTranslation
};
UClass* UcBlobShadowComponent::pClassPointer = NULL;

//0x000153 (0x0001AC - 0x000059)
//AudioComponent[0x026BFE20]
class UAudioComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	class USoundCue*                                   SoundCue;                                         		// 0x00005C (0x0004)              
	class USoundNode*                                  CueFirstNode;                                     		// 0x000060 (0x0004)              
	TArray<struct FAudioComponentParam>                InstanceParameters;                               		// 0x000064 (0x000C)              
	unsigned long                                      bUseOwnerLocation : 1;                            		// 0x000070 (0x0004) [0x00000001] 
	unsigned long                                      bAutoPlay : 1;                                    		// 0x000070 (0x0004) [0x00000002] 
	unsigned long                                      bAutoDestroy : 1;                                 		// 0x000070 (0x0004) [0x00000004] 
	unsigned long                                      bStopWhenOwnerDestroyed : 1;                      		// 0x000070 (0x0004) [0x00000008] 
	unsigned long                                      bShouldRemainActiveIfDropped : 1;                 		// 0x000070 (0x0004) [0x00000010] 
	unsigned long                                      bWasOccluded : 1;                                 		// 0x000070 (0x0004) [0x00000020] 
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x000070 (0x0004) [0x00000040] 
	unsigned long                                      bWasPlaying : 1;                                  		// 0x000070 (0x0004) [0x00000080] 
	unsigned long                                      bApplyEffects : 1;                                		// 0x000070 (0x0004) [0x00000100] 
	unsigned long                                      bAlwaysPlay : 1;                                  		// 0x000070 (0x0004) [0x00000200] 
	unsigned long                                      bAllowSpatialization : 1;                         		// 0x000070 (0x0004) [0x00000400] 
	unsigned long                                      bIsUISound : 1;                                   		// 0x000070 (0x0004) [0x00000800] 
	unsigned long                                      bIsMusic : 1;                                     		// 0x000070 (0x0004) [0x00001000] 
	unsigned long                                      bNoReverb : 1;                                    		// 0x000070 (0x0004) [0x00002000] 
	unsigned long                                      bFinished : 1;                                    		// 0x000070 (0x0004) [0x00004000] 
	unsigned long                                      bIgnoreForFlushing : 1;                           		// 0x000070 (0x0004) [0x00008000] 
	TArray<DWORD>                                      WaveInstances;                                    		// 0x000074 (0x000C)              
	TArray<unsigned char>                              SoundNodeData;                                    		// 0x000080 (0x000C)              
	unsigned char                                      SoundNodeOffsetMap[0x3C];                         		// 0x00008C (0x003C)              UNKNOWN PROPERTY: MapProperty
	struct FMultiMap_Mirror                            SoundNodeResetWaveMap;                            		// 0x0000C8 (0x003C)              
	DWORD                                              Listener;                                         		// 0x000104 (0x0004)              
	float                                              PlaybackTime;                                     		// 0x000108 (0x0004)              
	class APortalVolume*                               PortalVolume;                                     		// 0x00010C (0x0004)              
	FVector3                                           Location;                                         		// 0x000110 (0x000C)              
	FVector3                                           ComponentLocation;                                		// 0x00011C (0x000C)              
	float                                              SubtitlePriority;                                 		// 0x000128 (0x0004)              
	float                                              FadeInStartTime;                                  		// 0x00012C (0x0004)              
	float                                              FadeInStopTime;                                   		// 0x000130 (0x0004)              
	float                                              FadeInTargetVolume;                               		// 0x000134 (0x0004)              
	float                                              FadeOutStartTime;                                 		// 0x000138 (0x0004)              
	float                                              FadeOutStopTime;                                  		// 0x00013C (0x0004)              
	float                                              FadeOutTargetVolume;                              		// 0x000140 (0x0004)              
	float                                              AdjustVolumeStartTime;                            		// 0x000144 (0x0004)              
	float                                              AdjustVolumeStopTime;                             		// 0x000148 (0x0004)              
	float                                              AdjustVolumeTargetVolume;                         		// 0x00014C (0x0004)              
	float                                              CurrAdjustVolumeTargetVolume;                     		// 0x000150 (0x0004)              
	class USoundNode*                                  CurrentNotifyBufferFinishedHook;                  		// 0x000154 (0x0004)              
	FVector3                                           CurrentLocation;                                  		// 0x000158 (0x000C)              
	float                                              CurrentVolume;                                    		// 0x000164 (0x0004)              
	float                                              CurrentPitch;                                     		// 0x000168 (0x0004)              
	float                                              CurrentHighFrequencyGain;                         		// 0x00016C (0x0004)              
	int                                                CurrentUseSpatialization;                         		// 0x000170 (0x0004)              
	int                                                CurrentUseSeamlessLooping;                        		// 0x000174 (0x0004)              
	float                                              CurrentVolumeMultiplier;                          		// 0x000178 (0x0004)              
	float                                              CurrentPitchMultiplier;                           		// 0x00017C (0x0004)              
	float                                              CurrentVoiceCenterChannelVolume;                  		// 0x000180 (0x0004)              
	float                                              CurrentVoiceRadioVolume;                          		// 0x000184 (0x0004)              
	float                                              VolumeMultiplier;                                 		// 0x000188 (0x0004)              
	float                                              PitchMultiplier;                                  		// 0x00018C (0x0004)              
	float                                              OcclusionCheckInterval;                           		// 0x000190 (0x0004)              
	double                                             LastOcclusionCheckTime;                           		// 0x000194 (0x0008)              
	class UDrawSoundRadiusComponent*                   PreviewSoundRadius;                               		// 0x00019C (0x0004)              
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                      		// 0x0001A0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AudioComponent");
		return pClassPointer;
	};

public:
	void OcclusionChanged(bool bNowOccluded);//Engine.AudioComponent.OcclusionChanged
	void Play();//Engine.AudioComponent.Play
	void Stop();//Engine.AudioComponent.Stop
	bool IsPlaying();//Engine.AudioComponent.IsPlaying
	void FadeOut(float FadeOutDuration,float FadeVolumeLevel);//Engine.AudioComponent.FadeOut
	void FadeIn(float FadeInDuration,float FadeVolumeLevel);//Engine.AudioComponent.FadeIn
	void OnAudioFinished(class UAudioComponent* AC);//Engine.AudioComponent.OnAudioFinished
	void AdjustVolume(float AdjustVolumeDuration,float AdjustVolumeLevel);//Engine.AudioComponent.AdjustVolume
	void SetWaveParameter(struct FName InName,class USoundNodeWave* InWave);//Engine.AudioComponent.SetWaveParameter
	void SetFloatParameter(struct FName InName,float InFloat);//Engine.AudioComponent.SetFloatParameter
	void ResetToDefaults();//Engine.AudioComponent.ResetToDefaults
};
UClass* UAudioComponent::pClassPointer = NULL;

//0x000187 (0x0001E0 - 0x000059)
//PrimitiveComponent[0x026BF5D0]
class UPrimitiveComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	DWORD                                              SceneInfo;                                        		// 0x00005C (0x0004)              
	int                                                DetachFence;                                      		// 0x000060 (0x0004)              
	float                                              LocalToWorldDeterminant;                          		// 0x000064 (0x0004)              
	unsigned char                                      _0x000068[0x8];                                   		// 0x000068 (0x0008) MISSED OFFSET
	FMatrix                                            LocalToWorld;                                     		// 0x000070 (0x0040)              
	int                                                MotionBlurInfoIndex;                              		// 0x0000B0 (0x0004)              
	TArray<DWORD>                                      DecalList;                                        		// 0x0000B4 (0x000C)              
	int                                                Tag;                                              		// 0x0000C0 (0x0004)              
	class UPrimitiveComponent*                         ShadowParent;                                     		// 0x0000C4 (0x0004)              
	class UFogVolumeDensityComponent*                  FogVolumeComponent;                               		// 0x0000C8 (0x0004)              
	struct FBoxSphereBounds                            Bounds;                                           		// 0x0000CC (0x001C)              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0000E8 (0x0004)              
	float                                              CullDistance;                                     		// 0x0000EC (0x0004)              
	float                                              CachedCullDistance;                               		// 0x0000F0 (0x0004)              
	unsigned char                                      DepthPriorityGroup;                               		// 0x0000F4 (0x0001)              PROPERTY: ESceneDepthPriorityGroup
	unsigned char                                      ViewOwnerDepthPriorityGroup;                      		// 0x0000F5 (0x0001)              PROPERTY: ESceneDepthPriorityGroup
	unsigned char                                      DetailMode;                                       		// 0x0000F6 (0x0001)              PROPERTY: EDetailMode
	unsigned char                                      _0x0000F7[0x1];                                   		// 0x0000F7 (0x0001) MISSED OFFSET
	float                                              MotionBlurScale;                                  		// 0x0000F8 (0x0004)              
	unsigned long                                      bUseViewOwnerDepthPriorityGroup : 1;              		// 0x0000FC (0x0004) [0x00000001] 
	unsigned long                                      bAllowCullDistanceVolume : 1;                     		// 0x0000FC (0x0004) [0x00000002] 
	unsigned long                                      HiddenGame : 1;                                   		// 0x0000FC (0x0004) [0x00000004] 
	unsigned long                                      HiddenEditor : 1;                                 		// 0x0000FC (0x0004) [0x00000008] 
	unsigned long                                      m_bShowCollision : 1;                             		// 0x0000FC (0x0004) [0x00000010] 
	unsigned long                                      bOwnerNoSee : 1;                                  		// 0x0000FC (0x0004) [0x00000020] 
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x0000FC (0x0004) [0x00000040] 
	unsigned long                                      bIgnoreOwnerHidden : 1;                           		// 0x0000FC (0x0004) [0x00000080] 
	unsigned long                                      bUseAsOccluder : 1;                               		// 0x0000FC (0x0004) [0x00000100] 
	unsigned long                                      bAllowApproximateOcclusion : 1;                   		// 0x0000FC (0x0004) [0x00000200] 
	unsigned long                                      bSelectable : 1;                                  		// 0x0000FC (0x0004) [0x00000400] 
	unsigned long                                      bAcceptsDecals : 1;                               		// 0x0000FC (0x0004) [0x00000800] 
	unsigned long                                      bAcceptsDecalsDuringGameplay : 1;                 		// 0x0000FC (0x0004) [0x00001000] 
	unsigned long                                      bIsRefreshingDecals : 1;                          		// 0x0000FC (0x0004) [0x00002000] 
	unsigned long                                      bAcceptsFoliage : 1;                              		// 0x0000FC (0x0004) [0x00004000] 
	int                                                TranslucencySortPriority;                         		// 0x000100 (0x0004)              
	unsigned long                                      bWriteOpaqueAlpha : 1;                            		// 0x000104 (0x0004) [0x00000001] 
	unsigned long                                      CastShadow : 1;                                   		// 0x000104 (0x0004) [0x00000002] 
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x000104 (0x0004) [0x00000004] 
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x000104 (0x0004) [0x00000008] 
	unsigned long                                      bCastHiddenShadow : 1;                            		// 0x000104 (0x0004) [0x00000010] 
	unsigned long                                      bCastCompositeShadow : 1;                         		// 0x000104 (0x0004) [0x00000020] 
	unsigned long                                      bExcludeFromLightEnvironmentBounds : 1;           		// 0x000104 (0x0004) [0x00000040] 
	unsigned long                                      bLightMapAndAOShadowsOnly : 1;                    		// 0x000104 (0x0004) [0x00000080] 
	unsigned long                                      bAcceptsLights : 1;                               		// 0x000104 (0x0004) [0x00000100] 
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x000104 (0x0004) [0x00000200] 
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x000108 (0x0004)              
	struct FsAPBCollision                              APBCollision;                                     		// 0x00010C (0x0014)              
	unsigned long                                      bUsePrecomputedShadows : 1;                       		// 0x000120 (0x0004) [0x00000001] 
	unsigned long                                      bCullModulatedShadowOnBackfaces : 1;              		// 0x000120 (0x0004) [0x00000002] 
	unsigned long                                      bCullModulatedShadowOnEmissive : 1;               		// 0x000120 (0x0004) [0x00000004] 
	unsigned long                                      bAllowAmbientOcclusion : 1;                       		// 0x000120 (0x0004) [0x00000008] 
	unsigned long                                      CollideActors : 1;                                		// 0x000120 (0x0004) [0x00000010] 
	unsigned long                                      AlwaysCheckCollision : 1;                         		// 0x000120 (0x0004) [0x00000020] 
	unsigned long                                      BlockActors : 1;                                  		// 0x000120 (0x0004) [0x00000040] 
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x000120 (0x0004) [0x00000080] 
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x000120 (0x0004) [0x00000100] 
	unsigned long                                      BlockRigidBody : 1;                               		// 0x000120 (0x0004) [0x00000200] 
	unsigned long                                      RigidBodyIgnorePawns : 1;                         		// 0x000120 (0x0004) [0x00000400] 
	unsigned char                                      RBChannel;                                        		// 0x000124 (0x0001)              PROPERTY: ERBCollisionChannel
	unsigned char                                      _0x000125[0x3];                                   		// 0x000125 (0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                            		// 0x000128 (0x0004)              
	unsigned long                                      bDisableAllRigidBody : 1;                         		// 0x00012C (0x0004) [0x00000001] 
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x00012C (0x0004) [0x00000002] 
	unsigned long                                      bFluidDrain : 1;                                  		// 0x00012C (0x0004) [0x00000004] 
	unsigned long                                      bFluidTwoWay : 1;                                 		// 0x00012C (0x0004) [0x00000008] 
	unsigned long                                      bIgnoreRadialImpulse : 1;                         		// 0x00012C (0x0004) [0x00000010] 
	unsigned long                                      bIgnoreRadialForce : 1;                           		// 0x00012C (0x0004) [0x00000020] 
	unsigned long                                      bIgnoreForceField : 1;                            		// 0x00012C (0x0004) [0x00000040] 
	unsigned long                                      bUseCompartment : 1;                              		// 0x00012C (0x0004) [0x00000080] 
	unsigned long                                      AlwaysLoadOnClient : 1;                           		// 0x00012C (0x0004) [0x00000100] 
	unsigned long                                      AlwaysLoadOnServer : 1;                           		// 0x00012C (0x0004) [0x00000200] 
	unsigned long                                      bIgnoreHiddenActorsMembership : 1;                		// 0x00012C (0x0004) [0x00000400] 
	unsigned long                                      bWasSNFiltered : 1;                               		// 0x00012C (0x0004) [0x00000800] 
	TArray<int>                                        OctreeNodes;                                      		// 0x000130 (0x000C)              
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x00013C (0x0004)              
	class URB_BodyInstance*                            BodyInstance;                                     		// 0x000140 (0x0004)              
	unsigned char                                      RBDominanceGroup;                                 		// 0x000144 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000145[0xB];                                   		// 0x000145 (0x000B) MISSED OFFSET
	FMatrix                                            CachedParentToWorld;                              		// 0x000150 (0x0040)              
	FVector3                                           Translation;                                      		// 0x000190 (0x000C)              
	FRotator                                           Rotation;                                         		// 0x00019C (0x000C)              
	float                                              Scale;                                            		// 0x0001A8 (0x0004)              
	FVector3                                           Scale3D;                                          		// 0x0001AC (0x000C)              
	unsigned long                                      AbsoluteTranslation : 1;                          		// 0x0001B8 (0x0004) [0x00000001] 
	unsigned long                                      AbsoluteRotation : 1;                             		// 0x0001B8 (0x0004) [0x00000002] 
	unsigned long                                      AbsoluteScale : 1;                                		// 0x0001B8 (0x0004) [0x00000004] 
	double                                             LastSubmitTime;                                   		// 0x0001BC (0x0008)              
	double                                             LastRenderTime;                                   		// 0x0001C4 (0x0008)              
	TArray<struct FString>                             m_asStaticDecals;                                 		// 0x0001CC (0x000C)              
	unsigned char                                      m_eAPBType;                                       		// 0x0001D8 (0x0001)              PROPERTY: etAPBPrimitiveType
	unsigned char                                      m_TNTPrimitiveType;                               		// 0x0001D9 (0x0001)              PROPERTY: etTNTStatPrimitiveType
	unsigned char                                      m_StatLodOverride;                                		// 0x0001DA (0x0001)              PROPERTY: 
	unsigned char                                      _0x0001DB[0x1];                                   		// 0x0001DB (0x0001) MISSED OFFSET
	float                                              ScriptRigidBodyCollisionThreshold;                		// 0x0001DC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PrimitiveComponent");
		return pClassPointer;
	};

public:
	void SetIgnoreOwnerHidden(bool bNewIgnoreOwnerHidden);//Engine.PrimitiveComponent.SetIgnoreOwnerHidden
	void SetAbsolute(bool NewAbsoluteTranslation,bool NewAbsoluteRotation,bool NewAbsoluteScale);//Engine.PrimitiveComponent.SetAbsolute
	void SetRotation(FRotator NewRotation);//Engine.PrimitiveComponent.SetRotation
	void AddForce(FVector3 Force,FVector3 Position,struct FName BoneName);//Engine.PrimitiveComponent.AddForce
	void SetHidden(bool NewHidden);//Engine.PrimitiveComponent.SetHidden
	void SetTranslation(FVector3 NewTranslation);//Engine.PrimitiveComponent.SetTranslation
	void SetRBLinearVelocity(FVector3 NewVel,bool bAddToCurrent);//Engine.PrimitiveComponent.SetRBLinearVelocity
	void SetCastShadow(bool bNewCastShadow);//Engine.PrimitiveComponent.SetCastShadow
	void SetRBRotation(FRotator NewRot,struct FName BoneName);//Engine.PrimitiveComponent.SetRBRotation
	float RetCullDistance();//Engine.PrimitiveComponent.RetCullDistance
	void SetLightEnvironment(class ULightEnvironmentComponent* NewLightEnvironment);//Engine.PrimitiveComponent.SetLightEnvironment
	void SetShadowParent(class UPrimitiveComponent* NewShadowParent);//Engine.PrimitiveComponent.SetShadowParent
	class URB_BodyInstance* GetRootBodyInstance();//Engine.PrimitiveComponent.GetRootBodyInstance
	void SetRigidBodyIsTrigger(bool bNewIsTrigger);//Engine.PrimitiveComponent.SetRigidBodyIsTrigger
	void PutRigidBodyToSleep(struct FName BoneName);//Engine.PrimitiveComponent.PutRigidBodyToSleep
	void AddImpulse(FVector3 Impulse,FVector3 Position,struct FName BoneName,bool bVelChange);//Engine.PrimitiveComponent.AddImpulse
	void SetRBPosition(FVector3 NewPos,struct FName BoneName);//Engine.PrimitiveComponent.SetRBPosition
	void SetScale3D(FVector3 NewScale3D);//Engine.PrimitiveComponent.SetScale3D
	void SetAPBCollision(struct FsAPBCollision newAPBCollision);//Engine.PrimitiveComponent.SetAPBCollision
	void SetBlockRigidBody(bool bNewBlockRigidBody);//Engine.PrimitiveComponent.SetBlockRigidBody
	void InitRBPhys();//Engine.PrimitiveComponent.InitRBPhys
	void SetRBChannel(unsigned char Channel);//Engine.PrimitiveComponent.SetRBChannel
	void SetRBDominanceGroup(unsigned char InDomGroup);//Engine.PrimitiveComponent.SetRBDominanceGroup
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);//Engine.PrimitiveComponent.SetOnlyOwnerSee
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);//Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
	void SetRBCollidesWithChannel(unsigned char Channel,bool bNewCollides);//Engine.PrimitiveComponent.SetRBCollidesWithChannel
	void WakeRigidBody(struct FName BoneName);//Engine.PrimitiveComponent.WakeRigidBody
	void SetRigidBodyGravityResponse(bool bGravityResponse);//Engine.PrimitiveComponent.SetRigidBodyGravityResponse
	void AddRadialImpulse(FVector3 Origin,float Radius,float Strength,unsigned char Falloff,bool bVelChange);//Engine.PrimitiveComponent.AddRadialImpulse
	void SetScale(float NewScale);//Engine.PrimitiveComponent.SetScale
	void SetLightingChannels(struct FLightingChannelContainer NewLightingChannels);//Engine.PrimitiveComponent.SetLightingChannels
	FRotator GetRotation();//Engine.PrimitiveComponent.GetRotation
	void SetRigidBodyAwake(bool bAwake);//Engine.PrimitiveComponent.SetRigidBodyAwake
	bool RigidBodyIsAwake(struct FName BoneName);//Engine.PrimitiveComponent.RigidBodyIsAwake
	void AddRadialForce(FVector3 Origin,float Radius,float Strength,unsigned char Falloff);//Engine.PrimitiveComponent.AddRadialForce
	void SetViewOwnerDepthPriorityGroup(bool bNewUseViewOwnerDepthPriorityGroup,unsigned char NewViewOwnerDepthPriorityGroup);//Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup
	void SetCullDistance(float NewCullDistance);//Engine.PrimitiveComponent.SetCullDistance
	void SetActorCollision(bool NewCollideActors,bool NewBlockActors,bool NewAlwaysCheckCollision);//Engine.PrimitiveComponent.SetActorCollision
	FVector3 GetPosition();//Engine.PrimitiveComponent.GetPosition
	void SetRBAngularVelocity(FVector3 NewAngVel,bool bAddToCurrent);//Engine.PrimitiveComponent.SetRBAngularVelocity
	void SetOwnerNoSee(bool bNewOwnerNoSee);//Engine.PrimitiveComponent.SetOwnerNoSee
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);//Engine.PrimitiveComponent.SetPhysMaterialOverride
	void SetTraceBlocking(bool NewBlockZeroExtent,bool NewBlockNonZeroExtent);//Engine.PrimitiveComponent.SetTraceBlocking
	void SetDepthPriorityGroup(unsigned char NewDepthPriorityGroup);//Engine.PrimitiveComponent.SetDepthPriorityGroup
};
UClass* UPrimitiveComponent::pClassPointer = NULL;

//0x00000C (0x0001EC - 0x0001E0)
//CylinderComponent[0x026BF700]
class UCylinderComponent : public UPrimitiveComponent
{
public:
	float                                              CollisionHeight;                                  		// 0x0001E0 (0x0004)              
	float                                              CollisionRadius;                                  		// 0x0001E4 (0x0004)              
	class URB_BodySetup*                               BodySetup;                                        		// 0x0001E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CylinderComponent");
		return pClassPointer;
	};

public:
	void UpdateCosmeticCollision();//Engine.CylinderComponent.UpdateCosmeticCollision
	void SetCylinderSize(float NewRadius,float NewHeight);//Engine.CylinderComponent.SetCylinderSize
};
UClass* UCylinderComponent::pClassPointer = NULL;

//0x000047 (0x0000A0 - 0x000059)
//cVisualFXComponent[0x026BEEB0]
class UcVisualFXComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	TArray<class AActor*>                              aReplacedActors;                                  		// 0x00005C (0x000C)              
	struct FEnumeratedName                             m_eVFXType;                                       		// 0x000068 (0x0010)              
	TArray<class UcVisualFXBase*>                      m_VFXTemplates;                                   		// 0x000078 (0x000C)              
	TArray<class UcVisualFXBase*>                      m_VFXInstances;                                   		// 0x000084 (0x000C)              
	class AActor*                                      AttachmentBase;                                   		// 0x000090 (0x0004)              
	class USkeletalMeshComponent*                      AttachmentSkelComp;                               		// 0x000094 (0x0004)              
	struct FName                                       AttachmentName;                                   		// 0x000098 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cVisualFXComponent");
		return pClassPointer;
	};

public:
	void DestroyVFX();//Engine.cVisualFXComponent.DestroyVFX
};
UClass* UcVisualFXComponent::pClassPointer = NULL;

//0x000013 (0x00006C - 0x000059)
//LightEnvironmentComponent[0x026BF370]
class ULightEnvironmentComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                     		// 0x00005C (0x0004) [0x00000001] 
	unsigned long                                      m_bForceIncludeExcluded : 1;                      		// 0x00005C (0x0004) [0x00000002] 
	float                                              m_ExcludedLightBlend;                             		// 0x000060 (0x0004)              
	double                                             LastRenderTime;                                   		// 0x000064 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LightEnvironmentComponent");
		return pClassPointer;
	};

public:
	void SetEnabled(bool bNewEnabled);//Engine.LightEnvironmentComponent.SetEnabled
};
UClass* ULightEnvironmentComponent::pClassPointer = NULL;

//0x000078 (0x0000E4 - 0x00006C)
//DynamicLightEnvironmentComponent[0x026BF4A0]
class UDynamicLightEnvironmentComponent : public ULightEnvironmentComponent
{
public:
	DWORD                                              State;                                            		// 0x00006C (0x0004)              
	float                                              InvisibleUpdateTime;                              		// 0x000070 (0x0004)              
	float                                              MinTimeBetweenFullUpdates;                        		// 0x000074 (0x0004)              
	int                                                NumVolumeVisibilitySamples;                       		// 0x000078 (0x0004)              
	struct FLinearColor                                AmbientShadowColor;                               		// 0x00007C (0x0010)              
	FVector3                                           AmbientShadowSourceDirection;                     		// 0x00008C (0x000C)              
	struct FLinearColor                                AmbientGlow;                                      		// 0x000098 (0x0010)              
	float                                              LightDesaturation;                                		// 0x0000A8 (0x0004)              
	float                                              LightDistance;                                    		// 0x0000AC (0x0004)              
	float                                              ShadowDistance;                                   		// 0x0000B0 (0x0004)              
	unsigned long                                      bCastShadows : 1;                                 		// 0x0000B4 (0x0004) [0x00000001] 
	unsigned long                                      bDynamic : 1;                                     		// 0x0000B4 (0x0004) [0x00000002] 
	unsigned long                                      bSynthesizeDirectionalLight : 1;                  		// 0x0000B4 (0x0004) [0x00000004] 
	unsigned long                                      bSynthesizeSHLight : 1;                           		// 0x0000B4 (0x0004) [0x00000008] 
	unsigned long                                      bFreeze : 1;                                      		// 0x0000B4 (0x0004) [0x00000010] 
	unsigned long                                      m_bWorldSpaceVisibilityOriginOffset : 1;          		// 0x0000B4 (0x0004) [0x00000020] 
	unsigned long                                      m_bAllowSHLightBeforeModShadows : 1;              		// 0x0000B4 (0x0004) [0x00000040] 
	float                                              ModShadowFadeoutTime;                             		// 0x0000B8 (0x0004)              
	float                                              ModShadowFadeoutExponent;                         		// 0x0000BC (0x0004)              
	unsigned char                                      ShadowFilterQuality;                              		// 0x0000C0 (0x0001)              PROPERTY: EShadowFilterQuality
	unsigned char                                      LightShadowMode;                                  		// 0x0000C1 (0x0001)              PROPERTY: ELightShadowMode
	unsigned char                                      _0x0000C2[0x2];                                   		// 0x0000C2 (0x0002) MISSED OFFSET
	float                                              BouncedLightingIntensity;                         		// 0x0000C4 (0x0004)              
	float                                              BouncedLightingDesaturation;                      		// 0x0000C8 (0x0004)              
	int                                                m_nMaxSkylightRays;                               		// 0x0000CC (0x0004)              
	FVector3                                           m_VisibilityOriginOffset;                         		// 0x0000D0 (0x000C)              
	float                                              m_MinShadowInterpTime;                            		// 0x0000DC (0x0004)              
	int                                                m_LightEnvironmentListIndex;                      		// 0x0000E0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DynamicLightEnvironmentComponent");
		return pClassPointer;
	};
};
UClass* UDynamicLightEnvironmentComponent::pClassPointer = NULL;

//0x000010 (0x0001F0 - 0x0001E0)
//MeshComponent[0x026BEC50]
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  Materials;                                        		// 0x0001E0 (0x000C)              
	DWORD                                              m_LODPolicy;                                      		// 0x0001EC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MeshComponent");
		return pClassPointer;
	};

public:
	int GetNumElements();//Engine.MeshComponent.GetNumElements
	class UMaterialInstanceTimeVarying* CreateAndSetMaterialInstanceTimeVarying(int ElementIndex);//Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying
	class UMaterialInterface* GetMaterial(int ElementIndex);//Engine.MeshComponent.GetMaterial
	void SetMaterial(int ElementIndex,class UMaterialInterface* Material);//Engine.MeshComponent.SetMaterial
	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant(int ElementIndex);//Engine.MeshComponent.CreateAndSetMaterialInstanceConstant
};
UClass* UMeshComponent::pClassPointer = NULL;

//0x000060 (0x000250 - 0x0001F0)
//StaticMeshComponent[0x026BED80]
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                   		// 0x0001F0 (0x0004)              
	int                                                PreviousLODLevel;                                 		// 0x0001F4 (0x0004)              
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0001F8 (0x0004)              
	DWORD                                              WireframeColor;                                   		// 0x0001FC (0x0004)              
	unsigned long                                      bIgnoreInstanceForTextureStreaming : 1;           		// 0x000200 (0x0004) [0x00000001] 
	unsigned long                                      bOverrideLightMapResolution : 1;                  		// 0x000200 (0x0004) [0x00000002] 
	int                                                OverriddenLightMapResolution;                     		// 0x000204 (0x0004)              
	int                                                SubDivisionStepSize;                              		// 0x000208 (0x0004)              
	int                                                MinSubDivisions;                                  		// 0x00020C (0x0004)              
	int                                                MaxSubDivisions;                                  		// 0x000210 (0x0004)              
	unsigned long                                      bUseSubDivisions : 1;                             		// 0x000214 (0x0004) [0x00000001] 
	unsigned long                                      bSkipLightmapInit : 1;                            		// 0x000214 (0x0004) [0x00000002] 
	TArray<struct FGuid>                               IrrelevantLights;                                 		// 0x000218 (0x000C)              
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                          		// 0x000224 (0x000C)              
	TArray<struct FMaterialArray>                      LODMaterials;                                     		// 0x000230 (0x000C)              
	float                                              m_fDepthBias;                                     		// 0x00023C (0x0004)              
	float                                              m_fSlopeScaleDepthBias;                           		// 0x000240 (0x0004)              
	struct FRenderCommandFence                         ReleaseLightmapFence;                             		// 0x000244 (0x0004)              
	struct FName                                       m_VertexLitComponent;                             		// 0x000248 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.StaticMeshComponent");
		return pClassPointer;
	};

public:
	bool SetStaticMesh(class UStaticMesh* NewMesh);//Engine.StaticMeshComponent.SetStaticMesh
	void DisableRBCollisionWithSMC(class UStaticMeshComponent* OtherSMC,bool bDisabled);//Engine.StaticMeshComponent.DisableRBCollisionWithSMC
};
UClass* UStaticMeshComponent::pClassPointer = NULL;

//0x0003FC (0x000440 - 0x000044)
//Engine[0x026BC3F0]
class UEngine : public USubsystem
{
public:
	class UFont*                                       TinyFont;                                         		// 0x000044 (0x0004)              
	struct FString                                     TinyFontName;                                     		// 0x000048 (0x000C)              
	class UFont*                                       SmallFont;                                        		// 0x000054 (0x0004)              
	struct FString                                     SmallFontName;                                    		// 0x000058 (0x000C)              
	class UFont*                                       MediumFont;                                       		// 0x000064 (0x0004)              
	struct FString                                     MediumFontName;                                   		// 0x000068 (0x000C)              
	class UFont*                                       LargeFont;                                        		// 0x000074 (0x0004)              
	struct FString                                     LargeFontName;                                    		// 0x000078 (0x000C)              
	class UFont*                                       SubtitleFont;                                     		// 0x000084 (0x0004)              
	struct FString                                     SubtitleFontName;                                 		// 0x000088 (0x000C)              
	TArray<class UFont*>                               AdditionalFonts;                                  		// 0x000094 (0x000C)              
	TArray<struct FString>                             AdditionalFontNames;                              		// 0x0000A0 (0x000C)              
	class UClass*                                      ConsoleClass;                                     		// 0x0000AC (0x0004)              
	struct FString                                     ConsoleClassName;                                 		// 0x0000B0 (0x000C)              
	class UClass*                                      GameViewportClientClass;                          		// 0x0000BC (0x0004)              
	struct FString                                     GameViewportClientClassName;                      		// 0x0000C0 (0x000C)              
	class UClass*                                      DataStoreClientClass;                             		// 0x0000CC (0x0004)              
	struct FString                                     DataStoreClientClassName;                         		// 0x0000D0 (0x000C)              
	class UClass*                                      LocalPlayerClass;                                 		// 0x0000DC (0x0004)              
	struct FString                                     LocalPlayerClassName;                             		// 0x0000E0 (0x000C)              
	class UMaterial*                                   DefaultMaterial;                                  		// 0x0000EC (0x0004)              
	struct FString                                     DefaultMaterialName;                              		// 0x0000F0 (0x000C)              
	class UTexture*                                    DefaultTexture;                                   		// 0x0000FC (0x0004)              
	struct FString                                     DefaultTextureName;                               		// 0x000100 (0x000C)              
	class UMaterial*                                   WireframeMaterial;                                		// 0x00010C (0x0004)              
	struct FString                                     WireframeMaterialName;                            		// 0x000110 (0x000C)              
	class UMaterial*                                   EmissiveTexturedMaterial;                         		// 0x00011C (0x0004)              
	struct FString                                     EmissiveTexturedMaterialName;                     		// 0x000120 (0x000C)              
	class UMaterial*                                   GeomMaterial;                                     		// 0x00012C (0x0004)              
	struct FString                                     GeomMaterialName;                                 		// 0x000130 (0x000C)              
	class UMaterial*                                   DefaultFogVolumeMaterial;                         		// 0x00013C (0x0004)              
	struct FString                                     DefaultFogVolumeMaterialName;                     		// 0x000140 (0x000C)              
	class UMaterial*                                   TickMaterial;                                     		// 0x00014C (0x0004)              
	struct FString                                     TickMaterialName;                                 		// 0x000150 (0x000C)              
	class UMaterial*                                   CrossMaterial;                                    		// 0x00015C (0x0004)              
	struct FString                                     CrossMaterialName;                                		// 0x000160 (0x000C)              
	class UMaterial*                                   LevelColorationLitMaterial;                       		// 0x00016C (0x0004)              
	struct FString                                     LevelColorationLitMaterialName;                   		// 0x000170 (0x000C)              
	class UMaterial*                                   LevelColorationUnlitMaterial;                     		// 0x00017C (0x0004)              
	struct FString                                     LevelColorationUnlitMaterialName;                 		// 0x000180 (0x000C)              
	class UMaterial*                                   RemoveSurfaceMaterial;                            		// 0x00018C (0x0004)              
	struct FString                                     RemoveSurfaceMaterialName;                        		// 0x000190 (0x000C)              
	class UMaterial*                                   VertexColorMaterial;                              		// 0x00019C (0x0004)              
	struct FString                                     VertexColorMaterialName;                          		// 0x0001A0 (0x000C)              
	TArray<DWORD>                                      LightComplexityColors;                            		// 0x0001AC (0x000C)              
	TArray<DWORD>                                      ShaderComplexityColors;                           		// 0x0001B8 (0x000C)              
	unsigned long                                      bUsePixelShaderComplexity : 1;                    		// 0x0001C4 (0x0004) [0x00000001] 
	unsigned long                                      bUseAdditiveComplexity : 1;                       		// 0x0001C4 (0x0004) [0x00000002] 
	unsigned long                                      m_bAboveGarbageCollectionMemoryCeiling : 1;       		// 0x0001C4 (0x0004) [0x00000004] 
	unsigned long                                      m_bEnableAPBMapFixup : 1;                         		// 0x0001C4 (0x0004) [0x00000008] 
	unsigned long                                      m_bShowWarningMarker : 1;                         		// 0x0001C4 (0x0004) [0x00000010] 
	unsigned long                                      bUseSound : 1;                                    		// 0x0001C4 (0x0004) [0x00000020] 
	unsigned long                                      bDisableSoundUpdates : 1;                         		// 0x0001C4 (0x0004) [0x00000040] 
	unsigned long                                      bUseTextureStreaming : 1;                         		// 0x0001C4 (0x0004) [0x00000080] 
	unsigned long                                      bUseLightingTextureStreaming : 1;                 		// 0x0001C4 (0x0004) [0x00000100] 
	unsigned long                                      bUseBackgroundLevelStreaming : 1;                 		// 0x0001C4 (0x0004) [0x00000200] 
	unsigned long                                      bSubtitlesEnabled : 1;                            		// 0x0001C4 (0x0004) [0x00000400] 
	unsigned long                                      bSubtitlesForcedOff : 1;                          		// 0x0001C4 (0x0004) [0x00000800] 
	unsigned long                                      bForceStaticTerrain : 1;                          		// 0x0001C4 (0x0004) [0x00001000] 
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x0001C4 (0x0004) [0x00002000] 
	unsigned long                                      bUsePostProcessEffects : 1;                       		// 0x0001C4 (0x0004) [0x00004000] 
	unsigned long                                      bOnScreenKismetWarnings : 1;                      		// 0x0001C4 (0x0004) [0x00008000] 
	unsigned long                                      bEnableKismetLogging : 1;                         		// 0x0001C4 (0x0004) [0x00010000] 
	unsigned long                                      bAllowMatureLanguage : 1;                         		// 0x0001C4 (0x0004) [0x00020000] 
	unsigned long                                      bRenderTerrainCollisionAsOverlay : 1;             		// 0x0001C4 (0x0004) [0x00040000] 
	unsigned long                                      bDisablePhysXHardwareSupport : 1;                 		// 0x0001C4 (0x0004) [0x00080000] 
	unsigned long                                      bPauseOnLossOfFocus : 1;                          		// 0x0001C4 (0x0004) [0x00100000] 
	unsigned long                                      bEnableColorClear : 1;                            		// 0x0001C4 (0x0004) [0x00200000] 
	unsigned long                                      bUseDynamicOrigin : 1;                            		// 0x0001C4 (0x0004) [0x00400000] 
	unsigned long                                      bShowOnscreenWarnings : 1;                        		// 0x0001C4 (0x0004) [0x00800000] 
	float                                              MaxPixelShaderAdditiveComplexityCount;            		// 0x0001C8 (0x0004)              
	float                                              MaxPixelShaderOpaqueComplexityCount;              		// 0x0001CC (0x0004)              
	float                                              MaxVertexShaderComplexityCount;                   		// 0x0001D0 (0x0004)              
	float                                              MinTextureDensity;                                		// 0x0001D4 (0x0004)              
	float                                              IdealTextureDensity;                              		// 0x0001D8 (0x0004)              
	float                                              MaxTextureDensity;                                		// 0x0001DC (0x0004)              
	TArray<struct FStatColorMapping>                   StatColorMappings;                                		// 0x0001E0 (0x000C)              
	class UMaterial*                                   EditorBrushMaterial;                              		// 0x0001EC (0x0004)              
	struct FString                                     EditorBrushMaterialName;                          		// 0x0001F0 (0x000C)              
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x0001FC (0x0004)              
	struct FString                                     DefaultPhysMaterialName;                          		// 0x000200 (0x000C)              
	class UMaterial*                                   TerrainErrorMaterial;                             		// 0x00020C (0x0004)              
	struct FString                                     TerrainErrorMaterialName;                         		// 0x000210 (0x000C)              
	int                                                TerrainMaterialMaxTextureCount;                   		// 0x00021C (0x0004)              
	int                                                TerrainTessellationCheckCount;                    		// 0x000220 (0x0004)              
	float                                              TerrainTessellationCheckDistance;                 		// 0x000224 (0x0004)              
	class UClass*                                      OnlineSubsystemClass;                             		// 0x000228 (0x0004)              
	struct FString                                     DefaultOnlineSubsystemName;                       		// 0x00022C (0x000C)              
	class UPostProcessChain*                           DefaultPostProcess;                               		// 0x000238 (0x0004)              
	struct FString                                     DefaultPostProcessName;                           		// 0x00023C (0x000C)              
	class UPostProcessChain*                           ThumbnailSkeletalMeshPostProcess;                 		// 0x000248 (0x0004)              
	struct FString                                     ThumbnailSkeletalMeshPostProcessName;             		// 0x00024C (0x000C)              
	class UPostProcessChain*                           ThumbnailParticleSystemPostProcess;               		// 0x000258 (0x0004)              
	struct FString                                     ThumbnailParticleSystemPostProcessName;           		// 0x00025C (0x000C)              
	class UPostProcessChain*                           ThumbnailMaterialPostProcess;                     		// 0x000268 (0x0004)              
	struct FString                                     ThumbnailMaterialPostProcessName;                 		// 0x00026C (0x000C)              
	class UPostProcessChain*                           DefaultUIScenePostProcess;                        		// 0x000278 (0x0004)              
	struct FString                                     DefaultUIScenePostProcessName;                    		// 0x00027C (0x000C)              
	class UClass*                                      m_BuildManagerClass;                              		// 0x000288 (0x0004)              
	struct FString                                     m_BuildManagerClassName;                          		// 0x00028C (0x000C)              
	class UMaterial*                                   DefaultUICaretMaterial;                           		// 0x000298 (0x0004)              
	struct FString                                     DefaultUICaretMaterialName;                       		// 0x00029C (0x000C)              
	class UMaterial*                                   SceneCaptureReflectActorMaterial;                 		// 0x0002A8 (0x0004)              
	struct FString                                     SceneCaptureReflectActorMaterialName;             		// 0x0002AC (0x000C)              
	class UMaterial*                                   SceneCaptureCubeActorMaterial;                    		// 0x0002B8 (0x0004)              
	struct FString                                     SceneCaptureCubeActorMaterialName;                		// 0x0002BC (0x000C)              
	class UTexture2D*                                  RandomAngleTexture;                               		// 0x0002C8 (0x0004)              
	struct FString                                     RandomAngleTextureName;                           		// 0x0002CC (0x000C)              
	class UTexture2D*                                  RandomNormalTexture;                              		// 0x0002D8 (0x0004)              
	struct FString                                     RandomNormalTextureName;                          		// 0x0002DC (0x000C)              
	class UTexture*                                    WeightMapPlaceholderTexture;                      		// 0x0002E8 (0x0004)              
	struct FString                                     WeightMapPlaceholderTextureName;                  		// 0x0002EC (0x000C)              
	class USoundNodeWave*                              DefaultSound;                                     		// 0x0002F8 (0x0004)              
	struct FString                                     DefaultSoundName;                                 		// 0x0002FC (0x000C)              
	float                                              TimeBetweenPurgingPendingKillObjects;             		// 0x000308 (0x0004)              
	float                                              GarbageCollectionMemoryCeilingGb;                 		// 0x00030C (0x0004)              
	class UcConsoleCommandManager*                     m_CommandManager;                                 		// 0x000310 (0x0004)              
	class UcMemDbgPageWin32*                           m_MyMemDbgPage;                                   		// 0x000314 (0x0004)              
	class UcDynamicFontManager*                        m_DynamicFontManager;                             		// 0x000318 (0x0004)              
	class UObject*                                     m_CustomisationSettings;                          		// 0x00031C (0x0004)              
	class UClass*                                      m_CustomisationSettingsClass;                     		// 0x000320 (0x0004)              
	struct FString                                     m_CustomisationSettingsClassName;                 		// 0x000324 (0x000C)              
	class UObject*                                     m_AttributeManager;                               		// 0x000330 (0x0004)              
	class UClass*                                      m_AttributeManagerClass;                          		// 0x000334 (0x0004)              
	struct FString                                     m_AttributeManagerClassName;                      		// 0x000338 (0x000C)              
	class UcBuildManagerBase*                          m_AssetBuildManager;                              		// 0x000344 (0x0004)              
	class UcWeatherManagerBase*                        m_WeatherManagerBase;                             		// 0x000348 (0x0004)              
	class UClient*                                     Client;                                           		// 0x00034C (0x0004)              
	TArray<class ULocalPlayer*>                        GamePlayers;                                      		// 0x000350 (0x000C)              
	class UGameViewportClient*                         GameViewport;                                     		// 0x00035C (0x0004)              
	TArray<struct FString>                             DeferredCommands;                                 		// 0x000360 (0x000C)              
	int                                                TickCycles;                                       		// 0x00036C (0x0004)              
	int                                                GameCycles;                                       		// 0x000370 (0x0004)              
	int                                                ClientCycles;                                     		// 0x000374 (0x0004)              
	class UDebugManager*                               DebugManager;                                     		// 0x000378 (0x0004)              
	DWORD                                              RemoteControlExec;                                		// 0x00037C (0x0004)              
	DWORD                                              C_WorldBox;                                       		// 0x000380 (0x0004)              
	DWORD                                              C_BrushWire;                                      		// 0x000384 (0x0004)              
	DWORD                                              C_AddWire;                                        		// 0x000388 (0x0004)              
	DWORD                                              C_SubtractWire;                                   		// 0x00038C (0x0004)              
	DWORD                                              C_SemiSolidWire;                                  		// 0x000390 (0x0004)              
	DWORD                                              C_NonSolidWire;                                   		// 0x000394 (0x0004)              
	DWORD                                              C_WireBackground;                                 		// 0x000398 (0x0004)              
	DWORD                                              C_ScaleBoxHi;                                     		// 0x00039C (0x0004)              
	DWORD                                              C_VolumeCollision;                                		// 0x0003A0 (0x0004)              
	DWORD                                              C_BSPCollision;                                   		// 0x0003A4 (0x0004)              
	DWORD                                              C_OrthoBackground;                                		// 0x0003A8 (0x0004)              
	DWORD                                              C_Volume;                                         		// 0x0003AC (0x0004)              
	float                                              StreamingDistanceFactor;                          		// 0x0003B0 (0x0004)              
	struct FString                                     ScoutClassName;                                   		// 0x0003B4 (0x000C)              
	unsigned char                                      TransitionType;                                   		// 0x0003C0 (0x0001)              PROPERTY: ETransitionType
	unsigned char                                      _0x0003C1[0x3];                                   		// 0x0003C1 (0x0003) MISSED OFFSET
	struct FString                                     TransitionDescription;                            		// 0x0003C4 (0x000C)              
	struct FString                                     TransitionGameType;                               		// 0x0003D0 (0x000C)              
	float                                              MeshLODRange;                                     		// 0x0003DC (0x0004)              
	float                                              CameraRotationThreshold;                          		// 0x0003E0 (0x0004)              
	float                                              CameraTranslationThreshold;                       		// 0x0003E4 (0x0004)              
	float                                              PrimitiveProbablyVisibleTime;                     		// 0x0003E8 (0x0004)              
	float                                              PercentUnoccludedRequeries;                       		// 0x0003EC (0x0004)              
	int                                                MaxFluidNumVerts;                                 		// 0x0003F0 (0x0004)              
	float                                              FluidSimulationTimeLimit;                         		// 0x0003F4 (0x0004)              
	int                                                MaxParticleResize;                                		// 0x0003F8 (0x0004)              
	int                                                MaxParticleResizeWarn;                            		// 0x0003FC (0x0004)              
	class UMaterial*                                   TerrainCollisionMaterial;                         		// 0x000400 (0x0004)              
	struct FString                                     TerrainCollisionMaterialName;                     		// 0x000404 (0x000C)              
	int                                                BeginUPTryCount;                                  		// 0x000410 (0x0004)              
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                              		// 0x000414 (0x000C)              
	struct FString                                     DynamicCoverMeshComponentName;                    		// 0x000420 (0x000C)              
	float                                              NetClientTicksPerSecond;                          		// 0x00042C (0x0004)              
	float                                              fCullCoefficient;                                 		// 0x000430 (0x0004)              
	class UcDebugPage*                                 m_ObjectStreamingDebugPage;                       		// 0x000434 (0x0004)              
	int                                                nDrawSharedOptimisationMode;                      		// 0x000438 (0x0004)              
	class UTranslationContext*                         GlobalTranslationContext;                         		// 0x00043C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Engine");
		return pClassPointer;
	};

public:
	class UFont* GetMediumFont();//Engine.Engine.GetMediumFont
	class UEngine* GetEngine();//Engine.Engine.GetEngine
	void OnConnectSuccess();//Engine.Engine.OnConnectSuccess
	class UEngine* GetGEngine();//Engine.Engine.GetGEngine
	void OnBeginPlay();//Engine.Engine.OnBeginPlay
	class UFont* GetAdditionalFont(int AdditionalFontIndex);//Engine.Engine.GetAdditionalFont
	class UFont* GetTinyFont();//Engine.Engine.GetTinyFont
	class UFont* GetSmallFont();//Engine.Engine.GetSmallFont
	void AddOverlay(class UFont* Font,struct FString Text,float X,float Y,float ScaleX,float ScaleY,bool bIsCentered);//Engine.Engine.AddOverlay
	void ReportScriptVersion();//Engine.Engine.ReportScriptVersion
	struct FString GetLastMovieName();//Engine.Engine.GetLastMovieName
	bool IsSplitScreen();//Engine.Engine.IsSplitScreen
	class AWorldInfo* GetCurrentWorldInfo();//Engine.Engine.GetCurrentWorldInfo
	class UAudioDevice* GetAudioDevice();//Engine.Engine.GetAudioDevice
	void RemoveAllOverlays();//Engine.Engine.RemoveAllOverlays
	class UFont* GetLargeFont();//Engine.Engine.GetLargeFont
	void OnConnectFailed(int nError);//Engine.Engine.OnConnectFailed
	void OnWorldCleanup();//Engine.Engine.OnWorldCleanup
	bool PlayLoadMapMovie();//Engine.Engine.PlayLoadMapMovie
	void AddOverlayWrapped(class UFont* Font,struct FString Text,float X,float Y,float ScaleX,float ScaleY,float WrapWidth);//Engine.Engine.AddOverlayWrapped
	void StopMovie(bool bDelayStopUntilGameHasRendered);//Engine.Engine.StopMovie
};
UClass* UEngine::pClassPointer = NULL;

//0x00010C (0x00054C - 0x000440)
//GameEngine[0x026BC650]
class UGameEngine : public UEngine
{
public:
	class UPendingLevel*                               GPendingLevel;                                    		// 0x000440 (0x0004)              
	struct FString                                     PendingLevelPlayerControllerClassName;            		// 0x000444 (0x000C)              
	struct FURL                                        LastURL;                                          		// 0x000450 (0x0044)              
	struct FURL                                        LastRemoteURL;                                    		// 0x000494 (0x0044)              
	TArray<struct FString>                             ServerActors;                                     		// 0x0004D8 (0x000C)              
	struct FString                                     TravelURL;                                        		// 0x0004E4 (0x000C)              
	unsigned char                                      TravelType;                                       		// 0x0004F0 (0x0001)              PROPERTY: 
	unsigned char                                      _0x0004F1[0x3];                                   		// 0x0004F1 (0x0003) MISSED OFFSET
	unsigned long                                      bWorldWasLoadedThisTick : 1;                      		// 0x0004F4 (0x0004) [0x00000001] 
	unsigned long                                      bShouldCommitPendingMapChange : 1;                		// 0x0004F4 (0x0004) [0x00000002] 
	unsigned long                                      bShouldSkipLevelStartupEventOnMapCommit : 1;      		// 0x0004F4 (0x0004) [0x00000004] 
	unsigned long                                      bShouldSkipLevelBeginningEventOnMapCommit : 1;    		// 0x0004F4 (0x0004) [0x00000008] 
	unsigned long                                      bClearAnimSetLinkupCachesOnLoadMap : 1;           		// 0x0004F4 (0x0004) [0x00000010] 
	class UOnlineSubsystem*                            OnlineSubsystem;                                  		// 0x0004F8 (0x0004)              
	TArray<struct FName>                               LevelsToLoadForPendingMapChange;                  		// 0x0004FC (0x000C)              
	TArray<class ULevel*>                              LoadedLevelsForPendingMapChange;                  		// 0x000508 (0x000C)              
	struct FString                                     PendingMapChangeFailureDescription;               		// 0x000514 (0x000C)              
	float                                              MaxSmoothedFrameRate;                             		// 0x000520 (0x0004)              
	int                                                ServerMaxSmoothedFrameRate;                       		// 0x000524 (0x0004)              
	TArray<struct FLevelStreamingStatus>               PendingLevelStreamingStatusUpdates;               		// 0x000528 (0x000C)              
	TArray<class UObjectReferencer*>                   ObjectReferencers;                                		// 0x000534 (0x000C)              
	TArray<struct FFullyLoadedPackagesInfo>            PackagesToFullyLoad;                              		// 0x000540 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.GameEngine");
		return pClassPointer;
	};

public:
	class UOnlineSubsystem* GetOnlineSubsystem();//Engine.GameEngine.GetOnlineSubsystem
};
UClass* UGameEngine::pClassPointer = NULL;

//0x000220 (0x000260 - 0x000040)
//Actor[0x026BC9E0]
class AActor : public UObject
{
public:
	DWORD                                              VfTable_IcEdgeUserInterface;                      		// 0x000040 (0x0004)              
	DWORD                                              VfTable_ISequenceInterface;                       		// 0x000044 (0x0004)              
	unsigned long                                      m_bCanBeCombatTargeted : 1;                       		// 0x000048 (0x0004) [0x00000001] 
	unsigned long                                      bStatic : 1;                                      		// 0x000048 (0x0004) [0x00000002] 
	unsigned long                                      bHidden : 1;                                      		// 0x000048 (0x0004) [0x00000004] 
	unsigned long                                      bNoDelete : 1;                                    		// 0x000048 (0x0004) [0x00000008] 
	unsigned long                                      bDeleteMe : 1;                                    		// 0x000048 (0x0004) [0x00000010] 
	unsigned long                                      bTicked : 1;                                      		// 0x000048 (0x0004) [0x00000020] 
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x000048 (0x0004) [0x00000040] 
	unsigned long                                      bStasis : 1;                                      		// 0x000048 (0x0004) [0x00000080] 
	unsigned long                                      bWorldGeometry : 1;                               		// 0x000048 (0x0004) [0x00000100] 
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                        		// 0x000048 (0x0004) [0x00000200] 
	unsigned long                                      bOrientOnSlope : 1;                               		// 0x000048 (0x0004) [0x00000400] 
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x000048 (0x0004) [0x00000800] 
	unsigned long                                      bPushedByEncroachers : 1;                         		// 0x000048 (0x0004) [0x00001000] 
	unsigned long                                      bRouteBeginPlayEvenIfStatic : 1;                  		// 0x000048 (0x0004) [0x00002000] 
	unsigned long                                      bIsMoving : 1;                                    		// 0x000048 (0x0004) [0x00004000] 
	unsigned long                                      bNetTemporary : 1;                                		// 0x000048 (0x0004) [0x00008000] 
	unsigned long                                      bOnlyRelevantToOwner : 1;                         		// 0x000048 (0x0004) [0x00010000] 
	unsigned long                                      bNetDirty : 1;                                    		// 0x000048 (0x0004) [0x00020000] 
	unsigned long                                      bAlwaysRelevant : 1;                              		// 0x000048 (0x0004) [0x00040000] 
	unsigned long                                      m_bForceClassDebugUpdate : 1;                     		// 0x000048 (0x0004) [0x00080000] 
	unsigned long                                      bReplicateInstigator : 1;                         		// 0x000048 (0x0004) [0x00100000] 
	unsigned long                                      bReplicateMovement : 1;                           		// 0x000048 (0x0004) [0x00200000] 
	unsigned long                                      bSkipActorPropertyReplication : 1;                		// 0x000048 (0x0004) [0x00400000] 
	unsigned long                                      bUpdateSimulatedPosition : 1;                     		// 0x000048 (0x0004) [0x00800000] 
	unsigned long                                      bTearOff : 1;                                     		// 0x000048 (0x0004) [0x01000000] 
	unsigned long                                      bOnlyDirtyReplication : 1;                        		// 0x000048 (0x0004) [0x02000000] 
	unsigned long                                      m_bCollideScraping : 1;                           		// 0x000048 (0x0004) [0x04000000] 
	unsigned long                                      bDemoRecording : 1;                               		// 0x000048 (0x0004) [0x08000000] 
	unsigned long                                      bDemoOwner : 1;                                   		// 0x000048 (0x0004) [0x10000000] 
	unsigned long                                      bNetInitialRotation : 1;                          		// 0x000048 (0x0004) [0x20000000] 
	unsigned long                                      bReplicateRigidBodyLocation : 1;                  		// 0x000048 (0x0004) [0x40000000] 
	unsigned long                                      bKillDuringLevelTransition : 1;                   		// 0x000048 (0x0004) [0x80000000] 
	unsigned long                                      bExchangedRoles : 1;                              		// 0x00004C (0x0004) [0x00000001] 
	unsigned long                                      bDebug : 1;                                       		// 0x00004C (0x0004) [0x00000002] 
	unsigned long                                      bPostRenderIfNotVisible : 1;                      		// 0x00004C (0x0004) [0x00000004] 
	unsigned long                                      bHideLocation : 1;                                		// 0x00004C (0x0004) [0x00000008] 
	unsigned long                                      bForceNetUpdate : 1;                              		// 0x00004C (0x0004) [0x00000010] 
	unsigned long                                      bPendingNetUpdate : 1;                            		// 0x00004C (0x0004) [0x00000020] 
	unsigned long                                      bHardAttach : 1;                                  		// 0x00004C (0x0004) [0x00000040] 
	unsigned long                                      bHurtEntry : 1;                                   		// 0x00004C (0x0004) [0x00000080] 
	unsigned long                                      bGameRelevant : 1;                                		// 0x00004C (0x0004) [0x00000100] 
	unsigned long                                      bMovable : 1;                                     		// 0x00004C (0x0004) [0x00000200] 
	unsigned long                                      bDestroyInPainVolume : 1;                         		// 0x00004C (0x0004) [0x00000400] 
	unsigned long                                      bCanBeDamaged : 1;                                		// 0x00004C (0x0004) [0x00000800] 
	unsigned long                                      bShouldBaseAtStartup : 1;                         		// 0x00004C (0x0004) [0x00001000] 
	unsigned long                                      bPendingDelete : 1;                               		// 0x00004C (0x0004) [0x00002000] 
	unsigned long                                      bCanTeleport : 1;                                 		// 0x00004C (0x0004) [0x00004000] 
	unsigned long                                      bAlwaysTick : 1;                                  		// 0x00004C (0x0004) [0x00008000] 
	unsigned long                                      bBlocksNavigation : 1;                            		// 0x00004C (0x0004) [0x00010000] 
	unsigned long                                      BlockRigidBody : 1;                               		// 0x00004C (0x0004) [0x00020000] 
	unsigned long                                      bProxyInference : 1;                              		// 0x00004C (0x0004) [0x00040000] 
	unsigned long                                      bUseGrid : 1;                                     		// 0x00004C (0x0004) [0x00080000] 
	unsigned long                                      m_bValidateGridLocation : 1;                      		// 0x00004C (0x0004) [0x00100000] 
	unsigned long                                      bSavedInMap : 1;                                  		// 0x00004C (0x0004) [0x00200000] 
	unsigned long                                      bStasisWakeUpEvent : 1;                           		// 0x00004C (0x0004) [0x00400000] 
	unsigned long                                      bLimbo : 1;                                       		// 0x00004C (0x0004) [0x00800000] 
	unsigned long                                      bCollideWhenPlacing : 1;                          		// 0x00004C (0x0004) [0x01000000] 
	unsigned long                                      bCollideActors : 1;                               		// 0x00004C (0x0004) [0x02000000] 
	unsigned long                                      bCollideWorld : 1;                                		// 0x00004C (0x0004) [0x04000000] 
	unsigned long                                      bCollideWorldUsesIgnore : 1;                      		// 0x00004C (0x0004) [0x08000000] 
	unsigned long                                      bCollideComplex : 1;                              		// 0x00004C (0x0004) [0x10000000] 
	unsigned long                                      bBlockActors : 1;                                 		// 0x00004C (0x0004) [0x20000000] 
	unsigned long                                      bForceBlockEncroachers : 1;                       		// 0x00004C (0x0004) [0x40000000] 
	unsigned long                                      bProjTarget : 1;                                  		// 0x00004C (0x0004) [0x80000000] 
	unsigned long                                      bBlocksTeleport : 1;                              		// 0x000050 (0x0004) [0x00000001] 
	unsigned long                                      m_bCollidesWithCamera : 1;                        		// 0x000050 (0x0004) [0x00000002] 
	unsigned long                                      m_bCameraIsBlockedByTest : 1;                     		// 0x000050 (0x0004) [0x00000004] 
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x000050 (0x0004) [0x00000008] 
	unsigned long                                      bJustTeleported : 1;                              		// 0x000050 (0x0004) [0x00000010] 
	unsigned long                                      bNetInitial : 1;                                  		// 0x000050 (0x0004) [0x00000020] 
	unsigned long                                      bNetOwner : 1;                                    		// 0x000050 (0x0004) [0x00000040] 
	unsigned long                                      bHiddenEd : 1;                                    		// 0x000050 (0x0004) [0x00000080] 
	unsigned long                                      bHiddenEdGroup : 1;                               		// 0x000050 (0x0004) [0x00000100] 
	unsigned long                                      bEdShouldSnap : 1;                                		// 0x000050 (0x0004) [0x00000200] 
	unsigned long                                      bTempEditor : 1;                                  		// 0x000050 (0x0004) [0x00000400] 
	unsigned long                                      bPathColliding : 1;                               		// 0x000050 (0x0004) [0x00000800] 
	unsigned long                                      bPathTemp : 1;                                    		// 0x000050 (0x0004) [0x00001000] 
	unsigned long                                      bScriptInitialized : 1;                           		// 0x000050 (0x0004) [0x00002000] 
	unsigned long                                      bLockLocation : 1;                                		// 0x000050 (0x0004) [0x00004000] 
	unsigned long                                      m_bShouldUseThisCollisionAsAABB : 1;              		// 0x000050 (0x0004) [0x00008000] 
	unsigned long                                      m_bExecPostReplicationFunction : 1;               		// 0x000050 (0x0004) [0x00010000] 
	unsigned long                                      m_bUsedInLCEvent : 1;                             		// 0x000050 (0x0004) [0x00020000] 
	unsigned char                                      m_detachFrameCountdown;                           		// 0x000054 (0x0001)              PROPERTY: 
	unsigned char                                      Physics;                                          		// 0x000055 (0x0001)              PROPERTY: EPhysics
	unsigned char                                      RemoteRole;                                       		// 0x000056 (0x0001)              PROPERTY: ENetRole
	unsigned char                                      Role;                                             		// 0x000057 (0x0001)              PROPERTY: ENetRole
	unsigned char                                      CollisionType;                                    		// 0x000058 (0x0001)              PROPERTY: ECollisionType
	unsigned char                                      TickGroup;                                        		// 0x000059 (0x0001)              PROPERTY: ETickingGroup
	unsigned char                                      _0x00005A[0x2];                                   		// 0x00005A (0x0002) MISSED OFFSET
	int                                                m_nChannelsOpen;                                  		// 0x00005C (0x0004)              
	TArray<class UActorComponent*>                     Components;                                       		// 0x000060 (0x000C)              
	TArray<class UActorComponent*>                     AllComponents;                                    		// 0x00006C (0x000C)              
	struct FRenderCommandFence                         DetachFence;                                      		// 0x000078 (0x0004)              
	class AActor*                                      Owner;                                            		// 0x00007C (0x0004)              
	class AActor*                                      Base;                                             		// 0x000080 (0x0004)              
	TArray<struct FTimerData>                          Timers;                                           		// 0x000084 (0x000C)              
	int                                                NetTag;                                           		// 0x000090 (0x0004)              
	double                                             NetUpdateTime;                                    		// 0x000094 (0x0008)              
	float                                              NetUpdateFrequency;                               		// 0x00009C (0x0004)              
	float                                              NetPriority;                                      		// 0x0000A0 (0x0004)              
	double                                             LastNetUpdateTime;                                		// 0x0000A4 (0x0008)              
	class APawn*                                       Instigator;                                       		// 0x0000AC (0x0004)              
	class AWorldInfo*                                  WorldInfo;                                        		// 0x0000B0 (0x0004)              
	float                                              LifeSpan;                                         		// 0x0000B4 (0x0004)              
	double                                             CreationTime;                                     		// 0x0000B8 (0x0008)              
	double                                             LastRenderTime;                                   		// 0x0000C0 (0x0008)              
	struct FName                                       Tag;                                              		// 0x0000C8 (0x0008)              
	struct FName                                       InitialState;                                     		// 0x0000D0 (0x0008)              
	struct FName                                       Group;                                            		// 0x0000D8 (0x0008)              
	TArray<class AActor*>                              Touching;                                         		// 0x0000E0 (0x000C)              
	TArray<class AActor*>                              Children;                                         		// 0x0000EC (0x000C)              
	float                                              LatentFloat;                                      		// 0x0000F8 (0x0004)              
	class UAnimNodeSequence*                           LatentSeqNode;                                    		// 0x0000FC (0x0004)              
	class APhysicsVolume*                              PhysicsVolume;                                    		// 0x000100 (0x0004)              
	FVector3                                           Location;                                         		// 0x000104 (0x000C)              
	FRotator                                           Rotation;                                         		// 0x000110 (0x000C)              
	FVector3                                           Velocity;                                         		// 0x00011C (0x000C)              
	FVector3                                           Acceleration;                                     		// 0x000128 (0x000C)              
	FVector3                                           AngularVelocity;                                  		// 0x000134 (0x000C)              
	struct FtLocationInfo                              m_LastReceivedLocation;                           		// 0x000140 (0x0030)              
	class USkeletalMeshComponent*                      BaseSkelComponent;                                		// 0x000170 (0x0004)              
	struct FName                                       BaseBoneName;                                     		// 0x000174 (0x0008)              
	TArray<class AActor*>                              Attached;                                         		// 0x00017C (0x000C)              
	FVector3                                           RelativeLocation;                                 		// 0x000188 (0x000C)              
	FRotator                                           RelativeRotation;                                 		// 0x000194 (0x000C)              
	float                                              DrawScale;                                        		// 0x0001A0 (0x0004)              
	FVector3                                           DrawScale3D;                                      		// 0x0001A4 (0x000C)              
	FVector3                                           PrePivot;                                         		// 0x0001B0 (0x000C)              
	class UPrimitiveComponent*                         CollisionComponent;                               		// 0x0001BC (0x0004)              
	class UPrimitiveComponent*                         m_TargetingComponent;                             		// 0x0001C0 (0x0004)              
	class UcVisualFXComponent*                         VisualFXComponent;                                		// 0x0001C4 (0x0004)              
	class AActor*                                      OwningPrefabInstance;                             		// 0x0001C8 (0x0004)              
	int                                                OverlapTag;                                       		// 0x0001CC (0x0004)              
	struct FsAPBCollision                              APBCollision;                                     		// 0x0001D0 (0x0014)              
	TArray<DWORD>                                      aReplicatedActorProperties;                       		// 0x0001E4 (0x000C)              
	TArray<class AActor*>                              aReplicatedActors;                                		// 0x0001F0 (0x000C)              
	TArray<int>                                        aIndexPendingRPCs;                                		// 0x0001FC (0x000C)              
	class UPlayer*                                     NetOwningConnection;                              		// 0x000208 (0x0004)              
	class UcActorProxy*                                pActorProxy;                                      		// 0x00020C (0x0004)              
	DWORD                                              m_pCurrentGridCell;                               		// 0x000210 (0x0004)              
	int                                                nNonStasisArrayIndex;                             		// 0x000214 (0x0004)              
	FRotator                                           RotationRate;                                     		// 0x000218 (0x000C)              
	FRotator                                           DesiredRotation;                                  		// 0x000224 (0x000C)              
	class AActor*                                      PendingTouch;                                     		// 0x000230 (0x0004)              
	class UClass*                                      MessageClass;                                     		// 0x000234 (0x0004)              
	TArray<class UClass*>                              SupportedEvents;                                  		// 0x000238 (0x000C)              
	TArray<class USequenceEvent*>                      GeneratedEvents;                                  		// 0x000244 (0x000C)              
	TArray<class USeqAct_Latent*>                      LatentActions;                                    		// 0x000250 (0x000C)              
	class AVolume*                                     m_CurrentDisplayArea;                             		// 0x00025C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Actor");
		return pClassPointer;
	};

public:
	FVector3 GetTargetLocation(class AActor* RequestedBy,bool bRequestAlternateLoc);//Engine.Actor.GetTargetLocation
	void CheckHitInfo(struct FTraceHitInfo* HitInfo,class UPrimitiveComponent* FallBackComponent,FVector3 Dir,FVector3* out_HitLocation);//Engine.Actor.CheckHitInfo
	bool EncroachingOn(class AActor* Other);//Engine.Actor.EncroachingOn
	void OnDestroy(class USeqAct_Destroy* Action);//Engine.Actor.OnDestroy
	class UcVisualFXComponent* GetVFXComponent();//Engine.Actor.GetVFXComponent
	void OnRanOver(class ASVehicle* Vehicle,class UPrimitiveComponent* RunOverComponent,int WheelIndex);//Engine.Actor.OnRanOver
	bool FindSpot(FVector3 BoxExtent,FVector3* SpotLocation);//Engine.Actor.FindSpot
	void DrawDebugSphere(FVector3 Center,float Radius,int Segments,unsigned char R,unsigned char G,unsigned char B,bool bPersistentLines);//Engine.Actor.DrawDebugSphere
	void InIllegalLocation_APB(struct FString sErrorMessage);//Engine.Actor.InIllegalLocation_APB
	void ForceNetRelevant();//Engine.Actor.ForceNetRelevant
	void OnHealDamage(class USeqAct_HealDamage* Action);//Engine.Actor.OnHealDamage
	void ReplicatedEvent(struct FName VarName);//Engine.Actor.ReplicatedEvent
	bool SourceActorAllowCameraBlockingTest();//Engine.Actor.SourceActorAllowCameraBlockingTest
	void FinishAnim(class UAnimNodeSequence* SeqNode);//Engine.Actor.FinishAnim
	void LocalPlayerControllers(class UClass* BaseClass,class APlayerController** PC);//Engine.Actor.LocalPlayerControllers
	void OnRigidBodySpringOverextension(class URB_BodyInstance* BodyInstance);//Engine.Actor.OnRigidBodySpringOverextension
	void CollisionChanged();//Engine.Actor.CollisionChanged
	void PauseTimer(bool bPause,struct FScriptDelegate InTimerFunc);//Engine.Actor.PauseTimer
	void UnTouch(class AActor* Other);//Engine.Actor.UnTouch
	void UnClock(float* Time);//Engine.Actor.UnClock
	class AActor* SpecialHandling(class APawn* Other);//Engine.Actor.SpecialHandling
	void PostBeginPlay();//Engine.Actor.PostBeginPlay
	void SetOwner(class AActor* NewOwner);//Engine.Actor.SetOwner
	void SetAlwaysRelevant_APB(bool bNewAlwaysRelevant,bool bForce);//Engine.Actor.SetAlwaysRelevant_APB
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent,class UPrimitiveComponent* OtherComponent,struct FCollisionImpactData* RigidCollisionData,int ContactIndex);//Engine.Actor.RigidBodyCollision
	bool IsInVolume(class AVolume* aVolume);//Engine.Actor.IsInVolume
	void BroadcastLocalizedMessage(class UClass* InMessageClass,int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.Actor.BroadcastLocalizedMessage
	void PickedUpBy(class APawn* P);//Engine.Actor.PickedUpBy
	void VisibleActors(class UClass* BaseClass,class AActor** Actor,float Radius,FVector3 Loc);//Engine.Actor.VisibleActors
	void SetAnimPosition(struct FName SlotName,int ChannelIndex,struct FName InAnimSeqName,float InPosition,bool bFireNotifies,bool bLooping);//Engine.Actor.SetAnimPosition
	void AllActors(class UClass* BaseClass,class AActor** Actor);//Engine.Actor.AllActors
	bool IsUsingGrid();//Engine.Actor.IsUsingGrid
	class UAudioComponent* CreateAudioComponent(class USoundCue* InSoundCue,bool bPlay,bool bStopWhenOwnerDestroyed,bool bUseLocation,FVector3 SourceLocation,bool bAttachToSelf);//Engine.Actor.CreateAudioComponent
	bool IsBasedOn(class AActor* TestActor);//Engine.Actor.IsBasedOn
	void ShutDown();//Engine.Actor.ShutDown
	bool IsPlayerOwned();//Engine.Actor.IsPlayerOwned
	void SetBase(class AActor* NewBase,FVector3 NewFloor,class USkeletalMeshComponent* SkelComp,struct FName AttachName);//Engine.Actor.SetBase
	void SetGRI(class AGameReplicationInfo* GRI);//Engine.Actor.SetGRI
	void Destroyed();//Engine.Actor.Destroyed
	void OnSetBlockRigidBody(class USeqAct_SetBlockRigidBody* Action);//Engine.Actor.OnSetBlockRigidBody
	void Sleep(float Seconds);//Engine.Actor.Sleep
	bool IsOverlapping(class AActor* A);//Engine.Actor.IsOverlapping
	double TimeSince(double Time);//Engine.Actor.TimeSince
	bool SetRelativeRotation(FRotator NewRotation);//Engine.Actor.SetRelativeRotation
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);//Engine.Actor.SetOnlyOwnerSee
	void MakeNoise(float Loudness,struct FName NoiseType);//Engine.Actor.MakeNoise
	void ModifyHearSoundComponent(class UAudioComponent* AC);//Engine.Actor.ModifyHearSoundComponent
	class UFaceFXAsset* GetActorFaceFXAsset();//Engine.Actor.GetActorFaceFXAsset
	void Bump(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitNormal);//Engine.Actor.Bump
	void DEBUGBREAKPOINT();//Engine.Actor.DEBUGBREAKPOINT
	void ForceUpdateComponents(bool bCollisionUpdate,bool bTransformOnly);//Engine.Actor.ForceUpdateComponents
	void ClearLatentAction(class UClass* actionClass,bool bAborted,class USeqAct_Latent* exceptionAction);//Engine.Actor.ClearLatentAction
	void BasedActors(class UClass* BaseClass,class AActor** Actor);//Engine.Actor.BasedActors
	void BaseChange();//Engine.Actor.BaseChange
	void PlayTeleportEffect(bool bOut,bool bSound);//Engine.Actor.PlayTeleportEffect
	float GetGravityZ();//Engine.Actor.GetGravityZ
	void PawnBaseDied();//Engine.Actor.PawnBaseDied
	bool SetRotation(FRotator NewRotation);//Engine.Actor.SetRotation
	void PostRenderFor(class APlayerController* PC,class UCanvas* Canvas,FVector3 CameraPosition,FVector3 CameraDir);//Engine.Actor.PostRenderFor
	void SetStasis(bool bNewStasis,bool bSimpleWakeUpEvent);//Engine.Actor.SetStasis
	void MoveActorFast(FVector3 pr_vLocation,FRotator pr_rRotation,FVector3 pr_vMoveBy);//Engine.Actor.MoveActorFast
	bool Destroy();//Engine.Actor.Destroy
	void PostTouch(class AActor* Other);//Engine.Actor.PostTouch
	class AActor* Trace(FVector3* HitLocation,FVector3* HitNormal,FVector3 TraceEnd,FVector3 TraceStart,bool bTraceActors,FVector3 Extent,struct FTraceHitInfo* HitInfo,int ExtraTraceFlags);//Engine.Actor.Trace
	void SetSkelControlScale(struct FName SkelControlName,float Scale);//Engine.Actor.SetSkelControlScale
	float GetTimerCount(struct FScriptDelegate InTimerFunc);//Engine.Actor.GetTimerCount
	void DynamicActors(class UClass* BaseClass,class AActor** Actor);//Engine.Actor.DynamicActors
	void RadiusActors(class UClass* BaseClass,class AActor** Actor,float Radius,FVector3 Loc);//Engine.Actor.RadiusActors
	void SetDrawScale3D(FVector3 NewScale3D);//Engine.Actor.SetDrawScale3D
	struct FString GetLocationStringFor(class APlayerReplicationInfo* PRI);//Engine.Actor.GetLocationStringFor
	void CancelInteractionWithProp(class UActorComponent* pr_pProp);//Engine.Actor.CancelInteractionWithProp
	void TouchingActors(class UClass* BaseClass,class AActor** Actor);//Engine.Actor.TouchingActors
	void RotateActorFast(FRotator pr_rRotation);//Engine.Actor.RotateActorFast
	bool TraceComponent(FVector3* HitLocation,FVector3* HitNormal,class UPrimitiveComponent* InComponent,FVector3 TraceEnd,FVector3 TraceStart,FVector3 Extent,struct FTraceHitInfo* HitInfo);//Engine.Actor.TraceComponent
	void ComponentList(class UClass* BaseClass,class UActorComponent** out_Component);//Engine.Actor.ComponentList
	unsigned char MovingWhichWay(float* Amount);//Engine.Actor.MovingWhichWay
	void Tick(float DeltaTime);//Engine.Actor.Tick
	bool CanSplash();//Engine.Actor.CanSplash
	struct FString GetURLMap();//Engine.Actor.GetURLMap
	void OnAnimPlay(class UAnimNodeSequence* SeqNode);//Engine.Actor.OnAnimPlay
	bool Move(FVector3 Delta);//Engine.Actor.Move
	bool PointCheckComponent(class UPrimitiveComponent* InComponent,FVector3 PointLocation,FVector3 PointExtent);//Engine.Actor.PointCheckComponent
	void InterpolationChanged(class USeqAct_Interp* InterpAction);//Engine.Actor.InterpolationChanged
	bool CheckForErrors();//Engine.Actor.CheckForErrors
	void RootMotionExtracted(class USkeletalMeshComponent* SkelComp,struct FBoneAtom* ExtractedRootMotionDelta);//Engine.Actor.RootMotionExtracted
	unsigned char GetTeamNum();//Engine.Actor.GetTeamNum
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//Engine.Actor.Touch
	void GainedChild(class AActor* Other);//Engine.Actor.GainedChild
	void PhysicsVolumeChange(class APhysicsVolume* NewVolume);//Engine.Actor.PhysicsVolumeChange
	void OverlappingActors(class UClass* BaseClass,class AActor** out_Actor,float Radius,FVector3 Loc,bool bIgnoreHidden);//Engine.Actor.OverlappingActors
	void SetHidden(bool bNewHidden);//Engine.Actor.SetHidden
	bool SuggestTossVelocity(FVector3* TossVelocity,FVector3 Destination,FVector3 Start,float TossSpeed,float BaseTossZ,float DesiredZPct,FVector3 CollisionSize,float TerminalVelocity,float OverrideGravityZ);//Engine.Actor.SuggestTossVelocity
	void OnToggleHidden(class USeqAct_ToggleHidden* Action);//Engine.Actor.OnToggleHidden
	void ReplaceText(struct FString* Text,struct FString Replace,struct FString With);//Engine.Actor.ReplaceText
	void PostTeleport(class ATeleporter* OutTeleporter);//Engine.Actor.PostTeleport
	void ConstraintBrokenNotify(class AActor* ConOwner,class URB_ConstraintSetup* ConSetup,class URB_ConstraintInstance* ConInstance);//Engine.Actor.ConstraintBrokenNotify
	void NativePostRenderFor(class APlayerController* PC,class UCanvas* Canvas,FVector3 CameraPosition,FVector3 CameraDir);//Engine.Actor.NativePostRenderFor
	bool ActivateEventClass(class UClass* InClass,class AActor* InInstigator,TArray<class USequenceEvent*>* EventList,TArray<int>* ActivateIndices,bool bTest,TArray<class USequenceEvent*>* ActivatedEvents);//Engine.Actor.ActivateEventClass
	void Falling();//Engine.Actor.Falling
	bool HurtRadius(float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,class AActor* IgnoredActor,class AController* InstigatedByController,bool bDoFullDamage);//Engine.Actor.HurtRadius
	void GetComponentsBoundingBox(struct FBox* ActorBox);//Engine.Actor.GetComponentsBoundingBox
	FVector3 GetDestination(class AController* C);//Engine.Actor.GetDestination
	void GetActorEyesViewPoint(FVector3* out_Location,FRotator* out_Rotation);//Engine.Actor.GetActorEyesViewPoint
	void SetHUDLocation(FVector3 NewHUDLocation);//Engine.Actor.SetHUDLocation
	void BroadcastLocalizedTeamMessage(int TeamIndex,class UClass* InMessageClass,int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.Actor.BroadcastLocalizedTeamMessage
	bool FindActorsOfClass(class UClass* ActorClass,TArray<class AActor*>* out_Actors);//Engine.Actor.FindActorsOfClass
	void FellOutOfWorld(class UClass* dmgType);//Engine.Actor.FellOutOfWorld
	void DrawDebugCoordinateSystem(FVector3 AxisLoc,FRotator AxisRot,float Scale,bool bPersistentLines);//Engine.Actor.DrawDebugCoordinateSystem
	void GetBoundingCylinder(float* CollisionRadius,float* CollisionHeight);//Engine.Actor.GetBoundingCylinder
	void Clock(float* Time);//Engine.Actor.Clock
	struct FString GetPhysicsName();//Engine.Actor.GetPhysicsName
	bool FastTrace(FVector3 TraceEnd,FVector3 TraceStart,FVector3 BoxExtent,bool bTraceBullet);//Engine.Actor.FastTrace
	struct FString ConsoleCommand(struct FString Command,bool bWriteToLog);//Engine.Actor.ConsoleCommand
	void RanInto(class AActor* Other);//Engine.Actor.RanInto
	void CallSuperReplicated(struct FName VarName);//Engine.Actor.CallSuperReplicated
	bool OverRotated(FRotator* out_Desired,FRotator* out_Actual);//Engine.Actor.OverRotated
	bool CheckMaxEffectDistance(class APlayerController* P,FVector3 SpawnLocation,float CullDistance);//Engine.Actor.CheckMaxEffectDistance
	void Attach(class AActor* Other);//Engine.Actor.Attach
	void AttachComponent(class UActorComponent* NewComponent);//Engine.Actor.AttachComponent
	bool PreTeleport(class ATeleporter* InTeleporter);//Engine.Actor.PreTeleport
	void OutsideWorldBounds();//Engine.Actor.OutsideWorldBounds
	bool IsOwnedBy(class AActor* TestActor);//Engine.Actor.IsOwnedBy
	float GetTerminalVelocity();//Engine.Actor.GetTerminalVelocity
	void PreBeginPlay();//Engine.Actor.PreBeginPlay
	void SetForcedInitialReplicatedProperty(class UField* PropToReplicate,bool bAdd);//Engine.Actor.SetForcedInitialReplicatedProperty
	class UAudioComponent* GetFaceFXAudioComponent();//Engine.Actor.GetFaceFXAudioComponent
	bool EffectIsRelevant(FVector3 SpawnLocation,bool bForceDedicated,float CullDistance);//Engine.Actor.EffectIsRelevant
	struct FString GetHumanReadableName();//Engine.Actor.GetHumanReadableName
	void LostChild(class AActor* Other);//Engine.Actor.LostChild
	void RootMotionModeChanged(class USkeletalMeshComponent* SkelComp);//Engine.Actor.RootMotionModeChanged
	void ReplicationEnded();//Engine.Actor.ReplicationEnded
	void SetZone(bool bForceRefresh);//Engine.Actor.SetZone
	bool HealDamage(int Amount,class AController* Healer,class UClass* DamageType);//Engine.Actor.HealDamage
	void SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);//Engine.Actor.SetAnimWeights
	void TornOff();//Engine.Actor.TornOff
	bool ContainsPoint(FVector3 Spot);//Engine.Actor.ContainsPoint
	void FindBase();//Engine.Actor.FindBase
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.Actor.DisplayDebug
	void NotifyLocalPlayerTeamReceived();//Engine.Actor.NotifyLocalPlayerTeamReceived
	void SetUseGrid(bool bNewUseGrid);//Engine.Actor.SetUseGrid
	bool PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet,struct FString GroupName,struct FString SeqName);//Engine.Actor.PlayActorFaceFXAnim
	void AllOwnedComponents(class UClass* BaseClass,class UActorComponent** OutComponent);//Engine.Actor.AllOwnedComponents
	void SpawnedByKismet();//Engine.Actor.SpawnedByKismet
	void SetMorphWeight(struct FName MorphNodeName,float MorphWeight);//Engine.Actor.SetMorphWeight
	bool OnSequenceAction(class USequenceAction* Action);//Engine.Actor.OnSequenceAction
	void NotifySkelControlBeyondLimit(class USkelControlLookAt* LookAt);//Engine.Actor.NotifySkelControlBeyondLimit
	void OnSetPhysics(class USeqAct_SetPhysics* Action);//Engine.Actor.OnSetPhysics
	void InterpolationFinished(class USeqAct_Interp* InterpAction);//Engine.Actor.InterpolationFinished
	void EncroachedBy(class AActor* Other);//Engine.Actor.EncroachedBy
	void OnAnimEnd(class UAnimNodeSequence* SeqNode,float PlayedTime,float ExcessTime);//Engine.Actor.OnAnimEnd
	bool CalcCamera(float fDeltaTime,FVector3* out_CamLoc,FRotator* out_CamRot,float* out_FOV);//Engine.Actor.CalcCamera
	void FlushPersistentDebugLines();//Engine.Actor.FlushPersistentDebugLines
	void SetTimer(float InRate,bool inbLoop,struct FScriptDelegate InTimerFunc);//Engine.Actor.SetTimer
	void Detach(class AActor* Other);//Engine.Actor.Detach
	void DebugFreezeGame();//Engine.Actor.DebugFreezeGame
	void SetCollisionSize(float NewRadius,float NewHeight);//Engine.Actor.SetCollisionSize
	void AutonomousPhysicsPhysNone(float fDeltaSeconds);//Engine.Actor.AutonomousPhysicsPhysNone
	void ChartData(struct FString DataName,float DataValue);//Engine.Actor.ChartData
	bool IsStationary();//Engine.Actor.IsStationary
	void OnTeleport(class USeqAct_Teleport* Action);//Engine.Actor.OnTeleport
	bool TriggerEventClass(class UClass* InEventClass,class AActor* InInstigator,int ActivateIndex,bool bTest,TArray<class USequenceEvent*>* ActivatedEvents);//Engine.Actor.TriggerEventClass
	void Timer();//Engine.Actor.Timer
	bool IsActorPlayingFaceFXAnim();//Engine.Actor.IsActorPlayingFaceFXAnim
	void SetCollision(bool bNewColActors,bool bNewBlockActors,bool bNewIgnoreEncroachers);//Engine.Actor.SetCollision
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);//Engine.Actor.PostInitAnimTree
	void OnMakeNoise(class USeqAct_MakeNoise* Action);//Engine.Actor.OnMakeNoise
	bool SetLocation(FVector3 NewLocation);//Engine.Actor.SetLocation
	void FindGoodEndView(class APlayerController* PC,FRotator* GoodRotation);//Engine.Actor.FindGoodEndView
	bool PlayerCanSeeMe();//Engine.Actor.PlayerCanSeeMe
	void ClearTimer(struct FScriptDelegate InTimerFunc);//Engine.Actor.ClearTimer
	void ChildActors(class UClass* BaseClass,class AActor** Actor);//Engine.Actor.ChildActors
	bool IsTimerActive(struct FScriptDelegate InTimerFunc);//Engine.Actor.IsTimerActive
	void PostDemoRewind();//Engine.Actor.PostDemoRewind
	void ReplicatedArrayEvent(struct FName VarName,int nElement);//Engine.Actor.ReplicatedArrayEvent
	void Reset();//Engine.Actor.Reset
	void MatchStarting();//Engine.Actor.MatchStarting
	void SetInitialState();//Engine.Actor.SetInitialState
	bool StopsProjectile(class AProjectile* P);//Engine.Actor.StopsProjectile
	void SetNetUpdateTime(double NewUpdateTime);//Engine.Actor.SetNetUpdateTime
	void TraceActors(class UClass* BaseClass,class AActor** Actor,FVector3* HitLoc,FVector3* HitNorm,FVector3 End,FVector3 Start,FVector3 Extent,struct FTraceHitInfo* HitInfo,int ExtraTraceFlags);//Engine.Actor.TraceActors
	void SetTickGroup(unsigned char NewTickGroup);//Engine.Actor.SetTickGroup
	void DrawDebugCone(FVector3 Origin,FVector3 Direction,float Length,float AngleWidth,float AngleHeight,int NumSides,DWORD DrawColor,bool bPersistentLines);//Engine.Actor.DrawDebugCone
	void ServerIllegalLocation_APB(struct FString sErrorMessage);//Engine.Actor.ServerIllegalLocation_APB
	bool UsedBy(class APawn* User);//Engine.Actor.UsedBy
	float GetTimerRate(struct FScriptDelegate InTimerFunc);//Engine.Actor.GetTimerRate
	struct FString GetItemName(struct FString FullName);//Engine.Actor.GetItemName
	unsigned char ScriptGetTeamNum();//Engine.Actor.ScriptGetTeamNum
	void OnChangeCollision(class USeqAct_ChangeCollision* Action);//Engine.Actor.OnChangeCollision
	struct FGuid GetPackageGuid(struct FName PackageName);//Engine.Actor.GetPackageGuid
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//Engine.Actor.TakeRadiusDamage
	bool ClampRotation(FRotator* out_Rot,FRotator rBase,FRotator rUpperLimits,FRotator rLowerLimits);//Engine.Actor.ClampRotation
	bool FindEventsOfClass(class UClass* EventClass,TArray<class USequenceEvent*>* out_EventList,bool bIncludeDisabled);//Engine.Actor.FindEventsOfClass
	bool MoveSmooth(FVector3 Delta);//Engine.Actor.MoveSmooth
	void DEBUGBREAKPOINT2();//Engine.Actor.DEBUGBREAKPOINT2
	void AutonomousPhysics(float DeltaSeconds);//Engine.Actor.AutonomousPhysics
	bool SetRelativeLocation(FVector3 NewLocation);//Engine.Actor.SetRelativeLocation
	bool IsInPain();//Engine.Actor.IsInPain
	void DrawDebugCylinder(FVector3 Start,FVector3 End,float Radius,int Segments,unsigned char R,unsigned char G,unsigned char B,bool bPersistentLines);//Engine.Actor.DrawDebugCylinder
	void SetPhysics(unsigned char newPhysics);//Engine.Actor.SetPhysics
	void SetHardAttach(bool bNewHardAttach);//Engine.Actor.SetHardAttach
	void VisibleCollidingActors(class UClass* BaseClass,class AActor** Actor,float Radius,FVector3 Loc,bool bIgnoreHidden);//Engine.Actor.VisibleCollidingActors
	void FinishAnimControl();//Engine.Actor.FinishAnimControl
	void DoKismetAttachment(class AActor* Attachment,class USeqAct_AttachToActor* Action);//Engine.Actor.DoKismetAttachment
	void BeginAnimControl(TArray<class UAnimSet*> InAnimSets);//Engine.Actor.BeginAnimControl
	void ClientIllegalLocation_APB(struct FString sErrorMessage);//Engine.Actor.ClientIllegalLocation_APB
	void SetDrawScale(float NewScale);//Engine.Actor.SetDrawScale
	void KilledBy(class APawn* EventInstigator);//Engine.Actor.KilledBy
	struct FString GetDebugName();//Engine.Actor.GetDebugName
	struct FString GetLocalString(int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI);//Engine.Actor.GetLocalString
	void SetCollisionType(unsigned char NewCollisionType);//Engine.Actor.SetCollisionType
	void DrawDebugBox(FVector3 Center,FVector3 Extent,unsigned char R,unsigned char G,unsigned char B,bool bPersistentLines);//Engine.Actor.DrawDebugBox
	class AActor* Spawn(class UClass* SpawnClass,class AActor* SpawnOwner,struct FName SpawnTag,FVector3 SpawnLocation,FRotator SpawnRotation,class AActor* ActorTemplate,bool bNoCollisionFail);//Engine.Actor.Spawn
	void SetAPBCollision(struct FsAPBCollision newAPBCollision);//Engine.Actor.SetAPBCollision
	void OnAttachToActor(class USeqAct_AttachToActor* Action);//Engine.Actor.OnAttachToActor
	void OnCauseDamage(class USeqAct_CauseDamage* Action);//Engine.Actor.OnCauseDamage
	void InterpolationStarted(class USeqAct_Interp* InterpAction);//Engine.Actor.InterpolationStarted
	void PlaySound(class USoundCue* InSoundCue,bool bNotReplicated,bool bNoRepToOwner,bool bStopWhenOwnerDestroyed,FVector3 SoundLocation,bool bNoRepToRelevant);//Engine.Actor.PlaySound
	class AActor* GetBaseMost();//Engine.Actor.GetBaseMost
	void DrawDebugLine(FVector3 LineStart,FVector3 LineEnd,unsigned char R,unsigned char G,unsigned char B,bool bPersistentLines);//Engine.Actor.DrawDebugLine
	void DetachComponent(class UActorComponent* ExComponent);//Engine.Actor.DetachComponent
	void StopActorFaceFXAnim();//Engine.Actor.StopActorFaceFXAnim
};
UClass* AActor::pClassPointer = NULL;

//0x000024 (0x000284 - 0x000260)
//Brush[0x026BCC40]
class ABrush : public AActor
{
public:
	unsigned char                                      CsgOper;                                          		// 0x000260 (0x0001)              PROPERTY: ECsgOper
	unsigned char                                      _0x000261[0x3];                                   		// 0x000261 (0x0003) MISSED OFFSET
	DWORD                                              BrushColor;                                       		// 0x000264 (0x0004)              
	int                                                PolyFlags;                                        		// 0x000268 (0x0004)              
	unsigned long                                      bColored : 1;                                     		// 0x00026C (0x0004) [0x00000001] 
	unsigned long                                      bSolidWhenSelected : 1;                           		// 0x00026C (0x0004) [0x00000002] 
	class UModel*                                      Brush;                                            		// 0x000270 (0x0004)              
	class UBrushComponent*                             BrushComponent;                                   		// 0x000274 (0x0004)              
	TArray<struct FGeomSelection>                      SavedSelections;                                  		// 0x000278 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Brush");
		return pClassPointer;
	};
};
UClass* ABrush::pClassPointer = NULL;

//0x000018 (0x00029C - 0x000284)
//Volume[0x026BC2C0]
class AVolume : public ABrush
{
public:
	class AActor*                                      AssociatedActor;                                  		// 0x000284 (0x0004)              
	int                                                LocationPriority;                                 		// 0x000288 (0x0004)              
	struct FString                                     LocationName;                                     		// 0x00028C (0x000C)              
	unsigned long                                      bForcePawnWalk : 1;                               		// 0x000298 (0x0004) [0x00000001] 
	unsigned long                                      bProcessAllActors : 1;                            		// 0x000298 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Volume");
		return pClassPointer;
	};

public:
	void CollisionChanged();//Engine.Volume.CollisionChanged
	bool Encompasses(class AActor* Other);//Engine.Volume.Encompasses
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.Volume.DisplayDebug
	void PostBeginPlay();//Engine.Volume.PostBeginPlay
	void OnToggle(class USeqAct_Toggle* Action);//Engine.Volume.OnToggle
	bool OnSequenceAction(class USequenceAction* Action);//Engine.Volume.OnSequenceAction
	void ProcessActorSetVolume(class AActor* Other);//Engine.Volume.ProcessActorSetVolume
	struct FString GetLocationStringFor(class APlayerReplicationInfo* PRI);//Engine.Volume.GetLocationStringFor
};
UClass* AVolume::pClassPointer = NULL;

//0x000004 (0x0002A0 - 0x00029C)
//BlockingVolume[0x026BC190]
class ABlockingVolume : public AVolume
{
public:
	unsigned long                                      bClampFluid : 1;                                  		// 0x00029C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.BlockingVolume");
		return pClassPointer;
	};
};
UClass* ABlockingVolume::pClassPointer = NULL;

//0x000000 (0x0002A0 - 0x0002A0)
//DynamicBlockingVolume[0x026BC060]
class ADynamicBlockingVolume : public ABlockingVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DynamicBlockingVolume");
		return pClassPointer;
	};
};
UClass* ADynamicBlockingVolume::pClassPointer = NULL;

//0x000010 (0x0002AC - 0x00029C)
//CullDistanceVolume[0x026BBF30]
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                    		// 0x00029C (0x000C)              
	unsigned long                                      bEnabled : 1;                                     		// 0x0002A8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CullDistanceVolume");
		return pClassPointer;
	};
};
UClass* ACullDistanceVolume::pClassPointer = NULL;

//0x000011 (0x0002AD - 0x00029C)
//LevelStreamingVolume[0x026BBE00]
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<class ULevelStreaming*>                     StreamingLevels;                                  		// 0x00029C (0x000C)              
	unsigned long                                      bEditorPreVisOnly : 1;                            		// 0x0002A8 (0x0004) [0x00000001] 
	unsigned long                                      bDisabled : 1;                                    		// 0x0002A8 (0x0004) [0x00000002] 
	unsigned char                                      Usage;                                            		// 0x0002AC (0x0001)              PROPERTY: EStreamingVolumeUsage

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LevelStreamingVolume");
		return pClassPointer;
	};

public:
	void OnToggle(class USeqAct_Toggle* Action);//Engine.LevelStreamingVolume.OnToggle
};
UClass* ALevelStreamingVolume::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//LightVolume[0x026BBCD0]
class ALightVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LightVolume");
		return pClassPointer;
	};
};
UClass* ALightVolume::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//PathBlockingVolume[0x026BBBA0]
class APathBlockingVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PathBlockingVolume");
		return pClassPointer;
	};
};
UClass* APathBlockingVolume::pClassPointer = NULL;

//0x00003C (0x0002D8 - 0x00029C)
//PhysicsVolume[0x026BBA70]
class APhysicsVolume : public AVolume
{
public:
	FVector3                                           ZoneVelocity;                                     		// 0x00029C (0x000C)              
	unsigned long                                      bVelocityAffectsWalking : 1;                      		// 0x0002A8 (0x0004) [0x00000001] 
	unsigned long                                      bPainCausing : 1;                                 		// 0x0002A8 (0x0004) [0x00000002] 
	unsigned long                                      bEntryPain : 1;                                   		// 0x0002A8 (0x0004) [0x00000004] 
	unsigned long                                      BACKUP_bPainCausing : 1;                          		// 0x0002A8 (0x0004) [0x00000008] 
	unsigned long                                      bDestructive : 1;                                 		// 0x0002A8 (0x0004) [0x00000010] 
	unsigned long                                      bNoInventory : 1;                                 		// 0x0002A8 (0x0004) [0x00000020] 
	unsigned long                                      bMoveProjectiles : 1;                             		// 0x0002A8 (0x0004) [0x00000040] 
	unsigned long                                      bBounceVelocity : 1;                              		// 0x0002A8 (0x0004) [0x00000080] 
	unsigned long                                      bNeutralZone : 1;                                 		// 0x0002A8 (0x0004) [0x00000100] 
	unsigned long                                      bPhysicsOnContact : 1;                            		// 0x0002A8 (0x0004) [0x00000200] 
	unsigned long                                      bWaterVolume : 1;                                 		// 0x0002A8 (0x0004) [0x00000400] 
	float                                              GroundFriction;                                   		// 0x0002AC (0x0004)              
	float                                              TerminalVelocity;                                 		// 0x0002B0 (0x0004)              
	float                                              DamagePerSec;                                     		// 0x0002B4 (0x0004)              
	class UClass*                                      DamageType;                                       		// 0x0002B8 (0x0004)              
	int                                                Priority;                                         		// 0x0002BC (0x0004)              
	float                                              FluidFriction;                                    		// 0x0002C0 (0x0004)              
	float                                              RigidBodyDamping;                                 		// 0x0002C4 (0x0004)              
	float                                              MaxDampingForce;                                  		// 0x0002C8 (0x0004)              
	class AInfo*                                       PainTimer;                                        		// 0x0002CC (0x0004)              
	class AController*                                 DamageInstigator;                                 		// 0x0002D0 (0x0004)              
	class APhysicsVolume*                              NextPhysicsVolume;                                		// 0x0002D4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PhysicsVolume");
		return pClassPointer;
	};

public:
	void PostBeginPlay();//Engine.PhysicsVolume.PostBeginPlay
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//Engine.PhysicsVolume.Touch
	void PawnEnteredVolume(class APawn* Other);//Engine.PhysicsVolume.PawnEnteredVolume
	void ModifyPlayer(class APawn* PlayerPawn);//Engine.PhysicsVolume.ModifyPlayer
	void CausePainTo(class AActor* Other);//Engine.PhysicsVolume.CausePainTo
	float GetGravityZ();//Engine.PhysicsVolume.GetGravityZ
	void TimerPop(class AVolumeTimer* T);//Engine.PhysicsVolume.TimerPop
	bool OnSequenceAction(class USequenceAction* Action);//Engine.PhysicsVolume.OnSequenceAction
	void PawnLeavingVolume(class APawn* Other);//Engine.PhysicsVolume.PawnLeavingVolume
	void OnToggle(class USeqAct_Toggle* inAction);//Engine.PhysicsVolume.OnToggle
	void ActorEnteredVolume(class AActor* Other);//Engine.PhysicsVolume.ActorEnteredVolume
	void ActorLeavingVolume(class AActor* Other);//Engine.PhysicsVolume.ActorLeavingVolume
	void OnSetDamageInstigator(class USeqAct_SetDamageInstigator* Action);//Engine.PhysicsVolume.OnSetDamageInstigator
	void Reset();//Engine.PhysicsVolume.Reset
};
UClass* APhysicsVolume::pClassPointer = NULL;

//0x000000 (0x0002D8 - 0x0002D8)
//DefaultPhysicsVolume[0x026BB940]
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		return pClassPointer;
	};

public:
	void Destroyed();//Engine.DefaultPhysicsVolume.Destroyed
};
UClass* ADefaultPhysicsVolume::pClassPointer = NULL;

//0x000004 (0x0002DC - 0x0002D8)
//GravityVolume[0x026BB810]
class AGravityVolume : public APhysicsVolume
{
public:
	float                                              GravityZ;                                         		// 0x0002D8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.GravityVolume");
		return pClassPointer;
	};
};
UClass* AGravityVolume::pClassPointer = NULL;

//0x00000C (0x0002A8 - 0x00029C)
//PortalVolume[0x026BB6E0]
class APortalVolume : public AVolume
{
public:
	TArray<class APortalTeleporter*>                   Portals;                                          		// 0x00029C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PortalVolume");
		return pClassPointer;
	};
};
UClass* APortalVolume::pClassPointer = NULL;

//0x0000D8 (0x000374 - 0x00029C)
//PostProcessVolume[0x026BB5B0]
class APostProcessVolume : public AVolume
{
public:
	float                                              Priority;                                         		// 0x00029C (0x0004)              
	struct FPostProcessSettings                        Settings;                                         		// 0x0002A0 (0x00CC)              
	class APostProcessVolume*                          NextLowerPriorityVolume;                          		// 0x00036C (0x0004)              
	unsigned long                                      bEnabled : 1;                                     		// 0x000370 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PostProcessVolume");
		return pClassPointer;
	};

public:
	void OnToggle(class USeqAct_Toggle* Action);//Engine.PostProcessVolume.OnToggle
};
UClass* APostProcessVolume::pClassPointer = NULL;

//0x000014 (0x0002B0 - 0x00029C)
//ReverbVolume[0x026BB480]
class AReverbVolume : public AVolume
{
public:
	float                                              Priority;                                         		// 0x00029C (0x0004)              
	struct FReverbSettings                             Settings;                                         		// 0x0002A0 (0x000C)              
	class AReverbVolume*                               NextLowerPriorityVolume;                          		// 0x0002AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ReverbVolume");
		return pClassPointer;
	};
};
UClass* AReverbVolume::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//TriggerVolume[0x026BB350]
class ATriggerVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TriggerVolume");
		return pClassPointer;
	};

public:
	void PostBeginPlay();//Engine.TriggerVolume.PostBeginPlay
	bool StopsProjectile(class AProjectile* P);//Engine.TriggerVolume.StopsProjectile
};
UClass* ATriggerVolume::pClassPointer = NULL;

//0x0001D8 (0x000438 - 0x000260)
//Camera[0x026BB220]
class ACamera : public AActor
{
public:
	class APlayerController*                           PCOwner;                                          		// 0x000260 (0x0004)              
	struct FName                                       CameraStyle;                                      		// 0x000264 (0x0008)              
	float                                              DefaultFOV;                                       		// 0x00026C (0x0004)              
	unsigned long                                      bLockedFOV : 1;                                   		// 0x000270 (0x0004) [0x00000001] 
	unsigned long                                      m_bDisableSecondaryMonitors : 1;                  		// 0x000270 (0x0004) [0x00000002] 
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x000270 (0x0004) [0x00000004] 
	unsigned long                                      bEnableFading : 1;                                		// 0x000270 (0x0004) [0x00000008] 
	unsigned long                                      bCamOverridePostProcess : 1;                      		// 0x000270 (0x0004) [0x00000010] 
	unsigned long                                      bEnableColorScaling : 1;                          		// 0x000270 (0x0004) [0x00000020] 
	unsigned long                                      bEnableColorScaleInterp : 1;                      		// 0x000270 (0x0004) [0x00000040] 
	float                                              LockedFOV;                                        		// 0x000274 (0x0004)              
	float                                              ConstrainedAspectRatio;                           		// 0x000278 (0x0004)              
	float                                              DefaultAspectRatio;                               		// 0x00027C (0x0004)              
	DWORD                                              FadeColor;                                        		// 0x000280 (0x0004)              
	float                                              FadeAmount;                                       		// 0x000284 (0x0004)              
	struct FPostProcessSettings                        CamPostProcessSettings;                           		// 0x000288 (0x00CC)              
	FVector3                                           ColorScale;                                       		// 0x000354 (0x000C)              
	FVector3                                           DesiredColorScale;                                		// 0x000360 (0x000C)              
	FVector3                                           OriginalColorScale;                               		// 0x00036C (0x000C)              
	float                                              ColorScaleInterpDuration;                         		// 0x000378 (0x0004)              
	double                                             ColorScaleInterpStartTime;                        		// 0x00037C (0x0008)              
	TArray<class AActor*>                              HiddenActors;                                     		// 0x000384 (0x000C)              
	struct FTCameraCache                               CameraCache;                                      		// 0x000390 (0x0024)              
	struct FTViewTarget                                ViewTarget;                                       		// 0x0003B4 (0x002C)              
	struct FTViewTarget                                PendingViewTarget;                                		// 0x0003E0 (0x002C)              
	float                                              BlendTimeToGo;                                    		// 0x00040C (0x0004)              
	struct FViewTargetTransitionParams                 BlendParams;                                      		// 0x000410 (0x000C)              
	TArray<class UCameraModifier*>                     ModifierList;                                     		// 0x00041C (0x000C)              
	float                                              FreeCamDistance;                                  		// 0x000428 (0x0004)              
	FVector3                                           FreeCamOffset;                                    		// 0x00042C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Camera");
		return pClassPointer;
	};

public:
	bool SetViewTarget(class AActor* NewViewTarget,struct FViewTargetTransitionParams TransitionParams);//Engine.Camera.SetViewTarget
	void SetFOV(float NewFOV);//Engine.Camera.SetFOV
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.Camera.DisplayDebug
	void SetDesiredColorScale(FVector3 NewColorScale,float InterpTime);//Engine.Camera.SetDesiredColorScale
	class AActor* GetViewTarget();//Engine.Camera.GetViewTarget
	void ApplyCameraModifiers(float DeltaTime,struct FTPOV* OutPOV);//Engine.Camera.ApplyCameraModifiers
	void UpdateCamera(float DeltaTime);//Engine.Camera.UpdateCamera
	float GetFOVAngle();//Engine.Camera.GetFOVAngle
};
UClass* ACamera::pClassPointer = NULL;

//0x000040 (0x000478 - 0x000438)
//AnimatedCamera[0x026BB0F0]
class AAnimatedCamera : public ACamera
{
public:
	class UCameraAnimInst*                             AnimInstPool[0x8];                                		// 0x000438 (0x0020)              
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                      		// 0x000458 (0x000C)              
	TArray<class UCameraAnimInst*>                     FreeAnims;                                        		// 0x000464 (0x000C)              
	class ADynamicCameraActor*                         AnimCameraActor;                                  		// 0x000470 (0x0004)              
	class ADynamicCameraActor*                         AccumulatorCameraActor;                           		// 0x000474 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimatedCamera");
		return pClassPointer;
	};

public:
	void StopCameraAnim(class UCameraAnimInst* AnimInst,bool bImmediate);//Engine.AnimatedCamera.StopCameraAnim
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim,float Rate,float Scale,float BlendInTime,float BlendOutTime,bool bLoop,bool bRandomStartTime,float Duration);//Engine.AnimatedCamera.PlayCameraAnim
	void Destroyed();//Engine.AnimatedCamera.Destroyed
	void ApplyCameraModifiersNative(float DeltaTime,struct FTPOV* OutPOV);//Engine.AnimatedCamera.ApplyCameraModifiersNative
	void StopAllCameraAnimsByType(class UCameraAnim* Anim,bool bImmediate);//Engine.AnimatedCamera.StopAllCameraAnimsByType
	void PostBeginPlay();//Engine.AnimatedCamera.PostBeginPlay
	void ApplyCameraModifiers(float DeltaTime,struct FTPOV* OutPOV);//Engine.AnimatedCamera.ApplyCameraModifiers
};
UClass* AAnimatedCamera::pClassPointer = NULL;

//0x0000E0 (0x000340 - 0x000260)
//CameraActor[0x026BAFC0]
class ACameraActor : public AActor
{
public:
	unsigned long                                      m_bDisableSecondaryMonitors : 1;                  		// 0x000260 (0x0004) [0x00000001] 
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x000260 (0x0004) [0x00000002] 
	unsigned long                                      bCamOverridePostProcess : 1;                      		// 0x000260 (0x0004) [0x00000004] 
	float                                              AspectRatio;                                      		// 0x000264 (0x0004)              
	float                                              FOVAngle;                                         		// 0x000268 (0x0004)              
	struct FPostProcessSettings                        CamOverridePostProcess;                           		// 0x00026C (0x00CC)              
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x000338 (0x0004)              
	class UStaticMeshComponent*                        MeshComp;                                         		// 0x00033C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CameraActor");
		return pClassPointer;
	};

public:
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.CameraActor.DisplayDebug
};
UClass* ACameraActor::pClassPointer = NULL;

//0x000000 (0x000340 - 0x000340)
//DynamicCameraActor[0x026BAE90]
class ADynamicCameraActor : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DynamicCameraActor");
		return pClassPointer;
	};
};
UClass* ADynamicCameraActor::pClassPointer = NULL;

//0x000008 (0x000268 - 0x000260)
//cEngineClientServerDebugManager[0x026BAD60]
class AcEngineClientServerDebugManager : public AActor
{
public:
	unsigned long                                      m_bHasLinesToFlush : 1;                           		// 0x000260 (0x0004) [0x00000001] 
	unsigned long                                      m_bDisplayLCActive : 1;                           		// 0x000260 (0x0004) [0x00000002] 
	unsigned long                                      m_bIsLCActive : 1;                                		// 0x000260 (0x0004) [0x00000004] 
	DWORD                                              SceneView;                                        		// 0x000264 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cEngineClientServerDebugManager");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName sVariableName);//Engine.cEngineClientServerDebugManager.ReplicatedEvent
};
UClass* AcEngineClientServerDebugManager::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//cLCManagerBase[0x026BAC30]
class AcLCManagerBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cLCManagerBase");
		return pClassPointer;
	};
};
UClass* AcLCManagerBase::pClassPointer = NULL;

//0x0000EC (0x00034C - 0x000260)
//Controller[0x026BAB00]
class AController : public AActor
{
public:
	class APawn*                                       Pawn;                                             		// 0x000260 (0x0004)              
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x000264 (0x0004)              
	int                                                PlayerNum;                                        		// 0x000268 (0x0004)              
	class AController*                                 NextController;                                   		// 0x00026C (0x0004)              
	unsigned long                                      bIsPlayer : 1;                                    		// 0x000270 (0x0004) [0x00000001] 
	unsigned long                                      bGodMode : 1;                                     		// 0x000270 (0x0004) [0x00000002] 
	unsigned long                                      bAffectedByHitEffects : 1;                        		// 0x000270 (0x0004) [0x00000004] 
	unsigned long                                      bSoaking : 1;                                     		// 0x000270 (0x0004) [0x00000008] 
	unsigned long                                      bSlowerZAcquire : 1;                              		// 0x000270 (0x0004) [0x00000010] 
	unsigned long                                      bForceStrafe : 1;                                 		// 0x000270 (0x0004) [0x00000020] 
	unsigned long                                      bNotifyApex : 1;                                  		// 0x000270 (0x0004) [0x00000040] 
	unsigned long                                      bAdvancedTactics : 1;                             		// 0x000270 (0x0004) [0x00000080] 
	unsigned long                                      bCanDoSpecial : 1;                                		// 0x000270 (0x0004) [0x00000100] 
	unsigned long                                      bAdjusting : 1;                                   		// 0x000270 (0x0004) [0x00000200] 
	unsigned long                                      bPreparingMove : 1;                               		// 0x000270 (0x0004) [0x00000400] 
	unsigned long                                      bLOSflag : 1;                                     		// 0x000270 (0x0004) [0x00000800] 
	unsigned long                                      bUsePlayerHearing : 1;                            		// 0x000270 (0x0004) [0x00001000] 
	unsigned long                                      bForceDesiredRotation : 1;                        		// 0x000270 (0x0004) [0x00002000] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x000270 (0x0004) [0x00004000] 
	unsigned long                                      bSeeFriendly : 1;                                 		// 0x000270 (0x0004) [0x00008000] 
	unsigned long                                      bUsingPathLanes : 1;                              		// 0x000270 (0x0004) [0x00010000] 
	unsigned char                                      bFire;                                            		// 0x000274 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000275[0x3];                                   		// 0x000275 (0x0003) MISSED OFFSET
	float                                              MinHitWall;                                       		// 0x000278 (0x0004)              
	float                                              MoveTimer;                                        		// 0x00027C (0x0004)              
	class AActor*                                      MoveTarget;                                       		// 0x000280 (0x0004)              
	FVector3                                           Destination;                                      		// 0x000284 (0x000C)              
	FVector3                                           FocalPoint;                                       		// 0x000290 (0x000C)              
	class AActor*                                      Focus;                                            		// 0x00029C (0x0004)              
	class AActor*                                      GoalList[0x4];                                    		// 0x0002A0 (0x0010)              
	FVector3                                           AdjustLoc;                                        		// 0x0002B0 (0x000C)              
	class ANavigationPoint*                            StartSpot;                                        		// 0x0002BC (0x0004)              
	TArray<class ANavigationPoint*>                    RouteCache;                                       		// 0x0002C0 (0x000C)              
	class UReachSpec*                                  CurrentPath;                                      		// 0x0002CC (0x0004)              
	class UReachSpec*                                  NextRoutePath;                                    		// 0x0002D0 (0x0004)              
	FVector3                                           CurrentPathDir;                                   		// 0x0002D4 (0x000C)              
	class AActor*                                      RouteGoal;                                        		// 0x0002E0 (0x0004)              
	float                                              RouteDist;                                        		// 0x0002E4 (0x0004)              
	double                                             LastRouteFind;                                    		// 0x0002E8 (0x0008)              
	class AInterpActor*                                PendingMover;                                     		// 0x0002F0 (0x0004)              
	double                                             GroundPitchTime;                                  		// 0x0002F4 (0x0008)              
	class APawn*                                       ShotTarget;                                       		// 0x0002FC (0x0004)              
	class AActor*                                      LastFailedReach;                                  		// 0x000300 (0x0004)              
	double                                             FailedReachTime;                                  		// 0x000304 (0x0008)              
	FVector3                                           FailedReachLocation;                              		// 0x00030C (0x000C)              
	float                                              SightCounter;                                     		// 0x000318 (0x0004)              
	float                                              RespawnPredictionTime;                            		// 0x00031C (0x0004)              
	float                                              InUseNodeCostMultiplier;                          		// 0x000320 (0x0004)              
	int                                                HighJumpNodeCostModifier;                         		// 0x000324 (0x0004)              
	class APawn*                                       Enemy;                                            		// 0x000328 (0x0004)              
	class AActor*                                      Target;                                           		// 0x00032C (0x0004)              
	TArray<struct FVisiblePortalInfo>                  VisiblePortals;                                   		// 0x000330 (0x000C)              
	float                                              LaneOffset;                                       		// 0x00033C (0x0004)              
	FRotator                                           OldBasedRotation;                                 		// 0x000340 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Controller");
		return pClassPointer;
	};

public:
	void GetPlayerViewPoint(FVector3* out_Location,FRotator* out_Rotation);//Engine.Controller.GetPlayerViewPoint
	void ClientSetLocation(FVector3 NewLocation,FRotator NewRotation);//Engine.Controller.ClientSetLocation
	bool CanSeeByPoints(FVector3 ViewLocation,FVector3 TestLocation,FRotator ViewRotation);//Engine.Controller.CanSeeByPoints
	void ClientSetRotation(FRotator NewRotation,bool bResetCamera);//Engine.Controller.ClientSetRotation
	void ReceiveProjectileWarning(class AProjectile* Proj);//Engine.Controller.ReceiveProjectileWarning
	void RouteCache_InsertItem(class ANavigationPoint* Nav,int Idx);//Engine.Controller.RouteCache_InsertItem
	void SeeMonster(class APawn* Seen);//Engine.Controller.SeeMonster
	bool OnSequenceAction(class USequenceAction* Action);//Engine.Controller.OnSequenceAction
	void RouteCache_RemoveIndex(int InIndex,int Count);//Engine.Controller.RouteCache_RemoveIndex
	void GetActorEyesViewPoint(FVector3* out_Location,FRotator* out_Rotation);//Engine.Controller.GetActorEyesViewPoint
	void NotifyKilled(class AController* Killer,class AController* Killed,class APawn* KilledPawn);//Engine.Controller.NotifyKilled
	void RoundHasEnded(class AActor* EndRoundFocus);//Engine.Controller.RoundHasEnded
	void NotifyJumpApex();//Engine.Controller.NotifyJumpApex
	void WaitForLanding(float waitDuration);//Engine.Controller.WaitForLanding
	struct FString GetHumanReadableName();//Engine.Controller.GetHumanReadableName
	bool IsDead();//Engine.Controller.IsDead
	void RetCameraLocationAndReticuleDirection(FVector3* CameraLocationOut,FVector3* ReticuleDirectionOut);//Engine.Controller.RetCameraLocationAndReticuleDirection
	bool MoverFinished();//Engine.Controller.MoverFinished
	class APawn* PickTarget(class UClass* TargetClass,float* bestAim,float* bestDist,FVector3 FireDir,FVector3 projStart,float MaxRange);//Engine.Controller.PickTarget
	void MoveToward(class AActor* NewTarget,class AActor* ViewFocus,float DestinationOffset,bool bUseStrafing,bool bShouldWalk);//Engine.Controller.MoveToward
	void StopFiring();//Engine.Controller.StopFiring
	void CurrentLevelUnloaded();//Engine.Controller.CurrentLevelUnloaded
	void StopLatentExecution();//Engine.Controller.StopLatentExecution
	bool PointReachable(FVector3 aPoint);//Engine.Controller.PointReachable
	bool NotifyCoverClaimViolation(class AController* NewClaim,class ACoverLink* Link,int SlotIdx);//Engine.Controller.NotifyCoverClaimViolation
	class AController* GetKillerController();//Engine.Controller.GetKillerController
	void EnemyNotVisible();//Engine.Controller.EnemyNotVisible
	void ReplicatedEvent(struct FName VarName);//Engine.Controller.ReplicatedEvent
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.Controller.DisplayDebug
	void ServerGivePawn();//Engine.Controller.ServerGivePawn
	class AActor* FindPathTo(FVector3 aPoint,int MaxPathLength,bool bReturnPartial);//Engine.Controller.FindPathTo
	void RouteCache_AddItem(class ANavigationPoint* Nav);//Engine.Controller.RouteCache_AddItem
	void WarnProjExplode(class AProjectile* Proj);//Engine.Controller.WarnProjExplode
	bool ActorReachable(class AActor* anActor);//Engine.Controller.ActorReachable
	void LongFall();//Engine.Controller.LongFall
	bool BeyondFogDistance(FVector3 ViewPoint,FVector3 OtherPoint);//Engine.Controller.BeyondFogDistance
	bool LandingShake();//Engine.Controller.LandingShake
	void SeePlayer(class APawn* Seen);//Engine.Controller.SeePlayer
	bool LineOfSightTo(class AActor* Other,FVector3 chkLocation,bool bTryAlternateTargetLoc);//Engine.Controller.LineOfSightTo
	void OnTeleport(class USeqAct_Teleport* Action);//Engine.Controller.OnTeleport
	bool AllowDetourTo(class ANavigationPoint* N);//Engine.Controller.AllowDetourTo
	void PawnDied(class APawn* inPawn);//Engine.Controller.PawnDied
	void NotifyMissedJump();//Engine.Controller.NotifyMissedJump
	void GameHasEnded(class AActor* EndGameFocus,bool bIsWinner);//Engine.Controller.GameHasEnded
	bool IsSpectating();//Engine.Controller.IsSpectating
	bool InLatentExecution(int LatentActionNumber);//Engine.Controller.InLatentExecution
	bool IsLocalPlayerController();//Engine.Controller.IsLocalPlayerController
	void OnToggleAffectedByHitEffects(class USeqAct_ToggleAffectedByHitEffects* inAction);//Engine.Controller.OnToggleAffectedByHitEffects
	void RouteCache_RemoveItem(class ANavigationPoint* Nav);//Engine.Controller.RouteCache_RemoveItem
	bool IsInCombat();//Engine.Controller.IsInCombat
	void NotifyProjLanded(class AProjectile* Proj);//Engine.Controller.NotifyProjLanded
	class AActor* FindPathTowardNearest(class UClass* GoalClass,bool bWeightDetours,int MaxPathLength,bool bReturnPartial);//Engine.Controller.FindPathTowardNearest
	void MoveUnreachable(FVector3 AttemptedDest,class AActor* AttemptedTarget);//Engine.Controller.MoveUnreachable
	void WaitForMover(class AInterpActor* M);//Engine.Controller.WaitForMover
	void Destroyed();//Engine.Controller.Destroyed
	class AActor* GetRouteGoalAfter(int RouteIdx);//Engine.Controller.GetRouteGoalAfter
	void PostBeginPlay();//Engine.Controller.PostBeginPlay
	void UnderLift(class ALiftCenter* Lift);//Engine.Controller.UnderLift
	bool CanSee(class APawn* Other);//Engine.Controller.CanSee
	void OnToggleHidden(class USeqAct_ToggleHidden* Action);//Engine.Controller.OnToggleHidden
	void RouteCache_Empty();//Engine.Controller.RouteCache_Empty
	bool HandlePathObstruction(class AActor* BlockedBy);//Engine.Controller.HandlePathObstruction
	void Possess(class APawn* inPawn,bool bVehicleTransition);//Engine.Controller.Possess
	void HearNoise(float Loudness,class AActor* NoiseMaker,struct FName NoiseType);//Engine.Controller.HearNoise
	void CheckNearMiss(class APawn* Shooter,class AWeapon* W,FVector3 WeapLoc,FVector3 LineDir,FVector3 HitLocation,class UClass* InDamageType);//Engine.Controller.CheckNearMiss
	void OnMakeNoise(class USeqAct_MakeNoise* Action);//Engine.Controller.OnMakeNoise
	bool FireWeaponAt(class AActor* inActor);//Engine.Controller.FireWeaponAt
	class AActor* FindPathToIntercept(class APawn* P,class AActor* InRouteGoal,bool bWeightDetours,int MaxPathLength,bool bReturnPartial);//Engine.Controller.FindPathToIntercept
	void OnCauseDamage(class USeqAct_CauseDamage* Action);//Engine.Controller.OnCauseDamage
	unsigned char GetTeamNum();//Engine.Controller.GetTeamNum
	bool PickWallAdjust(FVector3 HitNormal);//Engine.Controller.PickWallAdjust
	void Restart(bool bVehicleTransition);//Engine.Controller.Restart
	void FinishRotation();//Engine.Controller.FinishRotation
	void MoveTo(FVector3 NewDestination,class AActor* ViewFocus,bool bShouldWalk);//Engine.Controller.MoveTo
	void EnemyJustTeleported();//Engine.Controller.EnemyJustTeleported
	void InitPlayerReplicationInfo();//Engine.Controller.InitPlayerReplicationInfo
	class ANavigationPoint* FindRandomDest();//Engine.Controller.FindRandomDest
	void NotifyCoverDisabled(class ACoverLink* Link,int SlotIdx);//Engine.Controller.NotifyCoverDisabled
	void SetupSpecialPathAbilities();//Engine.Controller.SetupSpecialPathAbilities
	class AActor* FindPathToward(class AActor* anActor,bool bWeightDetours,int MaxPathLength,bool bReturnPartial);//Engine.Controller.FindPathToward
	void ServerRestartPlayer();//Engine.Controller.ServerRestartPlayer
	void NotifyTakeHit(class AController* InstigatedBy,FVector3 HitLocation,int Damage,class UClass* DamageType,FVector3 Momentum);//Engine.Controller.NotifyTakeHit
	void UpdateSex();//Engine.Controller.UpdateSex
	bool IsAimingAt(class AActor* ATarget,float Epsilon);//Engine.Controller.IsAimingAt
	void SetCharacter(struct FString inCharacter);//Engine.Controller.SetCharacter
	void OnPossess(class USeqAct_Possess* inAction);//Engine.Controller.OnPossess
	void SendMessage(class APlayerReplicationInfo* Recipient,struct FName MessageType,float Wait,class UClass* DamageType);//Engine.Controller.SendMessage
	void ReceiveWarning(class APawn* Shooter,float projSpeed,FVector3 FireDir);//Engine.Controller.ReceiveWarning
	void Reset();//Engine.Controller.Reset
	void NotifyCoverAdjusted();//Engine.Controller.NotifyCoverAdjusted
	void NotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume);//Engine.Controller.NotifyPhysicsVolumeChange
	void UnPossess();//Engine.Controller.UnPossess
	void OnToggleGodMode(class USeqAct_ToggleGodMode* inAction);//Engine.Controller.OnToggleGodMode
	void CleanupPRI();//Engine.Controller.CleanupPRI
	bool NotifyBump(class AActor* Other,FVector3 HitNormal);//Engine.Controller.NotifyBump
};
UClass* AController::pClassPointer = NULL;

//0x0002DC (0x000628 - 0x00034C)
//PlayerController[0x026BA9D0]
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                           		// 0x00034C (0x0004)              
	class ACamera*                                     PlayerCamera;                                     		// 0x000350 (0x0004)              
	class UClass*                                      CameraClass;                                      		// 0x000354 (0x0004)              
	class ADebugCameraController*                      DebugCameraControllerRef;                         		// 0x000358 (0x0004)              
	class UClass*                                      DebugCameraControllerClass;                       		// 0x00035C (0x0004)              
	class UClass*                                      PlayerOwnerDataStoreClass;                        		// 0x000360 (0x0004)              
	class UPlayerOwnerDataStore*                       CurrentPlayerData;                                		// 0x000364 (0x0004)              
	class UUIDataStore_PlayerSettings*                 CurrentPlayerSettings;                            		// 0x000368 (0x0004)              
	unsigned long                                      bFrozen : 1;                                      		// 0x00036C (0x0004) [0x00000001] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x00036C (0x0004) [0x00000002] 
	unsigned long                                      m_bPredictedJump : 1;                             		// 0x00036C (0x0004) [0x00000004] 
	unsigned long                                      bUpdatePosition : 1;                              		// 0x00036C (0x0004) [0x00000008] 
	unsigned long                                      bUpdating : 1;                                    		// 0x00036C (0x0004) [0x00000010] 
	unsigned long                                      bNeverSwitchOnPickup : 1;                         		// 0x00036C (0x0004) [0x00000020] 
	unsigned long                                      bCheatFlying : 1;                                 		// 0x00036C (0x0004) [0x00000040] 
	unsigned long                                      bCameraPositionLocked : 1;                        		// 0x00036C (0x0004) [0x00000080] 
	unsigned long                                      bShortConnectTimeOut : 1;                         		// 0x00036C (0x0004) [0x00000100] 
	unsigned long                                      bPendingDestroy : 1;                              		// 0x00036C (0x0004) [0x00000200] 
	unsigned long                                      bWasSpeedHack : 1;                                		// 0x00036C (0x0004) [0x00000400] 
	unsigned long                                      bWasSaturated : 1;                                		// 0x00036C (0x0004) [0x00000800] 
	unsigned long                                      bDynamicNetSpeed : 1;                             		// 0x00036C (0x0004) [0x00001000] 
	unsigned long                                      bAimingHelp : 1;                                  		// 0x00036C (0x0004) [0x00002000] 
	unsigned long                                      bHasVoiceHandshakeCompleted : 1;                  		// 0x00036C (0x0004) [0x00004000] 
	unsigned long                                      bCinematicMode : 1;                               		// 0x00036C (0x0004) [0x00008000] 
	unsigned long                                      bCinemaDisableInputMove : 1;                      		// 0x00036C (0x0004) [0x00010000] 
	unsigned long                                      bCinemaDisableInputLook : 1;                      		// 0x00036C (0x0004) [0x00020000] 
	unsigned long                                      bIgnoreNetworkMessages : 1;                       		// 0x00036C (0x0004) [0x00040000] 
	unsigned long                                      bReplicateAllPawns : 1;                           		// 0x00036C (0x0004) [0x00080000] 
	unsigned long                                      bIsUsingStreamingVolumes : 1;                     		// 0x00036C (0x0004) [0x00100000] 
	unsigned long                                      bIsExternalUIOpen : 1;                            		// 0x00036C (0x0004) [0x00200000] 
	unsigned long                                      bIsControllerConnected : 1;                       		// 0x00036C (0x0004) [0x00400000] 
	unsigned long                                      bCheckSoundOcclusion : 1;                         		// 0x00036C (0x0004) [0x00800000] 
	unsigned long                                      bLogHearSoundOverflow : 1;                        		// 0x00036C (0x0004) [0x01000000] 
	unsigned long                                      m_bMovementKeyIsDownOnServer : 1;                 		// 0x00036C (0x0004) [0x02000000] 
	unsigned long                                      m_bIsCustomising : 1;                             		// 0x00036C (0x0004) [0x04000000] 
	unsigned long                                      bCheckRelevancyThroughPortals : 1;                		// 0x00036C (0x0004) [0x08000000] 
	unsigned long                                      bReceivedUniqueId : 1;                            		// 0x00036C (0x0004) [0x10000000] 
	float                                              MaxResponseTime;                                  		// 0x000370 (0x0004)              
	double                                             WaitDelay;                                        		// 0x000374 (0x0008)              
	class APawn*                                       AcknowledgedPawn;                                 		// 0x00037C (0x0004)              
	class AActor*                                      ViewTarget;                                       		// 0x000380 (0x0004)              
	class APlayerReplicationInfo*                      RealViewTarget;                                   		// 0x000384 (0x0004)              
	float                                              FOVAngle;                                         		// 0x000388 (0x0004)              
	float                                              DesiredFOV;                                       		// 0x00038C (0x0004)              
	float                                              DefaultFOV;                                       		// 0x000390 (0x0004)              
	float                                              LODDistanceFactor;                                		// 0x000394 (0x0004)              
	FRotator                                           TargetViewRotation;                               		// 0x000398 (0x000C)              
	float                                              TargetEyeHeight;                                  		// 0x0003A4 (0x0004)              
	FRotator                                           BlendedTargetViewRotation;                        		// 0x0003A8 (0x000C)              
	class AHUD*                                        myHUD;                                            		// 0x0003B4 (0x0004)              
	class UClass*                                      SavedMoveClass;                                   		// 0x0003B8 (0x0004)              
	class USavedMove*                                  SavedMoves;                                       		// 0x0003BC (0x0004)              
	class USavedMove*                                  FreeMoves;                                        		// 0x0003C0 (0x0004)              
	class USavedMove*                                  PendingMove;                                      		// 0x0003C4 (0x0004)              
	FVector3                                           LastAckedAccel;                                   		// 0x0003C8 (0x000C)              
	double                                             CurrentTimeStamp;                                 		// 0x0003D4 (0x0008)              
	double                                             LastUpdateTime;                                   		// 0x0003DC (0x0008)              
	double                                             ServerTimeStamp;                                  		// 0x0003E4 (0x0008)              
	float                                              TimeMargin;                                       		// 0x0003EC (0x0004)              
	double                                             ClientUpdateTime;                                 		// 0x0003F0 (0x0008)              
	float                                              MaxTimeMargin;                                    		// 0x0003F8 (0x0004)              
	double                                             LastActiveTime;                                   		// 0x0003FC (0x0008)              
	double                                             LastPawnAckTime;                                  		// 0x000404 (0x0008)              
	double                                             LastStateSyncTime;                                		// 0x00040C (0x0008)              
	int                                                ClientCap;                                        		// 0x000414 (0x0004)              
	float                                              DynamicPingThreshold;                             		// 0x000418 (0x0004)              
	float                                              LastPingUpdate;                                   		// 0x00041C (0x0004)              
	float                                              OldPing;                                          		// 0x000420 (0x0004)              
	double                                             LastSpeedHackLog;                                 		// 0x000424 (0x0008)              
	struct FClientAdjustment                           PendingAdjustment;                                		// 0x00042C (0x0038)              
	struct FString                                     ProgressMessage[0x2];                             		// 0x000464 (0x0018)              
	double                                             ProgressTimeOut;                                  		// 0x00047C (0x0008)              
	struct FString                                     QuickSaveString;                                  		// 0x000484 (0x000C)              
	struct FString                                     NoPauseMessage;                                   		// 0x000490 (0x000C)              
	struct FString                                     ViewingFrom;                                      		// 0x00049C (0x000C)              
	struct FString                                     OwnCamera;                                        		// 0x0004A8 (0x000C)              
	int                                                GroundPitch;                                      		// 0x0004B4 (0x0004)              
	FVector3                                           OldFloor;                                         		// 0x0004B8 (0x000C)              
	class UCheatManager*                               CheatManager;                                     		// 0x0004C4 (0x0004)              
	class UClass*                                      CheatClass;                                       		// 0x0004C8 (0x0004)              
	class UPlayerInput*                                PlayerInput;                                      		// 0x0004CC (0x0004)              
	class UClass*                                      InputClass;                                       		// 0x0004D0 (0x0004)              
	FVector3                                           FailedPathStart;                                  		// 0x0004D4 (0x000C)              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0004E0 (0x0004)              
	struct FString                                     ForceFeedbackManagerClassName;                    		// 0x0004E4 (0x000C)              
	class UForceFeedbackManager*                       ForceFeedbackManager;                             		// 0x0004F0 (0x0004)              
	TArray<class UInteraction*>                        Interactions;                                     		// 0x0004F4 (0x000C)              
	TArray<struct FUniqueNetId>                        VoiceMuteList;                                    		// 0x000500 (0x000C)              
	TArray<struct FUniqueNetId>                        GameplayVoiceMuteList;                            		// 0x00050C (0x000C)              
	TArray<struct FUniqueNetId>                        VoicePacketFilter;                                		// 0x000518 (0x000C)              
	TArray<struct FConnectedPeerInfo>                  ConnectedPeers;                                   		// 0x000524 (0x000C)              
	TArray<struct FUniqueNetId>                        BestNextHostPeers;                                		// 0x000530 (0x000C)              
	class UOnlineGameSearch*                           MigratedSearchToJoin;                             		// 0x00053C (0x0004)              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x000540 (0x0004)              
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x000544 (0x0004)              
	unsigned char                                      _0x000548[0x4];                                   		// 0x000548 (0x0004) ALIGNEMENT
	class UUIDataStore_OnlinePlayerData*               OnlinePlayerData;                                 		// 0x00054C (0x0004)              
	unsigned char                                      bIgnoreMoveInput;                                 		// 0x000550 (0x0001)              PROPERTY: 
	unsigned char                                      bIgnoreLookInput;                                 		// 0x000551 (0x0001)              PROPERTY: 
	unsigned char                                      bRun;                                             		// 0x000552 (0x0001)              PROPERTY: 
	unsigned char                                      bDuck;                                            		// 0x000553 (0x0001)              PROPERTY: 
	unsigned char                                      NetPlayerIndex;                                   		// 0x000554 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000555[0x3];                                   		// 0x000555 (0x0003) MISSED OFFSET
	float                                              InteractDistance;                                 		// 0x000558 (0x0004)              
	TArray<struct FInputMatchRequest>                  InputRequests;                                    		// 0x00055C (0x000C)              
	double                                             LastBroadcastTime;                                		// 0x000568 (0x0008)              
	struct FString                                     LastBroadcastString[0x4];                         		// 0x000570 (0x0030)              
	TArray<struct FName>                               PendingMapChangeLevelNames;                       		// 0x0005A0 (0x000C)              
	class ACoverReplicator*                            MyCoverReplicator;                                		// 0x0005AC (0x0004)              
	TArray<struct FDebugTextInfo>                      DebugTextList;                                    		// 0x0005B0 (0x000C)              
	float                                              SpectatorCameraSpeed;                             		// 0x0005BC (0x0004)              
	class UNetConnection*                              PendingSwapConnection;                            		// 0x0005C0 (0x0004)              
	float                                              MinRespawnDelay;                                  		// 0x0005C4 (0x0004)              
	int                                                MaxConcurrentHearSounds;                          		// 0x0005C8 (0x0004)              
	TArray<class UAudioComponent*>                     HearSoundActiveComponents;                        		// 0x0005CC (0x000C)              
	TArray<class UAudioComponent*>                     HearSoundPoolComponents;                          		// 0x0005D8 (0x000C)              
	TArray<class AActor*>                              HiddenActors;                                     		// 0x0005E4 (0x000C)              
	FVector3                                           m_fOldInAccelCharacter;                           		// 0x0005F0 (0x000C)              
	float                                              m_fPing;                                          		// 0x0005FC (0x0004)              
	float                                              m_fClientAvgFrameTime;                            		// 0x000600 (0x0004)              
	int                                                m_nInPacketsLost;                                 		// 0x000604 (0x0004)              
	int                                                m_nOutPacketsLost;                                		// 0x000608 (0x0004)              
	int                                                m_fPacketLossTimer;                               		// 0x00060C (0x0004)              
	struct FScriptDelegate                             __OnMissingPeersUnregistered__Delegate;           		// 0x000610 (0x000C)              
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x00061C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlayerController");
		return pClassPointer;
	};

public:
	void ClientStartNetworkedVoice();//Engine.PlayerController.ClientStartNetworkedVoice
	void OnJoinMigratedGame(struct FName SessionName,bool bWasSuccessful);//Engine.PlayerController.OnJoinMigratedGame
	void SoakPause(class APawn* P);//Engine.PlayerController.SoakPause
	void FixFOV();//Engine.PlayerController.FixFOV
	void ServerViewPrevPlayer();//Engine.PlayerController.ServerViewPrevPlayer
	void SaveClassConfig(struct FString ClassName);//Engine.PlayerController.SaveClassConfig
	void QuickSave();//Engine.PlayerController.QuickSave
	void ClientClearProgressMessages();//Engine.PlayerController.ClientClearProgressMessages
	void RemoveDebugText(class AActor* SrcActor);//Engine.PlayerController.RemoveDebugText
	void ClientWriteOnlinePlayerScores(int LeaderboardId);//Engine.PlayerController.ClientWriteOnlinePlayerScores
	void ResetPlayerMovementInput();//Engine.PlayerController.ResetPlayerMovementInput
	void ViewShake(float DeltaTime);//Engine.PlayerController.ViewShake
	void ClientRestart(class APawn* NewPawn);//Engine.PlayerController.ClientRestart
	void OnSetCameraTarget(class USeqAct_SetCameraTarget* inAction);//Engine.PlayerController.OnSetCameraTarget
	void UnrealiableClientGotoState(struct FName StateName);//Engine.PlayerController.UnrealiableClientGotoState
	void ProcessMoveBaseSpectatingState(float DeltaRot,FVector3* outNewAccel);//Engine.PlayerController.ProcessMoveBaseSpectatingState
	void ClientSetHUD(class UClass* newHUDType,class UClass* newScoringType);//Engine.PlayerController.ClientSetHUD
	void NotifyPeerDisconnectHost(struct FUniqueNetId PeerNetId);//Engine.PlayerController.NotifyPeerDisconnectHost
	void GetRegisteredPlayersInSession(struct FName SessionName,TArray<struct FUniqueNetId>* OutRegisteredPlayers);//Engine.PlayerController.GetRegisteredPlayersInSession
	void ClientIgnoreMoveInput(bool bIgnore);//Engine.PlayerController.ClientIgnoreMoveInput
	bool IsControllerTiltActive();//Engine.PlayerController.IsControllerTiltActive
	class UAudioComponent* GetPooledAudioComponent(class USoundCue* ASound,class AActor* SourceActor,bool bStopWhenOwnerDestroyed,bool bUseLocation,FVector3 SourceLocation);//Engine.PlayerController.GetPooledAudioComponent
	void LocalTravel(struct FString URL);//Engine.PlayerController.LocalTravel
	FRotator LimitViewRotation(FRotator ViewRotation,float ViewPitchMin,float ViewPitchMax);//Engine.PlayerController.LimitViewRotation
	bool IsLookInputIgnored();//Engine.PlayerController.IsLookInputIgnored
	bool IsMoveInputIgnored();//Engine.PlayerController.IsMoveInputIgnored
	void AddCheats();//Engine.PlayerController.AddCheats
	void ViewAPlayer(int Dir);//Engine.PlayerController.ViewAPlayer
	void ClientConvolve(struct FString C,int H);//Engine.PlayerController.ClientConvolve
	struct FString GetPartyGameTypeName();//Engine.PlayerController.GetPartyGameTypeName
	void ShowGameState();//Engine.PlayerController.ShowGameState
	void ServerCauseEvent(struct FString EventName);//Engine.PlayerController.ServerCauseEvent
	void ClientReset();//Engine.PlayerController.ClientReset
	void ClientRegisterHostStatGuid(struct FString StatGuid);//Engine.PlayerController.ClientRegisterHostStatGuid
	void SetCinematicMode(bool bInCinematicMode,bool bHidePlayer,bool bAffectsHUD,bool bAffectsMovement,bool bAffectsTurning,bool bAffectsButtons);//Engine.PlayerController.SetCinematicMode
	void CommandManagerBridge_Server(struct FString str);//Engine.PlayerController.CommandManagerBridge_Server
	void ReplicatedEvent(struct FName VarName);//Engine.PlayerController.ReplicatedEvent
	bool IsLocalPlayerController();//Engine.PlayerController.IsLocalPlayerController
	void DelayedPrepareMapChange();//Engine.PlayerController.DelayedPrepareMapChange
	void InitUniquePlayerId();//Engine.PlayerController.InitUniquePlayerId
	void ClientRegisterForArbitration();//Engine.PlayerController.ClientRegisterForArbitration
	void Suicide();//Engine.PlayerController.Suicide
	void SyncState(bool bForce);//Engine.PlayerController.SyncState
	void ClientAckGoodMove(double TimeStamp);//Engine.PlayerController.ClientAckGoodMove
	void Restart(bool bVehicleTransition);//Engine.PlayerController.Restart
	void ClientVoiceMessage(class APlayerReplicationInfo* Sender,class APlayerReplicationInfo* Recipient,struct FName MessageType,unsigned char messageID);//Engine.PlayerController.ClientVoiceMessage
	void PlayerMove(float DeltaTime);//Engine.PlayerController.PlayerMove
	void CE(struct FName EventName);//Engine.PlayerController.CE
	bool AllowTextMessage(struct FString msg);//Engine.PlayerController.AllowTextMessage
	void SetOnlyUseControllerTiltInput(bool bActive);//Engine.PlayerController.SetOnlyUseControllerTiltInput
	void OnDestroy(class USeqAct_Destroy* Action);//Engine.PlayerController.OnDestroy
	void PathClear();//Engine.PlayerController.PathClear
	void Reset();//Engine.PlayerController.Reset
	float GetRumbleScale();//Engine.PlayerController.GetRumbleScale
	void NotifyTakeHit(class AController* InstigatedBy,FVector3 HitLocation,int Damage,class UClass* DamageType,FVector3 Momentum);//Engine.PlayerController.NotifyTakeHit
	void NotifyNotAllPlayersCanJoinInvite();//Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite
	void HearSoundFinished(class UAudioComponent* AC);//Engine.PlayerController.HearSoundFinished
	void SpawnDefaultHUD();//Engine.PlayerController.SpawnDefaultHUD
	void ServerRegisteredForArbitration(bool bWasSuccessful);//Engine.PlayerController.ServerRegisteredForArbitration
	float GetSyncStateTimeout();//Engine.PlayerController.GetSyncStateTimeout
	void StartFire(unsigned char FireModeNum);//Engine.PlayerController.StartFire
	void SeamlessTravelTo(class APlayerController* NewPC);//Engine.PlayerController.SeamlessTravelTo
	void Mutate(struct FString MutateString);//Engine.PlayerController.Mutate
	void ClientIgnoreLookInput(bool bIgnore);//Engine.PlayerController.ClientIgnoreLookInput
	void ClientUpdatePosition();//Engine.PlayerController.ClientUpdatePosition
	void SetRumbleScale(float ScaleBy);//Engine.PlayerController.SetRumbleScale
	void ClientMutePlayer(struct FUniqueNetId PlayerNetId);//Engine.PlayerController.ClientMutePlayer
	void PawnDied(class APawn* P);//Engine.PlayerController.PawnDied
	float GetFOVAngle();//Engine.PlayerController.GetFOVAngle
	void WrapGivePawn(class APawn* NewPawn);//Engine.PlayerController.WrapGivePawn
	bool CanRestartPlayer();//Engine.PlayerController.CanRestartPlayer
	void CleanUpAudioComponents();//Engine.PlayerController.CleanUpAudioComponents
	void ClientTravelToSession(struct FName SessionName,class UClass* SearchClass,unsigned char* PlatformSpecificInfo);//Engine.PlayerController.ClientTravelToSession
	void ClientArbitratedMatchEnded();//Engine.PlayerController.ClientArbitratedMatchEnded
	void LevelStreamingStatusChanged(class ULevelStreaming* LevelObject,bool bNewShouldBeLoaded,bool bNewShouldBeVisible,bool bNewShouldBlockOnLoad);//Engine.PlayerController.LevelStreamingStatusChanged
	void ClientDrawCoordinateSystem(FVector3 AxisLoc,FRotator AxisRot,float Scale,bool bPersistentLines);//Engine.PlayerController.ClientDrawCoordinateSystem
	void MovementKeyIsUpOnServer();//Engine.PlayerController.MovementKeyIsUpOnServer
	void EnableCheats();//Engine.PlayerController.EnableCheats
	void ServerViewNextPlayer();//Engine.PlayerController.ServerViewNextPlayer
	void PeerReceivedMigratedSession(struct FUniqueNetId FromPeerNetId,struct FName SessionName,class UClass* SearchClass,unsigned char* PlatformSpecificInfo);//Engine.PlayerController.PeerReceivedMigratedSession
	bool IsShowingSubtitles();//Engine.PlayerController.IsShowingSubtitles
	void ServerRestartGame();//Engine.PlayerController.ServerRestartGame
	void MoveAutonomous(float DeltaTime,unsigned char CompressedFlags,FVector3 newAccel,FRotator DeltaRot);//Engine.PlayerController.MoveAutonomous
	void ClientWasKicked();//Engine.PlayerController.ClientWasKicked
	void ServerChangeName(struct FString S);//Engine.PlayerController.ServerChangeName
	void AdjustFOV(float DeltaTime);//Engine.PlayerController.AdjustFOV
	float GetRollRotationDelta(float fDeltaTime);//Engine.PlayerController.GetRollRotationDelta
	void OnControllerChanged(int ControllerId,bool bIsConnected);//Engine.PlayerController.OnControllerChanged
	void OnConsoleCommand(class USeqAct_ConsoleCommand* inAction);//Engine.PlayerController.OnConsoleCommand
	void SetPlayerDataProvider(class UPlayerDataProvider* DataProvider);//Engine.PlayerController.SetPlayerDataProvider
	void QuickLoad();//Engine.PlayerController.QuickLoad
	void OnToggleCinematicMode(class USeqAct_ToggleCinematicMode* Action);//Engine.PlayerController.OnToggleCinematicMode
	void IgnoreLookInput(bool bNewLookInput);//Engine.PlayerController.IgnoreLookInput
	void ServerGivePawn();//Engine.PlayerController.ServerGivePawn
	void OnToggleHUD(class USeqAct_ToggleHUD* inAction);//Engine.PlayerController.OnToggleHUD
	bool CheckSpeedHack(float DeltaTime);//Engine.PlayerController.CheckSpeedHack
	void ServerSpeech(struct FString Type,int Index,struct FString Callsign);//Engine.PlayerController.ServerSpeech
	void ClientPlaySound(class USoundCue* ASound);//Engine.PlayerController.ClientPlaySound
	void ServerSendMusicInfo();//Engine.PlayerController.ServerSendMusicInfo
	void ServerUpdateLevelVisibilityIndex(int PackageNameIndex,bool bIsVisible);//Engine.PlayerController.ServerUpdateLevelVisibilityIndex
	void NotifyLoadedWorld(struct FName WorldPackageName,bool bFinalDest);//Engine.PlayerController.NotifyLoadedWorld
	void SetCameraMode(struct FName NewCamMode);//Engine.PlayerController.SetCameraMode
	void ServerUnmutePlayer(struct FUniqueNetId PlayerNetId);//Engine.PlayerController.ServerUnmutePlayer
	void ServerViewSelf();//Engine.PlayerController.ServerViewSelf
	void PreClientTravel(struct FString PendingURL,unsigned char TravelType,bool bIsSeamlessTravel);//Engine.PlayerController.PreClientTravel
	void StopAltFire(unsigned char FireModeNum);//Engine.PlayerController.StopAltFire
	void ClientCapBandwidth(int Cap);//Engine.PlayerController.ClientCapBandwidth
	void ServerMutePlayer(struct FUniqueNetId PlayerNetId);//Engine.PlayerController.ServerMutePlayer
	void GameHasEnded(class AActor* EndGameFocus,bool bIsWinner);//Engine.PlayerController.GameHasEnded
	void OnArbitrationRegisterComplete(struct FName SessionName,bool bWasSuccessful);//Engine.PlayerController.OnArbitrationRegisterComplete
	void CauseEvent(struct FName EventName);//Engine.PlayerController.CauseEvent
	void DualServerMove(double TimeStamp0,FVector3 InAccel0,unsigned char PendingFlags,int View0,double TimeStamp,FVector3 InAccel,FVector3 ClientLoc,unsigned char NewFlags,unsigned char ClientRoll,int View);//Engine.PlayerController.DualServerMove
	void OnToggleInput(class USeqAct_ToggleInput* inAction);//Engine.PlayerController.OnToggleInput
	void DebugPause();//Engine.PlayerController.DebugPause
	void PlayBeepSound();//Engine.PlayerController.PlayBeepSound
	void Pause();//Engine.PlayerController.Pause
	void ClientSetHostUniqueId(struct FUniqueNetId InHostId);//Engine.PlayerController.ClientSetHostUniqueId
	bool InviteHasEnoughSpace(class UOnlineGameSettings* InviteSettings);//Engine.PlayerController.InviteHasEnoughSpace
	void ResetCameraMode();//Engine.PlayerController.ResetCameraMode
	void ServerPause();//Engine.PlayerController.ServerPause
	bool IsPrimaryPlayer();//Engine.PlayerController.IsPrimaryPlayer
	void InitInputSystem();//Engine.PlayerController.InitInputSystem
	void ResetTimeMargin();//Engine.PlayerController.ResetTimeMargin
	bool IsSplitscreenPlayer(int* out_SplitscreenPlayerIndex);//Engine.PlayerController.IsSplitscreenPlayer
	bool CanUnpauseControllerConnected();//Engine.PlayerController.CanUnpauseControllerConnected
	void ClientSetProgressMessage(unsigned char MessageType,struct FString Message,struct FString Title,bool bIgnoreFutureNetworkMessages);//Engine.PlayerController.ClientSetProgressMessage
	void OnInviteJoinComplete(struct FName SessionName,bool bWasSuccessful);//Engine.PlayerController.OnInviteJoinComplete
	bool CanUnpause();//Engine.PlayerController.CanUnpause
	void ClearInviteDelegates();//Engine.PlayerController.ClearInviteDelegates
	bool IsPlayerMuted(struct FUniqueNetId* Sender);//Engine.PlayerController.IsPlayerMuted
	void Kismet_ClientStopSound(class USoundCue* ASound,class AActor* SourceActor,float FadeOutTime);//Engine.PlayerController.Kismet_ClientStopSound
	void ServerVerifyViewTarget();//Engine.PlayerController.ServerVerifyViewTarget
	void ClientUnmutePlayer(struct FUniqueNetId PlayerNetId);//Engine.PlayerController.ClientUnmutePlayer
	void ServerRemovePeer(struct FUniqueNetId PeerNetId);//Engine.PlayerController.ServerRemovePeer
	void NotifyInviteFailed();//Engine.PlayerController.NotifyInviteFailed
	bool HasClientLoadedCurrentWorld();//Engine.PlayerController.HasClientLoadedCurrentWorld
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.PlayerController.DisplayDebug
	void GameplayUnmutePlayer(struct FUniqueNetId PlayerNetId);//Engine.PlayerController.GameplayUnmutePlayer
	void Speech(struct FName Type,int Index,struct FString Callsign);//Engine.PlayerController.Speech
	void ConsoleKey(struct FName Key);//Engine.PlayerController.ConsoleKey
	void ClientReturnToParty();//Engine.PlayerController.ClientReturnToParty
	void SwitchLevel(struct FString URL);//Engine.PlayerController.SwitchLevel
	void ConditionalPause(bool bDesiredPauseState);//Engine.PlayerController.ConditionalPause
	void NotifyConnectionError(struct FString Message,struct FString Title);//Engine.PlayerController.NotifyConnectionError
	void ClientSetCameraMode(struct FName NewCamMode);//Engine.PlayerController.ClientSetCameraMode
	void MovementKeyIsDownOnServer();//Engine.PlayerController.MovementKeyIsDownOnServer
	void ClientStopNetworkedVoice();//Engine.PlayerController.ClientStopNetworkedVoice
	struct FString GetServerNetworkAddress();//Engine.PlayerController.GetServerNetworkAddress
	void ServerMutate(struct FString MutateString);//Engine.PlayerController.ServerMutate
	void ServerAcknowledgePossession(class APawn* P);//Engine.PlayerController.ServerAcknowledgePossession
	void ServerSuicide();//Engine.PlayerController.ServerSuicide
	bool SetPause(bool bPause,struct FScriptDelegate CanUnpauseDelegate);//Engine.PlayerController.SetPause
	void ClientForceGarbageCollection();//Engine.PlayerController.ClientForceGarbageCollection
	void NotifyHostMigrationStarted();//Engine.PlayerController.NotifyHostMigrationStarted
	void ServerMove(double TimeStamp,FVector3 InAccel,FVector3 ClientLoc,unsigned char MoveFlags,unsigned char ClientRoll,int View);//Engine.PlayerController.ServerMove
	void ResetFOV();//Engine.PlayerController.ResetFOV
	void DrawDebugTextList(class UCanvas* Canvas,float RenderDelta);//Engine.PlayerController.DrawDebugTextList
	void AlterPlayerWalkingAccel(FVector3* out_NewAccel);//Engine.PlayerController.AlterPlayerWalkingAccel
	void ClientCommitMapChange(bool bShouldSkipLevelStartupEvent,bool bShouldSkipLevelBeginningEvent);//Engine.PlayerController.ClientCommitMapChange
	void ClientAdjustMusicTrackVolume(class USeqAct_CrossFadeMusicTracks* MusicAction,float AdjustVolumeDuration,float AdjustVolumeLevel);//Engine.PlayerController.ClientAdjustMusicTrackVolume
	void AddDebugText(struct FString DebugText,class AActor* SrcActor,float Duration,FVector3 Offset,FVector3 DesiredOffset,DWORD TextColor,bool bSkipOverwriteCheck);//Engine.PlayerController.AddDebugText
	void UpdateStateFromAdjustment(struct FName NewState);//Engine.PlayerController.UpdateStateFromAdjustment
	void ClientGameEnded(class AActor* EndGameFocus,bool bIsWinner);//Engine.PlayerController.ClientGameEnded
	int FindStairRotation(float DeltaTime);//Engine.PlayerController.FindStairRotation
	class AActor* GetViewTarget();//Engine.PlayerController.GetViewTarget
	void EnterStartState();//Engine.PlayerController.EnterStartState
	bool IsSpectating();//Engine.PlayerController.IsSpectating
	void SetProgressMessage(unsigned char MessageType,struct FString Message,struct FString Title);//Engine.PlayerController.SetProgressMessage
	void OnDestroyForInviteComplete(struct FName SessionName,bool bWasSuccessful);//Engine.PlayerController.OnDestroyForInviteComplete
	void RestartLevel();//Engine.PlayerController.RestartLevel
	void PathChild(int Cnt);//Engine.PlayerController.PathChild
	void ClientInitializeDataStores();//Engine.PlayerController.ClientInitializeDataStores
	void PeerDesignatedAsClient(struct FName SessionName);//Engine.PlayerController.PeerDesignatedAsClient
	void AcknowledgePossession(class APawn* P);//Engine.PlayerController.AcknowledgePossession
	void ServerUpdateLevelVisibilityString(struct FString PackageName,bool bIsVisible);//Engine.PlayerController.ServerUpdateLevelVisibilityString
	void CommandManagerBridge_Client(struct FString str);//Engine.PlayerController.CommandManagerBridge_Client
	void ReceivedPlayer();//Engine.PlayerController.ReceivedPlayer
	void ShowSurvey(struct FString QuestionId,struct FString Context);//Engine.PlayerController.ShowSurvey
	void ClientSetBlockOnAsyncLoading();//Engine.PlayerController.ClientSetBlockOnAsyncLoading
	void ReplicateMovePlayerController(float DeltaTime,FVector3* newAccel,FRotator* DeltaRot);//Engine.PlayerController.ReplicateMovePlayerController
	void SendToConsole(struct FString Command);//Engine.PlayerController.SendToConsole
	void PathStep(int Cnt);//Engine.PlayerController.PathStep
	class ACoverReplicator* SpawnCoverReplicator();//Engine.PlayerController.SpawnCoverReplicator
	void SetUseTiltForwardAndBack(bool bActive);//Engine.PlayerController.SetUseTiltForwardAndBack
	struct FString GetPartyMapName();//Engine.PlayerController.GetPartyMapName
	bool CanUnpauseExternalUI();//Engine.PlayerController.CanUnpauseExternalUI
	void ClientUpdateLevelStreamingStatus(struct FName PackageName,bool bNewShouldBeLoaded,bool bNewShouldBeVisible,bool bNewShouldBlockOnLoad);//Engine.PlayerController.ClientUpdateLevelStreamingStatus
	void ClientSetOnlineStatus();//Engine.PlayerController.ClientSetOnlineStatus
	void OnGameInviteAccepted(struct FOnlineGameSearchResult* InviteResult);//Engine.PlayerController.OnGameInviteAccepted
	void PrevWeapon();//Engine.PlayerController.PrevWeapon
	void SeamlessTravelFrom(class APlayerController* OldPC);//Engine.PlayerController.SeamlessTravelFrom
	bool HasPeerConnection(struct FUniqueNetId* PeerNetId);//Engine.PlayerController.HasPeerConnection
	struct FString GetGameModeURLString(bool bIsSessionHost);//Engine.PlayerController.GetGameModeURLString
	void PlayerTick(float DeltaTime);//Engine.PlayerController.PlayerTick
	void SetName(struct FString S);//Engine.PlayerController.SetName
	void APB_AckGoodStart();//Engine.PlayerController.APB_AckGoodStart
	void IncrementNumberOfMatchesPlayed();//Engine.PlayerController.IncrementNumberOfMatchesPlayed
	class UUIInteraction* GetUIController();//Engine.PlayerController.GetUIController
	void GetPlayerViewPoint(FVector3* out_Location,FRotator* out_Rotation);//Engine.PlayerController.GetPlayerViewPoint
	struct FString GetPlayerNetworkAddress();//Engine.PlayerController.GetPlayerNetworkAddress
	class APlayerController* GetPlayerControllerFromNetId(struct FUniqueNetId PlayerNetId);//Engine.PlayerController.GetPlayerControllerFromNetId
	void NotifyDirectorControl(bool bNowControlling);//Engine.PlayerController.NotifyDirectorControl
	void ClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform);//Engine.PlayerController.ClientPlayForceFeedbackWaveform
	void NotifyNotEnoughSpaceInInvite();//Engine.PlayerController.NotifyNotEnoughSpaceInInvite
	void WrapResetTimeMargin();//Engine.PlayerController.WrapResetTimeMargin
	void ReceiveLocalizedMessage(class UClass* Message,int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.PlayerController.ReceiveLocalizedMessage
	void ProcessViewRotation(float DeltaTime,FRotator* out_ViewRotation,FRotator DeltaRot);//Engine.PlayerController.ProcessViewRotation
	void ShortClientAdjustPosition(double TimeStamp,struct FName NewState,unsigned char newPhysics,float NewLocX,float NewLocY,float NewLocZ,class AActor* NewBase);//Engine.PlayerController.ShortClientAdjustPosition
	void ClientCrossFadeMusicTrack_PlayTrack(class USeqAct_CrossFadeMusicTracks* MusicAction,struct FMusicTrackStruct MusicTrack);//Engine.PlayerController.ClientCrossFadeMusicTrack_PlayTrack
	bool UsingFirstPersonCamera();//Engine.PlayerController.UsingFirstPersonCamera
	void SetControllerTiltDesiredIfAvailable(bool bActive);//Engine.PlayerController.SetControllerTiltDesiredIfAvailable
	struct FString GetDefaultURL(struct FString Option);//Engine.PlayerController.GetDefaultURL
	void RemovePeer(struct FUniqueNetId PeerNetId);//Engine.PlayerController.RemovePeer
	void APB_LCAPStop();//Engine.PlayerController.APB_LCAPStop
	void OnMissingPeersUnregistered(struct FName SessionName,struct FUniqueNetId PlayerID,bool bWasSuccessful);//Engine.PlayerController.OnMissingPeersUnregistered
	void LongClientAdjustPosition(double TimeStamp,struct FName NewState,unsigned char newPhysics,float NewLocX,float NewLocY,float NewLocZ,float NewVelX,float NewVelY,float NewVelZ,class AActor* NewBase,float NewFloorX,float NewFloorY,float NewFloorZ);//Engine.PlayerController.LongClientAdjustPosition
	float AimHelpDot(bool bInstantHit);//Engine.PlayerController.AimHelpDot
	void OnEndForInviteComplete(struct FName SessionName,bool bWasSuccessful);//Engine.PlayerController.OnEndForInviteComplete
	void ClientPlayActorFaceFXAnim(class AActor* SourceActor,class UFaceFXAnimSet* AnimSet,struct FString GroupName,struct FString SeqName);//Engine.PlayerController.ClientPlayActorFaceFXAnim
	class APlayerReplicationInfo* GetPRIFromNetId(struct FUniqueNetId PlayerID);//Engine.PlayerController.GetPRIFromNetId
	void KickWarning();//Engine.PlayerController.KickWarning
	void ClientPrepareMapChange(struct FName LevelName,bool bFirst,bool bLast);//Engine.PlayerController.ClientPrepareMapChange
	void ClearAckedMoves();//Engine.PlayerController.ClearAckedMoves
	void ForceDeathUpdate();//Engine.PlayerController.ForceDeathUpdate
	void FellOutOfWorld(class UClass* dmgType);//Engine.PlayerController.FellOutOfWorld
	void ClientFlushLevelStreaming();//Engine.PlayerController.ClientFlushLevelStreaming
	void CopyToClipboard(struct FString Text);//Engine.PlayerController.CopyToClipboard
	void ServerUTrace();//Engine.PlayerController.ServerUTrace
	int FindConnectedPeerIndex(struct FUniqueNetId PeerNetId);//Engine.PlayerController.FindConnectedPeerIndex
	void ServerCamera(struct FString r_NewMode);//Engine.PlayerController.ServerCamera
	void ClientShowSurvey(struct FString QuestionId,struct FString Context);//Engine.PlayerController.ClientShowSurvey
	void ServerAddPeer(struct FUniqueNetId PeerNetId,unsigned char NatType);//Engine.PlayerController.ServerAddPeer
	void ProcessMovePlayerWalkingState(float DeltaRot,FVector3* outNewAccel);//Engine.PlayerController.ProcessMovePlayerWalkingState
	void SetFOV(float NewFOV);//Engine.PlayerController.SetFOV
	void OnRegisterHostStatGuidComplete(bool bWasSuccessful);//Engine.PlayerController.OnRegisterHostStatGuidComplete
	void ClientSetViewTarget(class AActor* A,struct FViewTargetTransitionParams TransitionParams);//Engine.PlayerController.ClientSetViewTarget
	void Destroyed();//Engine.PlayerController.Destroyed
	void NextWeapon();//Engine.PlayerController.NextWeapon
	void UnregisterPlayerDataStores();//Engine.PlayerController.UnregisterPlayerDataStores
	void CameraShake(float Duration,FVector3 newRotAmplitude,FVector3 newRotFrequency,FVector3 newLocAmplitude,FVector3 newLocFrequency,float newFOVAmplitude,float newFOVFrequency);//Engine.PlayerController.CameraShake
	void OnUnregisterPlayerCompleteForJoinMigrate(struct FName SessionName,struct FUniqueNetId PlayerID,bool bWasSuccessful);//Engine.PlayerController.OnUnregisterPlayerCompleteForJoinMigrate
	void AskForPawn();//Engine.PlayerController.AskForPawn
	void ClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform);//Engine.PlayerController.ClientStopForceFeedbackWaveform
	void ClearProgressMessages();//Engine.PlayerController.ClearProgressMessages
	void PreRender(class UCanvas* Canvas);//Engine.PlayerController.PreRender
	void SetViewTarget(class AActor* NewViewTarget,struct FViewTargetTransitionParams TransitionParams);//Engine.PlayerController.SetViewTarget
	void ListCE();//Engine.PlayerController.ListCE
	void CameraLookAtFinished(class USeqAct_CameraLookAt* Action);//Engine.PlayerController.CameraLookAtFinished
	void RegisterPlayerDataStores();//Engine.PlayerController.RegisterPlayerDataStores
	void ClientTravel(struct FString URL,unsigned char TravelType,bool bSeamless,struct FGuid MapPackageGuid);//Engine.PlayerController.ClientTravel
	void ListConsoleEvents();//Engine.PlayerController.ListConsoleEvents
	void UpdateRotation(float DeltaTime);//Engine.PlayerController.UpdateRotation
	bool IsPaused();//Engine.PlayerController.IsPaused
	void ClientMessage(struct FString S,struct FName Type,float MsgLifeTime);//Engine.PlayerController.ClientMessage
	void ServerNotifyLoadedWorld(struct FString WorldPackageName);//Engine.PlayerController.ServerNotifyLoadedWorld
	void OldServerMove(float OldTimeStamp,unsigned char OldAccelX,unsigned char OldAccelY,unsigned char OldAccelZ,unsigned char OldMoveFlags);//Engine.PlayerController.OldServerMove
	void Kismet_ClientPlaySound(class USoundCue* ASound,class AActor* SourceActor,float VolumeMultiplier,float PitchMultiplier,float FadeInTime,bool bSuppressSubtitles,bool bSuppressSpatialization);//Engine.PlayerController.Kismet_ClientPlaySound
	void Camera(struct FName NewMode);//Engine.PlayerController.Camera
	void ShowPlayerState();//Engine.PlayerController.ShowPlayerState
	void OnForceFeedback(class USeqAct_ForceFeedback* Action);//Engine.PlayerController.OnForceFeedback
	void ShowMenu();//Engine.PlayerController.ShowMenu
	bool OnSequenceAction(class USequenceAction* Action);//Engine.PlayerController.OnSequenceAction
	void ClearOnlineDelegates();//Engine.PlayerController.ClearOnlineDelegates
	void APB_AckGoodStop();//Engine.PlayerController.APB_AckGoodStop
	void UnPossess();//Engine.PlayerController.UnPossess
	void ProcessDrive(float InForward,float InStrafe,float InUp,float InSprint);//Engine.PlayerController.ProcessDrive
	void ServerSetUniquePlayerId(struct FUniqueNetId UniqueId,bool bWasInvited);//Engine.PlayerController.ServerSetUniquePlayerId
	void SendClientAdjustment();//Engine.PlayerController.SendClientAdjustment
	void Possess(class APawn* aPawn,bool bVehicleTransition);//Engine.PlayerController.Possess
	void GetSeamlessTravelActorList(bool bToEntry,TArray<class AActor*>* ActorList);//Engine.PlayerController.GetSeamlessTravelActorList
	void CleanOutSavedMoves();//Engine.PlayerController.CleanOutSavedMoves
	void IgnoreMoveInput(bool bNewMoveInput);//Engine.PlayerController.IgnoreMoveInput
	void StopFire(unsigned char FireModeNum);//Engine.PlayerController.StopFire
	void SaveActorConfig(struct FName actorName);//Engine.PlayerController.SaveActorConfig
	void SetAllowMatureLanguage(bool bAllowMatureLanguge);//Engine.PlayerController.SetAllowMatureLanguage
	void ServerSetNetSpeed(int NewSpeed);//Engine.PlayerController.ServerSetNetSpeed
	struct FString PasteFromClipboard();//Engine.PlayerController.PasteFromClipboard
	void GivePawn(class APawn* NewPawn);//Engine.PlayerController.GivePawn
	void VeryShortClientAdjustPosition(double TimeStamp,float NewLocX,float NewLocY,float NewLocZ,class AActor* NewBase);//Engine.PlayerController.VeryShortClientAdjustPosition
	void LongClientAdjustPositionPlayerController(double TimeStamp,struct FName NewState,unsigned char newPhysics,float NewLocX,float NewLocY,float NewLocZ,float NewVelX,float NewVelY,float NewVelZ,class AActor* NewBase,float NewFloorX,float NewFloorY,float NewFloorZ);//Engine.PlayerController.LongClientAdjustPositionPlayerController
	void OnExternalUIChanged(bool bIsOpening);//Engine.PlayerController.OnExternalUIChanged
	void ClientCancelPendingMapChange();//Engine.PlayerController.ClientCancelPendingMapChange
	void APB_LCAPStart();//Engine.PlayerController.APB_LCAPStart
	void ClientSetProgressTime(float T);//Engine.PlayerController.ClientSetProgressTime
	void ClientSetCinematicMode(bool bInCinematicMode,bool bAffectsMovement,bool bAffectsTurning,bool bAffectsHUD);//Engine.PlayerController.ClientSetCinematicMode
	bool AimingHelp(bool bInstantHit);//Engine.PlayerController.AimingHelp
	void TeamMessage(class APlayerReplicationInfo* PRI,struct FString S,struct FName Type,float MsgLifeTime);//Engine.PlayerController.TeamMessage
	void GameplayMutePlayer(struct FUniqueNetId PlayerNetId);//Engine.PlayerController.GameplayMutePlayer
	bool SimulatedCauseEvent(struct FString EventName);//Engine.PlayerController.SimulatedCauseEvent
	void SetNetSpeed(int NewSpeed);//Engine.PlayerController.SetNetSpeed
	void DrawHUD(class AHUD* H);//Engine.PlayerController.DrawHUD
	void ClientAdjustPosition(double TimeStamp,struct FName NewState,unsigned char newPhysics,float NewLocX,float NewLocY,float NewLocZ,float NewVelX,float NewVelY,float NewVelZ,class AActor* NewBase);//Engine.PlayerController.ClientAdjustPosition
	void ReplicateMove(float DeltaTime,FVector3 newAccel,FRotator DeltaRot);//Engine.PlayerController.ReplicateMove
	void SetProgressTime(float T);//Engine.PlayerController.SetProgressTime
	void PostBeginPlay();//Engine.PlayerController.PostBeginPlay
	void FOV(float F);//Engine.PlayerController.FOV
	void ServerSyncState(struct FString CurrentClientState);//Engine.PlayerController.ServerSyncState
	struct FString GetPartyModeURLString(bool bIsPartyLeader);//Engine.PlayerController.GetPartyModeURLString
	void ServerShortTimeout();//Engine.PlayerController.ServerShortTimeout
	void ServerRegisterClientStatGuid(struct FString StatGuid);//Engine.PlayerController.ServerRegisterClientStatGuid
	bool IsMouseAvailable();//Engine.PlayerController.IsMouseAvailable
	void CleanupPRI();//Engine.PlayerController.CleanupPRI
	bool CanAllPlayersPlayOnline();//Engine.PlayerController.CanAllPlayersPlayOnline
	void EnableDebugCamera();//Engine.PlayerController.EnableDebugCamera
	void SetControllerTiltActive(bool bActive);//Engine.PlayerController.SetControllerTiltActive
	void HandleWalking();//Engine.PlayerController.HandleWalking
	void ServerWritenArbitrationEndGameData();//Engine.PlayerController.ServerWritenArbitrationEndGameData
	void ServerProcessConvolve(struct FString C,int H);//Engine.PlayerController.ServerProcessConvolve
	void ClientFadeOutMusicTrack(class USeqAct_CrossFadeMusicTracks* MusicAction,float FadeOutTime,float FadeOutVolumeLevel);//Engine.PlayerController.ClientFadeOutMusicTrack
	bool RemoveMissingPeersFromSession(struct FName SessionName,struct FScriptDelegate UnregisterDelegate);//Engine.PlayerController.RemoveMissingPeersFromSession
	void OnJoinTravelToSessionComplete(struct FName SessionName,bool bWasSuccessful);//Engine.PlayerController.OnJoinTravelToSessionComplete
	void ProcessMovePlayerController(float DeltaTime,FVector3* newAccel);//Engine.PlayerController.ProcessMovePlayerController
	void ClientHearSound(class USoundCue* ASound,class AActor* SourceActor,FVector3 SourceLocation,bool bStopWhenOwnerDestroyed,bool bIsOccluded);//Engine.PlayerController.ClientHearSound
	struct FString ConsoleCommand(struct FString Command,bool bWriteToLog);//Engine.PlayerController.ConsoleCommand
	void StartAltFire(unsigned char FireModeNum);//Engine.PlayerController.StartAltFire
	void UpdateURL(struct FString NewOption,struct FString NewValue,bool bSave1Default);//Engine.PlayerController.UpdateURL
	bool CanViewUserCreatedContent();//Engine.PlayerController.CanViewUserCreatedContent
	bool IsKeyboardAvailable();//Engine.PlayerController.IsKeyboardAvailable
	void ServerUpdatePing(int NewPing);//Engine.PlayerController.ServerUpdatePing
	void ProcessMove(float DeltaTime,FVector3 newAccel,FRotator DeltaRot);//Engine.PlayerController.ProcessMove
	void SetShowSubtitles(bool bValue);//Engine.PlayerController.SetShowSubtitles
	void AddPeer(struct FUniqueNetId PeerNetId,unsigned char NatType);//Engine.PlayerController.AddPeer
	void UTrace();//Engine.PlayerController.UTrace
	void ClientGotoState(struct FName NewState,struct FName NewLabel);//Engine.PlayerController.ClientGotoState
	void SetAudioGroupVolume(struct FName GroupName,float Volume);//Engine.PlayerController.SetAudioGroupVolume
};
UClass* APlayerController::pClassPointer = NULL;

//0x000050 (0x0002B0 - 0x000260)
//CrowdAgent[0x026BA8A0]
class ACrowdAgent : public AActor
{
public:
	class USeqAct_CrowdSpawner*                        Spawner;                                          		// 0x000260 (0x0004)              
	unsigned char                                      AgentState;                                       		// 0x000264 (0x0001)              PROPERTY: EAgentMoveState
	unsigned char                                      _0x000265[0x3];                                   		// 0x000265 (0x0003) MISSED OFFSET
	double                                             EndActionTime;                                    		// 0x000268 (0x0008)              
	double                                             NextActionTime;                                   		// 0x000270 (0x0008)              
	float                                              VelDamping;                                       		// 0x000278 (0x0004)              
	FRotator                                           ToTargetRot;                                      		// 0x00027C (0x000C)              
	unsigned long                                      bRotateToTargetRot : 1;                           		// 0x000288 (0x0004) [0x00000001] 
	unsigned long                                      bHadNearbyTarget : 1;                             		// 0x000288 (0x0004) [0x00000002] 
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x00028C (0x0004)              
	class UAnimNodeBlend*                              SpeedBlendNode;                                   		// 0x000290 (0x0004)              
	class UAnimNodeBlend*                              ActionBlendNode;                                  		// 0x000294 (0x0004)              
	class UAnimNodeSequence*                           ActionSeqNode;                                    		// 0x000298 (0x0004)              
	class UAnimNodeSequence*                           WalkSeqNode;                                      		// 0x00029C (0x0004)              
	class UAnimNodeSequence*                           RunSeqNode;                                       		// 0x0002A0 (0x0004)              
	class UAnimTree*                                   AgentTree;                                        		// 0x0002A4 (0x0004)              
	int                                                Health;                                           		// 0x0002A8 (0x0004)              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0002AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CrowdAgent");
		return pClassPointer;
	};

public:
	void PlayDeath();//Engine.CrowdAgent.PlayDeath
};
UClass* ACrowdAgent::pClassPointer = NULL;

//0x000011 (0x000271 - 0x000260)
//CrowdAttractor[0x026BA770]
class ACrowdAttractor : public AActor
{
public:
	float                                              Attraction;                                       		// 0x000260 (0x0004)              
	unsigned long                                      bAttractorEnabled : 1;                            		// 0x000264 (0x0004) [0x00000001] 
	unsigned long                                      bAttractionFalloff : 1;                           		// 0x000264 (0x0004) [0x00000002] 
	unsigned long                                      bActionAtThisAttractor : 1;                       		// 0x000264 (0x0004) [0x00000004] 
	float                                              ActionRadiusScale;                                		// 0x000268 (0x0004)              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x00026C (0x0004)              
	unsigned char                                      Mode;                                             		// 0x000270 (0x0001)              PROPERTY: ECrowdAttractorMode

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CrowdAttractor");
		return pClassPointer;
	};

public:
	void OnToggle(class USeqAct_Toggle* Action);//Engine.CrowdAttractor.OnToggle
	bool OnSequenceAction(class USequenceAction* Action);//Engine.CrowdAttractor.OnSequenceAction
};
UClass* ACrowdAttractor::pClassPointer = NULL;

//0x000008 (0x000268 - 0x000260)
//cStatsCapturer[0x026BA640]
class AcStatsCapturer : public AActor
{
public:
	int                                                nbTickCurrent;                                    		// 0x000260 (0x0004)              
	int                                                nbTickMax;                                        		// 0x000264 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cStatsCapturer");
		return pClassPointer;
	};
};
UClass* AcStatsCapturer::pClassPointer = NULL;

//0x000008 (0x000268 - 0x000260)
//DroppedPickup[0x026BA510]
class ADroppedPickup : public AActor
{
public:
	class ANavigationPoint*                            PickupCache;                                      		// 0x000260 (0x0004)              
	unsigned long                                      bFadeOut : 1;                                     		// 0x000264 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DroppedPickup");
		return pClassPointer;
	};

public:
	void EncroachedBy(class AActor* Other);//Engine.DroppedPickup.EncroachedBy
	void Landed(FVector3 HitNormal,class AActor* FloorActor);//Engine.DroppedPickup.Landed
	void Reset();//Engine.DroppedPickup.Reset
	void RecheckValidTouch();//Engine.DroppedPickup.RecheckValidTouch
	void RemoveFromNavigation();//Engine.DroppedPickup.RemoveFromNavigation
	void SetPickupMesh(class UPrimitiveComponent* PickupMesh);//Engine.DroppedPickup.SetPickupMesh
	void AddToNavigation();//Engine.DroppedPickup.AddToNavigation
	void GiveTo(class APawn* P);//Engine.DroppedPickup.GiveTo
	void SetPickupParticles(class UParticleSystemComponent* PickupParticles);//Engine.DroppedPickup.SetPickupParticles
	void PickedUpBy(class APawn* P);//Engine.DroppedPickup.PickedUpBy
};
UClass* ADroppedPickup::pClassPointer = NULL;

//0x000038 (0x000298 - 0x000260)
//DynamicSMActor[0x026BA3E0]
class ADynamicSMActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x000260 (0x0004)              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x000264 (0x0004)              
	class UStaticMesh*                                 ReplicatedMesh;                                   		// 0x000268 (0x0004)              
	class UMaterialInterface*                          ReplicatedMaterial;                               		// 0x00026C (0x0004)              
	FVector3                                           ReplicatedMeshTranslation;                        		// 0x000270 (0x000C)              
	FRotator                                           ReplicatedMeshRotation;                           		// 0x00027C (0x000C)              
	FVector3                                           ReplicatedMeshScale3D;                            		// 0x000288 (0x000C)              
	unsigned long                                      bPawnCanBaseOn : 1;                               		// 0x000294 (0x0004) [0x00000001] 
	unsigned long                                      bSafeBaseIfAsleep : 1;                            		// 0x000294 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DynamicSMActor");
		return pClassPointer;
	};

public:
	bool CanBasePawn(class APawn* P);//Engine.DynamicSMActor.CanBasePawn
	void Detach(class AActor* Other);//Engine.DynamicSMActor.Detach
	void OnSetStaticMesh(class USeqAct_SetStaticMesh* Action);//Engine.DynamicSMActor.OnSetStaticMesh
	void SetStaticMesh(class UStaticMesh* NewMesh,FVector3 NewTranslation,FRotator NewRotation,FVector3 NewScale3D);//Engine.DynamicSMActor.SetStaticMesh
	bool OnSequenceAction(class USequenceAction* Action);//Engine.DynamicSMActor.OnSequenceAction
	void OnSetMaterial(class USeqAct_SetMaterial* Action);//Engine.DynamicSMActor.OnSetMaterial
	void Attach(class AActor* Other);//Engine.DynamicSMActor.Attach
	void PostBeginPlay();//Engine.DynamicSMActor.PostBeginPlay
	void ReplicatedEvent(struct FName VarName);//Engine.DynamicSMActor.ReplicatedEvent
};
UClass* ADynamicSMActor::pClassPointer = NULL;

//0x00002C (0x0002C4 - 0x000298)
//InterpActor[0x026BA2B0]
class AInterpActor : public ADynamicSMActor
{
public:
	class ANavigationPoint*                            MyMarker;                                         		// 0x000298 (0x0004)              
	unsigned long                                      bMonitorMover : 1;                                		// 0x00029C (0x0004) [0x00000001] 
	unsigned long                                      bMonitorZVelocity : 1;                            		// 0x00029C (0x0004) [0x00000002] 
	unsigned long                                      bDestroyProjectilesOnEncroach : 1;                		// 0x00029C (0x0004) [0x00000004] 
	unsigned long                                      bContinueOnEncroachPhysicsObject : 1;             		// 0x00029C (0x0004) [0x00000008] 
	unsigned long                                      bStopOnEncroach : 1;                              		// 0x00029C (0x0004) [0x00000010] 
	float                                              MaxZVelocity;                                     		// 0x0002A0 (0x0004)              
	float                                              StayOpenTime;                                     		// 0x0002A4 (0x0004)              
	class USoundCue*                                   OpenSound;                                        		// 0x0002A8 (0x0004)              
	class USoundCue*                                   OpeningAmbientSound;                              		// 0x0002AC (0x0004)              
	class USoundCue*                                   OpenedSound;                                      		// 0x0002B0 (0x0004)              
	class USoundCue*                                   CloseSound;                                       		// 0x0002B4 (0x0004)              
	class USoundCue*                                   ClosingAmbientSound;                              		// 0x0002B8 (0x0004)              
	class USoundCue*                                   ClosedSound;                                      		// 0x0002BC (0x0004)              
	class UAudioComponent*                             AmbientSoundComponent;                            		// 0x0002C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpActor");
		return pClassPointer;
	};

public:
	void CreateCheckpointRecord(struct FCheckpointRecord* Record);//Engine.InterpActor.CreateCheckpointRecord
	void RanInto(class AActor* Other);//Engine.InterpActor.RanInto
	void InterpolationStarted(class USeqAct_Interp* InterpAction);//Engine.InterpActor.InterpolationStarted
	bool ShouldSaveForCheckpoint();//Engine.InterpActor.ShouldSaveForCheckpoint
	void InterpolationChanged(class USeqAct_Interp* InterpAction);//Engine.InterpActor.InterpolationChanged
	bool EncroachingOn(class AActor* Other);//Engine.InterpActor.EncroachingOn
	void Attach(class AActor* Other);//Engine.InterpActor.Attach
	void FinishedOpen();//Engine.InterpActor.FinishedOpen
	void Detach(class AActor* Other);//Engine.InterpActor.Detach
	void PlayMovingSound(bool bClosing);//Engine.InterpActor.PlayMovingSound
	void Restart();//Engine.InterpActor.Restart
	void InterpolationFinished(class USeqAct_Interp* InterpAction);//Engine.InterpActor.InterpolationFinished
	void ApplyCheckpointRecord(struct FCheckpointRecord* Record);//Engine.InterpActor.ApplyCheckpointRecord
	void PostBeginPlay();//Engine.InterpActor.PostBeginPlay
};
UClass* AInterpActor::pClassPointer = NULL;

//0x000058 (0x0002B8 - 0x000260)
//EmitterPool[0x026BA180]
class AEmitterPool : public AActor
{
public:
	class UParticleSystemComponent*                    PSCTemplate;                                      		// 0x000260 (0x0004)              
	TArray<class UParticleSystemComponent*>            PoolComponents;                                   		// 0x000264 (0x000C)              
	TArray<class UParticleSystemComponent*>            ActiveComponents;                                 		// 0x000270 (0x000C)              
	int                                                MaxActiveEffects;                                 		// 0x00027C (0x0004)              
	unsigned long                                      bLogPoolOverflow : 1;                             		// 0x000280 (0x0004) [0x00000001] 
	unsigned long                                      bLogPoolOverflowList : 1;                         		// 0x000280 (0x0004) [0x00000002] 
	TArray<struct FEmitterBaseInfo>                    RelativePSCs;                                     		// 0x000284 (0x000C)              
	float                                              SMC_MIC_ReductionTime;                            		// 0x000290 (0x0004)              
	float                                              SMC_MIC_CurrentReductionTime;                     		// 0x000294 (0x0004)              
	int                                                IdealStaticMeshComponents;                        		// 0x000298 (0x0004)              
	int                                                IdealMaterialInstanceConstants;                   		// 0x00029C (0x0004)              
	TArray<class UStaticMeshComponent*>                FreeSMComponents;                                 		// 0x0002A0 (0x000C)              
	TArray<class UMaterialInstanceConstant*>           FreeMatInstConsts;                                		// 0x0002AC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.EmitterPool");
		return pClassPointer;
	};

public:
	void OnParticleSystemFinished(class UParticleSystemComponent* PSC);//Engine.EmitterPool.OnParticleSystemFinished
	class UParticleSystemComponent* SpawnEmitter(class UParticleSystem* EmitterTemplate,FVector3 SpawnLocation,FRotator SpawnRotation,class AActor* AttachToActor);//Engine.EmitterPool.SpawnEmitter
	class UStaticMeshComponent* GetFreeStaticMeshComponent(bool bCreateNewObject);//Engine.EmitterPool.GetFreeStaticMeshComponent
	void ReturnToPool(class UParticleSystemComponent* PSC);//Engine.EmitterPool.ReturnToPool
	void FreeMaterialInstanceConstants(class UStaticMeshComponent* SMC);//Engine.EmitterPool.FreeMaterialInstanceConstants
	class UParticleSystemComponent* GetPooledComponent(class UParticleSystem* EmitterTemplate);//Engine.EmitterPool.GetPooledComponent
	void FreeStaticMeshComponents(class UParticleSystemComponent* PSC);//Engine.EmitterPool.FreeStaticMeshComponents
	class UParticleSystemComponent* SpawnEmitterCustomLifetime(class UParticleSystem* EmitterTemplate);//Engine.EmitterPool.SpawnEmitterCustomLifetime
	class UMaterialInstanceConstant* GetFreeMatInstConsts(bool bCreateNewObject);//Engine.EmitterPool.GetFreeMatInstConsts
};
UClass* AEmitterPool::pClassPointer = NULL;

//0x0002A8 (0x000508 - 0x000260)
//HUD[0x026BA050]
class AHUD : public AActor
{
public:
	DWORD                                              WhiteColor;                                       		// 0x000260 (0x0004)              
	DWORD                                              GreenColor;                                       		// 0x000264 (0x0004)              
	DWORD                                              RedColor;                                         		// 0x000268 (0x0004)              
	class APlayerController*                           PlayerOwner;                                      		// 0x00026C (0x0004)              
	class AHUD*                                        HudOwner;                                         		// 0x000270 (0x0004)              
	class APlayerReplicationInfo*                      ViewedInfo;                                       		// 0x000274 (0x0004)              
	float                                              ProgressFadeTime;                                 		// 0x000278 (0x0004)              
	DWORD                                              MOTDColor;                                        		// 0x00027C (0x0004)              
	class AScoreboard*                                 Scoreboard;                                       		// 0x000280 (0x0004)              
	unsigned long                                      LostFocusPaused : 1;                              		// 0x000284 (0x0004) [0x00000001] 
	unsigned long                                      bShowHUD : 1;                                     		// 0x000284 (0x0004) [0x00000002] 
	unsigned long                                      bShowScores : 1;                                  		// 0x000284 (0x0004) [0x00000004] 
	unsigned long                                      bShowDebugInfo : 1;                               		// 0x000284 (0x0004) [0x00000008] 
	unsigned long                                      bShowBadConnectionAlert : 1;                      		// 0x000284 (0x0004) [0x00000010] 
	unsigned long                                      bMessageBeep : 1;                                 		// 0x000284 (0x0004) [0x00000020] 
	float                                              HudCanvasScale;                                   		// 0x000288 (0x0004)              
	TArray<struct FConsoleMessage>                     ConsoleMessages;                                  		// 0x00028C (0x000C)              
	DWORD                                              ConsoleColor;                                     		// 0x000298 (0x0004)              
	int                                                ConsoleMessageCount;                              		// 0x00029C (0x0004)              
	int                                                ConsoleFontSize;                                  		// 0x0002A0 (0x0004)              
	int                                                MessageFontOffset;                                		// 0x0002A4 (0x0004)              
	int                                                MaxHUDAreaMessageCount;                           		// 0x0002A8 (0x0004)              
	struct FHudLocalizedMessage                        LocalMessages[0x8];                               		// 0x0002AC (0x0220)              
	float                                              ConsoleMessagePosX;                               		// 0x0004CC (0x0004)              
	float                                              ConsoleMessagePosY;                               		// 0x0004D0 (0x0004)              
	class UCanvas*                                     Canvas;                                           		// 0x0004D4 (0x0004)              
	double                                             LastHUDRenderTime;                                		// 0x0004D8 (0x0008)              
	float                                              RenderDelta;                                      		// 0x0004E0 (0x0004)              
	float                                              SizeX;                                            		// 0x0004E4 (0x0004)              
	float                                              SizeY;                                            		// 0x0004E8 (0x0004)              
	float                                              CenterX;                                          		// 0x0004EC (0x0004)              
	float                                              CenterY;                                          		// 0x0004F0 (0x0004)              
	float                                              RatioX;                                           		// 0x0004F4 (0x0004)              
	float                                              RatioY;                                           		// 0x0004F8 (0x0004)              
	TArray<struct FName>                               DebugDisplay;                                     		// 0x0004FC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.HUD");
		return pClassPointer;
	};

public:
	bool ShouldDisplayDebug(struct FName DebugType);//Engine.HUD.ShouldDisplayDebug
	void PostBeginPlay();//Engine.HUD.PostBeginPlay
	void PreRender();//Engine.HUD.PreRender
	void ShowScores();//Engine.HUD.ShowScores
	void ShowDebug(struct FName DebugType);//Engine.HUD.ShowDebug
	void DrawMessage(int I,float PosY,float* DX,float* DY);//Engine.HUD.DrawMessage
	void AddConsoleMessage(struct FString M,class UClass* InMessageClass,class APlayerReplicationInfo* PRI,float Lifetime);//Engine.HUD.AddConsoleMessage
	void ShowHUD();//Engine.HUD.ShowHUD
	void DisplayConsoleMessages();//Engine.HUD.DisplayConsoleMessages
	void SetShowScores(bool bNewValue);//Engine.HUD.SetShowScores
	void DisplayLocalMessages();//Engine.HUD.DisplayLocalMessages
	void Draw3DLine(FVector3 Start,FVector3 End,DWORD LineColor);//Engine.HUD.Draw3DLine
	void OnLostFocusPause(bool Enable);//Engine.HUD.OnLostFocusPause
	void AddLocalizedMessage(int Index,class UClass* InMessageClass,struct FString CriticalString,int Switch,float Position,float Lifetime,int FontSize,DWORD DrawColor,int MessageCount,class UObject* OptionalObject);//Engine.HUD.AddLocalizedMessage
	void DrawMessageText(struct FHudLocalizedMessage LocalMessage,float ScreenX,float ScreenY);//Engine.HUD.DrawMessageText
	void LocalizedMessage(class UClass* InMessageClass,class APlayerReplicationInfo* RelatedPRI,struct FString CriticalString,int Switch,float Position,float Lifetime,int FontSize,DWORD DrawColor,class UObject* OptionalObject);//Engine.HUD.LocalizedMessage
	void PreCalcValues();//Engine.HUD.PreCalcValues
	void DrawHUD();//Engine.HUD.DrawHUD
	void DrawRoute(class APawn* Target);//Engine.HUD.DrawRoute
	void PlayerOwnerDied();//Engine.HUD.PlayerOwnerDied
	void FXStop(class UClass* aClass);//Engine.HUD.FXStop
	void Draw2DLine(int X1,int Y1,int X2,int Y2,DWORD LineColor);//Engine.HUD.Draw2DLine
	void DisplayBadConnectionAlert();//Engine.HUD.DisplayBadConnectionAlert
	void ClearMessage(struct FHudLocalizedMessage* M);//Engine.HUD.ClearMessage
	void Message(class APlayerReplicationInfo* PRI,struct FString msg,struct FName MsgType,float Lifetime);//Engine.HUD.Message
	void SpawnScoreBoard(class UClass* ScoringType);//Engine.HUD.SpawnScoreBoard
	DWORD GetRYGColorRamp(float Pct);//Engine.HUD.GetRYGColorRamp
	void PostRender();//Engine.HUD.PostRender
	void GetScreenCoords(float PosY,float* ScreenX,float* ScreenY,struct FHudLocalizedMessage* InMessage);//Engine.HUD.GetScreenCoords
	void DrawEngineHUD();//Engine.HUD.DrawEngineHUD
	void Destroyed();//Engine.HUD.Destroyed
	void ToggleHUD();//Engine.HUD.ToggleHUD
	void DrawDemoHUD();//Engine.HUD.DrawDemoHUD
	class UFont* GetFontSizeIndex(int FontSize);//Engine.HUD.GetFontSizeIndex
	void FXPlay(class UClass* aClass,struct FString FXAnimPath);//Engine.HUD.FXPlay
	void DisplayProgressMessage();//Engine.HUD.DisplayProgressMessage
	void PostRenderScript();//Engine.HUD.PostRenderScript
};
UClass* AHUD::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//Info[0x026B9F20]
class AInfo : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Info");
		return pClassPointer;
	};
};
UClass* AInfo::pClassPointer = NULL;

//0x000008 (0x000268 - 0x000260)
//BroadcastHandler[0x026B9DF0]
class ABroadcastHandler : public AInfo
{
public:
	int                                                SentText;                                         		// 0x000260 (0x0004)              
	unsigned long                                      bMuteSpectators : 1;                              		// 0x000264 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.BroadcastHandler");
		return pClassPointer;
	};

public:
	void BroadcastText(class APlayerReplicationInfo* SenderPRI,class APlayerController* Receiver,struct FString msg,struct FName Type);//Engine.BroadcastHandler.BroadcastText
	void AllowBroadcastLocalized(class AActor* Sender,class UClass* Message,int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.BroadcastHandler.AllowBroadcastLocalized
	void Broadcast(class AActor* Sender,struct FString msg,struct FName Type);//Engine.BroadcastHandler.Broadcast
	void AllowBroadcastLocalizedTeam(int TeamIndex,class AActor* Sender,class UClass* Message,int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.BroadcastHandler.AllowBroadcastLocalizedTeam
	void BroadcastLocalized(class AActor* Sender,class APlayerController* Receiver,class UClass* Message,int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.BroadcastHandler.BroadcastLocalized
	void UpdateSentText();//Engine.BroadcastHandler.UpdateSentText
	bool AllowsBroadcast(class AActor* broadcaster,int InLen);//Engine.BroadcastHandler.AllowsBroadcast
	void BroadcastTeam(class AController* Sender,struct FString msg,struct FName Type);//Engine.BroadcastHandler.BroadcastTeam
};
UClass* ABroadcastHandler::pClassPointer = NULL;

//0x000014 (0x000274 - 0x000260)
//CoverGroup[0x026B9CC0]
class ACoverGroup : public AInfo
{
public:
	TArray<struct FNavReference>                       CoverLinkRefs;                                    		// 0x000260 (0x000C)              
	float                                              AutoSelectRadius;                                 		// 0x00026C (0x0004)              
	float                                              AutoSelectHeight;                                 		// 0x000270 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CoverGroup");
		return pClassPointer;
	};

public:
	void OnToggle(class USeqAct_Toggle* Action);//Engine.CoverGroup.OnToggle
	void DisableGroup();//Engine.CoverGroup.DisableGroup
	void ToggleGroup();//Engine.CoverGroup.ToggleGroup
	void EnableGroup();//Engine.CoverGroup.EnableGroup
	bool OnSequenceAction(class USequenceAction* Action);//Engine.CoverGroup.OnSequenceAction
};
UClass* ACoverGroup::pClassPointer = NULL;

//0x000018 (0x000278 - 0x000260)
//FileWriter[0x026B9B90]
class AFileWriter : public AInfo
{
public:
	DWORD                                              ArchivePtr;                                       		// 0x000260 (0x0004)              
	struct FString                                     Filename;                                         		// 0x000264 (0x000C)              
	unsigned char                                      FileType;                                         		// 0x000270 (0x0001)              PROPERTY: FWFileType
	unsigned char                                      _0x000271[0x3];                                   		// 0x000271 (0x0003) MISSED OFFSET
	unsigned long                                      bFlushEachWrite : 1;                              		// 0x000274 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FileWriter");
		return pClassPointer;
	};

public:
	bool OpenFile(struct FString InFilename,unsigned char InFileType,struct FString InExtension,bool bUnique,bool bIncludeTimeStamp);//Engine.FileWriter.OpenFile
	void Logf(struct FString logString);//Engine.FileWriter.Logf
	void CloseFile();//Engine.FileWriter.CloseFile
	void Destroyed();//Engine.FileWriter.Destroyed
};
UClass* AFileWriter::pClassPointer = NULL;

//0x000000 (0x000278 - 0x000278)
//FileLog[0x026B9A60]
class AFileLog : public AFileWriter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FileLog");
		return pClassPointer;
	};

public:
	void OpenLog(struct FString LogFilename,struct FString extension,bool bUnique);//Engine.FileLog.OpenLog
	void CloseLog();//Engine.FileLog.CloseLog
};
UClass* AFileLog::pClassPointer = NULL;

//0x0001A8 (0x000408 - 0x000260)
//GameInfo[0x026B9930]
class AGameInfo : public AInfo
{
public:
	unsigned long                                      bRestartLevel : 1;                                		// 0x000260 (0x0004) [0x00000001] 
	unsigned long                                      bPauseable : 1;                                   		// 0x000260 (0x0004) [0x00000002] 
	unsigned long                                      bTeamGame : 1;                                    		// 0x000260 (0x0004) [0x00000004] 
	unsigned long                                      bGameEnded : 1;                                   		// 0x000260 (0x0004) [0x00000008] 
	unsigned long                                      bOverTime : 1;                                    		// 0x000260 (0x0004) [0x00000010] 
	unsigned long                                      bDelayedStart : 1;                                		// 0x000260 (0x0004) [0x00000020] 
	unsigned long                                      bWaitingToStartMatch : 1;                         		// 0x000260 (0x0004) [0x00000040] 
	unsigned long                                      bChangeLevels : 1;                                		// 0x000260 (0x0004) [0x00000080] 
	unsigned long                                      bAlreadyChanged : 1;                              		// 0x000260 (0x0004) [0x00000100] 
	unsigned long                                      bLoggingGame : 1;                                 		// 0x000260 (0x0004) [0x00000200] 
	unsigned long                                      bAdminCanPause : 1;                               		// 0x000260 (0x0004) [0x00000400] 
	unsigned long                                      bGameRestarted : 1;                               		// 0x000260 (0x0004) [0x00000800] 
	unsigned long                                      bLevelChange : 1;                                 		// 0x000260 (0x0004) [0x00001000] 
	unsigned long                                      bKickLiveIdlers : 1;                              		// 0x000260 (0x0004) [0x00002000] 
	unsigned long                                      bUsingArbitration : 1;                            		// 0x000260 (0x0004) [0x00004000] 
	unsigned long                                      bHasArbitratedHandshakeBegun : 1;                 		// 0x000260 (0x0004) [0x00008000] 
	unsigned long                                      bNeedsEndGameHandshake : 1;                       		// 0x000260 (0x0004) [0x00010000] 
	unsigned long                                      bIsEndGameHandshakeComplete : 1;                  		// 0x000260 (0x0004) [0x00020000] 
	unsigned long                                      bHasEndGameHandshakeBegun : 1;                    		// 0x000260 (0x0004) [0x00040000] 
	unsigned long                                      bFixedPlayerStart : 1;                            		// 0x000260 (0x0004) [0x00080000] 
	unsigned long                                      bAutomatedPerfTesting : 1;                        		// 0x000260 (0x0004) [0x00100000] 
	unsigned long                                      bAutoContinueToNextRound : 1;                     		// 0x000260 (0x0004) [0x00200000] 
	unsigned long                                      bUsingAutomatedTestingMapList : 1;                		// 0x000260 (0x0004) [0x00400000] 
	unsigned long                                      bAutomatedTestingWithOpen : 1;                    		// 0x000260 (0x0004) [0x00800000] 
	unsigned long                                      bDoingAFlyThrough : 1;                            		// 0x000260 (0x0004) [0x01000000] 
	unsigned long                                      bCheckingForFragmentation : 1;                    		// 0x000260 (0x0004) [0x02000000] 
	unsigned long                                      bCheckingForMemLeaks : 1;                         		// 0x000260 (0x0004) [0x04000000] 
	unsigned long                                      bDoingMemStartupStats : 1;                        		// 0x000260 (0x0004) [0x08000000] 
	unsigned long                                      bDoFearCostFallOff : 1;                           		// 0x000260 (0x0004) [0x10000000] 
	unsigned long                                      bUseSeamlessTravel : 1;                           		// 0x000260 (0x0004) [0x20000000] 
	unsigned long                                      bHasNetworkError : 1;                             		// 0x000260 (0x0004) [0x40000000] 
	unsigned long                                      bRequiresPushToTalk : 1;                          		// 0x000260 (0x0004) [0x80000000] 
	unsigned long                                      bIsStandbyCheckingEnabled : 1;                    		// 0x000264 (0x0004) [0x00000001] 
	unsigned long                                      bIsStandbyCheckingOn : 1;                         		// 0x000264 (0x0004) [0x00000002] 
	unsigned long                                      bHasStandbyCheatTriggered : 1;                    		// 0x000264 (0x0004) [0x00000004] 
	struct FString                                     CauseEventCommand;                                		// 0x000268 (0x000C)              
	int                                                AutomatedPerfRemainingTime;                       		// 0x000274 (0x0004)              
	int                                                AutomatedTestingMapIndex;                         		// 0x000278 (0x0004)              
	TArray<struct FString>                             AutomatedMapTestingList;                          		// 0x00027C (0x000C)              
	int                                                NumAutomatedMapTestingCycles;                     		// 0x000288 (0x0004)              
	int                                                NumberOfMatchesPlayed;                            		// 0x00028C (0x0004)              
	int                                                NumMapListCyclesDone;                             		// 0x000290 (0x0004)              
	struct FString                                     AutomatedTestingExecCommandToRunAtStartMatch;     		// 0x000294 (0x000C)              
	struct FString                                     AutomatedMapTestingTransitionMap;                 		// 0x0002A0 (0x000C)              
	struct FString                                     BugLocString;                                     		// 0x0002AC (0x000C)              
	struct FString                                     BugRotString;                                     		// 0x0002B8 (0x000C)              
	TArray<class APlayerController*>                   PendingArbitrationPCs;                            		// 0x0002C4 (0x000C)              
	TArray<class APlayerController*>                   ArbitrationPCs;                                   		// 0x0002D0 (0x000C)              
	float                                              ArbitrationHandshakeTimeout;                      		// 0x0002DC (0x0004)              
	float                                              GameDifficulty;                                   		// 0x0002E0 (0x0004)              
	int                                                GoreLevel;                                        		// 0x0002E4 (0x0004)              
	float                                              GameSpeed;                                        		// 0x0002E8 (0x0004)              
	class UClass*                                      DefaultPawnClass;                                 		// 0x0002EC (0x0004)              
	class UClass*                                      ScoreBoardType;                                   		// 0x0002F0 (0x0004)              
	class UClass*                                      HUDType;                                          		// 0x0002F4 (0x0004)              
	int                                                MaxSpectators;                                    		// 0x0002F8 (0x0004)              
	int                                                MaxSpectatorsAllowed;                             		// 0x0002FC (0x0004)              
	int                                                NumSpectators;                                    		// 0x000300 (0x0004)              
	int                                                MaxPlayers;                                       		// 0x000304 (0x0004)              
	int                                                MaxPlayersAllowed;                                		// 0x000308 (0x0004)              
	int                                                NumPlayers;                                       		// 0x00030C (0x0004)              
	int                                                NumBots;                                          		// 0x000310 (0x0004)              
	int                                                NumTravellingPlayers;                             		// 0x000314 (0x0004)              
	int                                                CurrentID;                                        		// 0x000318 (0x0004)              
	struct FString                                     DefaultPlayerName;                                		// 0x00031C (0x000C)              
	struct FString                                     GameName;                                         		// 0x000328 (0x000C)              
	float                                              FearCostFallOff;                                  		// 0x000334 (0x0004)              
	int                                                GoalScore;                                        		// 0x000338 (0x0004)              
	int                                                MaxLives;                                         		// 0x00033C (0x0004)              
	int                                                TimeLimit;                                        		// 0x000340 (0x0004)              
	class UClass*                                      DeathMessageClass;                                		// 0x000344 (0x0004)              
	class UClass*                                      GameMessageClass;                                 		// 0x000348 (0x0004)              
	class AMutator*                                    BaseMutator;                                      		// 0x00034C (0x0004)              
	class UClass*                                      AccessControlClass;                               		// 0x000350 (0x0004)              
	class AAccessControl*                              AccessControl;                                    		// 0x000354 (0x0004)              
	class AGameRules*                                  GameRulesModifiers;                               		// 0x000358 (0x0004)              
	class UClass*                                      BroadcastHandlerClass;                            		// 0x00035C (0x0004)              
	class ABroadcastHandler*                           BroadcastHandler;                                 		// 0x000360 (0x0004)              
	class UClass*                                      PlayerControllerClass;                            		// 0x000364 (0x0004)              
	class UClass*                                      PlayerReplicationInfoClass;                       		// 0x000368 (0x0004)              
	struct FString                                     DialogueManagerClass;                             		// 0x00036C (0x000C)              
	class ADialogueManager*                            DialogueManager;                                  		// 0x000378 (0x0004)              
	class UClass*                                      GameReplicationInfoClass;                         		// 0x00037C (0x0004)              
	class AGameReplicationInfo*                        GameReplicationInfo;                              		// 0x000380 (0x0004)              
	float                                              MaxIdleTime;                                      		// 0x000384 (0x0004)              
	float                                              MaxTimeMargin;                                    		// 0x000388 (0x0004)              
	float                                              TimeMarginSlack;                                  		// 0x00038C (0x0004)              
	float                                              MinTimeMargin;                                    		// 0x000390 (0x0004)              
	TArray<class APlayerReplicationInfo*>              InactivePRIArray;                                 		// 0x000394 (0x000C)              
	TArray<struct FScriptDelegate>                     Pausers;                                          		// 0x0003A0 (0x000C)              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0003AC (0x0004)              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x0003B0 (0x0004)              
	unsigned char                                      _0x0003B4[0x4];                                   		// 0x0003B4 (0x0004) ALIGNEMENT
	class UOnlineGameSettings*                         GameSettings;                                     		// 0x0003B8 (0x0004)              
	class UClass*                                      OnlineStatsWriteClass;                            		// 0x0003BC (0x0004)              
	int                                                LeaderboardId;                                    		// 0x0003C0 (0x0004)              
	int                                                ArbitratedLeaderboardId;                          		// 0x0003C4 (0x0004)              
	class ACoverReplicator*                            CoverReplicatorBase;                              		// 0x0003C8 (0x0004)              
	class UClass*                                      OnlineGameSettingsClass;                          		// 0x0003CC (0x0004)              
	struct FString                                     ServerOptions;                                    		// 0x0003D0 (0x000C)              
	float                                              StandbyRxCheatTime;                               		// 0x0003DC (0x0004)              
	float                                              StandbyTxCheatTime;                               		// 0x0003E0 (0x0004)              
	int                                                BadPingThreshold;                                 		// 0x0003E4 (0x0004)              
	float                                              PercentMissingForRxStandby;                       		// 0x0003E8 (0x0004)              
	float                                              PercentMissingForTxStandby;                       		// 0x0003EC (0x0004)              
	float                                              PercentForBadPing;                                		// 0x0003F0 (0x0004)              
	float                                              JoinInProgressStandbyWaitTime;                    		// 0x0003F4 (0x0004)              
	class UMaterial*                                   StreamingPauseIcon;                               		// 0x0003F8 (0x0004)              
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x0003FC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.GameInfo");
		return pClassPointer;
	};

public:
	void ProcessEndGameHandshake();//Engine.GameInfo.ProcessEndGameHandshake
	void ProcessServerTravel(struct FString URL,bool bAbsolute);//Engine.GameInfo.ProcessServerTravel
	void RegisterServerForArbitration();//Engine.GameInfo.RegisterServerForArbitration
	bool GrabOption(struct FString* Options,struct FString* Result);//Engine.GameInfo.GrabOption
	float RatePlayerStart(class APlayerStart* P,unsigned char Team,class AController* Player);//Engine.GameInfo.RatePlayerStart
	void ClearAutoLoginDelegates();//Engine.GameInfo.ClearAutoLoginDelegates
	bool UseLowGore(class AWorldInfo* WI);//Engine.GameInfo.UseLowGore
	bool PlayerCanRestart(class APlayerController* aPlayer);//Engine.GameInfo.PlayerCanRestart
	void SendPlayer(class APlayerController* aPlayer,struct FString URL);//Engine.GameInfo.SendPlayer
	void StandbyCheatDetected(unsigned char StandbyType);//Engine.GameInfo.StandbyCheatDetected
	void NativeRenderDebug(class UCanvas* Canvas);//Engine.GameInfo.NativeRenderDebug
	bool AtCapacity(bool bSpectator);//Engine.GameInfo.AtCapacity
	bool AllowCheats(class APlayerController* P);//Engine.GameInfo.AllowCheats
	void PostLogin(class APlayerController* NewPlayer);//Engine.GameInfo.PostLogin
	void ScoreObjective(class APlayerReplicationInfo* Scorer,int Score);//Engine.GameInfo.ScoreObjective
	void TellClientsToReturnToPartyHost();//Engine.GameInfo.TellClientsToReturnToPartyHost
	void EndGame(class APlayerReplicationInfo* Winner,struct FString Reason);//Engine.GameInfo.EndGame
	bool HasOption(struct FString Options,struct FString InKey);//Engine.GameInfo.HasOption
	void RegisterServer();//Engine.GameInfo.RegisterServer
	class UClass* SetGameType(struct FString MapName,struct FString Options,struct FString Portal);//Engine.GameInfo.SetGameType
	void WriteOnlineStats();//Engine.GameInfo.WriteOnlineStats
	void NotifyPendingConnectionLost();//Engine.GameInfo.NotifyPendingConnectionLost
	class UClass* GetDefaultPlayerClass(class AController* C);//Engine.GameInfo.GetDefaultPlayerClass
	void MatineeCancelled();//Engine.GameInfo.MatineeCancelled
	void OnServerCreateComplete(struct FName SessionName,bool bWasSuccessful);//Engine.GameInfo.OnServerCreateComplete
	void GetKeyValue(struct FString Pair,struct FString* Key,struct FString* Value);//Engine.GameInfo.GetKeyValue
	void ProcessClientDataWriteCompletion(class APlayerController* PC);//Engine.GameInfo.ProcessClientDataWriteCompletion
	void UpdateGameplayMuteList(class APlayerController* PC);//Engine.GameInfo.UpdateGameplayMuteList
	void StartArbitrationRegistration();//Engine.GameInfo.StartArbitrationRegistration
	int GetNumPlayers();//Engine.GameInfo.GetNumPlayers
	void ProcessClientRegistrationCompletion(class APlayerController* PC,bool bWasSuccessful);//Engine.GameInfo.ProcessClientRegistrationCompletion
	void StartAutomatedMapTestTimer();//Engine.GameInfo.StartAutomatedMapTestTimer
	void PostBeginPlay();//Engine.GameInfo.PostBeginPlay
	int GetIntOption(struct FString Options,struct FString ParseString,int CurrentValue);//Engine.GameInfo.GetIntOption
	void OnStartOnlineGameComplete(struct FName SessionName,bool bWasSuccessful);//Engine.GameInfo.OnStartOnlineGameComplete
	int GetServerPort();//Engine.GameInfo.GetServerPort
	struct FString GetNetworkNumber();//Engine.GameInfo.GetNetworkNumber
	struct FString ParseOption(struct FString Options,struct FString InKey);//Engine.GameInfo.ParseOption
	void AcceptInventory(class APawn* PlayerPawn);//Engine.GameInfo.AcceptInventory
	bool CheckEndGame(class APlayerReplicationInfo* Winner,struct FString Reason);//Engine.GameInfo.CheckEndGame
	class ANavigationPoint* FindPlayerStart(class AController* Player,unsigned char InTeam,struct FString IncomingName);//Engine.GameInfo.FindPlayerStart
	bool RequiresPassword();//Engine.GameInfo.RequiresPassword
	bool CheckModifiedEndGame(class APlayerReplicationInfo* Winner,struct FString Reason);//Engine.GameInfo.CheckModifiedEndGame
	void ShowSurveyForAllClients(struct FString QuestionId,struct FString Context);//Engine.GameInfo.ShowSurveyForAllClients
	void StartMatch();//Engine.GameInfo.StartMatch
	void ClearPause();//Engine.GameInfo.ClearPause
	bool ProcessServerLogin();//Engine.GameInfo.ProcessServerLogin
	void BroadcastLocalizedTeam(int TeamIndex,class AActor* Sender,class UClass* Message,int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.GameInfo.BroadcastLocalizedTeam
	void RemoveMutator(class AMutator* MutatorToRemove);//Engine.GameInfo.RemoveMutator
	void KickBan(struct FString S);//Engine.GameInfo.KickBan
	bool FindInactivePRI(class APlayerController* PC);//Engine.GameInfo.FindInactivePRI
	void Reset();//Engine.GameInfo.Reset
	void ChangeName(class AController* Other,struct FString S,bool bNameChange);//Engine.GameInfo.ChangeName
	void UpdateGameSettings();//Engine.GameInfo.UpdateGameSettings
	void ReplicateStreamingStatus(class APlayerController* PC);//Engine.GameInfo.ReplicateStreamingStatus
	void NotifyNavigationChanged(class ANavigationPoint* N);//Engine.GameInfo.NotifyNavigationChanged
	void UpdateGameSettingsCounts();//Engine.GameInfo.UpdateGameSettingsCounts
	void CloseAutomatedMapTestTimer();//Engine.GameInfo.CloseAutomatedMapTestTimer
	bool GetTravelType();//Engine.GameInfo.GetTravelType
	void PreCommitMapChange(struct FString PreviousMapName,struct FString NextMapName);//Engine.GameInfo.PreCommitMapChange
	void OnLoginChange(unsigned char LocalUserNum);//Engine.GameInfo.OnLoginChange
	void Killed(class AController* Killer,class AController* KilledPlayer,class APawn* KilledPawn,class UClass* DamageType,int nWeaponType);//Engine.GameInfo.Killed
	void Logout(class AController* Exiting);//Engine.GameInfo.Logout
	class APlayerController* ProcessClientTravel(struct FString* URL,struct FGuid NextMapGuid,bool bSeamless,bool bAbsolute);//Engine.GameInfo.ProcessClientTravel
	void BroadcastDeathMessage(class AController* Killer,class AController* Other,class UClass* DamageType);//Engine.GameInfo.BroadcastDeathMessage
	void KillBots();//Engine.GameInfo.KillBots
	void Kick(struct FString S);//Engine.GameInfo.Kick
	void RestartGame();//Engine.GameInfo.RestartGame
	struct FString GetNextMap();//Engine.GameInfo.GetNextMap
	void TellClientsToTravelToSession(struct FName SessionName,class UClass* SearchClass,unsigned char* PlatformSpecificInfo);//Engine.GameInfo.TellClientsToTravelToSession
	void WriteOnlinePlayerScores();//Engine.GameInfo.WriteOnlinePlayerScores
	struct FString ParseMessageString(class AController* Who,struct FString Message);//Engine.GameInfo.ParseMessageString
	void AddDefaultInventory(class APawn* P);//Engine.GameInfo.AddDefaultInventory
	struct FString ParseKillMessage(struct FString KillerName,struct FString VictimName,struct FString DeathMessage);//Engine.GameInfo.ParseKillMessage
	void SetGameSpeed(float T);//Engine.GameInfo.SetGameSpeed
	void InitGame(struct FString Options,struct FString* ErrorMessage);//Engine.GameInfo.InitGame
	void SwapPlayerControllers(class APlayerController* OldPC,class APlayerController* NewPC);//Engine.GameInfo.SwapPlayerControllers
	void PreLogin(struct FString Options,struct FString Address,struct FString* ErrorMessage);//Engine.GameInfo.PreLogin
	bool CheckRelevance(class AActor* Other);//Engine.GameInfo.CheckRelevance
	void PostCommitMapChange();//Engine.GameInfo.PostCommitMapChange
	bool MatchIsInProgress();//Engine.GameInfo.MatchIsInProgress
	void DiscardInventory(class APawn* Other,class AController* Killer);//Engine.GameInfo.DiscardInventory
	void ParseAutomatedTestingOptions(struct FString Options);//Engine.GameInfo.ParseAutomatedTestingOptions
	class ACoverReplicator* GetCoverReplicator();//Engine.GameInfo.GetCoverReplicator
	void ResetLevel();//Engine.GameInfo.ResetLevel
	void PreBeginPlay();//Engine.GameInfo.PreBeginPlay
	class APlayerController* Login(struct FString Portal,struct FString Options,struct FString* ErrorMessage);//Engine.GameInfo.Login
	void ServerWriteArbitrationEndGameData();//Engine.GameInfo.ServerWriteArbitrationEndGameData
	bool CanSpectate(class APlayerController* Viewer,class APlayerReplicationInfo* ViewTarget);//Engine.GameInfo.CanSpectate
	void StartHumans();//Engine.GameInfo.StartHumans
	void AddInactivePRI(class APlayerReplicationInfo* PRI,class APlayerController* PC);//Engine.GameInfo.AddInactivePRI
	bool CheckScore(class APlayerReplicationInfo* Scorer);//Engine.GameInfo.CheckScore
	void AddObjectiveScore(class APlayerReplicationInfo* Scorer,int Score);//Engine.GameInfo.AddObjectiveScore
	class APlayerStart* ChoosePlayerStart(class AController* Player,unsigned char InTeam);//Engine.GameInfo.ChoosePlayerStart
	void Timer();//Engine.GameInfo.Timer
	bool CanUnpause();//Engine.GameInfo.CanUnpause
	bool PlayerCanRestartGame(class APlayerController* aPlayer);//Engine.GameInfo.PlayerCanRestartGame
	void BroadcastLocalized(class AActor* Sender,class UClass* Message,int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.GameInfo.BroadcastLocalized
	void IncrementNumberOfMatchesPlayed();//Engine.GameInfo.IncrementNumberOfMatchesPlayed
	void InitGameReplicationInfo();//Engine.GameInfo.InitGameReplicationInfo
	void PreExit();//Engine.GameInfo.PreExit
	void ReduceDamage(int* Damage,class APawn* injured,class AController* InstigatedBy,FVector3 HitLocation,FVector3* Momentum,class UClass* DamageType);//Engine.GameInfo.ReduceDamage
	bool ChangeTeam(class AController* Other,int N,bool bNewTeam);//Engine.GameInfo.ChangeTeam
	bool CanLeaveVehicle(class AVehicle* V,class APawn* P);//Engine.GameInfo.CanLeaveVehicle
	void Broadcast(class AActor* Sender,struct FString msg,struct FName Type);//Engine.GameInfo.Broadcast
	void EndLogging(struct FString Reason);//Engine.GameInfo.EndLogging
	void StartArbitratedMatch();//Engine.GameInfo.StartArbitratedMatch
	void NotifyKilled(class AController* Killer,class AController* Killed,class APawn* KilledPawn);//Engine.GameInfo.NotifyKilled
	void ArbitrationRegistrationComplete(struct FName SessionName,bool bWasSuccessful);//Engine.GameInfo.ArbitrationRegistrationComplete
	void ModifyScoreKill(class AController* Killer,class AController* Other);//Engine.GameInfo.ModifyScoreKill
	void StartOnlineGame();//Engine.GameInfo.StartOnlineGame
	void PostSeamlessTravel();//Engine.GameInfo.PostSeamlessTravel
	void AddGameRules(class UClass* GRClass);//Engine.GameInfo.AddGameRules
	void DoNavFearCostFallOff();//Engine.GameInfo.DoNavFearCostFallOff
	void ScoreKill(class AController* Killer,class AController* Other);//Engine.GameInfo.ScoreKill
	void GetSeamlessTravelActorList(bool bToEntry,TArray<class AActor*>* ActorList);//Engine.GameInfo.GetSeamlessTravelActorList
	void IncrementAutomatedTestingMapIndex();//Engine.GameInfo.IncrementAutomatedTestingMapIndex
	void StartBots();//Engine.GameInfo.StartBots
	void RecalculateSkillRating();//Engine.GameInfo.RecalculateSkillRating
	unsigned char PickTeam(unsigned char Current,class AController* C);//Engine.GameInfo.PickTeam
	void DriverLeftVehicle(class AVehicle* V,class APawn* P);//Engine.GameInfo.DriverLeftVehicle
	void DebugPause();//Engine.GameInfo.DebugPause
	bool SetPause(class APlayerController* PC,struct FScriptDelegate CanUnpauseDelegate);//Engine.GameInfo.SetPause
	bool PreventDeath(class APawn* KilledPawn,class AController* Killer,class UClass* DamageType,FVector3 HitLocation);//Engine.GameInfo.PreventDeath
	void Mutate(struct FString MutateString,class APlayerController* Sender);//Engine.GameInfo.Mutate
	void SetPlayerDefaults(class APawn* PlayerPawn);//Engine.GameInfo.SetPlayerDefaults
	void OnLoginFailed(unsigned char LocalUserNum,unsigned char ErrorCode);//Engine.GameInfo.OnLoginFailed
	void KickIdler(class APlayerController* PC);//Engine.GameInfo.KickIdler
	struct FString FindPlayerByID(int PlayerID);//Engine.GameInfo.FindPlayerByID
	bool AllowMutator(struct FString MutatorClassName);//Engine.GameInfo.AllowMutator
	bool RestartPlayer(class AController* NewPlayer);//Engine.GameInfo.RestartPlayer
	void GameEnding();//Engine.GameInfo.GameEnding
	void NotifyArbitratedMatchEnd();//Engine.GameInfo.NotifyArbitratedMatchEnd
	bool ShouldSpawnAtStartSpot(class AController* Player);//Engine.GameInfo.ShouldSpawnAtStartSpot
	struct FString GetBeaconText();//Engine.GameInfo.GetBeaconText
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer,class ANavigationPoint* StartSpot);//Engine.GameInfo.SpawnDefaultPawnFor
	void HandleSeamlessTravelPlayer(class AController** C);//Engine.GameInfo.HandleSeamlessTravelPlayer
	void OverridePRI(class APlayerController* PC,class APlayerReplicationInfo* OldPRI);//Engine.GameInfo.OverridePRI
	void AddMutator(struct FString mutname,bool bUserAdded);//Engine.GameInfo.AddMutator
	void DriverEnteredVehicle(class AVehicle* V,class APawn* P);//Engine.GameInfo.DriverEnteredVehicle
	bool ShouldReset(class AActor* ActorToReset);//Engine.GameInfo.ShouldReset
	struct FString GetNextAutomatedTestingMap();//Engine.GameInfo.GetNextAutomatedTestingMap
	void BroadcastTeam(class AController* Sender,struct FString msg,struct FName Type);//Engine.GameInfo.BroadcastTeam
	bool ShouldRespawn(class APickupFactory* Other);//Engine.GameInfo.ShouldRespawn
};
UClass* AGameInfo::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//InternetInfo[0x026B9800]
class AInternetInfo : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InternetInfo");
		return pClassPointer;
	};

public:
	struct FString GetBeaconAddress(int I);//Engine.InternetInfo.GetBeaconAddress
	struct FString GetBeaconText(int I);//Engine.InternetInfo.GetBeaconText
};
UClass* AInternetInfo::pClassPointer = NULL;

//0x000014 (0x000274 - 0x000260)
//Mutator[0x026B96D0]
class AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                      		// 0x000260 (0x0004)              
	TArray<struct FString>                             GroupNames;                                       		// 0x000264 (0x000C)              
	unsigned long                                      bUserAdded : 1;                                   		// 0x000270 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Mutator");
		return pClassPointer;
	};

public:
	bool CheckReplacement(class AActor* Other);//Engine.Mutator.CheckReplacement
	void NotifyLogout(class AController* Exiting);//Engine.Mutator.NotifyLogout
	void InitMutator(struct FString Options,struct FString* ErrorMessage);//Engine.Mutator.InitMutator
	void PreBeginPlay();//Engine.Mutator.PreBeginPlay
	void GetServerPlayers(struct FServerResponseLine* ServerState);//Engine.Mutator.GetServerPlayers
	void NotifyLogin(class AController* NewPlayer);//Engine.Mutator.NotifyLogin
	void AddMutator(class AMutator* M);//Engine.Mutator.AddMutator
	struct FString ParseChatPercVar(class AController* Who,struct FString Cmd);//Engine.Mutator.ParseChatPercVar
	bool CheckRelevance(class AActor* Other);//Engine.Mutator.CheckRelevance
	void GetSeamlessTravelActorList(bool bToEntry,TArray<class AActor*>* ActorList);//Engine.Mutator.GetSeamlessTravelActorList
	void ModifyPlayer(class APawn* Other);//Engine.Mutator.ModifyPlayer
	bool IsRelevant(class AActor* Other);//Engine.Mutator.IsRelevant
	void GetServerDetails(struct FServerResponseLine* ServerState);//Engine.Mutator.GetServerDetails
	void DriverLeftVehicle(class AVehicle* V,class APawn* P);//Engine.Mutator.DriverLeftVehicle
	void ModifyLogin(struct FString* Portal,struct FString* Options);//Engine.Mutator.ModifyLogin
	void DriverEnteredVehicle(class AVehicle* V,class APawn* P);//Engine.Mutator.DriverEnteredVehicle
	void Destroyed();//Engine.Mutator.Destroyed
	bool CanLeaveVehicle(class AVehicle* V,class APawn* P);//Engine.Mutator.CanLeaveVehicle
	bool MutatorIsAllowed();//Engine.Mutator.MutatorIsAllowed
	void Mutate(struct FString MutateString,class APlayerController* Sender);//Engine.Mutator.Mutate
	bool AlwaysKeep(class AActor* Other);//Engine.Mutator.AlwaysKeep
};
UClass* AMutator::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//ReplicationInfo[0x026B95A0]
class AReplicationInfo : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ReplicationInfo");
		return pClassPointer;
	};
};
UClass* AReplicationInfo::pClassPointer = NULL;

//0x0000B4 (0x000314 - 0x000260)
//GameReplicationInfo[0x026B9470]
class AGameReplicationInfo : public AReplicationInfo
{
public:
	class UClass*                                      GameClass;                                        		// 0x000260 (0x0004)              
	class UCurrentGameDataStore*                       CurrentGameData;                                  		// 0x000264 (0x0004)              
	unsigned long                                      bStopCountDown : 1;                               		// 0x000268 (0x0004) [0x00000001] 
	unsigned long                                      bMatchHasBegun : 1;                               		// 0x000268 (0x0004) [0x00000002] 
	unsigned long                                      bMatchIsOver : 1;                                 		// 0x000268 (0x0004) [0x00000004] 
	unsigned long                                      bNeedsOnlineCleanup : 1;                          		// 0x000268 (0x0004) [0x00000008] 
	unsigned long                                      bIsArbitrated : 1;                                		// 0x000268 (0x0004) [0x00000010] 
	unsigned long                                      bTrackStats : 1;                                  		// 0x000268 (0x0004) [0x00000020] 
	int                                                RemainingTime;                                    		// 0x00026C (0x0004)              
	int                                                ElapsedTime;                                      		// 0x000270 (0x0004)              
	int                                                RemainingMinute;                                  		// 0x000274 (0x0004)              
	double                                             SecondCount;                                      		// 0x000278 (0x0008)              
	int                                                GoalScore;                                        		// 0x000280 (0x0004)              
	int                                                TimeLimit;                                        		// 0x000284 (0x0004)              
	int                                                MaxLives;                                         		// 0x000288 (0x0004)              
	TArray<class ATeamInfo*>                           Teams;                                            		// 0x00028C (0x000C)              
	struct FString                                     ServerName;                                       		// 0x000298 (0x000C)              
	struct FString                                     ShortName;                                        		// 0x0002A4 (0x000C)              
	struct FString                                     AdminName;                                        		// 0x0002B0 (0x000C)              
	struct FString                                     AdminEmail;                                       		// 0x0002BC (0x000C)              
	int                                                ServerRegion;                                     		// 0x0002C8 (0x0004)              
	struct FString                                     MessageOfTheDay;                                  		// 0x0002CC (0x000C)              
	class AActor*                                      Winner;                                           		// 0x0002D8 (0x0004)              
	TArray<class APlayerReplicationInfo*>              PRIArray;                                         		// 0x0002DC (0x000C)              
	TArray<class APlayerReplicationInfo*>              InactivePRIArray;                                 		// 0x0002E8 (0x000C)              
	int                                                MatchID;                                          		// 0x0002F4 (0x0004)              
	class AcEngineClientServerDebugManager*            m_pEngineClientServerDebugManager;                		// 0x0002F8 (0x0004)              
	float                                              m_fServerAvgFrameTime;                            		// 0x0002FC (0x0004)              
	float                                              m_fServerMaxFrameTime;                            		// 0x000300 (0x0004)              
	int                                                m_nServerSpikesCurrent;                           		// 0x000304 (0x0004)              
	int                                                m_nServerSpikesPrev;                              		// 0x000308 (0x0004)              
	float                                              m_fServerSpikeThresholdMS;                        		// 0x00030C (0x0004)              
	float                                              m_fServerMaxTickRate;                             		// 0x000310 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.GameReplicationInfo");
		return pClassPointer;
	};

public:
	void PostBeginPlay();//Engine.GameReplicationInfo.PostBeginPlay
	void Destroyed();//Engine.GameReplicationInfo.Destroyed
	void EndGame();//Engine.GameReplicationInfo.EndGame
	void UpdateServerFrameTime();//Engine.GameReplicationInfo.UpdateServerFrameTime
	float GetGfxMemStatsInterval();//Engine.GameReplicationInfo.GetGfxMemStatsInterval
	void StartMatch();//Engine.GameReplicationInfo.StartMatch
	void SetTeam(int Index,class ATeamInfo* TI);//Engine.GameReplicationInfo.SetTeam
	void DoGfxMemStats();//Engine.GameReplicationInfo.DoGfxMemStats
	void Reset();//Engine.GameReplicationInfo.Reset
	bool InOrder(class APlayerReplicationInfo* P1,class APlayerReplicationInfo* P2);//Engine.GameReplicationInfo.InOrder
	class UOnlineGameInterface* GetOnlineGameInterface();//Engine.GameReplicationInfo.GetOnlineGameInterface
	void AddPRI(class APlayerReplicationInfo* PRI);//Engine.GameReplicationInfo.AddPRI
	void InitializeGameDataStore();//Engine.GameReplicationInfo.InitializeGameDataStore
	void Timer();//Engine.GameReplicationInfo.Timer
	void UpdateClientFrameTime();//Engine.GameReplicationInfo.UpdateClientFrameTime
	void DoSysMemStats();//Engine.GameReplicationInfo.DoSysMemStats
	void OnlineSession_StartMatch();//Engine.GameReplicationInfo.OnlineSession_StartMatch
	void ReplicatedEvent(struct FName VarName);//Engine.GameReplicationInfo.ReplicatedEvent
	void OnlineSession_EndMatch();//Engine.GameReplicationInfo.OnlineSession_EndMatch
	bool OnSameTeam(class AActor* A,class AActor* B);//Engine.GameReplicationInfo.OnSameTeam
	void AllocateEngineDebugManager();//Engine.GameReplicationInfo.AllocateEngineDebugManager
	bool IsMultiplayerGame();//Engine.GameReplicationInfo.IsMultiplayerGame
	bool IsCoopMultiplayerGame();//Engine.GameReplicationInfo.IsCoopMultiplayerGame
	void FinishedBlockedLoads();//Engine.GameReplicationInfo.FinishedBlockedLoads
	void GetPRIArray(TArray<class APlayerReplicationInfo*>* pris);//Engine.GameReplicationInfo.GetPRIArray
	bool PreventPause();//Engine.GameReplicationInfo.PreventPause
	void CleanupGameDataStore();//Engine.GameReplicationInfo.CleanupGameDataStore
	bool ShouldShowGore();//Engine.GameReplicationInfo.ShouldShowGore
	float GetSysMemStatsInterval();//Engine.GameReplicationInfo.GetSysMemStatsInterval
	void RemovePRI(class APlayerReplicationInfo* PRI);//Engine.GameReplicationInfo.RemovePRI
	void SortPRIArray();//Engine.GameReplicationInfo.SortPRIArray
	class APlayerReplicationInfo* FindPlayerByID(int PlayerID);//Engine.GameReplicationInfo.FindPlayerByID
	void OnlineSession_EndSession(bool bForced);//Engine.GameReplicationInfo.OnlineSession_EndSession
};
UClass* AGameReplicationInfo::pClassPointer = NULL;

//0x0000CC (0x00032C - 0x000260)
//PlayerReplicationInfo[0x026B9340]
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              Score;                                            		// 0x000260 (0x0004)              
	float                                              Deaths;                                           		// 0x000264 (0x0004)              
	unsigned char                                      Ping;                                             		// 0x000268 (0x0001)              PROPERTY: 
	unsigned char                                      PacketLoss;                                       		// 0x000269 (0x0001)              PROPERTY: 
	unsigned char                                      _0x00026A[0x2];                                   		// 0x00026A (0x0002) MISSED OFFSET
	class AActor*                                      PlayerLocationHint;                               		// 0x00026C (0x0004)              
	int                                                NumLives;                                         		// 0x000270 (0x0004)              
	struct FString                                     PlayerName;                                       		// 0x000274 (0x000C)              
	struct FString                                     PlayerAlias;                                      		// 0x000280 (0x000C)              
	struct FString                                     OldName;                                          		// 0x00028C (0x000C)              
	int                                                PlayerID;                                         		// 0x000298 (0x0004)              
	class ATeamInfo*                                   Team;                                             		// 0x00029C (0x0004)              
	int                                                TeamID;                                           		// 0x0002A0 (0x0004)              
	unsigned long                                      bAdmin : 1;                                       		// 0x0002A4 (0x0004) [0x00000001] 
	unsigned long                                      bIsFemale : 1;                                    		// 0x0002A4 (0x0004) [0x00000002] 
	unsigned long                                      bIsSpectator : 1;                                 		// 0x0002A4 (0x0004) [0x00000004] 
	unsigned long                                      bOnlySpectator : 1;                               		// 0x0002A4 (0x0004) [0x00000008] 
	unsigned long                                      bWaitingPlayer : 1;                               		// 0x0002A4 (0x0004) [0x00000010] 
	unsigned long                                      bReadyToPlay : 1;                                 		// 0x0002A4 (0x0004) [0x00000020] 
	unsigned long                                      bOutOfLives : 1;                                  		// 0x0002A4 (0x0004) [0x00000040] 
	unsigned long                                      bBot : 1;                                         		// 0x0002A4 (0x0004) [0x00000080] 
	unsigned long                                      bHasFlag : 1;                                     		// 0x0002A4 (0x0004) [0x00000100] 
	unsigned long                                      bHasBeenWelcomed : 1;                             		// 0x0002A4 (0x0004) [0x00000200] 
	unsigned long                                      bIsInactive : 1;                                  		// 0x0002A4 (0x0004) [0x00000400] 
	unsigned long                                      bFromPreviousLevel : 1;                           		// 0x0002A4 (0x0004) [0x00000800] 
	unsigned long                                      bControllerVibrationAllowed : 1;                  		// 0x0002A4 (0x0004) [0x00001000] 
	int                                                StartTime;                                        		// 0x0002A8 (0x0004)              
	struct FString                                     StringDead;                                       		// 0x0002AC (0x000C)              
	struct FString                                     StringSpectating;                                 		// 0x0002B8 (0x000C)              
	struct FString                                     StringUnknown;                                    		// 0x0002C4 (0x000C)              
	int                                                Kills;                                            		// 0x0002D0 (0x0004)              
	class UClass*                                      GameMessageClass;                                 		// 0x0002D4 (0x0004)              
	float                                              ExactPing;                                        		// 0x0002D8 (0x0004)              
	struct FString                                     SavedNetworkAddress;                              		// 0x0002DC (0x000C)              
	struct FUniqueNetId                                UniqueId;                                         		// 0x0002E8 (0x0008)              
	struct FName                                       SessionName;                                      		// 0x0002F0 (0x0008)              
	struct FAutomatedTestingDatum                      AutomatedTestingData;                             		// 0x0002F8 (0x0008)              
	int                                                StatConnectionCounts;                             		// 0x000300 (0x0004)              
	int                                                StatPingTotals;                                   		// 0x000304 (0x0004)              
	int                                                StatPingMin;                                      		// 0x000308 (0x0004)              
	int                                                StatPingMax;                                      		// 0x00030C (0x0004)              
	int                                                StatPKLTotal;                                     		// 0x000310 (0x0004)              
	int                                                StatPKLMin;                                       		// 0x000314 (0x0004)              
	int                                                StatPKLMax;                                       		// 0x000318 (0x0004)              
	int                                                StatMaxInBPS;                                     		// 0x00031C (0x0004)              
	int                                                StatAvgInBPS;                                     		// 0x000320 (0x0004)              
	int                                                StatMaxOutBPS;                                    		// 0x000324 (0x0004)              
	int                                                StatAvgOutBPS;                                    		// 0x000328 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlayerReplicationInfo");
		return pClassPointer;
	};

public:
	void UpdateTeamDataProvider();//Engine.PlayerReplicationInfo.UpdateTeamDataProvider
	bool IsLocalPlayerPRI();//Engine.PlayerReplicationInfo.IsLocalPlayerPRI
	class APlayerReplicationInfo* Duplicate();//Engine.PlayerReplicationInfo.Duplicate
	void OverrideWith(class APlayerReplicationInfo* PRI);//Engine.PlayerReplicationInfo.OverrideWith
	class UCurrentGameDataStore* GetCurrentGameDS();//Engine.PlayerReplicationInfo.GetCurrentGameDS
	void CopyProperties(class APlayerReplicationInfo* PRI);//Engine.PlayerReplicationInfo.CopyProperties
	void UpdatePlayerDataProvider(struct FName PropertyName);//Engine.PlayerReplicationInfo.UpdatePlayerDataProvider
	struct FString GetLocationName();//Engine.PlayerReplicationInfo.GetLocationName
	void Destroyed();//Engine.PlayerReplicationInfo.Destroyed
	void SetPlayerAlias(struct FString NewAlias);//Engine.PlayerReplicationInfo.SetPlayerAlias
	void SetPlayerName(struct FString S);//Engine.PlayerReplicationInfo.SetPlayerName
	bool AreUniqueNetIdsEqual(class APlayerReplicationInfo* OtherPRI);//Engine.PlayerReplicationInfo.AreUniqueNetIdsEqual
	void ReplicatedEvent(struct FName VarName);//Engine.PlayerReplicationInfo.ReplicatedEvent
	unsigned char GetTeamNum();//Engine.PlayerReplicationInfo.GetTeamNum
	void PostBeginPlay();//Engine.PlayerReplicationInfo.PostBeginPlay
	bool IsInvalidName();//Engine.PlayerReplicationInfo.IsInvalidName
	void SetWaitingPlayer(bool B);//Engine.PlayerReplicationInfo.SetWaitingPlayer
	void ClientInitialize(class AController* C);//Engine.PlayerReplicationInfo.ClientInitialize
	void Timer();//Engine.PlayerReplicationInfo.Timer
	struct FString GetHumanReadableName();//Engine.PlayerReplicationInfo.GetHumanReadableName
	void NotifyLocalPlayerTeamReceived();//Engine.PlayerReplicationInfo.NotifyLocalPlayerTeamReceived
	bool ShouldBroadCastWelcomeMessage();//Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage
	void Reset();//Engine.PlayerReplicationInfo.Reset
	void DisplayDebug(class AHUD* HUD,float* YL,float* YPos);//Engine.PlayerReplicationInfo.DisplayDebug
	bool IsPrimaryPlayer();//Engine.PlayerReplicationInfo.IsPrimaryPlayer
	void SeamlessTravelTo(class APlayerReplicationInfo* NewPRI);//Engine.PlayerReplicationInfo.SeamlessTravelTo
	void BindPlayerOwnerDataProvider();//Engine.PlayerReplicationInfo.BindPlayerOwnerDataProvider
	void UpdatePlayerLocation();//Engine.PlayerReplicationInfo.UpdatePlayerLocation
	struct FString GetPlayerAlias();//Engine.PlayerReplicationInfo.GetPlayerAlias
};
UClass* APlayerReplicationInfo::pClassPointer = NULL;

//0x00001C (0x00027C - 0x000260)
//TeamInfo[0x026B9210]
class ATeamInfo : public AReplicationInfo
{
public:
	struct FString                                     TeamName;                                         		// 0x000260 (0x000C)              
	int                                                Size;                                             		// 0x00026C (0x0004)              
	float                                              Score;                                            		// 0x000270 (0x0004)              
	int                                                TeamIndex;                                        		// 0x000274 (0x0004)              
	DWORD                                              TeamColor;                                        		// 0x000278 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TeamInfo");
		return pClassPointer;
	};

public:
	bool AddToTeam(class AController* Other);//Engine.TeamInfo.AddToTeam
	struct FString GetHumanReadableName();//Engine.TeamInfo.GetHumanReadableName
	DWORD GetTextColor();//Engine.TeamInfo.GetTextColor
	class UCurrentGameDataStore* GetCurrentGameDS();//Engine.TeamInfo.GetCurrentGameDS
	void ReplicatedEvent(struct FName VarName);//Engine.TeamInfo.ReplicatedEvent
	void RemoveFromTeam(class AController* Other);//Engine.TeamInfo.RemoveFromTeam
	void UnbindTeamDataProvider();//Engine.TeamInfo.UnbindTeamDataProvider
	unsigned char GetTeamNum();//Engine.TeamInfo.GetTeamNum
	DWORD GetHUDColor();//Engine.TeamInfo.GetHUDColor
	void Destroyed();//Engine.TeamInfo.Destroyed
};
UClass* ATeamInfo::pClassPointer = NULL;

//0x000010 (0x000270 - 0x000260)
//Route[0x026B90E0]
class ARoute : public AInfo
{
public:
	unsigned char                                      RouteType;                                        		// 0x000260 (0x0001)              PROPERTY: ERouteType
	unsigned char                                      _0x000261[0x3];                                   		// 0x000261 (0x0003) MISSED OFFSET
	TArray<struct FNavReference>                       NavList;                                          		// 0x000264 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Route");
		return pClassPointer;
	};
};
UClass* ARoute::pClassPointer = NULL;

//0x000010 (0x000270 - 0x000260)
//ZoneInfo[0x026B8FB0]
class AZoneInfo : public AInfo
{
public:
	float                                              KillZ;                                            		// 0x000260 (0x0004)              
	float                                              SoftKill;                                         		// 0x000264 (0x0004)              
	class UClass*                                      KillZDamageType;                                  		// 0x000268 (0x0004)              
	unsigned long                                      bSoftKillZ : 1;                                   		// 0x00026C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ZoneInfo");
		return pClassPointer;
	};
};
UClass* AZoneInfo::pClassPointer = NULL;

//0x00045C (0x0006CC - 0x000270)
//WorldInfo[0x026B8E80]
class AWorldInfo : public AZoneInfo
{
public:
	FVector3                                           m_DefaultMeshTranslation;                         		// 0x000270 (0x000C)              
	class AActor*                                      m_transientVFXManager;                            		// 0x00027C (0x0004)              
	class UTexture*                                    DistrictHeightfield;                              		// 0x000280 (0x0004)              
	FVector3                                           HeightfieldScale;                                 		// 0x000284 (0x000C)              
	FVector3                                           HeightfieldOffset;                                		// 0x000290 (0x000C)              
	struct FPostProcessSettings                        DefaultPostProcessSettings;                       		// 0x00029C (0x00CC)              
	float                                              SquintModeKernelSize;                             		// 0x000368 (0x0004)              
	class APostProcessVolume*                          HighestPriorityPostProcessVolume;                 		// 0x00036C (0x0004)              
	struct FReverbSettings                             DefaultReverbSettings;                            		// 0x000370 (0x000C)              
	class AReverbVolume*                               HighestPriorityReverbVolume;                      		// 0x00037C (0x0004)              
	TArray<class APortalVolume*>                       PortalVolumes;                                    		// 0x000380 (0x000C)              
	TArray<class ULevelStreaming*>                     StreamingLevels;                                  		// 0x00038C (0x000C)              
	unsigned long                                      bMapNeedsLightingFullyRebuilt : 1;                		// 0x000398 (0x0004) [0x00000001] 
	unsigned long                                      bMapHasPathingErrors : 1;                         		// 0x000398 (0x0004) [0x00000002] 
	unsigned long                                      bRequestedBlockOnAsyncLoading : 1;                		// 0x000398 (0x0004) [0x00000004] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x000398 (0x0004) [0x00000008] 
	unsigned long                                      bPlayersOnly : 1;                                 		// 0x000398 (0x0004) [0x00000010] 
	unsigned long                                      bDropDetail : 1;                                  		// 0x000398 (0x0004) [0x00000020] 
	unsigned long                                      bAggressiveLOD : 1;                               		// 0x000398 (0x0004) [0x00000040] 
	unsigned long                                      bStartup : 1;                                     		// 0x000398 (0x0004) [0x00000080] 
	unsigned long                                      bPathsRebuilt : 1;                                		// 0x000398 (0x0004) [0x00000100] 
	unsigned long                                      bHasPathNodes : 1;                                		// 0x000398 (0x0004) [0x00000200] 
	unsigned long                                      bUseConsoleInput : 1;                             		// 0x000398 (0x0004) [0x00000400] 
	unsigned long                                      bPlayerCollidesLC : 1;                            		// 0x000398 (0x0004) [0x00000800] 
	unsigned long                                      bLCCollidesLC : 1;                                		// 0x000398 (0x0004) [0x00001000] 
	unsigned long                                      bNoDefaultInventoryForPlayer : 1;                 		// 0x000398 (0x0004) [0x00002000] 
	unsigned long                                      bNoPathWarnings : 1;                              		// 0x000398 (0x0004) [0x00004000] 
	unsigned long                                      bHighPriorityLoading : 1;                         		// 0x000398 (0x0004) [0x00008000] 
	unsigned long                                      bHighPriorityLoadingLocal : 1;                    		// 0x000398 (0x0004) [0x00010000] 
	unsigned long                                      bSupportDoubleBufferedPhysics : 1;                		// 0x000398 (0x0004) [0x00020000] 
	unsigned long                                      m_bEditorUpdateNightLights : 1;                   		// 0x000398 (0x0004) [0x00040000] 
	unsigned long                                      bAllowHostMigration : 1;                          		// 0x000398 (0x0004) [0x00080000] 
	class UBookMark*                                   BookMarks[0xA];                                   		// 0x00039C (0x0028)              
	TArray<class UClipPadEntry*>                       ClipPadEntries;                                   		// 0x0003C4 (0x000C)              
	float                                              TimeDilation;                                     		// 0x0003D0 (0x0004)              
	float                                              DemoPlayTimeDilation;                             		// 0x0003D4 (0x0004)              
	double                                             TimeSeconds;                                      		// 0x0003D8 (0x0008)              
	double                                             RealTimeSeconds;                                  		// 0x0003E0 (0x0008)              
	double                                             AudioTimeSeconds;                                 		// 0x0003E8 (0x0008)              
	float                                              DeltaSeconds;                                     		// 0x0003F0 (0x0004)              
	float                                              RealDeltaSeconds;                                 		// 0x0003F4 (0x0004)              
	double                                             PauseDelay;                                       		// 0x0003F8 (0x0008)              
	double                                             RealTimeToUnPause;                                		// 0x000400 (0x0008)              
	class APlayerReplicationInfo*                      Pauser;                                           		// 0x000408 (0x0004)              
	struct FString                                     VisibleGroups;                                    		// 0x00040C (0x000C)              
	struct FString                                     SelectedGroups;                                   		// 0x000418 (0x000C)              
	unsigned char                                      WorldState;                                       		// 0x000424 (0x0001)              PROPERTY: EWorldState
	unsigned char                                      NetMode;                                          		// 0x000425 (0x0001)              PROPERTY: ENetMode
	unsigned char                                      m_ePhysCorrectMode;                               		// 0x000426 (0x0001)              PROPERTY: etPhysCorrectMode
	unsigned char                                      m_eTimeOfDayMode;                                 		// 0x000427 (0x0001)              PROPERTY: etTimeOfDayMode
	class UTexture2D*                                  DefaultTexture;                                   		// 0x000428 (0x0004)              
	class UTexture2D*                                  WireframeTexture;                                 		// 0x00042C (0x0004)              
	class UTexture2D*                                  WhiteSquareTexture;                               		// 0x000430 (0x0004)              
	class UTexture2D*                                  LargeVertex;                                      		// 0x000434 (0x0004)              
	class UTexture2D*                                  BSPVertex;                                        		// 0x000438 (0x0004)              
	TArray<struct FString>                             DeferredExecs;                                    		// 0x00043C (0x000C)              
	class AGameReplicationInfo*                        GRI;                                              		// 0x000448 (0x0004)              
	struct FString                                     ComputerName;                                     		// 0x00044C (0x000C)              
	struct FString                                     EngineVersion;                                    		// 0x000458 (0x000C)              
	struct FString                                     MinNetVersion;                                    		// 0x000464 (0x000C)              
	class AGameInfo*                                   Game;                                             		// 0x000470 (0x0004)              
	class UClass*                                      GameInfoClass;                                    		// 0x000474 (0x0004)              
	float                                              StallZ;                                           		// 0x000478 (0x0004)              
	float                                              WorldGravityZ;                                    		// 0x00047C (0x0004)              
	float                                              DefaultGravityZ;                                  		// 0x000480 (0x0004)              
	float                                              GlobalGravityZ;                                   		// 0x000484 (0x0004)              
	float                                              RBPhysicsGravityScaling;                          		// 0x000488 (0x0004)              
	class ANavigationPoint*                            NavigationPointList;                              		// 0x00048C (0x0004)              
	class AController*                                 ControllerList;                                   		// 0x000490 (0x0004)              
	class APawn*                                       PawnList;                                         		// 0x000494 (0x0004)              
	class ACoverLink*                                  CoverList;                                        		// 0x000498 (0x0004)              
	class ANavigationPoint*                            DefaultSpawnPoint;                                		// 0x00049C (0x0004)              
	float                                              MoveRepSize;                                      		// 0x0004A0 (0x0004)              
	TArray<struct FNetViewer>                          ReplicationViewers;                               		// 0x0004A4 (0x000C)              
	struct FString                                     NextURL;                                          		// 0x0004B0 (0x000C)              
	float                                              NextSwitchCountdown;                              		// 0x0004BC (0x0004)              
	int                                                PackedLightAndShadowMapTextureSize;               		// 0x0004C0 (0x0004)              
	FVector3                                           DefaultColorScale;                                		// 0x0004C4 (0x000C)              
	TArray<class UClass*>                              GameTypesSupportedOnThisMap;                      		// 0x0004D0 (0x000C)              
	TArray<struct FName>                               PreparingLevelNames;                              		// 0x0004DC (0x000C)              
	TArray<struct FName>                               CommittedLevelNames;                              		// 0x0004E8 (0x000C)              
	class USeqAct_CrossFadeMusicTracks*                LastMusicAction;                                  		// 0x0004F4 (0x0004)              
	struct FMusicTrackStruct                           LastMusicTrack;                                   		// 0x0004F8 (0x0024)              
	struct FString                                     Title;                                            		// 0x00051C (0x000C)              
	struct FString                                     Author;                                           		// 0x000528 (0x000C)              
	class UMapInfo*                                    MyMapInfo;                                        		// 0x000534 (0x0004)              
	struct FString                                     EmitterPoolClassPath;                             		// 0x000538 (0x000C)              
	class AEmitterPool*                                MyEmitterPool;                                    		// 0x000544 (0x0004)              
	float                                              MaxPhysicsDeltaTime;                              		// 0x000548 (0x0004)              
	struct FPhysXSceneProperties                       PhysicsProperties;                                		// 0x00054C (0x003C)              
	TArray<struct FCompartmentRunList>                 CompartmentRunFrames;                             		// 0x000588 (0x000C)              
	class UPhysicsLODVerticalEmitter*                  EmitterVertical;                                  		// 0x000594 (0x0004)              
	class UPhysicsLODVerticalDestructible*             DestructibleVertical;                             		// 0x000598 (0x0004)              
	struct FPhysXVerticalProperties                    VerticalProperties;                               		// 0x00059C (0x0018)              
	struct FEnumeratedName                             m_eDistrict;                                      		// 0x0005B4 (0x0010)              
	class UTexture2D*                                  m_MiniMapTexture;                                 		// 0x0005C4 (0x0004)              
	FVector3                                           m_WorldCentreInCM;                                		// 0x0005C8 (0x000C)              
	float                                              m_WorldSizeInCM;                                  		// 0x0005D4 (0x0004)              
	class AVolume*                                     m_WorldBounds;                                    		// 0x0005D8 (0x0004)              
	TArray<class AVolume*>                             m_aBotSpawnVolumes;                               		// 0x0005DC (0x000C)              
	float                                              m_fNightLightOnTime;                              		// 0x0005E8 (0x0004)              
	float                                              m_fNightLightOffTime;                             		// 0x0005EC (0x0004)              
	float                                              m_fNightLightOnTransitionTime;                    		// 0x0005F0 (0x0004)              
	float                                              m_fNightLightOffTransitionTime;                   		// 0x0005F4 (0x0004)              
	float                                              m_fTODOverride;                                   		// 0x0005F8 (0x0004)              
	float                                              m_fTODRate;                                       		// 0x0005FC (0x0004)              
	float                                              m_fCachedNTOD;                                    		// 0x000600 (0x0004)              
	float                                              m_fCachedNightLightLevel;                         		// 0x000604 (0x0004)              
	float                                              m_fPrevCachedNTOD;                                		// 0x000608 (0x0004)              
	class ALight*                                      m_PrimaryLight;                                   		// 0x00060C (0x0004)              
	class ALight*                                      m_SkyLight;                                       		// 0x000610 (0x0004)              
	struct FRawDistributionVector                      m_VFXLightCurve;                                  		// 0x000614 (0x001C)              
	class UcFeatureEmissiveManagerBase*                m_FeatureEmissiveManager;                         		// 0x000630 (0x0004)              
	class UObject*                                     m_WeatherSettings;                                		// 0x000634 (0x0004)              
	int                                                m_EditorWeatherType;                              		// 0x000638 (0x0004)              
	struct FMap_Mirror                                 m_tJunctionMap;                                   		// 0x00063C (0x003C)              
	TArray<struct FBuildingTypeArray>                  BuildingTypes;                                    		// 0x000678 (0x000C)              
	TArray<struct FVehicleRouteDetails>                VehicleRouteLookupTable;                          		// 0x000684 (0x000C)              
	int                                                m_nNumberOfBlocks;                                		// 0x000690 (0x0004)              
	TArray<struct FBlockToBlockLUTEntry>               m_aBlockToBlockLUT;                               		// 0x000694 (0x000C)              
	int                                                m_nBitsToShiftB2BLUTIndex;                        		// 0x0006A0 (0x0004)              
	TArray<struct FWithinABlockRoutes>                 m_aWithinABlockRoutes;                            		// 0x0006A4 (0x000C)              
	struct FHostMigrationState                         PeerHostMigration;                                		// 0x0006B0 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.WorldInfo");
		return pClassPointer;
	};

public:
	struct FString GetAddressURL();//Engine.WorldInfo.GetAddressURL
	void ForceGarbageCollection(bool bFullPurge);//Engine.WorldInfo.ForceGarbageCollection
	void ToggleHostMigration(bool bEnabled);//Engine.WorldInfo.ToggleHostMigration
	void AllNavigationPoints(class UClass* BaseClass,class ANavigationPoint** N);//Engine.WorldInfo.AllNavigationPoints
	struct FString GetMapName(bool bIncludePrefix);//Engine.WorldInfo.GetMapName
	unsigned char GetDetailMode();//Engine.WorldInfo.GetDetailMode
	void NavigationPointCheck(FVector3 Point,FVector3 Extent,TArray<class ANavigationPoint*>* Navs,TArray<class UReachSpec*>* Specs);//Engine.WorldInfo.NavigationPointCheck
	void SetMapInfo(class UMapInfo* NewMapInfo);//Engine.WorldInfo.SetMapInfo
	bool IsInSeamlessTravel();//Engine.WorldInfo.IsInSeamlessTravel
	bool CanBeginHostMigration();//Engine.WorldInfo.CanBeginHostMigration
	void OnToggle(class USeqAct_Toggle* Action);//Engine.WorldInfo.OnToggle
	bool BeginHostMigration();//Engine.WorldInfo.BeginHostMigration
	class UMapInfo* GetMapInfo();//Engine.WorldInfo.GetMapInfo
	void SetWorldState(unsigned char eNewState);//Engine.WorldInfo.SetWorldState
	void VerifyNavList();//Engine.WorldInfo.VerifyNavList
	bool IsPreparingMapChange();//Engine.WorldInfo.IsPreparingMapChange
	void PrepareMapChange(TArray<struct FName>* LevelNames);//Engine.WorldInfo.PrepareMapChange
	void DoMemoryTracking();//Engine.WorldInfo.DoMemoryTracking
	void SetLevelRBGravity(FVector3 NewGrav);//Engine.WorldInfo.SetLevelRBGravity
	void SeamlessTravel(struct FString URL,bool bAbsolute,struct FGuid MapPackageGuid);//Engine.WorldInfo.SeamlessTravel
	void AllPawns(class UClass* BaseClass,class APawn** P,FVector3 TestLocation,float TestRadius);//Engine.WorldInfo.AllPawns
	void RadiusNavigationPoints(class UClass* BaseClass,class ANavigationPoint** N,FVector3 Point,float Radius);//Engine.WorldInfo.RadiusNavigationPoints
	void CancelPendingMapChange();//Engine.WorldInfo.CancelPendingMapChange
	void NotifyMatchStarted(bool bShouldActivateLevelStartupEvents,bool bShouldActivateLevelBeginningEvents,bool bShouldActivateLevelLoadedEvents);//Engine.WorldInfo.NotifyMatchStarted
	void ServerTravel(struct FString URL,bool bAbsolute);//Engine.WorldInfo.ServerTravel
	class AWorldInfo* GetWorldInfo();//Engine.WorldInfo.GetWorldInfo
	bool IsConsoleBuild(unsigned char ConsoleType);//Engine.WorldInfo.IsConsoleBuild
	void AllControllers(class UClass* BaseClass,class AController** C);//Engine.WorldInfo.AllControllers
	void Reset();//Engine.WorldInfo.Reset
	void CommitMapChange(bool bShouldSkipLevelStartupEvent,bool bShouldSkipLevelBeginningEvent);//Engine.WorldInfo.CommitMapChange
	class USequence* GetGameSequence();//Engine.WorldInfo.GetGameSequence
	struct FString GetLocalURL();//Engine.WorldInfo.GetLocalURL
	bool IsPlayingDemo();//Engine.WorldInfo.IsPlayingDemo
	bool IsMapChangeReady();//Engine.WorldInfo.IsMapChangeReady
	bool IsRecordingDemo();//Engine.WorldInfo.IsRecordingDemo
	void ThisIsNeverExecuted(class ADefaultPhysicsVolume* P);//Engine.WorldInfo.ThisIsNeverExecuted
	bool OnSequenceAction(class USequenceAction* Action);//Engine.WorldInfo.OnSequenceAction
	bool IsDemoBuild();//Engine.WorldInfo.IsDemoBuild
	float GetGravityZ();//Engine.WorldInfo.GetGravityZ
	void PostBeginPlay();//Engine.WorldInfo.PostBeginPlay
	bool IsServer();//Engine.WorldInfo.IsServer
	bool GetDemoRewindPoints(TArray<int>* OutRewindPoints);//Engine.WorldInfo.GetDemoRewindPoints
	void PreBeginPlay();//Engine.WorldInfo.PreBeginPlay
	void SetSeamlessTravelMidpointPause(bool bNowPaused);//Engine.WorldInfo.SetSeamlessTravelMidpointPause
	void GetDemoFrameInfo(int* CurrentFrame,int* TotalFrames);//Engine.WorldInfo.GetDemoFrameInfo
	bool IsWithGFx();//Engine.WorldInfo.IsWithGFx
	void NotifyHostMigrationStateChanged(unsigned char NewState,unsigned char OldState);//Engine.WorldInfo.NotifyHostMigrationStateChanged
	class UClass* GetGameClass();//Engine.WorldInfo.GetGameClass
};
UClass* AWorldInfo::pClassPointer = NULL;

//0x00004C (0x0002AC - 0x000260)
//Inventory[0x026B8D50]
class AInventory : public AActor
{
public:
	class AInventory*                                  Inventory;                                        		// 0x000260 (0x0004)              
	class AInventoryManager*                           InvManager;                                       		// 0x000264 (0x0004)              
	struct FString                                     ItemName;                                         		// 0x000268 (0x000C)              
	unsigned long                                      bRenderOverlays : 1;                              		// 0x000274 (0x0004) [0x00000001] 
	unsigned long                                      bReceiveOwnerEvents : 1;                          		// 0x000274 (0x0004) [0x00000002] 
	unsigned long                                      bDropOnDeath : 1;                                 		// 0x000274 (0x0004) [0x00000004] 
	unsigned long                                      bDelayedSpawn : 1;                                		// 0x000274 (0x0004) [0x00000008] 
	unsigned long                                      bPredictRespawns : 1;                             		// 0x000274 (0x0004) [0x00000010] 
	float                                              RespawnTime;                                      		// 0x000278 (0x0004)              
	float                                              MaxDesireability;                                 		// 0x00027C (0x0004)              
	struct FString                                     PickupMessage;                                    		// 0x000280 (0x000C)              
	class USoundCue*                                   PickupSound;                                      		// 0x00028C (0x0004)              
	struct FString                                     PickupForce;                                      		// 0x000290 (0x000C)              
	class UClass*                                      DroppedPickupClass;                               		// 0x00029C (0x0004)              
	class UPrimitiveComponent*                         DroppedPickupMesh;                                		// 0x0002A0 (0x0004)              
	class UPrimitiveComponent*                         PickupFactoryMesh;                                		// 0x0002A4 (0x0004)              
	class UParticleSystemComponent*                    DroppedPickupParticles;                           		// 0x0002A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Inventory");
		return pClassPointer;
	};

public:
	void GiveTo(class APawn* Other);//Engine.Inventory.GiveTo
	void RenderOverlays(class AHUD* H);//Engine.Inventory.RenderOverlays
	bool DenyPickupQuery(class UClass* ItemClass,class AActor* Pickup);//Engine.Inventory.DenyPickupQuery
	void ItemRemovedFromInvManager();//Engine.Inventory.ItemRemovedFromInvManager
	void ClientGivenTo(class APawn* NewOwner,bool bDoNotActivate);//Engine.Inventory.ClientGivenTo
	void ActiveRenderOverlays(class AHUD* H);//Engine.Inventory.ActiveRenderOverlays
	void AnnouncePickup(class APawn* Other);//Engine.Inventory.AnnouncePickup
	void DropFrom(FVector3 StartLocation,FVector3 StartVelocity);//Engine.Inventory.DropFrom
	float BotDesireability(class AActor* PickupHolder,class APawn* P,class AController* C);//Engine.Inventory.BotDesireability
	void GivenTo(class APawn* thisPawn,bool bDoNotActivate);//Engine.Inventory.GivenTo
	void Destroyed();//Engine.Inventory.Destroyed
	float DetourWeight(class APawn* Other,float PathWeight);//Engine.Inventory.DetourWeight
	void OwnerEvent(struct FName EventName);//Engine.Inventory.OwnerEvent
	struct FString GetLocalString(int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI);//Engine.Inventory.GetLocalString
	struct FString GetHumanReadableName();//Engine.Inventory.GetHumanReadableName
};
UClass* AInventory::pClassPointer = NULL;

//0x0000A4 (0x000350 - 0x0002AC)
//Weapon[0x026B8C20]
class AWeapon : public AInventory
{
public:
	unsigned char                                      CurrentFireMode;                                  		// 0x0002AC (0x0001)              PROPERTY: 
	unsigned char                                      _0x0002AD[0x3];                                   		// 0x0002AD (0x0003) MISSED OFFSET
	TArray<struct FName>                               FiringStatesArray;                                		// 0x0002B0 (0x000C)              
	TArray<unsigned char>                              WeaponFireTypes;                                  		// 0x0002BC (0x000C)              
	TArray<class UClass*>                              WeaponProjectiles;                                		// 0x0002C8 (0x000C)              
	TArray<float>                                      FireInterval;                                     		// 0x0002D4 (0x000C)              
	TArray<float>                                      Spread;                                           		// 0x0002E0 (0x000C)              
	TArray<float>                                      InstantHitDamage;                                 		// 0x0002EC (0x000C)              
	TArray<float>                                      InstantHitMomentum;                               		// 0x0002F8 (0x000C)              
	TArray<class UClass*>                              InstantHitDamageTypes;                            		// 0x000304 (0x000C)              
	float                                              EquipTime;                                        		// 0x000310 (0x0004)              
	float                                              PutDownTime;                                      		// 0x000314 (0x0004)              
	FVector3                                           FireOffset;                                       		// 0x000318 (0x000C)              
	unsigned long                                      bWeaponPutDown : 1;                               		// 0x000324 (0x0004) [0x00000001] 
	unsigned long                                      bCanThrow : 1;                                    		// 0x000324 (0x0004) [0x00000002] 
	unsigned long                                      bWasOptionalSet : 1;                              		// 0x000324 (0x0004) [0x00000004] 
	unsigned long                                      bWasDoNotActivate : 1;                            		// 0x000324 (0x0004) [0x00000008] 
	unsigned long                                      bInstantHit : 1;                                  		// 0x000324 (0x0004) [0x00000010] 
	unsigned long                                      bMeleeWeapon : 1;                                 		// 0x000324 (0x0004) [0x00000020] 
	float                                              WeaponRange;                                      		// 0x000328 (0x0004)              
	class UMeshComponent*                              Mesh;                                             		// 0x00032C (0x0004)              
	float                                              DefaultAnimSpeed;                                 		// 0x000330 (0x0004)              
	float                                              Priority;                                         		// 0x000334 (0x0004)              
	class AAIController*                               AIController;                                     		// 0x000338 (0x0004)              
	TArray<unsigned char>                              ShouldFireOnRelease;                              		// 0x00033C (0x000C)              
	float                                              AIRating;                                         		// 0x000348 (0x0004)              
	float                                              CachedMaxRange;                                   		// 0x00034C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Weapon");
		return pClassPointer;
	};

public:
	FRotator AddSpread(FRotator BaseAim);//Engine.Weapon.AddSpread
	void TimeWeaponPutDown();//Engine.Weapon.TimeWeaponPutDown
	float SuggestAttackStyle();//Engine.Weapon.SuggestAttackStyle
	void WeaponEquipped();//Engine.Weapon.WeaponEquipped
	bool HasAmmo(unsigned char FireModeNum,int Amount);//Engine.Weapon.HasAmmo
	bool ShouldRefire();//Engine.Weapon.ShouldRefire
	void IncrementFlashCount();//Engine.Weapon.IncrementFlashCount
	void TimeWeaponEquipping();//Engine.Weapon.TimeWeaponEquipping
	void NotifyWeaponFinishedFiring(unsigned char FireMode);//Engine.Weapon.NotifyWeaponFinishedFiring
	void ServerStartFire(unsigned char FireModeNum);//Engine.Weapon.ServerStartFire
	void EndFire(unsigned char FireModeNum);//Engine.Weapon.EndFire
	void WeaponLog(struct FString msg,struct FString FuncStr);//Engine.Weapon.WeaponLog
	void PlayWeaponAnimation(struct FName Sequence,float fDesiredDuration,bool bLoop,class USkeletalMeshComponent* SkelMesh);//Engine.Weapon.PlayWeaponAnimation
	FVector3 GetMuzzleLoc();//Engine.Weapon.GetMuzzleLoc
	void ClearFlashLocation();//Engine.Weapon.ClearFlashLocation
	void SendToFiringState(unsigned char FireModeNum);//Engine.Weapon.SendToFiringState
	void StopWeaponAnimation();//Engine.Weapon.StopWeaponAnimation
	void SetFlashLocation(FVector3 HitLocation);//Engine.Weapon.SetFlashLocation
	FVector3 GetPhysicalFireStartLoc(FVector3 AimDir);//Engine.Weapon.GetPhysicalFireStartLoc
	void GivenTo(class APawn* thisPawn,bool bDoNotActivate);//Engine.Weapon.GivenTo
	void GetViewAxes(FVector3* XAxis,FVector3* YAxis,FVector3* ZAxis);//Engine.Weapon.GetViewAxes
	float GetFireInterval(unsigned char FireModeNum);//Engine.Weapon.GetFireInterval
	void WeaponCalcCamera(float fDeltaTime,FVector3* out_CamLoc,FRotator* out_CamRot);//Engine.Weapon.WeaponCalcCamera
	void ClientWeaponThrown();//Engine.Weapon.ClientWeaponThrown
	void WeaponPlaySound(class USoundCue* Sound,float NoiseLoudness);//Engine.Weapon.WeaponPlaySound
	bool DoOverridePrevWeapon();//Engine.Weapon.DoOverridePrevWeapon
	class AProjectile* ProjectileFire();//Engine.Weapon.ProjectileFire
	void WeaponEmpty();//Engine.Weapon.WeaponEmpty
	float SuggestDefenseStyle();//Engine.Weapon.SuggestDefenseStyle
	bool DenyClientWeaponSet();//Engine.Weapon.DenyClientWeaponSet
	void RefireCheckTimer();//Engine.Weapon.RefireCheckTimer
	void PutDownWeapon();//Engine.Weapon.PutDownWeapon
	float MaxRange();//Engine.Weapon.MaxRange
	void FireModeUpdated(unsigned char FiringMode,bool bViaReplication);//Engine.Weapon.FireModeUpdated
	void InstantFire();//Engine.Weapon.InstantFire
	bool CanThrow();//Engine.Weapon.CanThrow
	void ServerStopFire(unsigned char FireModeNum);//Engine.Weapon.ServerStopFire
	bool PassThroughDamage(class AActor* HitActor);//Engine.Weapon.PassThroughDamage
	class AActor* GetTraceOwner();//Engine.Weapon.GetTraceOwner
	void GetWeaponDebug(TArray<struct FString>* DebugInfo);//Engine.Weapon.GetWeaponDebug
	void NotifyWeaponFired(unsigned char FireMode);//Engine.Weapon.NotifyWeaponFired
	bool DenyPickupQuery(class UClass* ItemClass,class AActor* Pickup);//Engine.Weapon.DenyPickupQuery
	void PlayFiringSound();//Engine.Weapon.PlayFiringSound
	void StopFire(unsigned char FireModeNum);//Engine.Weapon.StopFire
	bool FireOnRelease();//Engine.Weapon.FireOnRelease
	class UClass* GetProjectileClass();//Engine.Weapon.GetProjectileClass
	void ClearFlashCount();//Engine.Weapon.ClearFlashCount
	void CustomFire();//Engine.Weapon.CustomFire
	void ItemRemovedFromInvManager();//Engine.Weapon.ItemRemovedFromInvManager
	bool PendingFire(int FireMode);//Engine.Weapon.PendingFire
	void ProcessInstantHit(unsigned char FiringMode,struct FImpactInfo Impact);//Engine.Weapon.ProcessInstantHit
	void HandleFinishedFiring();//Engine.Weapon.HandleFinishedFiring
	void WeaponIsDown();//Engine.Weapon.WeaponIsDown
	class UAnimNodeSequence* GetWeaponAnimNodeSeq();//Engine.Weapon.GetWeaponAnimNodeSeq
	bool DoOverrideNextWeapon();//Engine.Weapon.DoOverrideNextWeapon
	void HolderDied();//Engine.Weapon.HolderDied
	void ClientWeaponSet(bool bOptionalSet,bool bDoNotActivate);//Engine.Weapon.ClientWeaponSet
	void ConsumeAmmo(unsigned char FireModeNum);//Engine.Weapon.ConsumeAmmo
	float GetWeaponRating();//Engine.Weapon.GetWeaponRating
	float GetTraceRange();//Engine.Weapon.GetTraceRange
	void SetPendingFire(int FireMode);//Engine.Weapon.SetPendingFire
	void StopFireEffects(unsigned char FireModeNum);//Engine.Weapon.StopFireEffects
	float GetDamageRadius();//Engine.Weapon.GetDamageRadius
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt,struct FName SocketName);//Engine.Weapon.AttachWeaponTo
	void Destroyed();//Engine.Weapon.Destroyed
	bool StillFiring(unsigned char FireMode);//Engine.Weapon.StillFiring
	bool RecommendRangedAttack();//Engine.Weapon.RecommendRangedAttack
	float AdjustFOVAngle(float FOVAngle);//Engine.Weapon.AdjustFOVAngle
	bool IsFiring();//Engine.Weapon.IsFiring
	bool HasAnyAmmo();//Engine.Weapon.HasAnyAmmo
	bool CanAttack(class AActor* Other);//Engine.Weapon.CanAttack
	void Activate();//Engine.Weapon.Activate
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.Weapon.DisplayDebug
	void DetachWeapon();//Engine.Weapon.DetachWeapon
	bool IsActiveWeapon();//Engine.Weapon.IsActiveWeapon
	bool RecommendLongRangedAttack();//Engine.Weapon.RecommendLongRangedAttack
	bool FocusOnLeader(bool bLeaderFiring);//Engine.Weapon.FocusOnLeader
	float RangedAttackTime();//Engine.Weapon.RangedAttackTime
	FRotator GetAdjustedAim(FVector3 StartFireLoc);//Engine.Weapon.GetAdjustedAim
	void ClearPendingFire(int FireMode);//Engine.Weapon.ClearPendingFire
	int AddAmmo(int Amount);//Engine.Weapon.AddAmmo
	void FireAmmunition();//Engine.Weapon.FireAmmunition
	bool TryPutDown();//Engine.Weapon.TryPutDown
	void DumpWeaponDebugToLog();//Engine.Weapon.DumpWeaponDebugToLog
	struct FImpactInfo CalcWeaponFire(FVector3 StartTrace,FVector3 EndTrace,TArray<struct FImpactInfo>* ImpactList);//Engine.Weapon.CalcWeaponFire
	void DropFrom(FVector3 StartLocation,FVector3 StartVelocity);//Engine.Weapon.DropFrom
	void BeginFire(unsigned char FireModeNum);//Engine.Weapon.BeginFire
	void PlayFireEffects(unsigned char FireModeNum,FVector3 HitLocation);//Engine.Weapon.PlayFireEffects
	void SetCurrentFireMode(unsigned char FiringModeNum);//Engine.Weapon.SetCurrentFireMode
	void TimeWeaponFiring(unsigned char FireModeNum);//Engine.Weapon.TimeWeaponFiring
	void ForceEndFire();//Engine.Weapon.ForceEndFire
	float GetAIRating();//Engine.Weapon.GetAIRating
	void StartFire(unsigned char FireModeNum);//Engine.Weapon.StartFire
};
UClass* AWeapon::pClassPointer = NULL;

//0x00001C (0x00027C - 0x000260)
//InventoryManager[0x026B8AF0]
class AInventoryManager : public AActor
{
public:
	class AInventory*                                  InventoryChain;                                   		// 0x000260 (0x0004)              
	class AWeapon*                                     PendingWeapon;                                    		// 0x000264 (0x0004)              
	class AWeapon*                                     LastAttemptedSwitchToWeapon;                      		// 0x000268 (0x0004)              
	unsigned long                                      bMustHoldWeapon : 1;                              		// 0x00026C (0x0004) [0x00000001] 
	TArray<int>                                        PendingFire;                                      		// 0x000270 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InventoryManager");
		return pClassPointer;
	};

public:
	float GetWeaponRatingFor(class AWeapon* W);//Engine.InventoryManager.GetWeaponRatingFor
	void ClientWeaponSet(class AWeapon* NewWeapon,bool bOptionalSet,bool bDoNotActivate);//Engine.InventoryManager.ClientWeaponSet
	void PostBeginPlay();//Engine.InventoryManager.PostBeginPlay
	class AInventory* CreateInventory(class UClass* NewInventoryItemClass,bool bDoNotActivate);//Engine.InventoryManager.CreateInventory
	void StartFire(unsigned char FireModeNum);//Engine.InventoryManager.StartFire
	bool CancelWeaponChange();//Engine.InventoryManager.CancelWeaponChange
	void OwnerEvent(struct FName EventName);//Engine.InventoryManager.OwnerEvent
	void SetPendingWeapon(class AWeapon* DesiredWeapon);//Engine.InventoryManager.SetPendingWeapon
	bool AddInventory(class AInventory* NewItem,bool bDoNotActivate);//Engine.InventoryManager.AddInventory
	void ClientSyncWeapon(class AWeapon* NewWeapon);//Engine.InventoryManager.ClientSyncWeapon
	class AWeapon* GetBestWeapon(bool bForceADifferentWeapon);//Engine.InventoryManager.GetBestWeapon
	void SetupFor(class APawn* P);//Engine.InventoryManager.SetupFor
	void SwitchToBestWeapon(bool bForceADifferentWeapon);//Engine.InventoryManager.SwitchToBestWeapon
	void DumpWeaponStats();//Engine.InventoryManager.DumpWeaponStats
	void StopFire(unsigned char FireModeNum);//Engine.InventoryManager.StopFire
	void ChangedWeapon();//Engine.InventoryManager.ChangedWeapon
	void Destroyed();//Engine.InventoryManager.Destroyed
	void ServerSetCurrentWeapon(class AWeapon* DesiredWeapon);//Engine.InventoryManager.ServerSetCurrentWeapon
	void SetCurrentWeapon(class AWeapon* DesiredWeapon);//Engine.InventoryManager.SetCurrentWeapon
	bool HandlePickupQuery(class UClass* ItemClass,class AActor* Pickup);//Engine.InventoryManager.HandlePickupQuery
	void RemoveFromInventory(class AInventory* ItemToRemove);//Engine.InventoryManager.RemoveFromInventory
	void DiscardInventory();//Engine.InventoryManager.DiscardInventory
	void PrevWeapon();//Engine.InventoryManager.PrevWeapon
	void NextWeapon();//Engine.InventoryManager.NextWeapon
	void DrawHUD(class AHUD* H);//Engine.InventoryManager.DrawHUD
	class AInventory* FindInventoryType(class UClass* DesiredClass,bool bAllowSubclass);//Engine.InventoryManager.FindInventoryType
	bool IsActiveWeapon(class AWeapon* ThisWeapon);//Engine.InventoryManager.IsActiveWeapon
	int ModifyDamage(int Damage,class AController* InstigatedBy,FVector3 HitLocation,FVector3 Momentum,class UClass* DamageType);//Engine.InventoryManager.ModifyDamage
	void InventoryActors(class UClass* BaseClass,class AInventory** Inv);//Engine.InventoryManager.InventoryActors
};
UClass* AInventoryManager::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//Keypoint[0x026B89C0]
class AKeypoint : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Keypoint");
		return pClassPointer;
	};
};
UClass* AKeypoint::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//ClipMarker[0x026B8890]
class AClipMarker : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ClipMarker");
		return pClassPointer;
	};
};
UClass* AClipMarker::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//PolyMarker[0x026B8760]
class APolyMarker : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PolyMarker");
		return pClassPointer;
	};
};
UClass* APolyMarker::pClassPointer = NULL;

//0x000008 (0x000268 - 0x000260)
//Light[0x026B8630]
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                   		// 0x000260 (0x0004)              
	unsigned long                                      bEnabled : 1;                                     		// 0x000264 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Light");
		return pClassPointer;
	};

public:
	bool OnSequenceAction(class USequenceAction* Action);//Engine.Light.OnSequenceAction
	void OnToggle(class USeqAct_Toggle* Action);//Engine.Light.OnToggle
	void ReplicatedEvent(struct FName VarName);//Engine.Light.ReplicatedEvent
};
UClass* ALight::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//DirectionalLight[0x026B8500]
class ADirectionalLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DirectionalLight");
		return pClassPointer;
	};
};
UClass* ADirectionalLight::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//DirectionalLightToggleable[0x026B83D0]
class ADirectionalLightToggleable : public ADirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DirectionalLightToggleable");
		return pClassPointer;
	};
};
UClass* ADirectionalLightToggleable::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//PointLight[0x026B82A0]
class APointLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PointLight");
		return pClassPointer;
	};
};
UClass* APointLight::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//PointLightMovable[0x026B8170]
class APointLightMovable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PointLightMovable");
		return pClassPointer;
	};
};
UClass* APointLightMovable::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//PointLightToggleable[0x026B8040]
class APointLightToggleable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PointLightToggleable");
		return pClassPointer;
	};
};
UClass* APointLightToggleable::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//SkyLight[0x026B7F10]
class ASkyLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkyLight");
		return pClassPointer;
	};
};
UClass* ASkyLight::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//SkyLightToggleable[0x026B7DE0]
class ASkyLightToggleable : public ASkyLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkyLightToggleable");
		return pClassPointer;
	};
};
UClass* ASkyLightToggleable::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//SpotLight[0x026B7CB0]
class ASpotLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpotLight");
		return pClassPointer;
	};
};
UClass* ASpotLight::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//SpotLightMovable[0x026B7B80]
class ASpotLightMovable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpotLightMovable");
		return pClassPointer;
	};
};
UClass* ASpotLightMovable::pClassPointer = NULL;

//0x000000 (0x000268 - 0x000268)
//SpotLightToggleable[0x026B7A50]
class ASpotLightToggleable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpotLightToggleable");
		return pClassPointer;
	};
};
UClass* ASpotLightToggleable::pClassPointer = NULL;

//0x000010 (0x000278 - 0x000268)
//StaticLightCollectionActor[0x026B7920]
class AStaticLightCollectionActor : public ALight
{
public:
	TArray<class ULightComponent*>                     LightComponents;                                  		// 0x000268 (0x000C)              
	int                                                MaxLightComponents;                               		// 0x000274 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.StaticLightCollectionActor");
		return pClassPointer;
	};
};
UClass* AStaticLightCollectionActor::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//MaterialInstanceActor[0x026B77F0]
class AMaterialInstanceActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialInstanceActor");
		return pClassPointer;
	};
};
UClass* AMaterialInstanceActor::pClassPointer = NULL;

//0x000014 (0x000274 - 0x000260)
//MatineeActor[0x026B76C0]
class AMatineeActor : public AActor
{
public:
	class USeqAct_Interp*                              InterpAction;                                     		// 0x000260 (0x0004)              
	unsigned long                                      bIsPlaying : 1;                                   		// 0x000264 (0x0004) [0x00000001] 
	unsigned long                                      bReversePlayback : 1;                             		// 0x000264 (0x0004) [0x00000002] 
	unsigned long                                      bPaused : 1;                                      		// 0x000264 (0x0004) [0x00000004] 
	float                                              PlayRate;                                         		// 0x000268 (0x0004)              
	double                                             Position;                                         		// 0x00026C (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MatineeActor");
		return pClassPointer;
	};

public:
	void Update();//Engine.MatineeActor.Update
};
UClass* AMatineeActor::pClassPointer = NULL;

//0x0000E4 (0x000344 - 0x000260)
//NavigationPoint[0x026B7590]
class ANavigationPoint : public AActor
{
public:
	unsigned long                                      bEndPoint : 1;                                    		// 0x000260 (0x0004) [0x00000001] 
	unsigned long                                      bTransientEndPoint : 1;                           		// 0x000260 (0x0004) [0x00000002] 
	unsigned long                                      bHideEditorPaths : 1;                             		// 0x000260 (0x0004) [0x00000004] 
	unsigned long                                      bCanReach : 1;                                    		// 0x000260 (0x0004) [0x00000008] 
	unsigned long                                      bBlocked : 1;                                     		// 0x000260 (0x0004) [0x00000010] 
	unsigned long                                      bOneWayPath : 1;                                  		// 0x000260 (0x0004) [0x00000020] 
	unsigned long                                      bNeverUseStrafing : 1;                            		// 0x000260 (0x0004) [0x00000040] 
	unsigned long                                      bAlwaysUseStrafing : 1;                           		// 0x000260 (0x0004) [0x00000080] 
	unsigned long                                      bForceNoStrafing : 1;                             		// 0x000260 (0x0004) [0x00000100] 
	unsigned long                                      bAutoBuilt : 1;                                   		// 0x000260 (0x0004) [0x00000200] 
	unsigned long                                      bSpecialMove : 1;                                 		// 0x000260 (0x0004) [0x00000400] 
	unsigned long                                      bNoAutoConnect : 1;                               		// 0x000260 (0x0004) [0x00000800] 
	unsigned long                                      bNotBased : 1;                                    		// 0x000260 (0x0004) [0x00001000] 
	unsigned long                                      bPathsChanged : 1;                                		// 0x000260 (0x0004) [0x00002000] 
	unsigned long                                      bDestinationOnly : 1;                             		// 0x000260 (0x0004) [0x00004000] 
	unsigned long                                      bSourceOnly : 1;                                  		// 0x000260 (0x0004) [0x00008000] 
	unsigned long                                      bSpecialForced : 1;                               		// 0x000260 (0x0004) [0x00010000] 
	unsigned long                                      bMustBeReachable : 1;                             		// 0x000260 (0x0004) [0x00020000] 
	unsigned long                                      bBlockable : 1;                                   		// 0x000260 (0x0004) [0x00040000] 
	unsigned long                                      bFlyingPreferred : 1;                             		// 0x000260 (0x0004) [0x00080000] 
	unsigned long                                      bMayCausePain : 1;                                		// 0x000260 (0x0004) [0x00100000] 
	unsigned long                                      bAlreadyVisited : 1;                              		// 0x000260 (0x0004) [0x00200000] 
	unsigned long                                      bVehicleDestination : 1;                          		// 0x000260 (0x0004) [0x00400000] 
	unsigned long                                      bMakeSourceOnly : 1;                              		// 0x000260 (0x0004) [0x00800000] 
	unsigned long                                      bMustTouchToReach : 1;                            		// 0x000260 (0x0004) [0x01000000] 
	unsigned long                                      bCanWalkOnToReach : 1;                            		// 0x000260 (0x0004) [0x02000000] 
	unsigned long                                      bBuildLongPaths : 1;                              		// 0x000260 (0x0004) [0x04000000] 
	unsigned long                                      bBlockedForVehicles : 1;                          		// 0x000260 (0x0004) [0x08000000] 
	unsigned long                                      bPreferredVehiclePath : 1;                        		// 0x000260 (0x0004) [0x10000000] 
	unsigned long                                      m_bAutoConnect : 1;                               		// 0x000260 (0x0004) [0x20000000] 
	unsigned long                                      m_bAutoGenerated : 1;                             		// 0x000260 (0x0004) [0x40000000] 
	unsigned long                                      bHasCrossLevelPaths : 1;                          		// 0x000260 (0x0004) [0x80000000] 
	struct FNavigationOctreeObject                     NavOctreeObject;                                  		// 0x000264 (0x0034)              
	TArray<class UReachSpec*>                          PathList;                                         		// 0x000298 (0x000C)              
	TArray<class AVolume*>                             VolumeList;                                       		// 0x0002A4 (0x000C)              
	int                                                visitedWeight;                                    		// 0x0002B0 (0x0004)              
	int                                                bestPathWeight;                                   		// 0x0002B4 (0x0004)              
	class ANavigationPoint*                            nextNavigationPoint;                              		// 0x0002B8 (0x0004)              
	class ANavigationPoint*                            nextOrdered;                                      		// 0x0002BC (0x0004)              
	class ANavigationPoint*                            prevOrdered;                                      		// 0x0002C0 (0x0004)              
	class ANavigationPoint*                            previousPath;                                     		// 0x0002C4 (0x0004)              
	int                                                Cost;                                             		// 0x0002C8 (0x0004)              
	int                                                ExtraCost;                                        		// 0x0002CC (0x0004)              
	int                                                TransientCost;                                    		// 0x0002D0 (0x0004)              
	int                                                FearCost;                                         		// 0x0002D4 (0x0004)              
	TArray<struct FDebugNavCost>                       CostArray;                                        		// 0x0002D8 (0x000C)              
	class ADroppedPickup*                              InventoryCache;                                   		// 0x0002E4 (0x0004)              
	float                                              InventoryDist;                                    		// 0x0002E8 (0x0004)              
	float                                              LastDetourWeight;                                 		// 0x0002EC (0x0004)              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0002F0 (0x0004)              
	class AObjective*                                  NearestObjective;                                 		// 0x0002F4 (0x0004)              
	float                                              ObjectiveDistance;                                		// 0x0002F8 (0x0004)              
	struct FCylinder                                   MaxPathSize;                                      		// 0x0002FC (0x0008)              
	TArray<unsigned char>                              m_allowedNodeTypes;                               		// 0x000304 (0x000C)              
	TArray<unsigned char>                              m_proscribedNodeTypes;                            		// 0x000310 (0x000C)              
	struct FGuid                                       NavGuid;                                          		// 0x00031C (0x0010)              
	class USpriteComponent*                            GoodSprite;                                       		// 0x00032C (0x0004)              
	class USpriteComponent*                            BadSprite;                                        		// 0x000330 (0x0004)              
	int                                                NetworkID;                                        		// 0x000334 (0x0004)              
	class APawn*                                       AnchoredPawn;                                     		// 0x000338 (0x0004)              
	double                                             LastAnchoredPawnTime;                             		// 0x00033C (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NavigationPoint");
		return pClassPointer;
	};

public:
	int SpecialCost(class APawn* Seeker,class UReachSpec* Path);//Engine.NavigationPoint.SpecialCost
	bool ProceedWithMove(class APawn* Other);//Engine.NavigationPoint.ProceedWithMove
	class ANavigationPoint* GetNearestNavToActor(class AActor* chkActor,class UClass* RequiredClass,TArray<class ANavigationPoint*> ExcludeList,float MinDist);//Engine.NavigationPoint.GetNearestNavToActor
	class UReachSpec* GetReachSpecTo(class ANavigationPoint* Nav);//Engine.NavigationPoint.GetReachSpecTo
	bool IsOnDifferentNetwork(class ANavigationPoint* Nav);//Engine.NavigationPoint.IsOnDifferentNetwork
	bool IsAvailableTo(class AActor* chkActor);//Engine.NavigationPoint.IsAvailableTo
	bool OnSequenceAction(class USequenceAction* Action);//Engine.NavigationPoint.OnSequenceAction
	bool CanTeleport(class AActor* A);//Engine.NavigationPoint.CanTeleport
	bool Accept(class AActor* Incoming,class AActor* Source);//Engine.NavigationPoint.Accept
	void GetBoundingCylinder(float* CollisionRadius,float* CollisionHeight);//Engine.NavigationPoint.GetBoundingCylinder
	float DetourWeight(class APawn* Other,float PathWeight);//Engine.NavigationPoint.DetourWeight
	class ANavigationPoint* GetNearestNavToPoint(class AActor* chkActor,FVector3 ChkPoint,class UClass* RequiredClass,TArray<class ANavigationPoint*> ExcludeList);//Engine.NavigationPoint.GetNearestNavToPoint
	bool SuggestMovePreparation(class APawn* Other);//Engine.NavigationPoint.SuggestMovePreparation
	bool GetAllNavInRadius(class AActor* chkActor,FVector3 ChkPoint,float Radius,TArray<class ANavigationPoint*>* out_NavList,bool bSkipBlocked,int inNetworkID,struct FCylinder MinSize);//Engine.NavigationPoint.GetAllNavInRadius
	void OnToggle(class USeqAct_Toggle* inAction);//Engine.NavigationPoint.OnToggle
	bool IsUsableAnchorFor(class APawn* P);//Engine.NavigationPoint.IsUsableAnchorFor
	bool OnMatchingNetworks(class ANavigationPoint* Nav);//Engine.NavigationPoint.OnMatchingNetworks
	struct FString GetDebugAbbrev();//Engine.NavigationPoint.GetDebugAbbrev
};
UClass* ANavigationPoint::pClassPointer = NULL;

//0x000071 (0x0003B5 - 0x000344)
//CoverLink[0x026B7460]
class ACoverLink : public ANavigationPoint
{
public:
	TArray<struct FCoverSlot>                          Slots;                                            		// 0x000344 (0x000C)              
	TArray<class APawn*>                               Claims;                                           		// 0x000350 (0x000C)              
	unsigned long                                      bDisabled : 1;                                    		// 0x00035C (0x0004) [0x00000001] 
	unsigned long                                      bClaimAllSlots : 1;                               		// 0x00035C (0x0004) [0x00000002] 
	unsigned long                                      bAutoSort : 1;                                    		// 0x00035C (0x0004) [0x00000004] 
	unsigned long                                      bAutoAdjust : 1;                                  		// 0x00035C (0x0004) [0x00000008] 
	unsigned long                                      bCircular : 1;                                    		// 0x00035C (0x0004) [0x00000010] 
	unsigned long                                      bLooped : 1;                                      		// 0x00035C (0x0004) [0x00000020] 
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x00035C (0x0004) [0x00000040] 
	unsigned long                                      bDynamicCover : 1;                                		// 0x00035C (0x0004) [0x00000080] 
	unsigned long                                      bDebug_FireLinks : 1;                             		// 0x00035C (0x0004) [0x00000100] 
	unsigned long                                      bDebug_ExposedLinks : 1;                          		// 0x00035C (0x0004) [0x00000200] 
	unsigned long                                      bDebug_DangerLinks : 1;                           		// 0x00035C (0x0004) [0x00000400] 
	float                                              MaxFireLinkDist;                                  		// 0x000360 (0x0004)              
	FVector3                                           CircularOrigin;                                   		// 0x000364 (0x000C)              
	float                                              CircularRadius;                                   		// 0x000370 (0x0004)              
	float                                              AlignDist;                                        		// 0x000374 (0x0004)              
	float                                              StandHeight;                                      		// 0x000378 (0x0004)              
	float                                              MidHeight;                                        		// 0x00037C (0x0004)              
	FVector3                                           StandingLeanOffset;                               		// 0x000380 (0x000C)              
	FVector3                                           CrouchLeanOffset;                                 		// 0x00038C (0x000C)              
	FVector3                                           PopupOffset;                                      		// 0x000398 (0x000C)              
	float                                              SlipDist;                                         		// 0x0003A4 (0x0004)              
	float                                              TurnDist;                                         		// 0x0003A8 (0x0004)              
	float                                              DangerScale;                                      		// 0x0003AC (0x0004)              
	class ACoverLink*                                  NextCoverLink;                                    		// 0x0003B0 (0x0004)              
	unsigned char                                      LocationDescription;                              		// 0x0003B4 (0x0001)              PROPERTY: ECoverLocationDescription

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CoverLink");
		return pClassPointer;
	};

public:
	void SetDisabled(bool bNewDisabled);//Engine.CoverLink.SetDisabled
	bool AllowRightTransition(int SlotIdx);//Engine.CoverLink.AllowRightTransition
	void SetSlotEnabled(int SlotIdx,bool bEnable);//Engine.CoverLink.SetSlotEnabled
	bool FindSlots(FVector3 CheckLocation,float MaxDistance,int* LeftSlotIdx,int* RightSlotIdx);//Engine.CoverLink.FindSlots
	bool HasFireLinkTo(int SlotIdx,struct FCoverInfo ChkCover,bool bAllowFallbackLinks);//Engine.CoverLink.HasFireLinkTo
	bool UnClaim(class APawn* OldClaim,int SlotIdx,bool bUnclaimAll);//Engine.CoverLink.UnClaim
	void OnModifyCover(class USeqAct_ModifyCover* Action);//Engine.CoverLink.OnModifyCover
	bool IsStationarySlot(int SlotIdx);//Engine.CoverLink.IsStationarySlot
	bool IsExposedTo(int SlotIdx,struct FCoverInfo ChkSlot,float* out_ExposedScale);//Engine.CoverLink.IsExposedTo
	unsigned char GetLocationDescription(int SlotIdx);//Engine.CoverLink.GetLocationDescription
	FRotator GetSlotRotation(int SlotIdx,bool bForceUseOffset);//Engine.CoverLink.GetSlotRotation
	bool OnSequenceAction(class USequenceAction* Action);//Engine.CoverLink.OnSequenceAction
	bool GetFireLinkTo(int SlotIdx,struct FCoverInfo ChkCover,unsigned char ChkAction,unsigned char ChkType,int* out_FireLinkIdx,TArray<int>* out_Items);//Engine.CoverLink.GetFireLinkTo
	bool GetSwatTurnTarget(int SlotIdx,int Direction,struct FCoverReference* out_Info);//Engine.CoverLink.GetSwatTurnTarget
	bool IsValidClaim(class APawn* ChkClaim,int SlotIdx,bool bSkipTeamCheck,bool bSkipOverlapCheck);//Engine.CoverLink.IsValidClaim
	FVector3 GetSlotLocation(int SlotIdx,bool bForceUseOffset);//Engine.CoverLink.GetSlotLocation
	void OnToggle(class USeqAct_Toggle* inAction);//Engine.CoverLink.OnToggle
	bool IsRightEdgeSlot(int SlotIdx,bool bIgnoreLeans);//Engine.CoverLink.IsRightEdgeSlot
	bool IsEnabled();//Engine.CoverLink.IsEnabled
	struct FString GetDebugAbbrev();//Engine.CoverLink.GetDebugAbbrev
	FVector3 GetSlotViewPoint(int SlotIdx,unsigned char Type,unsigned char Action);//Engine.CoverLink.GetSlotViewPoint
	int AddCoverSlot(FVector3 SlotLocation,FRotator SlotRotation,int SlotIdx,bool bForceSlotUpdate);//Engine.CoverLink.AddCoverSlot
	void GetSlotActions(int SlotIdx,TArray<unsigned char>* Actions);//Engine.CoverLink.GetSlotActions
	struct FString GetDebugString(int SlotIdx);//Engine.CoverLink.GetDebugString
	void Tick(float DeltaTime);//Engine.CoverLink.Tick
	bool AutoAdjustSlot(int SlotIdx,bool bOnlyCheckLeans);//Engine.CoverLink.AutoAdjustSlot
	void SetInvalidUntil(int SlotIdx,float TimeToBecomeValid);//Engine.CoverLink.SetInvalidUntil
	bool IsLeftEdgeSlot(int SlotIdx,bool bIgnoreLeans);//Engine.CoverLink.IsLeftEdgeSlot
	bool AllowLeftTransition(int SlotIdx);//Engine.CoverLink.AllowLeftTransition
	bool Claim(class APawn* NewClaim,int SlotIdx);//Engine.CoverLink.Claim
	class ACoverSlotMarker* GetSlotMarker(int SlotIdx);//Engine.CoverLink.GetSlotMarker
	bool IsEdgeSlot(int SlotIdx,bool bIgnoreLeans);//Engine.CoverLink.IsEdgeSlot
};
UClass* ACoverLink::pClassPointer = NULL;

//0x00000C (0x000350 - 0x000344)
//CoverSlotMarker[0x026B7330]
class ACoverSlotMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                       		// 0x000344 (0x0008)              
	unsigned long                                      bIgnoreSizeLimits : 1;                            		// 0x00034C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CoverSlotMarker");
		return pClassPointer;
	};

public:
	FVector3 GetSlotLocation();//Engine.CoverSlotMarker.GetSlotLocation
	FRotator GetSlotRotation();//Engine.CoverSlotMarker.GetSlotRotation
	struct FString GetDebugAbbrev();//Engine.CoverSlotMarker.GetDebugAbbrev
	bool IsValidClaim(class APawn* ChkClaim,bool bSkipTeamCheck,bool bSkipOverlapCheck);//Engine.CoverSlotMarker.IsValidClaim
	void PostBeginPlay();//Engine.CoverSlotMarker.PostBeginPlay
	void SetSlotEnabled(bool bEnable);//Engine.CoverSlotMarker.SetSlotEnabled
};
UClass* ACoverSlotMarker::pClassPointer = NULL;

//0x000010 (0x000354 - 0x000344)
//DoorMarker[0x026B7200]
class ADoorMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyDoor;                                           		// 0x000344 (0x0004)              
	unsigned char                                      DoorType;                                         		// 0x000348 (0x0001)              PROPERTY: EDoorType
	unsigned char                                      _0x000349[0x3];                                   		// 0x000349 (0x0003) MISSED OFFSET
	class AActor*                                      DoorTrigger;                                      		// 0x00034C (0x0004)              
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                   		// 0x000350 (0x0004) [0x00000001] 
	unsigned long                                      bInitiallyClosed : 1;                             		// 0x000350 (0x0004) [0x00000002] 
	unsigned long                                      bBlockedWhenClosed : 1;                           		// 0x000350 (0x0004) [0x00000004] 
	unsigned long                                      bDoorOpen : 1;                                    		// 0x000350 (0x0004) [0x00000008] 
	unsigned long                                      bTempDisabledCollision : 1;                       		// 0x000350 (0x0004) [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DoorMarker");
		return pClassPointer;
	};

public:
	void MoverOpened();//Engine.DoorMarker.MoverOpened
	class AActor* SpecialHandling(class APawn* Other);//Engine.DoorMarker.SpecialHandling
	void MoverClosed();//Engine.DoorMarker.MoverClosed
	bool ProceedWithMove(class APawn* Other);//Engine.DoorMarker.ProceedWithMove
	void PostBeginPlay();//Engine.DoorMarker.PostBeginPlay
	bool SuggestMovePreparation(class APawn* Other);//Engine.DoorMarker.SuggestMovePreparation
};
UClass* ADoorMarker::pClassPointer = NULL;

//0x000004 (0x000348 - 0x000344)
//DynamicAnchor[0x026B70D0]
class ADynamicAnchor : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                      		// 0x000344 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DynamicAnchor");
		return pClassPointer;
	};
};
UClass* ADynamicAnchor::pClassPointer = NULL;

//0x000020 (0x000364 - 0x000344)
//LiftCenter[0x026B6FA0]
class ALiftCenter : public ANavigationPoint
{
public:
	class AInterpActor*                                MyLift;                                           		// 0x000344 (0x0004)              
	float                                              MaxDist2D;                                        		// 0x000348 (0x0004)              
	FVector3                                           LiftOffset;                                       		// 0x00034C (0x000C)              
	unsigned long                                      bJumpLift : 1;                                    		// 0x000358 (0x0004) [0x00000001] 
	float                                              CollisionHeight;                                  		// 0x00035C (0x0004)              
	class ATrigger*                                    LiftTrigger;                                      		// 0x000360 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LiftCenter");
		return pClassPointer;
	};

public:
	bool ProceedWithMove(class APawn* Other);//Engine.LiftCenter.ProceedWithMove
	void PostBeginPlay();//Engine.LiftCenter.PostBeginPlay
	bool SuggestMovePreparation(class APawn* Other);//Engine.LiftCenter.SuggestMovePreparation
	class AActor* SpecialHandling(class APawn* Other);//Engine.LiftCenter.SpecialHandling
};
UClass* ALiftCenter::pClassPointer = NULL;

//0x000008 (0x00034C - 0x000344)
//LiftExit[0x026B6E70]
class ALiftExit : public ANavigationPoint
{
public:
	class ALiftCenter*                                 MyLiftCenter;                                     		// 0x000344 (0x0004)              
	unsigned long                                      bExitOnly : 1;                                    		// 0x000348 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LiftExit");
		return pClassPointer;
	};

public:
	bool SuggestMovePreparation(class APawn* Other);//Engine.LiftExit.SuggestMovePreparation
	bool CanBeReachedFromLiftBy(class APawn* Other);//Engine.LiftExit.CanBeReachedFromLiftBy
	void WaitForLift(class APawn* Other);//Engine.LiftExit.WaitForLift
};
UClass* ALiftExit::pClassPointer = NULL;

//0x000008 (0x00034C - 0x000344)
//MantleMarker[0x026B6D40]
class AMantleMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                       		// 0x000344 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MantleMarker");
		return pClassPointer;
	};
};
UClass* AMantleMarker::pClassPointer = NULL;

//0x000000 (0x000344 - 0x000344)
//Objective[0x026B6C10]
class AObjective : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Objective");
		return pClassPointer;
	};
};
UClass* AObjective::pClassPointer = NULL;

//0x000000 (0x000344 - 0x000344)
//PathNode[0x026B6AE0]
class APathNode : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PathNode");
		return pClassPointer;
	};

public:
	struct FString GetDebugAbbrev();//Engine.PathNode.GetDebugAbbrev
};
UClass* APathNode::pClassPointer = NULL;

//0x000008 (0x00034C - 0x000344)
//VolumePathNode[0x026B69B0]
class AVolumePathNode : public APathNode
{
public:
	float                                              StartingRadius;                                   		// 0x000344 (0x0004)              
	float                                              StartingHeight;                                   		// 0x000348 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.VolumePathNode");
		return pClassPointer;
	};
};
UClass* AVolumePathNode::pClassPointer = NULL;

//0x000018 (0x00035C - 0x000344)
//PickupFactory[0x026B6880]
class APickupFactory : public ANavigationPoint
{
public:
	unsigned long                                      bOnlyReplicateHidden : 1;                         		// 0x000344 (0x0004) [0x00000001] 
	unsigned long                                      bPickupHidden : 1;                                		// 0x000344 (0x0004) [0x00000002] 
	unsigned long                                      bPredictRespawns : 1;                             		// 0x000344 (0x0004) [0x00000004] 
	unsigned long                                      bIsSuperItem : 1;                                 		// 0x000344 (0x0004) [0x00000008] 
	float                                              RespawnEffectTime;                                		// 0x000348 (0x0004)              
	float                                              MaxDesireability;                                 		// 0x00034C (0x0004)              
	class UPrimitiveComponent*                         PickupMesh;                                       		// 0x000350 (0x0004)              
	class APickupFactory*                              ReplacementFactory;                               		// 0x000354 (0x0004)              
	class APickupFactory*                              OriginalFactory;                                  		// 0x000358 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PickupFactory");
		return pClassPointer;
	};

public:
	float GetRespawnTime();//Engine.PickupFactory.GetRespawnTime
	void RespawnEffect();//Engine.PickupFactory.RespawnEffect
	void ShutDown();//Engine.PickupFactory.ShutDown
	void PreBeginPlay();//Engine.PickupFactory.PreBeginPlay
	float DetourWeight(class APawn* Other,float PathWeight);//Engine.PickupFactory.DetourWeight
	void SetPickupVisible();//Engine.PickupFactory.SetPickupVisible
	bool CheckForErrors();//Engine.PickupFactory.CheckForErrors
	void SetRespawn();//Engine.PickupFactory.SetRespawn
	bool ReadyToPickup(float MaxWait);//Engine.PickupFactory.ReadyToPickup
	void RecheckValidTouch();//Engine.PickupFactory.RecheckValidTouch
	void GiveTo(class APawn* P);//Engine.PickupFactory.GiveTo
	void SetInitialState();//Engine.PickupFactory.SetInitialState
	void SetPickupHidden();//Engine.PickupFactory.SetPickupHidden
	void StartSleeping();//Engine.PickupFactory.StartSleeping
	bool ShouldRespawn();//Engine.PickupFactory.ShouldRespawn
	void StaticPrecache(class AWorldInfo* W);//Engine.PickupFactory.StaticPrecache
	void Destroyed();//Engine.PickupFactory.Destroyed
	void PickedUpBy(class APawn* P);//Engine.PickupFactory.PickedUpBy
	void Reset();//Engine.PickupFactory.Reset
	void ReplicatedEvent(struct FName VarName);//Engine.PickupFactory.ReplicatedEvent
};
UClass* APickupFactory::pClassPointer = NULL;

//0x000004 (0x000348 - 0x000344)
//PlayerStart[0x026B6750]
class APlayerStart : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x000344 (0x0004) [0x00000001] 
	unsigned long                                      bPrimaryStart : 1;                                		// 0x000344 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlayerStart");
		return pClassPointer;
	};

public:
	void OnToggle(class USeqAct_Toggle* Action);//Engine.PlayerStart.OnToggle
};
UClass* APlayerStart::pClassPointer = NULL;

//0x000004 (0x000348 - 0x000344)
//PortalMarker[0x026B6620]
class APortalMarker : public ANavigationPoint
{
public:
	class APortalTeleporter*                           MyPortal;                                         		// 0x000344 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PortalMarker");
		return pClassPointer;
	};

public:
	bool CanTeleport(class AActor* A);//Engine.PortalMarker.CanTeleport
};
UClass* APortalMarker::pClassPointer = NULL;

//0x00002C (0x000370 - 0x000344)
//Teleporter[0x026B64F0]
class ATeleporter : public ANavigationPoint
{
public:
	struct FString                                     URL;                                              		// 0x000344 (0x000C)              
	struct FName                                       ProductRequired;                                  		// 0x000350 (0x0008)              
	unsigned long                                      bChangesVelocity : 1;                             		// 0x000358 (0x0004) [0x00000001] 
	unsigned long                                      bChangesYaw : 1;                                  		// 0x000358 (0x0004) [0x00000002] 
	unsigned long                                      bReversesX : 1;                                   		// 0x000358 (0x0004) [0x00000004] 
	unsigned long                                      bReversesY : 1;                                   		// 0x000358 (0x0004) [0x00000008] 
	unsigned long                                      bReversesZ : 1;                                   		// 0x000358 (0x0004) [0x00000010] 
	unsigned long                                      bEnabled : 1;                                     		// 0x000358 (0x0004) [0x00000020] 
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x000358 (0x0004) [0x00000040] 
	FVector3                                           TargetVelocity;                                   		// 0x00035C (0x000C)              
	double                                             LastFired;                                        		// 0x000368 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Teleporter");
		return pClassPointer;
	};

public:
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//Engine.Teleporter.Touch
	bool CanTeleport(class AActor* A);//Engine.Teleporter.CanTeleport
	bool Accept(class AActor* Incoming,class AActor* Source);//Engine.Teleporter.Accept
	void PostBeginPlay();//Engine.Teleporter.PostBeginPlay
	void PostTouch(class AActor* Other);//Engine.Teleporter.PostTouch
	void ScriptPostTouchTeleporter(class AActor* Other);//Engine.Teleporter.ScriptPostTouchTeleporter
	class AActor* SpecialHandling(class APawn* Other);//Engine.Teleporter.SpecialHandling
};
UClass* ATeleporter::pClassPointer = NULL;

//0x00000C (0x00026C - 0x000260)
//Note[0x026B63C0]
class ANote : public AActor
{
public:
	struct FString                                     Text;                                             		// 0x000260 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Note");
		return pClassPointer;
	};
};
UClass* ANote::pClassPointer = NULL;

//0x000048 (0x0002A8 - 0x000260)
//PathGraph[0x026B6290]
class APathGraph : public AActor
{
public:
	TArray<class URWTechNode*>                         m_aNodes;                                         		// 0x000260 (0x000C)              
	unsigned char                                      m_PropNameToNodeIndexMap[0x3C];                   		// 0x00026C (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PathGraph");
		return pClassPointer;
	};

public:
	struct FLinearColor ConvertWeightToRGB(float fValue);//Engine.PathGraph.ConvertWeightToRGB
	void ShowLCDebuggingInformation(class UCanvas* pr_Canvas);//Engine.PathGraph.ShowLCDebuggingInformation
};
UClass* APathGraph::pClassPointer = NULL;

//0x00020C (0x00046C - 0x000260)
//Pawn[0x026B6160]
class APawn : public AActor
{
public:
	float                                              MaxStepHeight;                                    		// 0x000260 (0x0004)              
	float                                              MaxJumpHeight;                                    		// 0x000264 (0x0004)              
	float                                              WalkableFloorZ;                                   		// 0x000268 (0x0004)              
	class AController*                                 Controller;                                       		// 0x00026C (0x0004)              
	class APawn*                                       NextPawn;                                         		// 0x000270 (0x0004)              
	double                                             NetRelevancyTime;                                 		// 0x000274 (0x0008)              
	class APlayerController*                           LastRealViewer;                                   		// 0x00027C (0x0004)              
	class AActor*                                      LastViewer;                                       		// 0x000280 (0x0004)              
	unsigned long                                      bUpAndOut : 1;                                    		// 0x000284 (0x0004) [0x00000001] 
	unsigned long                                      bIsWalking : 1;                                   		// 0x000284 (0x0004) [0x00000002] 
	unsigned long                                      bWantsToCrouch : 1;                               		// 0x000284 (0x0004) [0x00000004] 
	unsigned long                                      bIsCrouched : 1;                                  		// 0x000284 (0x0004) [0x00000008] 
	unsigned long                                      bTryToUncrouch : 1;                               		// 0x000284 (0x0004) [0x00000010] 
	unsigned long                                      bCanCrouch : 1;                                   		// 0x000284 (0x0004) [0x00000020] 
	unsigned long                                      bSprintReleased : 1;                              		// 0x000284 (0x0004) [0x00000040] 
	unsigned long                                      bCrawler : 1;                                     		// 0x000284 (0x0004) [0x00000080] 
	unsigned long                                      bReducedSpeed : 1;                                		// 0x000284 (0x0004) [0x00000100] 
	unsigned long                                      bJumpCapable : 1;                                 		// 0x000284 (0x0004) [0x00000200] 
	unsigned long                                      bCanJump : 1;                                     		// 0x000284 (0x0004) [0x00000400] 
	unsigned long                                      bCanWalk : 1;                                     		// 0x000284 (0x0004) [0x00000800] 
	unsigned long                                      bCanSwim : 1;                                     		// 0x000284 (0x0004) [0x00001000] 
	unsigned long                                      bCanFly : 1;                                      		// 0x000284 (0x0004) [0x00002000] 
	unsigned long                                      bCanStrafe : 1;                                   		// 0x000284 (0x0004) [0x00004000] 
	unsigned long                                      bAvoidLedges : 1;                                 		// 0x000284 (0x0004) [0x00008000] 
	unsigned long                                      bStopAtLedges : 1;                                		// 0x000284 (0x0004) [0x00010000] 
	unsigned long                                      bSimulateGravity : 1;                             		// 0x000284 (0x0004) [0x00020000] 
	unsigned long                                      bIgnoreForces : 1;                                		// 0x000284 (0x0004) [0x00040000] 
	unsigned long                                      bCanWalkOffLedges : 1;                            		// 0x000284 (0x0004) [0x00080000] 
	unsigned long                                      bCanBeBaseForPawns : 1;                           		// 0x000284 (0x0004) [0x00100000] 
	unsigned long                                      bSimGravityDisabled : 1;                          		// 0x000284 (0x0004) [0x00200000] 
	unsigned long                                      bDirectHitWall : 1;                               		// 0x000284 (0x0004) [0x00400000] 
	unsigned long                                      bPushesRigidBodies : 1;                           		// 0x000284 (0x0004) [0x00800000] 
	unsigned long                                      bForceFloorCheck : 1;                             		// 0x000284 (0x0004) [0x01000000] 
	unsigned long                                      bForceKeepAnchor : 1;                             		// 0x000284 (0x0004) [0x02000000] 
	unsigned long                                      bCanMantle : 1;                                   		// 0x000284 (0x0004) [0x04000000] 
	unsigned long                                      bCanClimbCeilings : 1;                            		// 0x000284 (0x0004) [0x08000000] 
	unsigned long                                      bCanSwatTurn : 1;                                 		// 0x000284 (0x0004) [0x10000000] 
	unsigned long                                      bCanLeap : 1;                                     		// 0x000284 (0x0004) [0x20000000] 
	unsigned long                                      bCanCoverSlip : 1;                                		// 0x000284 (0x0004) [0x40000000] 
	unsigned long                                      bDisplayPathErrors : 1;                           		// 0x000284 (0x0004) [0x80000000] 
	unsigned long                                      bIsFemale : 1;                                    		// 0x000288 (0x0004) [0x00000001] 
	unsigned long                                      bCanPickupInventory : 1;                          		// 0x000288 (0x0004) [0x00000002] 
	unsigned long                                      bAmbientCreature : 1;                             		// 0x000288 (0x0004) [0x00000004] 
	unsigned long                                      bLOSHearing : 1;                                  		// 0x000288 (0x0004) [0x00000008] 
	unsigned long                                      bMuffledHearing : 1;                              		// 0x000288 (0x0004) [0x00000010] 
	unsigned long                                      bDontPossess : 1;                                 		// 0x000288 (0x0004) [0x00000020] 
	unsigned long                                      bAutoFire : 1;                                    		// 0x000288 (0x0004) [0x00000040] 
	unsigned long                                      bStationary : 1;                                  		// 0x000288 (0x0004) [0x00000080] 
	unsigned long                                      bCachedRelevant : 1;                              		// 0x000288 (0x0004) [0x00000100] 
	unsigned long                                      bSpecialHUD : 1;                                  		// 0x000288 (0x0004) [0x00000200] 
	unsigned long                                      bNoWeaponFiring : 1;                              		// 0x000288 (0x0004) [0x00000400] 
	unsigned long                                      bCanUse : 1;                                      		// 0x000288 (0x0004) [0x00000800] 
	unsigned long                                      bModifyReachSpecCost : 1;                         		// 0x000288 (0x0004) [0x00001000] 
	unsigned long                                      bPathfindsAsVehicle : 1;                          		// 0x000288 (0x0004) [0x00002000] 
	unsigned long                                      bRunPhysicsWithNoController : 1;                  		// 0x000288 (0x0004) [0x00004000] 
	unsigned long                                      bForceMaxAccel : 1;                               		// 0x000288 (0x0004) [0x00008000] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x000288 (0x0004) [0x00010000] 
	unsigned long                                      bForceRegularVelocity : 1;                        		// 0x000288 (0x0004) [0x00020000] 
	unsigned long                                      bPlayedDeath : 1;                                 		// 0x000288 (0x0004) [0x00040000] 
	unsigned long                                      m_bRestartNative : 1;                             		// 0x000288 (0x0004) [0x00080000] 
	float                                              UncrouchTime;                                     		// 0x00028C (0x0004)              
	float                                              CrouchHeight;                                     		// 0x000290 (0x0004)              
	float                                              CrouchRadius;                                     		// 0x000294 (0x0004)              
	int                                                FullHeight;                                       		// 0x000298 (0x0004)              
	float                                              NonPreferredVehiclePathMultiplier;                		// 0x00029C (0x0004)              
	unsigned char                                      PathSearchType;                                   		// 0x0002A0 (0x0001)              PROPERTY: EPathSearchType
	unsigned char                                      RemoteViewPitch;                                  		// 0x0002A1 (0x0001)              PROPERTY: 
	unsigned char                                      FlashCount;                                       		// 0x0002A2 (0x0001)              PROPERTY: 
	unsigned char                                      FiringMode;                                       		// 0x0002A3 (0x0001)              PROPERTY: 
	class UPathConstraint*                             PathConstraintList;                               		// 0x0002A4 (0x0004)              
	class UPathGoalEvaluator*                          PathGoalList;                                     		// 0x0002A8 (0x0004)              
	float                                              DesiredSpeed;                                     		// 0x0002AC (0x0004)              
	float                                              MaxDesiredSpeed;                                  		// 0x0002B0 (0x0004)              
	float                                              HearingThreshold;                                 		// 0x0002B4 (0x0004)              
	float                                              Alertness;                                        		// 0x0002B8 (0x0004)              
	float                                              SightRadius;                                      		// 0x0002BC (0x0004)              
	float                                              PeripheralVision;                                 		// 0x0002C0 (0x0004)              
	float                                              AvgPhysicsTime;                                   		// 0x0002C4 (0x0004)              
	float                                              Mass;                                             		// 0x0002C8 (0x0004)              
	float                                              Buoyancy;                                         		// 0x0002CC (0x0004)              
	float                                              MeleeRange;                                       		// 0x0002D0 (0x0004)              
	class ANavigationPoint*                            Anchor;                                           		// 0x0002D4 (0x0004)              
	class ANavigationPoint*                            LastAnchor;                                       		// 0x0002D8 (0x0004)              
	double                                             FindAnchorFailedTime;                             		// 0x0002DC (0x0008)              
	double                                             LastValidAnchorTime;                              		// 0x0002E4 (0x0008)              
	float                                              DestinationOffset;                                		// 0x0002EC (0x0004)              
	float                                              NextPathRadius;                                   		// 0x0002F0 (0x0004)              
	FVector3                                           SerpentineDir;                                    		// 0x0002F4 (0x000C)              
	float                                              SerpentineDist;                                   		// 0x000300 (0x0004)              
	float                                              SerpentineTime;                                   		// 0x000304 (0x0004)              
	double                                             SpawnTime;                                        		// 0x000308 (0x0008)              
	int                                                MaxPitchLimit;                                    		// 0x000310 (0x0004)              
	float                                              GroundSpeed;                                      		// 0x000314 (0x0004)              
	float                                              WaterSpeed;                                       		// 0x000318 (0x0004)              
	float                                              AirSpeed;                                         		// 0x00031C (0x0004)              
	float                                              AccelRate;                                        		// 0x000320 (0x0004)              
	float                                              JumpZ;                                            		// 0x000324 (0x0004)              
	float                                              OutofWaterZ;                                      		// 0x000328 (0x0004)              
	float                                              MaxOutOfWaterStepHeight;                          		// 0x00032C (0x0004)              
	float                                              AirControl;                                       		// 0x000330 (0x0004)              
	float                                              WalkingPct;                                       		// 0x000334 (0x0004)              
	float                                              CrouchedPct;                                      		// 0x000338 (0x0004)              
	float                                              MaxFallSpeed;                                     		// 0x00033C (0x0004)              
	float                                              AIMaxFallSpeedFactor;                             		// 0x000340 (0x0004)              
	float                                              BaseEyeHeight;                                    		// 0x000344 (0x0004)              
	float                                              EyeHeight;                                        		// 0x000348 (0x0004)              
	FVector3                                           Floor;                                            		// 0x00034C (0x000C)              
	double                                             SplashTime;                                       		// 0x000358 (0x0008)              
	float                                              OldZ;                                             		// 0x000360 (0x0004)              
	int                                                Health;                                           		// 0x000364 (0x0004)              
	int                                                HealthMax;                                        		// 0x000368 (0x0004)              
	double                                             LastPainTime;                                     		// 0x00036C (0x0008)              
	FVector3                                           RMVelocity;                                       		// 0x000374 (0x000C)              
	FVector3                                           noise1spot;                                       		// 0x000380 (0x000C)              
	double                                             noise1time;                                       		// 0x00038C (0x0008)              
	class APawn*                                       noise1other;                                      		// 0x000394 (0x0004)              
	float                                              noise1loudness;                                   		// 0x000398 (0x0004)              
	FVector3                                           noise2spot;                                       		// 0x00039C (0x000C)              
	double                                             noise2time;                                       		// 0x0003A8 (0x0008)              
	class APawn*                                       noise2other;                                      		// 0x0003B0 (0x0004)              
	float                                              noise2loudness;                                   		// 0x0003B4 (0x0004)              
	float                                              SoundDampening;                                   		// 0x0003B8 (0x0004)              
	float                                              DamageScaling;                                    		// 0x0003BC (0x0004)              
	struct FString                                     MenuName;                                         		// 0x0003C0 (0x000C)              
	class UClass*                                      ControllerClass;                                  		// 0x0003CC (0x0004)              
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x0003D0 (0x0004)              
	struct FName                                       LandMovementState;                                		// 0x0003D4 (0x0008)              
	class APlayerStart*                                LastStartSpot;                                    		// 0x0003DC (0x0004)              
	double                                             LastStartTime;                                    		// 0x0003E0 (0x0008)              
	FVector3                                           TakeHitLocation;                                  		// 0x0003E8 (0x000C)              
	class UClass*                                      HitDamageType;                                    		// 0x0003F4 (0x0004)              
	FVector3                                           TearOffMomentum;                                  		// 0x0003F8 (0x000C)              
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x000404 (0x0004)              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x000408 (0x0004)              
	float                                              RBPushRadius;                                     		// 0x00040C (0x0004)              
	float                                              RBPushStrength;                                   		// 0x000410 (0x0004)              
	class AVehicle*                                    DrivenVehicle;                                    		// 0x000414 (0x0004)              
	class AVehicle*                                    m_PassengerVehicle;                               		// 0x000418 (0x0004)              
	float                                              AlwaysRelevantDistanceSquared;                    		// 0x00041C (0x0004)              
	float                                              VehicleCheckRadius;                               		// 0x000420 (0x0004)              
	class AController*                                 LastHitBy;                                        		// 0x000424 (0x0004)              
	float                                              ViewPitchMin;                                     		// 0x000428 (0x0004)              
	float                                              ViewPitchMax;                                     		// 0x00042C (0x0004)              
	int                                                AllowedYawError;                                  		// 0x000430 (0x0004)              
	FVector3                                           FlashLocation;                                    		// 0x000434 (0x000C)              
	FVector3                                           LastFiringFlashLocation;                          		// 0x000440 (0x000C)              
	int                                                ShotCount;                                        		// 0x00044C (0x0004)              
	class UPrimitiveComponent*                         PreRagdollCollisionComponent;                     		// 0x000450 (0x0004)              
	DWORD                                              PhysicsPushBody;                                  		// 0x000454 (0x0004)              
	int                                                FailedLandingCount;                               		// 0x000458 (0x0004)              
	class AActor*                                      HoveredActor;                                     		// 0x00045C (0x0004)              
	int                                                HoverVelocityMin;                                 		// 0x000460 (0x0004)              
	int                                                HoverVelocityMax;                                 		// 0x000464 (0x0004)              
	float                                              m_MaxVelocityInAir;                               		// 0x000468 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Pawn");
		return pClassPointer;
	};

public:
	bool DoJump(bool bUpdating);//Engine.Pawn.DoJump
	bool TouchingWaterVolume();//Engine.Pawn.TouchingWaterVolume
	void ClearPathStep();//Engine.Pawn.ClearPathStep
	void DrawPathStep(class UCanvas* C);//Engine.Pawn.DrawPathStep
	void ClientReStartNative();//Engine.Pawn.ClientReStartNative
	bool CheatGhost();//Engine.Pawn.CheatGhost
	void SpawnedByKismet();//Engine.Pawn.SpawnedByKismet
	bool HealDamage(int Amount,class AController* Healer,class UClass* DamageType);//Engine.Pawn.HealDamage
	float GetCollisionRadius();//Engine.Pawn.GetCollisionRadius
	void ClearConstraints();//Engine.Pawn.ClearConstraints
	bool InCombat();//Engine.Pawn.InCombat
	class ANavigationPoint* GetBestAnchor(class AActor* TestActor,FVector3 TestLocation,bool bStartPoint,bool bOnlyCheckVisible,float* out_Dist);//Engine.Pawn.GetBestAnchor
	void NotifyTeamChanged();//Engine.Pawn.NotifyTeamChanged
	void PreBeginPlay();//Engine.Pawn.PreBeginPlay
	bool RecommendLongRangedAttack();//Engine.Pawn.RecommendLongRangedAttack
	void PossessedBy(class AController* C,bool bVehicleTransition);//Engine.Pawn.PossessedBy
	bool ReachedPoint(FVector3 Point,class AActor* NewAnchor);//Engine.Pawn.ReachedPoint
	void StartFire(unsigned char FireModeNum);//Engine.Pawn.StartFire
	bool CanBeBaseForPawn(class APawn* aPawn);//Engine.Pawn.CanBeBaseForPawn
	FRotator GetViewRotation();//Engine.Pawn.GetViewRotation
	void DrawHUD(class AHUD* H);//Engine.Pawn.DrawHUD
	void ShouldCrouch(bool bCrouch,bool bFromServer);//Engine.Pawn.ShouldCrouch
	FVector3 GetPawnViewLocation();//Engine.Pawn.GetPawnViewLocation
	void PruneDamagedBoneList(TArray<struct FName>* Bones);//Engine.Pawn.PruneDamagedBoneList
	bool BotFire(bool bFinished);//Engine.Pawn.BotFire
	bool SuggestJumpVelocity(FVector3* JumpVelocity,FVector3 Destination,FVector3 Start);//Engine.Pawn.SuggestJumpVelocity
	bool Died(class AController* Killer,class UClass* DamageType,FVector3 HitLocation,int nInventoryItemTypeID);//Engine.Pawn.Died
	void StartCrouch(float HeightAdjust);//Engine.Pawn.StartCrouch
	float RangedAttackTime();//Engine.Pawn.RangedAttackTime
	void ReplicatedEvent(struct FName VarName);//Engine.Pawn.ReplicatedEvent
	class AVehicle* GetVehicleBase();//Engine.Pawn.GetVehicleBase
	void OnGiveInventory(class USeqAct_GiveInventory* inAction);//Engine.Pawn.OnGiveInventory
	void ClientMessage(struct FString S,struct FName Type);//Engine.Pawn.ClientMessage
	void SetWalking(bool bNewIsWalking);//Engine.Pawn.SetWalking
	void UpdateControllerOnPossess(bool bVehicleTransition);//Engine.Pawn.UpdateControllerOnPossess
	void gibbedBy(class AActor* Other);//Engine.Pawn.gibbedBy
	void StopFire(unsigned char FireModeNum);//Engine.Pawn.StopFire
	void EndCrouch(float HeightAdjust);//Engine.Pawn.EndCrouch
	class AController* SetKillInstigator(class AController* InstigatedBy,class UClass* DamageType);//Engine.Pawn.SetKillInstigator
	bool IsValidTargetFor(class AController* C);//Engine.Pawn.IsValidTargetFor
	void SetRemoteViewPitch(int NewRemoteViewPitch);//Engine.Pawn.SetRemoteViewPitch
	class ATeamInfo* GetTeam();//Engine.Pawn.GetTeam
	void FiringModeUpdated(bool bViaReplication);//Engine.Pawn.FiringModeUpdated
	FVector3 GetCollisionExtent();//Engine.Pawn.GetCollisionExtent
	bool InitRagdoll();//Engine.Pawn.InitRagdoll
	void SpawnDefaultController();//Engine.Pawn.SpawnDefaultController
	bool IsCurrentlyCarSurfing();//Engine.Pawn.IsCurrentlyCarSurfing
	void SetMoveTarget(class AActor* NewTarget);//Engine.Pawn.SetMoveTarget
	void PlayerChangedTeam();//Engine.Pawn.PlayerChangedTeam
	void TakeDrowningDamage();//Engine.Pawn.TakeDrowningDamage
	bool ValidAnchor();//Engine.Pawn.ValidAnchor
	void ProcessViewRotation(float DeltaTime,FRotator* out_ViewRotation,FRotator* out_DeltaRot);//Engine.Pawn.ProcessViewRotation
	bool AffectedByHitEffects();//Engine.Pawn.AffectedByHitEffects
	float GetCollisionHeight();//Engine.Pawn.GetCollisionHeight
	void FinishedInterpolation();//Engine.Pawn.FinishedInterpolation
	void ClientSetRotation(FRotator NewRotation);//Engine.Pawn.ClientSetRotation
	void SetFiringMode(unsigned char FiringModeNum);//Engine.Pawn.SetFiringMode
	bool IsSameTeam(class APawn* Other);//Engine.Pawn.IsSameTeam
	bool SpecialMoveTo(class ANavigationPoint* Start,class ANavigationPoint* End,class AActor* Next);//Engine.Pawn.SpecialMoveTo
	float AdjustedStrength();//Engine.Pawn.AdjustedStrength
	void PlayFootStepSound(int FootDown);//Engine.Pawn.PlayFootStepSound
	bool ReachedDestination(class AActor* Goal);//Engine.Pawn.ReachedDestination
	void JumpOutOfWater(FVector3 jumpDir);//Engine.Pawn.JumpOutOfWater
	bool TermRagdoll();//Engine.Pawn.TermRagdoll
	bool CheckWaterJump(FVector3* WallNormal);//Engine.Pawn.CheckWaterJump
	void Reset();//Engine.Pawn.Reset
	void DetachFromController(bool bDestroyController);//Engine.Pawn.DetachFromController
	float GetDamageScaling();//Engine.Pawn.GetDamageScaling
	void OnAssignController(class USeqAct_AssignController* inAction);//Engine.Pawn.OnAssignController
	void JumpOffPawn();//Engine.Pawn.JumpOffPawn
	void OnTeleport(class USeqAct_Teleport* Action);//Engine.Pawn.OnTeleport
	void ClientSetLocation(FVector3 NewLocation,FRotator NewRotation);//Engine.Pawn.ClientSetLocation
	void GetActorEyesViewPoint(FVector3* out_Location,FRotator* out_Rotation);//Engine.Pawn.GetActorEyesViewPoint
	void Suicide();//Engine.Pawn.Suicide
	bool OnSequenceAction(class USequenceAction* Action);//Engine.Pawn.OnSequenceAction
	void Restart();//Engine.Pawn.Restart
	class AActor* GetMoveTarget();//Engine.Pawn.GetMoveTarget
	void SetViewRotation(FRotator NewRotation);//Engine.Pawn.SetViewRotation
	bool EncroachingOn(class AActor* Other);//Engine.Pawn.EncroachingOn
	void FaceRotation(FRotator NewRotation,float DeltaTime);//Engine.Pawn.FaceRotation
	void AddDefaultInventory();//Engine.Pawn.AddDefaultInventory
	void StopDriving(class AVehicle* V);//Engine.Pawn.StopDriving
	int SpecialCostForPath(class UReachSpec* Path);//Engine.Pawn.SpecialCostForPath
	bool IsPlayerPawn();//Engine.Pawn.IsPlayerPawn
	void Destroyed();//Engine.Pawn.Destroyed
	bool NearMoveTarget();//Engine.Pawn.NearMoveTarget
	bool CheatWalk();//Engine.Pawn.CheatWalk
	void DropToGround();//Engine.Pawn.DropToGround
	void ForceCrouch();//Engine.Pawn.ForceCrouch
	void NotifyTakeHit(class AController* InstigatedBy,FVector3 HitLocation,int Damage,class UClass* DamageType,FVector3 Momentum);//Engine.Pawn.NotifyTakeHit
	void PlayDyingSound();//Engine.Pawn.PlayDyingSound
	void PlayHit(float Damage,class AController* InstigatedBy,FVector3 HitLocation,class UClass* DamageType,FVector3 Momentum,struct FTraceHitInfo HitInfo);//Engine.Pawn.PlayHit
	bool InFreeCam();//Engine.Pawn.InFreeCam
	bool TakeRadiusDamageOnBones(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser,TArray<struct FName> Bones);//Engine.Pawn.TakeRadiusDamageOnBones
	void ModifyVelocity(float DeltaTime,FVector3 OldVelocity);//Engine.Pawn.ModifyVelocity
	void IncrementPathChild(int Cnt,class UCanvas* C);//Engine.Pawn.IncrementPathChild
	void AddVelocity(FVector3 NewVelocity,FVector3 HitLocation,class UClass* DamageType,struct FTraceHitInfo HitInfo);//Engine.Pawn.AddVelocity
	bool IsValidEnemyTargetFor(class APlayerReplicationInfo* PRI,bool bNoPRIisEnemy);//Engine.Pawn.IsValidEnemyTargetFor
	void AddGoalEvaluator(class UPathGoalEvaluator* Evaluator);//Engine.Pawn.AddGoalEvaluator
	void SetBaseEyeheight();//Engine.Pawn.SetBaseEyeheight
	void SoakPause();//Engine.Pawn.SoakPause
	float GetDefaultJumpZ();//Engine.Pawn.GetDefaultJumpZ
	bool IsInPain();//Engine.Pawn.IsInPain
	void AddPathConstraint(class UPathConstraint* Constraint);//Engine.Pawn.AddPathConstraint
	void TornOff();//Engine.Pawn.TornOff
	bool TooCloseToAttack(class AActor* Other);//Engine.Pawn.TooCloseToAttack
	void CrushedBy(class APawn* OtherPawn);//Engine.Pawn.CrushedBy
	void Gasp();//Engine.Pawn.Gasp
	void OnSetMaterial(class USeqAct_SetMaterial* Action);//Engine.Pawn.OnSetMaterial
	bool CanAttack(class AActor* Other);//Engine.Pawn.CanAttack
	unsigned char GetTeamNum();//Engine.Pawn.GetTeamNum
	void FellOutOfWorld(class UClass* dmgType);//Engine.Pawn.FellOutOfWorld
	bool IsValidEnemy();//Engine.Pawn.IsValidEnemy
	bool InGodMode();//Engine.Pawn.InGodMode
	bool StopFiring();//Engine.Pawn.StopFiring
	void BaseChange();//Engine.Pawn.BaseChange
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.Pawn.DisplayDebug
	bool WasPlayerPawn();//Engine.Pawn.WasPlayerPawn
	bool IsLocallyControlled();//Engine.Pawn.IsLocallyControlled
	void SetMovementPhysics();//Engine.Pawn.SetMovementPhysics
	void AdjustDamage(int* inDamage,FVector3* Momentum,class AController* InstigatedBy,FVector3 HitLocation,class UClass* DamageType,struct FTraceHitInfo HitInfo);//Engine.Pawn.AdjustDamage
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);//Engine.Pawn.GetDefaultCameraMode
	void KilledBy(class APawn* EventInstigator);//Engine.Pawn.KilledBy
	bool IsInvisible();//Engine.Pawn.IsInvisible
	bool LineOfSightTo(class AActor* Other);//Engine.Pawn.LineOfSightTo
	void RestartPlayer();//Engine.Pawn.RestartPlayer
	void PlayTeleportEffect(bool bOut,bool bSound);//Engine.Pawn.PlayTeleportEffect
	void GetBoundingCylinder(float* CollisionRadius,float* CollisionHeight);//Engine.Pawn.GetBoundingCylinder
	bool CheatFly();//Engine.Pawn.CheatFly
	void DoKismetAttachment(class AActor* Attachment,class USeqAct_AttachToActor* Action);//Engine.Pawn.DoKismetAttachment
	void UnPossessed();//Engine.Pawn.UnPossessed
	void SetPushesRigidBodies(bool NewPush);//Engine.Pawn.SetPushesRigidBodies
	bool NeedToTurn(FVector3 targ);//Engine.Pawn.NeedToTurn
	void ClientRestart();//Engine.Pawn.ClientRestart
	struct FString GetHumanReadableName();//Engine.Pawn.GetHumanReadableName
	bool CanSplash();//Engine.Pawn.CanSplash
	void ReceiveLocalizedMessage(class UClass* Message,int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.Pawn.ReceiveLocalizedMessage
	void PlayDying(class UClass* DamageType,FVector3 HitLoc);//Engine.Pawn.PlayDying
	FRotator GetBaseAimRotation();//Engine.Pawn.GetBaseAimRotation
	bool IsHumanControlled();//Engine.Pawn.IsHumanControlled
	void OutsideWorldBounds();//Engine.Pawn.OutsideWorldBounds
	void TurnOff();//Engine.Pawn.TurnOff
	bool IsFirstPerson();//Engine.Pawn.IsFirstPerson
	void MessagePlayer(struct FString msg);//Engine.Pawn.MessagePlayer
	bool IsStationary();//Engine.Pawn.IsStationary
	bool PoweredUp();//Engine.Pawn.PoweredUp
	void AdjustCameraScale(bool bMoveCameraIn);//Engine.Pawn.AdjustCameraScale
	void SetAnchor(class ANavigationPoint* NewAnchor);//Engine.Pawn.SetAnchor
	bool EffectIsRelevant(FVector3 SpawnLocation,bool bForceDedicated,float CullDistance);//Engine.Pawn.EffectIsRelevant
	bool IsPawnImmobile();//Engine.Pawn.IsPawnImmobile
	void EncroachedBy(class AActor* Other);//Engine.Pawn.EncroachedBy
	void UnCrouch();//Engine.Pawn.UnCrouch
	unsigned char ChooseFireMode();//Engine.Pawn.ChooseFireMode
	void PostBeginPlay();//Engine.Pawn.PostBeginPlay
	void IncrementPathStep(int Cnt,class UCanvas* C);//Engine.Pawn.IncrementPathStep
};
UClass* APawn::pClassPointer = NULL;

//0x000028 (0x000494 - 0x00046C)
//Scout[0x026B6030]
class AScout : public APawn
{
public:
	TArray<struct FPathSizeInfo>                       PathSizes;                                        		// 0x00046C (0x000C)              
	float                                              TestJumpZ;                                        		// 0x000478 (0x0004)              
	float                                              TestGroundSpeed;                                  		// 0x00047C (0x0004)              
	float                                              TestMaxFallSpeed;                                 		// 0x000480 (0x0004)              
	float                                              TestFallSpeed;                                    		// 0x000484 (0x0004)              
	float                                              MaxLandingVelocity;                               		// 0x000488 (0x0004)              
	int                                                MinNumPlayerStarts;                               		// 0x00048C (0x0004)              
	class UClass*                                      DefaultReachSpecClass;                            		// 0x000490 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Scout");
		return pClassPointer;
	};

public:
	void PreBeginPlay();//Engine.Scout.PreBeginPlay
};
UClass* AScout::pClassPointer = NULL;

//0x000090 (0x0004FC - 0x00046C)
//Vehicle[0x026B5F00]
class AVehicle : public APawn
{
public:
	class APawn*                                       Driver;                                           		// 0x00046C (0x0004)              
	class APawn*                                       LastDriver;                                       		// 0x000470 (0x0004)              
	unsigned long                                      bDriving : 1;                                     		// 0x000474 (0x0004) [0x00000001] 
	unsigned long                                      bDriverIsVisible : 1;                             		// 0x000474 (0x0004) [0x00000002] 
	unsigned long                                      bAttachDriver : 1;                                		// 0x000474 (0x0004) [0x00000004] 
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x000474 (0x0004) [0x00000008] 
	unsigned long                                      bSeparateTurretFocus : 1;                         		// 0x000474 (0x0004) [0x00000010] 
	unsigned long                                      bFollowLookDir : 1;                               		// 0x000474 (0x0004) [0x00000020] 
	unsigned long                                      bHasHandbrake : 1;                                		// 0x000474 (0x0004) [0x00000040] 
	unsigned long                                      bScriptedRise : 1;                                		// 0x000474 (0x0004) [0x00000080] 
	unsigned long                                      bAvoidReversing : 1;                              		// 0x000474 (0x0004) [0x00000100] 
	unsigned long                                      bRetryPathfindingWithDriver : 1;                  		// 0x000474 (0x0004) [0x00000200] 
	unsigned long                                      bIgnoreStallZ : 1;                                		// 0x000474 (0x0004) [0x00000400] 
	unsigned long                                      bDoExtraNetRelevancyTraces : 1;                   		// 0x000474 (0x0004) [0x00000800] 
	TArray<FVector3>                                   ExitPositions;                                    		// 0x000478 (0x000C)              
	float                                              ExitRadius;                                       		// 0x000484 (0x0004)              
	FVector3                                           ExitOffset;                                       		// 0x000488 (0x000C)              
	float                                              Steering;                                         		// 0x000494 (0x0004)              
	float                                              Throttle;                                         		// 0x000498 (0x0004)              
	float                                              Rise;                                             		// 0x00049C (0x0004)              
	float                                              Sprint;                                           		// 0x0004A0 (0x0004)              
	FVector3                                           TargetLocationAdjustment;                         		// 0x0004A4 (0x000C)              
	float                                              DriverDamageMult;                                 		// 0x0004B0 (0x0004)              
	float                                              MomentumMult;                                     		// 0x0004B4 (0x0004)              
	class UClass*                                      CrushedDamageType;                                		// 0x0004B8 (0x0004)              
	float                                              MinCrushSpeed;                                    		// 0x0004BC (0x0004)              
	float                                              ForceCrushPenetration;                            		// 0x0004C0 (0x0004)              
	unsigned char                                      StuckCount;                                       		// 0x0004C4 (0x0001)              PROPERTY: 
	unsigned char                                      _0x0004C5[0x3];                                   		// 0x0004C5 (0x0003) MISSED OFFSET
	double                                             ThrottleTime;                                     		// 0x0004C8 (0x0008)              
	double                                             StuckTime;                                        		// 0x0004D0 (0x0008)              
	float                                              OldSteering;                                      		// 0x0004D8 (0x0004)              
	double                                             OnlySteeringStartTime;                            		// 0x0004DC (0x0008)              
	float                                              OldThrottle;                                      		// 0x0004E4 (0x0004)              
	double                                             AIMoveCheckTime;                                  		// 0x0004E8 (0x0008)              
	double                                             VehicleMovingTime;                                		// 0x0004F0 (0x0008)              
	float                                              TurnTime;                                         		// 0x0004F8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Vehicle");
		return pClassPointer;
	};

public:
	bool TryToDrive(class APawn* P);//Engine.Vehicle.TryToDrive
	void ThrowActiveWeapon(class UClass* DamageType);//Engine.Vehicle.ThrowActiveWeapon
	bool Died(class AController* Killer,class UClass* DamageType,FVector3 HitLocation,int nWeaponType);//Engine.Vehicle.Died
	bool FindAutoExit(class APawn* ExitingDriver);//Engine.Vehicle.FindAutoExit
	void PostBeginPlay();//Engine.Vehicle.PostBeginPlay
	void PlayerChangedTeam();//Engine.Vehicle.PlayerChangedTeam
	void Suicide();//Engine.Vehicle.Suicide
	void DriverLeft();//Engine.Vehicle.DriverLeft
	bool CheatGhost();//Engine.Vehicle.CheatGhost
	void SetBaseEyeheight();//Engine.Vehicle.SetBaseEyeheight
	void DetachDriver(class APawn* P);//Engine.Vehicle.DetachDriver
	void Destroyed();//Engine.Vehicle.Destroyed
	void NotifyTeamChanged();//Engine.Vehicle.NotifyTeamChanged
	void DrivingStatusChanged();//Engine.Vehicle.DrivingStatusChanged
	bool EncroachingOn(class AActor* Other);//Engine.Vehicle.EncroachingOn
	void Destroyed_HandleDriver();//Engine.Vehicle.Destroyed_HandleDriver
	bool ContinueOnFoot();//Engine.Vehicle.ContinueOnFoot
	FVector3 GetEntryLocation();//Engine.Vehicle.GetEntryLocation
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.Vehicle.DisplayDebug
	FVector3 GetTargetLocation(class AActor* RequestedBy,bool bRequestAlternateLoc);//Engine.Vehicle.GetTargetLocation
	void SetInputs(float InForward,float InStrafe,float InUp,float InSprint);//Engine.Vehicle.SetInputs
	void PossessedBy(class AController* C,bool bVehicleTransition);//Engine.Vehicle.PossessedBy
	void AdjustDriverDamage(int* Damage,class AController* InstigatedBy,FVector3 HitLocation,FVector3* Momentum,class UClass* DamageType);//Engine.Vehicle.AdjustDriverDamage
	bool PlaceExitingDriver(class APawn* ExitingDriver);//Engine.Vehicle.PlaceExitingDriver
	void ReplicatedEvent(struct FName VarName);//Engine.Vehicle.ReplicatedEvent
	void PlayDying(class UClass* DamageType,FVector3 HitLoc);//Engine.Vehicle.PlayDying
	class AController* GetCollisionDamageInstigator();//Engine.Vehicle.GetCollisionDamageInstigator
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);//Engine.Vehicle.GetDefaultCameraMode
	void DriverDied();//Engine.Vehicle.DriverDied
	class AController* SetKillInstigator(class AController* InstigatedBy,class UClass* DamageType);//Engine.Vehicle.SetKillInstigator
	void EncroachedBy(class AActor* Other);//Engine.Vehicle.EncroachedBy
	void CrushedBy(class APawn* OtherPawn);//Engine.Vehicle.CrushedBy
	void FaceRotation(FRotator NewRotation,float DeltaTime);//Engine.Vehicle.FaceRotation
	void AttachDriver(class APawn* P);//Engine.Vehicle.AttachDriver
	bool TryExitPos(class APawn* ExitingDriver,FVector3 ExitPos,bool bMustFindGround);//Engine.Vehicle.TryExitPos
	void SetDriving(bool B);//Engine.Vehicle.SetDriving
	void HandleDeadVehicleDriver();//Engine.Vehicle.HandleDeadVehicleDriver
	void EntryAnnouncement(class AController* C);//Engine.Vehicle.EntryAnnouncement
	bool CanEnterVehicle(class APawn* P);//Engine.Vehicle.CanEnterVehicle
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//Engine.Vehicle.TakeRadiusDamage
	void DriverRadiusDamage(float DamageAmount,float DamageRadius,class AController* EventInstigator,class UClass* DamageType,float Momentum,FVector3 HitLocation,class AActor* DamageCauser);//Engine.Vehicle.DriverRadiusDamage
	bool CheatWalk();//Engine.Vehicle.CheatWalk
	void NotifyDriverTakeHit(class AController* InstigatedBy,FVector3 HitLocation,int Damage,class UClass* DamageType,FVector3 Momentum);//Engine.Vehicle.NotifyDriverTakeHit
	bool AnySeatAvailable();//Engine.Vehicle.AnySeatAvailable
	bool CheatFly();//Engine.Vehicle.CheatFly
	void UnPossessed();//Engine.Vehicle.UnPossessed
};
UClass* AVehicle::pClassPointer = NULL;

//0x00003C (0x00029C - 0x000260)
//Projectile[0x026B5DD0]
class AProjectile : public AActor
{
public:
	float                                              Speed;                                            		// 0x000260 (0x0004)              
	float                                              MaxSpeed;                                         		// 0x000264 (0x0004)              
	unsigned long                                      bSwitchToZeroCollision : 1;                       		// 0x000268 (0x0004) [0x00000001] 
	unsigned long                                      bBlockedByInstigator : 1;                         		// 0x000268 (0x0004) [0x00000002] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x000268 (0x0004) [0x00000004] 
	unsigned long                                      bRotationFollowsVelocity : 1;                     		// 0x000268 (0x0004) [0x00000008] 
	unsigned long                                      bNotBlockedByShield : 1;                          		// 0x000268 (0x0004) [0x00000010] 
	class AActor*                                      ZeroCollider;                                     		// 0x00026C (0x0004)              
	class UPrimitiveComponent*                         ZeroColliderComponent;                            		// 0x000270 (0x0004)              
	float                                              Damage;                                           		// 0x000274 (0x0004)              
	float                                              DamageRadius;                                     		// 0x000278 (0x0004)              
	float                                              MomentumTransfer;                                 		// 0x00027C (0x0004)              
	class UClass*                                      MyDamageType;                                     		// 0x000280 (0x0004)              
	class USoundCue*                                   SpawnSound;                                       		// 0x000284 (0x0004)              
	class USoundCue*                                   ImpactSound;                                      		// 0x000288 (0x0004)              
	class AController*                                 InstigatorController;                             		// 0x00028C (0x0004)              
	class AActor*                                      ImpactedActor;                                    		// 0x000290 (0x0004)              
	float                                              NetCullDistanceSquared;                           		// 0x000294 (0x0004)              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x000298 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Projectile");
		return pClassPointer;
	};

public:
	unsigned char GetTeamNum();//Engine.Projectile.GetTeamNum
	float GetRange();//Engine.Projectile.GetRange
	float GetTimeToLocation(FVector3 TargetLoc);//Engine.Projectile.GetTimeToLocation
	bool IsStationary();//Engine.Projectile.IsStationary
	void PreBeginPlay();//Engine.Projectile.PreBeginPlay
	void ProjectileHitWall(FVector3 HitNormal,class AActor* Wall,class UPrimitiveComponent* WallComp,class UPhysicalMaterial* HitMaterial);//Engine.Projectile.ProjectileHitWall
	void Init(FVector3 Direction);//Engine.Projectile.Init
	void FellOutOfWorld(class UClass* dmgType);//Engine.Projectile.FellOutOfWorld
	bool CanSplash();//Engine.Projectile.CanSplash
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//Engine.Projectile.Touch
	bool HurtRadius(float DamageAmount,float InDamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,class AActor* IgnoredActor,class AController* InstigatedByController,bool bDoFullDamage);//Engine.Projectile.HurtRadius
	void EncroachedBy(class AActor* Other);//Engine.Projectile.EncroachedBy
	bool EncroachingOn(class AActor* Other);//Engine.Projectile.EncroachingOn
	void Explode(FVector3 HitLocation,FVector3 HitNormal,class AActor* HitActor);//Engine.Projectile.Explode
	void Reset();//Engine.Projectile.Reset
	void PostBeginPlay();//Engine.Projectile.PostBeginPlay
	float StaticGetTimeToLocation(FVector3 TargetLoc,FVector3 StartLoc,class AController* RequestedBy);//Engine.Projectile.StaticGetTimeToLocation
	void ProcessTouch(class AActor* Other,FVector3 HitLocation,FVector3 HitNormal);//Engine.Projectile.ProcessTouch
};
UClass* AProjectile::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//SceneCaptureActor[0x026B5CA0]
class ASceneCaptureActor : public AActor
{
public:
	class USceneCaptureComponent*                      SceneCapture;                                     		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneCaptureActor");
		return pClassPointer;
	};
};
UClass* ASceneCaptureActor::pClassPointer = NULL;

//0x000004 (0x000268 - 0x000264)
//SceneCapture2DActor[0x026B5B70]
class ASceneCapture2DActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x000264 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneCapture2DActor");
		return pClassPointer;
	};
};
UClass* ASceneCapture2DActor::pClassPointer = NULL;

//0x000008 (0x00026C - 0x000264)
//SceneCaptureCubeMapActor[0x026B5A40]
class ASceneCaptureCubeMapActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x000264 (0x0004)              
	class UMaterialInstanceConstant*                   CubeMaterialInst;                                 		// 0x000268 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneCaptureCubeMapActor");
		return pClassPointer;
	};
};
UClass* ASceneCaptureCubeMapActor::pClassPointer = NULL;

//0x000008 (0x00026C - 0x000264)
//SceneCaptureReflectActor[0x026B5910]
class ASceneCaptureReflectActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x000264 (0x0004)              
	class UMaterialInstanceConstant*                   ReflectMaterialInst;                              		// 0x000268 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneCaptureReflectActor");
		return pClassPointer;
	};
};
UClass* ASceneCaptureReflectActor::pClassPointer = NULL;

//0x000000 (0x00026C - 0x00026C)
//SceneCapturePortalActor[0x026B57E0]
class ASceneCapturePortalActor : public ASceneCaptureReflectActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneCapturePortalActor");
		return pClassPointer;
	};
};
UClass* ASceneCapturePortalActor::pClassPointer = NULL;

//0x000014 (0x000280 - 0x00026C)
//PortalTeleporter[0x026B56B0]
class APortalTeleporter : public ASceneCapturePortalActor
{
public:
	class APortalTeleporter*                           SisterPortal;                                     		// 0x00026C (0x0004)              
	int                                                TextureResolutionX;                               		// 0x000270 (0x0004)              
	int                                                TextureResolutionY;                               		// 0x000274 (0x0004)              
	class APortalMarker*                               MyMarker;                                         		// 0x000278 (0x0004)              
	unsigned long                                      bMovablePortal : 1;                               		// 0x00027C (0x0004) [0x00000001] 
	unsigned long                                      bAlwaysTeleportNonPawns : 1;                      		// 0x00027C (0x0004) [0x00000002] 
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x00027C (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PortalTeleporter");
		return pClassPointer;
	};

public:
	bool StopsProjectile(class AProjectile* P);//Engine.PortalTeleporter.StopsProjectile
	FVector3 TransformHitLocation(FVector3 HitLocation);//Engine.PortalTeleporter.TransformHitLocation
	FVector3 TransformVectorDir(FVector3 V);//Engine.PortalTeleporter.TransformVectorDir
	bool TransformActor(class AActor* A);//Engine.PortalTeleporter.TransformActor
	class UTextureRenderTarget2D* CreatePortalTexture();//Engine.PortalTeleporter.CreatePortalTexture
};
UClass* APortalTeleporter::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//StaticMeshActorBase[0x026B5580]
class AStaticMeshActorBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.StaticMeshActorBase");
		return pClassPointer;
	};
};
UClass* AStaticMeshActorBase::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//StaticMeshActor[0x026B5450]
class AStaticMeshActor : public AStaticMeshActorBase
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.StaticMeshActor");
		return pClassPointer;
	};

public:
	void PreBeginPlay();//Engine.StaticMeshActor.PreBeginPlay
};
UClass* AStaticMeshActor::pClassPointer = NULL;

//0x000010 (0x000270 - 0x000260)
//StaticMeshCollectionActor[0x026B5320]
class AStaticMeshCollectionActor : public AStaticMeshActorBase
{
public:
	TArray<class UStaticMeshComponent*>                StaticMeshComponents;                             		// 0x000260 (0x000C)              
	int                                                MaxStaticMeshComponents;                          		// 0x00026C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.StaticMeshCollectionActor");
		return pClassPointer;
	};
};
UClass* AStaticMeshCollectionActor::pClassPointer = NULL;

//0x00000C (0x00026C - 0x000260)
//Trigger[0x026B51F0]
class ATrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                		// 0x000260 (0x0004)              
	unsigned long                                      bRecentlyTriggered : 1;                           		// 0x000264 (0x0004) [0x00000001] 
	float                                              AITriggerDelay;                                   		// 0x000268 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Trigger");
		return pClassPointer;
	};

public:
	void CreateCheckpointRecord(struct FCheckpointRecord* Record);//Engine.Trigger.CreateCheckpointRecord
	void UnTrigger();//Engine.Trigger.UnTrigger
	bool StopsProjectile(class AProjectile* P);//Engine.Trigger.StopsProjectile
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//Engine.Trigger.Touch
	void ApplyCheckpointRecord(struct FCheckpointRecord* Record);//Engine.Trigger.ApplyCheckpointRecord
};
UClass* ATrigger::pClassPointer = NULL;

//0x0000CB (0x000124 - 0x000059)
//cParticleDecalComponent[0x026B50C0]
class UcParticleDecalComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	unsigned long                                      m_bEnabled : 1;                                   		// 0x00005C (0x0004) [0x00000001] 
	unsigned char                                      m_BlendMode;                                      		// 0x000060 (0x0001)              PROPERTY: ParticleDecalMode
	unsigned char                                      m_ProjectionMode;                                 		// 0x000061 (0x0001)              PROPERTY: ParticleDecalProjection
	unsigned char                                      _0x000062[0x2];                                   		// 0x000062 (0x0002) MISSED OFFSET
	float                                              m_OutputScale;                                    		// 0x000064 (0x0004)              
	float                                              m_OutputBias;                                     		// 0x000068 (0x0004)              
	FVector3                                           m_Scale3D;                                        		// 0x00006C (0x000C)              
	FVector3                                           m_Translation;                                    		// 0x000078 (0x000C)              
	FRotator                                           m_Rotation;                                       		// 0x000084 (0x000C)              
	class UTexture*                                    m_Texture;                                        		// 0x000090 (0x0004)              
	float                                              m_CullDistance;                                   		// 0x000094 (0x0004)              
	float                                              m_CullNearDistance;                               		// 0x000098 (0x0004)              
	class ULightComponent*                             m_LightNearReplacement;                           		// 0x00009C (0x0004)              
	FMatrix                                            m_CachedParentToWorld;                            		// 0x0000A0 (0x0040)              
	FMatrix                                            m_LocalToWorld;                                   		// 0x0000E0 (0x0040)              
	DWORD                                              SceneInfo;                                        		// 0x000120 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cParticleDecalComponent");
		return pClassPointer;
	};

public:
	void RecalcLocalToWorld();//Engine.cParticleDecalComponent.RecalcLocalToWorld
};
UClass* UcParticleDecalComponent::pClassPointer = NULL;

//0x00001F (0x000078 - 0x000059)
//HeightFogComponent[0x026B4F90]
class UHeightFogComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                     		// 0x00005C (0x0004) [0x00000001] 
	unsigned long                                      bUseWeatherSystem : 1;                            		// 0x00005C (0x0004) [0x00000002] 
	float                                              Height;                                           		// 0x000060 (0x0004)              
	float                                              Density;                                          		// 0x000064 (0x0004)              
	float                                              LightBrightness;                                  		// 0x000068 (0x0004)              
	DWORD                                              LightColor;                                       		// 0x00006C (0x0004)              
	float                                              ExtinctionDistance;                               		// 0x000070 (0x0004)              
	float                                              StartDistance;                                    		// 0x000074 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.HeightFogComponent");
		return pClassPointer;
	};

public:
	void SetEnabled(bool bSetEnabled);//Engine.HeightFogComponent.SetEnabled
};
UClass* UHeightFogComponent::pClassPointer = NULL;

//0x000123 (0x00017C - 0x000059)
//LightComponent[0x026B4E60]
class ULightComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	DWORD                                              VfTable_IUpdatePropertyInterface;                 		// 0x00005C (0x0004)              
	DWORD                                              SceneInfo;                                        		// 0x000060 (0x0004)              
	unsigned char                                      _0x000064[0xC];                                   		// 0x000064 (0x000C) MISSED OFFSET
	FMatrix                                            WorldToLight;                                     		// 0x000070 (0x0040)              
	FMatrix                                            LightToWorld;                                     		// 0x0000B0 (0x0040)              
	struct FGuid                                       LightGuid;                                        		// 0x0000F0 (0x0010)              
	struct FGuid                                       LightmapGuid;                                     		// 0x000100 (0x0010)              
	float                                              Brightness;                                       		// 0x000110 (0x0004)              
	DWORD                                              LightColor;                                       		// 0x000114 (0x0004)              
	class ULightFunction*                              Function;                                         		// 0x000118 (0x0004)              
	unsigned long                                      bEnabled : 1;                                     		// 0x00011C (0x0004) [0x00000001] 
	unsigned long                                      CastShadows : 1;                                  		// 0x00011C (0x0004) [0x00000002] 
	unsigned long                                      CastStaticShadows : 1;                            		// 0x00011C (0x0004) [0x00000004] 
	unsigned long                                      CastDynamicShadows : 1;                           		// 0x00011C (0x0004) [0x00000008] 
	unsigned long                                      bCastCompositeShadow : 1;                         		// 0x00011C (0x0004) [0x00000010] 
	unsigned long                                      RequireDynamicShadows : 1;                        		// 0x00011C (0x0004) [0x00000020] 
	unsigned long                                      bForceDynamicLight : 1;                           		// 0x00011C (0x0004) [0x00000040] 
	unsigned long                                      UseDirectLightMap : 1;                            		// 0x00011C (0x0004) [0x00000080] 
	unsigned long                                      bHasLightEverBeenBuiltIntoLightMap : 1;           		// 0x00011C (0x0004) [0x00000100] 
	unsigned long                                      bOnlyAffectSameAndSpecifiedLevels : 1;            		// 0x00011C (0x0004) [0x00000200] 
	unsigned long                                      bCanAffectDynamicPrimitivesOutsideDynamicChannel : 1;		// 0x00011C (0x0004) [0x00000400] 
	unsigned long                                      bUseVolumes : 1;                                  		// 0x00011C (0x0004) [0x00000800] 
	unsigned long                                      m_bNightLight : 1;                                		// 0x00011C (0x0004) [0x00001000] 
	unsigned long                                      m_bExcludedFromLightEnvironment : 1;              		// 0x00011C (0x0004) [0x00002000] 
	unsigned long                                      bCooked : 1;                                      		// 0x00011C (0x0004) [0x00004000] 
	unsigned long                                      bUseWeatherSystem : 1;                            		// 0x00011C (0x0004) [0x00008000] 
	float                                              AttenuationBufferFactor;                          		// 0x000120 (0x0004)              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x000124 (0x0004)              
	TArray<struct FName>                               OtherLevelsToAffect;                              		// 0x000128 (0x000C)              
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x000134 (0x0004)              
	TArray<DWORD>                                      InclusionConvexVolumes;                           		// 0x000138 (0x000C)              
	TArray<DWORD>                                      ExclusionConvexVolumes;                           		// 0x000144 (0x000C)              
	unsigned char                                      LightAffectsClassification;                       		// 0x000150 (0x0001)              PROPERTY: ELightAffectsClassification
	unsigned char                                      LightShadowMode;                                  		// 0x000151 (0x0001)              PROPERTY: ELightShadowMode
	unsigned char                                      _0x000152[0x2];                                   		// 0x000152 (0x0002) MISSED OFFSET
	struct FLinearColor                                ModShadowColor;                                   		// 0x000154 (0x0010)              
	float                                              ModShadowFadeoutTime;                             		// 0x000164 (0x0004)              
	float                                              ModShadowFadeoutExponent;                         		// 0x000168 (0x0004)              
	int                                                LightListIndex;                                   		// 0x00016C (0x0004)              
	unsigned char                                      ShadowProjectionTechnique;                        		// 0x000170 (0x0001)              PROPERTY: EShadowProjectionTechnique
	unsigned char                                      ShadowFilterQuality;                              		// 0x000171 (0x0001)              PROPERTY: EShadowFilterQuality
	unsigned char                                      _0x000172[0x2];                                   		// 0x000172 (0x0002) MISSED OFFSET
	int                                                MinShadowResolution;                              		// 0x000174 (0x0004)              
	int                                                MaxShadowResolution;                              		// 0x000178 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LightComponent");
		return pClassPointer;
	};

public:
	FVector3 GetDirection();//Engine.LightComponent.GetDirection
	void SetEnabled(bool bSetEnabled);//Engine.LightComponent.SetEnabled
	void SetLightProperties(float NewBrightness,DWORD NewLightColor,class ULightFunction* NewLightFunction);//Engine.LightComponent.SetLightProperties
	FVector3 GetOrigin();//Engine.LightComponent.GetOrigin
	void OnUpdateProperty(struct FName PropertyName);//Engine.LightComponent.OnUpdateProperty
	void UpdateColorAndBrightness();//Engine.LightComponent.UpdateColorAndBrightness
};
UClass* ULightComponent::pClassPointer = NULL;

//0x000004 (0x000180 - 0x00017C)
//DirectionalLightComponent[0x026B4D30]
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              TraceDistance;                                    		// 0x00017C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DirectionalLightComponent");
		return pClassPointer;
	};
};
UClass* UDirectionalLightComponent::pClassPointer = NULL;

//0x000064 (0x0001E0 - 0x00017C)
//PointLightComponent[0x026B4C00]
class UPointLightComponent : public ULightComponent
{
public:
	float                                              ShadowRadiusMultiplier;                           		// 0x00017C (0x0004)              
	float                                              Radius;                                           		// 0x000180 (0x0004)              
	float                                              FalloffExponent;                                  		// 0x000184 (0x0004)              
	float                                              ShadowFalloffExponent;                            		// 0x000188 (0x0004)              
	float                                              MinShadowFalloffRadius;                           		// 0x00018C (0x0004)              
	FMatrix                                            CachedParentToWorld;                              		// 0x000190 (0x0040)              
	FVector3                                           Translation;                                      		// 0x0001D0 (0x000C)              
	class UDrawLightRadiusComponent*                   PreviewLightRadius;                               		// 0x0001DC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PointLightComponent");
		return pClassPointer;
	};

public:
	void SetTranslation(FVector3 NewTranslation);//Engine.PointLightComponent.SetTranslation
};
UClass* UPointLightComponent::pClassPointer = NULL;

//0x000010 (0x0001F0 - 0x0001E0)
//SpotLightComponent[0x026B4AD0]
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                   		// 0x0001E0 (0x0004)              
	float                                              OuterConeAngle;                                   		// 0x0001E4 (0x0004)              
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x0001E8 (0x0004)              
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x0001EC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpotLightComponent");
		return pClassPointer;
	};
};
UClass* USpotLightComponent::pClassPointer = NULL;

//0x000018 (0x000194 - 0x00017C)
//SkyLightComponent[0x026B49A0]
class USkyLightComponent : public ULightComponent
{
public:
	float                                              LowerBrightness;                                  		// 0x00017C (0x0004)              
	DWORD                                              LowerColor;                                       		// 0x000180 (0x0004)              
	unsigned long                                      m_bGenerateAO : 1;                                		// 0x000184 (0x0004) [0x00000001] 
	unsigned long                                      m_bAOCosineWeighting : 1;                         		// 0x000184 (0x0004) [0x00000002] 
	float                                              m_fAOPower;                                       		// 0x000188 (0x0004)              
	float                                              m_fMinimumAOLevel;                                		// 0x00018C (0x0004)              
	float                                              m_fAOTraceDistance;                               		// 0x000190 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkyLightComponent");
		return pClassPointer;
	};
};
UClass* USkyLightComponent::pClassPointer = NULL;

//0x000098 (0x000214 - 0x00017C)
//SphericalHarmonicLightComponent[0x026B4870]
class USphericalHarmonicLightComponent : public ULightComponent
{
public:
	unsigned char                                      _0x00017C[0x4];                                   		// 0x00017C (0x0004) MISSED OFFSET
	struct FSHVectorRGB                                WorldSpaceIncidentLighting;                       		// 0x000180 (0x0090)              
	unsigned long                                      bRenderBeforeModShadows : 1;                      		// 0x000210 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SphericalHarmonicLightComponent");
		return pClassPointer;
	};
};
UClass* USphericalHarmonicLightComponent::pClassPointer = NULL;

//0x000008 (0x0001E8 - 0x0001E0)
//ArrowComponent[0x026B4740]
class UArrowComponent : public UPrimitiveComponent
{
public:
	DWORD                                              ArrowColor;                                       		// 0x0001E0 (0x0004)              
	float                                              ArrowSize;                                        		// 0x0001E4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ArrowComponent");
		return pClassPointer;
	};
};
UClass* UArrowComponent::pClassPointer = NULL;

//0x00004C (0x00022C - 0x0001E0)
//BrushComponent[0x026B4610]
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                            		// 0x0001E0 (0x0004)              
	struct FKAggregateGeom                             BrushAggGeom;                                     		// 0x0001E4 (0x0034)              
	DWORD                                              BrushPhysDesc;                                    		// 0x000218 (0x0004)              
	struct FKCachedConvexData_Mirror                   CachedPhysBrushData;                              		// 0x00021C (0x000C)              
	int                                                CachedPhysBrushDataVersion;                       		// 0x000228 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.BrushComponent");
		return pClassPointer;
	};
};
UClass* UBrushComponent::pClassPointer = NULL;

//0x000000 (0x0001E0 - 0x0001E0)
//CameraConeComponent[0x026B44E0]
class UCameraConeComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CameraConeComponent");
		return pClassPointer;
	};
};
UClass* UCameraConeComponent::pClassPointer = NULL;

//0x000018 (0x0001F8 - 0x0001E0)
//DrawBoxComponent[0x026B43B0]
class UDrawBoxComponent : public UPrimitiveComponent
{
public:
	DWORD                                              BoxColor;                                         		// 0x0001E0 (0x0004)              
	class UMaterial*                                   BoxMaterial;                                      		// 0x0001E4 (0x0004)              
	FVector3                                           BoxExtent;                                        		// 0x0001E8 (0x000C)              
	unsigned long                                      bDrawWireBox : 1;                                 		// 0x0001F4 (0x0004) [0x00000001] 
	unsigned long                                      bDrawLitBox : 1;                                  		// 0x0001F4 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DrawBoxComponent");
		return pClassPointer;
	};
};
UClass* UDrawBoxComponent::pClassPointer = NULL;

//0x000014 (0x0001F4 - 0x0001E0)
//DrawCapsuleComponent[0x026B4280]
class UDrawCapsuleComponent : public UPrimitiveComponent
{
public:
	DWORD                                              CapsuleColor;                                     		// 0x0001E0 (0x0004)              
	class UMaterial*                                   CapsuleMaterial;                                  		// 0x0001E4 (0x0004)              
	float                                              CapsuleHeight;                                    		// 0x0001E8 (0x0004)              
	float                                              CapsuleRadius;                                    		// 0x0001EC (0x0004)              
	unsigned long                                      bDrawWireCapsule : 1;                             		// 0x0001F0 (0x0004) [0x00000001] 
	unsigned long                                      bDrawLitCapsule : 1;                              		// 0x0001F0 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DrawCapsuleComponent");
		return pClassPointer;
	};
};
UClass* UDrawCapsuleComponent::pClassPointer = NULL;

//0x000010 (0x0001F0 - 0x0001E0)
//DrawConeComponent[0x026B4150]
class UDrawConeComponent : public UPrimitiveComponent
{
public:
	DWORD                                              ConeColor;                                        		// 0x0001E0 (0x0004)              
	float                                              ConeRadius;                                       		// 0x0001E4 (0x0004)              
	float                                              ConeAngle;                                        		// 0x0001E8 (0x0004)              
	int                                                ConeSides;                                        		// 0x0001EC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DrawConeComponent");
		return pClassPointer;
	};
};
UClass* UDrawConeComponent::pClassPointer = NULL;

//0x000000 (0x0001F0 - 0x0001F0)
//DrawLightConeComponent[0x026B4020]
class UDrawLightConeComponent : public UDrawConeComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DrawLightConeComponent");
		return pClassPointer;
	};
};
UClass* UDrawLightConeComponent::pClassPointer = NULL;

//0x000020 (0x000200 - 0x0001E0)
//DrawCylinderComponent[0x026B3EF0]
class UDrawCylinderComponent : public UPrimitiveComponent
{
public:
	DWORD                                              CylinderColor;                                    		// 0x0001E0 (0x0004)              
	class UMaterial*                                   CylinderMaterial;                                 		// 0x0001E4 (0x0004)              
	float                                              CylinderRadius;                                   		// 0x0001E8 (0x0004)              
	float                                              CylinderTopRadius;                                		// 0x0001EC (0x0004)              
	float                                              CylinderHeight;                                   		// 0x0001F0 (0x0004)              
	float                                              CylinderHeightOffset;                             		// 0x0001F4 (0x0004)              
	int                                                CylinderSides;                                    		// 0x0001F8 (0x0004)              
	unsigned long                                      bDrawWireCylinder : 1;                            		// 0x0001FC (0x0004) [0x00000001] 
	unsigned long                                      bDrawLitCylinder : 1;                             		// 0x0001FC (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DrawCylinderComponent");
		return pClassPointer;
	};
};
UClass* UDrawCylinderComponent::pClassPointer = NULL;

//0x000018 (0x0001F8 - 0x0001E0)
//DrawFrustumComponent[0x026B3DC0]
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	DWORD                                              FrustumColor;                                     		// 0x0001E0 (0x0004)              
	float                                              FrustumAngle;                                     		// 0x0001E4 (0x0004)              
	float                                              FrustumAspectRatio;                               		// 0x0001E8 (0x0004)              
	float                                              FrustumStartDist;                                 		// 0x0001EC (0x0004)              
	float                                              FrustumEndDist;                                   		// 0x0001F0 (0x0004)              
	class UTexture*                                    Texture;                                          		// 0x0001F4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DrawFrustumComponent");
		return pClassPointer;
	};
};
UClass* UDrawFrustumComponent::pClassPointer = NULL;

//0x00000C (0x0001EC - 0x0001E0)
//DrawQuadComponent[0x026B3C90]
class UDrawQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture*                                    Texture;                                          		// 0x0001E0 (0x0004)              
	float                                              Width;                                            		// 0x0001E4 (0x0004)              
	float                                              Height;                                           		// 0x0001E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DrawQuadComponent");
		return pClassPointer;
	};
};
UClass* UDrawQuadComponent::pClassPointer = NULL;

//0x000014 (0x0001F4 - 0x0001E0)
//DrawSphereComponent[0x026B3B60]
class UDrawSphereComponent : public UPrimitiveComponent
{
public:
	DWORD                                              SphereColor;                                      		// 0x0001E0 (0x0004)              
	class UMaterial*                                   SphereMaterial;                                   		// 0x0001E4 (0x0004)              
	float                                              SphereRadius;                                     		// 0x0001E8 (0x0004)              
	int                                                SphereSides;                                      		// 0x0001EC (0x0004)              
	unsigned long                                      bDrawWireSphere : 1;                              		// 0x0001F0 (0x0004) [0x00000001] 
	unsigned long                                      bDrawLitSphere : 1;                               		// 0x0001F0 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DrawSphereComponent");
		return pClassPointer;
	};
};
UClass* UDrawSphereComponent::pClassPointer = NULL;

//0x000000 (0x0001F4 - 0x0001F4)
//DrawLightRadiusComponent[0x026B3A30]
class UDrawLightRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DrawLightRadiusComponent");
		return pClassPointer;
	};
};
UClass* UDrawLightRadiusComponent::pClassPointer = NULL;

//0x000000 (0x0001F4 - 0x0001F4)
//DrawSoundRadiusComponent[0x026B3900]
class UDrawSoundRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DrawSoundRadiusComponent");
		return pClassPointer;
	};
};
UClass* UDrawSoundRadiusComponent::pClassPointer = NULL;

//0x000018 (0x0001F8 - 0x0001E0)
//LineBatchComponent[0x026B37D0]
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	DWORD                                              FPrimitiveDrawInterfaceVfTable;                   		// 0x0001E0 (0x0004)              
	DWORD                                              FPrimitiveDrawInterfaceView;                      		// 0x0001E4 (0x0004)              
	TArray<DWORD>                                      BatchedLines;                                     		// 0x0001E8 (0x000C)              
	float                                              DefaultLifeTime;                                  		// 0x0001F4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LineBatchComponent");
		return pClassPointer;
	};
};
UClass* ULineBatchComponent::pClassPointer = NULL;

//0x0002C0 (0x0004B0 - 0x0001F0)
//SkeletalMeshComponent[0x026B36A0]
class USkeletalMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0001F0 (0x0004)              
	class USkeletalMeshComponent*                      AttachedToSkelComponent;                          		// 0x0001F4 (0x0004)              
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x0001F8 (0x0004)              
	class UAnimNode*                                   Animations;                                       		// 0x0001FC (0x0004)              
	TArray<class UAnimNode*>                           AnimTickArray;                                    		// 0x000200 (0x000C)              
	class UAnimNode*                                   m_RootMotionAnimation;                            		// 0x00020C (0x0004)              
	TArray<class UAnimNode*>                           m_aLogicalAnimations;                             		// 0x000210 (0x000C)              
	int                                                m_bSetPhysAssetOnMeshChange;                      		// 0x00021C (0x0004)              
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x000220 (0x0004)              
	class UPhysicsAssetInstance*                       PhysicsAssetInstance;                             		// 0x000224 (0x0004)              
	float                                              PhysicsWeight;                                    		// 0x000228 (0x0004)              
	float                                              GlobalAnimRateScale;                              		// 0x00022C (0x0004)              
	DWORD                                              MeshObject;                                       		// 0x000230 (0x0004)              
	DWORD                                              WireframeColor;                                   		// 0x000234 (0x0004)              
	TArray<FMatrix>                                    SpaceBases;                                       		// 0x000238 (0x000C)              
	TArray<struct FBoneAtom>                           LocalAtoms;                                       		// 0x000244 (0x000C)              
	TArray<unsigned char>                              RequiredBones;                                    		// 0x000250 (0x000C)              
	class USkeletalMeshComponent*                      ParentAnimComponent;                              		// 0x00025C (0x0004)              
	TArray<int>                                        ParentBoneMap;                                    		// 0x000260 (0x000C)              
	TArray<class UAnimSet*>                            AnimSets;                                         		// 0x00026C (0x000C)              
	TArray<class UAnimSet*>                            TemporarySavedAnimSets;                           		// 0x000278 (0x000C)              
	TArray<class UMorphTargetSet*>                     MorphSets;                                        		// 0x000284 (0x000C)              
	TArray<struct FActiveMorph>                        ActiveMorphs;                                     		// 0x000290 (0x000C)              
	TArray<struct FAttachment>                         Attachments;                                      		// 0x00029C (0x000C)              
	TArray<unsigned char>                              SkelControlIndex;                                 		// 0x0002A8 (0x000C)              
	int                                                ForcedLodModel;                                   		// 0x0002B4 (0x0004)              
	int                                                PredictedLODLevel;                                		// 0x0002B8 (0x0004)              
	int                                                OldPredictedLODLevel;                             		// 0x0002BC (0x0004)              
	float                                              MaxDistanceFactor;                                		// 0x0002C0 (0x0004)              
	int                                                bForceWireframe;                                  		// 0x0002C4 (0x0004)              
	int                                                bForceRefpose;                                    		// 0x0002C8 (0x0004)              
	int                                                bOldForceRefPose;                                 		// 0x0002CC (0x0004)              
	unsigned long                                      bNoSkeletonUpdate : 1;                            		// 0x0002D0 (0x0004) [0x00000001] 
	int                                                bForceSkelUpdate;                                 		// 0x0002D4 (0x0004)              
	int                                                bDisplayBones;                                    		// 0x0002D8 (0x0004)              
	int                                                bShowPrePhysBones;                                		// 0x0002DC (0x0004)              
	int                                                bShowSockets;                                     		// 0x0002E0 (0x0004)              
	int                                                bHideSkin;                                        		// 0x0002E4 (0x0004)              
	int                                                bForceRawOffset;                                  		// 0x0002E8 (0x0004)              
	int                                                bIgnoreControllers;                               		// 0x0002EC (0x0004)              
	int                                                bForceScalingControllers;                         		// 0x0002F0 (0x0004)              
	int                                                bTransformFromAnimParent;                         		// 0x0002F4 (0x0004)              
	unsigned long                                      bAnimTreeEnabled : 1;                             		// 0x0002F8 (0x0004) [0x00000001] 
	int                                                TickTag;                                          		// 0x0002FC (0x0004)              
	int                                                CachedAtomsTag;                                   		// 0x000300 (0x0004)              
	int                                                bUseSingleBodyPhysics;                            		// 0x000304 (0x0004)              
	int                                                bRequiredBonesUpToDate;                           		// 0x000308 (0x0004)              
	float                                              MinDistFactorForKinematicUpdate;                  		// 0x00030C (0x0004)              
	struct FName                                       PhysicsBlendZeroDriftBoneName;                    		// 0x000310 (0x0008)              
	int                                                FramesPhysicsAsleep;                              		// 0x000318 (0x0004)              
	int                                                bDisplayTangentSpace;                             		// 0x00031C (0x0004)              
	unsigned long                                      bSkipAllUpdateWhenPhysicsAsleep : 1;              		// 0x000320 (0x0004) [0x00000001] 
	unsigned long                                      bUpdateSkelWhenNotRendered : 1;                   		// 0x000320 (0x0004) [0x00000002] 
	unsigned long                                      bIgnoreControllersWhenNotRendered : 1;            		// 0x000320 (0x0004) [0x00000004] 
	unsigned long                                      bNotUpdatingKinematicDueToDistance : 1;           		// 0x000320 (0x0004) [0x00000008] 
	unsigned long                                      bForceDiscardRootMotion : 1;                      		// 0x000320 (0x0004) [0x00000010] 
	unsigned long                                      bRootMotionModeChangeNotify : 1;                  		// 0x000320 (0x0004) [0x00000020] 
	unsigned long                                      bRootMotionExtractedNotify : 1;                   		// 0x000320 (0x0004) [0x00000040] 
	unsigned long                                      bDisableFaceFXMaterialInstanceCreation : 1;       		// 0x000320 (0x0004) [0x00000080] 
	unsigned long                                      bAnimTreeInitialised : 1;                         		// 0x000320 (0x0004) [0x00000100] 
	unsigned long                                      bHasPhysicsAssetInstance : 1;                     		// 0x000320 (0x0004) [0x00000200] 
	unsigned long                                      bUpdateKinematicBonesFromAnimation : 1;           		// 0x000320 (0x0004) [0x00000400] 
	unsigned long                                      bUpdateJointsFromAnimation : 1;                   		// 0x000320 (0x0004) [0x00000800] 
	unsigned long                                      bSkelCompFixed : 1;                               		// 0x000320 (0x0004) [0x00001000] 
	unsigned long                                      bHasHadPhysicsBlendedIn : 1;                      		// 0x000320 (0x0004) [0x00002000] 
	unsigned long                                      bForceUpdateAttachmentsInTick : 1;                		// 0x000320 (0x0004) [0x00004000] 
	unsigned long                                      bEnableFullAnimWeightBodies : 1;                  		// 0x000320 (0x0004) [0x00008000] 
	unsigned long                                      bPerBoneVolumeEffects : 1;                        		// 0x000320 (0x0004) [0x00010000] 
	unsigned long                                      bSyncActorLocationToRootRigidBody : 1;            		// 0x000320 (0x0004) [0x00020000] 
	unsigned long                                      bUseRawData : 1;                                  		// 0x000320 (0x0004) [0x00040000] 
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x000320 (0x0004) [0x00080000] 
	unsigned long                                      bOverrideAttachmentOwnerVisibility : 1;           		// 0x000320 (0x0004) [0x00100000] 
	unsigned long                                      bPauseAnims : 1;                                  		// 0x000320 (0x0004) [0x00200000] 
	unsigned long                                      bChartDistanceFactor : 1;                         		// 0x000320 (0x0004) [0x00400000] 
	unsigned long                                      bEnableLineCheckWithBounds : 1;                   		// 0x000320 (0x0004) [0x00800000] 
	unsigned long                                      bEnableClothSimulation : 1;                       		// 0x000320 (0x0004) [0x01000000] 
	unsigned long                                      bDisableClothCollision : 1;                       		// 0x000320 (0x0004) [0x02000000] 
	unsigned long                                      bClothFrozen : 1;                                 		// 0x000320 (0x0004) [0x04000000] 
	unsigned long                                      bAutoFreezeClothWhenNotRendered : 1;              		// 0x000320 (0x0004) [0x08000000] 
	unsigned long                                      bClothAwakeOnStartup : 1;                         		// 0x000320 (0x0004) [0x10000000] 
	unsigned long                                      bClothBaseVelClamp : 1;                           		// 0x000320 (0x0004) [0x20000000] 
	unsigned long                                      bAttachClothVertsToBaseBody : 1;                  		// 0x000320 (0x0004) [0x40000000] 
	unsigned long                                      bCacheAnimSequenceNodes : 1;                      		// 0x000320 (0x0004) [0x80000000] 
	unsigned long                                      bForceMeshObjectUpdates : 1;                      		// 0x000324 (0x0004) [0x00000001] 
	unsigned long                                      bNeedsInstanceWeightUpdate : 1;                   		// 0x000324 (0x0004) [0x00000002] 
	unsigned long                                      bAlwaysUseInstanceWeights : 1;                    		// 0x000324 (0x0004) [0x00000004] 
	TArray<struct FBonePair>                           InstanceVertexWeightBones;                        		// 0x000328 (0x000C)              
	FVector3                                           ClothExternalForce;                               		// 0x000334 (0x000C)              
	FVector3                                           ClothWind;                                        		// 0x000340 (0x000C)              
	FVector3                                           ClothBaseVelClampRange;                           		// 0x00034C (0x000C)              
	float                                              ClothBlendWeight;                                 		// 0x000358 (0x0004)              
	DWORD                                              ClothSim;                                         		// 0x00035C (0x0004)              
	int                                                SceneIndex;                                       		// 0x000360 (0x0004)              
	TArray<FVector3>                                   ClothMeshPosData;                                 		// 0x000364 (0x000C)              
	TArray<FVector3>                                   ClothMeshNormalData;                              		// 0x000370 (0x000C)              
	TArray<int>                                        ClothMeshIndexData;                               		// 0x00037C (0x000C)              
	int                                                NumClothMeshVerts;                                		// 0x000388 (0x0004)              
	int                                                NumClothMeshIndices;                              		// 0x00038C (0x0004)              
	TArray<int>                                        ClothMeshParentData;                              		// 0x000390 (0x000C)              
	int                                                NumClothMeshParentIndices;                        		// 0x00039C (0x0004)              
	TArray<FVector3>                                   ClothMeshWeldedPosData;                           		// 0x0003A0 (0x000C)              
	TArray<FVector3>                                   ClothMeshWeldedNormalData;                        		// 0x0003AC (0x000C)              
	TArray<int>                                        ClothMeshWeldedIndexData;                         		// 0x0003B8 (0x000C)              
	int                                                ClothDirtyBufferFlag;                             		// 0x0003C4 (0x0004)              
	unsigned char                                      ClothRBChannel;                                   		// 0x0003C8 (0x0001)              PROPERTY: ERBCollisionChannel
	unsigned char                                      _0x0003C9[0x3];                                   		// 0x0003C9 (0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                ClothRBCollideWithChannels;                       		// 0x0003CC (0x0004)              
	float                                              ClothForceScale;                                  		// 0x0003D0 (0x0004)              
	float                                              ClothImpulseScale;                                		// 0x0003D4 (0x0004)              
	float                                              ClothAttachmentTearFactor;                        		// 0x0003D8 (0x0004)              
	DWORD                                              SoftBodySim;                                      		// 0x0003DC (0x0004)              
	int                                                SoftBodySceneIndex;                               		// 0x0003E0 (0x0004)              
	unsigned long                                      bEnableSoftBodySimulation : 1;                    		// 0x0003E4 (0x0004) [0x00000001] 
	TArray<FVector3>                                   SoftBodyTetraPosData;                             		// 0x0003E8 (0x000C)              
	TArray<int>                                        SoftBodyTetraIndexData;                           		// 0x0003F4 (0x000C)              
	int                                                NumSoftBodyTetraVerts;                            		// 0x000400 (0x0004)              
	int                                                NumSoftBodyTetraIndices;                          		// 0x000404 (0x0004)              
	float                                              SoftBodyImpulseScale;                             		// 0x000408 (0x0004)              
	unsigned long                                      bSoftBodyFrozen : 1;                              		// 0x00040C (0x0004) [0x00000001] 
	unsigned long                                      bAutoFreezeSoftBodyWhenNotRendered : 1;           		// 0x00040C (0x0004) [0x00000002] 
	unsigned long                                      bSoftBodyAwakeOnStartup : 1;                      		// 0x00040C (0x0004) [0x00000004] 
	unsigned char                                      SoftBodyRBChannel;                                		// 0x000410 (0x0001)              PROPERTY: ERBCollisionChannel
	unsigned char                                      _0x000411[0x3];                                   		// 0x000411 (0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                SoftBodyRBCollideWithChannels;                    		// 0x000414 (0x0004)              
	DWORD                                              SoftBodyASVPlane;                                 		// 0x000418 (0x0004)              
	class UMaterial*                                   LimitMaterial;                                    		// 0x00041C (0x0004)              
	struct FBoneAtom                                   RootMotionDelta;                                  		// 0x000420 (0x0030)              
	FVector3                                           RootMotionVelocity;                               		// 0x000450 (0x000C)              
	FVector3                                           RootBoneTranslation;                              		// 0x00045C (0x000C)              
	FVector3                                           RootMotionAccelScale;                             		// 0x000468 (0x000C)              
	FVector3                                           ExtraRootMotionPerSecond;                         		// 0x000474 (0x000C)              
	float                                              ExtraRootMotionDuration;                          		// 0x000480 (0x0004)              
	FVector3                                           RootMotionCosmeticOffset;                         		// 0x000484 (0x000C)              
	unsigned char                                      RootMotionMode;                                   		// 0x000490 (0x0001)              PROPERTY: ERootMotionMode
	unsigned char                                      PreviousRMM;                                      		// 0x000491 (0x0001)              PROPERTY: ERootMotionMode
	unsigned char                                      PendingRMM;                                       		// 0x000492 (0x0001)              PROPERTY: ERootMotionMode
	unsigned char                                      OldPendingRMM;                                    		// 0x000493 (0x0001)              PROPERTY: ERootMotionMode
	int                                                bRMMOneFrameDelay;                                		// 0x000494 (0x0004)              
	unsigned char                                      RootMotionRotationMode;                           		// 0x000498 (0x0001)              PROPERTY: ERootMotionRotationMode
	unsigned char                                      FaceFXBlendMode;                                  		// 0x000499 (0x0001)              PROPERTY: EFaceFXBlendMode
	unsigned char                                      _0x00049A[0x2];                                   		// 0x00049A (0x0002) MISSED OFFSET
	DWORD                                              FaceFXActorInstance;                              		// 0x00049C (0x0004)              
	class UAudioComponent*                             CachedFaceFXAudioComp;                            		// 0x0004A0 (0x0004)              
	TArray<unsigned char>                              BoneVisibility;                                   		// 0x0004A4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkeletalMeshComponent");
		return pClassPointer;
	};

public:
	void SetClothCollisionResponseCoefficient(float ClothCollisionResponseCoefficient);//Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient
	void AddInstanceVertexWeightBoneParented(struct FName BoneName);//Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented
	void SetClothAttachmentResponseCoefficient(float ClothAttachmentResponseCoefficient);//Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient
	float GetClothPressure();//Engine.SkeletalMeshComponent.GetClothPressure
	void SetClothBendingStiffness(float ClothBendingStiffness);//Engine.SkeletalMeshComponent.SetClothBendingStiffness
	void SetClothPressure(float ClothPressure);//Engine.SkeletalMeshComponent.SetClothPressure
	struct FName GetBoneName(int BoneIndex);//Engine.SkeletalMeshComponent.GetBoneName
	void AttachComponentToSocket(class UActorComponent* Component,struct FName SocketName);//Engine.SkeletalMeshComponent.AttachComponentToSocket
	float GetAnimRateByDuration(struct FName AnimSeqName,float Duration);//Engine.SkeletalMeshComponent.GetAnimRateByDuration
	struct FName GetParentBone(struct FName BoneName);//Engine.SkeletalMeshComponent.GetParentBone
	void AttachComponent(class UActorComponent* Component,struct FName BoneName,FVector3 RelativeLocation,FRotator RelativeRotation,FVector3 RelativeScale);//Engine.SkeletalMeshComponent.AttachComponent
	void SetClothFriction(float ClothFriction);//Engine.SkeletalMeshComponent.SetClothFriction
	void SetClothExternalForce(FVector3 InForce);//Engine.SkeletalMeshComponent.SetClothExternalForce
	struct FName FindClosestBone(FVector3 TestLocation,FVector3* BoneLocation,float IgnoreScale);//Engine.SkeletalMeshComponent.FindClosestBone
	class UMorphNodeBase* FindMorphNode(struct FName InNodeName);//Engine.SkeletalMeshComponent.FindMorphNode
	void StopAnim();//Engine.SkeletalMeshComponent.StopAnim
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset,bool bForceReInit);//Engine.SkeletalMeshComponent.SetPhysicsAsset
	void RemoveLogicalAnimation(class UAnimNode* Animation);//Engine.SkeletalMeshComponent.RemoveLogicalAnimation
	void ResetClothVertsToRefPose();//Engine.SkeletalMeshComponent.ResetClothVertsToRefPose
	FMatrix GetBoneMatrix(int BoneIndex);//Engine.SkeletalMeshComponent.GetBoneMatrix
	void SetClothThickness(float ClothThickness);//Engine.SkeletalMeshComponent.SetClothThickness
	void UpdateParentBoneMap();//Engine.SkeletalMeshComponent.UpdateParentBoneMap
	void EnableClothValidBounds(bool IfEnableClothValidBounds);//Engine.SkeletalMeshComponent.EnableClothValidBounds
	void SetParentAnimComponent(class USkeletalMeshComponent* NewParentAnimComp);//Engine.SkeletalMeshComponent.SetParentAnimComponent
	void SetClothDampingCoefficient(float ClothDampingCoefficient);//Engine.SkeletalMeshComponent.SetClothDampingCoefficient
	void SetClothFlags(int ClothFlags);//Engine.SkeletalMeshComponent.SetClothFlags
	void SetClothVelocity(FVector3 VelocityOffSet);//Engine.SkeletalMeshComponent.SetClothVelocity
	void SetClothSleep(bool IfClothSleep);//Engine.SkeletalMeshComponent.SetClothSleep
	void DetachComponent(class UActorComponent* Component);//Engine.SkeletalMeshComponent.DetachComponent
	void SetSkeletalMesh(class USkeletalMesh* NewMesh,bool bKeepSpaceBases);//Engine.SkeletalMeshComponent.SetSkeletalMesh
	void UpdateSoftBodyParams();//Engine.SkeletalMeshComponent.UpdateSoftBodyParams
	void SetClothStretchingStiffness(float ClothStretchingStiffness);//Engine.SkeletalMeshComponent.SetClothStretchingStiffness
	void SetClothSolverIterations(int ClothSolverIterations);//Engine.SkeletalMeshComponent.SetClothSolverIterations
	float GetClothThickness();//Engine.SkeletalMeshComponent.GetClothThickness
	struct FQuat GetBoneQuaternion(struct FName BoneName,int Space);//Engine.SkeletalMeshComponent.GetBoneQuaternion
	void UpdateAnimations();//Engine.SkeletalMeshComponent.UpdateAnimations
	class UMorphTarget* FindMorphTarget(struct FName MorphTargetName);//Engine.SkeletalMeshComponent.FindMorphTarget
	void PlayAnim(struct FName AnimName,float Duration,bool bLoop,bool bRestartIfAlreadyPlaying);//Engine.SkeletalMeshComponent.PlayAnim
	float GetAnimLength(struct FName AnimSeqName);//Engine.SkeletalMeshComponent.GetAnimLength
	void AttachClothToCollidingShapes(bool AttatchTwoWay,bool AttachTearable);//Engine.SkeletalMeshComponent.AttachClothToCollidingShapes
	void ToggleInstanceVertexWeights(bool bEnable);//Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights
	float GetClothSleepLinearVelocity();//Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity
	class URB_BodyInstance* FindBodyInstanceNamed(struct FName BoneName);//Engine.SkeletalMeshComponent.FindBodyInstanceNamed
	void SetEnableClothSimulation(bool bInEnable);//Engine.SkeletalMeshComponent.SetEnableClothSimulation
	void TransformFromBoneSpace(struct FName BoneName,FVector3 InPosition,FRotator InRotation,FVector3* OutPosition,FRotator* OutRotation);//Engine.SkeletalMeshComponent.TransformFromBoneSpace
	void SetClothTearFactor(float ClothTearFactor);//Engine.SkeletalMeshComponent.SetClothTearFactor
	void SetClothFrozen(bool bNewFrozen);//Engine.SkeletalMeshComponent.SetClothFrozen
	int FindInstanceVertexweightBonePair(struct FBonePair Bones);//Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair
	float GetClothAttachmentResponseCoefficient();//Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient
	void ForceSkelUpdate();//Engine.SkeletalMeshComponent.ForceSkelUpdate
	float GetClothAttachmentTearFactor();//Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor
	void SetClothValidBounds(FVector3 ClothValidBoundsMin,FVector3 ClothValidBoundsMax);//Engine.SkeletalMeshComponent.SetClothValidBounds
	float GetClothFriction();//Engine.SkeletalMeshComponent.GetClothFriction
	void UnHideBone(int BoneIndex);//Engine.SkeletalMeshComponent.UnHideBone
	float GetClothBendingStiffness();//Engine.SkeletalMeshComponent.GetClothBendingStiffness
	void UpdateRBBonesFromSpaceBases(bool bMoveUnfixedBodies,bool bTeleport);//Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases
	void SetAnimTreeTemplate(class UAnimTree* NewTemplate);//Engine.SkeletalMeshComponent.SetAnimTreeTemplate
	void SetSoftBodyFrozen(bool bNewFrozen);//Engine.SkeletalMeshComponent.SetSoftBodyFrozen
	void SetAttachClothVertsToBaseBody(bool bAttachVerts);//Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody
	class UAnimSequence* FindAnimSequence(struct FName AnimSeqName);//Engine.SkeletalMeshComponent.FindAnimSequence
	void RestoreSavedAnimSets();//Engine.SkeletalMeshComponent.RestoreSavedAnimSets
	void GetBoneNames(TArray<struct FName>* BoneNames);//Engine.SkeletalMeshComponent.GetBoneNames
	float GetClothCollisionResponseCoefficient();//Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient
	struct FName GetSocketBoneName(struct FName InSocketName);//Engine.SkeletalMeshComponent.GetSocketBoneName
	void SetHasPhysicsAssetInstance(bool bHasInstance);//Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance
	float GetClothStretchingStiffness();//Engine.SkeletalMeshComponent.GetClothStretchingStiffness
	void SetFaceFXRegisterEx(struct FString RegName,unsigned char RegOp,float FirstValue,float FirstInterpDuration,float NextValue,float NextInterpDuration);//Engine.SkeletalMeshComponent.SetFaceFXRegisterEx
	bool GetSocketWorldLocationAndRotation(struct FName InSocketName,FVector3* OutLocation,FRotator* OutRotation);//Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation
	struct FName FindConstraintBoneName(int ConstraintIndex);//Engine.SkeletalMeshComponent.FindConstraintBoneName
	void SaveAnimSets();//Engine.SkeletalMeshComponent.SaveAnimSets
	float GetClothTearFactor();//Engine.SkeletalMeshComponent.GetClothTearFactor
	void UpdateInstanceVertexWeightBones(TArray<struct FBonePair> BonePairs);//Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones
	class USkelControlBase* FindSkelControl(struct FName InControlName);//Engine.SkeletalMeshComponent.FindSkelControl
	bool IsPlayingFaceFXAnim();//Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim
	int MatchRefBone(struct FName BoneName);//Engine.SkeletalMeshComponent.MatchRefBone
	void RemoveInstanceVertexWeightBoneParented(struct FName BoneName);//Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented
	FVector3 GetBoneLocation(struct FName BoneName,int Space);//Engine.SkeletalMeshComponent.GetBoneLocation
	int FindConstraintIndex(struct FName ConstraintName);//Engine.SkeletalMeshComponent.FindConstraintIndex
	void AttachedComponents(class UClass* BaseClass,class UActorComponent** OutComponent);//Engine.SkeletalMeshComponent.AttachedComponents
	void SetForceRefPose(bool bNewForceRefPose);//Engine.SkeletalMeshComponent.SetForceRefPose
	void TransformToBoneSpace(struct FName BoneName,FVector3 InPosition,FRotator InRotation,FVector3* OutPosition,FRotator* OutRotation);//Engine.SkeletalMeshComponent.TransformToBoneSpace
	class UActorComponent* FindComponentAttachedToBone(struct FName InBoneName);//Engine.SkeletalMeshComponent.FindComponentAttachedToBone
	bool IsComponentAttached(class UActorComponent* Component,struct FName BoneName);//Engine.SkeletalMeshComponent.IsComponentAttached
	FVector3 GetBoneAxis(struct FName BoneName,unsigned char Axis);//Engine.SkeletalMeshComponent.GetBoneAxis
	void InitSkelControls();//Engine.SkeletalMeshComponent.InitSkelControls
	class USkeletalMeshSocket* GetSocketByName(struct FName InSocketName);//Engine.SkeletalMeshComponent.GetSocketByName
	void SetFaceFXRegister(struct FString RegName,float RegVal,unsigned char RegOp,float InterpDuration);//Engine.SkeletalMeshComponent.SetFaceFXRegister
	int GetClothSolverIterations();//Engine.SkeletalMeshComponent.GetClothSolverIterations
	bool IsBoneHidden(int BoneIndex);//Engine.SkeletalMeshComponent.IsBoneHidden
	void HideBone(int BoneIndex);//Engine.SkeletalMeshComponent.HideBone
	void UpdateClothParams();//Engine.SkeletalMeshComponent.UpdateClothParams
	int GetClothFlags();//Engine.SkeletalMeshComponent.GetClothFlags
	bool GetBonesWithinRadius(FVector3 Origin,float Radius,int TraceFlags,TArray<struct FName>* out_Bones);//Engine.SkeletalMeshComponent.GetBonesWithinRadius
	void DeclareFaceFXRegister(struct FString RegName);//Engine.SkeletalMeshComponent.DeclareFaceFXRegister
	void SetClothAttachmentTearFactor(float ClothAttachTearFactor);//Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor
	bool PlayFaceFXAnim(class UFaceFXAnimSet* FaceFXAnimSetRef,struct FString AnimName,struct FString GroupName);//Engine.SkeletalMeshComponent.PlayFaceFXAnim
	float GetClothDampingCoefficient();//Engine.SkeletalMeshComponent.GetClothDampingCoefficient
	class UAnimNode* FindAnimNode(struct FName InNodeName);//Engine.SkeletalMeshComponent.FindAnimNode
	void AddLogicalAnimation(class UAnimNode* Animation,bool bRootMotion);//Engine.SkeletalMeshComponent.AddLogicalAnimation
	void SetClothPosition(FVector3 ClothOffSet);//Engine.SkeletalMeshComponent.SetClothPosition
	float GetFaceFXRegister(struct FString RegName);//Engine.SkeletalMeshComponent.GetFaceFXRegister
	void SetClothSleepLinearVelocity(float ClothSleepLinearVelocity);//Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity
	void StopFaceFXAnim();//Engine.SkeletalMeshComponent.StopFaceFXAnim
	void AllAnimNodes(class UClass* BaseClass,class UAnimNode** Node);//Engine.SkeletalMeshComponent.AllAnimNodes
};
UClass* USkeletalMeshComponent::pClassPointer = NULL;

//0x000030 (0x000210 - 0x0001E0)
//ModelComponent[0x026B3570]
class UModelComponent : public UPrimitiveComponent
{
public:
	class UObject*                                     Model;                                            		// 0x0001E0 (0x0004)              
	int                                                ZoneIndex;                                        		// 0x0001E4 (0x0004)              
	int                                                ComponentIndex;                                   		// 0x0001E8 (0x0004)              
	TArray<DWORD>                                      Nodes;                                            		// 0x0001EC (0x000C)              
	TArray<DWORD>                                      Edges;                                            		// 0x0001F8 (0x000C)              
	TArray<DWORD>                                      Elements;                                         		// 0x000204 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ModelComponent");
		return pClassPointer;
	};
};
UClass* UModelComponent::pClassPointer = NULL;

//0x00000C (0x0001EC - 0x0001E0)
//SpriteComponent[0x026B3440]
class USpriteComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                           		// 0x0001E0 (0x0004)              
	unsigned long                                      bIsScreenSizeScaled : 1;                          		// 0x0001E4 (0x0004) [0x00000001] 
	float                                              ScreenSize;                                       		// 0x0001E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpriteComponent");
		return pClassPointer;
	};
};
UClass* USpriteComponent::pClassPointer = NULL;

//0x00002B (0x000084 - 0x000059)
//SceneCaptureComponent[0x026B3310]
class USceneCaptureComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x00005C (0x0004) [0x00000001] 
	unsigned long                                      bEnableFog : 1;                                   		// 0x00005C (0x0004) [0x00000002] 
	unsigned long                                      bSkipUpdateIfOwnerOccluded : 1;                   		// 0x00005C (0x0004) [0x00000004] 
	unsigned long                                      bNeedsSceneUpdate : 1;                            		// 0x00005C (0x0004) [0x00000008] 
	DWORD                                              ClearColor;                                       		// 0x000060 (0x0004)              
	unsigned char                                      ViewMode;                                         		// 0x000064 (0x0001)              PROPERTY: ESceneCaptureViewMode
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	int                                                SceneLOD;                                         		// 0x000068 (0x0004)              
	float                                              FrameRate;                                        		// 0x00006C (0x0004)              
	class UPostProcessChain*                           PostProcess;                                      		// 0x000070 (0x0004)              
	float                                              MaxUpdateDist;                                    		// 0x000074 (0x0004)              
	float                                              MaxStreamingUpdateDist;                           		// 0x000078 (0x0004)              
	DWORD                                              CaptureInfo;                                      		// 0x00007C (0x0004)              
	DWORD                                              ViewState;                                        		// 0x000080 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneCaptureComponent");
		return pClassPointer;
	};

public:
	void SetFrameRate(float NewFrameRate);//Engine.SceneCaptureComponent.SetFrameRate
};
UClass* USceneCaptureComponent::pClassPointer = NULL;

//0x00009C (0x000120 - 0x000084)
//SceneCapture2DComponent[0x026B31E0]
class USceneCapture2DComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x000084 (0x0004)              
	float                                              FieldOfView;                                      		// 0x000088 (0x0004)              
	float                                              NearPlane;                                        		// 0x00008C (0x0004)              
	float                                              FarPlane;                                         		// 0x000090 (0x0004)              
	unsigned long                                      bUpdateMatrices : 1;                              		// 0x000094 (0x0004) [0x00000001] 
	unsigned char                                      _0x000098[0x8];                                   		// 0x000098 (0x0008) MISSED OFFSET
	FMatrix                                            ViewMatrix;                                       		// 0x0000A0 (0x0040)              
	FMatrix                                            ProjMatrix;                                       		// 0x0000E0 (0x0040)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneCapture2DComponent");
		return pClassPointer;
	};

public:
	void SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget,float NewFOV,float NewNearPlane,float NewFarPlane);//Engine.SceneCapture2DComponent.SetCaptureParameters
	void SetView(FVector3 NewLocation,FRotator NewRotation);//Engine.SceneCapture2DComponent.SetView
};
UClass* USceneCapture2DComponent::pClassPointer = NULL;

//0x000018 (0x00009C - 0x000084)
//SceneCaptureCubeMapComponent[0x026B30B0]
class USceneCaptureCubeMapComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                    		// 0x000084 (0x0004)              
	float                                              NearPlane;                                        		// 0x000088 (0x0004)              
	float                                              FarPlane;                                         		// 0x00008C (0x0004)              
	FVector3                                           WorldLocation;                                    		// 0x000090 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneCaptureCubeMapComponent");
		return pClassPointer;
	};
};
UClass* USceneCaptureCubeMapComponent::pClassPointer = NULL;

//0x00000C (0x000090 - 0x000084)
//SceneCapturePortalComponent[0x026B2F80]
class USceneCapturePortalComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x000084 (0x0004)              
	float                                              ScaleFOV;                                         		// 0x000088 (0x0004)              
	class AActor*                                      ViewDestination;                                  		// 0x00008C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneCapturePortalComponent");
		return pClassPointer;
	};

public:
	void SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget,float NewScaleFOV,class AActor* NewViewDest);//Engine.SceneCapturePortalComponent.SetCaptureParameters
};
UClass* USceneCapturePortalComponent::pClassPointer = NULL;

//0x000008 (0x00008C - 0x000084)
//SceneCaptureReflectComponent[0x026B2E50]
class USceneCaptureReflectComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x000084 (0x0004)              
	float                                              ScaleFOV;                                         		// 0x000088 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneCaptureReflectComponent");
		return pClassPointer;
	};
};
UClass* USceneCaptureReflectComponent::pClassPointer = NULL;

//0x000017 (0x000070 - 0x000059)
//WindDirectionalSourceComponent[0x026B2D20]
class UWindDirectionalSourceComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	DWORD                                              SceneProxy;                                       		// 0x00005C (0x0004)              
	float                                              Strength;                                         		// 0x000060 (0x0004)              
	float                                              Phase;                                            		// 0x000064 (0x0004)              
	float                                              Frequency;                                        		// 0x000068 (0x0004)              
	float                                              Speed;                                            		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		return pClassPointer;
	};
};
UClass* UWindDirectionalSourceComponent::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//ActorFactory[0x026B2BF0]
class UActorFactory : public UObject
{
public:
	class UClass*                                      GameplayActorClass;                               		// 0x000040 (0x0004)              
	struct FString                                     MenuName;                                         		// 0x000044 (0x000C)              
	int                                                MenuPriority;                                     		// 0x000050 (0x0004)              
	class UClass*                                      NewActorClass;                                    		// 0x000054 (0x0004)              
	unsigned long                                      bPlaceable : 1;                                   		// 0x000058 (0x0004) [0x00000001] 
	struct FString                                     SpecificGameName;                                 		// 0x00005C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactory");
		return pClassPointer;
	};
};
UClass* UActorFactory::pClassPointer = NULL;

//0x000018 (0x000080 - 0x000068)
//ActorFactoryAI[0x026B2AC0]
class UActorFactoryAI : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x000068 (0x0004)              
	class UClass*                                      PawnClass;                                        		// 0x00006C (0x0004)              
	struct FString                                     PawnName;                                         		// 0x000070 (0x000C)              
	int                                                TeamIndex;                                        		// 0x00007C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryAI");
		return pClassPointer;
	};
};
UClass* UActorFactoryAI::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//ActorFactoryAmbientSound[0x026B2990]
class UActorFactoryAmbientSound : public UActorFactory
{
public:
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryAmbientSound");
		return pClassPointer;
	};
};
UClass* UActorFactoryAmbientSound::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//ActorFactoryAmbientSoundSimple[0x026B2860]
class UActorFactoryAmbientSoundSimple : public UActorFactory
{
public:
	class USoundNodeWave*                              SoundNodeWave;                                    		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundSimple");
		return pClassPointer;
	};
};
UClass* UActorFactoryAmbientSoundSimple::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//ActorFactoryArchetype[0x026B2730]
class UActorFactoryArchetype : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                   		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryArchetype");
		return pClassPointer;
	};
};
UClass* UActorFactoryArchetype::pClassPointer = NULL;

//0x000000 (0x000068 - 0x000068)
//ActorFactoryCoverLink[0x026B2600]
class UActorFactoryCoverLink : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryCoverLink");
		return pClassPointer;
	};
};
UClass* UActorFactoryCoverLink::pClassPointer = NULL;

//0x000015 (0x00007D - 0x000068)
//ActorFactoryDynamicSM[0x026B24D0]
class UActorFactoryDynamicSM : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x000068 (0x0004)              
	FVector3                                           DrawScale3D;                                      		// 0x00006C (0x000C)              
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x000078 (0x0004) [0x00000001] 
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x000078 (0x0004) [0x00000002] 
	unsigned long                                      bUseCompartment : 1;                              		// 0x000078 (0x0004) [0x00000004] 
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x000078 (0x0004) [0x00000008] 
	unsigned char                                      CollisionType;                                    		// 0x00007C (0x0001)              PROPERTY: ECollisionType

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryDynamicSM");
		return pClassPointer;
	};
};
UClass* UActorFactoryDynamicSM::pClassPointer = NULL;

//0x000003 (0x000080 - 0x00007D)
//ActorFactoryMover[0x026B23A0]
class UActorFactoryMover : public UActorFactoryDynamicSM
{
public:
	unsigned char                                      _0x00007D[0x3];                                   		// 0x00007D (0x0003) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryMover");
		return pClassPointer;
	};
};
UClass* UActorFactoryMover::pClassPointer = NULL;

//0x00001C (0x000099 - 0x00007D)
//ActorFactoryRigidBody[0x026B2270]
class UActorFactoryRigidBody : public UActorFactoryDynamicSM
{
public:
	unsigned char                                      _0x00007D[0x3];                                   		// 0x00007D (0x0003) MISSED OFFSET
	unsigned long                                      bStartAwake : 1;                                  		// 0x000080 (0x0004) [0x00000001] 
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x000080 (0x0004) [0x00000002] 
	unsigned long                                      bLocalSpaceInitialVelocity : 1;                   		// 0x000080 (0x0004) [0x00000004] 
	FVector3                                           InitialVelocity;                                  		// 0x000084 (0x000C)              
	class UDistributionVector*                         AdditionalVelocity;                               		// 0x000090 (0x0004)              
	class UDistributionVector*                         InitialAngularVelocity;                           		// 0x000094 (0x0004)              
	unsigned char                                      RBChannel;                                        		// 0x000098 (0x0001)              PROPERTY: ERBCollisionChannel

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryRigidBody");
		return pClassPointer;
	};
};
UClass* UActorFactoryRigidBody::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//ActorFactoryEmitter[0x026B2140]
class UActorFactoryEmitter : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                   		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryEmitter");
		return pClassPointer;
	};
};
UClass* UActorFactoryEmitter::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//ActorFactoryLensFlare[0x026B2010]
class UActorFactoryLensFlare : public UActorFactory
{
public:
	class ULensFlare*                                  LensFlareObject;                                  		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryLensFlare");
		return pClassPointer;
	};
};
UClass* UActorFactoryLensFlare::pClassPointer = NULL;

//0x000000 (0x000068 - 0x000068)
//ActorFactoryLight[0x026B1EE0]
class UActorFactoryLight : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryLight");
		return pClassPointer;
	};
};
UClass* UActorFactoryLight::pClassPointer = NULL;

//0x000000 (0x000068 - 0x000068)
//ActorFactoryPathNode[0x026B1DB0]
class UActorFactoryPathNode : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryPathNode");
		return pClassPointer;
	};
};
UClass* UActorFactoryPathNode::pClassPointer = NULL;

//0x000024 (0x00008C - 0x000068)
//ActorFactoryPhysicsAsset[0x026B1C80]
class UActorFactoryPhysicsAsset : public UActorFactory
{
public:
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x000068 (0x0004)              
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x00006C (0x0004)              
	unsigned long                                      bStartAwake : 1;                                  		// 0x000070 (0x0004) [0x00000001] 
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x000070 (0x0004) [0x00000002] 
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x000070 (0x0004) [0x00000004] 
	unsigned long                                      bUseCompartment : 1;                              		// 0x000070 (0x0004) [0x00000008] 
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x000070 (0x0004) [0x00000010] 
	FVector3                                           InitialVelocity;                                  		// 0x000074 (0x000C)              
	FVector3                                           DrawScale3D;                                      		// 0x000080 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryPhysicsAsset");
		return pClassPointer;
	};
};
UClass* UActorFactoryPhysicsAsset::pClassPointer = NULL;

//0x000000 (0x000068 - 0x000068)
//ActorFactoryPlayerStart[0x026B1B50]
class UActorFactoryPlayerStart : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryPlayerStart");
		return pClassPointer;
	};
};
UClass* UActorFactoryPlayerStart::pClassPointer = NULL;

//0x000010 (0x000078 - 0x000068)
//ActorFactorySkeletalMesh[0x026B1A20]
class UActorFactorySkeletalMesh : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x000068 (0x0004)              
	class UAnimSet*                                    AnimSet;                                          		// 0x00006C (0x0004)              
	struct FName                                       AnimSequenceName;                                 		// 0x000070 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactorySkeletalMesh");
		return pClassPointer;
	};
};
UClass* UActorFactorySkeletalMesh::pClassPointer = NULL;

//0x000010 (0x000078 - 0x000068)
//ActorFactoryStaticMesh[0x026B18F0]
class UActorFactoryStaticMesh : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x000068 (0x0004)              
	FVector3                                           DrawScale3D;                                      		// 0x00006C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryStaticMesh");
		return pClassPointer;
	};
};
UClass* UActorFactoryStaticMesh::pClassPointer = NULL;

//0x000000 (0x000068 - 0x000068)
//ActorFactoryTrigger[0x026B17C0]
class UActorFactoryTrigger : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryTrigger");
		return pClassPointer;
	};
};
UClass* UActorFactoryTrigger::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//ActorFactoryVehicle[0x026B1690]
class UActorFactoryVehicle : public UActorFactory
{
public:
	class UClass*                                      VehicleClass;                                     		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryVehicle");
		return pClassPointer;
	};
};
UClass* UActorFactoryVehicle::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//cActorFactoryPrefab[0x026B1560]
class UcActorFactoryPrefab : public UActorFactory
{
public:
	class UPrefab*                                     PrefabToSpawn;                                    		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cActorFactoryPrefab");
		return pClassPointer;
	};
};
UClass* UcActorFactoryPrefab::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//BookMark[0x026B1430]
class UBookMark : public UObject
{
public:
	FVector3                                           Location;                                         		// 0x000040 (0x000C)              
	FRotator                                           Rotation;                                         		// 0x00004C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.BookMark");
		return pClassPointer;
	};
};
UClass* UBookMark::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//CameraAnim[0x026B1300]
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                		// 0x000040 (0x0004)              
	float                                              AnimLength;                                       		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CameraAnim");
		return pClassPointer;
	};
};
UClass* UCameraAnim::pClassPointer = NULL;

//0x000040 (0x000080 - 0x000040)
//CameraAnimInst[0x026B11D0]
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                          		// 0x000040 (0x0004)              
	class UInterpGroupInst*                            InterpGroupInst;                                  		// 0x000044 (0x0004)              
	float                                              CurTime;                                          		// 0x000048 (0x0004)              
	unsigned long                                      bLooping : 1;                                     		// 0x00004C (0x0004) [0x00000001] 
	unsigned long                                      bFinished : 1;                                    		// 0x00004C (0x0004) [0x00000002] 
	unsigned long                                      bAutoReleaseWhenFinished : 1;                     		// 0x00004C (0x0004) [0x00000004] 
	unsigned long                                      bBlendingIn : 1;                                  		// 0x00004C (0x0004) [0x00000008] 
	unsigned long                                      bBlendingOut : 1;                                 		// 0x00004C (0x0004) [0x00000010] 
	float                                              BlendInTime;                                      		// 0x000050 (0x0004)              
	float                                              BlendOutTime;                                     		// 0x000054 (0x0004)              
	float                                              CurBlendInTime;                                   		// 0x000058 (0x0004)              
	float                                              CurBlendOutTime;                                  		// 0x00005C (0x0004)              
	float                                              PlayRate;                                         		// 0x000060 (0x0004)              
	float                                              BasePlayScale;                                    		// 0x000064 (0x0004)              
	float                                              TransientScaleModifier;                           		// 0x000068 (0x0004)              
	float                                              CurrentBlendWeight;                               		// 0x00006C (0x0004)              
	float                                              RemainingTime;                                    		// 0x000070 (0x0004)              
	class UInterpTrackMove*                            MoveTrack;                                        		// 0x000074 (0x0004)              
	class UInterpTrackInstMove*                        MoveInst;                                         		// 0x000078 (0x0004)              
	class UAnimNodeSequence*                           SourceAnimNode;                                   		// 0x00007C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CameraAnimInst");
		return pClassPointer;
	};

public:
	void Play(class UCameraAnim* Anim,class AActor* CamActor,float InRate,float InScale,float InBlendInTime,float InBlendOutTime,bool bInLoop,bool bRandomStartTime,float Duration);//Engine.CameraAnimInst.Play
	void ApplyTransientScaling(float Scalar);//Engine.CameraAnimInst.ApplyTransientScaling
	void AdvanceAnim(float DeltaTime,bool bJump);//Engine.CameraAnimInst.AdvanceAnim
	void Stop(bool bImmediate);//Engine.CameraAnimInst.Stop
};
UClass* UCameraAnimInst::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//CameraMode[0x026B10A0]
class UCameraMode : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CameraMode");
		return pClassPointer;
	};
};
UClass* UCameraMode::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//CameraModifier[0x026B0F70]
class UCameraModifier : public UObject
{
public:
	unsigned long                                      bDisabled : 1;                                    		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      bPendingDisable : 1;                              		// 0x000040 (0x0004) [0x00000002] 
	unsigned long                                      bDebug : 1;                                       		// 0x000040 (0x0004) [0x00000004] 
	class ACamera*                                     CameraOwner;                                      		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CameraModifier");
		return pClassPointer;
	};
};
UClass* UCameraModifier::pClassPointer = NULL;

//0x000054 (0x000094 - 0x000040)
//Canvas[0x026B0E40]
class UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                             		// 0x000040 (0x0004)              
	float                                              OrgX;                                             		// 0x000044 (0x0004)              
	float                                              OrgY;                                             		// 0x000048 (0x0004)              
	float                                              ClipX;                                            		// 0x00004C (0x0004)              
	float                                              ClipY;                                            		// 0x000050 (0x0004)              
	float                                              CurX;                                             		// 0x000054 (0x0004)              
	float                                              CurY;                                             		// 0x000058 (0x0004)              
	float                                              CurZ;                                             		// 0x00005C (0x0004)              
	float                                              CurYL;                                            		// 0x000060 (0x0004)              
	DWORD                                              DrawColor;                                        		// 0x000064 (0x0004)              
	unsigned long                                      bCenter : 1;                                      		// 0x000068 (0x0004) [0x00000001] 
	unsigned long                                      bNoSmooth : 1;                                    		// 0x000068 (0x0004) [0x00000002] 
	int                                                SizeX;                                            		// 0x00006C (0x0004)              
	int                                                SizeY;                                            		// 0x000070 (0x0004)              
	DWORD                                              Canvas;                                           		// 0x000074 (0x0004)              
	DWORD                                              SceneView;                                        		// 0x000078 (0x0004)              
	unsigned char                                      _0x00007C[0x4];                                   		// 0x00007C (0x0004) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                    		// 0x000080 (0x0010)              
	class UTexture2D*                                  DefaultTexture;                                   		// 0x000090 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Canvas");
		return pClassPointer;
	};

public:
	void DrawTexture(class UTexture2D* Tex,float Scale);//Engine.Canvas.DrawTexture
	void PopTransform();//Engine.Canvas.PopTransform
	void DrawTextClipped(struct FString Text,bool bCheckHotKey,float XScale,float YScale);//Engine.Canvas.DrawTextClipped
	void TextSize(struct FString String,float* XL,float* YL);//Engine.Canvas.TextSize
	void SetClip(float X,float Y);//Engine.Canvas.SetClip
	void Reset(bool bKeepOrigin);//Engine.Canvas.Reset
	void DrawIcon(struct FCanvasIcon Icon,float X,float Y,float Scale);//Engine.Canvas.DrawIcon
	void DrawLine2D(float XL,float YL);//Engine.Canvas.DrawLine2D
	void DrawMaterialTile(class UMaterialInterface* Mat,float XL,float YL,float U,float V,float UL,float VL);//Engine.Canvas.DrawMaterialTile
	void StrLen(struct FString String,float* XL,float* YL);//Engine.Canvas.StrLen
	void DrawTile(class UTexture2D* Tex,float XL,float YL,float U,float V,float UL,float VL);//Engine.Canvas.DrawTile
	void DrawTextureDoubleLine(FVector3 StartPoint,FVector3 EndPoint,float Perc,float Spacing,float Width,DWORD LineColor,DWORD AltLineColor,class UTexture2D* Tex,float U,float V,float UL,float VL);//Engine.Canvas.DrawTextureDoubleLine
	void PushTranslationMatrix(FVector3 TranslationVector);//Engine.Canvas.PushTranslationMatrix
	void DrawRotatedTile(class UTexture2D* Tex,FRotator Rotation,float XL,float YL,float U,float V,float UL,float VL,float AnchorX,float AnchorY);//Engine.Canvas.DrawRotatedTile
	void DrawColorizedTile(class UTexture2D* Tex,float XL,float YL,float U,float V,float UL,float VL,struct FLinearColor LColor);//Engine.Canvas.DrawColorizedTile
	void DrawTextRA(struct FString Text,bool CR);//Engine.Canvas.DrawTextRA
	void DrawTextureLine(FVector3 StartPoint,FVector3 EndPoint,float Perc,float Width,DWORD LineColor,class UTexture2D* LineTexture,float U,float V,float UL,float VL);//Engine.Canvas.DrawTextureLine
	void DrawMaterialTileClipped(class UMaterialInterface* Mat,float XL,float YL,float U,float V,float UL,float VL);//Engine.Canvas.DrawMaterialTileClipped
	void DrawRect(float RectX,float RectY,class UTexture2D* Tex);//Engine.Canvas.DrawRect
	void DrawTileStretched(class UTexture2D* Tex,float Left,float Top,float AWidth,float AHeight,float U,float V,float UL,float VL,struct FLinearColor LDrawColor,bool bStretchHorizontally,bool bStretchVertically,float ScalingFactor);//Engine.Canvas.DrawTileStretched
	void DrawQuad(class UTexture2D* Tex,float XL,float YL,float U1,float v1,float U2,float v2,float U3,float V3,float U4,float V4);//Engine.Canvas.DrawQuad
	void SetPos(float PosX,float PosY);//Engine.Canvas.SetPos
	void SetDrawColor(unsigned char R,unsigned char G,unsigned char B,unsigned char A);//Engine.Canvas.SetDrawColor
	void DrawRotatedMaterialTile(class UMaterialInterface* Mat,FRotator Rotation,float XL,float YL,float U,float V,float UL,float VL,float AnchorX,float AnchorY);//Engine.Canvas.DrawRotatedMaterialTile
	void DrawBox(float Width,float Height);//Engine.Canvas.DrawBox
	void Draw2DLine(float X1,float Y1,float X2,float Y2,DWORD LineColor);//Engine.Canvas.Draw2DLine
	void DrawTileClipped(class UTexture2D* Tex,float XL,float YL,float U,float V,float UL,float VL);//Engine.Canvas.DrawTileClipped
	FVector3 Project(FVector3 Location);//Engine.Canvas.Project
	void SetOrigin(float X,float Y);//Engine.Canvas.SetOrigin
	struct FCanvasIcon MakeIcon(class UTexture2D* Texture,float U,float V,float UL,float VL);//Engine.Canvas.MakeIcon
	struct FFontRenderInfo CreateFontRenderInfo(bool bClipText,bool bEnableShadow,struct FLinearColor GlowColor,FVector2 GlowOuterRadius,FVector2 GlowInnerRadius);//Engine.Canvas.CreateFontRenderInfo
	void DrawText(struct FString Text,bool CR,float XScale,float YScale);//Engine.Canvas.DrawText
	void DrawIconSection(struct FCanvasIcon Icon,float X,float Y,float UStartPct,float VStartPct,float UEndPct,float VEndPct,float Scale);//Engine.Canvas.DrawIconSection
};
UClass* UCanvas::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cBuildManagerBase[0x026B0D10]
class UcBuildManagerBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cBuildManagerBase");
		return pClassPointer;
	};

public:
	void NotifyActorIrrelevant(class AActor* pActor);//Engine.cBuildManagerBase.NotifyActorIrrelevant
	void SetIdleTimeBudget(bool bStreamWithTimeReserve);//Engine.cBuildManagerBase.SetIdleTimeBudget
	void SetIngameTimeBudget(bool bAction);//Engine.cBuildManagerBase.SetIngameTimeBudget
	void SetThumbTimeBudget();//Engine.cBuildManagerBase.SetThumbTimeBudget
};
UClass* UcBuildManagerBase::pClassPointer = NULL;

//0x00002C (0x00006C - 0x000040)
//cConsoleCmdDebugPage[0x026B0BE0]
class UcConsoleCmdDebugPage : public UObject
{
public:
	TArray<struct FtPageItem>                          m_ItemList;                                       		// 0x000040 (0x000C)              
	TArray<class UcDebugPage*>                         m_DebugPageList;                                  		// 0x00004C (0x000C)              
	float                                              m_ItemSpanY;                                      		// 0x000058 (0x0004)              
	int                                                m_CurItemID;                                      		// 0x00005C (0x0004)              
	int                                                m_PageItemNum;                                    		// 0x000060 (0x0004)              
	int                                                m_CursorPos;                                      		// 0x000064 (0x0004)              
	int                                                m_PageItemStart;                                  		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cConsoleCmdDebugPage");
		return pClassPointer;
	};

public:
	int AddItem(struct FString r_ItemName,struct FString r_UsageString,struct FString r_HelpString);//Engine.cConsoleCmdDebugPage.AddItem
	void DrawPage(class UCanvas* Canvas);//Engine.cConsoleCmdDebugPage.DrawPage
	void MoveToPrevItem();//Engine.cConsoleCmdDebugPage.MoveToPrevItem
	void ActivateItem();//Engine.cConsoleCmdDebugPage.ActivateItem
	void MoveToNextItem();//Engine.cConsoleCmdDebugPage.MoveToNextItem
	int Init(class UObject* r_Obj);//Engine.cConsoleCmdDebugPage.Init
	int Clear();//Engine.cConsoleCmdDebugPage.Clear
};
UClass* UcConsoleCmdDebugPage::pClassPointer = NULL;

//0x00003C (0x00007C - 0x000040)
//cConsoleCommand[0x026B0AB0]
class UcConsoleCommand : public UObject
{
public:
	struct FString                                     m_sName;                                          		// 0x000040 (0x000C)              
	struct FString                                     m_sUsage;                                         		// 0x00004C (0x000C)              
	struct FString                                     m_sHelp;                                          		// 0x000058 (0x000C)              
	int                                                m_nFlags;                                         		// 0x000064 (0x0004)              
	class UClass*                                      m_tObjectClass;                                   		// 0x000068 (0x0004)              
	DWORD                                              m_pCommandFunction;                               		// 0x00006C (0x0004)              
	struct FScriptDelegate                             __ExecCommand__Delegate;                          		// 0x000070 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cConsoleCommand");
		return pClassPointer;
	};

public:
	bool ExecCommand_DelegateToCommandPointer(unsigned char eMode,TArray<struct FString> arguments,class UcConsoleCommandManager* manager);//Engine.cConsoleCommand.ExecCommand_DelegateToCommandPointer
	bool ExecCommand(unsigned char eMode,TArray<struct FString> arguments,class UcConsoleCommandManager* manager);//Engine.cConsoleCommand.ExecCommand
};
UClass* UcConsoleCommand::pClassPointer = NULL;

//0x00002C (0x00006C - 0x000040)
//cConsoleCommandManager[0x026B0980]
class UcConsoleCommandManager : public UObject
{
public:
	TArray<class UcConsoleCommand*>                    commandArray;                                     		// 0x000040 (0x000C)              
	class UObject*                                     focusObject;                                      		// 0x00004C (0x0004)              
	int                                                m_callFlags;                                      		// 0x000050 (0x0004)              
	int                                                m_execFlags;                                      		// 0x000054 (0x0004)              
	int                                                m_transmitFlags;                                  		// 0x000058 (0x0004)              
	class UcConsoleCmdDebugPage*                       m_MyDebugPage;                                    		// 0x00005C (0x0004)              
	struct FScriptDelegate                             __ExecCommand__Delegate;                          		// 0x000060 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cConsoleCommandManager");
		return pClassPointer;
	};

public:
	void GetCompletion(TArray<struct FString>* completions,struct FString cmdStart);//Engine.cConsoleCommandManager.GetCompletion
	void Print(struct FString Text);//Engine.cConsoleCommandManager.Print
	void DestroyCommand(struct FString cmdName);//Engine.cConsoleCommandManager.DestroyCommand
	bool ExecCommand(unsigned char eMode,TArray<struct FString> arguments,class UcConsoleCommandManager* manager);//Engine.cConsoleCommandManager.ExecCommand
	class UEngine* GetEngine();//Engine.cConsoleCommandManager.GetEngine
	void SendToAllClients(struct FString arguments);//Engine.cConsoleCommandManager.SendToAllClients
	bool SafeStrToBool(struct FString str,int* bIsSafe);//Engine.cConsoleCommandManager.SafeStrToBool
	int SafeStrToInt(struct FString str,int* bIsSafe);//Engine.cConsoleCommandManager.SafeStrToInt
	void SendToServer(struct FString arguments);//Engine.cConsoleCommandManager.SendToServer
	float SafeStrToFloat(struct FString str,int* bIsSafe);//Engine.cConsoleCommandManager.SafeStrToFloat
	void CreateCommandScript(struct FString cmdName,struct FString cmdUsage,struct FString cmdHelp,class UClass* tObjectClass,int cmdFlags,struct FScriptDelegate cmdDelegate);//Engine.cConsoleCommandManager.CreateCommandScript
	bool LocalExec(struct FString arguments);//Engine.cConsoleCommandManager.LocalExec
};
UClass* UcConsoleCommandManager::pClassPointer = NULL;

//0x000144 (0x000184 - 0x000040)
//cCubicBezierCurve[0x026B0850]
class UcCubicBezierCurve : public UObject
{
public:
	struct FcCubicBezierCurveStruct                    m_Struct;                                         		// 0x000040 (0x0144)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cCubicBezierCurve");
		return pClassPointer;
	};
};
UClass* UcCubicBezierCurve::pClassPointer = NULL;

//0x0000B0 (0x0000F0 - 0x000040)
//cDebugPage[0x026B0720]
class UcDebugPage : public UObject
{
public:
	struct FString                                     m_sPageName;                                      		// 0x000040 (0x000C)              
	struct FString                                     m_sPageCategory;                                  		// 0x00004C (0x000C)              
	unsigned long                                      m_bAutoRegister : 1;                              		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      m_bReferencesGameWorld : 1;                       		// 0x000058 (0x0004) [0x00000002] 
	class UcDebugPageManager*                          m_MyManager;                                      		// 0x00005C (0x0004)              
	DWORD                                              m_pfnTick;                                        		// 0x000060 (0x0004)              
	DWORD                                              m_pfnRender;                                      		// 0x000064 (0x0004)              
	DWORD                                              m_pfnPageUp;                                      		// 0x000068 (0x0004)              
	DWORD                                              m_pfnPageDown;                                    		// 0x00006C (0x0004)              
	DWORD                                              m_pfnPageLeft;                                    		// 0x000070 (0x0004)              
	DWORD                                              m_pfnPageRight;                                   		// 0x000074 (0x0004)              
	DWORD                                              m_pfnPageEnter;                                   		// 0x000078 (0x0004)              
	DWORD                                              m_pfnLostFocus;                                   		// 0x00007C (0x0004)              
	DWORD                                              m_pfnPageRefresh;                                 		// 0x000080 (0x0004)              
	struct FScriptDelegate                             __TickDebugPage__Delegate;                        		// 0x000084 (0x000C)              
	struct FScriptDelegate                             __RenderDebugPage__Delegate;                      		// 0x000090 (0x000C)              
	struct FScriptDelegate                             __DebugPageUp__Delegate;                          		// 0x00009C (0x000C)              
	struct FScriptDelegate                             __DebugPageDown__Delegate;                        		// 0x0000A8 (0x000C)              
	struct FScriptDelegate                             __DebugPageLeft__Delegate;                        		// 0x0000B4 (0x000C)              
	struct FScriptDelegate                             __DebugPageRight__Delegate;                       		// 0x0000C0 (0x000C)              
	struct FScriptDelegate                             __DebugPageEnter__Delegate;                       		// 0x0000CC (0x000C)              
	struct FScriptDelegate                             __LostFocus__Delegate;                            		// 0x0000D8 (0x000C)              
	struct FScriptDelegate                             __DebugPageRefresh__Delegate;                     		// 0x0000E4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cDebugPage");
		return pClassPointer;
	};

public:
	void CallNativeLostFocus();//Engine.cDebugPage.CallNativeLostFocus
	void CallNativePageEnter();//Engine.cDebugPage.CallNativePageEnter
	void SetDebugPageName(struct FString sNewPageName);//Engine.cDebugPage.SetDebugPageName
	void LostFocus();//Engine.cDebugPage.LostFocus
	void CallNativePageRight();//Engine.cDebugPage.CallNativePageRight
	void UnRegisterDebugPage();//Engine.cDebugPage.UnRegisterDebugPage
	void CallNativePageDown();//Engine.cDebugPage.CallNativePageDown
	void DebugPageEnter();//Engine.cDebugPage.DebugPageEnter
	void DebugPageUp();//Engine.cDebugPage.DebugPageUp
	void RegisterDebugPage(class UcDebugPageManager* theManager);//Engine.cDebugPage.RegisterDebugPage
	void CallNativePageUp();//Engine.cDebugPage.CallNativePageUp
	void DebugPageRight();//Engine.cDebugPage.DebugPageRight
	void CallNativeRender(class UCanvas* Canvas);//Engine.cDebugPage.CallNativeRender
	void RenderDebugPage(class UCanvas* Canvas);//Engine.cDebugPage.RenderDebugPage
	void CallNativeTick(float fDeltaTime);//Engine.cDebugPage.CallNativeTick
	struct FString RetDebugPageName();//Engine.cDebugPage.RetDebugPageName
	void UnRegisterDebugPage_native();//Engine.cDebugPage.UnRegisterDebugPage_native
	void DebugPageLeft();//Engine.cDebugPage.DebugPageLeft
	void SetDebugPageCategory(struct FString sNewPageCategory);//Engine.cDebugPage.SetDebugPageCategory
	void DebugPageRefresh();//Engine.cDebugPage.DebugPageRefresh
	struct FString RetDebugPageCategory();//Engine.cDebugPage.RetDebugPageCategory
	void DebugPageDown();//Engine.cDebugPage.DebugPageDown
	void CallNativePageLeft();//Engine.cDebugPage.CallNativePageLeft
	void TickDebugPage(float fDeltaTime);//Engine.cDebugPage.TickDebugPage
	void CallNativePageRefresh();//Engine.cDebugPage.CallNativePageRefresh
};
UClass* UcDebugPage::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cEdgeUserInterface[0x026B05F0]
class UcEdgeUserInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cEdgeUserInterface");
		return pClassPointer;
	};
};
UClass* UcEdgeUserInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cEngineConsoleCommands[0x026B04C0]
class UcEngineConsoleCommands : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cEngineConsoleCommands");
		return pClassPointer;
	};

public:
	void RegisterEngineConsoleCommands_Script(class UcConsoleCommandManager* manager);//Engine.cEngineConsoleCommands.RegisterEngineConsoleCommands_Script
	bool Command_Echo(unsigned char eMode,TArray<struct FString> arguments,class UcConsoleCommandManager* manager);//Engine.cEngineConsoleCommands.Command_Echo
};
UClass* UcEngineConsoleCommands::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cFeatureEmissiveManagerBase[0x026B0390]
class UcFeatureEmissiveManagerBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cFeatureEmissiveManagerBase");
		return pClassPointer;
	};
};
UClass* UcFeatureEmissiveManagerBase::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//CheatManager[0x102DFBC0]
class UCheatManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CheatManager");
		return pClassPointer;
	};

public:
	void AllWeapons();//Engine.CheatManager.AllWeapons
	void TestLevel();//Engine.CheatManager.TestLevel
	void BugIt(struct FString ScreenShotDescription);//Engine.CheatManager.BugIt
	void KillPawns();//Engine.CheatManager.KillPawns
	void ChangeSize(float F);//Engine.CheatManager.ChangeSize
	void Fly();//Engine.CheatManager.Fly
	void EndPath();//Engine.CheatManager.EndPath
	void ViewPlayer(struct FString S);//Engine.CheatManager.ViewPlayer
	void PlayersOnly();//Engine.CheatManager.PlayersOnly
	void RememberSpot();//Engine.CheatManager.RememberSpot
	void StreamLevelIn(struct FName PackageName);//Engine.CheatManager.StreamLevelIn
	void ViewSelf(bool bQuiet);//Engine.CheatManager.ViewSelf
	void SetGravity(float F);//Engine.CheatManager.SetGravity
	void ViewClass(class UClass* aClass);//Engine.CheatManager.ViewClass
	void AllAmmo();//Engine.CheatManager.AllAmmo
	void BugItGoString(struct FString TheLocation,struct FString TheRotation);//Engine.CheatManager.BugItGoString
	void ListDynamicActors();//Engine.CheatManager.ListDynamicActors
	void ViewBot();//Engine.CheatManager.ViewBot
	void StreamLevelOut(struct FName PackageName);//Engine.CheatManager.StreamLevelOut
	void Avatar(struct FName ClassName);//Engine.CheatManager.Avatar
	void BugItGo(float X,float Y,float Z,int Pitch,int Yaw,int Roll);//Engine.CheatManager.BugItGo
	void OnlyLoadLevel(struct FName PackageName);//Engine.CheatManager.OnlyLoadLevel
	void Ghost();//Engine.CheatManager.Ghost
	void SetJumpZ(float F);//Engine.CheatManager.SetJumpZ
	void BugItWorker(FVector3 TheLocation,FRotator TheRotation);//Engine.CheatManager.BugItWorker
	void ViewActor(struct FName actorName);//Engine.CheatManager.ViewActor
	void SetLevelStreamingStatus(struct FName PackageName,bool bShouldBeLoaded,bool bShouldBeVisible);//Engine.CheatManager.SetLevelStreamingStatus
	void ViewFlag();//Engine.CheatManager.ViewFlag
	void KillAll(class UClass* aClass);//Engine.CheatManager.KillAll
	void SloMo(float T);//Engine.CheatManager.SloMo
	void KillAllPawns(class UClass* aClass);//Engine.CheatManager.KillAllPawns
	void God();//Engine.CheatManager.God
	void ToggleDebugCamera();//Engine.CheatManager.ToggleDebugCamera
	FRotator GetFRotatorFromString(struct FString InStr);//Engine.CheatManager.GetFRotatorFromString
	void Walk();//Engine.CheatManager.Walk
	FVector3 GetFVectorFromString(struct FString InStr);//Engine.CheatManager.GetFVectorFromString
	void KillViewedActor();//Engine.CheatManager.KillViewedActor
	void WriteToLog(struct FString Param);//Engine.CheatManager.WriteToLog
	void FreezeFrame(float delay);//Engine.CheatManager.FreezeFrame
	void Loaded();//Engine.CheatManager.Loaded
	void AffectedByHitEffects();//Engine.CheatManager.AffectedByHitEffects
	void SetSpeed(float F);//Engine.CheatManager.SetSpeed
	void Teleport();//Engine.CheatManager.Teleport
};
UClass* UCheatManager::pClassPointer = NULL;

//0x000030 (0x000070 - 0x000040)
//cImporterEdge[0x102DFA90]
class UcImporterEdge : public UObject
{
public:
	class URWTechReachSpec*                            m_pRWTechReachSpec;                               		// 0x000040 (0x0004)              
	TArray<int>                                        LinkEdgeIDs;                                      		// 0x000044 (0x000C)              
	int                                                ParentEdgeID;                                     		// 0x000050 (0x0004)              
	TArray<unsigned char>                              m_aAllowedVehicleTypes;                           		// 0x000054 (0x000C)              
	int                                                ParentJunctionNodeID;                             		// 0x000060 (0x0004)              
	float                                              m_fDelta;                                         		// 0x000064 (0x0004)              
	int                                                m_nRouteCount;                                    		// 0x000068 (0x0004)              
	int                                                m_nInitialRouteCount;                             		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cImporterEdge");
		return pClassPointer;
	};
};
UClass* UcImporterEdge::pClassPointer = NULL;

//0x000070 (0x0000B0 - 0x000040)
//cImporterNode[0x102DF960]
class UcImporterNode : public UObject
{
public:
	class URWTechNode*                                 m_pRWTechNode;                                    		// 0x000040 (0x0004)              
	TArray<float>                                      m_afDistanceToSDNode;                             		// 0x000044 (0x000C)              
	TArray<int>                                        m_anEdgeIndexForSDNode;                           		// 0x000050 (0x000C)              
	int                                                m_NodeState;                                      		// 0x00005C (0x0004)              
	int                                                m_nSearchID;                                      		// 0x000060 (0x0004)              
	float                                              m_fSearchCost;                                    		// 0x000064 (0x0004)              
	float                                              m_fSearchHeuristic;                               		// 0x000068 (0x0004)              
	float                                              m_fCostMultiplier;                                		// 0x00006C (0x0004)              
	float                                              m_fTotalCostEstimate;                             		// 0x000070 (0x0004)              
	class UcImporterNode*                              m_SearchParent;                                   		// 0x000074 (0x0004)              
	class UcImporterNode*                              m_NextOpenList;                                   		// 0x000078 (0x0004)              
	class UcImporterNode*                              m_PreviousOpenList;                               		// 0x00007C (0x0004)              
	class UcImporterNode*                              m_NextPropergateList;                             		// 0x000080 (0x0004)              
	float                                              m_SearchParentToThisNodeCost;                     		// 0x000084 (0x0004)              
	TArray<int>                                        SpawnNodeIDs;                                     		// 0x000088 (0x000C)              
	int                                                ParentJunctionNodeID;                             		// 0x000094 (0x0004)              
	TArray<class URWTechReachSpec*>                    AllowedPathList;                                  		// 0x000098 (0x000C)              
	TArray<struct FArrayOfEdges>                       m_aArchivedPathListStack;                         		// 0x0000A4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cImporterNode");
		return pClassPointer;
	};
};
UClass* UcImporterNode::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//ClipPadEntry[0x102DF700]
class UClipPadEntry : public UObject
{
public:
	struct FString                                     Title;                                            		// 0x000040 (0x000C)              
	struct FString                                     Text;                                             		// 0x00004C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ClipPadEntry");
		return pClassPointer;
	};
};
UClass* UClipPadEntry::pClassPointer = NULL;

//0x00005C (0x00009C - 0x000040)
//CloudSaveSystem[0x102DF5D0]
class UCloudSaveSystem : public UObject
{
public:
	class UCloudSaveSystemKVSInterface*                KeyValueStore;                                    		// 0x000040 (0x0004)              
	unsigned char                                      _0x000044[0x4];                                   		// 0x000044 (0x0004) ALIGNEMENT
	class UCloudSaveSystemDataBlobStoreInterface*      DataBlobStore;                                    		// 0x000048 (0x0004)              
	unsigned char                                      _0x00004C[0x4];                                   		// 0x00004C (0x0004) ALIGNEMENT
	TArray<struct FGetSaveDataCallbackStruct>          OnGetSaveDataCallbacks;                           		// 0x000050 (0x000C)              
	TArray<struct FSetSaveDataCallbackStruct>          OnSetSaveDataCallbacks;                           		// 0x00005C (0x000C)              
	struct FScriptDelegate                             DeleteSaveDataCallback;                           		// 0x000068 (0x000C)              
	int                                                ActiveSlotForDelete;                              		// 0x000074 (0x0004)              
	TArray<struct FSaveSlotOperation>                  ActiveSaveSlotOperations;                         		// 0x000078 (0x000C)              
	struct FScriptDelegate                             __OnGetSaveDataCallback__Delegate;                		// 0x000084 (0x000C)              
	struct FScriptDelegate                             __SaveSystemCallback__Delegate;                   		// 0x000090 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CloudSaveSystem");
		return pClassPointer;
	};

public:
	bool GetNumberOfSaveSlots(int* NumSaveSlots);//Engine.CloudSaveSystem.GetNumberOfSaveSlots
	void SaveSystemCallback(bool bWasSuccessful,int SaveSlot,struct FString Error);//Engine.CloudSaveSystem.SaveSystemCallback
	void SerializeObject(class UObject* ObjectToSerialize,TArray<unsigned char>* Data,int DataVersion);//Engine.CloudSaveSystem.SerializeObject
	void OnSetSaveDataComplete(bool bWasSucessfull,struct FString StorageID,struct FString BlobName,struct FString Error);//Engine.CloudSaveSystem.OnSetSaveDataComplete
	class UObject* DeserializeObject(class UClass* ObjectClass,TArray<unsigned char>* Data,unsigned char VersionSupport,int DataVersion);//Engine.CloudSaveSystem.DeserializeObject
	bool GetKeyValue(int SaveSlot,struct FString KeyName,unsigned char Type,struct FPlatformInterfaceDelegateResult* Value);//Engine.CloudSaveSystem.GetKeyValue
	bool SetKeyValue(int SaveSlot,struct FString KeyName,struct FPlatformInterfaceData* Value);//Engine.CloudSaveSystem.SetKeyValue
	void GetSaveData(int SaveSlot,struct FScriptDelegate OnGetSaveDataCallback);//Engine.CloudSaveSystem.GetSaveData
	void OnGetSaveDataComplete(bool bWasSuccessful,struct FString StorageID,struct FString BlobName,TArray<unsigned char>* DataBlob,struct FString Error);//Engine.CloudSaveSystem.OnGetSaveDataComplete
	bool WriteNumSaveSlots(int NumSaveSlots);//Engine.CloudSaveSystem.WriteNumSaveSlots
	void Init(class UCloudSaveSystemKVSInterface* InKeyValueStore,class UCloudSaveSystemDataBlobStoreInterface* InDataBlobStore,int VersionNumber);//Engine.CloudSaveSystem.Init
	bool InternalSetSaveSlotKeyValues(int SaveSlot,struct FString DataStoreID,struct FString SaveDataBlobName);//Engine.CloudSaveSystem.InternalSetSaveSlotKeyValues
	void OnDeleteSaveDataComplete(bool bWasSucessfull,struct FString StorageID,struct FString BlobName,struct FString Error);//Engine.CloudSaveSystem.OnDeleteSaveDataComplete
	void SetSaveData(int SaveSlot,struct FScriptDelegate InSetSaveDataCallback,TArray<unsigned char>* SaveDataBlob);//Engine.CloudSaveSystem.SetSaveData
	bool AreAnySlotOperationsActive();//Engine.CloudSaveSystem.AreAnySlotOperationsActive
	int DoesSaveSlotKeyValueDataAlreadyExist(struct FString DataStoreID,struct FString DataBlobName);//Engine.CloudSaveSystem.DoesSaveSlotKeyValueDataAlreadyExist
	bool IsDeleteOperationActive();//Engine.CloudSaveSystem.IsDeleteOperationActive
	bool SetSaveSlotKeyValues(struct FString DataStoreID,struct FString SaveDataBlobName,int* SaveSlot);//Engine.CloudSaveSystem.SetSaveSlotKeyValues
	bool GetDataStoreIDAndBlobNameForSaveSlot(int SaveSlot,struct FString* DataStoreID,struct FString* DataBlobName);//Engine.CloudSaveSystem.GetDataStoreIDAndBlobNameForSaveSlot
	void OnGetSaveDataCallback(bool bWasSuccessful,int SaveSlot,TArray<unsigned char>* DataBlob,struct FString Error);//Engine.CloudSaveSystem.OnGetSaveDataCallback
	bool DeleteSaveData(int SaveSlot,struct FScriptDelegate InDeleteSaveDataCallback);//Engine.CloudSaveSystem.DeleteSaveData
	bool IsOperationActiveForSlot(int SlotIndex);//Engine.CloudSaveSystem.IsOperationActiveForSlot
};
UClass* UCloudSaveSystem::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//cMemDbgPageWin32[0x102DF4A0]
class UcMemDbgPageWin32 : public UObject
{
public:
	class UcDebugPage*                                 m_DebugPage;                                      		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cMemDbgPageWin32");
		return pClassPointer;
	};
};
UClass* UcMemDbgPageWin32::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//CodecMovie[0x102DF370]
class UCodecMovie : public UObject
{
public:
	float                                              PlaybackDuration;                                 		// 0x000040 (0x0004)              
	float                                              Volume;                                           		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CodecMovie");
		return pClassPointer;
	};
};
UClass* UCodecMovie::pClassPointer = NULL;

//0x000004 (0x00004C - 0x000048)
//CodecMovieFallback[0x102DF110]
class UCodecMovieFallback : public UCodecMovie
{
public:
	float                                              CurrentTime;                                      		// 0x000048 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CodecMovieFallback");
		return pClassPointer;
	};
};
UClass* UCodecMovieFallback::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//CurveEdPresetCurve[0x102DEFE0]
class UCurveEdPresetCurve : public UObject
{
public:
	struct FString                                     CurveName;                                        		// 0x000040 (0x000C)              
	TArray<struct FPresetGeneratedPoint>               Points;                                           		// 0x00004C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CurveEdPresetCurve");
		return pClassPointer;
	};
};
UClass* UCurveEdPresetCurve::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//CustomPropertyItemHandler[0x102DEEB0]
class UCustomPropertyItemHandler : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CustomPropertyItemHandler");
		return pClassPointer;
	};
};
UClass* UCustomPropertyItemHandler::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cWeatherManagerBase[0x102DED80]
class UcWeatherManagerBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cWeatherManagerBase");
		return pClassPointer;
	};
};
UClass* UcWeatherManagerBase::pClassPointer = NULL;

//0x000050 (0x000090 - 0x000040)
//DamageType[0x102DEC50]
class UDamageType : public UObject
{
public:
	struct FString                                     DeathString;                                      		// 0x000040 (0x000C)              
	struct FString                                     FemaleSuicide;                                    		// 0x00004C (0x000C)              
	struct FString                                     MaleSuicide;                                      		// 0x000058 (0x000C)              
	unsigned long                                      bArmorStops : 1;                                  		// 0x000064 (0x0004) [0x00000001] 
	unsigned long                                      bAlwaysGibs : 1;                                  		// 0x000064 (0x0004) [0x00000002] 
	unsigned long                                      bNeverGibs : 1;                                   		// 0x000064 (0x0004) [0x00000004] 
	unsigned long                                      bLocationalHit : 1;                               		// 0x000064 (0x0004) [0x00000008] 
	unsigned long                                      bCausesBlood : 1;                                 		// 0x000064 (0x0004) [0x00000010] 
	unsigned long                                      bCausesBloodSplatterDecals : 1;                   		// 0x000064 (0x0004) [0x00000020] 
	unsigned long                                      bKUseOwnDeathVel : 1;                             		// 0x000064 (0x0004) [0x00000040] 
	unsigned long                                      bCausedByWorld : 1;                               		// 0x000064 (0x0004) [0x00000080] 
	unsigned long                                      bExtraMomentumZ : 1;                              		// 0x000064 (0x0004) [0x00000100] 
	unsigned long                                      bIgnoreDriverDamageMult : 1;                      		// 0x000064 (0x0004) [0x00000200] 
	unsigned long                                      bDontHurtInstigator : 1;                          		// 0x000064 (0x0004) [0x00000400] 
	unsigned long                                      bKRadialImpulse : 1;                              		// 0x000064 (0x0004) [0x00000800] 
	unsigned long                                      bRadialDamageVelChange : 1;                       		// 0x000064 (0x0004) [0x00001000] 
	float                                              GibModifier;                                      		// 0x000068 (0x0004)              
	float                                              KDamageImpulse;                                   		// 0x00006C (0x0004)              
	float                                              KDeathVel;                                        		// 0x000070 (0x0004)              
	float                                              KDeathUpKick;                                     		// 0x000074 (0x0004)              
	float                                              KImpulseRadius;                                   		// 0x000078 (0x0004)              
	float                                              RadialDamageImpulse;                              		// 0x00007C (0x0004)              
	float                                              VehicleDamageScaling;                             		// 0x000080 (0x0004)              
	float                                              VehicleMomentumScaling;                           		// 0x000084 (0x0004)              
	class UForceFeedbackWaveform*                      DamagedFFWaveform;                                		// 0x000088 (0x0004)              
	class UForceFeedbackWaveform*                      KilledFFWaveform;                                 		// 0x00008C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DamageType");
		return pClassPointer;
	};

public:
	struct FString DeathMessage(class APlayerReplicationInfo* Killer,class APlayerReplicationInfo* Victim);//Engine.DamageType.DeathMessage
	struct FString SuicideMessage(class APlayerReplicationInfo* Victim);//Engine.DamageType.SuicideMessage
	float VehicleDamageScalingFor(class AVehicle* V);//Engine.DamageType.VehicleDamageScalingFor
};
UClass* UDamageType::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//DmgType_Fell[0x102DEB20]
class UDmgType_Fell : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DmgType_Fell");
		return pClassPointer;
	};
};
UClass* UDmgType_Fell::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//KillZDamageType[0x102DE9F0]
class UKillZDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.KillZDamageType");
		return pClassPointer;
	};
};
UClass* UKillZDamageType::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//DebugManager[0x102DE8C0]
class UDebugManager : public UObject
{
public:
	int                                                FirstColoredMip;                                  		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DebugManager");
		return pClassPointer;
	};
};
UClass* UDebugManager::pClassPointer = NULL;

//0x000004 (0x000058 - 0x000054)
//DistributionFloatConstant[0x102DE790]
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                         		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionFloatConstant");
		return pClassPointer;
	};
};
UClass* UDistributionFloatConstant::pClassPointer = NULL;

//0x000019 (0x000071 - 0x000058)
//DistributionFloatParameterBase[0x102DE660]
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x000058 (0x0008)              
	float                                              MinInput;                                         		// 0x000060 (0x0004)              
	float                                              MaxInput;                                         		// 0x000064 (0x0004)              
	float                                              MinOutput;                                        		// 0x000068 (0x0004)              
	float                                              MaxOutput;                                        		// 0x00006C (0x0004)              
	unsigned char                                      ParamMode;                                        		// 0x000070 (0x0001)              PROPERTY: DistributionParamMode

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		return pClassPointer;
	};
};
UClass* UDistributionFloatParameterBase::pClassPointer = NULL;

//0x000010 (0x000064 - 0x000054)
//DistributionFloatConstantCurve[0x102DE530]
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                    		// 0x000054 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		return pClassPointer;
	};
};
UClass* UDistributionFloatConstantCurve::pClassPointer = NULL;

//0x000008 (0x00005C - 0x000054)
//DistributionFloatUniform[0x102DE400]
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                              		// 0x000054 (0x0004)              
	float                                              Max;                                              		// 0x000058 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionFloatUniform");
		return pClassPointer;
	};
};
UClass* UDistributionFloatUniform::pClassPointer = NULL;

//0x000010 (0x000064 - 0x000054)
//DistributionFloatUniformCurve[0x102DE2D0]
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                    		// 0x000054 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		return pClassPointer;
	};
};
UClass* UDistributionFloatUniformCurve::pClassPointer = NULL;

//0x000011 (0x000065 - 0x000054)
//DistributionVectorConstant[0x102DE1A0]
class UDistributionVectorConstant : public UDistributionVector
{
public:
	FVector3                                           Constant;                                         		// 0x000054 (0x000C)              
	unsigned long                                      bLockAxes : 1;                                    		// 0x000060 (0x0004) [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x000064 (0x0001)              PROPERTY: EDistributionVectorLockFlags

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionVectorConstant");
		return pClassPointer;
	};
};
UClass* UDistributionVectorConstant::pClassPointer = NULL;

//0x00003E (0x0000A3 - 0x000065)
//DistributionVectorParameterBase[0x102DE070]
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	struct FName                                       ParameterName;                                    		// 0x000068 (0x0008)              
	FVector3                                           MinInput;                                         		// 0x000070 (0x000C)              
	FVector3                                           MaxInput;                                         		// 0x00007C (0x000C)              
	FVector3                                           MinOutput;                                        		// 0x000088 (0x000C)              
	FVector3                                           MaxOutput;                                        		// 0x000094 (0x000C)              
	unsigned char                                      ParamModes[0x3];                                  		// 0x0000A0 (0x0003)              PROPERTY: DistributionParamMode

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		return pClassPointer;
	};
};
UClass* UDistributionVectorParameterBase::pClassPointer = NULL;

//0x000015 (0x000069 - 0x000054)
//DistributionVectorConstantCurve[0x102DDF40]
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                    		// 0x000054 (0x0010)              
	unsigned long                                      bLockAxes : 1;                                    		// 0x000064 (0x0004) [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x000068 (0x0001)              PROPERTY: EDistributionVectorLockFlags

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		return pClassPointer;
	};
};
UClass* UDistributionVectorConstantCurve::pClassPointer = NULL;

//0x000020 (0x000074 - 0x000054)
//DistributionVectorUniform[0x102DDE10]
class UDistributionVectorUniform : public UDistributionVector
{
public:
	FVector3                                           Max;                                              		// 0x000054 (0x000C)              
	FVector3                                           Min;                                              		// 0x000060 (0x000C)              
	unsigned long                                      bLockAxes : 1;                                    		// 0x00006C (0x0004) [0x00000001] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x00006C (0x0004) [0x00000002] 
	unsigned char                                      LockedAxes;                                       		// 0x000070 (0x0001)              PROPERTY: EDistributionVectorLockFlags
	unsigned char                                      MirrorFlags[0x3];                                 		// 0x000071 (0x0003)              PROPERTY: EDistributionVectorMirrorFlags

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionVectorUniform");
		return pClassPointer;
	};
};
UClass* UDistributionVectorUniform::pClassPointer = NULL;

//0x000019 (0x00006D - 0x000054)
//DistributionVectorUniformCurve[0x102DDCE0]
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                    		// 0x000054 (0x0010)              
	unsigned long                                      bLockAxes1 : 1;                                   		// 0x000064 (0x0004) [0x00000001] 
	unsigned long                                      bLockAxes2 : 1;                                   		// 0x000064 (0x0004) [0x00000002] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x000064 (0x0004) [0x00000004] 
	unsigned char                                      LockedAxes[0x2];                                  		// 0x000068 (0x0002)              PROPERTY: EDistributionVectorLockFlags
	unsigned char                                      MirrorFlags[0x3];                                 		// 0x00006A (0x0003)              PROPERTY: EDistributionVectorMirrorFlags

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		return pClassPointer;
	};
};
UClass* UDistributionVectorUniformCurve::pClassPointer = NULL;

//0x00004C (0x00008C - 0x000040)
//EdCoordSystem[0x102DD950]
class UEdCoordSystem : public UObject
{
public:
	FMatrix                                            M;                                                		// 0x000040 (0x0040)              
	struct FString                                     Desc;                                             		// 0x000080 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.EdCoordSystem");
		return pClassPointer;
	};
};
UClass* UEdCoordSystem::pClassPointer = NULL;

//0x00002C (0x00006C - 0x000040)
//FaceFXAnimSet[0x102DD820]
class UFaceFXAnimSet : public UObject
{
public:
	DWORD                                              InternalFaceFXAnimSet;                            		// 0x000040 (0x0004)              
	TArray<unsigned char>                              RawFaceFXAnimSetBytes;                            		// 0x000044 (0x000C)              
	TArray<unsigned char>                              RawFaceFXMiniSessionBytes;                        		// 0x000050 (0x000C)              
	TArray<class USoundCue*>                           ReferencedSoundCues;                              		// 0x00005C (0x000C)              
	int                                                NumLoadErrors;                                    		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FaceFXAnimSet");
		return pClassPointer;
	};
};
UClass* UFaceFXAnimSet::pClassPointer = NULL;

//0x000038 (0x000078 - 0x000040)
//FaceFXAsset[0x102DD6F0]
class UFaceFXAsset : public UObject
{
public:
	DWORD                                              FaceFXActor;                                      		// 0x000040 (0x0004)              
	TArray<unsigned char>                              RawFaceFXActorBytes;                              		// 0x000044 (0x000C)              
	TArray<unsigned char>                              RawFaceFXSessionBytes;                            		// 0x000050 (0x000C)              
	TArray<class UFaceFXAnimSet*>                      MountedFaceFXAnimSets;                            		// 0x00005C (0x000C)              
	TArray<class USoundCue*>                           ReferencedSoundCues;                              		// 0x000068 (0x000C)              
	int                                                NumLoadErrors;                                    		// 0x000074 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FaceFXAsset");
		return pClassPointer;
	};

public:
	void MountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet);//Engine.FaceFXAsset.MountFaceFXAnimSet
	void UnmountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet);//Engine.FaceFXAsset.UnmountFaceFXAnimSet
};
UClass* UFaceFXAsset::pClassPointer = NULL;

//0x0000E0 (0x000120 - 0x000040)
//Font[0x102DD5C0]
class UFont : public UObject
{
public:
	TArray<struct FFontCharacter>                      Characters;                                       		// 0x000040 (0x000C)              
	TArray<class UTexture2D*>                          Textures;                                         		// 0x00004C (0x000C)              
	TArray<int>                                        CharRemap;                                        		// 0x000058 (0x000C)              
	int                                                IsRemapped;                                       		// 0x000064 (0x0004)              
	float                                              EmScale;                                          		// 0x000068 (0x0004)              
	float                                              Ascent;                                           		// 0x00006C (0x0004)              
	float                                              Descent;                                          		// 0x000070 (0x0004)              
	float                                              Leading;                                          		// 0x000074 (0x0004)              
	int                                                Kerning;                                          		// 0x000078 (0x0004)              
	struct FFontImportOptionsData                      ImportOptions;                                    		// 0x00007C (0x0094)              
	int                                                NumCharacters;                                    		// 0x000110 (0x0004)              
	TArray<int>                                        MaxCharHeight;                                    		// 0x000114 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Font");
		return pClassPointer;
	};

public:
	float GetAuthoredViewportHeight(float ViewportHeight);//Engine.Font.GetAuthoredViewportHeight
	int GetResolutionPageIndex(float HeightTest);//Engine.Font.GetResolutionPageIndex
	float GetScalingFactor(float HeightTest);//Engine.Font.GetScalingFactor
	float GetMaxCharHeight();//Engine.Font.GetMaxCharHeight
};
UClass* UFont::pClassPointer = NULL;

//0x00000C (0x00012C - 0x000120)
//MultiFont[0x102DD490]
class UMultiFont : public UFont
{
public:
	TArray<float>                                      ResolutionTestTable;                              		// 0x000120 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MultiFont");
		return pClassPointer;
	};

public:
	int GetResolutionTestTableIndex(float HeightTest);//Engine.MultiFont.GetResolutionTestTableIndex
};
UClass* UMultiFont::pClassPointer = NULL;

//0x000094 (0x0000D4 - 0x000040)
//FontImportOptions[0x102DD360]
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                             		// 0x000040 (0x0094)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FontImportOptions");
		return pClassPointer;
	};
};
UClass* UFontImportOptions::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//ForceFeedbackManager[0x102DD230]
class UForceFeedbackManager : public UObject
{
public:
	unsigned long                                      bAllowsForceFeedback : 1;                         		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      bIsPaused : 1;                                    		// 0x000040 (0x0004) [0x00000002] 
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x000044 (0x0004)              
	int                                                CurrentSample;                                    		// 0x000048 (0x0004)              
	float                                              ElapsedTime;                                      		// 0x00004C (0x0004)              
	float                                              ScaleAllWaveformsBy;                              		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ForceFeedbackManager");
		return pClassPointer;
	};

public:
	void StopForceFeedbackWaveform(class UForceFeedbackWaveform* Waveform);//Engine.ForceFeedbackManager.StopForceFeedbackWaveform
	void PlayForceFeedbackWaveform(class UForceFeedbackWaveform* Waveform);//Engine.ForceFeedbackManager.PlayForceFeedbackWaveform
	void PauseWaveform(bool bPause);//Engine.ForceFeedbackManager.PauseWaveform
};
UClass* UForceFeedbackManager::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//ForceFeedbackWaveform[0x102DD100]
class UForceFeedbackWaveform : public UObject
{
public:
	unsigned long                                      bIsLooping : 1;                                   		// 0x000040 (0x0004) [0x00000001] 
	TArray<struct FWaveformSample>                     Samples;                                          		// 0x000044 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ForceFeedbackWaveform");
		return pClassPointer;
	};
};
UClass* UForceFeedbackWaveform::pClassPointer = NULL;

//0x0000E0 (0x000120 - 0x000040)
//GameViewportClient[0x102DCFD0]
class UGameViewportClient : public UObject
{
public:
	DWORD                                              VfTable_FViewportClient;                          		// 0x000040 (0x0004)              
	DWORD                                              VfTable_FExec;                                    		// 0x000044 (0x0004)              
	DWORD                                              Viewport;                                         		// 0x000048 (0x0004)              
	DWORD                                              ViewportFrame;                                    		// 0x00004C (0x0004)              
	TArray<class UInteraction*>                        GlobalInteractions;                               		// 0x000050 (0x000C)              
	class UClass*                                      UIControllerClass;                                		// 0x00005C (0x0004)              
	class UUIInteraction*                              UIController;                                     		// 0x000060 (0x0004)              
	class UConsole*                                    ViewportConsole;                                  		// 0x000064 (0x0004)              
	struct FQWord                                      ShowFlags;                                        		// 0x000068 (0x0008)              
	class UcDebugPageManager*                          m_ViewportDebugPageManager;                       		// 0x000070 (0x0004)              
	struct FString                                     LoadingMessage;                                   		// 0x000074 (0x000C)              
	struct FString                                     SavingMessage;                                    		// 0x000080 (0x000C)              
	struct FString                                     ConnectingMessage;                                		// 0x00008C (0x000C)              
	struct FString                                     PausedMessage;                                    		// 0x000098 (0x000C)              
	struct FString                                     PrecachingMessage;                                		// 0x0000A4 (0x000C)              
	unsigned long                                      bShowTitleSafeZone : 1;                           		// 0x0000B0 (0x0004) [0x00000001] 
	unsigned long                                      bDisplayingUIMouseCursor : 1;                     		// 0x0000B0 (0x0004) [0x00000002] 
	unsigned long                                      bUIMouseCaptureOverride : 1;                      		// 0x0000B0 (0x0004) [0x00000004] 
	unsigned long                                      bDisableWorldRendering : 1;                       		// 0x0000B0 (0x0004) [0x00000008] 
	unsigned long                                      bDebugNoGFxUI : 1;                                		// 0x0000B0 (0x0004) [0x00000010] 
	struct FTitleSafeZoneArea                          TitleSafeZone;                                    		// 0x0000B4 (0x0010)              
	TArray<struct FSplitscreenData>                    SplitscreenInfo;                                  		// 0x0000C4 (0x000C)              
	unsigned char                                      SplitscreenType;                                  		// 0x0000D0 (0x0001)              PROPERTY: ESplitScreenType
	unsigned char                                      Default2PSplitType;                               		// 0x0000D1 (0x0001)              PROPERTY: ESplitScreenType
	unsigned char                                      Default3PSplitType;                               		// 0x0000D2 (0x0001)              PROPERTY: ESplitScreenType
	unsigned char                                      _0x0000D3[0x1];                                   		// 0x0000D3 (0x0001) MISSED OFFSET
	DWORD                                              ScaleformInteraction;                             		// 0x0000D4 (0x0004)              
	struct FString                                     ProgressMessage[0x2];                             		// 0x0000D8 (0x0018)              
	float                                              fIdleTime;                                        		// 0x0000F0 (0x0004)              
	FVector2                                           VanishingPointOffset;                             		// 0x0000F4 (0x0008)              
	struct FScriptDelegate                             __HandleInputKey__Delegate;                       		// 0x0000FC (0x000C)              
	struct FScriptDelegate                             __HandleInputAxis__Delegate;                      		// 0x000108 (0x000C)              
	struct FScriptDelegate                             __HandleInputChar__Delegate;                      		// 0x000114 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.GameViewportClient");
		return pClassPointer;
	};

public:
	void CalculateSafeZoneValues(float* out_Horizontal,float* out_Vertical,class UCanvas* Canvas,int LocalPlayerIndex,bool bUseMaxPercent);//Engine.GameViewportClient.CalculateSafeZoneValues
	void LayoutPlayers();//Engine.GameViewportClient.LayoutPlayers
	class ULocalPlayer* CreatePlayer(int ControllerId,struct FString* OutError,bool bSpawnActor);//Engine.GameViewportClient.CreatePlayer
	void NotifyPlayerRemoved(int PlayerIndex,class ULocalPlayer* RemovedPlayer);//Engine.GameViewportClient.NotifyPlayerRemoved
	bool HasLeftSafeZone(int LocalPlayerIndex);//Engine.GameViewportClient.HasLeftSafeZone
	bool HandleInputAxis(int ControllerId,struct FName Key,float Delta,float DeltaTime,bool bGamepad);//Engine.GameViewportClient.HandleInputAxis
	void ShowTitleSafeArea();//Engine.GameViewportClient.ShowTitleSafeArea
	void Tick(float DeltaTime);//Engine.GameViewportClient.Tick
	void DebugSetUISystemEnabled(bool bOldUISystemActive,bool bGFxUISystemActive);//Engine.GameViewportClient.DebugSetUISystemEnabled
	void GameSessionEnded();//Engine.GameViewportClient.GameSessionEnded
	void ClearProgressMessages();//Engine.GameViewportClient.ClearProgressMessages
	bool Init(struct FString* OutError);//Engine.GameViewportClient.Init
	void DebugCreatePlayer(int ControllerId);//Engine.GameViewportClient.DebugCreatePlayer
	void GetViewportSize(FVector2* out_ViewportSize);//Engine.GameViewportClient.GetViewportSize
	void GetSubtitleRegion(FVector2* MinPos,FVector2* MaxPos);//Engine.GameViewportClient.GetSubtitleRegion
	void NotifyPlayerAdded(int PlayerIndex,class ULocalPlayer* AddedPlayer);//Engine.GameViewportClient.NotifyPlayerAdded
	void FixupOwnerReferences(TArray<int> IDMappings);//Engine.GameViewportClient.FixupOwnerReferences
	bool HandleInputKey(int ControllerId,struct FName Key,unsigned char EventType,float AmountDepressed,bool bGamepad);//Engine.GameViewportClient.HandleInputKey
	void CalculatePixelCenter(float* out_CenterX,float* out_CenterY,class ULocalPlayer* LPlayer,class UCanvas* Canvas,bool bUseMaxPercent);//Engine.GameViewportClient.CalculatePixelCenter
	bool IsFullScreenViewport();//Engine.GameViewportClient.IsFullScreenViewport
	void NotifyConnectionError(unsigned char MessageType,struct FString Message,struct FString Title);//Engine.GameViewportClient.NotifyConnectionError
	float CalculateDeadZone(class ULocalPlayer* LPlayer,unsigned char SZType,class UCanvas* Canvas,bool bUseMaxPercent);//Engine.GameViewportClient.CalculateDeadZone
	struct FString ConsoleCommand(struct FString Command);//Engine.GameViewportClient.ConsoleCommand
	void AddLocalPlayer(class ULocalPlayer* NewPlayer);//Engine.GameViewportClient.AddLocalPlayer
	void DrawTransitionMessage(class UCanvas* Canvas,struct FString Message);//Engine.GameViewportClient.DrawTransitionMessage
	bool HandleInputChar(int ControllerId,struct FString Unicode);//Engine.GameViewportClient.HandleInputChar
	int InsertInteraction(class UInteraction* NewInteraction,int InIndex);//Engine.GameViewportClient.InsertInteraction
	void RemoveLocalPlayer(class ULocalPlayer* ExistingPlayer);//Engine.GameViewportClient.RemoveLocalPlayer
	void PostRender(class UCanvas* Canvas);//Engine.GameViewportClient.PostRender
	class ULocalPlayer* FindPlayerByControllerId(int ControllerId);//Engine.GameViewportClient.FindPlayerByControllerId
	void RenderDebug(class UCanvas* Canvas);//Engine.GameViewportClient.RenderDebug
	void SetConsoleTarget(int PlayerIndex);//Engine.GameViewportClient.SetConsoleTarget
	bool HasBottomSafeZone(int LocalPlayerIndex);//Engine.GameViewportClient.HasBottomSafeZone
	int ConvertLocalPlayerToGamePlayerIndex(class ULocalPlayer* LPlayer);//Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex
	void SetCustomInteractionObject(class UInteraction* InInteraction);//Engine.GameViewportClient.SetCustomInteractionObject
	void ChangedInputLanguage(struct FString sInputLangId,bool bHasIME,bool bIMEActive);//Engine.GameViewportClient.ChangedInputLanguage
	void SetSplitscreenConfiguration(unsigned char SplitType);//Engine.GameViewportClient.SetSplitscreenConfiguration
	void SSSwapControllers();//Engine.GameViewportClient.SSSwapControllers
	void NativeRenderDebug(class UCanvas* Canvas);//Engine.GameViewportClient.NativeRenderDebug
	void DebugRemovePlayer(int ControllerId);//Engine.GameViewportClient.DebugRemovePlayer
	void SetProgressMessage(unsigned char MessageType,struct FString Message,struct FString Title,bool bIgnoreFutureNetworkMessages);//Engine.GameViewportClient.SetProgressMessage
	bool HasTopSafeZone(int LocalPlayerIndex);//Engine.GameViewportClient.HasTopSafeZone
	void NotifySplitscreenLayoutChanged();//Engine.GameViewportClient.NotifySplitscreenLayoutChanged
	void GetPixelSizeOfScreen(float* out_Width,float* out_Height,class UCanvas* Canvas,int LocalPlayerIndex);//Engine.GameViewportClient.GetPixelSizeOfScreen
	bool HasRightSafeZone(int LocalPlayerIndex);//Engine.GameViewportClient.HasRightSafeZone
	bool RemovePlayer(class ULocalPlayer* ExPlayer);//Engine.GameViewportClient.RemovePlayer
	class UClass* GetCustomInteractionClass(int InIndex);//Engine.GameViewportClient.GetCustomInteractionClass
	int GetCurrentPlayerNum();//Engine.GameViewportClient.GetCurrentPlayerNum
	void SetSplit(int Mode);//Engine.GameViewportClient.SetSplit
	int GetNumCustomInteractions();//Engine.GameViewportClient.GetNumCustomInteractions
};
UClass* UGameViewportClient::pClassPointer = NULL;

//0x000008 (0x000128 - 0x000120)
//cVSViewportClient[0x102DCEA0]
class UcVSViewportClient : public UGameViewportClient
{
public:
	class UcAPBVisualServerHUD*                        m_VisualServerHUD;                                		// 0x000120 (0x0004)              
	class UcDistrictVisualiser*                        m_DistrictVisualiser;                             		// 0x000124 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cVSViewportClient");
		return pClassPointer;
	};

public:
	void PostRender(class UCanvas* Canvas);//Engine.cVSViewportClient.PostRender
	void SetSplitscreenConfiguration(unsigned char SplitType);//Engine.cVSViewportClient.SetSplitscreenConfiguration
	void Tick(float DeltaTime);//Engine.cVSViewportClient.Tick
	bool Init(struct FString* OutError);//Engine.cVSViewportClient.Init
	void GameSessionEnded();//Engine.cVSViewportClient.GameSessionEnded
};
UClass* UcVSViewportClient::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//HttpBaseInterface[0x102DCC40]
class UHttpBaseInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.HttpBaseInterface");
		return pClassPointer;
	};

public:
	struct FString GetHeader(struct FString HeaderName);//Engine.HttpBaseInterface.GetHeader
	TArray<struct FString> GetHeaders();//Engine.HttpBaseInterface.GetHeaders
	int GetContentLength();//Engine.HttpBaseInterface.GetContentLength
	struct FString GetURLParameter(struct FString ParameterName);//Engine.HttpBaseInterface.GetURLParameter
	void GetContent(TArray<unsigned char>* Content);//Engine.HttpBaseInterface.GetContent
	struct FString GetContentType();//Engine.HttpBaseInterface.GetContentType
	struct FString GetURL();//Engine.HttpBaseInterface.GetURL
};
UClass* UHttpBaseInterface::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//HttpRequestInterface[0x102DCB10]
class UHttpRequestInterface : public UHttpBaseInterface
{
public:
	struct FScriptDelegate                             __OnProcessRequestComplete__Delegate;             		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.HttpRequestInterface");
		return pClassPointer;
	};

public:
	class UHttpRequestInterface* SetContent(TArray<unsigned char>* ContentPayload);//Engine.HttpRequestInterface.SetContent
	class UHttpRequestInterface* SetVerb(struct FString Verb);//Engine.HttpRequestInterface.SetVerb
	class UHttpRequestInterface* SetContentAsString(struct FString ContentString);//Engine.HttpRequestInterface.SetContentAsString
	class UHttpRequestInterface* SetProcessRequestCompleteDelegate(struct FScriptDelegate ProcessRequestCompleteDelegate);//Engine.HttpRequestInterface.SetProcessRequestCompleteDelegate
	bool ProcessRequest();//Engine.HttpRequestInterface.ProcessRequest
	class UHttpRequestInterface* SetURL(struct FString URL);//Engine.HttpRequestInterface.SetURL
	class UHttpRequestInterface* SetHeader(struct FString HeaderName,struct FString HeaderValue);//Engine.HttpRequestInterface.SetHeader
	struct FString GetVerb();//Engine.HttpRequestInterface.GetVerb
	void OnProcessRequestComplete(class UHttpRequestInterface* OriginalRequest,class UHttpResponseInterface* InHttpResponse,bool bDidSucceed);//Engine.HttpRequestInterface.OnProcessRequestComplete
};
UClass* UHttpRequestInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//HttpResponseInterface[0x102DC9E0]
class UHttpResponseInterface : public UHttpBaseInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.HttpResponseInterface");
		return pClassPointer;
	};

public:
	int GetResponseCode();//Engine.HttpResponseInterface.GetResponseCode
	struct FString GetContentAsString();//Engine.HttpResponseInterface.GetContentAsString
};
UClass* UHttpResponseInterface::pClassPointer = NULL;

//0x000048 (0x000088 - 0x000040)
//IniLocPatcher[0x102DC8B0]
class UIniLocPatcher : public UObject
{
public:
	TArray<struct FIniLocFileEntry>                    Files;                                            		// 0x000040 (0x000C)              
	unsigned long                                      bRequestEmsFileList : 1;                          		// 0x00004C (0x0004) [0x00000001] 
	int                                                MaxCachedFileAge;                                 		// 0x000050 (0x0004)              
	class UOnlineTitleFileInterface*                   TitleFileInterface;                               		// 0x000054 (0x0004)              
	unsigned char                                      _0x000058[0x4];                                   		// 0x000058 (0x0004) ALIGNEMENT
	class UOnlineTitleFileCacheInterface*              TitleFileCacheInterface;                          		// 0x00005C (0x0004)              
	unsigned char                                      _0x000060[0x4];                                   		// 0x000060 (0x0004) ALIGNEMENT
	TArray<struct FScriptDelegate>                     ReadTitleFileCompleteDelegates;                   		// 0x000064 (0x000C)              
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;              		// 0x000070 (0x000C)              
	struct FScriptDelegate                             __OnAllTitleFilesCompleted__Delegate;             		// 0x00007C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.IniLocPatcher");
		return pClassPointer;
	};

public:
	struct FString UpdateLocFileName(struct FString Filename);//Engine.IniLocPatcher.UpdateLocFileName
	void ClearCachedFiles();//Engine.IniLocPatcher.ClearCachedFiles
	void CheckForAllFilesComplete();//Engine.IniLocPatcher.CheckForAllFilesComplete
	void Init();//Engine.IniLocPatcher.Init
	void OnReadTitleFileComplete(bool bWasSuccessful,struct FString Filename);//Engine.IniLocPatcher.OnReadTitleFileComplete
	void OnDownloadFileComplete(bool bWasSuccessful,struct FString Filename);//Engine.IniLocPatcher.OnDownloadFileComplete
	void AddReadFileDelegate(struct FScriptDelegate ReadTitleFileCompleteDelegate);//Engine.IniLocPatcher.AddReadFileDelegate
	void OnAllTitleFilesCompleted();//Engine.IniLocPatcher.OnAllTitleFilesCompleted
	void AddFileToDownload(struct FString Filename);//Engine.IniLocPatcher.AddFileToDownload
	void TriggerDownloadCompleteDelegates(bool bSuccess,struct FString Filename);//Engine.IniLocPatcher.TriggerDownloadCompleteDelegates
	void StartLoadingFiles();//Engine.IniLocPatcher.StartLoadingFiles
	void ProcessIniLocFile(struct FString Filename,bool bIsUnicode,TArray<unsigned char>* FileData);//Engine.IniLocPatcher.ProcessIniLocFile
	void OnFileCacheLoadComplete(bool bWasSuccessful,struct FString Filename);//Engine.IniLocPatcher.OnFileCacheLoadComplete
	void DownloadFiles();//Engine.IniLocPatcher.DownloadFiles
	void ClearReadFileDelegate(struct FScriptDelegate ReadTitleFileCompleteDelegate);//Engine.IniLocPatcher.ClearReadFileDelegate
	void OnRequestTitleFileListComplete(bool bWasSuccessful,struct FString ResultStr);//Engine.IniLocPatcher.OnRequestTitleFileListComplete
	void OnFileCacheSaveComplete(bool bWasSuccessful,struct FString Filename);//Engine.IniLocPatcher.OnFileCacheSaveComplete
};
UClass* UIniLocPatcher::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//InterpCurveEdSetup[0x102DC780]
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                             		// 0x000040 (0x000C)              
	int                                                ActiveTab;                                        		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpCurveEdSetup");
		return pClassPointer;
	};
};
UClass* UInterpCurveEdSetup::pClassPointer = NULL;

//0x00001C (0x00005C - 0x000040)
//InterpTrack[0x102DC650]
class UInterpTrack : public UObject
{
public:
	DWORD                                              VfTable_FInterpEdInputInterface;                  		// 0x000040 (0x0004)              
	DWORD                                              CurveEdVTable;                                    		// 0x000044 (0x0004)              
	class UClass*                                      TrackInstClass;                                   		// 0x000048 (0x0004)              
	struct FString                                     TrackTitle;                                       		// 0x00004C (0x000C)              
	unsigned long                                      bOnePerGroup : 1;                                 		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      bDirGroupOnly : 1;                                		// 0x000058 (0x0004) [0x00000002] 
	unsigned long                                      bDisableTrack : 1;                                		// 0x000058 (0x0004) [0x00000004] 
	unsigned long                                      bIsAnimControlTrack : 1;                          		// 0x000058 (0x0004) [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrack");
		return pClassPointer;
	};
};
UClass* UInterpTrack::pClassPointer = NULL;

//0x000090 (0x0000D0 - 0x000040)
//JsonObject[0x102DC520]
class UJsonObject : public UObject
{
public:
	struct FMap_Mirror                                 ValueMap;                                         		// 0x000040 (0x003C)              
	struct FMap_Mirror                                 ObjectMap;                                        		// 0x00007C (0x003C)              
	TArray<struct FString>                             ValueArray;                                       		// 0x0000B8 (0x000C)              
	TArray<class UJsonObject*>                         ObjectArray;                                      		// 0x0000C4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.JsonObject");
		return pClassPointer;
	};

public:
	bool GetBoolValue(struct FString Key);//Engine.JsonObject.GetBoolValue
	void SetIntValue(struct FString Key,int Value);//Engine.JsonObject.SetIntValue
	void SetFloatValue(struct FString Key,float Value);//Engine.JsonObject.SetFloatValue
	void SetObject(struct FString Key,class UJsonObject* Object);//Engine.JsonObject.SetObject
	class UJsonObject* DecodeJson(struct FString str);//Engine.JsonObject.DecodeJson
	struct FString EncodeJson(class UJsonObject* Root);//Engine.JsonObject.EncodeJson
	bool HasKey(struct FString Key);//Engine.JsonObject.HasKey
	class UJsonObject* GetObject(struct FString Key);//Engine.JsonObject.GetObject
	struct FString GetStringValue(struct FString Key);//Engine.JsonObject.GetStringValue
	void SetStringValue(struct FString Key,struct FString Value);//Engine.JsonObject.SetStringValue
	int GetIntValue(struct FString Key);//Engine.JsonObject.GetIntValue
	float GetFloatValue(struct FString Key);//Engine.JsonObject.GetFloatValue
	void SetBoolValue(struct FString Key,bool Value);//Engine.JsonObject.SetBoolValue
};
UClass* UJsonObject::pClassPointer = NULL;

//0x000040 (0x000080 - 0x000040)
//KMeshProps[0x102DC3F0]
class UKMeshProps : public UObject
{
public:
	FVector3                                           COMNudge;                                         		// 0x000040 (0x000C)              
	struct FKAggregateGeom                             AggGeom;                                          		// 0x00004C (0x0034)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.KMeshProps");
		return pClassPointer;
	};
};
UClass* UKMeshProps::pClassPointer = NULL;

//0x000044 (0x000084 - 0x000040)
//LevelStreaming[0x102DBCD0]
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                      		// 0x000040 (0x0008)              
	class ULevel*                                      LoadedLevel;                                      		// 0x000048 (0x0004)              
	FVector3                                           Offset;                                           		// 0x00004C (0x000C)              
	FVector3                                           OldOffset;                                        		// 0x000058 (0x000C)              
	unsigned long                                      bIsVisible : 1;                                   		// 0x000064 (0x0004) [0x00000001] 
	unsigned long                                      bHasLoadRequestPending : 1;                       		// 0x000064 (0x0004) [0x00000002] 
	unsigned long                                      bHasUnloadRequestPending : 1;                     		// 0x000064 (0x0004) [0x00000004] 
	unsigned long                                      bShouldBeVisibleInEditor : 1;                     		// 0x000064 (0x0004) [0x00000008] 
	unsigned long                                      bBoundingBoxVisible : 1;                          		// 0x000064 (0x0004) [0x00000010] 
	unsigned long                                      bLocked : 1;                                      		// 0x000064 (0x0004) [0x00000020] 
	unsigned long                                      bIsFullyStatic : 1;                               		// 0x000064 (0x0004) [0x00000040] 
	unsigned long                                      bShouldBeLoaded : 1;                              		// 0x000064 (0x0004) [0x00000080] 
	unsigned long                                      bShouldBeVisible : 1;                             		// 0x000064 (0x0004) [0x00000100] 
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x000064 (0x0004) [0x00000200] 
	unsigned long                                      bIsRequestingUnloadAndRemoval : 1;                		// 0x000064 (0x0004) [0x00000400] 
	unsigned long                                      bDoNotLoadInEditor : 1;                           		// 0x000064 (0x0004) [0x00000800] 
	DWORD                                              DrawColor;                                        		// 0x000068 (0x0004)              
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                           		// 0x00006C (0x000C)              
	float                                              MinTimeBetweenVolumeUnloadRequests;               		// 0x000078 (0x0004)              
	double                                             LastVolumeUnloadRequestTime;                      		// 0x00007C (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LevelStreaming");
		return pClassPointer;
	};
};
UClass* ULevelStreaming::pClassPointer = NULL;

//0x000010 (0x000094 - 0x000084)
//LevelStreamingDistance[0x102DBBA0]
class ULevelStreamingDistance : public ULevelStreaming
{
public:
	FVector3                                           Origin;                                           		// 0x000084 (0x000C)              
	float                                              MaxDistance;                                      		// 0x000090 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LevelStreamingDistance");
		return pClassPointer;
	};
};
UClass* ULevelStreamingDistance::pClassPointer = NULL;

//0x000000 (0x000084 - 0x000084)
//LevelStreamingKismet[0x102DBA70]
class ULevelStreamingKismet : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LevelStreamingKismet");
		return pClassPointer;
	};
};
UClass* ULevelStreamingKismet::pClassPointer = NULL;

//0x000000 (0x000084 - 0x000084)
//LevelStreamingPersistent[0x102DB940]
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LevelStreamingPersistent");
		return pClassPointer;
	};
};
UClass* ULevelStreamingPersistent::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//LightFunction[0x102DB810]
class ULightFunction : public UObject
{
public:
	class UMaterialInterface*                          SourceMaterial;                                   		// 0x000040 (0x0004)              
	FVector3                                           Scale;                                            		// 0x000044 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LightFunction");
		return pClassPointer;
	};
};
UClass* ULightFunction::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//MapInfo[0x102DB6E0]
class UMapInfo : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MapInfo");
		return pClassPointer;
	};
};
UClass* UMapInfo::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//Surface[0x102DB220]
class USurface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Surface");
		return pClassPointer;
	};

public:
	float GetSurfaceWidth();//Engine.Surface.GetSurfaceWidth
	float GetSurfaceHeight();//Engine.Surface.GetSurfaceHeight
};
UClass* USurface::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//MaterialInterface[0x102DB350]
class UMaterialInterface : public USurface
{
public:
	struct FString                                     RWTGuid;                                          		// 0x000040 (0x000C)              
	class UMaterial*                                   BakedMaterial;                                    		// 0x00004C (0x0004)              
	float                                              m_BakedTextureCoordinate;                         		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialInterface");
		return pClassPointer;
	};

public:
	bool GetVectorParameterValue(struct FName ParameterName,struct FLinearColor* OutValue);//Engine.MaterialInterface.GetVectorParameterValue
	bool GetVectorCurveParameterValue(struct FName ParameterName,struct FInterpCurveVector* OutValue);//Engine.MaterialInterface.GetVectorCurveParameterValue
	bool GetTextureParameterValue(struct FName ParameterName,class UTexture** OutValue);//Engine.MaterialInterface.GetTextureParameterValue
	bool GetScalarParameterValue(struct FName ParameterName,float* OutValue);//Engine.MaterialInterface.GetScalarParameterValue
	bool GetFontParameterValue(struct FName ParameterName,class UFont** OutFontValue,int* OutFontPage);//Engine.MaterialInterface.GetFontParameterValue
	class UPhysicalMaterial* GetPhysicalMaterial();//Engine.MaterialInterface.GetPhysicalMaterial
	class UMaterial* GetMaterial();//Engine.MaterialInterface.GetMaterial
	bool GetScalarCurveParameterValue(struct FName ParameterName,struct FInterpCurveFloat* OutValue);//Engine.MaterialInterface.GetScalarCurveParameterValue
};
UClass* UMaterialInterface::pClassPointer = NULL;

//0x000248 (0x00029C - 0x000054)
//Material[0x102DB480]
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x000054 (0x0004)              
	class UClass*                                      PhysicalMaterial;                                 		// 0x000058 (0x0004)              
	struct FColorMaterialInput                         DiffuseColor;                                     		// 0x00005C (0x0024)              
	struct FScalarMaterialInput                        DiffusePower;                                     		// 0x000080 (0x0024)              
	struct FColorMaterialInput                         SpecularColor;                                    		// 0x0000A4 (0x0024)              
	struct FScalarMaterialInput                        SpecularPower;                                    		// 0x0000C8 (0x0024)              
	struct FVectorMaterialInput                        Normal;                                           		// 0x0000EC (0x002C)              
	struct FColorMaterialInput                         EmissiveColor;                                    		// 0x000118 (0x0024)              
	struct FScalarMaterialInput                        Opacity;                                          		// 0x00013C (0x0024)              
	struct FScalarMaterialInput                        OpacityMask;                                      		// 0x000160 (0x0024)              
	float                                              OpacityMaskClipValue;                             		// 0x000184 (0x0004)              
	struct FVector2MaterialInput                       Distortion;                                       		// 0x000188 (0x0028)              
	unsigned char                                      BlendMode;                                        		// 0x0001B0 (0x0001)              PROPERTY: EBlendMode
	unsigned char                                      LightingModel;                                    		// 0x0001B1 (0x0001)              PROPERTY: EMaterialLightingModel
	unsigned char                                      _0x0001B2[0x2];                                   		// 0x0001B2 (0x0002) MISSED OFFSET
	struct FColorMaterialInput                         CustomLighting;                                   		// 0x0001B4 (0x0024)              
	struct FScalarMaterialInput                        TwoSidedLightingMask;                             		// 0x0001D8 (0x0024)              
	struct FColorMaterialInput                         TwoSidedLightingColor;                            		// 0x0001FC (0x0024)              
	unsigned long                                      TwoSided : 1;                                     		// 0x000220 (0x0004) [0x00000001] 
	unsigned long                                      bDisableDepthTest : 1;                            		// 0x000220 (0x0004) [0x00000002] 
	unsigned long                                      bEnableShadowCasting : 1;                         		// 0x000220 (0x0004) [0x00000004] 
	unsigned long                                      bUsedAsLightFunction : 1;                         		// 0x000220 (0x0004) [0x00000008] 
	unsigned long                                      bUsedWithFogVolumes : 1;                          		// 0x000220 (0x0004) [0x00000010] 
	unsigned long                                      bUsedAsSpecialEngineMaterial : 1;                 		// 0x000220 (0x0004) [0x00000020] 
	unsigned long                                      bUsedWithSkeletalMesh : 1;                        		// 0x000220 (0x0004) [0x00000040] 
	unsigned long                                      bUsedWithParticleSystem : 1;                      		// 0x000220 (0x0004) [0x00000080] 
	unsigned long                                      bUsedWithParticleSprites : 1;                     		// 0x000220 (0x0004) [0x00000100] 
	unsigned long                                      bUsedWithBeamTrails : 1;                          		// 0x000220 (0x0004) [0x00000200] 
	unsigned long                                      bUsedWithParticleSubUV : 1;                       		// 0x000220 (0x0004) [0x00000400] 
	unsigned long                                      bUsedWithFoliage : 1;                             		// 0x000220 (0x0004) [0x00000800] 
	unsigned long                                      bUsedWithSpeedTree : 1;                           		// 0x000220 (0x0004) [0x00001000] 
	unsigned long                                      bUsedWithStaticLighting : 1;                      		// 0x000220 (0x0004) [0x00002000] 
	unsigned long                                      bUsedWithLensFlare : 1;                           		// 0x000220 (0x0004) [0x00004000] 
	unsigned long                                      bUsedWithGammaCorrection : 1;                     		// 0x000220 (0x0004) [0x00008000] 
	unsigned long                                      bUsedWithInstancedMeshParticles : 1;              		// 0x000220 (0x0004) [0x00010000] 
	unsigned long                                      bUsedWithFluidSurfaces : 1;                       		// 0x000220 (0x0004) [0x00020000] 
	unsigned long                                      bUsedWithDecals : 1;                              		// 0x000220 (0x0004) [0x00040000] 
	unsigned long                                      bUsedWithSHLight : 1;                             		// 0x000220 (0x0004) [0x00080000] 
	unsigned long                                      Wireframe : 1;                                    		// 0x000220 (0x0004) [0x00100000] 
	unsigned long                                      bIsFallbackMaterial : 1;                          		// 0x000220 (0x0004) [0x00200000] 
	unsigned long                                      bUsesDistortion : 1;                              		// 0x000220 (0x0004) [0x00400000] 
	unsigned long                                      bUsesSceneColor : 1;                              		// 0x000220 (0x0004) [0x00800000] 
	unsigned long                                      bIsMasked : 1;                                    		// 0x000220 (0x0004) [0x01000000] 
	unsigned long                                      bIsPreviewMaterial : 1;                           		// 0x000220 (0x0004) [0x02000000] 
	unsigned long                                      bForceSafeBuildingCheck : 1;                      		// 0x000220 (0x0004) [0x04000000] 
	class UMaterial*                                   FallbackMaterial;                                 		// 0x000224 (0x0004)              
	DWORD                                              MaterialResources[0x2];                           		// 0x000228 (0x0008)              
	DWORD                                              DefaultMaterialInstances[0x2];                    		// 0x000230 (0x0008)              
	int                                                EditorX;                                          		// 0x000238 (0x0004)              
	int                                                EditorY;                                          		// 0x00023C (0x0004)              
	int                                                EditorPitch;                                      		// 0x000240 (0x0004)              
	int                                                EditorYaw;                                        		// 0x000244 (0x0004)              
	TArray<class UMaterialExpression*>                 Expressions;                                      		// 0x000248 (0x000C)              
	unsigned char                                      EditorParameters[0x3C];                           		// 0x000254 (0x003C)              UNKNOWN PROPERTY: MapProperty
	TArray<class UTexture*>                            ReferencedTextures;                               		// 0x000290 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Material");
		return pClassPointer;
	};

public:
	TArray<class UTexture*> GetTextures();//Engine.Material.GetTextures
};
UClass* UMaterial::pClassPointer = NULL;

//0x00001C (0x00005C - 0x000040)
//MaterialExpression[0x102DB5B0]
class UMaterialExpression : public UObject
{
public:
	int                                                EditorX;                                          		// 0x000040 (0x0004)              
	int                                                EditorY;                                          		// 0x000044 (0x0004)              
	unsigned long                                      bRealtimePreview : 1;                             		// 0x000048 (0x0004) [0x00000001] 
	unsigned long                                      bIsParameterExpression : 1;                       		// 0x000048 (0x0004) [0x00000002] 
	unsigned long                                      bShowOutputNameOnPin : 1;                         		// 0x000048 (0x0004) [0x00000004] 
	unsigned long                                      bHidePreviewWindow : 1;                           		// 0x000048 (0x0004) [0x00000008] 
	class UMaterialExpressionCompound*                 Compound;                                         		// 0x00004C (0x0004)              
	struct FString                                     Desc;                                             		// 0x000050 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpression");
		return pClassPointer;
	};
};
UClass* UMaterialExpression::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//MusicTrackDataStructures[0x102DAFC0]
class UMusicTrackDataStructures : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MusicTrackDataStructures");
		return pClassPointer;
	};
};
UClass* UMusicTrackDataStructures::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//ObjectReferencer[0x102DAC30]
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ObjectReferencer");
		return pClassPointer;
	};
};
UClass* UObjectReferencer::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineMatchmakingStats[0x102DAB00]
class UOnlineMatchmakingStats : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineMatchmakingStats");
		return pClassPointer;
	};

public:
	void StopTimer(struct FMMStats_Timer* Timer);//Engine.OnlineMatchmakingStats.StopTimer
	void StartTimer(struct FMMStats_Timer* Timer);//Engine.OnlineMatchmakingStats.StartTimer
};
UClass* UOnlineMatchmakingStats::pClassPointer = NULL;

//0x00002C (0x00006C - 0x000040)
//OnlinePlayerStorage[0x102DA9D0]
class UOnlinePlayerStorage : public UObject
{
public:
	int                                                VersionNumber;                                    		// 0x000040 (0x0004)              
	int                                                VersionSettingsId;                                		// 0x000044 (0x0004)              
	int                                                SaveCountSettingId;                               		// 0x000048 (0x0004)              
	TArray<struct FOnlineProfileSetting>               ProfileSettings;                                  		// 0x00004C (0x000C)              
	TArray<struct FSettingsPropertyPropertyMetaData>   ProfileMappings;                                  		// 0x000058 (0x000C)              
	unsigned char                                      AsyncState;                                       		// 0x000064 (0x0001)              PROPERTY: EOnlinePlayerStorageAsyncState
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	int                                                DeviceID;                                         		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlinePlayerStorage");
		return pClassPointer;
	};

public:
	int GetVersionNumber();//Engine.OnlinePlayerStorage.GetVersionNumber
	void AppendVersionToSettings();//Engine.OnlinePlayerStorage.AppendVersionToSettings
	int FindProfileMappingIndex(int ProfileSettingId);//Engine.OnlinePlayerStorage.FindProfileMappingIndex
	bool SetProfileSettingValueId(int ProfileSettingId,int Value);//Engine.OnlinePlayerStorage.SetProfileSettingValueId
	bool GetProfileSettingValueId(int ProfileSettingId,int* ValueId,int* ListIndex);//Engine.OnlinePlayerStorage.GetProfileSettingValueId
	void SetDefaultVersionNumber();//Engine.OnlinePlayerStorage.SetDefaultVersionNumber
	void AddSettingInt(int SettingId);//Engine.OnlinePlayerStorage.AddSettingInt
	void SetToDefaults();//Engine.OnlinePlayerStorage.SetToDefaults
	void AddSettingFloat(int SettingId);//Engine.OnlinePlayerStorage.AddSettingFloat
	int FindDefaultProfileMappingIndexByName(struct FName ProfileSettingName);//Engine.OnlinePlayerStorage.FindDefaultProfileMappingIndexByName
	bool GetRangedProfileSettingValue(int ProfileId,float* OutValue);//Engine.OnlinePlayerStorage.GetRangedProfileSettingValue
	bool SetProfileSettingValue(int ProfileSettingId,struct FString* NewValue);//Engine.OnlinePlayerStorage.SetProfileSettingValue
	struct FName GetProfileSettingName(int ProfileSettingId);//Engine.OnlinePlayerStorage.GetProfileSettingName
	bool GetProfileSettingId(struct FName ProfileSettingName,int* ProfileSettingId);//Engine.OnlinePlayerStorage.GetProfileSettingId
	bool GetProfileSettingValueFromListIndex(int ProfileSettingId,int ListIndex,int* Value);//Engine.OnlinePlayerStorage.GetProfileSettingValueFromListIndex
	int FindProfileSettingIndex(int ProfileSettingId);//Engine.OnlinePlayerStorage.FindProfileSettingIndex
	bool GetProfileSettingMappingType(int ProfileId,unsigned char* OutType);//Engine.OnlinePlayerStorage.GetProfileSettingMappingType
	bool SetProfileSettingValueByName(struct FName ProfileSettingName,struct FString* NewValue);//Engine.OnlinePlayerStorage.SetProfileSettingValueByName
	struct FString GetProfileSettingColumnHeader(int ProfileSettingId);//Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader
	bool GetProfileSettingValue(int ProfileSettingId,struct FString* Value,int ValueMapID);//Engine.OnlinePlayerStorage.GetProfileSettingValue
	bool SetRangedProfileSettingValue(int ProfileId,float NewValue);//Engine.OnlinePlayerStorage.SetRangedProfileSettingValue
	bool GetProfileSettingMappingIds(int ProfileId,TArray<int>* Ids);//Engine.OnlinePlayerStorage.GetProfileSettingMappingIds
	bool GetProfileSettingValueByName(struct FName ProfileSettingName,struct FString* Value);//Engine.OnlinePlayerStorage.GetProfileSettingValueByName
	bool GetProfileSettingValues(int ProfileSettingId,TArray<struct FName>* Values);//Engine.OnlinePlayerStorage.GetProfileSettingValues
	bool IsProfileSettingIdMapped(int ProfileSettingId);//Engine.OnlinePlayerStorage.IsProfileSettingIdMapped
	bool SetProfileSettingValueInt(int ProfileSettingId,int Value);//Engine.OnlinePlayerStorage.SetProfileSettingValueInt
	int FindProfileMappingIndexByName(struct FName ProfileSettingName);//Engine.OnlinePlayerStorage.FindProfileMappingIndexByName
	bool GetProfileSettingRange(int ProfileId,float* OutMinValue,float* OutMaxValue,float* RangeIncrement,unsigned char* bFormatAsInt);//Engine.OnlinePlayerStorage.GetProfileSettingRange
	struct FName GetProfileSettingValueName(int ProfileSettingId);//Engine.OnlinePlayerStorage.GetProfileSettingValueName
	bool GetProfileSettingValueFloat(int ProfileSettingId,float* Value);//Engine.OnlinePlayerStorage.GetProfileSettingValueFloat
	bool GetProfileSettingValueInt(int ProfileSettingId,int* Value);//Engine.OnlinePlayerStorage.GetProfileSettingValueInt
	bool SetProfileSettingValueFloat(int ProfileSettingId,float Value);//Engine.OnlinePlayerStorage.SetProfileSettingValueFloat
};
UClass* UOnlinePlayerStorage::pClassPointer = NULL;

//0x000024 (0x000090 - 0x00006C)
//OnlineProfileSettings[0x102DA8A0]
class UOnlineProfileSettings : public UOnlinePlayerStorage
{
public:
	TArray<int>                                        ProfileSettingIds;                                		// 0x00006C (0x000C)              
	TArray<struct FOnlineProfileSetting>               DefaultSettings;                                  		// 0x000078 (0x000C)              
	TArray<struct FIdToStringMapping>                  OwnerMappings;                                    		// 0x000084 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineProfileSettings");
		return pClassPointer;
	};

public:
	bool GetProfileSettingDefaultId(int ProfileSettingId,int* DefaultId,int* ListIndex);//Engine.OnlineProfileSettings.GetProfileSettingDefaultId
	void AppendVersionToReadIds();//Engine.OnlineProfileSettings.AppendVersionToReadIds
	bool GetProfileSettingDefaultInt(int ProfileSettingId,int* DefaultInt);//Engine.OnlineProfileSettings.GetProfileSettingDefaultInt
	void SetToDefaults();//Engine.OnlineProfileSettings.SetToDefaults
	void ModifyAvailableProfileSettings();//Engine.OnlineProfileSettings.ModifyAvailableProfileSettings
	bool GetProfileSettingDefaultFloat(int ProfileSettingId,float* DefaultFloat);//Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat
};
UClass* UOnlineProfileSettings::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//OnlineStats[0x102DA770]
class UOnlineStats : public UObject
{
public:
	TArray<struct FStringIdToStringMapping>            ViewIdMappings;                                   		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineStats");
		return pClassPointer;
	};

public:
	bool GetViewId(struct FName ViewName,int* ViewId);//Engine.OnlineStats.GetViewId
	struct FName GetViewName(int ViewId);//Engine.OnlineStats.GetViewName
};
UClass* UOnlineStats::pClassPointer = NULL;

//0x000040 (0x00008C - 0x00004C)
//OnlineStatsRead[0x102DA640]
class UOnlineStatsRead : public UOnlineStats
{
public:
	int                                                ViewId;                                           		// 0x00004C (0x0004)              
	int                                                SortColumnId;                                     		// 0x000050 (0x0004)              
	TArray<int>                                        ColumnIds;                                        		// 0x000054 (0x000C)              
	int                                                TotalRowsInView;                                  		// 0x000060 (0x0004)              
	TArray<struct FOnlineStatsRow>                     Rows;                                             		// 0x000064 (0x000C)              
	TArray<struct FColumnMetaData>                     ColumnMappings;                                   		// 0x000070 (0x000C)              
	struct FString                                     ViewName;                                         		// 0x00007C (0x000C)              
	int                                                TitleId;                                          		// 0x000088 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineStatsRead");
		return pClassPointer;
	};

public:
	bool GetIntStatValueForPlayer(struct FUniqueNetId PlayerID,int StatColumnNo,int* StatValue);//Engine.OnlineStatsRead.GetIntStatValueForPlayer
	void OnReadComplete();//Engine.OnlineStatsRead.OnReadComplete
	bool IsStatZero(struct FUniqueNetId PlayerID,int StatColumnNo);//Engine.OnlineStatsRead.IsStatZero
	bool GetFloatStatValueForPlayer(struct FUniqueNetId PlayerID,int StatColumnNo,float* StatValue);//Engine.OnlineStatsRead.GetFloatStatValueForPlayer
	bool SetFloatStatValueForPlayer(struct FUniqueNetId PlayerID,int StatColumnNo,float StatValue);//Engine.OnlineStatsRead.SetFloatStatValueForPlayer
	bool SetIntStatValueForPlayer(struct FUniqueNetId PlayerID,int StatColumnNo,int StatValue);//Engine.OnlineStatsRead.SetIntStatValueForPlayer
	bool GetStatValueForPlayerAsString(struct FUniqueNetId PlayerID,int StatColumnNo,struct FString* StatValue);//Engine.OnlineStatsRead.GetStatValueForPlayerAsString
	void AddPlayer(struct FString PlayerName,struct FUniqueNetId PlayerID);//Engine.OnlineStatsRead.AddPlayer
	int GetRankForPlayer(struct FUniqueNetId PlayerID);//Engine.OnlineStatsRead.GetRankForPlayer
};
UClass* UOnlineStatsRead::pClassPointer = NULL;

//0x000040 (0x00008C - 0x00004C)
//OnlineStatsWrite[0x102DA510]
class UOnlineStatsWrite : public UOnlineStats
{
public:
	TArray<struct FStringIdToStringMapping>            StatMappings;                                     		// 0x00004C (0x000C)              
	TArray<struct FSettingsProperty>                   Properties;                                       		// 0x000058 (0x000C)              
	TArray<int>                                        ViewIds;                                          		// 0x000064 (0x000C)              
	TArray<int>                                        ArbitratedViewIds;                                		// 0x000070 (0x000C)              
	int                                                RatingId;                                         		// 0x00007C (0x0004)              
	struct FScriptDelegate                             __OnStatsWriteComplete__Delegate;                 		// 0x000080 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineStatsWrite");
		return pClassPointer;
	};

public:
	struct FName GetStatName(int StatId);//Engine.OnlineStatsWrite.GetStatName
	void DecrementIntStat(int StatId,int DecBy);//Engine.OnlineStatsWrite.DecrementIntStat
	void DecrementFloatStat(int StatId,float DecBy);//Engine.OnlineStatsWrite.DecrementFloatStat
	void SetIntStat(int StatId,int Value);//Engine.OnlineStatsWrite.SetIntStat
	void IncrementIntStat(int StatId,int IncBy);//Engine.OnlineStatsWrite.IncrementIntStat
	void OnStatsWriteComplete();//Engine.OnlineStatsWrite.OnStatsWriteComplete
	bool GetStatId(struct FName StatName,int* StatId);//Engine.OnlineStatsWrite.GetStatId
	void IncrementFloatStat(int StatId,float IncBy);//Engine.OnlineStatsWrite.IncrementFloatStat
	void SetFloatStat(int StatId,float Value);//Engine.OnlineStatsWrite.SetFloatStat
};
UClass* UOnlineStatsWrite::pClassPointer = NULL;

//0x0000BC (0x0000FC - 0x000040)
//OnlineSubsystem[0x102DA3E0]
class UOnlineSubsystem : public UObject
{
public:
	DWORD                                              VfTable_FTickableObject;                          		// 0x000040 (0x0004)              
	class UOnlineAccountInterface*                     AccountInterface;                                 		// 0x000044 (0x0004)              
	unsigned char                                      _0x000048[0x4];                                   		// 0x000048 (0x0004) ALIGNEMENT
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x00004C (0x0004)              
	unsigned char                                      _0x000050[0x4];                                   		// 0x000050 (0x0004) ALIGNEMENT
	class UOnlinePlayerInterfaceEx*                    PlayerInterfaceEx;                                		// 0x000054 (0x0004)              
	unsigned char                                      _0x000058[0x4];                                   		// 0x000058 (0x0004) ALIGNEMENT
	class UOnlineSystemInterface*                      SystemInterface;                                  		// 0x00005C (0x0004)              
	unsigned char                                      _0x000060[0x4];                                   		// 0x000060 (0x0004) ALIGNEMENT
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x000064 (0x0004)              
	unsigned char                                      _0x000068[0x4];                                   		// 0x000068 (0x0004) ALIGNEMENT
	class UOnlineContentInterface*                     ContentInterface;                                 		// 0x00006C (0x0004)              
	unsigned char                                      _0x000070[0x4];                                   		// 0x000070 (0x0004) ALIGNEMENT
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x000074 (0x0004)              
	unsigned char                                      _0x000078[0x4];                                   		// 0x000078 (0x0004) ALIGNEMENT
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x00007C (0x0004)              
	unsigned char                                      _0x000080[0x4];                                   		// 0x000080 (0x0004) ALIGNEMENT
	class UOnlineNewsInterface*                        NewsInterface;                                    		// 0x000084 (0x0004)              
	unsigned char                                      _0x000088[0x4];                                   		// 0x000088 (0x0004) ALIGNEMENT
	class UOnlinePartyChatInterface*                   PartyChatInterface;                               		// 0x00008C (0x0004)              
	unsigned char                                      _0x000090[0x4];                                   		// 0x000090 (0x0004) ALIGNEMENT
	class UOnlineTitleFileInterface*                   TitleFileInterface;                               		// 0x000094 (0x0004)              
	unsigned char                                      _0x000098[0x4];                                   		// 0x000098 (0x0004) ALIGNEMENT
	class UOnlineTitleFileCacheInterface*              TitleFileCacheInterface;                          		// 0x00009C (0x0004)              
	unsigned char                                      _0x0000A0[0x4];                                   		// 0x0000A0 (0x0004) ALIGNEMENT
	class UUserCloudFileInterface*                     UserCloudInterface;                               		// 0x0000A4 (0x0004)              
	unsigned char                                      _0x0000A8[0x4];                                   		// 0x0000A8 (0x0004) ALIGNEMENT
	class USharedCloudFileInterface*                   SharedCloudInterface;                             		// 0x0000AC (0x0004)              
	unsigned char                                      _0x0000B0[0x4];                                   		// 0x0000B0 (0x0004) ALIGNEMENT
	class UOnlineSocialInterface*                      SocialInterface;                                  		// 0x0000B4 (0x0004)              
	unsigned char                                      _0x0000B8[0x4];                                   		// 0x0000B8 (0x0004) ALIGNEMENT
	TArray<struct FNamedInterface>                     NamedInterfaces;                                  		// 0x0000BC (0x000C)              
	TArray<struct FNamedInterfaceDef>                  NamedInterfaceDefs;                               		// 0x0000C8 (0x000C)              
	TArray<struct FNamedSession>                       Sessions;                                         		// 0x0000D4 (0x000C)              
	unsigned long                                      bUseBuildIdOverride : 1;                          		// 0x0000E0 (0x0004) [0x00000001] 
	int                                                BuildIdOverride;                                  		// 0x0000E4 (0x0004)              
	struct FString                                     IniLocPatcherClassName;                           		// 0x0000E8 (0x000C)              
	class UIniLocPatcher*                              Patcher;                                          		// 0x0000F4 (0x0004)              
	float                                              AsyncMinCompletionTime;                           		// 0x0000F8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineSubsystem");
		return pClassPointer;
	};

public:
	bool SetSystemInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetSystemInterface
	bool SetSocialInterface(class UObject* InSocialInterface);//Engine.OnlineSubsystem.SetSocialInterface
	bool SetPlayerInterfaceEx(class UObject* NewInterface);//Engine.OnlineSubsystem.SetPlayerInterfaceEx
	void SetNamedInterface(struct FName InterfaceName,class UObject* NewInterface);//Engine.OnlineSubsystem.SetNamedInterface
	void DumpGameSettings(class UOnlineGameSettings* GameSettings);//Engine.OnlineSubsystem.DumpGameSettings
	class UObject* GetNamedInterface(struct FName InterfaceName);//Engine.OnlineSubsystem.GetNamedInterface
	void SetDebugSpewLevel(int DebugSpewLevel);//Engine.OnlineSubsystem.SetDebugSpewLevel
	bool SetTitleFileInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetTitleFileInterface
	bool SetUserCloudInterface(class UObject* InCloudInterface);//Engine.OnlineSubsystem.SetUserCloudInterface
	bool SetAccountInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetAccountInterface
	bool SetStatsInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetStatsInterface
	bool SetVoiceInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetVoiceInterface
	void DumpVoiceRegistration();//Engine.OnlineSubsystem.DumpVoiceRegistration
	bool PostInit();//Engine.OnlineSubsystem.PostInit
	bool SetPlayerInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetPlayerInterface
	bool SetPartyChatInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetPartyChatInterface
	void DumpSessionState();//Engine.OnlineSubsystem.DumpSessionState
	bool SetSharedCloudInterface(class UObject* InCloudInterface);//Engine.OnlineSubsystem.SetSharedCloudInterface
	void Exit();//Engine.OnlineSubsystem.Exit
	bool SetNewsInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetNewsInterface
	struct FUniqueNetId GetPlayerUniqueNetIdFromIndex(int UserIndex);//Engine.OnlineSubsystem.GetPlayerUniqueNetIdFromIndex
	struct FString UniqueNetIdToString(struct FUniqueNetId* IdToConvert);//Engine.OnlineSubsystem.UniqueNetIdToString
	int GetBuildUniqueId();//Engine.OnlineSubsystem.GetBuildUniqueId
	void DumpNetIds(TArray<struct FUniqueNetId>* Players,struct FString DebugLabel);//Engine.OnlineSubsystem.DumpNetIds
	int GetNumSupportedLogins();//Engine.OnlineSubsystem.GetNumSupportedLogins
	bool SetGameInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetGameInterface
	bool StringToUniqueNetId(struct FString UniqueNetIdString,struct FUniqueNetId* out_UniqueId);//Engine.OnlineSubsystem.StringToUniqueNetId
	bool SetTitleFileCacheInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetTitleFileCacheInterface
	bool SetContentInterface(class UObject* NewInterface);//Engine.OnlineSubsystem.SetContentInterface
	bool Init();//Engine.OnlineSubsystem.Init
};
UClass* UOnlineSubsystem::pClassPointer = NULL;

//0x000030 (0x000070 - 0x000040)
//Player[0x102DA050]
class UPlayer : public UObject
{
public:
	DWORD                                              VfTable_FExec;                                    		// 0x000040 (0x0004)              
	class APlayerController*                           Actor;                                            		// 0x000044 (0x0004)              
	int                                                CurrentNetSpeed;                                  		// 0x000048 (0x0004)              
	int                                                ConfiguredInternetSpeed;                          		// 0x00004C (0x0004)              
	int                                                ConfiguredLanSpeed;                               		// 0x000050 (0x0004)              
	int                                                ServerActionRatePerPeriod;                        		// 0x000054 (0x0004)              
	int                                                ServerActionRateAverageSeconds;                   		// 0x000058 (0x0004)              
	int                                                ServerActionRatePerPacket;                        		// 0x00005C (0x0004)              
	float                                              PP_DesaturationMultiplier;                        		// 0x000060 (0x0004)              
	float                                              PP_HighlightsMultiplier;                          		// 0x000064 (0x0004)              
	float                                              PP_MidTonesMultiplier;                            		// 0x000068 (0x0004)              
	float                                              PP_ShadowsMultiplier;                             		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Player");
		return pClassPointer;
	};

public:
	void SwitchController(class APlayerController* PC);//Engine.Player.SwitchController
};
UClass* UPlayer::pClassPointer = NULL;

//0x000230 (0x0002A0 - 0x000070)
//LocalPlayer[0x102D9F20]
class ULocalPlayer : public UPlayer
{
public:
	DWORD                                              VfTable_FObserverInterface;                       		// 0x000070 (0x0004)              
	int                                                ControllerId;                                     		// 0x000074 (0x0004)              
	class UGameViewportClient*                         ViewportClient;                                   		// 0x000078 (0x0004)              
	FVector2                                           Origin;                                           		// 0x00007C (0x0008)              
	FVector2                                           Size;                                             		// 0x000084 (0x0008)              
	class UPostProcessChain*                           PlayerPostProcess;                                		// 0x00008C (0x0004)              
	TArray<class UPostProcessChain*>                   PlayerPostProcessChains;                          		// 0x000090 (0x000C)              
	DWORD                                              ViewState;                                        		// 0x00009C (0x0004)              
	struct FSynchronizedActorVisibilityHistory         ActorVisibilityHistory;                           		// 0x0000A0 (0x0008)              
	FVector3                                           LastViewLocation;                                 		// 0x0000A8 (0x000C)              
	struct FCurrentPostProcessVolumeInfo               CurrentPPInfo;                                    		// 0x0000B4 (0x00E0)              
	unsigned long                                      bOverridePostProcessSettings : 1;                 		// 0x000194 (0x0004) [0x00000001] 
	unsigned long                                      bSentSplitJoin : 1;                               		// 0x000194 (0x0004) [0x00000002] 
	unsigned long                                      bPendingServerAuth : 1;                           		// 0x000194 (0x0004) [0x00000004] 
	struct FPostProcessSettings                        PostProcessSettingsOverride;                      		// 0x000198 (0x00CC)              
	double                                             PPSettingsOverrideStartBlend;                     		// 0x000264 (0x0008)              
	float                                              ServerAuthTimestamp;                              		// 0x00026C (0x0004)              
	int                                                ServerAuthTimeout;                                		// 0x000270 (0x0004)              
	int                                                ServerAuthRetryCount;                             		// 0x000274 (0x0004)              
	int                                                MaxServerAuthRetryCount;                          		// 0x000278 (0x0004)              
	struct FUniqueNetId                                ServerAuthUID;                                    		// 0x00027C (0x0008)              
	FVector3                                           m_CachedViewLocation;                             		// 0x000284 (0x000C)              
	FRotator                                           m_CachedViewRotation;                             		// 0x000290 (0x000C)              
	class UTranslationContext*                         TagContext;                                       		// 0x00029C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LocalPlayer");
		return pClassPointer;
	};

public:
	void SendSplitJoin();//Engine.LocalPlayer.SendSplitJoin
	void SetControllerId(int NewControllerId);//Engine.LocalPlayer.SetControllerId
	bool GetActorVisibility(class AActor* TestActor);//Engine.LocalPlayer.GetActorVisibility
	struct FUniqueNetId GetUniqueNetId();//Engine.LocalPlayer.GetUniqueNetId
	void UpdateOverridePostProcessSettings(struct FPostProcessSettings OverrideSettings);//Engine.LocalPlayer.UpdateOverridePostProcessSettings
	bool RemovePostProcessingChain(int InIndex);//Engine.LocalPlayer.RemovePostProcessingChain
	struct FString GetNickname();//Engine.LocalPlayer.GetNickname
	void OverridePostProcessSettings(struct FPostProcessSettings OverrideSettings,double StartBlendTime);//Engine.LocalPlayer.OverridePostProcessSettings
	bool InsertPostProcessingChain(class UPostProcessChain* InChain,int InIndex,bool bInClone);//Engine.LocalPlayer.InsertPostProcessingChain
	void ClearPostProcessSettingsOverride();//Engine.LocalPlayer.ClearPostProcessSettingsOverride
	void TouchPlayerPostProcessChain();//Engine.LocalPlayer.TouchPlayerPostProcessChain
	bool SpawnPlayActor(struct FString URL,struct FString* OutError);//Engine.LocalPlayer.SpawnPlayActor
	class UTranslationContext* GetTranslationContext();//Engine.LocalPlayer.GetTranslationContext
	class UPostProcessChain* GetPostProcessChain(int InIndex);//Engine.LocalPlayer.GetPostProcessChain
	bool RemoveAllPostProcessingChains();//Engine.LocalPlayer.RemoveAllPostProcessingChains
};
UClass* ULocalPlayer::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//PostProcessChain[0x102D9930]
class UPostProcessChain : public UObject
{
public:
	TArray<class UPostProcessEffect*>                  Effects;                                          		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PostProcessChain");
		return pClassPointer;
	};

public:
	class UPostProcessEffect* FindPostProcessEffect(struct FName EffectName);//Engine.PostProcessChain.FindPostProcessEffect
};
UClass* UPostProcessChain::pClassPointer = NULL;

//0x000025 (0x000065 - 0x000040)
//PostProcessEffect[0x102D9800]
class UPostProcessEffect : public UObject
{
public:
	unsigned long                                      bShowInEditor : 1;                                		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      bShowInGame : 1;                                  		// 0x000040 (0x0004) [0x00000002] 
	unsigned long                                      bUseWorldSettings : 1;                            		// 0x000040 (0x0004) [0x00000004] 
	unsigned long                                      bAffectsLightingOnly : 1;                         		// 0x000040 (0x0004) [0x00000008] 
	struct FName                                       EffectName;                                       		// 0x000044 (0x0008)              
	int                                                NodePosY;                                         		// 0x00004C (0x0004)              
	int                                                NodePosX;                                         		// 0x000050 (0x0004)              
	int                                                DrawWidth;                                        		// 0x000054 (0x0004)              
	int                                                DrawHeight;                                       		// 0x000058 (0x0004)              
	int                                                OutDrawY;                                         		// 0x00005C (0x0004)              
	int                                                InDrawY;                                          		// 0x000060 (0x0004)              
	unsigned char                                      SceneDPG;                                         		// 0x000064 (0x0001)              PROPERTY: ESceneDepthPriorityGroup

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PostProcessEffect");
		return pClassPointer;
	};
};
UClass* UPostProcessEffect::pClassPointer = NULL;

//0x00005F (0x0000C4 - 0x000065)
//AmbientOcclusionEffect[0x102D96D0]
class UAmbientOcclusionEffect : public UPostProcessEffect
{
public:
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	struct FLinearColor                                OcclusionColor;                                   		// 0x000068 (0x0010)              
	float                                              OcclusionPower;                                   		// 0x000078 (0x0004)              
	float                                              OcclusionScale;                                   		// 0x00007C (0x0004)              
	float                                              OcclusionBias;                                    		// 0x000080 (0x0004)              
	float                                              MinOcclusion;                                     		// 0x000084 (0x0004)              
	float                                              OcclusionRadius;                                  		// 0x000088 (0x0004)              
	float                                              OcclusionAttenuation;                             		// 0x00008C (0x0004)              
	unsigned char                                      OcclusionQuality;                                 		// 0x000090 (0x0001)              PROPERTY: EAmbientOcclusionQuality
	unsigned char                                      _0x000091[0x3];                                   		// 0x000091 (0x0003) MISSED OFFSET
	float                                              OcclusionFadeoutMinDistance;                      		// 0x000094 (0x0004)              
	float                                              OcclusionFadeoutMaxDistance;                      		// 0x000098 (0x0004)              
	float                                              HaloDistanceThreshold;                            		// 0x00009C (0x0004)              
	float                                              HaloDistanceScale;                                		// 0x0000A0 (0x0004)              
	float                                              HaloOcclusion;                                    		// 0x0000A4 (0x0004)              
	float                                              HaloSampleWeight;                                 		// 0x0000A8 (0x0004)              
	float                                              EdgeDistanceThreshold;                            		// 0x0000AC (0x0004)              
	float                                              EdgeDistanceScale;                                		// 0x0000B0 (0x0004)              
	float                                              FilterDistanceScale;                              		// 0x0000B4 (0x0004)              
	int                                                FilterSize;                                       		// 0x0000B8 (0x0004)              
	float                                              HistoryConvergenceTime;                           		// 0x0000BC (0x0004)              
	float                                              HistoryWeightConvergenceTime;                     		// 0x0000C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AmbientOcclusionEffect");
		return pClassPointer;
	};
};
UClass* UAmbientOcclusionEffect::pClassPointer = NULL;

//0x000003 (0x000068 - 0x000065)
//BloomEffect[0x102D95A0]
class UBloomEffect : public UPostProcessEffect
{
public:
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.BloomEffect");
		return pClassPointer;
	};
};
UClass* UBloomEffect::pClassPointer = NULL;

//0x000027 (0x00008C - 0x000065)
//DOFEffect[0x102D9470]
class UDOFEffect : public UPostProcessEffect
{
public:
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	struct FDOFParameters                              DOFParameters;                                    		// 0x000068 (0x0020)              
	DWORD                                              ModulateBlurColor;                                		// 0x000088 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DOFEffect");
		return pClassPointer;
	};
};
UClass* UDOFEffect::pClassPointer = NULL;

//0x000004 (0x000090 - 0x00008C)
//DOFAndBloomEffect[0x102D9340]
class UDOFAndBloomEffect : public UDOFEffect
{
public:
	float                                              BloomScale;                                       		// 0x00008C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DOFAndBloomEffect");
		return pClassPointer;
	};
};
UClass* UDOFAndBloomEffect::pClassPointer = NULL;

//0x000028 (0x0000B8 - 0x000090)
//UberPostProcessEffect[0x102D9210]
class UUberPostProcessEffect : public UDOFAndBloomEffect
{
public:
	FVector3                                           SceneShadows;                                     		// 0x000090 (0x000C)              
	FVector3                                           SceneHighLights;                                  		// 0x00009C (0x000C)              
	FVector3                                           SceneMidTones;                                    		// 0x0000A8 (0x000C)              
	float                                              SceneDesaturation;                                		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UberPostProcessEffect");
		return pClassPointer;
	};
};
UClass* UUberPostProcessEffect::pClassPointer = NULL;

//0x000007 (0x00006C - 0x000065)
//MaterialEffect[0x102D90E0]
class UMaterialEffect : public UPostProcessEffect
{
public:
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	class UMaterialInterface*                          Material;                                         		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialEffect");
		return pClassPointer;
	};
};
UClass* UMaterialEffect::pClassPointer = NULL;

//0x000017 (0x00007C - 0x000065)
//MotionBlurEffect[0x102D8FB0]
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	unsigned char                                      _0x000065[0x3];                                   		// 0x000065 (0x0003) MISSED OFFSET
	float                                              MaxVelocity;                                      		// 0x000068 (0x0004)              
	float                                              MotionBlurAmount;                                 		// 0x00006C (0x0004)              
	unsigned long                                      FullMotionBlur : 1;                               		// 0x000070 (0x0004) [0x00000001] 
	float                                              CameraRotationThreshold;                          		// 0x000074 (0x0004)              
	float                                              CameraTranslationThreshold;                       		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MotionBlurEffect");
		return pClassPointer;
	};
};
UClass* UMotionBlurEffect::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//PrimitiveComponentFactory[0x102D8E80]
class UPrimitiveComponentFactory : public UObject
{
public:
	unsigned long                                      CollideActors : 1;                                		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      BlockActors : 1;                                  		// 0x000040 (0x0004) [0x00000002] 
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x000040 (0x0004) [0x00000004] 
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x000040 (0x0004) [0x00000008] 
	unsigned long                                      BlockRigidBody : 1;                               		// 0x000040 (0x0004) [0x00000010] 
	unsigned long                                      HiddenGame : 1;                                   		// 0x000040 (0x0004) [0x00000020] 
	unsigned long                                      HiddenEditor : 1;                                 		// 0x000040 (0x0004) [0x00000040] 
	unsigned long                                      CastShadow : 1;                                   		// 0x000040 (0x0004) [0x00000080] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PrimitiveComponentFactory");
		return pClassPointer;
	};
};
UClass* UPrimitiveComponentFactory::pClassPointer = NULL;

//0x00000C (0x000050 - 0x000044)
//MeshComponentFactory[0x102D8D50]
class UMeshComponentFactory : public UPrimitiveComponentFactory
{
public:
	TArray<class UMaterialInterface*>                  Materials;                                        		// 0x000044 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MeshComponentFactory");
		return pClassPointer;
	};
};
UClass* UMeshComponentFactory::pClassPointer = NULL;

//0x000004 (0x000054 - 0x000050)
//StaticMeshComponentFactory[0x102D8C20]
class UStaticMeshComponentFactory : public UMeshComponentFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.StaticMeshComponentFactory");
		return pClassPointer;
	};
};
UClass* UStaticMeshComponentFactory::pClassPointer = NULL;

//0x00005C (0x00009C - 0x000040)
//ReachSpec[0x102D8AF0]
class UReachSpec : public UObject
{
public:
	DWORD                                              NavOctreeObject;                                  		// 0x000040 (0x0004)              
	int                                                Distance;                                         		// 0x000044 (0x0004)              
	FVector3                                           Direction;                                        		// 0x000048 (0x000C)              
	class ANavigationPoint*                            Start;                                            		// 0x000054 (0x0004)              
	struct FNavReference                               End;                                              		// 0x000058 (0x0014)              
	int                                                CollisionRadius;                                  		// 0x00006C (0x0004)              
	int                                                CollisionHeight;                                  		// 0x000070 (0x0004)              
	int                                                reachFlags;                                       		// 0x000074 (0x0004)              
	int                                                MaxLandingVelocity;                               		// 0x000078 (0x0004)              
	unsigned char                                      bPruned;                                          		// 0x00007C (0x0001)              PROPERTY: 
	unsigned char                                      PathColorIndex;                                   		// 0x00007D (0x0001)              PROPERTY: 
	unsigned char                                      _0x00007E[0x2];                                   		// 0x00007E (0x0002) MISSED OFFSET
	unsigned long                                      bAddToNavigationOctree : 1;                       		// 0x000080 (0x0004) [0x00000001] 
	unsigned long                                      bCanCutCorners : 1;                               		// 0x000080 (0x0004) [0x00000002] 
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x000080 (0x0004) [0x00000004] 
	unsigned long                                      bSkipPrune : 1;                                   		// 0x000080 (0x0004) [0x00000008] 
	unsigned long                                      bDisabled : 1;                                    		// 0x000080 (0x0004) [0x00000010] 
	TArray<class UClass*>                              PruneSpecList;                                    		// 0x000084 (0x000C)              
	struct FName                                       ForcedPathSizeName;                               		// 0x000090 (0x0008)              
	class AActor*                                      BlockedBy;                                        		// 0x000098 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ReachSpec");
		return pClassPointer;
	};

public:
	bool IsBlockedFor(class APawn* P);//Engine.ReachSpec.IsBlockedFor
	int CostFor(class APawn* P);//Engine.ReachSpec.CostFor
};
UClass* UReachSpec::pClassPointer = NULL;

//0x000000 (0x00009C - 0x00009C)
//AdvancedReachSpec[0x102D89C0]
class UAdvancedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AdvancedReachSpec");
		return pClassPointer;
	};
};
UClass* UAdvancedReachSpec::pClassPointer = NULL;

//0x000000 (0x00009C - 0x00009C)
//CeilingReachSpec[0x102D8890]
class UCeilingReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CeilingReachSpec");
		return pClassPointer;
	};
};
UClass* UCeilingReachSpec::pClassPointer = NULL;

//0x000000 (0x00009C - 0x00009C)
//ForcedReachSpec[0x102D8760]
class UForcedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ForcedReachSpec");
		return pClassPointer;
	};
};
UClass* UForcedReachSpec::pClassPointer = NULL;

//0x000001 (0x00009D - 0x00009C)
//CoverSlipReachSpec[0x102D8630]
class UCoverSlipReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x00009C (0x0001)              PROPERTY: 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CoverSlipReachSpec");
		return pClassPointer;
	};
};
UClass* UCoverSlipReachSpec::pClassPointer = NULL;

//0x000000 (0x00009C - 0x00009C)
//FloorToCeilingReachSpec[0x102D8500]
class UFloorToCeilingReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FloorToCeilingReachSpec");
		return pClassPointer;
	};
};
UClass* UFloorToCeilingReachSpec::pClassPointer = NULL;

//0x000000 (0x00009C - 0x00009C)
//MantleReachSpec[0x102D83D0]
class UMantleReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MantleReachSpec");
		return pClassPointer;
	};
};
UClass* UMantleReachSpec::pClassPointer = NULL;

//0x000001 (0x00009D - 0x00009C)
//SlotToSlotReachSpec[0x102D82A0]
class USlotToSlotReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x00009C (0x0001)              PROPERTY: 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SlotToSlotReachSpec");
		return pClassPointer;
	};
};
UClass* USlotToSlotReachSpec::pClassPointer = NULL;

//0x000001 (0x00009D - 0x00009C)
//SwatTurnReachSpec[0x102D8170]
class USwatTurnReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x00009C (0x0001)              PROPERTY: 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SwatTurnReachSpec");
		return pClassPointer;
	};
};
UClass* USwatTurnReachSpec::pClassPointer = NULL;

//0x000000 (0x00009C - 0x00009C)
//WallTransReachSpec[0x102D8040]
class UWallTransReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.WallTransReachSpec");
		return pClassPointer;
	};
};
UClass* UWallTransReachSpec::pClassPointer = NULL;

//0x000000 (0x00009C - 0x00009C)
//ProscribedReachSpec[0x102D7F10]
class UProscribedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ProscribedReachSpec");
		return pClassPointer;
	};
};
UClass* UProscribedReachSpec::pClassPointer = NULL;

//0x000000 (0x00009C - 0x00009C)
//TeleportReachSpec[0x102D7DE0]
class UTeleportReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TeleportReachSpec");
		return pClassPointer;
	};
};
UClass* UTeleportReachSpec::pClassPointer = NULL;

//0x000080 (0x0000C0 - 0x000040)
//RWTechNode[0x102D7CB0]
class URWTechNode : public UObject
{
public:
	class AActor*                                      m_pInteractingActor;                              		// 0x000040 (0x0004)              
	FRotator                                           m_rVNodeOrientation;                              		// 0x000044 (0x000C)              
	class URWTechNode*                                 m_pParentPFNode;                                  		// 0x000050 (0x0004)              
	FVector3                                           Location;                                         		// 0x000054 (0x000C)              
	TArray<class URWTechReachSpec*>                    PathList;                                         		// 0x000060 (0x000C)              
	TArray<class URWTechReachSpec*>                    IncomingEdges;                                    		// 0x00006C (0x000C)              
	int                                                NodeID;                                           		// 0x000078 (0x0004)              
	unsigned long                                      IsJunction : 1;                                   		// 0x00007C (0x0004) [0x00000001] 
	unsigned long                                      IsSpawnPoint : 1;                                 		// 0x00007C (0x0004) [0x00000002] 
	unsigned long                                      IsDetailed : 1;                                   		// 0x00007C (0x0004) [0x00000004] 
	unsigned long                                      IsVignetteNode : 1;                               		// 0x00007C (0x0004) [0x00000008] 
	unsigned long                                      IsVignetteDecisionPoint : 1;                      		// 0x00007C (0x0004) [0x00000010] 
	unsigned long                                      bIsSpawnPending : 1;                              		// 0x00007C (0x0004) [0x00000020] 
	unsigned long                                      m_bOccupied : 1;                                  		// 0x00007C (0x0004) [0x00000040] 
	unsigned long                                      m_bBroken : 1;                                    		// 0x00007C (0x0004) [0x00000080] 
	float                                              m_fSpawnPendingTimer;                             		// 0x000080 (0x0004)              
	TArray<class URWTechNode*>                         SpawnNodeRefs;                                    		// 0x000084 (0x000C)              
	float                                              PathWidth;                                        		// 0x000090 (0x0004)              
	class URWTechNode*                                 ParentJunctionNodeRef;                            		// 0x000094 (0x0004)              
	double                                             m_fTimeLastUsed;                                  		// 0x000098 (0x0008)              
	int                                                m_ExtendedNodeTypes;                              		// 0x0000A0 (0x0004)              
	int                                                m_nBlockID;                                       		// 0x0000A4 (0x0004)              
	TArray<unsigned char>                              m_abyteCompressedEdgeIndexForSDNode;              		// 0x0000A8 (0x000C)              
	class UObject*                                     m_pVignetteDescriptor;                            		// 0x0000B4 (0x0004)              
	class AActor*                                      m_pGeometryProp;                                  		// 0x0000B8 (0x0004)              
	class UcImporterNode*                              m_pImporterNode;                                  		// 0x0000BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RWTechNode");
		return pClassPointer;
	};

public:
	bool DisconnectAllEdges();//Engine.RWTechNode.DisconnectAllEdges
	bool UndoLastEdgeDisconnection();//Engine.RWTechNode.UndoLastEdgeDisconnection
	bool DisconnectAllEdgesExceptOne(int pr_nEdgeIDNotToDisconnect);//Engine.RWTechNode.DisconnectAllEdgesExceptOne
};
UClass* URWTechNode::pClassPointer = NULL;

//0x000000 (0x0000C0 - 0x0000C0)
//Pedestrian[0x102D7B80]
class UPedestrian : public URWTechNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Pedestrian");
		return pClassPointer;
	};
};
UClass* UPedestrian::pClassPointer = NULL;

//0x000000 (0x0000C0 - 0x0000C0)
//PavementLane[0x102D7A50]
class UPavementLane : public UPedestrian
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PavementLane");
		return pClassPointer;
	};
};
UClass* UPavementLane::pClassPointer = NULL;

//0x000000 (0x0000C0 - 0x0000C0)
//PedestrianCrossingLane[0x102D7920]
class UPedestrianCrossingLane : public UPedestrian
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PedestrianCrossingLane");
		return pClassPointer;
	};
};
UClass* UPedestrianCrossingLane::pClassPointer = NULL;

//0x000000 (0x0000C0 - 0x0000C0)
//PedestrianFeature[0x102D77F0]
class UPedestrianFeature : public UPedestrian
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PedestrianFeature");
		return pClassPointer;
	};
};
UClass* UPedestrianFeature::pClassPointer = NULL;

//0x000010 (0x0000D0 - 0x0000C0)
//Road[0x102D76C0]
class URoad : public URWTechNode
{
public:
	FVector2                                           m_direction;                                      		// 0x0000C0 (0x0008)              
	float                                              m_width;                                          		// 0x0000C8 (0x0004)              
	float                                              m_nSelectionFrequency;                            		// 0x0000CC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Road");
		return pClassPointer;
	};
};
UClass* URoad::pClassPointer = NULL;

//0x000000 (0x0000D0 - 0x0000D0)
//RoadLane[0x102D7590]
class URoadLane : public URoad
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RoadLane");
		return pClassPointer;
	};
};
UClass* URoadLane::pClassPointer = NULL;

//0x000000 (0x0000D0 - 0x0000D0)
//VehicleFeature[0x102D7460]
class UVehicleFeature : public URoad
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.VehicleFeature");
		return pClassPointer;
	};
};
UClass* UVehicleFeature::pClassPointer = NULL;

//0x00009C (0x0000DC - 0x000040)
//RWTechReachSpec[0x102D7330]
class URWTechReachSpec : public UObject
{
public:
	class URWTechNode*                                 Start;                                            		// 0x000040 (0x0004)              
	class URWTechNode*                                 End;                                              		// 0x000044 (0x0004)              
	int                                                EdgeID;                                           		// 0x000048 (0x0004)              
	int                                                numRegisteredNPCVehicles;                         		// 0x00004C (0x0004)              
	class URWTechNode*                                 AlternateSpawnPoint;                              		// 0x000050 (0x0004)              
	TArray<class URWTechReachSpec*>                    LinkEdgeRefs;                                     		// 0x000054 (0x000C)              
	TArray<unsigned char>                              LinkEdgeTurns;                                    		// 0x000060 (0x000C)              
	TArray<int>                                        AllowedPathIDs;                                   		// 0x00006C (0x000C)              
	class URWTechReachSpec*                            ParentEdgeRef;                                    		// 0x000078 (0x0004)              
	unsigned long                                      IsJunction : 1;                                   		// 0x00007C (0x0004) [0x00000001] 
	unsigned long                                      IsBezierCurve : 1;                                		// 0x00007C (0x0004) [0x00000002] 
	unsigned char                                      m_nStartPriority;                                 		// 0x000080 (0x0001)              PROPERTY: 
	unsigned char                                      m_nEndPriority;                                   		// 0x000081 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000082[0x2];                                   		// 0x000082 (0x0002) MISSED OFFSET
	int                                                LeftSiblingID;                                    		// 0x000084 (0x0004)              
	int                                                RightSiblingID;                                   		// 0x000088 (0x0004)              
	class URWTechReachSpec*                            LeftSiblingRef;                                   		// 0x00008C (0x0004)              
	class URWTechReachSpec*                            RightSiblingRef;                                  		// 0x000090 (0x0004)              
	struct FString                                     sPropGUID;                                        		// 0x000094 (0x000C)              
	int                                                m_nEdgeUserIdx;                                   		// 0x0000A0 (0x0004)              
	int                                                TrafficLightGroup;                                		// 0x0000A4 (0x0004)              
	class URWTechNode*                                 ParentJunctionNodeRef;                            		// 0x0000A8 (0x0004)              
	FVector3                                           BezierControlPoints[0x2];                         		// 0x0000AC (0x0018)              
	float                                              m_fDistance;                                      		// 0x0000C4 (0x0004)              
	float                                              m_fPathGraphWeight;                               		// 0x0000C8 (0x0004)              
	struct FString                                     m_strStreetName;                                  		// 0x0000CC (0x000C)              
	class UcImporterEdge*                              m_pImporterEdge;                                  		// 0x0000D8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RWTechReachSpec");
		return pClassPointer;
	};

public:
	void Render2D(class UCanvas* Canvas,struct FLinearColor Col);//Engine.RWTechReachSpec.Render2D
	int GetReferenceIndex(class URWTechReachSpec* pr_pRefEdge);//Engine.RWTechReachSpec.GetReferenceIndex
	bool IsInAllowedPathList(int pr_nEdgeId);//Engine.RWTechReachSpec.IsInAllowedPathList
	int GetLaneCount();//Engine.RWTechReachSpec.GetLaneCount
	void GetMidpoint(FVector3* pr_vMidpoint);//Engine.RWTechReachSpec.GetMidpoint
	void GenerateDTNodes(class URWTechNode* pr_pStartDTNode,class URWTechReachSpec* pr_pNextPFEdge,TArray<class URWTechNode*>* pr_aOutNodes,bool pr_bRemoveExistingNodes);//Engine.RWTechReachSpec.GenerateDTNodes
	class URWTechReachSpec* GetOtherDirectionEdge();//Engine.RWTechReachSpec.GetOtherDirectionEdge
	bool GetEdgeIntersection(class URWTechReachSpec* pCrossingEdge,float* U);//Engine.RWTechReachSpec.GetEdgeIntersection
	int FindEdgeInNextPaths(class URWTechReachSpec* pEdge);//Engine.RWTechReachSpec.FindEdgeInNextPaths
	bool IsEdgeInNextPaths(class URWTechReachSpec* pEdge);//Engine.RWTechReachSpec.IsEdgeInNextPaths
	bool IsVehicleTypeAllowed(unsigned char pr_type);//Engine.RWTechReachSpec.IsVehicleTypeAllowed
	void GetLocationAndDirection(float fDistance,FVector3* vLocation,FVector3* vDirection);//Engine.RWTechReachSpec.GetLocationAndDirection
	void Render(class UCanvas* Canvas,DWORD Col,float fZOffset);//Engine.RWTechReachSpec.Render
};
UClass* URWTechReachSpec::pClassPointer = NULL;

//0x000000 (0x0000DC - 0x0000DC)
//PedestrianCrossingPFReachSpec[0x102D7200]
class UPedestrianCrossingPFReachSpec : public URWTechReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PedestrianCrossingPFReachSpec");
		return pClassPointer;
	};
};
UClass* UPedestrianCrossingPFReachSpec::pClassPointer = NULL;

//0x000004 (0x0000E0 - 0x0000DC)
//PedestrianReachSpec[0x102D70D0]
class UPedestrianReachSpec : public URWTechReachSpec
{
public:
	float                                              fFlatHeight;                                      		// 0x0000DC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PedestrianReachSpec");
		return pClassPointer;
	};
};
UClass* UPedestrianReachSpec::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//PavementLaneReachSpec[0x102D6FA0]
class UPavementLaneReachSpec : public UPedestrianReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PavementLaneReachSpec");
		return pClassPointer;
	};
};
UClass* UPavementLaneReachSpec::pClassPointer = NULL;

//0x00003C (0x00011C - 0x0000E0)
//PedestrianCrossingLaneReachSpec[0x102D6E70]
class UPedestrianCrossingLaneReachSpec : public UPedestrianReachSpec
{
public:
	class ANavigationPoint*                            m_parentNode;                                     		// 0x0000E0 (0x0004)              
	TArray<int>                                        CrossedIncomingDetailedEdgeIDs;                   		// 0x0000E4 (0x000C)              
	TArray<class URoadLaneReachSpec*>                  CrossedIncomingDetailedEdgeRefs;                  		// 0x0000F0 (0x000C)              
	TArray<int>                                        CrossedOutgoingDetailedEdgeIDs;                   		// 0x0000FC (0x000C)              
	TArray<class URoadLaneReachSpec*>                  CrossedOutgoingDetailedEdgeRefs;                  		// 0x000108 (0x000C)              
	int                                                CrossedPathfindingEdgeID;                         		// 0x000114 (0x0004)              
	class URoadReachSpec*                              CrossedPathfindingEdgeRef;                        		// 0x000118 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PedestrianCrossingLaneReachSpec");
		return pClassPointer;
	};
};
UClass* UPedestrianCrossingLaneReachSpec::pClassPointer = NULL;

//0x00001C (0x0000F8 - 0x0000DC)
//RoadReachSpec[0x102D6D40]
class URoadReachSpec : public URWTechReachSpec
{
public:
	float                                              m_fSpeedLimit;                                    		// 0x0000DC (0x0004)              
	TArray<unsigned char>                              m_aAllowedTypes;                                  		// 0x0000E0 (0x000C)              
	unsigned long                                      m_bObstructed : 1;                                		// 0x0000EC (0x0004) [0x00000001] 
	float                                              m_fTimeWithNoVehicles;                            		// 0x0000F0 (0x0004)              
	int                                                m_nSpawnEligibilityTimer;                         		// 0x0000F4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RoadReachSpec");
		return pClassPointer;
	};
};
UClass* URoadReachSpec::pClassPointer = NULL;

//0x000024 (0x00011C - 0x0000F8)
//RoadLaneReachSpec[0x102D6C10]
class URoadLaneReachSpec : public URoadReachSpec
{
public:
	TArray<int>                                        CrossedEdgeJunctionIDs;                           		// 0x0000F8 (0x000C)              
	TArray<class URoadLaneReachSpec*>                  CrossedEdgeJunctionRefs;                          		// 0x000104 (0x000C)              
	TArray<float>                                      CrossedEdgeDistances;                             		// 0x000110 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RoadLaneReachSpec");
		return pClassPointer;
	};
};
UClass* URoadLaneReachSpec::pClassPointer = NULL;

//0x00009C (0x0000DC - 0x000040)
//SavedMove[0x102D6AE0]
class USavedMove : public UObject
{
public:
	class USavedMove*                                  NextMove;                                         		// 0x000040 (0x0004)              
	double                                             TimeStamp;                                        		// 0x000044 (0x0008)              
	float                                              Delta;                                            		// 0x00004C (0x0004)              
	unsigned long                                      bRun : 1;                                         		// 0x000050 (0x0004) [0x00000001] 
	unsigned long                                      bDuck : 1;                                        		// 0x000050 (0x0004) [0x00000002] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x000050 (0x0004) [0x00000004] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x000050 (0x0004) [0x00000008] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x000050 (0x0004) [0x00000010] 
	unsigned char                                      SavedPhysics;                                     		// 0x000054 (0x0001)              PROPERTY: EPhysics
	unsigned char                                      _0x000055[0x3];                                   		// 0x000055 (0x0003) MISSED OFFSET
	FVector3                                           StartLocation;                                    		// 0x000058 (0x000C)              
	FVector3                                           StartRelativeLocation;                            		// 0x000064 (0x000C)              
	FVector3                                           StartVelocity;                                    		// 0x000070 (0x000C)              
	FVector3                                           StartFloor;                                       		// 0x00007C (0x000C)              
	FVector3                                           SavedLocation;                                    		// 0x000088 (0x000C)              
	FVector3                                           SavedVelocity;                                    		// 0x000094 (0x000C)              
	FVector3                                           SavedRelativeLocation;                            		// 0x0000A0 (0x000C)              
	FVector3                                           RMVelocity;                                       		// 0x0000AC (0x000C)              
	FVector3                                           Acceleration;                                     		// 0x0000B8 (0x000C)              
	FRotator                                           Rotation;                                         		// 0x0000C4 (0x000C)              
	class AActor*                                      StartBase;                                        		// 0x0000D0 (0x0004)              
	class AActor*                                      EndBase;                                          		// 0x0000D4 (0x0004)              
	float                                              AccelDotThreshold;                                		// 0x0000D8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SavedMove");
		return pClassPointer;
	};

public:
	void Clear();//Engine.SavedMove.Clear
	FVector3 GetStartLocation();//Engine.SavedMove.GetStartLocation
	void SetInitialPosition(class APawn* P);//Engine.SavedMove.SetInitialPosition
	unsigned char CompressedFlags();//Engine.SavedMove.CompressedFlags
};
UClass* USavedMove::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//SaveGameSummary[0x102D69B0]
class USaveGameSummary : public UObject
{
public:
	struct FName                                       BaseLevel;                                        		// 0x000040 (0x0008)              
	struct FString                                     Description;                                      		// 0x000048 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SaveGameSummary");
		return pClassPointer;
	};
};
UClass* USaveGameSummary::pClassPointer = NULL;

//0x000030 (0x000070 - 0x000040)
//Settings[0x102D6750]
class USettings : public UObject
{
public:
	TArray<struct FLocalizedStringSetting>             LocalizedSettings;                                		// 0x000040 (0x000C)              
	TArray<struct FSettingsProperty>                   Properties;                                       		// 0x00004C (0x000C)              
	TArray<struct FLocalizedStringSettingMetaData>     LocalizedSettingsMappings;                        		// 0x000058 (0x000C)              
	TArray<struct FSettingsPropertyPropertyMetaData>   PropertyMappings;                                 		// 0x000064 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Settings");
		return pClassPointer;
	};

public:
	bool GetStringProperty(int PropertyId,struct FString* Value);//Engine.Settings.GetStringProperty
	void GetSettingsDataBlob(struct FSettingsData* Data,TArray<unsigned char>* OutBlob);//Engine.Settings.GetSettingsDataBlob
	struct FName GetStringSettingValueNameByName(struct FName StringSettingName);//Engine.Settings.GetStringSettingValueNameByName
	bool SetStringSettingValueFromStringByName(struct FName StringSettingName,struct FString* NewValue);//Engine.Settings.SetStringSettingValueFromStringByName
	void GetQoSAdvertisedProperties(TArray<struct FSettingsProperty>* QoSProps);//Engine.Settings.GetQoSAdvertisedProperties
	unsigned char GetPropertyType(int PropertyId);//Engine.Settings.GetPropertyType
	void SetSettingsDataFloat(struct FSettingsData* Data,float InFloat);//Engine.Settings.SetSettingsDataFloat
	int GetSettingsDataInt(struct FSettingsData* Data);//Engine.Settings.GetSettingsDataInt
	struct FName GetStringSettingName(int StringSettingId);//Engine.Settings.GetStringSettingName
	bool GetPropertyValueId(int PropertyId,int* ValueId);//Engine.Settings.GetPropertyValueId
	bool HasProperty(int PropertyId);//Engine.Settings.HasProperty
	bool GetStringSettingValueNames(int StringSettingId,TArray<struct FIdToStringMapping>* Values);//Engine.Settings.GetStringSettingValueNames
	struct FName GetPropertyName(int PropertyId);//Engine.Settings.GetPropertyName
	void AppendContextsToURL(struct FString* URL);//Engine.Settings.AppendContextsToURL
	void AppendPropertiesToURL(struct FString* URL);//Engine.Settings.AppendPropertiesToURL
	bool GetStringSettingValueByName(struct FName StringSettingName,int* ValueIndex);//Engine.Settings.GetStringSettingValueByName
	struct FString GetStringSettingColumnHeader(int StringSettingId);//Engine.Settings.GetStringSettingColumnHeader
	void UpdateFromURL(struct FString* URL,class AGameInfo* Game);//Engine.Settings.UpdateFromURL
	void BuildURL(struct FString* URL);//Engine.Settings.BuildURL
	struct FString GetPropertyAsStringByName(struct FName PropertyName);//Engine.Settings.GetPropertyAsStringByName
	float GetSettingsDataFloat(struct FSettingsData* Data);//Engine.Settings.GetSettingsDataFloat
	void SetSettingsDataDateTime(struct FSettingsData* Data,int InInt1,int InInt2);//Engine.Settings.SetSettingsDataDateTime
	bool HasStringSetting(int SettingId);//Engine.Settings.HasStringSetting
	bool GetFloatProperty(int PropertyId,float* Value);//Engine.Settings.GetFloatProperty
	void SetSettingsData(struct FSettingsData* Data,struct FSettingsData* Data2Copy);//Engine.Settings.SetSettingsData
	bool GetStringSettingValue(int StringSettingId,int* ValueIndex);//Engine.Settings.GetStringSettingValue
	void AppendDataBindingsToURL(struct FString* URL);//Engine.Settings.AppendDataBindingsToURL
	bool SetPropertyFromStringByName(struct FName PropertyName,struct FString* NewValue);//Engine.Settings.SetPropertyFromStringByName
	void GetQoSAdvertisedStringSettings(TArray<struct FLocalizedStringSetting>* QoSSettings);//Engine.Settings.GetQoSAdvertisedStringSettings
	bool GetIntProperty(int PropertyId,int* Value);//Engine.Settings.GetIntProperty
	void SetStringSettingValueByName(struct FName StringSettingName,int ValueIndex,bool bShouldAutoAdd);//Engine.Settings.SetStringSettingValueByName
	void SetSettingsDataBlob(struct FSettingsData* Data,TArray<unsigned char>* InBlob);//Engine.Settings.SetSettingsDataBlob
	bool IsWildcardStringSetting(int StringSettingId);//Engine.Settings.IsWildcardStringSetting
	bool GetPropertyId(struct FName PropertyName,int* PropertyId);//Engine.Settings.GetPropertyId
	void UpdateProperties(TArray<struct FSettingsProperty>* Props,bool bShouldAddIfMissing);//Engine.Settings.UpdateProperties
	void SetStringSettingValue(int StringSettingId,int ValueIndex,bool bShouldAutoAdd);//Engine.Settings.SetStringSettingValue
	void SetFloatProperty(int PropertyId,float Value);//Engine.Settings.SetFloatProperty
	bool GetRangedPropertyValue(int PropertyId,float* OutValue);//Engine.Settings.GetRangedPropertyValue
	void EmptySettingsData(struct FSettingsData* Data);//Engine.Settings.EmptySettingsData
	bool GetPropertyMappingType(int PropertyId,unsigned char* OutType);//Engine.Settings.GetPropertyMappingType
	void GetSettingsDataDateTime(struct FSettingsData* Data,int* OutInt1,int* OutInt2);//Engine.Settings.GetSettingsDataDateTime
	bool SetRangedPropertyValue(int PropertyId,float NewValue);//Engine.Settings.SetRangedPropertyValue
	void SetIntProperty(int PropertyId,int Value);//Engine.Settings.SetIntProperty
	struct FName GetStringSettingValueName(int StringSettingId,int ValueIndex);//Engine.Settings.GetStringSettingValueName
	bool GetPropertyRange(int PropertyId,float* OutMinValue,float* OutMaxValue,float* RangeIncrement,unsigned char* bFormatAsInt);//Engine.Settings.GetPropertyRange
	void SetStringProperty(int PropertyId,struct FString Value);//Engine.Settings.SetStringProperty
	struct FString GetPropertyAsString(int PropertyId);//Engine.Settings.GetPropertyAsString
	bool GetStringSettingId(struct FName StringSettingName,int* StringSettingId);//Engine.Settings.GetStringSettingId
	void SetSettingsDataInt(struct FSettingsData* Data,int InInt);//Engine.Settings.SetSettingsDataInt
	bool SetPropertyValueId(int PropertyId,int ValueId);//Engine.Settings.SetPropertyValueId
	struct FString GetPropertyColumnHeader(int PropertyId);//Engine.Settings.GetPropertyColumnHeader
	void UpdateStringSettings(TArray<struct FLocalizedStringSetting>* Settings,bool bShouldAddIfMissing);//Engine.Settings.UpdateStringSettings
	bool IncrementStringSettingValue(int StringSettingId,int Direction,bool bShouldWrap);//Engine.Settings.IncrementStringSettingValue
};
UClass* USettings::pClassPointer = NULL;

//0x000088 (0x0000F8 - 0x000070)
//OnlineGameSearch[0x102D6620]
class UOnlineGameSearch : public USettings
{
public:
	int                                                MaxSearchResults;                                 		// 0x000070 (0x0004)              
	struct FLocalizedStringSetting                     Query;                                            		// 0x000074 (0x000C)              
	unsigned long                                      bIsLanQuery : 1;                                  		// 0x000080 (0x0004) [0x00000001] 
	unsigned long                                      bUsesArbitration : 1;                             		// 0x000080 (0x0004) [0x00000002] 
	unsigned long                                      bIsSearchInProgress : 1;                          		// 0x000080 (0x0004) [0x00000004] 
	class UClass*                                      GameSettingsClass;                                		// 0x000084 (0x0004)              
	TArray<struct FOnlineGameSearchResult>             Results;                                          		// 0x000088 (0x000C)              
	struct FOverrideSkill                              ManualSkillOverride;                              		// 0x000094 (0x0028)              
	TArray<struct FNamedObjectProperty>                NamedProperties;                                  		// 0x0000BC (0x000C)              
	struct FOnlineGameSearchQuery                      FilterQuery;                                      		// 0x0000C8 (0x0018)              
	struct FString                                     AdditionalSearchCriteria;                         		// 0x0000E0 (0x000C)              
	int                                                PingBucketSize;                                   		// 0x0000EC (0x0004)              
	int                                                NumPingProbes;                                    		// 0x0000F0 (0x0004)              
	int                                                MaxPingBytes;                                     		// 0x0000F4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineGameSearch");
		return pClassPointer;
	};

public:
	void SetSkillOverride(int LeaderboardId,TArray<struct FUniqueNetId>* Players);//Engine.OnlineGameSearch.SetSkillOverride
	void SortSearchResults();//Engine.OnlineGameSearch.SortSearchResults
};
UClass* UOnlineGameSearch::pClassPointer = NULL;

//0x000040 (0x0000B0 - 0x000070)
//OnlineGameSettings[0x102D64F0]
class UOnlineGameSettings : public USettings
{
public:
	int                                                NumPublicConnections;                             		// 0x000070 (0x0004)              
	int                                                NumPrivateConnections;                            		// 0x000074 (0x0004)              
	int                                                NumOpenPublicConnections;                         		// 0x000078 (0x0004)              
	int                                                NumOpenPrivateConnections;                        		// 0x00007C (0x0004)              
	struct FQWord                                      ServerNonce;                                      		// 0x000080 (0x0008)              
	unsigned long                                      bShouldAdvertise : 1;                             		// 0x000088 (0x0004) [0x00000001] 
	unsigned long                                      bIsLanMatch : 1;                                  		// 0x000088 (0x0004) [0x00000002] 
	unsigned long                                      bUsesStats : 1;                                   		// 0x000088 (0x0004) [0x00000004] 
	unsigned long                                      bAllowJoinInProgress : 1;                         		// 0x000088 (0x0004) [0x00000008] 
	unsigned long                                      bAllowInvites : 1;                                		// 0x000088 (0x0004) [0x00000010] 
	unsigned long                                      bUsesPresence : 1;                                		// 0x000088 (0x0004) [0x00000020] 
	unsigned long                                      bAllowJoinViaPresence : 1;                        		// 0x000088 (0x0004) [0x00000040] 
	unsigned long                                      bAllowJoinViaPresenceFriendsOnly : 1;             		// 0x000088 (0x0004) [0x00000080] 
	unsigned long                                      bUsesArbitration : 1;                             		// 0x000088 (0x0004) [0x00000100] 
	unsigned long                                      bAntiCheatProtected : 1;                          		// 0x000088 (0x0004) [0x00000200] 
	unsigned long                                      bWasFromInvite : 1;                               		// 0x000088 (0x0004) [0x00000400] 
	unsigned long                                      bIsDedicated : 1;                                 		// 0x000088 (0x0004) [0x00000800] 
	unsigned long                                      bHasSkillUpdateInProgress : 1;                    		// 0x000088 (0x0004) [0x00001000] 
	unsigned long                                      bShouldShrinkArbitratedSessions : 1;              		// 0x000088 (0x0004) [0x00002000] 
	struct FString                                     OwningPlayerName;                                 		// 0x00008C (0x000C)              
	struct FUniqueNetId                                OwningPlayerId;                                   		// 0x000098 (0x0008)              
	int                                                PingInMs;                                         		// 0x0000A0 (0x0004)              
	float                                              MatchQuality;                                     		// 0x0000A4 (0x0004)              
	unsigned char                                      GameState;                                        		// 0x0000A8 (0x0001)              PROPERTY: EOnlineGameState
	unsigned char                                      _0x0000A9[0x3];                                   		// 0x0000A9 (0x0003) MISSED OFFSET
	int                                                BuildUniqueId;                                    		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineGameSettings");
		return pClassPointer;
	};
};
UClass* UOnlineGameSettings::pClassPointer = NULL;

//0x000024 (0x000064 - 0x000040)
//ShadowMap2D[0x102D6160]
class UShadowMap2D : public UObject
{
public:
	class UShadowMapTexture2D*                         Texture;                                          		// 0x000040 (0x0004)              
	FVector2                                           CoordinateScale;                                  		// 0x000044 (0x0008)              
	FVector2                                           CoordinateBias;                                   		// 0x00004C (0x0008)              
	struct FGuid                                       LightGuid;                                        		// 0x000054 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ShadowMap2D");
		return pClassPointer;
	};
};
UClass* UShadowMap2D::pClassPointer = NULL;

//0x0002DC (0x00031C - 0x000040)
//SkeletalMesh[0x102D6030]
class USkeletalMesh : public UObject
{
public:
	struct FBoxSphereBounds                            Bounds;                                           		// 0x000040 (0x001C)              
	TArray<class UMaterialInterface*>                  Materials;                                        		// 0x00005C (0x000C)              
	FVector3                                           Origin;                                           		// 0x000068 (0x000C)              
	FRotator                                           RotOrigin;                                        		// 0x000074 (0x000C)              
	TArray<int>                                        RefSkeleton;                                      		// 0x000080 (0x000C)              
	int                                                SkeletalDepth;                                    		// 0x00008C (0x0004)              
	unsigned char                                      NameIndexMap[0x3C];                               		// 0x000090 (0x003C)              UNKNOWN PROPERTY: MapProperty
	struct FIndirectArray_Mirror                       LODModels;                                        		// 0x0000CC (0x000C)              
	TArray<FMatrix>                                    RefBasesInvMatrix;                                		// 0x0000D8 (0x000C)              
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                  		// 0x0000E4 (0x000C)              
	unsigned char                                      SkelMirrorAxis;                                   		// 0x0000F0 (0x0001)              PROPERTY: EAxis
	unsigned char                                      SkelMirrorFlipAxis;                               		// 0x0000F1 (0x0001)              PROPERTY: EAxis
	unsigned char                                      _0x0000F2[0x2];                                   		// 0x0000F2 (0x0002) MISSED OFFSET
	TArray<class USkeletalMeshSocket*>                 Sockets;                                          		// 0x0000F4 (0x000C)              
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                          		// 0x000100 (0x000C)              
	TArray<struct FName>                               PerPolyCollisionBones;                            		// 0x00010C (0x000C)              
	TArray<struct FName>                               AddToParentPerPolyCollisionBone;                  		// 0x000118 (0x000C)              
	TArray<int>                                        PerPolyBoneKDOPs;                                 		// 0x000124 (0x000C)              
	unsigned long                                      bPerPolyUseSoftWeighting : 1;                     		// 0x000130 (0x0004) [0x00000001] 
	unsigned long                                      bUseSimpleLineCollision : 1;                      		// 0x000130 (0x0004) [0x00000002] 
	unsigned long                                      bUseSimpleBoxCollision : 1;                       		// 0x000130 (0x0004) [0x00000004] 
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x000130 (0x0004) [0x00000008] 
	unsigned long                                      bUseFullPrecisionUVs : 1;                         		// 0x000130 (0x0004) [0x00000010] 
	unsigned long                                      bUseFullPrecisionPositions : 1;                   		// 0x000130 (0x0004) [0x00000020] 
	class UFaceFXAsset*                                FaceFXAsset;                                      		// 0x000134 (0x0004)              
	int                                                LODBiasPC;                                        		// 0x000138 (0x0004)              
	int                                                LODBiasPS3;                                       		// 0x00013C (0x0004)              
	int                                                LODBiasXbox360;                                   		// 0x000140 (0x0004)              
	TArray<DWORD>                                      ClothMesh;                                        		// 0x000144 (0x000C)              
	TArray<float>                                      ClothMeshScale;                                   		// 0x000150 (0x000C)              
	TArray<int>                                        ClothToGraphicsVertMap;                           		// 0x00015C (0x000C)              
	TArray<int>                                        ClothWeldingMap;                                  		// 0x000168 (0x000C)              
	int                                                ClothWeldingDomain;                               		// 0x000174 (0x0004)              
	TArray<int>                                        ClothWeldedIndices;                               		// 0x000178 (0x000C)              
	unsigned long                                      bForceNoWelding : 1;                              		// 0x000184 (0x0004) [0x00000001] 
	int                                                NumFreeClothVerts;                                		// 0x000188 (0x0004)              
	TArray<int>                                        ClothIndexBuffer;                                 		// 0x00018C (0x000C)              
	TArray<struct FName>                               ClothBones;                                       		// 0x000198 (0x000C)              
	unsigned long                                      bEnableClothBendConstraints : 1;                  		// 0x0001A4 (0x0004) [0x00000001] 
	unsigned long                                      bEnableClothDamping : 1;                          		// 0x0001A4 (0x0004) [0x00000002] 
	unsigned long                                      bUseClothCOMDamping : 1;                          		// 0x0001A4 (0x0004) [0x00000004] 
	float                                              ClothStretchStiffness;                            		// 0x0001A8 (0x0004)              
	float                                              ClothBendStiffness;                               		// 0x0001AC (0x0004)              
	float                                              ClothDensity;                                     		// 0x0001B0 (0x0004)              
	float                                              ClothThickness;                                   		// 0x0001B4 (0x0004)              
	float                                              ClothDamping;                                     		// 0x0001B8 (0x0004)              
	int                                                ClothIterations;                                  		// 0x0001BC (0x0004)              
	float                                              ClothFriction;                                    		// 0x0001C0 (0x0004)              
	float                                              ClothRelativeGridSpacing;                         		// 0x0001C4 (0x0004)              
	float                                              ClothPressure;                                    		// 0x0001C8 (0x0004)              
	float                                              ClothCollisionResponseCoefficient;                		// 0x0001CC (0x0004)              
	float                                              ClothAttachmentResponseCoefficient;               		// 0x0001D0 (0x0004)              
	float                                              ClothAttachmentTearFactor;                        		// 0x0001D4 (0x0004)              
	float                                              ClothSleepLinearVelocity;                         		// 0x0001D8 (0x0004)              
	unsigned long                                      bEnableClothOrthoBendConstraints : 1;             		// 0x0001DC (0x0004) [0x00000001] 
	unsigned long                                      bEnableClothSelfCollision : 1;                    		// 0x0001DC (0x0004) [0x00000002] 
	unsigned long                                      bEnableClothPressure : 1;                         		// 0x0001DC (0x0004) [0x00000004] 
	unsigned long                                      bEnableClothTwoWayCollision : 1;                  		// 0x0001DC (0x0004) [0x00000008] 
	TArray<struct FClothSpecialBoneInfo>               ClothSpecialBones;                                		// 0x0001E0 (0x000C)              
	unsigned long                                      bEnableClothLineChecks : 1;                       		// 0x0001EC (0x0004) [0x00000001] 
	unsigned long                                      bClothMetal : 1;                                  		// 0x0001EC (0x0004) [0x00000002] 
	float                                              ClothMetalImpulseThreshold;                       		// 0x0001F0 (0x0004)              
	float                                              ClothMetalPenetrationDepth;                       		// 0x0001F4 (0x0004)              
	float                                              ClothMetalMaxDeformationDistance;                 		// 0x0001F8 (0x0004)              
	unsigned long                                      bEnableClothTearing : 1;                          		// 0x0001FC (0x0004) [0x00000001] 
	float                                              ClothTearFactor;                                  		// 0x000200 (0x0004)              
	int                                                ClothTearReserve;                                 		// 0x000204 (0x0004)              
	struct FMap_Mirror                                 ClothTornTriMap;                                  		// 0x000208 (0x003C)              
	TArray<int>                                        SoftBodySurfaceToGraphicsVertMap;                 		// 0x000244 (0x000C)              
	TArray<int>                                        SoftBodySurfaceIndices;                           		// 0x000250 (0x000C)              
	TArray<FVector3>                                   SoftBodyTetraVertsUnscaled;                       		// 0x00025C (0x000C)              
	TArray<int>                                        SoftBodyTetraIndices;                             		// 0x000268 (0x000C)              
	TArray<struct FSoftBodyTetraLink>                  SoftBodyTetraLinks;                               		// 0x000274 (0x000C)              
	TArray<DWORD>                                      CachedSoftBodyMeshes;                             		// 0x000280 (0x000C)              
	TArray<float>                                      CachedSoftBodyMeshScales;                         		// 0x00028C (0x000C)              
	TArray<struct FName>                               SoftBodyBones;                                    		// 0x000298 (0x000C)              
	TArray<struct FSoftBodySpecialBoneInfo>            SoftBodySpecialBones;                             		// 0x0002A4 (0x000C)              
	float                                              SoftBodyVolumeStiffness;                          		// 0x0002B0 (0x0004)              
	float                                              SoftBodyStretchingStiffness;                      		// 0x0002B4 (0x0004)              
	float                                              SoftBodyDensity;                                  		// 0x0002B8 (0x0004)              
	float                                              SoftBodyParticleRadius;                           		// 0x0002BC (0x0004)              
	float                                              SoftBodyDamping;                                  		// 0x0002C0 (0x0004)              
	int                                                SoftBodySolverIterations;                         		// 0x0002C4 (0x0004)              
	float                                              SoftBodyFriction;                                 		// 0x0002C8 (0x0004)              
	float                                              SoftBodyRelativeGridSpacing;                      		// 0x0002CC (0x0004)              
	float                                              SoftBodySleepLinearVelocity;                      		// 0x0002D0 (0x0004)              
	unsigned long                                      bEnableSoftBodySelfCollision : 1;                 		// 0x0002D4 (0x0004) [0x00000001] 
	float                                              SoftBodyAttachmentResponse;                       		// 0x0002D8 (0x0004)              
	float                                              SoftBodyCollisionResponse;                        		// 0x0002DC (0x0004)              
	float                                              SoftBodyDetailLevel;                              		// 0x0002E0 (0x0004)              
	int                                                SoftBodySubdivisionLevel;                         		// 0x0002E4 (0x0004)              
	unsigned long                                      bSoftBodyIsoSurface : 1;                          		// 0x0002E8 (0x0004) [0x00000001] 
	unsigned long                                      bEnableSoftBodyDamping : 1;                       		// 0x0002E8 (0x0004) [0x00000002] 
	unsigned long                                      bUseSoftBodyCOMDamping : 1;                       		// 0x0002E8 (0x0004) [0x00000004] 
	float                                              SoftBodyAttachmentThreshold;                      		// 0x0002EC (0x0004)              
	unsigned long                                      bEnableSoftBodyTwoWayCollision : 1;               		// 0x0002F0 (0x0004) [0x00000001] 
	float                                              SoftBodyAttachmentTearFactor;                     		// 0x0002F4 (0x0004)              
	unsigned long                                      bEnableSoftBodyLineChecks : 1;                    		// 0x0002F8 (0x0004) [0x00000001] 
	int                                                ReleaseResourcesFence;                            		// 0x0002FC (0x0004)              
	struct FGuid                                       SkelMeshGUID;                                     		// 0x000300 (0x0010)              
	unsigned long                                      bPreserveSourceData : 1;                          		// 0x000310 (0x0004) [0x00000001] 
	unsigned long                                      bIsRenderable : 1;                                		// 0x000310 (0x0004) [0x00000002] 
	unsigned long                                      bUseCPUSkinning : 1;                              		// 0x000310 (0x0004) [0x00000004] 
	int                                                NeverStream;                                      		// 0x000314 (0x0004)              
	DWORD                                              Streamable;                                       		// 0x000318 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkeletalMesh");
		return pClassPointer;
	};
};
UClass* USkeletalMesh::pClassPointer = NULL;

//0x000038 (0x000078 - 0x000040)
//SkeletalMeshSocket[0x102D5F00]
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                       		// 0x000040 (0x0008)              
	struct FName                                       BoneName;                                         		// 0x000048 (0x0008)              
	FVector3                                           RelativeLocation;                                 		// 0x000050 (0x000C)              
	FRotator                                           RelativeRotation;                                 		// 0x00005C (0x000C)              
	FVector3                                           RelativeScale;                                    		// 0x000068 (0x000C)              
	class USkeletalMeshComponent*                      PreviewSkelComp;                                  		// 0x000074 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkeletalMeshSocket");
		return pClassPointer;
	};
};
UClass* USkeletalMeshSocket::pClassPointer = NULL;

//0x00007C (0x0000BC - 0x000040)
//SoundCue[0x102D5CA0]
class USoundCue : public UObject
{
public:
	struct FName                                       SoundGroup;                                       		// 0x000040 (0x0008)              
	class USoundNode*                                  FirstNode;                                        		// 0x000048 (0x0004)              
	unsigned char                                      EditorData[0x3C];                                 		// 0x00004C (0x003C)              UNKNOWN PROPERTY: MapProperty
	float                                              MaxAudibleDistance;                               		// 0x000088 (0x0004)              
	float                                              VolumeMultiplier;                                 		// 0x00008C (0x0004)              
	float                                              PitchMultiplier;                                  		// 0x000090 (0x0004)              
	float                                              Duration;                                         		// 0x000094 (0x0004)              
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x000098 (0x0004)              
	struct FString                                     FaceFXGroupName;                                  		// 0x00009C (0x000C)              
	struct FString                                     FaceFXAnimName;                                   		// 0x0000A8 (0x000C)              
	int                                                MaxConcurrentPlayCount;                           		// 0x0000B4 (0x0004)              
	int                                                CurrentPlayCount;                                 		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundCue");
		return pClassPointer;
	};

public:
	float GetCueDuration();//Engine.SoundCue.GetCueDuration
};
UClass* USoundCue::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//SoundNode[0x102D5B70]
class USoundNode : public UObject
{
public:
	int                                                NodeUpdateHint;                                   		// 0x000040 (0x0004)              
	TArray<class USoundNode*>                          ChildNodes;                                       		// 0x000044 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNode");
		return pClassPointer;
	};
};
UClass* USoundNode::pClassPointer = NULL;

//0x000008 (0x000058 - 0x000050)
//SoundNodeWaveParam[0x102D5A40]
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                		// 0x000050 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeWaveParam");
		return pClassPointer;
	};
};
UClass* USoundNodeWaveParam::pClassPointer = NULL;

//0x000088 (0x0000C8 - 0x000040)
//SpeechRecognition[0x102D5910]
class USpeechRecognition : public UObject
{
public:
	struct FString                                     Language;                                         		// 0x000040 (0x000C)              
	float                                              ConfidenceThreshhold;                             		// 0x00004C (0x0004)              
	TArray<struct FRecogVocabulary>                    Vocabularies;                                     		// 0x000050 (0x000C)              
	TArray<unsigned char>                              VoiceData;                                        		// 0x00005C (0x000C)              
	TArray<unsigned char>                              WorkingVoiceData;                                 		// 0x000068 (0x000C)              
	TArray<unsigned char>                              UserData;                                         		// 0x000074 (0x000C)              
	struct FRecogUserData                              InstanceData[0x4];                                		// 0x000080 (0x0040)              
	unsigned long                                      bDirty : 1;                                       		// 0x0000C0 (0x0004) [0x00000001] 
	unsigned long                                      bInitialised : 1;                                 		// 0x0000C0 (0x0004) [0x00000002] 
	DWORD                                              FnxVoiceData;                                     		// 0x0000C4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpeechRecognition");
		return pClassPointer;
	};
};
UClass* USpeechRecognition::pClassPointer = NULL;

//0x000060 (0x0000E0 - 0x000080)
//RB_BodySetup[0x102D56B0]
class URB_BodySetup : public UKMeshProps
{
public:
	unsigned char                                      SleepFamily;                                      		// 0x000080 (0x0001)              PROPERTY: ESleepFamily
	unsigned char                                      _0x000081[0x3];                                   		// 0x000081 (0x0003) MISSED OFFSET
	struct FName                                       BoneName;                                         		// 0x000084 (0x0008)              
	unsigned long                                      bFixed : 1;                                       		// 0x00008C (0x0004) [0x00000001] 
	unsigned long                                      bNoCollision : 1;                                 		// 0x00008C (0x0004) [0x00000002] 
	unsigned long                                      bBlockZeroExtent : 1;                             		// 0x00008C (0x0004) [0x00000004] 
	unsigned long                                      bBlockNonZeroExtent : 1;                          		// 0x00008C (0x0004) [0x00000008] 
	unsigned long                                      bEnableContinuousCollisionDetection : 1;          		// 0x00008C (0x0004) [0x00000010] 
	unsigned long                                      bAlwaysFullAnimWeight : 1;                        		// 0x00008C (0x0004) [0x00000020] 
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x000090 (0x0004)              
	float                                              MassScale;                                        		// 0x000094 (0x0004)              
	TArray<DWORD>                                      CollisionGeom;                                    		// 0x000098 (0x000C)              
	TArray<FVector3>                                   CollisionGeomScale3D;                             		// 0x0000A4 (0x000C)              
	struct FsAPBCollision                              APBCollision;                                     		// 0x0000B0 (0x0014)              
	TArray<FVector3>                                   PreCachedPhysScale;                               		// 0x0000C4 (0x000C)              
	TArray<struct FKCachedConvexData>                  PreCachedPhysData;                                		// 0x0000D0 (0x000C)              
	int                                                PreCachedPhysDataVersion;                         		// 0x0000DC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_BodySetup");
		return pClassPointer;
	};
};
UClass* URB_BodySetup::pClassPointer = NULL;

//0x000098 (0x0000D8 - 0x000040)
//Texture[0x102D5580]
class UTexture : public USurface
{
public:
	unsigned long                                      SRGB : 1;                                         		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      RGBE : 1;                                         		// 0x000040 (0x0004) [0x00000002] 
	unsigned long                                      CompressionNoAlpha : 1;                           		// 0x000040 (0x0004) [0x00000004] 
	unsigned long                                      CompressionNone : 1;                              		// 0x000040 (0x0004) [0x00000008] 
	unsigned long                                      CompressionNoMipmaps : 1;                         		// 0x000040 (0x0004) [0x00000010] 
	unsigned long                                      CompressionFullDynamicRange : 1;                  		// 0x000040 (0x0004) [0x00000020] 
	unsigned long                                      DeferCompression : 1;                             		// 0x000040 (0x0004) [0x00000040] 
	unsigned long                                      NeverStream : 1;                                  		// 0x000040 (0x0004) [0x00000080] 
	unsigned long                                      bDitherMipMapAlpha : 1;                           		// 0x000040 (0x0004) [0x00000100] 
	unsigned long                                      bPreserveBorderR : 1;                             		// 0x000040 (0x0004) [0x00000200] 
	unsigned long                                      bPreserveBorderG : 1;                             		// 0x000040 (0x0004) [0x00000400] 
	unsigned long                                      bPreserveBorderB : 1;                             		// 0x000040 (0x0004) [0x00000800] 
	unsigned long                                      bPreserveBorderA : 1;                             		// 0x000040 (0x0004) [0x00001000] 
	unsigned long                                      bAsyncResourceReleaseHasBeenStarted : 1;          		// 0x000040 (0x0004) [0x00002000] 
	float                                              UnpackMin[0x4];                                   		// 0x000044 (0x0010)              
	float                                              UnpackMax[0x4];                                   		// 0x000054 (0x0010)              
	struct FUntypedBulkData_Mirror                     SourceArt;                                        		// 0x000064 (0x0034)              
	struct FIndirectArray_Mirror                       MipSourceArt;                                     		// 0x000098 (0x000C)              
	unsigned char                                      CompressionSettings;                              		// 0x0000A4 (0x0001)              PROPERTY: TextureCompressionSettings
	unsigned char                                      Filter;                                           		// 0x0000A5 (0x0001)              PROPERTY: TextureFilter
	unsigned char                                      LODGroup;                                         		// 0x0000A6 (0x0001)              PROPERTY: TextureGroup
	unsigned char                                      LODCategory;                                      		// 0x0000A7 (0x0001)              PROPERTY: etTextureCategory
	unsigned char                                      LODUsage;                                         		// 0x0000A8 (0x0001)              PROPERTY: etTextureUsage
	unsigned char                                      GolemCropMode;                                    		// 0x0000A9 (0x0001)              PROPERTY: CropMode
	unsigned char                                      _0x0000AA[0x2];                                   		// 0x0000AA (0x0002) MISSED OFFSET
	int                                                LODBias;                                          		// 0x0000AC (0x0004)              
	int                                                CachedCombinedLODBias;                            		// 0x0000B0 (0x0004)              
	float                                              WorldUScale;                                      		// 0x0000B4 (0x0004)              
	float                                              WorldVScale;                                      		// 0x0000B8 (0x0004)              
	FVector3                                           GolemScale;                                       		// 0x0000BC (0x000C)              
	FVector3                                           GolemOffset;                                      		// 0x0000C8 (0x000C)              
	DWORD                                              Resource;                                         		// 0x0000D4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Texture");
		return pClassPointer;
	};
};
UClass* UTexture::pClassPointer = NULL;

//0x000020 (0x0000F8 - 0x0000D8)
//cTexture3D[0x102D5450]
class UcTexture3D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                             		// 0x0000D8 (0x000C)              
	int                                                SizeX;                                            		// 0x0000E4 (0x0004)              
	int                                                SizeY;                                            		// 0x0000E8 (0x0004)              
	int                                                SizeZ;                                            		// 0x0000EC (0x0004)              
	unsigned char                                      Format;                                           		// 0x0000F0 (0x0001)              PROPERTY: EPixelFormat
	unsigned char                                      AddressX;                                         		// 0x0000F1 (0x0001)              PROPERTY: TextureAddress
	unsigned char                                      AddressY;                                         		// 0x0000F2 (0x0001)              PROPERTY: TextureAddress
	unsigned char                                      AddressZ;                                         		// 0x0000F3 (0x0001)              PROPERTY: TextureAddress
	int                                                NumMips;                                          		// 0x0000F4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cTexture3D");
		return pClassPointer;
	};
};
UClass* UcTexture3D::pClassPointer = NULL;

//0x000064 (0x00013C - 0x0000D8)
//Texture2D[0x102D5320]
class UTexture2D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                             		// 0x0000D8 (0x000C)              
	int                                                SizeX;                                            		// 0x0000E4 (0x0004)              
	int                                                SizeY;                                            		// 0x0000E8 (0x0004)              
	unsigned char                                      Format;                                           		// 0x0000EC (0x0001)              PROPERTY: EPixelFormat
	unsigned char                                      AddressX;                                         		// 0x0000ED (0x0001)              PROPERTY: TextureAddress
	unsigned char                                      AddressY;                                         		// 0x0000EE (0x0001)              PROPERTY: TextureAddress
	unsigned char                                      _0x0000EF[0x1];                                   		// 0x0000EF (0x0001) MISSED OFFSET
	unsigned long                                      bIsStreamable : 1;                                		// 0x0000F0 (0x0004) [0x00000001] 
	unsigned long                                      bHasCancelationPending : 1;                       		// 0x0000F0 (0x0004) [0x00000002] 
	unsigned long                                      bHasBeenLoadedFromPersistentArchive : 1;          		// 0x0000F0 (0x0004) [0x00000004] 
	unsigned long                                      bForceMiplevelsToBeResident : 1;                  		// 0x0000F0 (0x0004) [0x00000008] 
	unsigned long                                      bGlobalForceMipLevelsToBeResident : 1;            		// 0x0000F0 (0x0004) [0x00000010] 
	unsigned long                                      bIgnoreFairUsagePolicy : 1;                       		// 0x0000F0 (0x0004) [0x00000020] 
	unsigned long                                      bManualStream : 1;                                		// 0x0000F0 (0x0004) [0x00000040] 
	unsigned long                                      bUnsharedLightingTexture : 1;                     		// 0x0000F0 (0x0004) [0x00000080] 
	float                                              TimeToForceMipLevelsToBeResident;                 		// 0x0000F4 (0x0004)              
	struct FName                                       TextureFileCacheName;                             		// 0x0000F8 (0x0008)              
	int                                                RequestedMips;                                    		// 0x000100 (0x0004)              
	int                                                ResidentMips;                                     		// 0x000104 (0x0004)              
	int                                                OriginallyRequestedMips;                          		// 0x000108 (0x0004)              
	struct FThreadSafeCounter                          PendingMipChangeRequestStatus;                    		// 0x00010C (0x0004)              
	struct FTextureLinkedListMirror                    StreamableTexturesLink;                           		// 0x000110 (0x000C)              
	int                                                MipTailBaseIdx;                                   		// 0x00011C (0x0004)              
	DWORD                                              ResourceMem;                                      		// 0x000120 (0x0004)              
	int                                                FirstResourceMemMip;                              		// 0x000124 (0x0004)              
	int                                                FairUsagePseudoPriority;                          		// 0x000128 (0x0004)              
	int                                                FairUsageBias;                                    		// 0x00012C (0x0004)              
	int                                                FairUsageLastRequestedBias;                       		// 0x000130 (0x0004)              
	int                                                FairUsageLastUsedBias;                            		// 0x000134 (0x0004)              
	float                                              MipBiasValue;                                     		// 0x000138 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Texture2D");
		return pClassPointer;
	};
};
UClass* UTexture2D::pClassPointer = NULL;

//0x000000 (0x00013C - 0x00013C)
//ShadowMapTexture2D[0x102D50C0]
class UShadowMapTexture2D : public UTexture2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ShadowMapTexture2D");
		return pClassPointer;
	};
};
UClass* UShadowMapTexture2D::pClassPointer = NULL;

//0x000040 (0x00017C - 0x00013C)
//TextureFlipBook[0x102D4F90]
class UTextureFlipBook : public UTexture2D
{
public:
	DWORD                                              VfTable_FTickableObject;                          		// 0x00013C (0x0004)              
	float                                              TimeIntoMovie;                                    		// 0x000140 (0x0004)              
	float                                              TimeSinceLastFrame;                               		// 0x000144 (0x0004)              
	float                                              HorizontalScale;                                  		// 0x000148 (0x0004)              
	float                                              VerticalScale;                                    		// 0x00014C (0x0004)              
	unsigned long                                      bPaused : 1;                                      		// 0x000150 (0x0004) [0x00000001] 
	unsigned long                                      bStopped : 1;                                     		// 0x000150 (0x0004) [0x00000002] 
	unsigned long                                      bLooping : 1;                                     		// 0x000150 (0x0004) [0x00000004] 
	unsigned long                                      bAutoPlay : 1;                                    		// 0x000150 (0x0004) [0x00000008] 
	int                                                HorizontalImages;                                 		// 0x000154 (0x0004)              
	int                                                VerticalImages;                                   		// 0x000158 (0x0004)              
	unsigned char                                      FBMethod;                                         		// 0x00015C (0x0001)              PROPERTY: TextureFlipBookMethod
	unsigned char                                      _0x00015D[0x3];                                   		// 0x00015D (0x0003) MISSED OFFSET
	float                                              FrameRate;                                        		// 0x000160 (0x0004)              
	float                                              FrameTime;                                        		// 0x000164 (0x0004)              
	int                                                CurrentRow;                                       		// 0x000168 (0x0004)              
	int                                                CurrentColumn;                                    		// 0x00016C (0x0004)              
	float                                              RenderOffsetU;                                    		// 0x000170 (0x0004)              
	float                                              RenderOffsetV;                                    		// 0x000174 (0x0004)              
	DWORD                                              ReleaseResourcesFence;                            		// 0x000178 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TextureFlipBook");
		return pClassPointer;
	};

public:
	void SetCurrentFrame(int Row,int Col);//Engine.TextureFlipBook.SetCurrentFrame
	void Play();//Engine.TextureFlipBook.Play
	void Pause();//Engine.TextureFlipBook.Pause
	void Stop();//Engine.TextureFlipBook.Stop
};
UClass* UTextureFlipBook::pClassPointer = NULL;

//0x000018 (0x0000F0 - 0x0000D8)
//Texture2DComposite[0x102D4E60]
class UTexture2DComposite : public UTexture
{
public:
	TArray<struct FSourceTexture2DRegion>              SourceRegions;                                    		// 0x0000D8 (0x000C)              
	int                                                MaxTextureSize;                                   		// 0x0000E4 (0x0004)              
	int                                                DestSizeX;                                        		// 0x0000E8 (0x0004)              
	int                                                DestSizeY;                                        		// 0x0000EC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Texture2DComposite");
		return pClassPointer;
	};

public:
	void UpdateCompositeTexture(int NumMipsToGenerate);//Engine.Texture2DComposite.UpdateCompositeTexture
	void ResetSourceRegions();//Engine.Texture2DComposite.ResetSourceRegions
	bool SourceTexturesFullyStreamedIn();//Engine.Texture2DComposite.SourceTexturesFullyStreamedIn
};
UClass* UTexture2DComposite::pClassPointer = NULL;

//0x00002C (0x000104 - 0x0000D8)
//TextureCube[0x102D4D30]
class UTextureCube : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x0000D8 (0x0004)              
	int                                                SizeY;                                            		// 0x0000DC (0x0004)              
	unsigned char                                      Format;                                           		// 0x0000E0 (0x0001)              PROPERTY: EPixelFormat
	unsigned char                                      _0x0000E1[0x3];                                   		// 0x0000E1 (0x0003) MISSED OFFSET
	int                                                NumMips;                                          		// 0x0000E4 (0x0004)              
	unsigned long                                      bIsCubemapValid : 1;                              		// 0x0000E8 (0x0004) [0x00000001] 
	class UTexture2D*                                  FacePosX;                                         		// 0x0000EC (0x0004)              
	class UTexture2D*                                  FaceNegX;                                         		// 0x0000F0 (0x0004)              
	class UTexture2D*                                  FacePosY;                                         		// 0x0000F4 (0x0004)              
	class UTexture2D*                                  FaceNegY;                                         		// 0x0000F8 (0x0004)              
	class UTexture2D*                                  FacePosZ;                                         		// 0x0000FC (0x0004)              
	class UTexture2D*                                  FaceNegZ;                                         		// 0x000100 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TextureCube");
		return pClassPointer;
	};
};
UClass* UTextureCube::pClassPointer = NULL;

//0x000050 (0x000128 - 0x0000D8)
//TextureMovie[0x102D4C00]
class UTextureMovie : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x0000D8 (0x0004)              
	int                                                SizeY;                                            		// 0x0000DC (0x0004)              
	unsigned char                                      Format;                                           		// 0x0000E0 (0x0001)              PROPERTY: EPixelFormat
	unsigned char                                      AddressX;                                         		// 0x0000E1 (0x0001)              PROPERTY: TextureAddress
	unsigned char                                      AddressY;                                         		// 0x0000E2 (0x0001)              PROPERTY: TextureAddress
	unsigned char                                      MovieStreamSource;                                		// 0x0000E3 (0x0001)              PROPERTY: EMovieStreamSource
	class UClass*                                      DecoderClass;                                     		// 0x0000E4 (0x0004)              
	class UCodecMovie*                                 Decoder;                                          		// 0x0000E8 (0x0004)              
	unsigned long                                      Paused : 1;                                       		// 0x0000EC (0x0004) [0x00000001] 
	unsigned long                                      Stopped : 1;                                      		// 0x0000EC (0x0004) [0x00000002] 
	unsigned long                                      Looping : 1;                                      		// 0x0000EC (0x0004) [0x00000004] 
	unsigned long                                      AutoPlay : 1;                                     		// 0x0000EC (0x0004) [0x00000008] 
	unsigned long                                      bAutoPlayInUIScene : 1;                           		// 0x0000EC (0x0004) [0x00000010] 
	struct FUntypedBulkData_Mirror                     Data;                                             		// 0x0000F0 (0x0034)              
	DWORD                                              ReleaseCodecFence;                                		// 0x000124 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TextureMovie");
		return pClassPointer;
	};

public:
	void Pause();//Engine.TextureMovie.Pause
	void Stop();//Engine.TextureMovie.Stop
	void Play();//Engine.TextureMovie.Play
};
UClass* UTextureMovie::pClassPointer = NULL;

//0x000004 (0x0000DC - 0x0000D8)
//TextureRenderTarget[0x102D4AD0]
class UTextureRenderTarget : public UTexture
{
public:
	unsigned long                                      bUpdateImmediate : 1;                             		// 0x0000D8 (0x0004) [0x00000001] 
	unsigned long                                      bNeedsTwoCopies : 1;                              		// 0x0000D8 (0x0004) [0x00000002] 
	unsigned long                                      bRenderOnce : 1;                                  		// 0x0000D8 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TextureRenderTarget");
		return pClassPointer;
	};
};
UClass* UTextureRenderTarget::pClassPointer = NULL;

//0x00001C (0x0000F8 - 0x0000DC)
//TextureRenderTarget2D[0x102D49A0]
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x0000DC (0x0004)              
	int                                                SizeY;                                            		// 0x0000E0 (0x0004)              
	unsigned char                                      Format;                                           		// 0x0000E4 (0x0001)              PROPERTY: EPixelFormat
	unsigned char                                      AddressX;                                         		// 0x0000E5 (0x0001)              PROPERTY: TextureAddress
	unsigned char                                      AddressY;                                         		// 0x0000E6 (0x0001)              PROPERTY: TextureAddress
	unsigned char                                      _0x0000E7[0x1];                                   		// 0x0000E7 (0x0001) MISSED OFFSET
	struct FLinearColor                                ClearColor;                                       		// 0x0000E8 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TextureRenderTarget2D");
		return pClassPointer;
	};

public:
	class UTextureRenderTarget2D* Create(int InSizeX,int InSizeY,unsigned char InFormat,struct FLinearColor InClearColor,bool bOnlyRenderOnce);//Engine.TextureRenderTarget2D.Create
};
UClass* UTextureRenderTarget2D::pClassPointer = NULL;

//0x000005 (0x0000E1 - 0x0000DC)
//TextureRenderTargetCube[0x102D4870]
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x0000DC (0x0004)              
	unsigned char                                      Format;                                           		// 0x0000E0 (0x0001)              PROPERTY: EPixelFormat

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TextureRenderTargetCube");
		return pClassPointer;
	};
};
UClass* UTextureRenderTargetCube::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//TranslationContext[0x102D4740]
class UTranslationContext : public UObject
{
public:
	TArray<class UTranslatorTag*>                      TranslatorTags;                                   		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TranslationContext");
		return pClassPointer;
	};

public:
	bool RegisterTranslatorTag(class UTranslatorTag* InTagHandler);//Engine.TranslationContext.RegisterTranslatorTag
};
UClass* UTranslationContext::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//TranslatorTag[0x102D4610]
class UTranslatorTag : public UObject
{
public:
	struct FName                                       Tag;                                              		// 0x000040 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TranslatorTag");
		return pClassPointer;
	};

public:
	struct FString Translate(struct FString InArgument);//Engine.TranslatorTag.Translate
};
UClass* UTranslatorTag::pClassPointer = NULL;

//0x000000 (0x000048 - 0x000048)
//StringsTag[0x102D44E0]
class UStringsTag : public UTranslatorTag
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.StringsTag");
		return pClassPointer;
	};

public:
	struct FString Translate(struct FString InArgument);//Engine.StringsTag.Translate
};
UClass* UStringsTag::pClassPointer = NULL;

//0x000018 (0x000364 - 0x00034C)
//AIController[0x102D4280]
class AAIController : public AController
{
public:
	unsigned long                                      bHunting : 1;                                     		// 0x00034C (0x0004) [0x00000001] 
	unsigned long                                      bAdjustFromWalls : 1;                             		// 0x00034C (0x0004) [0x00000002] 
	unsigned long                                      bReverseScriptedRoute : 1;                        		// 0x00034C (0x0004) [0x00000004] 
	float                                              Skill;                                            		// 0x000350 (0x0004)              
	class AActor*                                      ScriptedMoveTarget;                               		// 0x000354 (0x0004)              
	class ARoute*                                      ScriptedRoute;                                    		// 0x000358 (0x0004)              
	int                                                ScriptedRouteIndex;                               		// 0x00035C (0x0004)              
	class AActor*                                      ScriptedFocus;                                    		// 0x000360 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AIController");
		return pClassPointer;
	};

public:
	bool OnSequenceAction(class USequenceAction* Action);//Engine.AIController.OnSequenceAction
	bool PriorityObjective();//Engine.AIController.PriorityObjective
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.AIController.DisplayDebug
	void OnAIMoveToActor(class USeqAct_AIMoveToActor* Action);//Engine.AIController.OnAIMoveToActor
	void PreBeginPlay();//Engine.AIController.PreBeginPlay
	bool ShouldAutoReload();//Engine.AIController.ShouldAutoReload
	void SetOrders(struct FName NewOrders,class AController* OrderGiver);//Engine.AIController.SetOrders
	void Reset();//Engine.AIController.Reset
	class AActor* GetOrderObject();//Engine.AIController.GetOrderObject
	void GetPlayerViewPoint(FVector3* out_Location,FRotator* out_Rotation);//Engine.AIController.GetPlayerViewPoint
	bool CanFireWeapon(class AWeapon* Wpn,unsigned char FireModeNum);//Engine.AIController.CanFireWeapon
	bool ShouldRefire();//Engine.AIController.ShouldRefire
	void SetTeam(int inTeamIdx);//Engine.AIController.SetTeam
	struct FName GetOrders();//Engine.AIController.GetOrders
};
UClass* AAIController::pClassPointer = NULL;

//0x000000 (0x0001E0 - 0x0001E0)
//CoverGroupRenderingComponent[0x102D4150]
class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CoverGroupRenderingComponent");
		return pClassPointer;
	};
};
UClass* UCoverGroupRenderingComponent::pClassPointer = NULL;

//0x00000C (0x00025C - 0x000250)
//CoverMeshComponent[0x102D4020]
class UCoverMeshComponent : public UStaticMeshComponent
{
public:
	FVector3                                           LocationOffset;                                   		// 0x000250 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CoverMeshComponent");
		return pClassPointer;
	};
};
UClass* UCoverMeshComponent::pClassPointer = NULL;

//0x000000 (0x0001E0 - 0x0001E0)
//PathRenderingComponent[0x102D3EF0]
class UPathRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PathRenderingComponent");
		return pClassPointer;
	};
};
UClass* UPathRenderingComponent::pClassPointer = NULL;

//0x000000 (0x0001E0 - 0x0001E0)
//RouteRenderingComponent[0x102D3DC0]
class URouteRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RouteRenderingComponent");
		return pClassPointer;
	};
};
UClass* URouteRenderingComponent::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//PathConstraint[0x102D3C90]
class UPathConstraint : public UObject
{
public:
	class UPathConstraint*                             NextConstraint;                                   		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PathConstraint");
		return pClassPointer;
	};
};
UClass* UPathConstraint::pClassPointer = NULL;

//0x00000C (0x000050 - 0x000044)
//Path_AlongLine[0x102D3B60]
class UPath_AlongLine : public UPathConstraint
{
public:
	FVector3                                           Direction;                                        		// 0x000044 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Path_AlongLine");
		return pClassPointer;
	};

public:
	bool AlongLine(class APawn* P,FVector3 Dir);//Engine.Path_AlongLine.AlongLine
};
UClass* UPath_AlongLine::pClassPointer = NULL;

//0x000004 (0x000048 - 0x000044)
//Path_TowardGoal[0x102D3A30]
class UPath_TowardGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                        		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Path_TowardGoal");
		return pClassPointer;
	};

public:
	bool TowardGoal(class APawn* P,class AActor* Goal);//Engine.Path_TowardGoal.TowardGoal
};
UClass* UPath_TowardGoal::pClassPointer = NULL;

//0x00000C (0x000050 - 0x000044)
//Path_WithinTraversalDist[0x102D3900]
class UPath_WithinTraversalDist : public UPathConstraint
{
public:
	float                                              MaxTraversalDist;                                 		// 0x000044 (0x0004)              
	unsigned long                                      bSoft : 1;                                        		// 0x000048 (0x0004) [0x00000001] 
	float                                              SoftStartPenalty;                                 		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Path_WithinTraversalDist");
		return pClassPointer;
	};

public:
	bool DontExceedMaxDist(class APawn* P,float InMaxTraversalDist,bool bInSoft);//Engine.Path_WithinTraversalDist.DontExceedMaxDist
};
UClass* UPath_WithinTraversalDist::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//PathGoalEvaluator[0x102D37D0]
class UPathGoalEvaluator : public UObject
{
public:
	class UPathGoalEvaluator*                          NextEvaluator;                                    		// 0x000040 (0x0004)              
	class ANavigationPoint*                            GeneratedGoal;                                    		// 0x000044 (0x0004)              
	int                                                MaxPathVisits;                                    		// 0x000048 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PathGoalEvaluator");
		return pClassPointer;
	};
};
UClass* UPathGoalEvaluator::pClassPointer = NULL;

//0x00000C (0x000058 - 0x00004C)
//Goal_AtActor[0x102D36A0]
class UGoal_AtActor : public UPathGoalEvaluator
{
public:
	class AActor*                                      GoalActor;                                        		// 0x00004C (0x0004)              
	float                                              GoalDist;                                         		// 0x000050 (0x0004)              
	unsigned long                                      bKeepPartial : 1;                                 		// 0x000054 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Goal_AtActor");
		return pClassPointer;
	};

public:
	bool AtActor(class APawn* P,class AActor* Goal,float Dist,bool bReturnPartial);//Engine.Goal_AtActor.AtActor
};
UClass* UGoal_AtActor::pClassPointer = NULL;

//0x000014 (0x000274 - 0x000260)
//SkeletalMeshActor[0x102D3570]
class ASkeletalMeshActor : public AActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x000260 (0x0004) [0x00000001] 
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x000264 (0x0004)              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x000268 (0x0004)              
	class UAudioComponent*                             FacialAudioComp;                                  		// 0x00026C (0x0004)              
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x000270 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkeletalMeshActor");
		return pClassPointer;
	};

public:
	void PostBeginPlay();//Engine.SkeletalMeshActor.PostBeginPlay
	void BeginAnimControl(TArray<class UAnimSet*> InAnimSets);//Engine.SkeletalMeshActor.BeginAnimControl
	void FinishAnimControl();//Engine.SkeletalMeshActor.FinishAnimControl
	void SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);//Engine.SkeletalMeshActor.SetAnimWeights
	void DoKismetAttachment(class AActor* Attachment,class USeqAct_AttachToActor* Action);//Engine.SkeletalMeshActor.DoKismetAttachment
	void OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction);//Engine.SkeletalMeshActor.OnPlayFaceFXAnim
	bool OnSequenceAction(class USequenceAction* Action);//Engine.SkeletalMeshActor.OnSequenceAction
	class UFaceFXAsset* GetActorFaceFXAsset();//Engine.SkeletalMeshActor.GetActorFaceFXAsset
	void SetAnimPosition(struct FName SlotName,int ChannelIndex,struct FName InAnimSeqName,float InPosition,bool bFireNotifies,bool bLooping);//Engine.SkeletalMeshActor.SetAnimPosition
	class UAudioComponent* GetFaceFXAudioComponent();//Engine.SkeletalMeshActor.GetFaceFXAudioComponent
	void OnSetSkeletalMesh(class USeqAct_SetSkeletalMesh* Action);//Engine.SkeletalMeshActor.OnSetSkeletalMesh
	void StopActorFaceFXAnim();//Engine.SkeletalMeshActor.StopActorFaceFXAnim
	void OnToggle(class USeqAct_Toggle* Action);//Engine.SkeletalMeshActor.OnToggle
	bool IsActorPlayingFaceFXAnim();//Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim
	void OnSetMaterial(class USeqAct_SetMaterial* Action);//Engine.SkeletalMeshActor.OnSetMaterial
	bool PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet,struct FString GroupName,struct FString SeqName);//Engine.SkeletalMeshActor.PlayActorFaceFXAnim
	void ReplicatedEvent(struct FName VarName);//Engine.SkeletalMeshActor.ReplicatedEvent
};
UClass* ASkeletalMeshActor::pClassPointer = NULL;

//0x00000C (0x000280 - 0x000274)
//SkeletalMeshActorMAT[0x102D3440]
class ASkeletalMeshActorMAT : public ASkeletalMeshActor
{
public:
	TArray<class UAnimNodeSlot*>                       SlotNodes;                                        		// 0x000274 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkeletalMeshActorMAT");
		return pClassPointer;
	};

public:
	void BeginAnimControl(TArray<class UAnimSet*> InAnimSets);//Engine.SkeletalMeshActorMAT.BeginAnimControl
	void MAT_BeginAnimControl(TArray<class UAnimSet*> InAnimSets);//Engine.SkeletalMeshActorMAT.MAT_BeginAnimControl
	void SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);//Engine.SkeletalMeshActorMAT.SetAnimWeights
	void SetMorphWeight(struct FName MorphNodeName,float MorphWeight);//Engine.SkeletalMeshActorMAT.SetMorphWeight
	void MAT_SetMorphWeight(struct FName MorphNodeName,float MorphWeight);//Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight
	void MAT_FinishAnimControl();//Engine.SkeletalMeshActorMAT.MAT_FinishAnimControl
	void MAT_SetSkelControlScale(struct FName SkelControlName,float Scale);//Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale
	void SetAnimPosition(struct FName SlotName,int ChannelIndex,struct FName InAnimSeqName,float InPosition,bool bFireNotifies,bool bLooping);//Engine.SkeletalMeshActorMAT.SetAnimPosition
	void MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);//Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights
	void FinishAnimControl();//Engine.SkeletalMeshActorMAT.FinishAnimControl
	void MAT_SetAnimPosition(struct FName SlotName,int ChannelIndex,struct FName InAnimSeqName,float InPosition,bool bFireNotifies,bool bLooping);//Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition
	void SetSkelControlScale(struct FName SkelControlName,float Scale);//Engine.SkeletalMeshActorMAT.SetSkelControlScale
};
UClass* ASkeletalMeshActorMAT::pClassPointer = NULL;

//0x000012 (0x000052 - 0x000040)
//AnimationCompressionAlgorithm[0x102D3310]
class UAnimationCompressionAlgorithm : public UObject
{
public:
	struct FString                                     Description;                                      		// 0x000040 (0x000C)              
	unsigned long                                      bNeedsSkeleton : 1;                               		// 0x00004C (0x0004) [0x00000001] 
	unsigned char                                      TranslationCompressionFormat;                     		// 0x000050 (0x0001)              PROPERTY: AnimationCompressionFormat
	unsigned char                                      RotationCompressionFormat;                        		// 0x000051 (0x0001)              PROPERTY: AnimationCompressionFormat

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm");
		return pClassPointer;
	};
};
UClass* UAnimationCompressionAlgorithm::pClassPointer = NULL;

//0x000002 (0x000054 - 0x000052)
//AnimationCompressionAlgorithm_BitwiseCompressOnly[0x102D31E0]
class UAnimationCompressionAlgorithm_BitwiseCompressOnly : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      _0x000052[0x2];                                   		// 0x000052 (0x0002) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly");
		return pClassPointer;
	};
};
UClass* UAnimationCompressionAlgorithm_BitwiseCompressOnly::pClassPointer = NULL;

//0x00000A (0x00005C - 0x000052)
//AnimationCompressionAlgorithm_RemoveEverySecondKey[0x102D30B0]
class UAnimationCompressionAlgorithm_RemoveEverySecondKey : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      _0x000052[0x2];                                   		// 0x000052 (0x0002) MISSED OFFSET
	int                                                MinKeys;                                          		// 0x000054 (0x0004)              
	unsigned long                                      bStartAtSecondKey : 1;                            		// 0x000058 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey");
		return pClassPointer;
	};
};
UClass* UAnimationCompressionAlgorithm_RemoveEverySecondKey::pClassPointer = NULL;

//0x00001A (0x00006C - 0x000052)
//AnimationCompressionAlgorithm_RemoveKeys[0x102D2F80]
class UAnimationCompressionAlgorithm_RemoveKeys : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      _0x000052[0x2];                                   		// 0x000052 (0x0002) MISSED OFFSET
	unsigned long                                      bRemoveTrivialKeys : 1;                           		// 0x000054 (0x0004) [0x00000001] 
	unsigned long                                      bRemoveRotationOnly : 1;                          		// 0x000054 (0x0004) [0x00000002] 
	unsigned long                                      bSkipKeys : 1;                                    		// 0x000054 (0x0004) [0x00000004] 
	float                                              MaxPosDiff;                                       		// 0x000058 (0x0004)              
	float                                              MaxAngleDiff;                                     		// 0x00005C (0x0004)              
	int                                                MinKeys;                                          		// 0x000060 (0x0004)              
	int                                                DivideNumberOfKeysBy;                             		// 0x000064 (0x0004)              
	int                                                StartAtKey;                                       		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveKeys");
		return pClassPointer;
	};
};
UClass* UAnimationCompressionAlgorithm_RemoveKeys::pClassPointer = NULL;

//0x00000A (0x00005C - 0x000052)
//AnimationCompressionAlgorithm_RemoveTrivialKeys[0x102D2E50]
class UAnimationCompressionAlgorithm_RemoveTrivialKeys : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      _0x000052[0x2];                                   		// 0x000052 (0x0002) MISSED OFFSET
	float                                              MaxPosDiff;                                       		// 0x000054 (0x0004)              
	float                                              MaxAngleDiff;                                     		// 0x000058 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys");
		return pClassPointer;
	};
};
UClass* UAnimationCompressionAlgorithm_RemoveTrivialKeys::pClassPointer = NULL;

//0x000002 (0x000054 - 0x000052)
//AnimationCompressionAlgorithm_RevertToRaw[0x102D2D20]
class UAnimationCompressionAlgorithm_RevertToRaw : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      _0x000052[0x2];                                   		// 0x000052 (0x0002) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RevertToRaw");
		return pClassPointer;
	};
};
UClass* UAnimationCompressionAlgorithm_RevertToRaw::pClassPointer = NULL;

//0x000002 (0x000054 - 0x000052)
//cAnimationCompressionAlgorithm_RemoveUnityCompressedTracks[0x102D2BF0]
class UcAnimationCompressionAlgorithm_RemoveUnityCompressedTracks : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      _0x000052[0x2];                                   		// 0x000052 (0x0002) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cAnimationCompressionAlgorithm_RemoveUnityCompressedTracks");
		return pClassPointer;
	};
};
UClass* UcAnimationCompressionAlgorithm_RemoveUnityCompressedTracks::pClassPointer = NULL;

//0x000094 (0x0000D4 - 0x000040)
//AnimNode[0x102D2AC0]
class UAnimNode : public UObject
{
public:
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x000040 (0x0004)              
	TArray<class UAnimNodeBlendBase*>                  ParentNodes;                                      		// 0x000044 (0x000C)              
	struct FName                                       NodeName;                                         		// 0x000050 (0x0008)              
	TArray<struct FBoneAtom>                           CachedBoneAtoms;                                  		// 0x000058 (0x000C)              
	unsigned char                                      _0x000064[0xC];                                   		// 0x000064 (0x000C) MISSED OFFSET
	struct FBoneAtom                                   CachedRootMotionDelta;                            		// 0x000070 (0x0030)              
	int                                                bCachedHasRootMotion;                             		// 0x0000A0 (0x0004)              
	unsigned long                                      bRelevant : 1;                                    		// 0x0000A4 (0x0004) [0x00000001] 
	unsigned long                                      bJustBecameRelevant : 1;                          		// 0x0000A4 (0x0004) [0x00000002] 
	unsigned long                                      bSkipTickWhenZeroWeight : 1;                      		// 0x0000A4 (0x0004) [0x00000004] 
	unsigned long                                      bTickDuringPausedAnims : 1;                       		// 0x0000A4 (0x0004) [0x00000008] 
	int                                                NodeTickTag;                                      		// 0x0000A8 (0x0004)              
	int                                                NodeCachedAtomsTag;                               		// 0x0000AC (0x0004)              
	float                                              NodeTotalWeight;                                  		// 0x0000B0 (0x0004)              
	float                                              TotalWeightAccumulator;                           		// 0x0000B4 (0x0004)              
	int                                                DrawWidth;                                        		// 0x0000B8 (0x0004)              
	int                                                DrawHeight;                                       		// 0x0000BC (0x0004)              
	int                                                NodePosX;                                         		// 0x0000C0 (0x0004)              
	int                                                NodePosY;                                         		// 0x0000C4 (0x0004)              
	int                                                OutDrawY;                                         		// 0x0000C8 (0x0004)              
	int                                                InstanceVersionNumber;                            		// 0x0000CC (0x0004)              
	int                                                SearchTag;                                        		// 0x0000D0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNode");
		return pClassPointer;
	};

public:
	void StopAnim();//Engine.AnimNode.StopAnim
	class UAnimNode* FindAnimNode(struct FName InNodeName);//Engine.AnimNode.FindAnimNode
	void PlayAnim(bool bLoop,float Rate,float StartTime);//Engine.AnimNode.PlayAnim
	void OnBecomeRelevant();//Engine.AnimNode.OnBecomeRelevant
	void OnCeaseRelevant();//Engine.AnimNode.OnCeaseRelevant
};
UClass* UAnimNode::pClassPointer = NULL;

//0x000010 (0x0000E4 - 0x0000D4)
//AnimNodeBlendBase[0x102D2990]
class UAnimNodeBlendBase : public UAnimNode
{
public:
	TArray<struct FAnimBlendChild>                     Children;                                         		// 0x0000D4 (0x000C)              
	unsigned long                                      bFixNumChildren : 1;                              		// 0x0000E0 (0x0004) [0x00000001] 
	unsigned long                                      bCauseParentAnimEnd : 1;                          		// 0x0000E0 (0x0004) [0x00000002] 
	unsigned long                                      bCauseParentLoopingAnimEnd : 1;                   		// 0x0000E0 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendBase");
		return pClassPointer;
	};

public:
	void PlayAnim(bool bLoop,float Rate,float StartTime);//Engine.AnimNodeBlendBase.PlayAnim
	void StopAnim();//Engine.AnimNodeBlendBase.StopAnim
};
UClass* UAnimNodeBlendBase::pClassPointer = NULL;

//0x000048 (0x00012C - 0x0000E4)
//AnimNodeAimOffset[0x102D2860]
class UAnimNodeAimOffset : public UAnimNodeBlendBase
{
public:
	FVector2                                           Aim;                                              		// 0x0000E4 (0x0008)              
	FVector2                                           AngleOffset;                                      		// 0x0000EC (0x0008)              
	unsigned long                                      bForceAimDir : 1;                                 		// 0x0000F4 (0x0004) [0x00000001] 
	unsigned long                                      bBakeFromAnimations : 1;                          		// 0x0000F4 (0x0004) [0x00000002] 
	int                                                PassThroughAtOrAboveLOD;                          		// 0x0000F8 (0x0004)              
	unsigned char                                      ForcedAimDir;                                     		// 0x0000FC (0x0001)              PROPERTY: EAnimAimDir
	unsigned char                                      _0x0000FD[0x3];                                   		// 0x0000FD (0x0003) MISSED OFFSET
	TArray<unsigned char>                              RequiredBones;                                    		// 0x000100 (0x000C)              
	TArray<int>                                        BoneToAimCpnt;                                    		// 0x00010C (0x000C)              
	class UAnimNodeAimOffset*                          TemplateNode;                                     		// 0x000118 (0x0004)              
	TArray<struct FAimOffsetProfile>                   Profiles;                                         		// 0x00011C (0x000C)              
	int                                                CurrentProfileIndex;                              		// 0x000128 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeAimOffset");
		return pClassPointer;
	};

public:
	void SetActiveProfileByIndex(int ProfileIndex);//Engine.AnimNodeAimOffset.SetActiveProfileByIndex
	void SetActiveProfileByName(struct FName ProfileName);//Engine.AnimNodeAimOffset.SetActiveProfileByName
};
UClass* UAnimNodeAimOffset::pClassPointer = NULL;

//0x00000C (0x0000F0 - 0x0000E4)
//AnimNodeBlend[0x102D2730]
class UAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	float                                              Child2Weight;                                     		// 0x0000E4 (0x0004)              
	float                                              Child2WeightTarget;                               		// 0x0000E8 (0x0004)              
	float                                              BlendTimeToGo;                                    		// 0x0000EC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeBlend");
		return pClassPointer;
	};

public:
	void SetBlendTarget(float BlendTarget,float BlendTime);//Engine.AnimNodeBlend.SetBlendTarget
};
UClass* UAnimNodeBlend::pClassPointer = NULL;

//0x000028 (0x000118 - 0x0000F0)
//AnimNodeBlendPerBone[0x102D2600]
class UAnimNodeBlendPerBone : public UAnimNodeBlend
{
public:
	unsigned long                                      bForceLocalSpaceBlend : 1;                        		// 0x0000F0 (0x0004) [0x00000001] 
	TArray<struct FName>                               BranchStartBoneName;                              		// 0x0000F4 (0x000C)              
	TArray<float>                                      Child2PerBoneWeight;                              		// 0x000100 (0x000C)              
	TArray<unsigned char>                              LocalToCompReqBones;                              		// 0x00010C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendPerBone");
		return pClassPointer;
	};
};
UClass* UAnimNodeBlendPerBone::pClassPointer = NULL;

//0x000010 (0x000100 - 0x0000F0)
//AnimNodeCrossfader[0x102D24D0]
class UAnimNodeCrossfader : public UAnimNodeBlend
{
public:
	struct FName                                       DefaultAnimSeqName;                               		// 0x0000F0 (0x0008)              
	unsigned long                                      bDontBlendOutOneShot : 1;                         		// 0x0000F8 (0x0004) [0x00000001] 
	float                                              PendingBlendOutTimeOneShot;                       		// 0x0000FC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeCrossfader");
		return pClassPointer;
	};

public:
	void PlayOneShotAnim(struct FName AnimSeqName,float BlendInTime,float BlendOutTime,bool bDontBlendOut,float Rate);//Engine.AnimNodeCrossfader.PlayOneShotAnim
	void BlendToLoopingAnim(struct FName AnimSeqName,float BlendInTime,float Rate);//Engine.AnimNodeCrossfader.BlendToLoopingAnim
	struct FName GetAnimName();//Engine.AnimNodeCrossfader.GetAnimName
	class UAnimNodeSequence* GetActiveChild();//Engine.AnimNodeCrossfader.GetActiveChild
};
UClass* UAnimNodeCrossfader::pClassPointer = NULL;

//0x000008 (0x0000F8 - 0x0000F0)
//AnimNodePlayCustomAnim[0x102D23A0]
class UAnimNodePlayCustomAnim : public UAnimNodeBlend
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x0000F0 (0x0004) [0x00000001] 
	float                                              CustomPendingBlendOutTime;                        		// 0x0000F4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodePlayCustomAnim");
		return pClassPointer;
	};

public:
	void StopCustomAnim(float BlendOutTime);//Engine.AnimNodePlayCustomAnim.StopCustomAnim
	void PlayCustomAnimByDuration(struct FName AnimName,float Duration,float BlendInTime,float BlendOutTime,bool bLooping,bool bOverride);//Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration
	void SetRootBoneAxisOption(unsigned char AxisX,unsigned char AxisY,unsigned char AxisZ);//Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption
	void SetCustomAnim(struct FName AnimName);//Engine.AnimNodePlayCustomAnim.SetCustomAnim
	float PlayCustomAnim(struct FName AnimName,float Rate,float BlendInTime,float BlendOutTime,bool bLooping,bool bOverride);//Engine.AnimNodePlayCustomAnim.PlayCustomAnim
	class UAnimNodeSequence* GetCustomAnimNodeSeq();//Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq
	void SetActorAnimEndNotification(bool bNewStatus);//Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification
};
UClass* UAnimNodePlayCustomAnim::pClassPointer = NULL;

//0x000010 (0x0000F4 - 0x0000E4)
//AnimNodeBlendDirectional[0x102D2270]
class UAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x0000E4 (0x0004)              
	float                                              DirAngle;                                         		// 0x0000E8 (0x0004)              
	int                                                SingleAnimAtOrAboveLOD;                           		// 0x0000EC (0x0004)              
	float                                              ForwardBias;                                      		// 0x0000F0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendDirectional");
		return pClassPointer;
	};
};
UClass* UAnimNodeBlendDirectional::pClassPointer = NULL;

//0x00001C (0x000100 - 0x0000E4)
//AnimNodeBlendList[0x102D2140]
class UAnimNodeBlendList : public UAnimNodeBlendBase
{
public:
	TArray<float>                                      TargetWeight;                                     		// 0x0000E4 (0x000C)              
	float                                              BlendTimeToGo;                                    		// 0x0000F0 (0x0004)              
	int                                                ActiveChildIndex;                                 		// 0x0000F4 (0x0004)              
	unsigned long                                      bPlayActiveChild : 1;                             		// 0x0000F8 (0x0004) [0x00000001] 
	unsigned long                                      bForceChildFullWeightWhenBecomingRelevant : 1;    		// 0x0000F8 (0x0004) [0x00000002] 
	float                                              SliderPosition;                                   		// 0x0000FC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendList");
		return pClassPointer;
	};

public:
	void SetActiveChild(int ChildIndex,float BlendTime);//Engine.AnimNodeBlendList.SetActiveChild
};
UClass* UAnimNodeBlendList::pClassPointer = NULL;

//0x000018 (0x000118 - 0x000100)
//AnimNodeBlendByBase[0x102D2010]
class UAnimNodeBlendByBase : public UAnimNodeBlendList
{
public:
	unsigned char                                      Type;                                             		// 0x000100 (0x0001)              PROPERTY: EBaseBlendType
	unsigned char                                      _0x000101[0x3];                                   		// 0x000101 (0x0003) MISSED OFFSET
	struct FName                                       ActorTag;                                         		// 0x000104 (0x0008)              
	class UClass*                                      ActorClass;                                       		// 0x00010C (0x0004)              
	float                                              BlendTime;                                        		// 0x000110 (0x0004)              
	class AActor*                                      CachedBase;                                       		// 0x000114 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendByBase");
		return pClassPointer;
	};
};
UClass* UAnimNodeBlendByBase::pClassPointer = NULL;

//0x000000 (0x000100 - 0x000100)
//AnimNodeBlendByPhysics[0x102D1EE0]
class UAnimNodeBlendByPhysics : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendByPhysics");
		return pClassPointer;
	};
};
UClass* UAnimNodeBlendByPhysics::pClassPointer = NULL;

//0x000000 (0x000100 - 0x000100)
//AnimNodeBlendByPosture[0x102D1DB0]
class UAnimNodeBlendByPosture : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendByPosture");
		return pClassPointer;
	};
};
UClass* UAnimNodeBlendByPosture::pClassPointer = NULL;

//0x000024 (0x000124 - 0x000100)
//AnimNodeBlendBySpeed[0x102D1C80]
class UAnimNodeBlendBySpeed : public UAnimNodeBlendList
{
public:
	float                                              Speed;                                            		// 0x000100 (0x0004)              
	int                                                LastChannel;                                      		// 0x000104 (0x0004)              
	float                                              BlendUpTime;                                      		// 0x000108 (0x0004)              
	float                                              BlendDownTime;                                    		// 0x00010C (0x0004)              
	float                                              BlendDownPerc;                                    		// 0x000110 (0x0004)              
	TArray<float>                                      Constraints;                                      		// 0x000114 (0x000C)              
	unsigned long                                      bUseAcceleration : 1;                             		// 0x000120 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendBySpeed");
		return pClassPointer;
	};
};
UClass* UAnimNodeBlendBySpeed::pClassPointer = NULL;

//0x000014 (0x000114 - 0x000100)
//AnimNodeRandom[0x102D1B50]
class UAnimNodeRandom : public UAnimNodeBlendList
{
public:
	TArray<struct FRandomAnimInfo>                     RandomInfo;                                       		// 0x000100 (0x000C)              
	class UAnimNodeSequence*                           PlayingSeqNode;                                   		// 0x00010C (0x0004)              
	int                                                PendingChildIndex;                                		// 0x000110 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeRandom");
		return pClassPointer;
	};
};
UClass* UAnimNodeRandom::pClassPointer = NULL;

//0x000018 (0x0000FC - 0x0000E4)
//AnimNodeBlendMultiBone[0x102D1A20]
class UAnimNodeBlendMultiBone : public UAnimNodeBlendBase
{
public:
	TArray<struct FChildBoneBlendInfo>                 BlendTargetList;                                  		// 0x0000E4 (0x000C)              
	TArray<unsigned char>                              SourceRequiredBones;                              		// 0x0000F0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeBlendMultiBone");
		return pClassPointer;
	};

public:
	void SetTargetStartBone(int TargetIdx,struct FName StartBoneName,float PerBoneIncrease);//Engine.AnimNodeBlendMultiBone.SetTargetStartBone
};
UClass* UAnimNodeBlendMultiBone::pClassPointer = NULL;

//0x000004 (0x0000E8 - 0x0000E4)
//AnimNodeMirror[0x102D18F0]
class UAnimNodeMirror : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bEnableMirroring : 1;                             		// 0x0000E4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeMirror");
		return pClassPointer;
	};
};
UClass* UAnimNodeMirror::pClassPointer = NULL;

//0x000004 (0x0000E8 - 0x0000E4)
//AnimNodeScalePlayRate[0x102D17C0]
class UAnimNodeScalePlayRate : public UAnimNodeBlendBase
{
public:
	float                                              ScaleByValue;                                     		// 0x0000E4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeScalePlayRate");
		return pClassPointer;
	};
};
UClass* UAnimNodeScalePlayRate::pClassPointer = NULL;

//0x000004 (0x0000EC - 0x0000E8)
//AnimNodeScaleRateBySpeed[0x102D1690]
class UAnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                        		// 0x0000E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeScaleRateBySpeed");
		return pClassPointer;
	};
};
UClass* UAnimNodeScaleRateBySpeed::pClassPointer = NULL;

//0x000024 (0x000108 - 0x0000E4)
//AnimNodeSlot[0x102D1560]
class UAnimNodeSlot : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x0000E4 (0x0004) [0x00000001] 
	unsigned long                                      bEarlyAnimEndNotify : 1;                          		// 0x0000E4 (0x0004) [0x00000002] 
	float                                              PendingBlendOutTime;                              		// 0x0000E8 (0x0004)              
	int                                                CustomChildIndex;                                 		// 0x0000EC (0x0004)              
	int                                                TargetChildIndex;                                 		// 0x0000F0 (0x0004)              
	TArray<float>                                      TargetWeight;                                     		// 0x0000F4 (0x000C)              
	float                                              BlendTimeToGo;                                    		// 0x000100 (0x0004)              
	class UAnimNodeSynch*                              SynchNode;                                        		// 0x000104 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeSlot");
		return pClassPointer;
	};

public:
	class UAnimNodeSequence* GetCustomAnimNodeSeq();//Engine.AnimNodeSlot.GetCustomAnimNodeSeq
	void SetActorAnimEndNotification(bool bNewStatus);//Engine.AnimNodeSlot.SetActorAnimEndNotification
	void StopCustomAnim(float BlendOutTime);//Engine.AnimNodeSlot.StopCustomAnim
	float PlayCustomAnim(struct FName AnimName,float Rate,float BlendInTime,float BlendOutTime,bool bLooping,bool bOverride);//Engine.AnimNodeSlot.PlayCustomAnim
	void SetCustomAnim(struct FName AnimName);//Engine.AnimNodeSlot.SetCustomAnim
	void PlayCustomAnimByDuration(struct FName AnimName,float Duration,float BlendInTime,float BlendOutTime,bool bLooping,bool bOverride);//Engine.AnimNodeSlot.PlayCustomAnimByDuration
	void SetRootBoneAxisOption(unsigned char AxisX,unsigned char AxisY,unsigned char AxisZ);//Engine.AnimNodeSlot.SetRootBoneAxisOption
	void AddToSynchGroup(struct FName GroupName);//Engine.AnimNodeSlot.AddToSynchGroup
	struct FName GetPlayedAnimation();//Engine.AnimNodeSlot.GetPlayedAnimation
};
UClass* UAnimNodeSlot::pClassPointer = NULL;

//0x00000C (0x0000F0 - 0x0000E4)
//AnimNodeSynch[0x102D1430]
class UAnimNodeSynch : public UAnimNodeBlendBase
{
public:
	TArray<struct FSynchGroup>                         Groups;                                           		// 0x0000E4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeSynch");
		return pClassPointer;
	};

public:
	class UAnimNodeSequence* GetMasterNodeOfGroup(struct FName GroupName);//Engine.AnimNodeSynch.GetMasterNodeOfGroup
	void ForceRelativePosition(struct FName GroupName,float RelativePosition);//Engine.AnimNodeSynch.ForceRelativePosition
	void RemoveNodeFromGroup(class UAnimNodeSequence* SeqNode,struct FName GroupName);//Engine.AnimNodeSynch.RemoveNodeFromGroup
	void AddNodeToGroup(class UAnimNodeSequence* SeqNode,struct FName GroupName);//Engine.AnimNodeSynch.AddNodeToGroup
	float GetRelativePosition(struct FName GroupName);//Engine.AnimNodeSynch.GetRelativePosition
	void SetGroupRateScale(struct FName GroupName,float NewRateScale);//Engine.AnimNodeSynch.SetGroupRateScale
};
UClass* UAnimNodeSynch::pClassPointer = NULL;

//0x00008C (0x000170 - 0x0000E4)
//AnimTree[0x102D1300]
class UAnimTree : public UAnimNodeBlendBase
{
public:
	TArray<struct FAnimGroup>                          AnimGroups;                                       		// 0x0000E4 (0x000C)              
	TArray<struct FName>                               PrioritizedSkelBranches;                          		// 0x0000F0 (0x000C)              
	TArray<unsigned char>                              PriorityList;                                     		// 0x0000FC (0x000C)              
	class UcAnimConfigureNode*                         RootConfigureNode;                                		// 0x000108 (0x0004)              
	class UcAnimCameraNode*                            RootCameraNode;                                   		// 0x00010C (0x0004)              
	TArray<class UMorphNodeBase*>                      RootMorphNodes;                                   		// 0x000110 (0x000C)              
	TArray<struct FSkelControlListHead>                SkelControlLists;                                 		// 0x00011C (0x000C)              
	DWORD                                              pInstanceData;                                    		// 0x000128 (0x0004)              
	int                                                ConfigureConnDrawY;                               		// 0x00012C (0x0004)              
	int                                                CameraConnDrawY;                                  		// 0x000130 (0x0004)              
	int                                                MorphConnDrawY;                                   		// 0x000134 (0x0004)              
	unsigned long                                      bBeingEdited : 1;                                 		// 0x000138 (0x0004) [0x00000001] 
	float                                              PreviewPlayRate;                                  		// 0x00013C (0x0004)              
	struct FName                                       SocketName;                                       		// 0x000140 (0x0008)              
	FVector3                                           PreviewCamPos;                                    		// 0x000148 (0x000C)              
	FRotator                                           PreviewCamRot;                                    		// 0x000154 (0x000C)              
	FVector3                                           PreviewFloorPos;                                  		// 0x000160 (0x000C)              
	int                                                PreviewFloorYaw;                                  		// 0x00016C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimTree");
		return pClassPointer;
	};

public:
	class UAnimNodeSequence* GetGroupNotifyMaster(struct FName GroupName);//Engine.AnimTree.GetGroupNotifyMaster
	class UcAnimConfigureNode* FindConfigureNode(struct FName sNodeName);//Engine.AnimTree.FindConfigureNode
	bool SetAnimGroupForNode(class UAnimNodeSequence* SeqNode,struct FName GroupName,bool bCreateIfNotFound);//Engine.AnimTree.SetAnimGroupForNode
	int GetGroupIndex(struct FName GroupName);//Engine.AnimTree.GetGroupIndex
	void SetGroupRateScale(struct FName GroupName,float NewRateScale);//Engine.AnimTree.SetGroupRateScale
	float GetGroupRelativePosition(struct FName GroupName);//Engine.AnimTree.GetGroupRelativePosition
	class UMorphNodeBase* FindMorphNode(struct FName InNodeName);//Engine.AnimTree.FindMorphNode
	class UAnimNodeSequence* GetGroupSynchMaster(struct FName GroupName);//Engine.AnimTree.GetGroupSynchMaster
	class USkelControlBase* FindSkelControl(struct FName InControlName);//Engine.AnimTree.FindSkelControl
	void ForceGroupRelativePosition(struct FName GroupName,float RelativePosition);//Engine.AnimTree.ForceGroupRelativePosition
};
UClass* UAnimTree::pClassPointer = NULL;

//0x00004E (0x000122 - 0x0000D4)
//AnimNodeSequence[0x102D11D0]
class UAnimNodeSequence : public UAnimNode
{
public:
	struct FName                                       AnimSeqName;                                      		// 0x0000D4 (0x0008)              
	float                                              Rate;                                             		// 0x0000DC (0x0004)              
	unsigned long                                      bPlaying : 1;                                     		// 0x0000E0 (0x0004) [0x00000001] 
	unsigned long                                      bLooping : 1;                                     		// 0x0000E0 (0x0004) [0x00000002] 
	unsigned long                                      bCauseActorAnimEnd : 1;                           		// 0x0000E0 (0x0004) [0x00000004] 
	unsigned long                                      bCauseActorAnimPlay : 1;                          		// 0x0000E0 (0x0004) [0x00000008] 
	unsigned long                                      bCauseParentAnimEnd : 1;                          		// 0x0000E0 (0x0004) [0x00000010] 
	unsigned long                                      bCauseParentLoopingAnimEnd : 1;                   		// 0x0000E0 (0x0004) [0x00000020] 
	unsigned long                                      bZeroRootRotation : 1;                            		// 0x0000E0 (0x0004) [0x00000040] 
	unsigned long                                      bZeroRootTranslation : 1;                         		// 0x0000E0 (0x0004) [0x00000080] 
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x0000E0 (0x0004) [0x00000100] 
	unsigned long                                      bNoNotifies : 1;                                  		// 0x0000E0 (0x0004) [0x00000200] 
	unsigned long                                      bForceRefposeWhenNotPlaying : 1;                  		// 0x0000E0 (0x0004) [0x00000400] 
	unsigned long                                      bIsIssuingNotifies : 1;                           		// 0x0000E0 (0x0004) [0x00000800] 
	unsigned long                                      bForceAlwaysSlave : 1;                            		// 0x0000E0 (0x0004) [0x00001000] 
	unsigned long                                      bForceAlwaysMaster : 1;                           		// 0x0000E0 (0x0004) [0x00002000] 
	unsigned long                                      bSynchronize : 1;                                 		// 0x0000E0 (0x0004) [0x00004000] 
	unsigned long                                      bShowTimeLineSlider : 1;                          		// 0x0000E0 (0x0004) [0x00008000] 
	unsigned long                                      bLoopCameraAnim : 1;                              		// 0x0000E0 (0x0004) [0x00010000] 
	unsigned long                                      bRandomizeCameraAnimLoopStartTime : 1;            		// 0x0000E0 (0x0004) [0x00020000] 
	unsigned long                                      bRootBoneLockFinalFrame : 1;                      		// 0x0000E0 (0x0004) [0x00040000] 
	unsigned long                                      bUseRootMotionThreshold : 1;                      		// 0x0000E0 (0x0004) [0x00080000] 
	float                                              CurrentTime;                                      		// 0x0000E4 (0x0004)              
	float                                              PreviousTime;                                     		// 0x0000E8 (0x0004)              
	class UAnimSequence*                               AnimSeq;                                          		// 0x0000EC (0x0004)              
	int                                                AnimLinkupIndex;                                  		// 0x0000F0 (0x0004)              
	float                                              NotifyWeightThreshold;                            		// 0x0000F4 (0x0004)              
	struct FName                                       SynchGroupName;                                   		// 0x0000F8 (0x0008)              
	float                                              SynchPosOffset;                                   		// 0x000100 (0x0004)              
	class UTexture2D*                                  DebugTrack;                                       		// 0x000104 (0x0004)              
	class UTexture2D*                                  DebugCarat;                                       		// 0x000108 (0x0004)              
	class UCameraAnim*                                 CameraAnim;                                       		// 0x00010C (0x0004)              
	class UCameraAnimInst*                             ActiveCameraAnimInstance;                         		// 0x000110 (0x0004)              
	float                                              CameraAnimScale;                                  		// 0x000114 (0x0004)              
	float                                              CameraAnimPlayRate;                               		// 0x000118 (0x0004)              
	unsigned char                                      RootBoneOption[0x3];                              		// 0x00011C (0x0003)              PROPERTY: ERootBoneAxis
	unsigned char                                      RootRotationOption[0x3];                          		// 0x00011F (0x0003)              PROPERTY: ERootRotationOption

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeSequence");
		return pClassPointer;
	};

public:
	void PlayAnim(bool bLoop,float InRate,float StartTime);//Engine.AnimNodeSequence.PlayAnim
	float FindNormalizedPositionFromGroupRelativePosition(float GroupRelativePosition);//Engine.AnimNodeSequence.FindNormalizedPositionFromGroupRelativePosition
	void SetAnim(struct FName Sequence);//Engine.AnimNodeSequence.SetAnim
	float GetGlobalPlayRate();//Engine.AnimNodeSequence.GetGlobalPlayRate
	float GetNormalizedPosition();//Engine.AnimNodeSequence.GetNormalizedPosition
	float GetAnimPlaybackLength();//Engine.AnimNodeSequence.GetAnimPlaybackLength
	void StopAnim();//Engine.AnimNodeSequence.StopAnim
	void SetPosition(float NewTime,bool bFireNotifies);//Engine.AnimNodeSequence.SetPosition
	float GetTimeLeft();//Engine.AnimNodeSequence.GetTimeLeft
};
UClass* UAnimNodeSequence::pClassPointer = NULL;

//0x00000E (0x000130 - 0x000122)
//AnimNodeSequenceBlendBase[0x102D10A0]
class UAnimNodeSequenceBlendBase : public UAnimNodeSequence
{
public:
	unsigned char                                      _0x000122[0x2];                                   		// 0x000122 (0x0002) MISSED OFFSET
	TArray<struct FAnimBlendInfo>                      Anims;                                            		// 0x000124 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeSequenceBlendBase");
		return pClassPointer;
	};
};
UClass* UAnimNodeSequenceBlendBase::pClassPointer = NULL;

//0x000068 (0x000198 - 0x000130)
//AnimNodeSequenceBlendByAim[0x102D0F70]
class UAnimNodeSequenceBlendByAim : public UAnimNodeSequenceBlendBase
{
public:
	FVector2                                           Aim;                                              		// 0x000130 (0x0008)              
	FVector2                                           HorizontalRange;                                  		// 0x000138 (0x0008)              
	FVector2                                           VerticalRange;                                    		// 0x000140 (0x0008)              
	FVector2                                           AngleOffset;                                      		// 0x000148 (0x0008)              
	struct FName                                       AnimName_LU;                                      		// 0x000150 (0x0008)              
	struct FName                                       AnimName_LC;                                      		// 0x000158 (0x0008)              
	struct FName                                       AnimName_LD;                                      		// 0x000160 (0x0008)              
	struct FName                                       AnimName_CU;                                      		// 0x000168 (0x0008)              
	struct FName                                       AnimName_CC;                                      		// 0x000170 (0x0008)              
	struct FName                                       AnimName_CD;                                      		// 0x000178 (0x0008)              
	struct FName                                       AnimName_RU;                                      		// 0x000180 (0x0008)              
	struct FName                                       AnimName_RC;                                      		// 0x000188 (0x0008)              
	struct FName                                       AnimName_RD;                                      		// 0x000190 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNodeSequenceBlendByAim");
		return pClassPointer;
	};
};
UClass* UAnimNodeSequenceBlendByAim::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//AnimNotify[0x102D0E40]
class UAnimNotify : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNotify");
		return pClassPointer;
	};
};
UClass* UAnimNotify::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//AnimNotify_Footstep[0x102D0D10]
class UAnimNotify_Footstep : public UAnimNotify
{
public:
	int                                                FootDown;                                         		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNotify_Footstep");
		return pClassPointer;
	};
};
UClass* UAnimNotify_Footstep::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//AnimNotify_Script[0x102D0BE0]
class UAnimNotify_Script : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                       		// 0x000040 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNotify_Script");
		return pClassPointer;
	};
};
UClass* UAnimNotify_Script::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//AnimNotify_Scripted[0x102D0AB0]
class UAnimNotify_Scripted : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNotify_Scripted");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//Engine.AnimNotify_Scripted.Notify
};
UClass* UAnimNotify_Scripted::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//cAnimNotifyLogical[0x102D0980]
class UcAnimNotifyLogical : public UAnimNotify_Scripted
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cAnimNotifyLogical");
		return pClassPointer;
	};
};
UClass* UcAnimNotifyLogical::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//AnimNotify_Sound[0x102D0850]
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x000040 (0x0004)              
	unsigned long                                      bFollowActor : 1;                                 		// 0x000044 (0x0004) [0x00000001] 
	struct FName                                       BoneName;                                         		// 0x000048 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNotify_Sound");
		return pClassPointer;
	};
};
UClass* UAnimNotify_Sound::pClassPointer = NULL;

//0x000080 (0x0000C0 - 0x000040)
//AnimSequence[0x102D0720]
class UAnimSequence : public UObject
{
public:
	struct FName                                       SequenceName;                                     		// 0x000040 (0x0008)              
	TArray<struct FAnimNotifyEvent>                    Notifies;                                         		// 0x000048 (0x000C)              
	float                                              SequenceLength;                                   		// 0x000054 (0x0004)              
	int                                                NumFrames;                                        		// 0x000058 (0x0004)              
	float                                              RateScale;                                        		// 0x00005C (0x0004)              
	unsigned long                                      bNoLoopingInterpolation : 1;                      		// 0x000060 (0x0004) [0x00000001] 
	TArray<struct FTranslationTrack>                   TranslationData;                                  		// 0x000064 (0x000C)              
	TArray<struct FRotationTrack>                      RotationData;                                     		// 0x000070 (0x000C)              
	unsigned char                                      TranslationCompressionFormat;                     		// 0x00007C (0x0001)              PROPERTY: AnimationCompressionFormat
	unsigned char                                      RotationCompressionFormat;                        		// 0x00007D (0x0001)              PROPERTY: AnimationCompressionFormat
	unsigned char                                      _0x00007E[0x2];                                   		// 0x00007E (0x0002) MISSED OFFSET
	TArray<int>                                        CompressedTrackOffsets;                           		// 0x000080 (0x000C)              
	TArray<unsigned char>                              CompressedByteStream;                             		// 0x00008C (0x000C)              
	TArray<unsigned long>                              TrackIsMissing;                                   		// 0x000098 (0x000C)              
	struct FName                                       UnityCompressionBase;                             		// 0x0000A4 (0x0008)              
	class UAnimSequence*                               m_UnityCompressionBaseSequence;                   		// 0x0000AC (0x0004)              
	class UcBodySectionDescriptor*                     UnityCompressionBodySection;                      		// 0x0000B0 (0x0004)              
	TArray<int>                                        m_anUnityCompressionTrackToBaseTrackLinkup;       		// 0x0000B4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimSequence");
		return pClassPointer;
	};
};
UClass* UAnimSequence::pClassPointer = NULL;

//0x000055 (0x000095 - 0x000040)
//AnimSet[0x102D05F0]
class UAnimSet : public UObject
{
public:
	unsigned long                                      bAnimRotationOnly : 1;                            		// 0x000040 (0x0004) [0x00000001] 
	TArray<struct FName>                               TrackBoneNames;                                   		// 0x000044 (0x000C)              
	TArray<class UAnimSequence*>                       Sequences;                                        		// 0x000050 (0x000C)              
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                      		// 0x00005C (0x000C)              
	TArray<struct FName>                               UseTranslationBoneNames;                          		// 0x000068 (0x000C)              
	struct FName                                       PreviewSkelMeshName;                              		// 0x000074 (0x0008)              
	TArray<struct FAimOffsetProfile>                   AimOffsetProfiles;                                		// 0x00007C (0x000C)              
	TArray<class UAnimSet*>                            UnityCompressionBaseAnimSets;                     		// 0x000088 (0x000C)              
	unsigned char                                      AnimationCategory;                                		// 0x000094 (0x0001)              PROPERTY: etAnimSetAnimationCategory

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimSet");
		return pClassPointer;
	};
};
UClass* UAnimSet::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//cAnimCameraNode[0x102D04C0]
class UcAnimCameraNode : public UObject
{
public:
	struct FName                                       NodeName;                                         		// 0x000040 (0x0008)              
	int                                                AnimTreeLinkIndex;                                		// 0x000048 (0x0004)              
	int                                                NodePositionX;                                    		// 0x00004C (0x0004)              
	int                                                NodePositionY;                                    		// 0x000050 (0x0004)              
	int                                                DrawWidth;                                        		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cAnimCameraNode");
		return pClassPointer;
	};

public:
	bool LinkIsValid(class UAnimTree* AnimTree);//Engine.cAnimCameraNode.LinkIsValid
	bool IsActive(class UAnimTree* AnimTree);//Engine.cAnimCameraNode.IsActive
};
UClass* UcAnimCameraNode::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//cAnimConfigureNode[0x102D0390]
class UcAnimConfigureNode : public UObject
{
public:
	struct FName                                       NodeName;                                         		// 0x000040 (0x0008)              
	int                                                m_nAnimTreeLinkIndex;                             		// 0x000048 (0x0004)              
	int                                                m_nNodePosX;                                      		// 0x00004C (0x0004)              
	int                                                m_nNodePosY;                                      		// 0x000050 (0x0004)              
	int                                                m_nDrawWidth;                                     		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cAnimConfigureNode");
		return pClassPointer;
	};

public:
	bool LinkIsValid(class UAnimTree* pAnimTree);//Engine.cAnimConfigureNode.LinkIsValid
	bool IsActive(class UAnimTree* pAnimTree);//Engine.cAnimConfigureNode.IsActive
	void SetDecision(class UAnimTree* pAnimTree,int nDecision);//Engine.cAnimConfigureNode.SetDecision
	int RetDecision(class UAnimTree* pAnimTree);//Engine.cAnimConfigureNode.RetDecision
};
UClass* UcAnimConfigureNode::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//cBodySectionDescriptor[0x102D0260]
class UcBodySectionDescriptor : public UObject
{
public:
	class USkeletalMesh*                               m_SkeletalMesh;                                   		// 0x000040 (0x0004)              
	TArray<struct FName>                               m_asBranchStartBoneNames;                         		// 0x000044 (0x000C)              
	TArray<struct FName>                               m_asIndividualBoneNames;                          		// 0x000050 (0x000C)              
	TArray<unsigned long>                              m_abBoneInBodySection;                            		// 0x00005C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cBodySectionDescriptor");
		return pClassPointer;
	};
};
UClass* UcBodySectionDescriptor::pClassPointer = NULL;

//0x00001C (0x00005C - 0x000040)
//cPlayerAnimSetup[0x102D0130]
class UcPlayerAnimSetup : public UObject
{
public:
	class UAnimTree*                                   AnimTree;                                         		// 0x000040 (0x0004)              
	TArray<class UAnimSet*>                            AnimSets;                                         		// 0x000044 (0x000C)              
	TArray<class UAnimSet*>                            FallbackAnimSets;                                 		// 0x000050 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cPlayerAnimSetup");
		return pClassPointer;
	};
};
UClass* UcPlayerAnimSetup::pClassPointer = NULL;

//0x000024 (0x000064 - 0x000040)
//MorphNodeBase[0x102D0000]
class UMorphNodeBase : public UObject
{
public:
	struct FName                                       NodeName;                                         		// 0x000040 (0x0008)              
	unsigned long                                      bDrawSlider : 1;                                  		// 0x000048 (0x0004) [0x00000001] 
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x00004C (0x0004)              
	int                                                NodePosX;                                         		// 0x000050 (0x0004)              
	int                                                NodePosY;                                         		// 0x000054 (0x0004)              
	int                                                DrawWidth;                                        		// 0x000058 (0x0004)              
	int                                                DrawHeight;                                       		// 0x00005C (0x0004)              
	int                                                OutDrawY;                                         		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MorphNodeBase");
		return pClassPointer;
	};
};
UClass* UMorphNodeBase::pClassPointer = NULL;

//0x000010 (0x000074 - 0x000064)
//MorphNodePose[0x102FFE20]
class UMorphNodePose : public UMorphNodeBase
{
public:
	class UMorphTarget*                                Target;                                           		// 0x000064 (0x0004)              
	struct FName                                       MorphName;                                        		// 0x000068 (0x0008)              
	float                                              Weight;                                           		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MorphNodePose");
		return pClassPointer;
	};

public:
	void SetMorphTarget(struct FName MorphTargetName);//Engine.MorphNodePose.SetMorphTarget
};
UClass* UMorphNodePose::pClassPointer = NULL;

//0x00000C (0x000070 - 0x000064)
//MorphNodeWeightBase[0x102FFCF0]
class UMorphNodeWeightBase : public UMorphNodeBase
{
public:
	TArray<struct FMorphNodeConn>                      NodeConns;                                        		// 0x000064 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MorphNodeWeightBase");
		return pClassPointer;
	};
};
UClass* UMorphNodeWeightBase::pClassPointer = NULL;

//0x000004 (0x000074 - 0x000070)
//MorphNodeWeight[0x102FFBC0]
class UMorphNodeWeight : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                       		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MorphNodeWeight");
		return pClassPointer;
	};

public:
	void SetNodeWeight(float NewWeight);//Engine.MorphNodeWeight.SetNodeWeight
};
UClass* UMorphNodeWeight::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//MorphTarget[0x102FFA90]
class UMorphTarget : public UObject
{
public:
	TArray<int>                                        MorphLODModels;                                   		// 0x000040 (0x000C)              
	unsigned long                                      m_bStreamable : 1;                                		// 0x00004C (0x0004) [0x00000001] 
	int                                                m_iHighestResidentLOD;                            		// 0x000050 (0x0004)              
	int                                                m_iHighestRequestedLOD;                           		// 0x000054 (0x0004)              
	unsigned long                                      m_bRequestedJustChanged : 1;                      		// 0x000058 (0x0004) [0x00000001] 
	int                                                m_iTotalLODs;                                     		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MorphTarget");
		return pClassPointer;
	};
};
UClass* UMorphTarget::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//MorphTargetSet[0x102FF960]
class UMorphTargetSet : public UObject
{
public:
	TArray<class UMorphTarget*>                        Targets;                                          		// 0x000040 (0x000C)              
	class USkeletalMesh*                               BaseSkelMesh;                                     		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MorphTargetSet");
		return pClassPointer;
	};

public:
	class UMorphTarget* FindMorphTarget(struct FName MorphTargetName);//Engine.MorphTargetSet.FindMorphTarget
};
UClass* UMorphTargetSet::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//MorphWeightSequence[0x102FF830]
class UMorphWeightSequence : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MorphWeightSequence");
		return pClassPointer;
	};
};
UClass* UMorphWeightSequence::pClassPointer = NULL;

//0x000058 (0x000098 - 0x000040)
//SkelControlBase[0x102FF700]
class USkelControlBase : public UObject
{
public:
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x000040 (0x0004)              
	struct FName                                       ControlName;                                      		// 0x000044 (0x0008)              
	float                                              ControlStrength;                                  		// 0x00004C (0x0004)              
	float                                              BlendInTime;                                      		// 0x000050 (0x0004)              
	float                                              BlendOutTime;                                     		// 0x000054 (0x0004)              
	float                                              StrengthTarget;                                   		// 0x000058 (0x0004)              
	float                                              BlendTimeToGo;                                    		// 0x00005C (0x0004)              
	unsigned long                                      bSetStrengthFromAnimNode : 1;                     		// 0x000060 (0x0004) [0x00000001] 
	unsigned long                                      bInitializedCachedNodeList : 1;                   		// 0x000060 (0x0004) [0x00000002] 
	unsigned long                                      bPropagateSetActive : 1;                          		// 0x000060 (0x0004) [0x00000004] 
	unsigned long                                      bIgnoreWhenNotRendered : 1;                       		// 0x000060 (0x0004) [0x00000008] 
	unsigned long                                      bEnableEaseInOut : 1;                             		// 0x000060 (0x0004) [0x00000010] 
	TArray<struct FName>                               StrengthAnimNodeNameList;                         		// 0x000064 (0x000C)              
	TArray<class UAnimNode*>                           CachedNodeList;                                   		// 0x000070 (0x000C)              
	float                                              BoneScale;                                        		// 0x00007C (0x0004)              
	int                                                ControlTickTag;                                   		// 0x000080 (0x0004)              
	int                                                IgnoreAtOrAboveLOD;                               		// 0x000084 (0x0004)              
	class USkelControlBase*                            NextControl;                                      		// 0x000088 (0x0004)              
	int                                                ControlPosX;                                      		// 0x00008C (0x0004)              
	int                                                ControlPosY;                                      		// 0x000090 (0x0004)              
	int                                                DrawWidth;                                        		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkelControlBase");
		return pClassPointer;
	};

public:
	void SetSkelControlStrength(float NewStrength,float InBlendTime);//Engine.SkelControlBase.SetSkelControlStrength
	void SetSkelControlActive(bool bInActive);//Engine.SkelControlBase.SetSkelControlActive
};
UClass* USkelControlBase::pClassPointer = NULL;

//0x000030 (0x0000C8 - 0x000098)
//SkelControlLimb[0x102FF5D0]
class USkelControlLimb : public USkelControlBase
{
public:
	FVector3                                           EffectorLocation;                                 		// 0x000098 (0x000C)              
	unsigned char                                      EffectorLocationSpace;                            		// 0x0000A4 (0x0001)              PROPERTY: EBoneControlSpace
	unsigned char                                      JointTargetLocationSpace;                         		// 0x0000A5 (0x0001)              PROPERTY: EBoneControlSpace
	unsigned char                                      BoneAxis;                                         		// 0x0000A6 (0x0001)              PROPERTY: EAxis
	unsigned char                                      JointAxis;                                        		// 0x0000A7 (0x0001)              PROPERTY: EAxis
	struct FName                                       EffectorSpaceBoneName;                            		// 0x0000A8 (0x0008)              
	FVector3                                           JointTargetLocation;                              		// 0x0000B0 (0x000C)              
	struct FName                                       JointTargetSpaceBoneName;                         		// 0x0000BC (0x0008)              
	unsigned long                                      bInvertBoneAxis : 1;                              		// 0x0000C4 (0x0004) [0x00000001] 
	unsigned long                                      bInvertJointAxis : 1;                             		// 0x0000C4 (0x0004) [0x00000002] 
	unsigned long                                      bMaintainEffectorRelRot : 1;                      		// 0x0000C4 (0x0004) [0x00000004] 
	unsigned long                                      bTakeRotationFromEffectorSpace : 1;               		// 0x0000C4 (0x0004) [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkelControlLimb");
		return pClassPointer;
	};
};
UClass* USkelControlLimb::pClassPointer = NULL;

//0x000024 (0x0000EC - 0x0000C8)
//SkelControlFootPlacement[0x102FF4A0]
class USkelControlFootPlacement : public USkelControlLimb
{
public:
	float                                              FootOffset;                                       		// 0x0000C8 (0x0004)              
	unsigned char                                      FootUpAxis;                                       		// 0x0000CC (0x0001)              PROPERTY: EAxis
	unsigned char                                      _0x0000CD[0x3];                                   		// 0x0000CD (0x0003) MISSED OFFSET
	FRotator                                           FootRotOffset;                                    		// 0x0000D0 (0x000C)              
	unsigned long                                      bInvertFootUpAxis : 1;                            		// 0x0000DC (0x0004) [0x00000001] 
	unsigned long                                      bOrientFootToGround : 1;                          		// 0x0000DC (0x0004) [0x00000002] 
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                   		// 0x0000DC (0x0004) [0x00000004] 
	float                                              MaxUpAdjustment;                                  		// 0x0000E0 (0x0004)              
	float                                              MaxDownAdjustment;                                		// 0x0000E4 (0x0004)              
	float                                              MaxFootOrientAdjust;                              		// 0x0000E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkelControlFootPlacement");
		return pClassPointer;
	};
};
UClass* USkelControlFootPlacement::pClassPointer = NULL;

//0x000074 (0x00010C - 0x000098)
//SkelControlLookAt[0x102FF370]
class USkelControlLookAt : public USkelControlBase
{
public:
	FVector3                                           TargetLocation;                                   		// 0x000098 (0x000C)              
	unsigned char                                      TargetLocationSpace;                              		// 0x0000A4 (0x0001)              PROPERTY: EBoneControlSpace
	unsigned char                                      LookAtAxis;                                       		// 0x0000A5 (0x0001)              PROPERTY: EAxis
	unsigned char                                      UpAxis;                                           		// 0x0000A6 (0x0001)              PROPERTY: EAxis
	unsigned char                                      AllowRotationSpace;                               		// 0x0000A7 (0x0001)              PROPERTY: EBoneControlSpace
	struct FName                                       TargetSpaceBoneName;                              		// 0x0000A8 (0x0008)              
	unsigned long                                      bInvertLookAtAxis : 1;                            		// 0x0000B0 (0x0004) [0x00000001] 
	unsigned long                                      bDefineUpAxis : 1;                                		// 0x0000B0 (0x0004) [0x00000002] 
	unsigned long                                      bInvertUpAxis : 1;                                		// 0x0000B0 (0x0004) [0x00000004] 
	unsigned long                                      bEnableLimit : 1;                                 		// 0x0000B0 (0x0004) [0x00000008] 
	unsigned long                                      bLimitBasedOnRefPose : 1;                         		// 0x0000B0 (0x0004) [0x00000010] 
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x0000B0 (0x0004) [0x00000020] 
	unsigned long                                      bNotifyBeyondLimit : 1;                           		// 0x0000B0 (0x0004) [0x00000040] 
	unsigned long                                      bShowLimit : 1;                                   		// 0x0000B0 (0x0004) [0x00000080] 
	unsigned long                                      bAllowRotationX : 1;                              		// 0x0000B0 (0x0004) [0x00000100] 
	unsigned long                                      bAllowRotationY : 1;                              		// 0x0000B0 (0x0004) [0x00000200] 
	unsigned long                                      bAllowRotationZ : 1;                              		// 0x0000B0 (0x0004) [0x00000400] 
	float                                              TargetLocationInterpSpeed;                        		// 0x0000B4 (0x0004)              
	FVector3                                           DesiredTargetLocation;                            		// 0x0000B8 (0x000C)              
	float                                              MaxAngle;                                         		// 0x0000C4 (0x0004)              
	float                                              DeadZoneAngle;                                    		// 0x0000C8 (0x0004)              
	struct FName                                       AllowRotationOtherBoneName;                       		// 0x0000CC (0x0008)              
	float                                              LookAtAlpha;                                      		// 0x0000D4 (0x0004)              
	float                                              LookAtAlphaTarget;                                		// 0x0000D8 (0x0004)              
	float                                              LookAtAlphaBlendTimeToGo;                         		// 0x0000DC (0x0004)              
	FVector3                                           LimitLookDir;                                     		// 0x0000E0 (0x000C)              
	FVector3                                           BaseLookDir;                                      		// 0x0000EC (0x000C)              
	FVector3                                           BaseBonePos;                                      		// 0x0000F8 (0x000C)              
	double                                             LastCalcTime;                                     		// 0x000104 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkelControlLookAt");
		return pClassPointer;
	};

public:
	void InterpolateTargetLocation(float DeltaTime);//Engine.SkelControlLookAt.InterpolateTargetLocation
	void SetTargetLocation(FVector3 NewTargetLocation);//Engine.SkelControlLookAt.SetTargetLocation
	void SetLookAtAlpha(float DesiredAlpha,float DesiredBlendTime);//Engine.SkelControlLookAt.SetLookAtAlpha
	bool CanLookAtPoint(FVector3 PointLoc,bool bDrawDebugInfo,bool bDebugUsePersistentLines,bool bDebugFlushLinesFirst);//Engine.SkelControlLookAt.CanLookAtPoint
};
UClass* USkelControlLookAt::pClassPointer = NULL;

//0x000030 (0x0000C8 - 0x000098)
//SkelControlSingleBone[0x102FF240]
class USkelControlSingleBone : public USkelControlBase
{
public:
	unsigned long                                      bApplyTranslation : 1;                            		// 0x000098 (0x0004) [0x00000001] 
	unsigned long                                      bAddTranslation : 1;                              		// 0x000098 (0x0004) [0x00000002] 
	unsigned long                                      bApplyRotation : 1;                               		// 0x000098 (0x0004) [0x00000004] 
	unsigned long                                      bAddRotation : 1;                                 		// 0x000098 (0x0004) [0x00000008] 
	FVector3                                           BoneTranslation;                                  		// 0x00009C (0x000C)              
	unsigned char                                      BoneTranslationSpace;                             		// 0x0000A8 (0x0001)              PROPERTY: EBoneControlSpace
	unsigned char                                      BoneRotationSpace;                                		// 0x0000A9 (0x0001)              PROPERTY: EBoneControlSpace
	unsigned char                                      _0x0000AA[0x2];                                   		// 0x0000AA (0x0002) MISSED OFFSET
	struct FName                                       TranslationSpaceBoneName;                         		// 0x0000AC (0x0008)              
	FRotator                                           BoneRotation;                                     		// 0x0000B4 (0x000C)              
	struct FName                                       RotationSpaceBoneName;                            		// 0x0000C0 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkelControlSingleBone");
		return pClassPointer;
	};
};
UClass* USkelControlSingleBone::pClassPointer = NULL;

//0x000018 (0x0000E0 - 0x0000C8)
//SkelControlWheel[0x102FF110]
class USkelControlWheel : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                		// 0x0000C8 (0x0004)              
	float                                              WheelMaxRenderDisplacement;                       		// 0x0000CC (0x0004)              
	float                                              WheelRoll;                                        		// 0x0000D0 (0x0004)              
	unsigned char                                      WheelRollAxis;                                    		// 0x0000D4 (0x0001)              PROPERTY: EAxis
	unsigned char                                      WheelSteeringAxis;                                		// 0x0000D5 (0x0001)              PROPERTY: EAxis
	unsigned char                                      _0x0000D6[0x2];                                   		// 0x0000D6 (0x0002) MISSED OFFSET
	float                                              WheelSteering;                                    		// 0x0000D8 (0x0004)              
	unsigned long                                      bInvertWheelRoll : 1;                             		// 0x0000DC (0x0004) [0x00000001] 
	unsigned long                                      bInvertWheelSteering : 1;                         		// 0x0000DC (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkelControlWheel");
		return pClassPointer;
	};
};
UClass* USkelControlWheel::pClassPointer = NULL;

//0x000014 (0x0000AC - 0x000098)
//SkelControlSpline[0x102FEFE0]
class USkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                     		// 0x000098 (0x0004)              
	unsigned char                                      SplineBoneAxis;                                   		// 0x00009C (0x0001)              PROPERTY: EAxis
	unsigned char                                      BoneRotMode;                                      		// 0x00009D (0x0001)              PROPERTY: ESplineControlRotMode
	unsigned char                                      _0x00009E[0x2];                                   		// 0x00009E (0x0002) MISSED OFFSET
	unsigned long                                      bInvertSplineBoneAxis : 1;                        		// 0x0000A0 (0x0004) [0x00000001] 
	float                                              EndSplineTension;                                 		// 0x0000A4 (0x0004)              
	float                                              StartSplineTension;                               		// 0x0000A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkelControlSpline");
		return pClassPointer;
	};
};
UClass* USkelControlSpline::pClassPointer = NULL;

//0x000024 (0x0000BC - 0x000098)
//SkelControlTrail[0x102FEEB0]
class USkelControlTrail : public USkelControlBase
{
public:
	int                                                ChainLength;                                      		// 0x000098 (0x0004)              
	unsigned char                                      ChainBoneAxis;                                    		// 0x00009C (0x0001)              PROPERTY: EAxis
	unsigned char                                      _0x00009D[0x3];                                   		// 0x00009D (0x0003) MISSED OFFSET
	unsigned long                                      bInvertChainBoneAxis : 1;                         		// 0x0000A0 (0x0004) [0x00000001] 
	unsigned long                                      bLimitStretch : 1;                                		// 0x0000A0 (0x0004) [0x00000002] 
	unsigned long                                      bHadValidStrength : 1;                            		// 0x0000A0 (0x0004) [0x00000004] 
	float                                              TrailRelaxation;                                  		// 0x0000A4 (0x0004)              
	float                                              StretchLimit;                                     		// 0x0000A8 (0x0004)              
	float                                              ThisTimstep;                                      		// 0x0000AC (0x0004)              
	TArray<FVector3>                                   TrailBoneLocations;                               		// 0x0000B0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkelControlTrail");
		return pClassPointer;
	};
};
UClass* USkelControlTrail::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//DecalActor[0x102FED80]
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                            		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DecalActor");
		return pClassPointer;
	};
};
UClass* ADecalActor::pClassPointer = NULL;

//0x0000F0 (0x0002D0 - 0x0001E0)
//DecalComponent[0x102FEC50]
class UDecalComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x0001E0 (0x0004)              
	float                                              Width;                                            		// 0x0001E4 (0x0004)              
	float                                              Height;                                           		// 0x0001E8 (0x0004)              
	float                                              TileX;                                            		// 0x0001EC (0x0004)              
	float                                              TileY;                                            		// 0x0001F0 (0x0004)              
	float                                              OffsetX;                                          		// 0x0001F4 (0x0004)              
	float                                              OffsetY;                                          		// 0x0001F8 (0x0004)              
	float                                              DecalRotation;                                    		// 0x0001FC (0x0004)              
	float                                              FieldOfView;                                      		// 0x000200 (0x0004)              
	float                                              NearPlane;                                        		// 0x000204 (0x0004)              
	float                                              FarPlane;                                         		// 0x000208 (0x0004)              
	FVector3                                           Location;                                         		// 0x00020C (0x000C)              
	FRotator                                           Orientation;                                      		// 0x000218 (0x000C)              
	FVector3                                           HitLocation;                                      		// 0x000224 (0x000C)              
	FVector3                                           HitNormal;                                        		// 0x000230 (0x000C)              
	FVector3                                           HitTangent;                                       		// 0x00023C (0x000C)              
	FVector3                                           HitBinormal;                                      		// 0x000248 (0x000C)              
	unsigned long                                      bNoClip : 1;                                      		// 0x000254 (0x0004) [0x00000001] 
	unsigned long                                      bStaticDecal : 1;                                 		// 0x000254 (0x0004) [0x00000002] 
	unsigned long                                      bProjectOnBackfaces : 1;                          		// 0x000254 (0x0004) [0x00000004] 
	unsigned long                                      bProjectOnHidden : 1;                             		// 0x000254 (0x0004) [0x00000008] 
	unsigned long                                      bProjectOnBSP : 1;                                		// 0x000254 (0x0004) [0x00000010] 
	unsigned long                                      bProjectOnStaticMeshes : 1;                       		// 0x000254 (0x0004) [0x00000020] 
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                     		// 0x000254 (0x0004) [0x00000040] 
	unsigned long                                      bProjectOnTerrain : 1;                            		// 0x000254 (0x0004) [0x00000080] 
	unsigned long                                      bFlipBackfaceDirection : 1;                       		// 0x000254 (0x0004) [0x00000100] 
	unsigned long                                      bHasBeenAttached : 1;                             		// 0x000254 (0x0004) [0x00000200] 
	class UPrimitiveComponent*                         HitComponent;                                     		// 0x000258 (0x0004)              
	struct FName                                       HitBone;                                          		// 0x00025C (0x0008)              
	int                                                HitNodeIndex;                                     		// 0x000264 (0x0004)              
	int                                                HitLevelIndex;                                    		// 0x000268 (0x0004)              
	TArray<int>                                        HitNodeIndices;                                   		// 0x00026C (0x000C)              
	TArray<struct FDecalReceiver>                      DecalReceivers;                                   		// 0x000278 (0x000C)              
	TArray<DWORD>                                      StaticReceivers;                                  		// 0x000284 (0x000C)              
	DWORD                                              ReleaseResourcesFence;                            		// 0x000290 (0x0004)              
	TArray<struct FPlane>                              Planes;                                           		// 0x000294 (0x000C)              
	float                                              DepthBias;                                        		// 0x0002A0 (0x0004)              
	float                                              SlopeScaleDepthBias;                              		// 0x0002A4 (0x0004)              
	int                                                SortOrder;                                        		// 0x0002A8 (0x0004)              
	float                                              BackfaceAngle;                                    		// 0x0002AC (0x0004)              
	unsigned char                                      FilterMode;                                       		// 0x0002B0 (0x0001)              PROPERTY: EFilterMode
	unsigned char                                      _0x0002B1[0x3];                                   		// 0x0002B1 (0x0003) MISSED OFFSET
	TArray<class AActor*>                              Filter;                                           		// 0x0002B4 (0x000C)              
	TArray<class UPrimitiveComponent*>                 ReceiverImages;                                   		// 0x0002C0 (0x000C)              
	DWORD                                              m_State;                                          		// 0x0002CC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DecalComponent");
		return pClassPointer;
	};

public:
	void ResetToDefaults();//Engine.DecalComponent.ResetToDefaults
};
UClass* UDecalComponent::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//ActorFactoryDecal[0x102FEB20]
class UActorFactoryDecal : public UActorFactory
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryDecal");
		return pClassPointer;
	};
};
UClass* UActorFactoryDecal::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//DecalMaterial[0x102FE9F0]
class UDecalMaterial : public UMaterial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DecalMaterial");
		return pClassPointer;
	};
};
UClass* UDecalMaterial::pClassPointer = NULL;

//0x00000C (0x00026C - 0x000260)
//FogVolumeDensityInfo[0x102FE8C0]
class AFogVolumeDensityInfo : public AInfo
{
public:
	class UFogVolumeDensityComponent*                  DensityComponent;                                 		// 0x000260 (0x0004)              
	class UStaticMeshComponent*                        AutomaticMeshComponent;                           		// 0x000264 (0x0004)              
	unsigned long                                      bEnabled : 1;                                     		// 0x000268 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FogVolumeDensityInfo");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//Engine.FogVolumeDensityInfo.ReplicatedEvent
	void OnToggle(class USeqAct_Toggle* Action);//Engine.FogVolumeDensityInfo.OnToggle
	void PostBeginPlay();//Engine.FogVolumeDensityInfo.PostBeginPlay
	bool OnSequenceAction(class USequenceAction* Action);//Engine.FogVolumeDensityInfo.OnSequenceAction
};
UClass* AFogVolumeDensityInfo::pClassPointer = NULL;

//0x000000 (0x00026C - 0x00026C)
//FogVolumeConeDensityInfo[0x102FE790]
class AFogVolumeConeDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FogVolumeConeDensityInfo");
		return pClassPointer;
	};
};
UClass* AFogVolumeConeDensityInfo::pClassPointer = NULL;

//0x000000 (0x00026C - 0x00026C)
//FogVolumeConstantDensityInfo[0x102FE660]
class AFogVolumeConstantDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FogVolumeConstantDensityInfo");
		return pClassPointer;
	};
};
UClass* AFogVolumeConstantDensityInfo::pClassPointer = NULL;

//0x000000 (0x00026C - 0x00026C)
//FogVolumeLinearHalfspaceDensityInfo[0x102FE530]
class AFogVolumeLinearHalfspaceDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FogVolumeLinearHalfspaceDensityInfo");
		return pClassPointer;
	};
};
UClass* AFogVolumeLinearHalfspaceDensityInfo::pClassPointer = NULL;

//0x000000 (0x00026C - 0x00026C)
//FogVolumeSphericalDensityInfo[0x102FE400]
class AFogVolumeSphericalDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FogVolumeSphericalDensityInfo");
		return pClassPointer;
	};
};
UClass* AFogVolumeSphericalDensityInfo::pClassPointer = NULL;

//0x00003F (0x000098 - 0x000059)
//FogVolumeDensityComponent[0x102FE2D0]
class UFogVolumeDensityComponent : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	class UMaterialInterface*                          FogMaterial;                                      		// 0x00005C (0x0004)              
	class UMaterialInterface*                          DefaultFogVolumeMaterial;                         		// 0x000060 (0x0004)              
	unsigned long                                      bEnabled : 1;                                     		// 0x000064 (0x0004) [0x00000001] 
	unsigned long                                      bAffectsTranslucency : 1;                         		// 0x000064 (0x0004) [0x00000002] 
	struct FLinearColor                                SimpleLightColor;                                 		// 0x000068 (0x0010)              
	struct FLinearColor                                ApproxFogLightColor;                              		// 0x000078 (0x0010)              
	float                                              StartDistance;                                    		// 0x000088 (0x0004)              
	TArray<class AActor*>                              FogVolumeActors;                                  		// 0x00008C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FogVolumeDensityComponent");
		return pClassPointer;
	};

public:
	void SetEnabled(bool bSetEnabled);//Engine.FogVolumeDensityComponent.SetEnabled
};
UClass* UFogVolumeDensityComponent::pClassPointer = NULL;

//0x000028 (0x0000C0 - 0x000098)
//FogVolumeConeDensityComponent[0x102FE1A0]
class UFogVolumeConeDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                       		// 0x000098 (0x0004)              
	FVector3                                           ConeVertex;                                       		// 0x00009C (0x000C)              
	float                                              ConeRadius;                                       		// 0x0000A8 (0x0004)              
	FVector3                                           ConeAxis;                                         		// 0x0000AC (0x000C)              
	float                                              ConeMaxAngle;                                     		// 0x0000B8 (0x0004)              
	class UDrawLightConeComponent*                     PreviewCone;                                      		// 0x0000BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FogVolumeConeDensityComponent");
		return pClassPointer;
	};
};
UClass* UFogVolumeConeDensityComponent::pClassPointer = NULL;

//0x000004 (0x00009C - 0x000098)
//FogVolumeConstantDensityComponent[0x102FE070]
class UFogVolumeConstantDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              Density;                                          		// 0x000098 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FogVolumeConstantDensityComponent");
		return pClassPointer;
	};
};
UClass* UFogVolumeConstantDensityComponent::pClassPointer = NULL;

//0x000018 (0x0000B0 - 0x000098)
//FogVolumeLinearHalfspaceDensityComponent[0x102FDF40]
class UFogVolumeLinearHalfspaceDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              PlaneDistanceFactor;                              		// 0x000098 (0x0004)              
	unsigned char                                      _0x00009C[0x4];                                   		// 0x00009C (0x0004) MISSED OFFSET
	struct FPlane                                      HalfspacePlane;                                   		// 0x0000A0 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FogVolumeLinearHalfspaceDensityComponent");
		return pClassPointer;
	};
};
UClass* UFogVolumeLinearHalfspaceDensityComponent::pClassPointer = NULL;

//0x000018 (0x0000B0 - 0x000098)
//FogVolumeSphericalDensityComponent[0x102FDE10]
class UFogVolumeSphericalDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                       		// 0x000098 (0x0004)              
	FVector3                                           SphereCenter;                                     		// 0x00009C (0x000C)              
	float                                              SphereRadius;                                     		// 0x0000A8 (0x0004)              
	class UDrawLightRadiusComponent*                   PreviewSphereRadius;                              		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FogVolumeSphericalDensityComponent");
		return pClassPointer;
	};
};
UClass* UFogVolumeSphericalDensityComponent::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//ActorFactoryFogVolumeConstantDensityInfo[0x102FDCE0]
class UActorFactoryFogVolumeConstantDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryFogVolumeConstantDensityInfo");
		return pClassPointer;
	};
};
UClass* UActorFactoryFogVolumeConstantDensityInfo::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//ActorFactoryFogVolumeLinearHalfspaceDensityInfo[0x102FDBB0]
class UActorFactoryFogVolumeLinearHalfspaceDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo");
		return pClassPointer;
	};
};
UClass* UActorFactoryFogVolumeLinearHalfspaceDensityInfo::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//ActorFactoryFogVolumeSphericalDensityInfo[0x102FDA80]
class UActorFactoryFogVolumeSphericalDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactoryFogVolumeSphericalDensityInfo");
		return pClassPointer;
	};
};
UClass* UActorFactoryFogVolumeSphericalDensityInfo::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//InterpFilter[0x102FD950]
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                          		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpFilter");
		return pClassPointer;
	};
};
UClass* UInterpFilter::pClassPointer = NULL;

//0x000000 (0x00004C - 0x00004C)
//InterpFilter_Classes[0x102FD820]
class UInterpFilter_Classes : public UInterpFilter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpFilter_Classes");
		return pClassPointer;
	};
};
UClass* UInterpFilter_Classes::pClassPointer = NULL;

//0x000000 (0x00004C - 0x00004C)
//InterpFilter_Custom[0x102FD6F0]
class UInterpFilter_Custom : public UInterpFilter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpFilter_Custom");
		return pClassPointer;
	};
};
UClass* UInterpFilter_Custom::pClassPointer = NULL;

//0x00002C (0x00006C - 0x000040)
//InterpGroup[0x102FD5C0]
class UInterpGroup : public UObject
{
public:
	DWORD                                              VfTable_FInterpEdInputInterface;                  		// 0x000040 (0x0004)              
	TArray<class UInterpTrack*>                        InterpTracks;                                     		// 0x000044 (0x000C)              
	struct FName                                       GroupName;                                        		// 0x000050 (0x0008)              
	DWORD                                              GroupColor;                                       		// 0x000058 (0x0004)              
	TArray<class UAnimSet*>                            GroupAnimSets;                                    		// 0x00005C (0x000C)              
	unsigned long                                      bCollapsed : 1;                                   		// 0x000068 (0x0004) [0x00000001] 
	unsigned long                                      bVisible : 1;                                     		// 0x000068 (0x0004) [0x00000002] 
	unsigned long                                      bIsFolder : 1;                                    		// 0x000068 (0x0004) [0x00000004] 
	unsigned long                                      bIsParented : 1;                                  		// 0x000068 (0x0004) [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpGroup");
		return pClassPointer;
	};
};
UClass* UInterpGroup::pClassPointer = NULL;

//0x000000 (0x00006C - 0x00006C)
//InterpGroupDirector[0x102FD490]
class UInterpGroupDirector : public UInterpGroup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpGroupDirector");
		return pClassPointer;
	};
};
UClass* UInterpGroupDirector::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//InterpGroupInst[0x102FD360]
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                            		// 0x000040 (0x0004)              
	class AActor*                                      GroupActor;                                       		// 0x000044 (0x0004)              
	class UUIObject*                                   GroupUIObject;                                    		// 0x000048 (0x0004)              
	TArray<class UInterpTrackInst*>                    TrackInst;                                        		// 0x00004C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpGroupInst");
		return pClassPointer;
	};
};
UClass* UInterpGroupInst::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//InterpGroupInstDirector[0x102FD230]
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpGroupInstDirector");
		return pClassPointer;
	};
};
UClass* UInterpGroupInstDirector::pClassPointer = NULL;

//0x00000C (0x000068 - 0x00005C)
//InterpTrackDirector[0x102FD100]
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                         		// 0x00005C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackDirector");
		return pClassPointer;
	};
};
UClass* UInterpTrackDirector::pClassPointer = NULL;

//0x000010 (0x00006C - 0x00005C)
//InterpTrackEvent[0x102FCFD0]
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                       		// 0x00005C (0x000C)              
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x000068 (0x0004) [0x00000001] 
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x000068 (0x0004) [0x00000002] 
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x000068 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackEvent");
		return pClassPointer;
	};
};
UClass* UInterpTrackEvent::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//InterpTrackFaceFX[0x102FCEA0]
class UInterpTrackFaceFX : public UInterpTrack
{
public:
	TArray<class UFaceFXAnimSet*>                      FaceFXAnimSets;                                   		// 0x00005C (0x000C)              
	TArray<struct FFaceFXTrackKey>                     FaceFXSeqs;                                       		// 0x000068 (0x000C)              
	class UFaceFXAsset*                                CachedActorFXAsset;                               		// 0x000074 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackFaceFX");
		return pClassPointer;
	};
};
UClass* UInterpTrackFaceFX::pClassPointer = NULL;

//0x000014 (0x000070 - 0x00005C)
//InterpTrackFloatBase[0x102FCD70]
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                       		// 0x00005C (0x0010)              
	float                                              CurveTension;                                     		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackFloatBase");
		return pClassPointer;
	};
};
UClass* UInterpTrackFloatBase::pClassPointer = NULL;

//0x000020 (0x000090 - 0x000070)
//InterpTrackAnimControl[0x102FCC40]
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	TArray<class UAnimSet*>                            AnimSets;                                         		// 0x000070 (0x000C)              
	struct FName                                       SlotName;                                         		// 0x00007C (0x0008)              
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                         		// 0x000084 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackAnimControl");
		return pClassPointer;
	};
};
UClass* UInterpTrackAnimControl::pClassPointer = NULL;

//0x000004 (0x000074 - 0x000070)
//InterpTrackFade[0x102FCB10]
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned long                                      bPersistFade : 1;                                 		// 0x000070 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackFade");
		return pClassPointer;
	};
};
UClass* UInterpTrackFade::pClassPointer = NULL;

//0x000008 (0x000078 - 0x000070)
//InterpTrackFloatMaterialParam[0x102FC9E0]
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                        		// 0x000070 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		return pClassPointer;
	};
};
UClass* UInterpTrackFloatMaterialParam::pClassPointer = NULL;

//0x000008 (0x000078 - 0x000070)
//InterpTrackFloatParticleParam[0x102FC8B0]
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                        		// 0x000070 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		return pClassPointer;
	};
};
UClass* UInterpTrackFloatParticleParam::pClassPointer = NULL;

//0x000008 (0x000078 - 0x000070)
//InterpTrackFloatProp[0x102FC780]
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x000070 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackFloatProp");
		return pClassPointer;
	};
};
UClass* UInterpTrackFloatProp::pClassPointer = NULL;

//0x000008 (0x000078 - 0x000070)
//InterpTrackMorphWeight[0x102FC650]
class UInterpTrackMorphWeight : public UInterpTrackFloatBase
{
public:
	struct FName                                       MorphNodeName;                                    		// 0x000070 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackMorphWeight");
		return pClassPointer;
	};
};
UClass* UInterpTrackMorphWeight::pClassPointer = NULL;

//0x000008 (0x000078 - 0x000070)
//InterpTrackSkelControlScale[0x102FC520]
class UInterpTrackSkelControlScale : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x000070 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackSkelControlScale");
		return pClassPointer;
	};
};
UClass* UInterpTrackSkelControlScale::pClassPointer = NULL;

//0x000000 (0x000070 - 0x000070)
//InterpTrackSlomo[0x102FC3F0]
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackSlomo");
		return pClassPointer;
	};
};
UClass* UInterpTrackSlomo::pClassPointer = NULL;

//0x000042 (0x00009E - 0x00005C)
//InterpTrackMove[0x102FC2C0]
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                         		// 0x00005C (0x0010)              
	struct FInterpCurveVector                          EulerTrack;                                       		// 0x00006C (0x0010)              
	struct FInterpLookupTrack                          LookupTrack;                                      		// 0x00007C (0x000C)              
	struct FName                                       LookAtGroupName;                                  		// 0x000088 (0x0008)              
	float                                              LinCurveTension;                                  		// 0x000090 (0x0004)              
	float                                              AngCurveTension;                                  		// 0x000094 (0x0004)              
	unsigned long                                      bUseQuatInterpolation : 1;                        		// 0x000098 (0x0004) [0x00000001] 
	unsigned long                                      bShowArrowAtKeys : 1;                             		// 0x000098 (0x0004) [0x00000002] 
	unsigned long                                      bDisableMovement : 1;                             		// 0x000098 (0x0004) [0x00000004] 
	unsigned long                                      bShowTranslationOnCurveEd : 1;                    		// 0x000098 (0x0004) [0x00000008] 
	unsigned long                                      bShowRotationOnCurveEd : 1;                       		// 0x000098 (0x0004) [0x00000010] 
	unsigned long                                      bHide3DTrack : 1;                                 		// 0x000098 (0x0004) [0x00000020] 
	unsigned char                                      MoveFrame;                                        		// 0x00009C (0x0001)              PROPERTY: EInterpTrackMoveFrame
	unsigned char                                      RotMode;                                          		// 0x00009D (0x0001)              PROPERTY: EInterpTrackMoveRotMode

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackMove");
		return pClassPointer;
	};
};
UClass* UInterpTrackMove::pClassPointer = NULL;

//0x000010 (0x00006C - 0x00005C)
//InterpTrackToggle[0x102FC190]
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                      		// 0x00005C (0x000C)              
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x000068 (0x0004) [0x00000001] 
	unsigned long                                      bActivateSystemEachUpdate : 1;                    		// 0x000068 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackToggle");
		return pClassPointer;
	};
};
UClass* UInterpTrackToggle::pClassPointer = NULL;

//0x000014 (0x000070 - 0x00005C)
//InterpTrackVectorBase[0x102FC060]
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                      		// 0x00005C (0x0010)              
	float                                              CurveTension;                                     		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackVectorBase");
		return pClassPointer;
	};
};
UClass* UInterpTrackVectorBase::pClassPointer = NULL;

//0x000008 (0x000078 - 0x000070)
//InterpTrackColorProp[0x102FBF30]
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x000070 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackColorProp");
		return pClassPointer;
	};
};
UClass* UInterpTrackColorProp::pClassPointer = NULL;

//0x000000 (0x000070 - 0x000070)
//InterpTrackColorScale[0x102FBE00]
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackColorScale");
		return pClassPointer;
	};
};
UClass* UInterpTrackColorScale::pClassPointer = NULL;

//0x000010 (0x000080 - 0x000070)
//InterpTrackSound[0x102FBCD0]
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                           		// 0x000070 (0x000C)              
	unsigned long                                      bContinueSoundOnMatineeEnd : 1;                   		// 0x00007C (0x0004) [0x00000001] 
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x00007C (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackSound");
		return pClassPointer;
	};
};
UClass* UInterpTrackSound::pClassPointer = NULL;

//0x000008 (0x000078 - 0x000070)
//InterpTrackVectorMaterialParam[0x102FBBA0]
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	struct FName                                       ParamName;                                        		// 0x000070 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		return pClassPointer;
	};
};
UClass* UInterpTrackVectorMaterialParam::pClassPointer = NULL;

//0x000008 (0x000078 - 0x000070)
//InterpTrackVectorProp[0x102FBA70]
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x000070 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackVectorProp");
		return pClassPointer;
	};
};
UClass* UInterpTrackVectorProp::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//InterpTrackInst[0x102FB940]
class UInterpTrackInst : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInst");
		return pClassPointer;
	};
};
UClass* UInterpTrackInst::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//InterpTrackInstAnimControl[0x102FB810]
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstAnimControl::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//InterpTrackInstColorScale[0x102FB6E0]
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstColorScale::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//InterpTrackInstDirector[0x102FB5B0]
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                    		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstDirector");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstDirector::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//InterpTrackInstEvent[0x102FB480]
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstEvent");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstEvent::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//InterpTrackInstFaceFX[0x102FB350]
class UInterpTrackInstFaceFX : public UInterpTrackInst
{
public:
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x000040 (0x0004) [0x00000001] 
	float                                              LastUpdatePosition;                               		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstFaceFX");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstFaceFX::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//InterpTrackInstFade[0x102FB220]
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstFade");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstFade::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//InterpTrackInstFloatMaterialParam[0x102FB0F0]
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstFloatMaterialParam::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//InterpTrackInstFloatParticleParam[0x102FAFC0]
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstFloatParticleParam::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//InterpTrackInstMorphWeight[0x102FAE90]
class UInterpTrackInstMorphWeight : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstMorphWeight");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstMorphWeight::pClassPointer = NULL;

//0x000070 (0x0000B0 - 0x000040)
//InterpTrackInstMove[0x102FAD60]
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	FVector3                                           ResetLocation;                                    		// 0x000040 (0x000C)              
	FRotator                                           ResetRotation;                                    		// 0x00004C (0x000C)              
	unsigned char                                      _0x000058[0x8];                                   		// 0x000058 (0x0008) MISSED OFFSET
	FMatrix                                            InitialTM;                                        		// 0x000060 (0x0040)              
	struct FQuat                                       InitialQuat;                                      		// 0x0000A0 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstMove");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstMove::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//InterpTrackInstProperty[0x102FAC30]
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UUpdatePropertyInterface*                    PropertyOuterObjectInst;                          		// 0x000040 (0x0004)              
	unsigned char                                      _0x000044[0x4];                                   		// 0x000044 (0x0004) ALIGNEMENT
	struct FName                                       PropertyName;                                     		// 0x000048 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstProperty");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstProperty::pClassPointer = NULL;

//0x000008 (0x000058 - 0x000050)
//InterpTrackInstColorProp[0x102FAB00]
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	DWORD                                              ColorProp;                                        		// 0x000050 (0x0004)              
	DWORD                                              ResetColor;                                       		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstColorProp::pClassPointer = NULL;

//0x000008 (0x000058 - 0x000050)
//InterpTrackInstFloatProp[0x102FA9D0]
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	DWORD                                              FloatProp;                                        		// 0x000050 (0x0004)              
	float                                              ResetFloat;                                       		// 0x000054 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstFloatProp::pClassPointer = NULL;

//0x000010 (0x000060 - 0x000050)
//InterpTrackInstVectorProp[0x102FA8A0]
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	DWORD                                              VectorProp;                                       		// 0x000050 (0x0004)              
	FVector3                                           ResetVector;                                      		// 0x000054 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstVectorProp::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//InterpTrackInstSkelControlScale[0x102FA770]
class UInterpTrackInstSkelControlScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstSkelControlScale");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstSkelControlScale::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//InterpTrackInstSlomo[0x102FA640]
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                  		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstSlomo");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstSlomo::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//InterpTrackInstSound[0x102FA510]
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x000040 (0x0004)              
	class UAudioComponent*                             PlayAudioComp;                                    		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstSound");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstSound::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//InterpTrackInstToggle[0x102FA3E0]
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	unsigned char                                      Action;                                           		// 0x000040 (0x0001)              PROPERTY: ETrackToggleAction
	unsigned char                                      _0x000041[0x3];                                   		// 0x000041 (0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                               		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstToggle");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstToggle::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//InterpTrackInstVectorMaterialParam[0x102FA2B0]
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	FVector3                                           ResetVector;                                      		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		return pClassPointer;
	};
};
UClass* UInterpTrackInstVectorMaterialParam::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionAbs[0x102FA180]
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionAbs");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionAbs::pClassPointer = NULL;

//0x000038 (0x000094 - 0x00005C)
//MaterialExpressionAdd[0x102FA050]
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00005C (0x001C)              
	struct FExpressionInput                            B;                                                		// 0x000078 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionAdd");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionAdd::pClassPointer = NULL;

//0x000038 (0x000094 - 0x00005C)
//MaterialExpressionAppendVector[0x102F9F20]
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00005C (0x001C)              
	struct FExpressionInput                            B;                                                		// 0x000078 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionAppendVector::pClassPointer = NULL;

//0x000040 (0x00009C - 0x00005C)
//MaterialExpressionBumpOffset[0x102F9DF0]
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x00005C (0x001C)              
	struct FExpressionInput                            Height;                                           		// 0x000078 (0x001C)              
	float                                              HeightRatio;                                      		// 0x000094 (0x0004)              
	float                                              ReferencePlane;                                   		// 0x000098 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionBumpOffset::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionCameraVector[0x102F9CC0]
class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCameraVector");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionCameraVector::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionCameraWorldPosition[0x102F9B90]
class UMaterialExpressionCameraWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCameraWorldPosition");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionCameraWorldPosition::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionCeil[0x102F9A60]
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCeil");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionCeil::pClassPointer = NULL;

//0x000054 (0x0000B0 - 0x00005C)
//MaterialExpressionClamp[0x102F9930]
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              
	struct FExpressionInput                            Min;                                              		// 0x000078 (0x001C)              
	struct FExpressionInput                            Max;                                              		// 0x000094 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionClamp");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionClamp::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionComment[0x102F9800]
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                PosX;                                             		// 0x00005C (0x0004)              
	int                                                PosY;                                             		// 0x000060 (0x0004)              
	int                                                SizeX;                                            		// 0x000064 (0x0004)              
	int                                                SizeY;                                            		// 0x000068 (0x0004)              
	struct FString                                     Text;                                             		// 0x00006C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionComment");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionComment::pClassPointer = NULL;

//0x000020 (0x00007C - 0x00005C)
//MaterialExpressionComponentMask[0x102F96D0]
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              
	unsigned long                                      R : 1;                                            		// 0x000078 (0x0004) [0x00000001] 
	unsigned long                                      G : 1;                                            		// 0x000078 (0x0004) [0x00000002] 
	unsigned long                                      B : 1;                                            		// 0x000078 (0x0004) [0x00000004] 
	unsigned long                                      A : 1;                                            		// 0x000078 (0x0004) [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionComponentMask::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionCompound[0x102F95A0]
class UMaterialExpressionCompound : public UMaterialExpression
{
public:
	TArray<class UMaterialExpression*>                 MaterialExpressions;                              		// 0x00005C (0x000C)              
	struct FString                                     Caption;                                          		// 0x000068 (0x000C)              
	unsigned long                                      bExpanded : 1;                                    		// 0x000074 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCompound");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionCompound::pClassPointer = NULL;

//0x000004 (0x000060 - 0x00005C)
//MaterialExpressionConstant[0x102F9470]
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstant");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionConstant::pClassPointer = NULL;

//0x000008 (0x000064 - 0x00005C)
//MaterialExpressionConstant2Vector[0x102F9340]
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x00005C (0x0004)              
	float                                              G;                                                		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionConstant2Vector::pClassPointer = NULL;

//0x00000C (0x000068 - 0x00005C)
//MaterialExpressionConstant3Vector[0x102F9210]
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x00005C (0x0004)              
	float                                              G;                                                		// 0x000060 (0x0004)              
	float                                              B;                                                		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionConstant3Vector::pClassPointer = NULL;

//0x000010 (0x00006C - 0x00005C)
//MaterialExpressionConstant4Vector[0x102F90E0]
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x00005C (0x0004)              
	float                                              G;                                                		// 0x000060 (0x0004)              
	float                                              B;                                                		// 0x000064 (0x0004)              
	float                                              A;                                                		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionConstant4Vector::pClassPointer = NULL;

//0x000024 (0x000080 - 0x00005C)
//MaterialExpressionConstantClamp[0x102F8FB0]
class UMaterialExpressionConstantClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              
	float                                              Min;                                              		// 0x000078 (0x0004)              
	float                                              Max;                                              		// 0x00007C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionConstantClamp");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionConstantClamp::pClassPointer = NULL;

//0x000020 (0x00007C - 0x00005C)
//MaterialExpressionCosine[0x102F8E80]
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              
	float                                              Period;                                           		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCosine");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionCosine::pClassPointer = NULL;

//0x000038 (0x000094 - 0x00005C)
//MaterialExpressionCrossProduct[0x102F8D50]
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00005C (0x001C)              
	struct FExpressionInput                            B;                                                		// 0x000078 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionCrossProduct::pClassPointer = NULL;

//0x000040 (0x00009C - 0x00005C)
//MaterialExpressionDepthBiasedAlpha[0x102F8C20]
class UMaterialExpressionDepthBiasedAlpha : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x00005C (0x0004) [0x00000001] 
	float                                              BiasScale;                                        		// 0x000060 (0x0004)              
	struct FExpressionInput                            Alpha;                                            		// 0x000064 (0x001C)              
	struct FExpressionInput                            Bias;                                             		// 0x000080 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasedAlpha");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDepthBiasedAlpha::pClassPointer = NULL;

//0x00005C (0x0000B8 - 0x00005C)
//MaterialExpressionDepthBiasedBlend[0x102F8AF0]
class UMaterialExpressionDepthBiasedBlend : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x00005C (0x0004) [0x00000001] 
	float                                              BiasScale;                                        		// 0x000060 (0x0004)              
	struct FExpressionInput                            RGB;                                              		// 0x000064 (0x001C)              
	struct FExpressionInput                            Alpha;                                            		// 0x000080 (0x001C)              
	struct FExpressionInput                            Bias;                                             		// 0x00009C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasedBlend");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDepthBiasedBlend::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionDeriveNormalZ[0x102F89C0]
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                             		// 0x00005C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDeriveNormalZ");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDeriveNormalZ::pClassPointer = NULL;

//0x000048 (0x0000A4 - 0x00005C)
//MaterialExpressionDesaturation[0x102F8890]
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              
	struct FExpressionInput                            Percent;                                          		// 0x000078 (0x001C)              
	struct FLinearColor                                LuminanceFactors;                                 		// 0x000094 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDesaturation::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionDestColor[0x102F8760]
class UMaterialExpressionDestColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDestColor");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDestColor::pClassPointer = NULL;

//0x000004 (0x000060 - 0x00005C)
//MaterialExpressionDestDepth[0x102F8630]
class UMaterialExpressionDestDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x00005C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDestDepth");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDestDepth::pClassPointer = NULL;

//0x000044 (0x0000A0 - 0x00005C)
//MaterialExpressionDistanceFieldFilter[0x102F8500]
class UMaterialExpressionDistanceFieldFilter : public UMaterialExpression
{
public:
	struct FExpressionInput                            DistanceField;                                    		// 0x00005C (0x001C)              
	struct FExpressionInput                            Minification;                                     		// 0x000078 (0x001C)              
	float                                              DistanceThreshold;                                		// 0x000094 (0x0004)              
	float                                              SoftEdgeEpsilon;                                  		// 0x000098 (0x0004)              
	float                                              BorderSize;                                       		// 0x00009C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDistanceFieldFilter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDistanceFieldFilter::pClassPointer = NULL;

//0x000038 (0x000094 - 0x00005C)
//MaterialExpressionDivide[0x102F83D0]
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00005C (0x001C)              
	struct FExpressionInput                            B;                                                		// 0x000078 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDivide");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDivide::pClassPointer = NULL;

//0x000038 (0x000094 - 0x00005C)
//MaterialExpressionDotProduct[0x102F82A0]
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00005C (0x001C)              
	struct FExpressionInput                            B;                                                		// 0x000078 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDotProduct::pClassPointer = NULL;

//0x00000C (0x000068 - 0x00005C)
//MaterialExpressionDynamicParameter[0x102F8170]
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                       		// 0x00005C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDynamicParameter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDynamicParameter::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionFloor[0x102F8040]
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFloor");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionFloor::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionFluidNormal[0x102F7F10]
class UMaterialExpressionFluidNormal : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFluidNormal");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionFluidNormal::pClassPointer = NULL;

//0x000008 (0x000064 - 0x00005C)
//MaterialExpressionFontSample[0x102F7DE0]
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                             		// 0x00005C (0x0004)              
	int                                                FontTexturePage;                                  		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionFontSample::pClassPointer = NULL;

//0x000018 (0x00007C - 0x000064)
//MaterialExpressionFontSampleParameter[0x102F7CB0]
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x000064 (0x0008)              
	struct FGuid                                       ExpressionGUID;                                   		// 0x00006C (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionFontSampleParameter::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionFrac[0x102F7B80]
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFrac");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionFrac::pClassPointer = NULL;

//0x000020 (0x00007C - 0x00005C)
//MaterialExpressionFresnel[0x102F7A50]
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	float                                              Exponent;                                         		// 0x00005C (0x0004)              
	struct FExpressionInput                            Normal;                                           		// 0x000060 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionFresnel::pClassPointer = NULL;

//0x00008C (0x0000E8 - 0x00005C)
//MaterialExpressionIf[0x102F7920]
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00005C (0x001C)              
	struct FExpressionInput                            B;                                                		// 0x000078 (0x001C)              
	struct FExpressionInput                            AGreaterThanB;                                    		// 0x000094 (0x001C)              
	struct FExpressionInput                            AEqualsB;                                         		// 0x0000B0 (0x001C)              
	struct FExpressionInput                            ALessThanB;                                       		// 0x0000CC (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionIf");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionIf::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionLensFlareIntensity[0x102F77F0]
class UMaterialExpressionLensFlareIntensity : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLensFlareIntensity");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionLensFlareIntensity::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionLensFlareOcclusion[0x102F76C0]
class UMaterialExpressionLensFlareOcclusion : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLensFlareOcclusion");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionLensFlareOcclusion::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionLensFlareRadialDistance[0x102F7590]
class UMaterialExpressionLensFlareRadialDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLensFlareRadialDistance");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionLensFlareRadialDistance::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionLensFlareRayDistance[0x102F7460]
class UMaterialExpressionLensFlareRayDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLensFlareRayDistance");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionLensFlareRayDistance::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionLensFlareSourceDistance[0x102F7330]
class UMaterialExpressionLensFlareSourceDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLensFlareSourceDistance");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionLensFlareSourceDistance::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionLightVector[0x102F7200]
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionLightVector::pClassPointer = NULL;

//0x000054 (0x0000B0 - 0x00005C)
//MaterialExpressionLinearInterpolate[0x102F70D0]
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00005C (0x001C)              
	struct FExpressionInput                            B;                                                		// 0x000078 (0x001C)              
	struct FExpressionInput                            Alpha;                                            		// 0x000094 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionLinearInterpolate::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionMeshEmitterVertexColor[0x102F6FA0]
class UMaterialExpressionMeshEmitterVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionMeshEmitterVertexColor");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionMeshEmitterVertexColor::pClassPointer = NULL;

//0x000038 (0x000094 - 0x00005C)
//MaterialExpressionMultiply[0x102F6E70]
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00005C (0x001C)              
	struct FExpressionInput                            B;                                                		// 0x000078 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionMultiply::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionNoOp[0x102F6D40]
class UMaterialExpressionNoOp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionNoOp");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionNoOp::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionNormalize[0x102F6C10]
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                      		// 0x00005C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionNormalize::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionOneMinus[0x102F6AE0]
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionOneMinus::pClassPointer = NULL;

//0x000040 (0x00009C - 0x00005C)
//MaterialExpressionPanner[0x102F69B0]
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x00005C (0x001C)              
	struct FExpressionInput                            Time;                                             		// 0x000078 (0x001C)              
	float                                              SpeedX;                                           		// 0x000094 (0x0004)              
	float                                              SpeedY;                                           		// 0x000098 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionPanner");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionPanner::pClassPointer = NULL;

//0x000018 (0x000074 - 0x00005C)
//MaterialExpressionParameter[0x102F6880]
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                    		// 0x00005C (0x0008)              
	struct FGuid                                       ExpressionGUID;                                   		// 0x000064 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionParameter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionParameter::pClassPointer = NULL;

//0x000004 (0x000078 - 0x000074)
//MaterialExpressionScalarParameter[0x102F6750]
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                     		// 0x000074 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionScalarParameter::pClassPointer = NULL;

//0x000024 (0x000098 - 0x000074)
//MaterialExpressionStaticComponentMaskParameter[0x102F6620]
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                            		// 0x000074 (0x001C)              
	unsigned long                                      DefaultR : 1;                                     		// 0x000090 (0x0004) [0x00000001] 
	unsigned long                                      DefaultG : 1;                                     		// 0x000090 (0x0004) [0x00000002] 
	unsigned long                                      DefaultB : 1;                                     		// 0x000090 (0x0004) [0x00000004] 
	unsigned long                                      DefaultA : 1;                                     		// 0x000090 (0x0004) [0x00000008] 
	DWORD                                              InstanceOverride;                                 		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionStaticComponentMaskParameter::pClassPointer = NULL;

//0x000040 (0x0000B4 - 0x000074)
//MaterialExpressionStaticSwitchParameter[0x102F64F0]
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionParameter
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x000074 (0x0004) [0x00000001] 
	unsigned long                                      ExtendedCaptionDisplay : 1;                       		// 0x000074 (0x0004) [0x00000002] 
	struct FExpressionInput                            A;                                                		// 0x000078 (0x001C)              
	struct FExpressionInput                            B;                                                		// 0x000094 (0x001C)              
	DWORD                                              InstanceOverride;                                 		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionStaticSwitchParameter::pClassPointer = NULL;

//0x000010 (0x000084 - 0x000074)
//MaterialExpressionVectorParameter[0x102F63C0]
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                     		// 0x000074 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionVectorParameter::pClassPointer = NULL;

//0x000004 (0x000060 - 0x00005C)
//MaterialExpressionPixelDepth[0x102F6290]
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x00005C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionPixelDepth::pClassPointer = NULL;

//0x000038 (0x000094 - 0x00005C)
//MaterialExpressionPower[0x102F6160]
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                             		// 0x00005C (0x001C)              
	struct FExpressionInput                            Exponent;                                         		// 0x000078 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionPower");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionPower::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionReflectionVector[0x102F6030]
class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionReflectionVector");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionReflectionVector::pClassPointer = NULL;

//0x000044 (0x0000A0 - 0x00005C)
//MaterialExpressionRotator[0x102F5F00]
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x00005C (0x001C)              
	struct FExpressionInput                            Time;                                             		// 0x000078 (0x001C)              
	float                                              CenterX;                                          		// 0x000094 (0x0004)              
	float                                              CenterY;                                          		// 0x000098 (0x0004)              
	float                                              Speed;                                            		// 0x00009C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionRotator");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionRotator::pClassPointer = NULL;

//0x000020 (0x00007C - 0x00005C)
//MaterialExpressionSceneDepth[0x102F5DD0]
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x00005C (0x001C)              
	unsigned long                                      bNormalize : 1;                                   		// 0x000078 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionSceneDepth::pClassPointer = NULL;

//0x000024 (0x000080 - 0x00005C)
//MaterialExpressionSceneTexture[0x102F5CA0]
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x00005C (0x001C)              
	unsigned char                                      SceneTextureType;                                 		// 0x000078 (0x0001)              PROPERTY: ESceneTextureType
	unsigned char                                      _0x000079[0x3];                                   		// 0x000079 (0x0003) MISSED OFFSET
	unsigned long                                      ScreenAlign : 1;                                  		// 0x00007C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionSceneTexture::pClassPointer = NULL;

//0x000004 (0x000060 - 0x00005C)
//MaterialExpressionScreenPosition[0x102F5B70]
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	unsigned long                                      ScreenAlign : 1;                                  		// 0x00005C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionScreenPosition::pClassPointer = NULL;

//0x000020 (0x00007C - 0x00005C)
//MaterialExpressionSine[0x102F5A40]
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              
	float                                              Period;                                           		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSine");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionSine::pClassPointer = NULL;

//0x00001C (0x000078 - 0x00005C)
//MaterialExpressionSquareRoot[0x102F5910]
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionSquareRoot::pClassPointer = NULL;

//0x000038 (0x000094 - 0x00005C)
//MaterialExpressionSubtract[0x102F57E0]
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00005C (0x001C)              
	struct FExpressionInput                            B;                                                		// 0x000078 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionSubtract::pClassPointer = NULL;

//0x000010 (0x00006C - 0x00005C)
//MaterialExpressionTextureCoordinate[0x102F56B0]
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                  		// 0x00005C (0x0004)              
	float                                              Tiling;                                           		// 0x000060 (0x0004)              
	float                                              UTiling;                                          		// 0x000064 (0x0004)              
	float                                              VTiling;                                          		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTextureCoordinate::pClassPointer = NULL;

//0x000020 (0x00007C - 0x00005C)
//MaterialExpressionTextureSample[0x102F5580]
class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x00005C (0x0004)              
	struct FExpressionInput                            Coordinates;                                      		// 0x000060 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTextureSample::pClassPointer = NULL;

//0x000024 (0x0000A0 - 0x00007C)
//MaterialExpressionDepthBiasBlend[0x102F5450]
class UMaterialExpressionDepthBiasBlend : public UMaterialExpressionTextureSample
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x00007C (0x0004) [0x00000001] 
	float                                              BiasScale;                                        		// 0x000080 (0x0004)              
	struct FExpressionInput                            Bias;                                             		// 0x000084 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasBlend");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionDepthBiasBlend::pClassPointer = NULL;

//0x000000 (0x00007C - 0x00007C)
//MaterialExpressionFlipBookSample[0x102F5320]
class UMaterialExpressionFlipBookSample : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionFlipBookSample");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionFlipBookSample::pClassPointer = NULL;

//0x000000 (0x00007C - 0x00007C)
//MaterialExpressionGolemTextureSample[0x102F51F0]
class UMaterialExpressionGolemTextureSample : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionGolemTextureSample");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionGolemTextureSample::pClassPointer = NULL;

//0x000000 (0x00007C - 0x00007C)
//MaterialExpressionMeshSubUV[0x102F50C0]
class UMaterialExpressionMeshSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionMeshSubUV");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionMeshSubUV::pClassPointer = NULL;

//0x000000 (0x00007C - 0x00007C)
//MaterialExpressionParticleSubUV[0x102F4F90]
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionParticleSubUV::pClassPointer = NULL;

//0x000018 (0x000094 - 0x00007C)
//MaterialExpressionTextureSampleParameter[0x102F4E60]
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x00007C (0x0008)              
	struct FGuid                                       ExpressionGUID;                                   		// 0x000084 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTextureSampleParameter::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//MaterialExpressionGolemTextureSampleParameter2D[0x102F4D30]
class UMaterialExpressionGolemTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionGolemTextureSampleParameter2D");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionGolemTextureSampleParameter2D::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//MaterialExpressionTextureSampleParameter2D[0x102F4C00]
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTextureSampleParameter2D::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//MaterialExpressionTextureSampleParameterSubUV[0x102F4AD0]
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTextureSampleParameterSubUV::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//MaterialExpressionTextureSampleParameter3D[0x102F49A0]
class UMaterialExpressionTextureSampleParameter3D : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter3D");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTextureSampleParameter3D::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//MaterialExpressionTextureSampleParameterCube[0x102F4870]
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTextureSampleParameterCube::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//MaterialExpressionTextureSampleParameterMovie[0x102F4740]
class UMaterialExpressionTextureSampleParameterMovie : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMovie");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTextureSampleParameterMovie::pClassPointer = NULL;

//0x000004 (0x000060 - 0x00005C)
//MaterialExpressionTime[0x102F4610]
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned long                                      bIgnorePause : 1;                                 		// 0x00005C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTime");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTime::pClassPointer = NULL;

//0x00001D (0x000079 - 0x00005C)
//MaterialExpressionTransform[0x102F44E0]
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              
	unsigned char                                      TransformType;                                    		// 0x000078 (0x0001)              PROPERTY: EMaterialVectorCoordTransform

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTransform");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTransform::pClassPointer = NULL;

//0x00001D (0x000079 - 0x00005C)
//MaterialExpressionTransformPosition[0x102F43B0]
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00005C (0x001C)              
	unsigned char                                      TransformType;                                    		// 0x000078 (0x0001)              PROPERTY: EMaterialPositionTransform

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionTransformPosition::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionVertexColor[0x102F4280]
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionVertexColor::pClassPointer = NULL;

//0x000000 (0x00005C - 0x00005C)
//MaterialExpressionWorldPosition[0x102F4150]
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		return pClassPointer;
	};
};
UClass* UMaterialExpressionWorldPosition::pClassPointer = NULL;

//0x000030 (0x000084 - 0x000054)
//MaterialInstance[0x102F4020]
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x000054 (0x0004)              
	class UMaterialInterface*                          Parent;                                           		// 0x000058 (0x0004)              
	unsigned long                                      bHasStaticPermutationResource : 1;                		// 0x00005C (0x0004) [0x00000001] 
	unsigned long                                      bStaticPermutationDirty : 1;                      		// 0x00005C (0x0004) [0x00000002] 
	unsigned long                                      ReentrantFlag : 1;                                		// 0x00005C (0x0004) [0x00000004] 
	DWORD                                              StaticParameters[0x2];                            		// 0x000060 (0x0008)              
	DWORD                                              StaticPermutationResources[0x2];                  		// 0x000068 (0x0008)              
	DWORD                                              Resources[0x2];                                   		// 0x000070 (0x0008)              
	TArray<class UTexture*>                            ReferencedTextures;                               		// 0x000078 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialInstance");
		return pClassPointer;
	};

public:
	void SetScalarCurveParameterValue(struct FName ParameterName,struct FInterpCurveFloat Value);//Engine.MaterialInstance.SetScalarCurveParameterValue
	void SetScalarParameterValue(struct FName ParameterName,float Value);//Engine.MaterialInstance.SetScalarParameterValue
	void SetTextureParameterValue(struct FName ParameterName,class UTexture* Value);//Engine.MaterialInstance.SetTextureParameterValue
	void SetFontParameterValue(struct FName ParameterName,class UFont* FontValue,int FontPage);//Engine.MaterialInstance.SetFontParameterValue
	void SetParent(class UMaterialInterface* NewParent);//Engine.MaterialInstance.SetParent
	void SetVectorParameterValue(struct FName ParameterName,struct FLinearColor Value);//Engine.MaterialInstance.SetVectorParameterValue
	void ClearParameterValues();//Engine.MaterialInstance.ClearParameterValues
};
UClass* UMaterialInstance::pClassPointer = NULL;

//0x000030 (0x0000B4 - 0x000084)
//MaterialInstanceConstant[0x102F3EF0]
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	TArray<struct FFontParameterValue>                 FontParameterValues;                              		// 0x000084 (0x000C)              
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                            		// 0x000090 (0x000C)              
	TArray<struct FTextureParameterValue>              TextureParameterValues;                           		// 0x00009C (0x000C)              
	TArray<struct FVectorParameterValue>               VectorParameterValues;                            		// 0x0000A8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialInstanceConstant");
		return pClassPointer;
	};

public:
	void SetParent(class UMaterialInterface* NewParent);//Engine.MaterialInstanceConstant.SetParent
	void SetFontParameterValue(struct FName ParameterName,class UFont* FontValue,int FontPage);//Engine.MaterialInstanceConstant.SetFontParameterValue
	void SetScalarParameterValue(struct FName ParameterName,float Value);//Engine.MaterialInstanceConstant.SetScalarParameterValue
	void SetTextureParameterValue(struct FName ParameterName,class UTexture* Value);//Engine.MaterialInstanceConstant.SetTextureParameterValue
	void ClearParameterValues();//Engine.MaterialInstanceConstant.ClearParameterValues
	void SetVectorParameterValue(struct FName ParameterName,struct FLinearColor Value);//Engine.MaterialInstanceConstant.SetVectorParameterValue
};
UClass* UMaterialInstanceConstant::pClassPointer = NULL;

//0x000038 (0x0000BC - 0x000084)
//MaterialInstanceTimeVarying[0x102F3DC0]
class UMaterialInstanceTimeVarying : public UMaterialInstance
{
public:
	unsigned long                                      bAutoActivateAll : 1;                             		// 0x000084 (0x0004) [0x00000001] 
	float                                              Duration;                                         		// 0x000088 (0x0004)              
	TArray<struct FFontParameterValueOverTime>         FontParameterValues;                              		// 0x00008C (0x000C)              
	TArray<struct FScalarParameterValueOverTime>       ScalarParameterValues;                            		// 0x000098 (0x000C)              
	TArray<struct FTextureParameterValueOverTime>      TextureParameterValues;                           		// 0x0000A4 (0x000C)              
	TArray<struct FVectorParameterValueOverTime>       VectorParameterValues;                            		// 0x0000B0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MaterialInstanceTimeVarying");
		return pClassPointer;
	};

public:
	void SetVectorCurveParameterValue(struct FName ParameterName,struct FInterpCurveVector Value);//Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue
	void SetVectorStartTime(struct FName ParameterName,float Value);//Engine.MaterialInstanceTimeVarying.SetVectorStartTime
	void SetScalarCurveParameterValue(struct FName ParameterName,struct FInterpCurveFloat Value);//Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue
	void SetFontParameterValue(struct FName ParameterName,class UFont* FontValue,int FontPage);//Engine.MaterialInstanceTimeVarying.SetFontParameterValue
	void SetScalarParameterValue(struct FName ParameterName,float Value);//Engine.MaterialInstanceTimeVarying.SetScalarParameterValue
	void SetParent(class UMaterialInterface* NewParent);//Engine.MaterialInstanceTimeVarying.SetParent
	void ClearParameterValues();//Engine.MaterialInstanceTimeVarying.ClearParameterValues
	void SetTextureParameterValue(struct FName ParameterName,class UTexture* Value);//Engine.MaterialInstanceTimeVarying.SetTextureParameterValue
	void SetVectorParameterValue(struct FName ParameterName,struct FLinearColor Value);//Engine.MaterialInstanceTimeVarying.SetVectorParameterValue
	void SetDuration(float Value);//Engine.MaterialInstanceTimeVarying.SetDuration
	void SetScalarStartTime(struct FName ParameterName,float Value);//Engine.MaterialInstanceTimeVarying.SetScalarStartTime
};
UClass* UMaterialInstanceTimeVarying::pClassPointer = NULL;

//0x000018 (0x000278 - 0x000260)
//Emitter[0x102F3C90]
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                          		// 0x000260 (0x0004)              
	unsigned long                                      bDestroyOnSystemFinish : 1;                       		// 0x000264 (0x0004) [0x00000001] 
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x000264 (0x0004) [0x00000002] 
	TArray<int>                                        ParentIndices;                                    		// 0x000268 (0x000C)              
	float                                              m_fAccumulatedDeltaSeconds;                       		// 0x000274 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Emitter");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//Engine.Emitter.ReplicatedEvent
	void SetExtColorParameter(struct FName ParameterName,unsigned char Red,unsigned char Green,unsigned char Blue,unsigned char Alpha);//Engine.Emitter.SetExtColorParameter
	void SetTemplate(class UParticleSystem* NewTemplate,bool bDestroyOnFinish);//Engine.Emitter.SetTemplate
	void SetFloatParameter(struct FName ParameterName,float Param);//Engine.Emitter.SetFloatParameter
	void SetVectorParameter(struct FName ParameterName,FVector3 Param);//Engine.Emitter.SetVectorParameter
	void OnSetParticleSysParam(class USeqAct_SetParticleSysParam* Action);//Engine.Emitter.OnSetParticleSysParam
	void SetColorParameter(struct FName ParameterName,DWORD Param);//Engine.Emitter.SetColorParameter
	void OnToggle(class USeqAct_Toggle* Action);//Engine.Emitter.OnToggle
	void PostBeginPlay();//Engine.Emitter.PostBeginPlay
	void PostFactorySpawn(class USequence* ParentSequence);//Engine.Emitter.PostFactorySpawn
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);//Engine.Emitter.OnParticleSystemFinished
	void SetActorParameter(struct FName ParameterName,class AActor* Param);//Engine.Emitter.SetActorParameter
	bool OnSequenceAction(class USequenceAction* Action);//Engine.Emitter.OnSequenceAction
};
UClass* AEmitter::pClassPointer = NULL;

//0x000008 (0x000280 - 0x000278)
//PhysXEmitterSpawnable[0x102F3B60]
class APhysXEmitterSpawnable : public AEmitter
{
public:
	DWORD                                              VolumeFill;                                       		// 0x000278 (0x0004)              
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x00027C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PhysXEmitterSpawnable");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//Engine.PhysXEmitterSpawnable.ReplicatedEvent
	void Term();//Engine.PhysXEmitterSpawnable.Term
	void SetTemplate(class UParticleSystem* NewTemplate,bool bDestroyOnFinish);//Engine.PhysXEmitterSpawnable.SetTemplate
	void Destroyed();//Engine.PhysXEmitterSpawnable.Destroyed
};
UClass* APhysXEmitterSpawnable::pClassPointer = NULL;

//0x0000B4 (0x000294 - 0x0001E0)
//ParticleSystemComponent[0x102F3A30]
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                         		// 0x0001E0 (0x0004)              
	TArray<DWORD>                                      EmitterInstances;                                 		// 0x0001E4 (0x000C)              
	TArray<class UStaticMeshComponent*>                SMComponents;                                     		// 0x0001F0 (0x000C)              
	TArray<class UMaterialInterface*>                  SMMaterialInterfaces;                             		// 0x0001FC (0x000C)              
	unsigned long                                      bAutoActivate : 1;                                		// 0x000208 (0x0004) [0x00000001] 
	unsigned long                                      bWasCompleted : 1;                                		// 0x000208 (0x0004) [0x00000002] 
	unsigned long                                      bSuppressSpawning : 1;                            		// 0x000208 (0x0004) [0x00000004] 
	unsigned long                                      bWasDeactivated : 1;                              		// 0x000208 (0x0004) [0x00000008] 
	unsigned long                                      bResetOnDetach : 1;                               		// 0x000208 (0x0004) [0x00000010] 
	unsigned long                                      bUpdateOnDedicatedServer : 1;                     		// 0x000208 (0x0004) [0x00000020] 
	unsigned long                                      bJustAttached : 1;                                		// 0x000208 (0x0004) [0x00000040] 
	unsigned long                                      notCurrentlyRelevant : 1;                         		// 0x000208 (0x0004) [0x00000080] 
	unsigned long                                      bIsActive : 1;                                    		// 0x000208 (0x0004) [0x00000100] 
	unsigned long                                      bWarmingUp : 1;                                   		// 0x000208 (0x0004) [0x00000200] 
	unsigned long                                      bIsCachedInPool : 1;                              		// 0x000208 (0x0004) [0x00000400] 
	unsigned long                                      bOverrideLODMethod : 1;                           		// 0x000208 (0x0004) [0x00000800] 
	unsigned long                                      bSkipUpdateDynamicDataDuringTick : 1;             		// 0x000208 (0x0004) [0x00001000] 
	unsigned long                                      bUpdateComponentInTick : 1;                       		// 0x000208 (0x0004) [0x00002000] 
	unsigned long                                      bDeferredBeamUpdate : 1;                          		// 0x000208 (0x0004) [0x00004000] 
	unsigned long                                      bForcedInActive : 1;                              		// 0x000208 (0x0004) [0x00008000] 
	unsigned long                                      bIsWarmingUp : 1;                                 		// 0x000208 (0x0004) [0x00010000] 
	unsigned long                                      bIsViewRelevanceDirty : 1;                        		// 0x000208 (0x0004) [0x00020000] 
	unsigned long                                      bRecacheViewRelevance : 1;                        		// 0x000208 (0x0004) [0x00040000] 
	TArray<struct FParticleSysParam>                   InstanceParameters;                               		// 0x00020C (0x000C)              
	FVector3                                           OldPosition;                                      		// 0x000218 (0x000C)              
	FVector3                                           PartSysVelocity;                                  		// 0x000224 (0x000C)              
	float                                              WarmupTime;                                       		// 0x000230 (0x0004)              
	int                                                LODLevel;                                         		// 0x000234 (0x0004)              
	float                                              SecondsBeforeInactive;                            		// 0x000238 (0x0004)              
	int                                                EditorLODLevel;                                   		// 0x00023C (0x0004)              
	float                                              AccumTickTime;                                    		// 0x000240 (0x0004)              
	unsigned char                                      LODMethod;                                        		// 0x000244 (0x0001)              PROPERTY: ParticleSystemLODMethod
	unsigned char                                      _0x000245[0x3];                                   		// 0x000245 (0x0003) MISSED OFFSET
	TArray<struct FMaterialViewRelevance>              CachedViewRelevanceFlags;                         		// 0x000248 (0x000C)              
	TArray<struct FParticleEventSpawnData>             SpawnEvents;                                      		// 0x000254 (0x000C)              
	TArray<struct FParticleEventDeathData>             DeathEvents;                                      		// 0x000260 (0x000C)              
	TArray<struct FParticleEventCollideData>           CollisionEvents;                                  		// 0x00026C (0x000C)              
	TArray<struct FParticleEventKismetData>            KismetEvents;                                     		// 0x000278 (0x000C)              
	float                                              AccumulatedTick;                                  		// 0x000284 (0x0004)              
	struct FScriptDelegate                             __OnSystemFinished__Delegate;                     		// 0x000288 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleSystemComponent");
		return pClassPointer;
	};

public:
	void SetActive(bool bNowActive);//Engine.ParticleSystemComponent.SetActive
	void SetBeamTargetTangent(int EmitterIndex,FVector3 NewTangentPoint,int TargetIndex);//Engine.ParticleSystemComponent.SetBeamTargetTangent
	void SetBeamTargetPoint(int EmitterIndex,FVector3 NewTargetPoint,int TargetIndex);//Engine.ParticleSystemComponent.SetBeamTargetPoint
	void ResetToDefaults();//Engine.ParticleSystemComponent.ResetToDefaults
	bool GetVectorParameter(struct FName InName,FVector3* OutVector);//Engine.ParticleSystemComponent.GetVectorParameter
	void SetVectorParameter(struct FName ParameterName,FVector3 Param);//Engine.ParticleSystemComponent.SetVectorParameter
	int GetEditorLODLevel();//Engine.ParticleSystemComponent.GetEditorLODLevel
	void SetBeamSourceTangent(int EmitterIndex,FVector3 NewTangentPoint,int SourceIndex);//Engine.ParticleSystemComponent.SetBeamSourceTangent
	void ActivateSystem(bool bFlagAsJustAttached);//Engine.ParticleSystemComponent.ActivateSystem
	void SetEditorLODLevel(int InLODLevel);//Engine.ParticleSystemComponent.SetEditorLODLevel
	void SetBeamTargetStrength(int EmitterIndex,float NewTargetStrength,int TargetIndex);//Engine.ParticleSystemComponent.SetBeamTargetStrength
	void SetActorParameter(struct FName ParameterName,class AActor* Param);//Engine.ParticleSystemComponent.SetActorParameter
	bool GetActorParameter(struct FName InName,class AActor** OutActor);//Engine.ParticleSystemComponent.GetActorParameter
	void SetBeamDistance(int EmitterIndex,float Distance);//Engine.ParticleSystemComponent.SetBeamDistance
	void SetLODLevel(int InLODLevel);//Engine.ParticleSystemComponent.SetLODLevel
	void SetBeamSourcePoint(int EmitterIndex,FVector3 NewSourcePoint,int SourceIndex);//Engine.ParticleSystemComponent.SetBeamSourcePoint
	void DeactivateSystem();//Engine.ParticleSystemComponent.DeactivateSystem
	void SetMaterialParameter(struct FName ParameterName,class UMaterialInterface* Param);//Engine.ParticleSystemComponent.SetMaterialParameter
	void SetFloatParameter(struct FName ParameterName,float Param);//Engine.ParticleSystemComponent.SetFloatParameter
	void SetBeamEndPoint(int EmitterIndex,FVector3 NewEndPoint);//Engine.ParticleSystemComponent.SetBeamEndPoint
	void ClearParameter(struct FName ParameterName,unsigned char ParameterType);//Engine.ParticleSystemComponent.ClearParameter
	bool GetColorParameter(struct FName InName,DWORD* OutColor);//Engine.ParticleSystemComponent.GetColorParameter
	void SetKillOnCompleted(int EmitterIndex,bool bKill);//Engine.ParticleSystemComponent.SetKillOnCompleted
	void RewindEmitterInstances();//Engine.ParticleSystemComponent.RewindEmitterInstances
	bool GetFloatParameter(struct FName InName,float* OutFloat);//Engine.ParticleSystemComponent.GetFloatParameter
	void SetTemplate(class UParticleSystem* NewTemplate);//Engine.ParticleSystemComponent.SetTemplate
	void OnSystemFinished(class UParticleSystemComponent* PSystem);//Engine.ParticleSystemComponent.OnSystemFinished
	void SetKillOnDeactivate(int EmitterIndex,bool bKill);//Engine.ParticleSystemComponent.SetKillOnDeactivate
	void SetBeamType(int EmitterIndex,int NewMethod);//Engine.ParticleSystemComponent.SetBeamType
	void SetBeamTessellationFactor(int EmitterIndex,float NewFactor);//Engine.ParticleSystemComponent.SetBeamTessellationFactor
	void SetBeamSourceStrength(int EmitterIndex,float NewSourceStrength,int SourceIndex);//Engine.ParticleSystemComponent.SetBeamSourceStrength
	void SetSkipUpdateDynamicDataDuringTick(bool bInSkipUpdateDynamicDataDuringTick);//Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick
	void SetColorParameter(struct FName ParameterName,DWORD Param);//Engine.ParticleSystemComponent.SetColorParameter
	bool GetMaterialParameter(struct FName InName,class UMaterialInterface** OutMaterial);//Engine.ParticleSystemComponent.GetMaterialParameter
	bool GetSkipUpdateDynamicDataDuringTick();//Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick
	int GetLODLevel();//Engine.ParticleSystemComponent.GetLODLevel
	void KillParticlesForced();//Engine.ParticleSystemComponent.KillParticlesForced
	void RewindEmitterInstance(int EmitterIndex);//Engine.ParticleSystemComponent.RewindEmitterInstance
};
UClass* UParticleSystemComponent::pClassPointer = NULL;

//0x000003 (0x000074 - 0x000071)
//DistributionFloatParticleParameter[0x102F3900]
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:
	unsigned char                                      _0x000071[0x3];                                   		// 0x000071 (0x0003) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		return pClassPointer;
	};
};
UClass* UDistributionFloatParticleParameter::pClassPointer = NULL;

//0x000001 (0x0000A4 - 0x0000A3)
//DistributionVectorParticleParameter[0x102F37D0]
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:
	unsigned char                                      _0x0000A3[0x1];                                   		// 0x0000A3 (0x0001) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		return pClassPointer;
	};
};
UClass* UDistributionVectorParticleParameter::pClassPointer = NULL;

//0x000094 (0x0000D4 - 0x000040)
//ParticleEmitter[0x102F36A0]
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                      		// 0x000040 (0x0008)              
	unsigned long                                      UseLocalSpace : 1;                                		// 0x000048 (0x0004) [0x00000001] 
	unsigned long                                      KillOnDeactivate : 1;                             		// 0x000048 (0x0004) [0x00000002] 
	unsigned long                                      bKillOnCompleted : 1;                             		// 0x000048 (0x0004) [0x00000004] 
	unsigned long                                      ScaleUV : 1;                                      		// 0x000048 (0x0004) [0x00000008] 
	unsigned long                                      DirectUV : 1;                                     		// 0x000048 (0x0004) [0x00000010] 
	unsigned long                                      bEnabled : 1;                                     		// 0x000048 (0x0004) [0x00000020] 
	unsigned long                                      ConvertedModules : 1;                             		// 0x000048 (0x0004) [0x00000040] 
	struct FRawDistributionFloat                       SpawnRate;                                        		// 0x00004C (0x001C)              
	float                                              EmitterDuration;                                  		// 0x000068 (0x0004)              
	int                                                EmitterLoops;                                     		// 0x00006C (0x0004)              
	unsigned char                                      ParticleBurstMethod;                              		// 0x000070 (0x0001)              PROPERTY: EParticleBurstMethod
	unsigned char                                      InterpolationMethod;                              		// 0x000071 (0x0001)              PROPERTY: EParticleSubUVInterpMethod
	unsigned char                                      EmitterRenderMode;                                		// 0x000072 (0x0001)              PROPERTY: EEmitterRenderMode
	unsigned char                                      _0x000073[0x1];                                   		// 0x000073 (0x0001) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                        		// 0x000074 (0x000C)              
	int                                                SubImages_Horizontal;                             		// 0x000080 (0x0004)              
	int                                                SubImages_Vertical;                               		// 0x000084 (0x0004)              
	float                                              RandomImageTime;                                  		// 0x000088 (0x0004)              
	int                                                RandomImageChanges;                               		// 0x00008C (0x0004)              
	int                                                SubUVDataOffset;                                  		// 0x000090 (0x0004)              
	DWORD                                              EmitterEditorColor;                               		// 0x000094 (0x0004)              
	TArray<class UParticleLODLevel*>                   LODLevels;                                        		// 0x000098 (0x000C)              
	TArray<class UParticleModule*>                     Modules;                                          		// 0x0000A4 (0x000C)              
	class UParticleModule*                             TypeDataModule;                                   		// 0x0000B0 (0x0004)              
	TArray<class UParticleModule*>                     SpawnModules;                                     		// 0x0000B4 (0x000C)              
	TArray<class UParticleModule*>                     UpdateModules;                                    		// 0x0000C0 (0x000C)              
	int                                                PeakActiveParticles;                              		// 0x0000CC (0x0004)              
	int                                                InitialAllocationCount;                           		// 0x0000D0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleEmitter");
		return pClassPointer;
	};
};
UClass* UParticleEmitter::pClassPointer = NULL;

//0x000000 (0x0000D4 - 0x0000D4)
//ParticleSpriteEmitter[0x102F3570]
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		return pClassPointer;
	};
};
UClass* UParticleSpriteEmitter::pClassPointer = NULL;

//0x000068 (0x0000A8 - 0x000040)
//ParticleLODLevel[0x102F3440]
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                            		// 0x000040 (0x0004)              
	int                                                LevelSetting;                                     		// 0x000044 (0x0004)              
	unsigned long                                      bEnabled : 1;                                     		// 0x000048 (0x0004) [0x00000001] 
	unsigned long                                      ConvertedModules : 1;                             		// 0x000048 (0x0004) [0x00000002] 
	class UParticleModuleRequired*                     RequiredModule;                                   		// 0x00004C (0x0004)              
	TArray<class UParticleModule*>                     Modules;                                          		// 0x000050 (0x000C)              
	class UParticleModule*                             TypeDataModule;                                   		// 0x00005C (0x0004)              
	class UParticleModuleSpawn*                        SpawnModule;                                      		// 0x000060 (0x0004)              
	class UParticleModuleEventGenerator*               EventGenerator;                                   		// 0x000064 (0x0004)              
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                  		// 0x000068 (0x000C)              
	TArray<class UParticleModule*>                     SpawnModules;                                     		// 0x000074 (0x000C)              
	TArray<class UParticleModule*>                     UpdateModules;                                    		// 0x000080 (0x000C)              
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                     		// 0x00008C (0x000C)              
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                             		// 0x000098 (0x000C)              
	int                                                PeakActiveParticles;                              		// 0x0000A4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleLODLevel");
		return pClassPointer;
	};
};
UClass* UParticleLODLevel::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//ParticleModule[0x102F3310]
class UParticleModule : public UObject
{
public:
	unsigned long                                      bSpawnModule : 1;                                 		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      bUpdateModule : 1;                                		// 0x000040 (0x0004) [0x00000002] 
	unsigned long                                      bCurvesAsColor : 1;                               		// 0x000040 (0x0004) [0x00000004] 
	unsigned long                                      b3DDrawMode : 1;                                  		// 0x000040 (0x0004) [0x00000008] 
	unsigned long                                      bSupported3DDrawMode : 1;                         		// 0x000040 (0x0004) [0x00000010] 
	unsigned long                                      bEnabled : 1;                                     		// 0x000040 (0x0004) [0x00000020] 
	unsigned long                                      bEditable : 1;                                    		// 0x000040 (0x0004) [0x00000040] 
	unsigned long                                      LODDuplicate : 1;                                 		// 0x000040 (0x0004) [0x00000080] 
	DWORD                                              ModuleEditorColor;                                		// 0x000044 (0x0004)              
	unsigned char                                      LODValidity;                                      		// 0x000048 (0x0001)              PROPERTY: 
	unsigned char                                      _0x000049[0x3];                                   		// 0x000049 (0x0003) MISSED OFFSET
	TArray<struct FName>                               IdenticalIgnoreProperties;                        		// 0x00004C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModule");
		return pClassPointer;
	};
};
UClass* UParticleModule::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleAccelerationBase[0x102F31E0]
class UParticleModuleAccelerationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleAccelerationBase::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleAcceleration[0x102F30B0]
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                     		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		return pClassPointer;
	};
};
UClass* UParticleModuleAcceleration::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleAccelerationOverLifetime[0x102F2F80]
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                    		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		return pClassPointer;
	};
};
UClass* UParticleModuleAccelerationOverLifetime::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleAttractorBase[0x102F2E50]
class UParticleModuleAttractorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleAttractorBase::pClassPointer = NULL;

//0x000050 (0x0000A8 - 0x000058)
//ParticleModuleAttractorLine[0x102F2D20]
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	FVector3                                           EndPoint0;                                        		// 0x000058 (0x000C)              
	FVector3                                           EndPoint1;                                        		// 0x000064 (0x000C)              
	struct FRawDistributionFloat                       Range;                                            		// 0x000070 (0x001C)              
	struct FRawDistributionFloat                       Strength;                                         		// 0x00008C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		return pClassPointer;
	};
};
UClass* UParticleModuleAttractorLine::pClassPointer = NULL;

//0x00004C (0x0000A4 - 0x000058)
//ParticleModuleAttractorParticle[0x102F2BF0]
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x000058 (0x0008)              
	struct FRawDistributionFloat                       Range;                                            		// 0x000060 (0x001C)              
	unsigned long                                      bStrengthByDistance : 1;                          		// 0x00007C (0x0004) [0x00000001] 
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x00007C (0x0004) [0x00000002] 
	unsigned long                                      bRenewSource : 1;                                 		// 0x00007C (0x0004) [0x00000004] 
	unsigned long                                      bInheritSourceVel : 1;                            		// 0x00007C (0x0004) [0x00000008] 
	struct FRawDistributionFloat                       Strength;                                         		// 0x000080 (0x001C)              
	unsigned char                                      SelectionMethod;                                  		// 0x00009C (0x0001)              PROPERTY: EAttractorParticleSelectionMethod
	unsigned char                                      _0x00009D[0x3];                                   		// 0x00009D (0x0003) MISSED OFFSET
	int                                                LastSelIndex;                                     		// 0x0000A0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		return pClassPointer;
	};
};
UClass* UParticleModuleAttractorParticle::pClassPointer = NULL;

//0x000058 (0x0000B0 - 0x000058)
//ParticleModuleAttractorPoint[0x102F2AC0]
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                         		// 0x000058 (0x001C)              
	struct FRawDistributionFloat                       Range;                                            		// 0x000074 (0x001C)              
	struct FRawDistributionFloat                       Strength;                                         		// 0x000090 (0x001C)              
	unsigned long                                      StrengthByDistance : 1;                           		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x0000AC (0x0004) [0x00000002] 
	unsigned long                                      bOverrideVelocity : 1;                            		// 0x0000AC (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		return pClassPointer;
	};
};
UClass* UParticleModuleAttractorPoint::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleBeamBase[0x102F2990]
class UParticleModuleBeamBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleBeamBase::pClassPointer = NULL;

//0x000068 (0x0000C0 - 0x000058)
//ParticleModuleBeamModifier[0x102F2860]
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	unsigned char                                      ModifierType;                                     		// 0x000058 (0x0001)              PROPERTY: BeamModifierType
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        PositionOptions;                                  		// 0x00005C (0x0004)              
	struct FRawDistributionVector                      Position;                                         		// 0x000060 (0x001C)              
	struct FBeamModifierOptions                        TangentOptions;                                   		// 0x00007C (0x0004)              
	struct FRawDistributionVector                      Tangent;                                          		// 0x000080 (0x001C)              
	unsigned long                                      bAbsoluteTangent : 1;                             		// 0x00009C (0x0004) [0x00000001] 
	struct FBeamModifierOptions                        StrengthOptions;                                  		// 0x0000A0 (0x0004)              
	struct FRawDistributionFloat                       Strength;                                         		// 0x0000A4 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		return pClassPointer;
	};
};
UClass* UParticleModuleBeamModifier::pClassPointer = NULL;

//0x0000AC (0x000104 - 0x000058)
//ParticleModuleBeamNoise[0x102F2730]
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned long                                      bLowFreq_Enabled : 1;                             		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      bNRScaleEmitterTime : 1;                          		// 0x000058 (0x0004) [0x00000002] 
	unsigned long                                      bSmooth : 1;                                      		// 0x000058 (0x0004) [0x00000004] 
	unsigned long                                      bNoiseLock : 1;                                   		// 0x000058 (0x0004) [0x00000008] 
	unsigned long                                      bOscillate : 1;                                   		// 0x000058 (0x0004) [0x00000010] 
	unsigned long                                      bUseNoiseTangents : 1;                            		// 0x000058 (0x0004) [0x00000020] 
	unsigned long                                      bTargetNoise : 1;                                 		// 0x000058 (0x0004) [0x00000040] 
	unsigned long                                      bApplyNoiseScale : 1;                             		// 0x000058 (0x0004) [0x00000080] 
	int                                                Frequency;                                        		// 0x00005C (0x0004)              
	int                                                Frequency_LowRange;                               		// 0x000060 (0x0004)              
	struct FRawDistributionVector                      NoiseRange;                                       		// 0x000064 (0x001C)              
	struct FRawDistributionFloat                       NoiseRangeScale;                                  		// 0x000080 (0x001C)              
	struct FRawDistributionVector                      NoiseSpeed;                                       		// 0x00009C (0x001C)              
	float                                              NoiseLockRadius;                                  		// 0x0000B8 (0x0004)              
	float                                              NoiseLockTime;                                    		// 0x0000BC (0x0004)              
	float                                              NoiseTension;                                     		// 0x0000C0 (0x0004)              
	struct FRawDistributionFloat                       NoiseTangentStrength;                             		// 0x0000C4 (0x001C)              
	int                                                NoiseTessellation;                                		// 0x0000E0 (0x0004)              
	float                                              FrequencyDistance;                                		// 0x0000E4 (0x0004)              
	struct FRawDistributionFloat                       NoiseScale;                                       		// 0x0000E8 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		return pClassPointer;
	};
};
UClass* UParticleModuleBeamNoise::pClassPointer = NULL;

//0x000064 (0x0000BC - 0x000058)
//ParticleModuleBeamSource[0x102F2600]
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	unsigned char                                      SourceMethod;                                     		// 0x000058 (0x0001)              PROPERTY: Beam2SourceTargetMethod
	unsigned char                                      SourceTangentMethod;                              		// 0x000059 (0x0001)              PROPERTY: Beam2SourceTargetTangentMethod
	unsigned char                                      _0x00005A[0x2];                                   		// 0x00005A (0x0002) MISSED OFFSET
	struct FName                                       SourceName;                                       		// 0x00005C (0x0008)              
	unsigned long                                      bSourceAbsolute : 1;                              		// 0x000064 (0x0004) [0x00000001] 
	unsigned long                                      bLockSource : 1;                                  		// 0x000064 (0x0004) [0x00000002] 
	unsigned long                                      bLockSourceTangent : 1;                           		// 0x000064 (0x0004) [0x00000004] 
	unsigned long                                      bLockSourceStength : 1;                           		// 0x000064 (0x0004) [0x00000008] 
	struct FRawDistributionVector                      Source;                                           		// 0x000068 (0x001C)              
	struct FRawDistributionVector                      SourceTangent;                                    		// 0x000084 (0x001C)              
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x0000A0 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		return pClassPointer;
	};
};
UClass* UParticleModuleBeamSource::pClassPointer = NULL;

//0x000068 (0x0000C0 - 0x000058)
//ParticleModuleBeamTarget[0x102F24D0]
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	unsigned char                                      TargetMethod;                                     		// 0x000058 (0x0001)              PROPERTY: Beam2SourceTargetMethod
	unsigned char                                      TargetTangentMethod;                              		// 0x000059 (0x0001)              PROPERTY: Beam2SourceTargetTangentMethod
	unsigned char                                      _0x00005A[0x2];                                   		// 0x00005A (0x0002) MISSED OFFSET
	struct FName                                       TargetName;                                       		// 0x00005C (0x0008)              
	struct FRawDistributionVector                      Target;                                           		// 0x000064 (0x001C)              
	unsigned long                                      bTargetAbsolute : 1;                              		// 0x000080 (0x0004) [0x00000001] 
	unsigned long                                      bLockTarget : 1;                                  		// 0x000080 (0x0004) [0x00000002] 
	unsigned long                                      bLockTargetTangent : 1;                           		// 0x000080 (0x0004) [0x00000004] 
	unsigned long                                      bLockTargetStength : 1;                           		// 0x000080 (0x0004) [0x00000008] 
	struct FRawDistributionVector                      TargetTangent;                                    		// 0x000084 (0x001C)              
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x0000A0 (0x001C)              
	float                                              LockRadius;                                       		// 0x0000BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		return pClassPointer;
	};
};
UClass* UParticleModuleBeamTarget::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleCollisionBase[0x102F23A0]
class UParticleModuleCollisionBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleCollisionBase::pClassPointer = NULL;

//0x00009C (0x0000F4 - 0x000058)
//ParticleModuleCollision[0x102F2270]
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                    		// 0x000058 (0x001C)              
	struct FRawDistributionVector                      DampingFactorRotation;                            		// 0x000074 (0x001C)              
	struct FRawDistributionFloat                       MaxCollisions;                                    		// 0x000090 (0x001C)              
	unsigned char                                      CollisionCompletionOption;                        		// 0x0000AC (0x0001)              PROPERTY: EParticleCollisionComplete
	unsigned char                                      _0x0000AD[0x3];                                   		// 0x0000AD (0x0003) MISSED OFFSET
	unsigned long                                      bApplyPhysics : 1;                                		// 0x0000B0 (0x0004) [0x00000001] 
	unsigned long                                      bPawnsDoNotDecrementCount : 1;                    		// 0x0000B0 (0x0004) [0x00000002] 
	unsigned long                                      bOnlyVerticalNormalsDecrementCount : 1;           		// 0x0000B0 (0x0004) [0x00000004] 
	unsigned long                                      bDropDetail : 1;                                  		// 0x0000B0 (0x0004) [0x00000008] 
	struct FRawDistributionFloat                       ParticleMass;                                     		// 0x0000B4 (0x001C)              
	float                                              DirScalar;                                        		// 0x0000D0 (0x0004)              
	float                                              VerticalFudgeFactor;                              		// 0x0000D4 (0x0004)              
	struct FRawDistributionFloat                       DelayAmount;                                      		// 0x0000D8 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleCollision");
		return pClassPointer;
	};
};
UClass* UParticleModuleCollision::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleColorBase[0x102F2140]
class UParticleModuleColorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleColorBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleColorBase::pClassPointer = NULL;

//0x00003C (0x000094 - 0x000058)
//ParticleModuleColor[0x102F2010]
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                       		// 0x000058 (0x001C)              
	struct FRawDistributionFloat                       StartAlpha;                                       		// 0x000074 (0x001C)              
	unsigned long                                      bClampAlpha : 1;                                  		// 0x000090 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleColor");
		return pClassPointer;
	};
};
UClass* UParticleModuleColor::pClassPointer = NULL;

//0x00000C (0x000064 - 0x000058)
//ParticleModuleColorByParameter[0x102F1EE0]
class UParticleModuleColorByParameter : public UParticleModuleColorBase
{
public:
	struct FName                                       ColorParam;                                       		// 0x000058 (0x0008)              
	DWORD                                              DefaultColor;                                     		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleColorByParameter");
		return pClassPointer;
	};
};
UClass* UParticleModuleColorByParameter::pClassPointer = NULL;

//0x00003C (0x000094 - 0x000058)
//ParticleModuleColorOverLife[0x102F1DB0]
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x000058 (0x001C)              
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x000074 (0x001C)              
	unsigned long                                      bClampAlpha : 1;                                  		// 0x000090 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		return pClassPointer;
	};
};
UClass* UParticleModuleColorOverLife::pClassPointer = NULL;

//0x00003C (0x000094 - 0x000058)
//ParticleModuleColorScaleOverLife[0x102F1C80]
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                               		// 0x000058 (0x001C)              
	struct FRawDistributionFloat                       AlphaScaleOverLife;                               		// 0x000074 (0x001C)              
	unsigned long                                      bEmitterTime : 1;                                 		// 0x000090 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		return pClassPointer;
	};
};
UClass* UParticleModuleColorScaleOverLife::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleEventBase[0x102F1B50]
class UParticleModuleEventBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleEventBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleEventBase::pClassPointer = NULL;

//0x00000C (0x000064 - 0x000058)
//ParticleModuleEventGenerator[0x102F1A20]
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                           		// 0x000058 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleEventGenerator");
		return pClassPointer;
	};
};
UClass* UParticleModuleEventGenerator::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleEventReceiverBase[0x102F18F0]
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleEventReceiverBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleEventReceiverBase::pClassPointer = NULL;

//0x000048 (0x0000A0 - 0x000058)
//ParticleModuleEventReceiverSpawn[0x102F17C0]
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      EventGeneratorType;                               		// 0x000058 (0x0001)              PROPERTY: EParticleEventType
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	struct FName                                       EventName;                                        		// 0x00005C (0x0008)              
	struct FRawDistributionFloat                       SpawnCount;                                       		// 0x000064 (0x001C)              
	unsigned long                                      bUseParticleTime : 1;                             		// 0x000080 (0x0004) [0x00000001] 
	unsigned long                                      bUsePSysLocation : 1;                             		// 0x000080 (0x0004) [0x00000002] 
	unsigned long                                      bInheritVelocity : 1;                             		// 0x000080 (0x0004) [0x00000004] 
	struct FRawDistributionVector                      InheritVelocityScale;                             		// 0x000084 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleEventReceiverSpawn");
		return pClassPointer;
	};
};
UClass* UParticleModuleEventReceiverSpawn::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleKillBase[0x102F1690]
class UParticleModuleKillBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleKillBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleKillBase::pClassPointer = NULL;

//0x00003C (0x000094 - 0x000058)
//ParticleModuleKillBox[0x102F1560]
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                  		// 0x000058 (0x001C)              
	struct FRawDistributionVector                      UpperRightCorner;                                 		// 0x000074 (0x001C)              
	unsigned long                                      bAbsolute : 1;                                    		// 0x000090 (0x0004) [0x00000001] 
	unsigned long                                      bKillInside : 1;                                  		// 0x000090 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleKillBox");
		return pClassPointer;
	};
};
UClass* UParticleModuleKillBox::pClassPointer = NULL;

//0x000020 (0x000078 - 0x000058)
//ParticleModuleKillHeight[0x102F1430]
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                           		// 0x000058 (0x001C)              
	unsigned long                                      bAbsolute : 1;                                    		// 0x000074 (0x0004) [0x00000001] 
	unsigned long                                      bFloor : 1;                                       		// 0x000074 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		return pClassPointer;
	};
};
UClass* UParticleModuleKillHeight::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleLifetimeBase[0x102F1300]
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleLifetimeBase::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleLifetime[0x102F11D0]
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleLifetime");
		return pClassPointer;
	};
};
UClass* UParticleModuleLifetime::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleLocationBase[0x102F10A0]
class UParticleModuleLocationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleLocationBase::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleLocation[0x102F0F70]
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                    		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocation");
		return pClassPointer;
	};
};
UClass* UParticleModuleLocation::pClassPointer = NULL;

//0x000070 (0x0000C8 - 0x000058)
//ParticleModuleLocationDirect[0x102F0E40]
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                         		// 0x000058 (0x001C)              
	struct FRawDistributionVector                      LocationOffset;                                   		// 0x000074 (0x001C)              
	struct FRawDistributionVector                      ScaleFactor;                                      		// 0x000090 (0x001C)              
	struct FRawDistributionVector                      Direction;                                        		// 0x0000AC (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		return pClassPointer;
	};
};
UClass* UParticleModuleLocationDirect::pClassPointer = NULL;

//0x000018 (0x000070 - 0x000058)
//ParticleModuleLocationEmitter[0x102F0D10]
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x000058 (0x0008)              
	unsigned char                                      SelectionMethod;                                  		// 0x000060 (0x0001)              PROPERTY: ELocationEmitterSelectionMethod
	unsigned char                                      _0x000061[0x3];                                   		// 0x000061 (0x0003) MISSED OFFSET
	unsigned long                                      InheritSourceVelocity : 1;                        		// 0x000064 (0x0004) [0x00000001] 
	unsigned long                                      bInheritSourceRotation : 1;                       		// 0x000064 (0x0004) [0x00000002] 
	float                                              InheritSourceVelocityScale;                       		// 0x000068 (0x0004)              
	float                                              InheritSourceRotationScale;                       		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		return pClassPointer;
	};
};
UClass* UParticleModuleLocationEmitter::pClassPointer = NULL;

//0x000008 (0x000060 - 0x000058)
//ParticleModuleLocationEmitterDirect[0x102F0BE0]
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x000058 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		return pClassPointer;
	};
};
UClass* UParticleModuleLocationEmitterDirect::pClassPointer = NULL;

//0x00003C (0x000094 - 0x000058)
//ParticleModuleLocationPrimitiveBase[0x102F0AB0]
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned long                                      Positive_X : 1;                                   		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      Positive_Y : 1;                                   		// 0x000058 (0x0004) [0x00000002] 
	unsigned long                                      Positive_Z : 1;                                   		// 0x000058 (0x0004) [0x00000004] 
	unsigned long                                      Negative_X : 1;                                   		// 0x000058 (0x0004) [0x00000008] 
	unsigned long                                      Negative_Y : 1;                                   		// 0x000058 (0x0004) [0x00000010] 
	unsigned long                                      Negative_Z : 1;                                   		// 0x000058 (0x0004) [0x00000020] 
	unsigned long                                      SurfaceOnly : 1;                                  		// 0x000058 (0x0004) [0x00000040] 
	unsigned long                                      Velocity : 1;                                     		// 0x000058 (0x0004) [0x00000080] 
	struct FRawDistributionFloat                       VelocityScale;                                    		// 0x00005C (0x001C)              
	struct FRawDistributionVector                      StartLocation;                                    		// 0x000078 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleLocationPrimitiveBase::pClassPointer = NULL;

//0x00003D (0x0000D1 - 0x000094)
//ParticleModuleLocationPrimitiveCylinder[0x102F0980]
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned long                                      RadialVelocity : 1;                               		// 0x000094 (0x0004) [0x00000001] 
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x000098 (0x001C)              
	struct FRawDistributionFloat                       StartHeight;                                      		// 0x0000B4 (0x001C)              
	unsigned char                                      HeightAxis;                                       		// 0x0000D0 (0x0001)              PROPERTY: CylinderHeightAxis

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		return pClassPointer;
	};
};
UClass* UParticleModuleLocationPrimitiveCylinder::pClassPointer = NULL;

//0x00001C (0x0000B0 - 0x000094)
//ParticleModuleLocationPrimitiveSphere[0x102F0850]
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x000094 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		return pClassPointer;
	};
};
UClass* UParticleModuleLocationPrimitiveSphere::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleMaterialBase[0x102F0720]
class UParticleModuleMaterialBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleMaterialBase::pClassPointer = NULL;

//0x000018 (0x000070 - 0x000058)
//ParticleModuleMaterialByParameter[0x102F05F0]
class UParticleModuleMaterialByParameter : public UParticleModuleMaterialBase
{
public:
	TArray<struct FName>                               MaterialParameters;                               		// 0x000058 (0x000C)              
	TArray<class UMaterialInterface*>                  DefaultMaterials;                                 		// 0x000064 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleMaterialByParameter");
		return pClassPointer;
	};
};
UClass* UParticleModuleMaterialByParameter::pClassPointer = NULL;

//0x00000C (0x000064 - 0x000058)
//ParticleModuleMeshMaterial[0x102F04C0]
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                    		// 0x000058 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		return pClassPointer;
	};
};
UClass* UParticleModuleMeshMaterial::pClassPointer = NULL;

//0x000004 (0x00005C - 0x000058)
//ParticleModuleOrbitBase[0x102F0390]
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x000058 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleOrbitBase::pClassPointer = NULL;

//0x000064 (0x0000C0 - 0x00005C)
//ParticleModuleOrbit[0x102F0260]
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	unsigned char                                      ChainMode;                                        		// 0x00005C (0x0001)              PROPERTY: EOrbitChainMode
	unsigned char                                      _0x00005D[0x3];                                   		// 0x00005D (0x0003) MISSED OFFSET
	struct FRawDistributionVector                      OffsetAmount;                                     		// 0x000060 (0x001C)              
	struct FOrbitOptions                               OffsetOptions;                                    		// 0x00007C (0x0004)              
	struct FRawDistributionVector                      RotationAmount;                                   		// 0x000080 (0x001C)              
	struct FOrbitOptions                               RotationOptions;                                  		// 0x00009C (0x0004)              
	struct FRawDistributionVector                      RotationRateAmount;                               		// 0x0000A0 (0x001C)              
	struct FOrbitOptions                               RotationRateOptions;                              		// 0x0000BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleOrbit");
		return pClassPointer;
	};
};
UClass* UParticleModuleOrbit::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleOrientationBase[0x102F0130]
class UParticleModuleOrientationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleOrientationBase::pClassPointer = NULL;

//0x000008 (0x000060 - 0x000058)
//ParticleModuleOrientationAxisLock[0x102F0000]
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	unsigned char                                      LockAxisFlags;                                    		// 0x000058 (0x0001)              PROPERTY: EParticleAxisLock
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	unsigned long                                      bUseLocalSpaceAxes : 1;                           		// 0x00005C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		return pClassPointer;
	};
};
UClass* UParticleModuleOrientationAxisLock::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleParameterBase[0x1030FE20]
class UParticleModuleParameterBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleParameterBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleParameterBase::pClassPointer = NULL;

//0x00000C (0x000064 - 0x000058)
//ParticleModuleParameterDynamic[0x1030FCF0]
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                    		// 0x000058 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic");
		return pClassPointer;
	};
};
UClass* UParticleModuleParameterDynamic::pClassPointer = NULL;

//0x00005C (0x0000B4 - 0x000058)
//ParticleModuleRequired[0x1030FBC0]
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x000058 (0x0004)              
	unsigned char                                      ScreenAlignment;                                  		// 0x00005C (0x0001)              PROPERTY: EParticleScreenAlignment
	unsigned char                                      ParticleBurstMethod;                              		// 0x00005D (0x0001)              PROPERTY: EParticleBurstMethod
	unsigned char                                      InterpolationMethod;                              		// 0x00005E (0x0001)              PROPERTY: EParticleSubUVInterpMethod
	unsigned char                                      EmitterRenderMode;                                		// 0x00005F (0x0001)              PROPERTY: EEmitterRenderMode
	unsigned long                                      bUseLocalSpace : 1;                               		// 0x000060 (0x0004) [0x00000001] 
	unsigned long                                      bKillOnDeactivate : 1;                            		// 0x000060 (0x0004) [0x00000002] 
	unsigned long                                      bKillOnCompleted : 1;                             		// 0x000060 (0x0004) [0x00000004] 
	unsigned long                                      bRequiresSorting : 1;                             		// 0x000060 (0x0004) [0x00000008] 
	unsigned long                                      bEmitterDurationUseRange : 1;                     		// 0x000060 (0x0004) [0x00000010] 
	unsigned long                                      bDurationRecalcEachLoop : 1;                      		// 0x000060 (0x0004) [0x00000020] 
	unsigned long                                      bResetOnLoop : 1;                                 		// 0x000060 (0x0004) [0x00000040] 
	unsigned long                                      bDelayFirstLoopOnly : 1;                          		// 0x000060 (0x0004) [0x00000080] 
	unsigned long                                      bScaleUV : 1;                                     		// 0x000060 (0x0004) [0x00000100] 
	unsigned long                                      bDirectUV : 1;                                    		// 0x000060 (0x0004) [0x00000200] 
	unsigned long                                      bUseMaxDrawCount : 1;                             		// 0x000060 (0x0004) [0x00000400] 
	float                                              EmitterDuration;                                  		// 0x000064 (0x0004)              
	float                                              EmitterDurationLow;                               		// 0x000068 (0x0004)              
	int                                                EmitterLoops;                                     		// 0x00006C (0x0004)              
	struct FRawDistributionFloat                       SpawnRate;                                        		// 0x000070 (0x001C)              
	TArray<struct FParticleBurst>                      BurstList;                                        		// 0x00008C (0x000C)              
	float                                              EmitterDelay;                                     		// 0x000098 (0x0004)              
	int                                                SubImages_Horizontal;                             		// 0x00009C (0x0004)              
	int                                                SubImages_Vertical;                               		// 0x0000A0 (0x0004)              
	float                                              RandomImageTime;                                  		// 0x0000A4 (0x0004)              
	int                                                RandomImageChanges;                               		// 0x0000A8 (0x0004)              
	int                                                MaxDrawCount;                                     		// 0x0000AC (0x0004)              
	DWORD                                              EmitterEditorColor;                               		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleRequired");
		return pClassPointer;
	};
};
UClass* UParticleModuleRequired::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleRotationBase[0x1030FA90]
class UParticleModuleRotationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleRotationBase::pClassPointer = NULL;

//0x000020 (0x000078 - 0x000058)
//ParticleModuleMeshRotation[0x1030F960]
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                    		// 0x000058 (0x001C)              
	unsigned long                                      bInheritParent : 1;                               		// 0x000074 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		return pClassPointer;
	};
};
UClass* UParticleModuleMeshRotation::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleRotation[0x1030F830]
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotation");
		return pClassPointer;
	};
};
UClass* UParticleModuleRotation::pClassPointer = NULL;

//0x000020 (0x000078 - 0x000058)
//ParticleModuleRotationOverLifetime[0x1030F700]
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                 		// 0x000058 (0x001C)              
	unsigned long                                      Scale : 1;                                        		// 0x000074 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		return pClassPointer;
	};
};
UClass* UParticleModuleRotationOverLifetime::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleRotationRateBase[0x1030F5D0]
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleRotationRateBase::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleMeshRotationRate[0x1030F4A0]
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		return pClassPointer;
	};
};
UClass* UParticleModuleMeshRotationRate::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleMeshRotationRateMultiplyLife[0x1030F370]
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		return pClassPointer;
	};
};
UClass* UParticleModuleMeshRotationRateMultiplyLife::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleRotationRate[0x1030F240]
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		return pClassPointer;
	};
};
UClass* UParticleModuleRotationRate::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleRotationRateMultiplyLife[0x1030F110]
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                   		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		return pClassPointer;
	};
};
UClass* UParticleModuleRotationRateMultiplyLife::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleSizeBase[0x1030EFE0]
class UParticleModuleSizeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleSizeBase::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleSize[0x1030EEB0]
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                        		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSize");
		return pClassPointer;
	};
};
UClass* UParticleModuleSize::pClassPointer = NULL;

//0x000020 (0x000078 - 0x000058)
//ParticleModuleSizeMultiplyLife[0x1030ED80]
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x000058 (0x001C)              
	unsigned long                                      MultiplyX : 1;                                    		// 0x000074 (0x0004) [0x00000001] 
	unsigned long                                      MultiplyY : 1;                                    		// 0x000074 (0x0004) [0x00000002] 
	unsigned long                                      MultiplyZ : 1;                                    		// 0x000074 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		return pClassPointer;
	};
};
UClass* UParticleModuleSizeMultiplyLife::pClassPointer = NULL;

//0x000020 (0x000078 - 0x000058)
//ParticleModuleSizeMultiplyVelocity[0x1030EC50]
class UParticleModuleSizeMultiplyVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      VelocityMultiplier;                               		// 0x000058 (0x001C)              
	unsigned long                                      MultiplyX : 1;                                    		// 0x000074 (0x0004) [0x00000001] 
	unsigned long                                      MultiplyY : 1;                                    		// 0x000074 (0x0004) [0x00000002] 
	unsigned long                                      MultiplyZ : 1;                                    		// 0x000074 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyVelocity");
		return pClassPointer;
	};
};
UClass* UParticleModuleSizeMultiplyVelocity::pClassPointer = NULL;

//0x000020 (0x000078 - 0x000058)
//ParticleModuleSizeScale[0x1030EB20]
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                        		// 0x000058 (0x001C)              
	unsigned long                                      EnableX : 1;                                      		// 0x000074 (0x0004) [0x00000001] 
	unsigned long                                      EnableY : 1;                                      		// 0x000074 (0x0004) [0x00000002] 
	unsigned long                                      EnableZ : 1;                                      		// 0x000074 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		return pClassPointer;
	};
};
UClass* UParticleModuleSizeScale::pClassPointer = NULL;

//0x000004 (0x00005C - 0x000058)
//ParticleModuleSpawnBase[0x1030E9F0]
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned long                                      bProcessSpawnRate : 1;                            		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      bProcessBurstList : 1;                            		// 0x000058 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleSpawnBase::pClassPointer = NULL;

//0x000048 (0x0000A4 - 0x00005C)
//ParticleModuleSpawn[0x1030E8C0]
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                             		// 0x00005C (0x001C)              
	struct FRawDistributionFloat                       RateScale;                                        		// 0x000078 (0x001C)              
	unsigned char                                      ParticleBurstMethod;                              		// 0x000094 (0x0001)              PROPERTY: EParticleBurstMethod
	unsigned char                                      _0x000095[0x3];                                   		// 0x000095 (0x0003) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                        		// 0x000098 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSpawn");
		return pClassPointer;
	};
};
UClass* UParticleModuleSpawn::pClassPointer = NULL;

//0x000028 (0x000084 - 0x00005C)
//ParticleModuleSpawnPerUnit[0x1030E790]
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                       		// 0x00005C (0x0004)              
	struct FRawDistributionFloat                       SpawnPerUnit;                                     		// 0x000060 (0x001C)              
	unsigned long                                      bIgnoreSpawnRateWhenMoving : 1;                   		// 0x00007C (0x0004) [0x00000001] 
	float                                              MovementTolerance;                                		// 0x000080 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		return pClassPointer;
	};
};
UClass* UParticleModuleSpawnPerUnit::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleSubUVBase[0x1030E660]
class UParticleModuleSubUVBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleSubUVBase::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleSubUV[0x1030E530]
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                    		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSubUV");
		return pClassPointer;
	};
};
UClass* UParticleModuleSubUV::pClassPointer = NULL;

//0x000038 (0x000090 - 0x000058)
//ParticleModuleSubUVDirect[0x1030E400]
class UParticleModuleSubUVDirect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubUVPosition;                                    		// 0x000058 (0x001C)              
	struct FRawDistributionVector                      SubUVSize;                                        		// 0x000074 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSubUVDirect");
		return pClassPointer;
	};
};
UClass* UParticleModuleSubUVDirect::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleSubUVSelect[0x1030E2D0]
class UParticleModuleSubUVSelect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubImageSelect;                                   		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleSubUVSelect");
		return pClassPointer;
	};
};
UClass* UParticleModuleSubUVSelect::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleTrailBase[0x1030E1A0]
class UParticleModuleTrailBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleTrailBase::pClassPointer = NULL;

//0x00003C (0x000094 - 0x000058)
//ParticleModuleTrailSource[0x1030E070]
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	unsigned char                                      SourceMethod;                                     		// 0x000058 (0x0001)              PROPERTY: ETrail2SourceMethod
	unsigned char                                      SelectionMethod;                                  		// 0x000059 (0x0001)              PROPERTY: EParticleSourceSelectionMethod
	unsigned char                                      _0x00005A[0x2];                                   		// 0x00005A (0x0002) MISSED OFFSET
	struct FName                                       SourceName;                                       		// 0x00005C (0x0008)              
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x000064 (0x001C)              
	unsigned long                                      bLockSourceStength : 1;                           		// 0x000080 (0x0004) [0x00000001] 
	unsigned long                                      bInheritRotation : 1;                             		// 0x000080 (0x0004) [0x00000002] 
	int                                                SourceOffsetCount;                                		// 0x000084 (0x0004)              
	TArray<FVector3>                                   SourceOffsetDefaults;                             		// 0x000088 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		return pClassPointer;
	};
};
UClass* UParticleModuleTrailSource::pClassPointer = NULL;

//0x000008 (0x000060 - 0x000058)
//ParticleModuleTrailSpawn[0x1030DF40]
class UParticleModuleTrailSpawn : public UParticleModuleTrailBase
{
public:
	class UDistributionFloatParticleParameter*         SpawnDistanceMap;                                 		// 0x000058 (0x0004)              
	float                                              MinSpawnVelocity;                                 		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTrailSpawn");
		return pClassPointer;
	};
};
UClass* UParticleModuleTrailSpawn::pClassPointer = NULL;

//0x000020 (0x000078 - 0x000058)
//ParticleModuleTrailTaper[0x1030DE10]
class UParticleModuleTrailTaper : public UParticleModuleTrailBase
{
public:
	unsigned char                                      TaperMethod;                                      		// 0x000058 (0x0001)              PROPERTY: ETrailTaperMethod
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x00005C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTrailTaper");
		return pClassPointer;
	};
};
UClass* UParticleModuleTrailTaper::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleTypeDataBase[0x1030DCE0]
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleTypeDataBase::pClassPointer = NULL;

//0x00009C (0x0000F4 - 0x000058)
//ParticleModuleTypeDataBeam[0x1030DBB0]
class UParticleModuleTypeDataBeam : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      BeamMethod;                                       		// 0x000058 (0x0001)              PROPERTY: EBeamMethod
	unsigned char                                      EndPointMethod;                                   		// 0x000059 (0x0001)              PROPERTY: EBeamEndPointMethod
	unsigned char                                      _0x00005A[0x2];                                   		// 0x00005A (0x0002) MISSED OFFSET
	struct FRawDistributionFloat                       Distance;                                         		// 0x00005C (0x001C)              
	struct FRawDistributionVector                      EndPoint;                                         		// 0x000078 (0x001C)              
	int                                                TessellationFactor;                               		// 0x000094 (0x0004)              
	struct FRawDistributionFloat                       EmitterStrength;                                  		// 0x000098 (0x001C)              
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x0000B4 (0x001C)              
	struct FRawDistributionVector                      EndPointDirection;                                		// 0x0000D0 (0x001C)              
	int                                                TextureTile;                                      		// 0x0000EC (0x0004)              
	unsigned long                                      RenderGeometry : 1;                               		// 0x0000F0 (0x0004) [0x00000001] 
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0000F0 (0x0004) [0x00000002] 
	unsigned long                                      RenderLines : 1;                                  		// 0x0000F0 (0x0004) [0x00000004] 
	unsigned long                                      RenderTessellation : 1;                           		// 0x0000F0 (0x0004) [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam");
		return pClassPointer;
	};
};
UClass* UParticleModuleTypeDataBeam::pClassPointer = NULL;

//0x00007C (0x0000D4 - 0x000058)
//ParticleModuleTypeDataBeam2[0x1030DA80]
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      BeamMethod;                                       		// 0x000058 (0x0001)              PROPERTY: EBeam2Method
	unsigned char                                      TaperMethod;                                      		// 0x000059 (0x0001)              PROPERTY: EBeamTaperMethod
	unsigned char                                      _0x00005A[0x2];                                   		// 0x00005A (0x0002) MISSED OFFSET
	int                                                TextureTile;                                      		// 0x00005C (0x0004)              
	float                                              TextureTileDistance;                              		// 0x000060 (0x0004)              
	int                                                Sheets;                                           		// 0x000064 (0x0004)              
	int                                                MaxBeamCount;                                     		// 0x000068 (0x0004)              
	float                                              Speed;                                            		// 0x00006C (0x0004)              
	int                                                InterpolationPoints;                              		// 0x000070 (0x0004)              
	unsigned long                                      bAlwaysOn : 1;                                    		// 0x000074 (0x0004) [0x00000001] 
	unsigned long                                      RenderGeometry : 1;                               		// 0x000074 (0x0004) [0x00000002] 
	unsigned long                                      RenderDirectLine : 1;                             		// 0x000074 (0x0004) [0x00000004] 
	unsigned long                                      RenderLines : 1;                                  		// 0x000074 (0x0004) [0x00000008] 
	unsigned long                                      RenderTessellation : 1;                           		// 0x000074 (0x0004) [0x00000010] 
	struct FName                                       BranchParentName;                                 		// 0x000078 (0x0008)              
	struct FRawDistributionFloat                       Distance;                                         		// 0x000080 (0x001C)              
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x00009C (0x001C)              
	struct FRawDistributionFloat                       TaperScale;                                       		// 0x0000B8 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		return pClassPointer;
	};
};
UClass* UParticleModuleTypeDataBeam2::pClassPointer = NULL;

//0x000009 (0x000061 - 0x000058)
//ParticleModuleTypeDataMesh[0x1030D950]
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                             		// 0x000058 (0x0004)              
	unsigned long                                      CastShadows : 1;                                  		// 0x00005C (0x0004) [0x00000001] 
	unsigned long                                      DoCollisions : 1;                                 		// 0x00005C (0x0004) [0x00000002] 
	unsigned long                                      bOverrideMaterial : 1;                            		// 0x00005C (0x0004) [0x00000004] 
	unsigned char                                      MeshAlignment;                                    		// 0x000060 (0x0001)              PROPERTY: EMeshScreenAlignment

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		return pClassPointer;
	};
};
UClass* UParticleModuleTypeDataMesh::pClassPointer = NULL;

//0x000023 (0x000084 - 0x000061)
//ParticleModuleTypeDataMeshPhysX[0x1030D820]
class UParticleModuleTypeDataMeshPhysX : public UParticleModuleTypeDataMesh
{
public:
	unsigned char                                      _0x000061[0x3];                                   		// 0x000061 (0x0003) MISSED OFFSET
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x000064 (0x0004)              
	unsigned char                                      PhysXRotationMethod;                              		// 0x000068 (0x0001)              PROPERTY: EPhysXMeshRotationMethod
	unsigned char                                      _0x000069[0x3];                                   		// 0x000069 (0x0003) MISSED OFFSET
	float                                              FluidRotationCoefficient;                         		// 0x00006C (0x0004)              
	DWORD                                              RenderInstance;                                   		// 0x000070 (0x0004)              
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x000074 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataMeshPhysX");
		return pClassPointer;
	};
};
UClass* UParticleModuleTypeDataMeshPhysX::pClassPointer = NULL;

//0x000014 (0x00006C - 0x000058)
//ParticleModuleTypeDataPhysX[0x1030D6F0]
class UParticleModuleTypeDataPhysX : public UParticleModuleTypeDataBase
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x000058 (0x0004)              
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x00005C (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataPhysX");
		return pClassPointer;
	};
};
UClass* UParticleModuleTypeDataPhysX::pClassPointer = NULL;

//0x000030 (0x000088 - 0x000058)
//ParticleModuleTypeDataTrail[0x1030D5C0]
class UParticleModuleTypeDataTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned long                                      RenderGeometry : 1;                               		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      RenderLines : 1;                                  		// 0x000058 (0x0004) [0x00000002] 
	unsigned long                                      RenderTessellation : 1;                           		// 0x000058 (0x0004) [0x00000004] 
	unsigned long                                      Tapered : 1;                                      		// 0x000058 (0x0004) [0x00000008] 
	unsigned long                                      SpawnByDistance : 1;                              		// 0x000058 (0x0004) [0x00000010] 
	int                                                TessellationFactor;                               		// 0x00005C (0x0004)              
	struct FRawDistributionFloat                       Tension;                                          		// 0x000060 (0x001C)              
	FVector3                                           SpawnDistance;                                    		// 0x00007C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataTrail");
		return pClassPointer;
	};
};
UClass* UParticleModuleTypeDataTrail::pClassPointer = NULL;

//0x000020 (0x000078 - 0x000058)
//ParticleModuleTypeDataTrail2[0x1030D490]
class UParticleModuleTypeDataTrail2 : public UParticleModuleTypeDataBase
{
public:
	int                                                TessellationFactor;                               		// 0x000058 (0x0004)              
	float                                              TessellationFactorDistance;                       		// 0x00005C (0x0004)              
	float                                              TessellationStrength;                             		// 0x000060 (0x0004)              
	int                                                TextureTile;                                      		// 0x000064 (0x0004)              
	int                                                Sheets;                                           		// 0x000068 (0x0004)              
	int                                                MaxTrailCount;                                    		// 0x00006C (0x0004)              
	int                                                MaxParticleInTrailCount;                          		// 0x000070 (0x0004)              
	unsigned long                                      RenderGeometry : 1;                               		// 0x000074 (0x0004) [0x00000001] 
	unsigned long                                      RenderDirectLine : 1;                             		// 0x000074 (0x0004) [0x00000002] 
	unsigned long                                      RenderLines : 1;                                  		// 0x000074 (0x0004) [0x00000004] 
	unsigned long                                      RenderTessellation : 1;                           		// 0x000074 (0x0004) [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleTypeDataTrail2");
		return pClassPointer;
	};
};
UClass* UParticleModuleTypeDataTrail2::pClassPointer = NULL;

//0x00000C (0x000064 - 0x000058)
//ParticleModuleUberBase[0x1030D360]
class UParticleModuleUberBase : public UParticleModule
{
public:
	TArray<struct FName>                               RequiredModules;                                  		// 0x000058 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleUberBase::pClassPointer = NULL;

//0x0000A8 (0x00010C - 0x000064)
//ParticleModuleUberLTISIVCL[0x1030D230]
class UParticleModuleUberLTISIVCL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x000064 (0x001C)              
	struct FRawDistributionVector                      StartSize;                                        		// 0x000080 (0x001C)              
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x00009C (0x001C)              
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x0000B8 (0x001C)              
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0000D4 (0x001C)              
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0000F0 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCL");
		return pClassPointer;
	};
};
UClass* UParticleModuleUberLTISIVCL::pClassPointer = NULL;

//0x0000C4 (0x000128 - 0x000064)
//ParticleModuleUberLTISIVCLIL[0x1030D100]
class UParticleModuleUberLTISIVCLIL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x000064 (0x001C)              
	struct FRawDistributionVector                      StartSize;                                        		// 0x000080 (0x001C)              
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x00009C (0x001C)              
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x0000B8 (0x001C)              
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0000D4 (0x001C)              
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0000F0 (0x001C)              
	struct FRawDistributionVector                      StartLocation;                                    		// 0x00010C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCLIL");
		return pClassPointer;
	};
};
UClass* UParticleModuleUberLTISIVCLIL::pClassPointer = NULL;

//0x00011C (0x000180 - 0x000064)
//ParticleModuleUberLTISIVCLILIRSSBLIRR[0x1030CFD0]
class UParticleModuleUberLTISIVCLILIRSSBLIRR : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x000064 (0x001C)              
	struct FRawDistributionVector                      StartSize;                                        		// 0x000080 (0x001C)              
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x00009C (0x001C)              
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x0000B8 (0x001C)              
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0000D4 (0x001C)              
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0000F0 (0x001C)              
	struct FRawDistributionVector                      StartLocation;                                    		// 0x00010C (0x001C)              
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x000128 (0x001C)              
	struct FRawDistributionVector                      SizeLifeMultiplier;                               		// 0x000144 (0x001C)              
	unsigned long                                      SizeMultiplyX : 1;                                		// 0x000160 (0x0004) [0x00000001] 
	unsigned long                                      SizeMultiplyY : 1;                                		// 0x000160 (0x0004) [0x00000002] 
	unsigned long                                      SizeMultiplyZ : 1;                                		// 0x000160 (0x0004) [0x00000004] 
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x000164 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR");
		return pClassPointer;
	};
};
UClass* UParticleModuleUberLTISIVCLILIRSSBLIRR::pClassPointer = NULL;

//0x000088 (0x0000EC - 0x000064)
//ParticleModuleUberRainDrops[0x1030CEA0]
class UParticleModuleUberRainDrops : public UParticleModuleUberBase
{
public:
	float                                              LifetimeMin;                                      		// 0x000064 (0x0004)              
	float                                              LifetimeMax;                                      		// 0x000068 (0x0004)              
	FVector3                                           StartSizeMin;                                     		// 0x00006C (0x000C)              
	FVector3                                           StartSizeMax;                                     		// 0x000078 (0x000C)              
	FVector3                                           StartVelocityMin;                                 		// 0x000084 (0x000C)              
	FVector3                                           StartVelocityMax;                                 		// 0x000090 (0x000C)              
	float                                              StartVelocityRadialMin;                           		// 0x00009C (0x0004)              
	float                                              StartVelocityRadialMax;                           		// 0x0000A0 (0x0004)              
	FVector3                                           ColorOverLife;                                    		// 0x0000A4 (0x000C)              
	float                                              AlphaOverLife;                                    		// 0x0000B0 (0x0004)              
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x0000B4 (0x0004) [0x00000001] 
	unsigned long                                      bPositive_X : 1;                                  		// 0x0000B4 (0x0004) [0x00000002] 
	unsigned long                                      bPositive_Y : 1;                                  		// 0x0000B4 (0x0004) [0x00000004] 
	unsigned long                                      bPositive_Z : 1;                                  		// 0x0000B4 (0x0004) [0x00000008] 
	unsigned long                                      bNegative_X : 1;                                  		// 0x0000B4 (0x0004) [0x00000010] 
	unsigned long                                      bNegative_Y : 1;                                  		// 0x0000B4 (0x0004) [0x00000020] 
	unsigned long                                      bNegative_Z : 1;                                  		// 0x0000B4 (0x0004) [0x00000040] 
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x0000B4 (0x0004) [0x00000080] 
	unsigned long                                      bVelocity : 1;                                    		// 0x0000B4 (0x0004) [0x00000100] 
	unsigned long                                      bRadialVelocity : 1;                              		// 0x0000B4 (0x0004) [0x00000200] 
	float                                              PC_VelocityScale;                                 		// 0x0000B8 (0x0004)              
	FVector3                                           PC_StartLocation;                                 		// 0x0000BC (0x000C)              
	float                                              PC_StartRadius;                                   		// 0x0000C8 (0x0004)              
	float                                              PC_StartHeight;                                   		// 0x0000CC (0x0004)              
	unsigned char                                      PC_HeightAxis;                                    		// 0x0000D0 (0x0001)              PROPERTY: CylinderHeightAxis
	unsigned char                                      _0x0000D1[0x3];                                   		// 0x0000D1 (0x0003) MISSED OFFSET
	FVector3                                           StartLocationMin;                                 		// 0x0000D4 (0x000C)              
	FVector3                                           StartLocationMax;                                 		// 0x0000E0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberRainDrops");
		return pClassPointer;
	};
};
UClass* UParticleModuleUberRainDrops::pClassPointer = NULL;

//0x000120 (0x000184 - 0x000064)
//ParticleModuleUberRainImpacts[0x1030CD70]
class UParticleModuleUberRainImpacts : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x000064 (0x001C)              
	struct FRawDistributionVector                      StartSize;                                        		// 0x000080 (0x001C)              
	struct FRawDistributionVector                      StartRotation;                                    		// 0x00009C (0x001C)              
	unsigned long                                      bInheritParent : 1;                               		// 0x0000B8 (0x0004) [0x00000001] 
	unsigned long                                      MultiplyX : 1;                                    		// 0x0000B8 (0x0004) [0x00000002] 
	unsigned long                                      MultiplyY : 1;                                    		// 0x0000B8 (0x0004) [0x00000004] 
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0000B8 (0x0004) [0x00000008] 
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x0000B8 (0x0004) [0x00000010] 
	unsigned long                                      bPositive_X : 1;                                  		// 0x0000B8 (0x0004) [0x00000020] 
	unsigned long                                      bPositive_Y : 1;                                  		// 0x0000B8 (0x0004) [0x00000040] 
	unsigned long                                      bPositive_Z : 1;                                  		// 0x0000B8 (0x0004) [0x00000080] 
	unsigned long                                      bNegative_X : 1;                                  		// 0x0000B8 (0x0004) [0x00000100] 
	unsigned long                                      bNegative_Y : 1;                                  		// 0x0000B8 (0x0004) [0x00000200] 
	unsigned long                                      bNegative_Z : 1;                                  		// 0x0000B8 (0x0004) [0x00000400] 
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x0000B8 (0x0004) [0x00000800] 
	unsigned long                                      bVelocity : 1;                                    		// 0x0000B8 (0x0004) [0x00001000] 
	unsigned long                                      bRadialVelocity : 1;                              		// 0x0000B8 (0x0004) [0x00002000] 
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0000BC (0x001C)              
	struct FRawDistributionFloat                       PC_VelocityScale;                                 		// 0x0000D8 (0x001C)              
	struct FRawDistributionVector                      PC_StartLocation;                                 		// 0x0000F4 (0x001C)              
	struct FRawDistributionFloat                       PC_StartRadius;                                   		// 0x000110 (0x001C)              
	struct FRawDistributionFloat                       PC_StartHeight;                                   		// 0x00012C (0x001C)              
	unsigned char                                      PC_HeightAxis;                                    		// 0x000148 (0x0001)              PROPERTY: CylinderHeightAxis
	unsigned char                                      _0x000149[0x3];                                   		// 0x000149 (0x0003) MISSED OFFSET
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00014C (0x001C)              
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x000168 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberRainImpacts");
		return pClassPointer;
	};
};
UClass* UParticleModuleUberRainImpacts::pClassPointer = NULL;

//0x0000AC (0x000110 - 0x000064)
//ParticleModuleUberRainSplashA[0x1030CC40]
class UParticleModuleUberRainSplashA : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x000064 (0x001C)              
	struct FRawDistributionVector                      StartSize;                                        		// 0x000080 (0x001C)              
	struct FRawDistributionVector                      StartRotation;                                    		// 0x00009C (0x001C)              
	unsigned long                                      bInheritParent : 1;                               		// 0x0000B8 (0x0004) [0x00000001] 
	unsigned long                                      MultiplyX : 1;                                    		// 0x0000B8 (0x0004) [0x00000002] 
	unsigned long                                      MultiplyY : 1;                                    		// 0x0000B8 (0x0004) [0x00000004] 
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0000B8 (0x0004) [0x00000008] 
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0000BC (0x001C)              
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0000D8 (0x001C)              
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0000F4 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberRainSplashA");
		return pClassPointer;
	};
};
UClass* UParticleModuleUberRainSplashA::pClassPointer = NULL;

//0x0000AC (0x000110 - 0x000064)
//ParticleModuleUberRainSplashB[0x1030CB10]
class UParticleModuleUberRainSplashB : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x000064 (0x001C)              
	struct FRawDistributionVector                      StartSize;                                        		// 0x000080 (0x001C)              
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00009C (0x001C)              
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0000B8 (0x001C)              
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0000D4 (0x001C)              
	unsigned long                                      MultiplyX : 1;                                    		// 0x0000F0 (0x0004) [0x00000001] 
	unsigned long                                      MultiplyY : 1;                                    		// 0x0000F0 (0x0004) [0x00000002] 
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0000F0 (0x0004) [0x00000004] 
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x0000F4 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleUberRainSplashB");
		return pClassPointer;
	};
};
UClass* UParticleModuleUberRainSplashB::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//ParticleModuleVelocityBase[0x1030C9E0]
class UParticleModuleVelocityBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		return pClassPointer;
	};
};
UClass* UParticleModuleVelocityBase::pClassPointer = NULL;

//0x000038 (0x000090 - 0x000058)
//ParticleModuleVelocity[0x1030C8B0]
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x000058 (0x001C)              
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x000074 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleVelocity");
		return pClassPointer;
	};
};
UClass* UParticleModuleVelocity::pClassPointer = NULL;

//0x00001C (0x000074 - 0x000058)
//ParticleModuleVelocityInheritParent[0x1030C780]
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                            		// 0x000058 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		return pClassPointer;
	};
};
UClass* UParticleModuleVelocityInheritParent::pClassPointer = NULL;

//0x000020 (0x000078 - 0x000058)
//ParticleModuleVelocityOverLifetime[0x1030C650]
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                      		// 0x000058 (0x001C)              
	unsigned long                                      Absolute : 1;                                     		// 0x000074 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		return pClassPointer;
	};
};
UClass* UParticleModuleVelocityOverLifetime::pClassPointer = NULL;

//0x0000A8 (0x0000E8 - 0x000040)
//ParticleSystem[0x1030C520]
class UParticleSystem : public UObject
{
public:
	unsigned char                                      SystemUpdateMode;                                 		// 0x000040 (0x0001)              PROPERTY: EParticleSystemUpdateMode
	unsigned char                                      LODMethod;                                        		// 0x000041 (0x0001)              PROPERTY: ParticleSystemLODMethod
	unsigned char                                      _0x000042[0x2];                                   		// 0x000042 (0x0002) MISSED OFFSET
	float                                              UpdateTime_FPS;                                   		// 0x000044 (0x0004)              
	float                                              UpdateTime_Delta;                                 		// 0x000048 (0x0004)              
	float                                              WarmupTime;                                       		// 0x00004C (0x0004)              
	TArray<class UParticleEmitter*>                    Emitters;                                         		// 0x000050 (0x000C)              
	class UParticleSystemComponent*                    PreviewComponent;                                 		// 0x00005C (0x0004)              
	FRotator                                           ThumbnailAngle;                                   		// 0x000060 (0x000C)              
	float                                              ThumbnailDistance;                                		// 0x00006C (0x0004)              
	float                                              ThumbnailWarmup;                                  		// 0x000070 (0x0004)              
	unsigned long                                      bLit : 1;                                         		// 0x000074 (0x0004) [0x00000001] 
	unsigned long                                      bRegenerateLODDuplicate : 1;                      		// 0x000074 (0x0004) [0x00000002] 
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x000074 (0x0004) [0x00000004] 
	unsigned long                                      bShouldResetPeakCounts : 1;                       		// 0x000074 (0x0004) [0x00000008] 
	unsigned long                                      bHasPhysics : 1;                                  		// 0x000074 (0x0004) [0x00000010] 
	unsigned long                                      bUseRealtimeThumbnail : 1;                        		// 0x000074 (0x0004) [0x00000020] 
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x000074 (0x0004) [0x00000040] 
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x000078 (0x0004)              
	float                                              LODDistanceCheckTime;                             		// 0x00007C (0x0004)              
	TArray<float>                                      LODDistances;                                     		// 0x000080 (0x000C)              
	int                                                EditorLODSetting;                                 		// 0x00008C (0x0004)              
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x000090 (0x001C)              
	float                                              SecondsBeforeInactive;                            		// 0x0000AC (0x0004)              
	struct FString                                     FloorMesh;                                        		// 0x0000B0 (0x000C)              
	FVector3                                           FloorPosition;                                    		// 0x0000BC (0x000C)              
	FRotator                                           FloorRotation;                                    		// 0x0000C8 (0x000C)              
	float                                              FloorScale;                                       		// 0x0000D4 (0x0004)              
	FVector3                                           FloorScale3D;                                     		// 0x0000D8 (0x000C)              
	class UTexture2D*                                  ThumbnailImage;                                   		// 0x0000E4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ParticleSystem");
		return pClassPointer;
	};

public:
	int GetLODLevelCount();//Engine.ParticleSystem.GetLODLevelCount
	void SetCurrentLODMethod(unsigned char InMethod);//Engine.ParticleSystem.SetCurrentLODMethod
	unsigned char GetCurrentLODMethod();//Engine.ParticleSystem.GetCurrentLODMethod
	bool SetLODDistance(int LODLevelIndex,float InDistance);//Engine.ParticleSystem.SetLODDistance
	float GetLODDistance(int LODLevelIndex);//Engine.ParticleSystem.GetLODDistance
};
UClass* UParticleSystem::pClassPointer = NULL;

//0x000054 (0x000094 - 0x000040)
//PhysXParticleSystem[0x1030C3F0]
class UPhysXParticleSystem : public UObject
{
public:
	int                                                MaxParticles;                                     		// 0x000040 (0x0004)              
	float                                              CollisionDistance;                                		// 0x000044 (0x0004)              
	float                                              RestitutionWithStaticShapes;                      		// 0x000048 (0x0004)              
	float                                              RestitutionWithDynamicShapes;                     		// 0x00004C (0x0004)              
	float                                              FrictionWithStaticShapes;                         		// 0x000050 (0x0004)              
	float                                              FrictionWithDynamicShapes;                        		// 0x000054 (0x0004)              
	unsigned long                                      bDynamicCollision : 1;                            		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      bDisableGravity : 1;                              		// 0x000058 (0x0004) [0x00000002] 
	unsigned long                                      bStaticCollision : 1;                             		// 0x000058 (0x0004) [0x00000004] 
	unsigned long                                      bTwoWayCollision : 1;                             		// 0x000058 (0x0004) [0x00000008] 
	unsigned long                                      bDestroy : 1;                                     		// 0x000058 (0x0004) [0x00000010] 
	unsigned long                                      bSyncFailed : 1;                                  		// 0x000058 (0x0004) [0x00000020] 
	unsigned long                                      bIsInGame : 1;                                    		// 0x000058 (0x0004) [0x00000040] 
	float                                              MaxMotionDistance;                                		// 0x00005C (0x0004)              
	float                                              Damping;                                          		// 0x000060 (0x0004)              
	FVector3                                           ExternalAcceleration;                             		// 0x000064 (0x000C)              
	unsigned char                                      SimulationMethod;                                 		// 0x000070 (0x0001)              PROPERTY: ESimulationMethod
	unsigned char                                      PacketSizeMultiplier;                             		// 0x000071 (0x0001)              PROPERTY: EPacketSizeMultiplier
	unsigned char                                      _0x000072[0x2];                                   		// 0x000072 (0x0002) MISSED OFFSET
	float                                              RestParticleDistance;                             		// 0x000074 (0x0004)              
	float                                              RestDensity;                                      		// 0x000078 (0x0004)              
	float                                              KernelRadiusMultiplier;                           		// 0x00007C (0x0004)              
	float                                              Stiffness;                                        		// 0x000080 (0x0004)              
	float                                              Viscosity;                                        		// 0x000084 (0x0004)              
	float                                              CollisionResponseCoefficient;                     		// 0x000088 (0x0004)              
	DWORD                                              CascadeScene;                                     		// 0x00008C (0x0004)              
	DWORD                                              PSys;                                             		// 0x000090 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PhysXParticleSystem");
		return pClassPointer;
	};
};
UClass* UPhysXParticleSystem::pClassPointer = NULL;

//0x000090 (0x000328 - 0x000298)
//KActor[0x1030C2C0]
class AKActor : public ADynamicSMActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x000298 (0x0004) [0x00000001] 
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x000298 (0x0004) [0x00000002] 
	unsigned long                                      bCurrentSlide : 1;                                		// 0x000298 (0x0004) [0x00000004] 
	unsigned long                                      bSlideActive : 1;                                 		// 0x000298 (0x0004) [0x00000008] 
	class UParticleSystemComponent*                    ImpactEffectComponent;                            		// 0x00029C (0x0004)              
	class UAudioComponent*                             ImpactSoundComponent;                             		// 0x0002A0 (0x0004)              
	class UAudioComponent*                             ImpactSoundComponent2;                            		// 0x0002A4 (0x0004)              
	double                                             LastImpactTime;                                   		// 0x0002A8 (0x0008)              
	class UParticleSystemComponent*                    SlideEffectComponent;                             		// 0x0002B0 (0x0004)              
	class UAudioComponent*                             SlideSoundComponent;                              		// 0x0002B4 (0x0004)              
	double                                             LastSlideTime;                                    		// 0x0002B8 (0x0008)              
	struct FRigidBodyState                             RBState;                                          		// 0x0002C0 (0x0040)              
	float                                              AngErrorAccumulator;                              		// 0x000300 (0x0004)              
	float                                              DrawScaleX;                                       		// 0x000304 (0x0004)              
	float                                              DrawScaleY;                                       		// 0x000308 (0x0004)              
	float                                              DrawScaleZ;                                       		// 0x00030C (0x0004)              
	FVector3                                           InitialLocation;                                  		// 0x000310 (0x000C)              
	FRotator                                           InitialRotation;                                  		// 0x00031C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.KActor");
		return pClassPointer;
	};

public:
	void OnToggle(class USeqAct_Toggle* Action);//Engine.KActor.OnToggle
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//Engine.KActor.TakeRadiusDamage
	void ApplyImpulse(FVector3 ImpulseDir,float ImpulseMag,FVector3 HitLocation,struct FTraceHitInfo HitInfo);//Engine.KActor.ApplyImpulse
	void ResolveRBState();//Engine.KActor.ResolveRBState
	void FellOutOfWorld(class UClass* dmgType);//Engine.KActor.FellOutOfWorld
	void Reset();//Engine.KActor.Reset
	void OnTeleport(class USeqAct_Teleport* inAction);//Engine.KActor.OnTeleport
	void ReplicatedEvent(struct FName VarName);//Engine.KActor.ReplicatedEvent
	class UPhysicalMaterial* GetKActorPhysMaterial();//Engine.KActor.GetKActorPhysMaterial
	void SetPhysicalCollisionProperties();//Engine.KActor.SetPhysicalCollisionProperties
	void PostBeginPlay();//Engine.KActor.PostBeginPlay
	bool OnSequenceAction(class USequenceAction* Action);//Engine.KActor.OnSequenceAction
};
UClass* AKActor::pClassPointer = NULL;

//0x000000 (0x000328 - 0x000328)
//KActorSpawnable[0x1030C190]
class AKActorSpawnable : public AKActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.KActorSpawnable");
		return pClassPointer;
	};

public:
	void Recycle();//Engine.KActorSpawnable.Recycle
	void ResetComponents();//Engine.KActorSpawnable.ResetComponents
	void Initialize();//Engine.KActorSpawnable.Initialize
};
UClass* AKActorSpawnable::pClassPointer = NULL;

//0x000010 (0x000270 - 0x000260)
//KAsset[0x1030C060]
class AKAsset : public AActor
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x000260 (0x0004)              
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x000264 (0x0004) [0x00000001] 
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x000264 (0x0004) [0x00000002] 
	unsigned long                                      bBlockPawns : 1;                                  		// 0x000264 (0x0004) [0x00000004] 
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x000268 (0x0004)              
	class UPhysicsAsset*                               ReplicatedPhysAsset;                              		// 0x00026C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.KAsset");
		return pClassPointer;
	};

public:
	bool OnSequenceAction(class USequenceAction* Action);//Engine.KAsset.OnSequenceAction
	void OnTeleport(class USeqAct_Teleport* inAction);//Engine.KAsset.OnTeleport
	void PostBeginPlay();//Engine.KAsset.PostBeginPlay
	void ReplicatedEvent(struct FName VarName);//Engine.KAsset.ReplicatedEvent
	void OnToggle(class USeqAct_Toggle* Action);//Engine.KAsset.OnToggle
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//Engine.KAsset.TakeRadiusDamage
	void DoKismetAttachment(class AActor* Attachment,class USeqAct_AttachToActor* Action);//Engine.KAsset.DoKismetAttachment
};
UClass* AKAsset::pClassPointer = NULL;

//0x00014C (0x000648 - 0x0004FC)
//SVehicle[0x1030BF30]
class ASVehicle : public AVehicle
{
public:
	class USVehicleSimBase*                            SimObj;                                           		// 0x0004FC (0x0004)              
	TArray<class USVehicleWheel*>                      Wheels;                                           		// 0x000500 (0x000C)              
	FVector3                                           COMOffset;                                        		// 0x00050C (0x000C)              
	FVector3                                           InertiaTensorMultiplier;                          		// 0x000518 (0x000C)              
	unsigned long                                      bStayUpright : 1;                                 		// 0x000524 (0x0004) [0x00000001] 
	unsigned long                                      bUseSuspensionAxis : 1;                           		// 0x000524 (0x0004) [0x00000002] 
	unsigned long                                      bUpdateWheelShapes : 1;                           		// 0x000524 (0x0004) [0x00000004] 
	unsigned long                                      bVehicleOnGround : 1;                             		// 0x000524 (0x0004) [0x00000008] 
	unsigned long                                      bVehicleOnWater : 1;                              		// 0x000524 (0x0004) [0x00000010] 
	unsigned long                                      bIsInverted : 1;                                  		// 0x000524 (0x0004) [0x00000020] 
	unsigned long                                      bChassisTouchingGround : 1;                       		// 0x000524 (0x0004) [0x00000040] 
	unsigned long                                      bWasChassisTouchingGroundLastTick : 1;            		// 0x000524 (0x0004) [0x00000080] 
	unsigned long                                      bCanFlip : 1;                                     		// 0x000524 (0x0004) [0x00000100] 
	unsigned long                                      bFlipRight : 1;                                   		// 0x000524 (0x0004) [0x00000200] 
	unsigned long                                      bIsUprighting : 1;                                		// 0x000524 (0x0004) [0x00000400] 
	unsigned long                                      bOutputHandbrake : 1;                             		// 0x000524 (0x0004) [0x00000800] 
	unsigned long                                      bHoldingDownHandbrake : 1;                        		// 0x000524 (0x0004) [0x00001000] 
	unsigned long                                      m_bNonLocalVehicleReplication : 1;                		// 0x000524 (0x0004) [0x00002000] 
	float                                              StayUprightRollResistAngle;                       		// 0x000528 (0x0004)              
	float                                              StayUprightPitchResistAngle;                      		// 0x00052C (0x0004)              
	float                                              StayUprightStiffness;                             		// 0x000530 (0x0004)              
	float                                              StayUprightDamping;                               		// 0x000534 (0x0004)              
	class URB_StayUprightSetup*                        StayUprightConstraintSetup;                       		// 0x000538 (0x0004)              
	class URB_ConstraintInstance*                      StayUprightConstraintInstance;                    		// 0x00053C (0x0004)              
	float                                              HeavySuspensionShiftPercent;                      		// 0x000540 (0x0004)              
	float                                              MaxSpeed;                                         		// 0x000544 (0x0004)              
	float                                              MaxAngularVelocity;                               		// 0x000548 (0x0004)              
	float                                              TimeOffGround;                                    		// 0x00054C (0x0004)              
	float                                              UprightLiftStrength;                              		// 0x000550 (0x0004)              
	float                                              UprightTorqueStrength;                            		// 0x000554 (0x0004)              
	float                                              UprightTime;                                      		// 0x000558 (0x0004)              
	double                                             UprightStartTime;                                 		// 0x00055C (0x0008)              
	class UAudioComponent*                             EngineSound;                                      		// 0x000564 (0x0004)              
	class UAudioComponent*                             SquealSound;                                      		// 0x000568 (0x0004)              
	class USoundCue*                                   CollisionSound;                                   		// 0x00056C (0x0004)              
	class USoundCue*                                   EnterVehicleSound;                                		// 0x000570 (0x0004)              
	class USoundCue*                                   ExitVehicleSound;                                 		// 0x000574 (0x0004)              
	float                                              CollisionIntervalSecs;                            		// 0x000578 (0x0004)              
	float                                              SquealThreshold;                                  		// 0x00057C (0x0004)              
	float                                              SquealLatThreshold;                               		// 0x000580 (0x0004)              
	float                                              LatAngleVolumeMult;                               		// 0x000584 (0x0004)              
	float                                              EngineStartOffsetSecs;                            		// 0x000588 (0x0004)              
	float                                              EngineStopOffsetSecs;                             		// 0x00058C (0x0004)              
	double                                             LastCollisionSoundTime;                           		// 0x000590 (0x0008)              
	float                                              OutputBrake;                                      		// 0x000598 (0x0004)              
	float                                              OutputGas;                                        		// 0x00059C (0x0004)              
	int                                                OutputGear;                                       		// 0x0005A0 (0x0004)              
	float                                              OutputSteering;                                   		// 0x0005A4 (0x0004)              
	float                                              ForwardVel;                                       		// 0x0005A8 (0x0004)              
	int                                                NumPoweredWheels;                                 		// 0x0005AC (0x0004)              
	FVector3                                           BaseOffset;                                       		// 0x0005B0 (0x000C)              
	float                                              CamDist;                                          		// 0x0005BC (0x0004)              
	int                                                DriverViewPitch;                                  		// 0x0005C0 (0x0004)              
	int                                                DriverViewYaw;                                    		// 0x0005C4 (0x0004)              
	unsigned char                                      _0x0005C8[0x8];                                   		// 0x0005C8 (0x0008) MISSED OFFSET
	struct FNonLocalVehicleState                       m_NonLocalVehicleState;                           		// 0x0005D0 (0x0020)              
	struct FVehicleState                               VState;                                           		// 0x0005F0 (0x0050)              
	float                                              AngErrorAccumulator;                              		// 0x000640 (0x0004)              
	float                                              RadialImpulseScaling;                             		// 0x000644 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SVehicle");
		return pClassPointer;
	};

public:
	void SuspensionHeavyShift(float Delta);//Engine.SVehicle.SuspensionHeavyShift
	void DrivingStatusChanged();//Engine.SVehicle.DrivingStatusChanged
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);//Engine.SVehicle.GetDefaultCameraMode
	void InitVehicleRagdoll(class USkeletalMesh* RagdollMesh,class UPhysicsAsset* RagdollPhysAsset,FVector3 ActorMove);//Engine.SVehicle.InitVehicleRagdoll
	bool HasWheelsOnGround();//Engine.SVehicle.HasWheelsOnGround
	void SetWheelCollision(int WheelNum,bool bCollision);//Engine.SVehicle.SetWheelCollision
	void StopEngineSound();//Engine.SVehicle.StopEngineSound
	void VehiclePlayExitSound();//Engine.SVehicle.VehiclePlayExitSound
	void AddVelocity(FVector3 NewVelocity,FVector3 HitLocation,class UClass* DamageType,struct FTraceHitInfo HitInfo);//Engine.SVehicle.AddVelocity
	void DisplayWheelsDebug(class AHUD* HUD,float YL);//Engine.SVehicle.DisplayWheelsDebug
	void GetSVehicleDebug(TArray<struct FString>* DebugInfo);//Engine.SVehicle.GetSVehicleDebug
	void TurnOff();//Engine.SVehicle.TurnOff
	void StartEngineSoundTimed();//Engine.SVehicle.StartEngineSoundTimed
	bool CalcCamera(float fDeltaTime,FVector3* out_CamLoc,FRotator* out_CamRot,float* out_FOV);//Engine.SVehicle.CalcCamera
	void TakeRadiusDamage(class AController* InstigatedBy,float BaseDamage,float DamageRadius,class UClass* DamageType,float Momentum,FVector3 HurtOrigin,bool bFullDamage,class AActor* DamageCauser);//Engine.SVehicle.TakeRadiusDamage
	bool TryToDrive(class APawn* P);//Engine.SVehicle.TryToDrive
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent,class UPrimitiveComponent* OtherComponent,struct FCollisionImpactData* RigidCollisionData,int ContactIndex);//Engine.SVehicle.RigidBodyCollision
	void StartEngineSound();//Engine.SVehicle.StartEngineSound
	void PostBeginPlay();//Engine.SVehicle.PostBeginPlay
	void StopVehicleSounds();//Engine.SVehicle.StopVehicleSounds
	float HermiteEval(float Slip);//Engine.SVehicle.HermiteEval
	bool Died(class AController* Killer,class UClass* DamageType,FVector3 HitLocation,int nWeaponType);//Engine.SVehicle.Died
	void PostTeleport(class ATeleporter* OutTeleporter);//Engine.SVehicle.PostTeleport
	void StopEngineSoundTimed();//Engine.SVehicle.StopEngineSoundTimed
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);//Engine.SVehicle.PostInitAnimTree
	void VehiclePlayEnterSound();//Engine.SVehicle.VehiclePlayEnterSound
	void Destroyed();//Engine.SVehicle.Destroyed
	void DisplayDebug(class AHUD* HUD,float* out_YL,float* out_YPos);//Engine.SVehicle.DisplayDebug
};
UClass* ASVehicle::pClassPointer = NULL;

//0x00001C (0x00027C - 0x000260)
//RB_ConstraintActor[0x1030BE00]
class ARB_ConstraintActor : public AActor
{
public:
	class AActor*                                      ConstraintActor1;                                 		// 0x000260 (0x0004)              
	class AActor*                                      ConstraintActor2;                                 		// 0x000264 (0x0004)              
	class URB_ConstraintSetup*                         ConstraintSetup;                                  		// 0x000268 (0x0004)              
	class URB_ConstraintInstance*                      ConstraintInstance;                               		// 0x00026C (0x0004)              
	unsigned long                                      bDisableCollision : 1;                            		// 0x000270 (0x0004) [0x00000001] 
	unsigned long                                      bUpdateActor1RefFrame : 1;                        		// 0x000270 (0x0004) [0x00000002] 
	unsigned long                                      bUpdateActor2RefFrame : 1;                        		// 0x000270 (0x0004) [0x00000004] 
	class AActor*                                      PulleyPivotActor1;                                		// 0x000274 (0x0004)              
	class AActor*                                      PulleyPivotActor2;                                		// 0x000278 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_ConstraintActor");
		return pClassPointer;
	};

public:
	void SetDisableCollision(bool NewDisableCollision);//Engine.RB_ConstraintActor.SetDisableCollision
	void TermConstraint();//Engine.RB_ConstraintActor.TermConstraint
	void OnDestroy(class USeqAct_Destroy* Action);//Engine.RB_ConstraintActor.OnDestroy
	void InitConstraint(class AActor* Actor1,class AActor* Actor2,struct FName Actor1Bone,struct FName Actor2Bone,float BreakThreshold);//Engine.RB_ConstraintActor.InitConstraint
};
UClass* ARB_ConstraintActor::pClassPointer = NULL;

//0x000011 (0x000271 - 0x000260)
//RB_LineImpulseActor[0x1030BCD0]
class ARB_LineImpulseActor : public AActor
{
public:
	float                                              ImpulseStrength;                                  		// 0x000260 (0x0004)              
	float                                              ImpulseRange;                                     		// 0x000264 (0x0004)              
	unsigned long                                      bVelChange : 1;                                   		// 0x000268 (0x0004) [0x00000001] 
	unsigned long                                      bStopAtFirstHit : 1;                              		// 0x000268 (0x0004) [0x00000002] 
	class UArrowComponent*                             Arrow;                                            		// 0x00026C (0x0004)              
	unsigned char                                      ImpulseCount;                                     		// 0x000270 (0x0001)              PROPERTY: 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_LineImpulseActor");
		return pClassPointer;
	};

public:
	void ReplicatedEvent(struct FName VarName);//Engine.RB_LineImpulseActor.ReplicatedEvent
	bool OnSequenceAction(class USequenceAction* Action);//Engine.RB_LineImpulseActor.OnSequenceAction
	void FireLineImpulse();//Engine.RB_LineImpulseActor.FireLineImpulse
	void OnToggle(class USeqAct_Toggle* inAction);//Engine.RB_LineImpulseActor.OnToggle
};
UClass* ARB_LineImpulseActor::pClassPointer = NULL;

//0x000009 (0x000269 - 0x000260)
//RB_RadialImpulseActor[0x1030BBA0]
class ARB_RadialImpulseActor : public AActor
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x000260 (0x0004)              
	class URB_RadialImpulseComponent*                  ImpulseComponent;                                 		// 0x000264 (0x0004)              
	unsigned char                                      ImpulseCount;                                     		// 0x000268 (0x0001)              PROPERTY: 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_RadialImpulseActor");
		return pClassPointer;
	};

public:
	bool OnSequenceAction(class USequenceAction* Action);//Engine.RB_RadialImpulseActor.OnSequenceAction
	void ReplicatedEvent(struct FName VarName);//Engine.RB_RadialImpulseActor.ReplicatedEvent
	void OnToggle(class USeqAct_Toggle* inAction);//Engine.RB_RadialImpulseActor.OnToggle
};
UClass* ARB_RadialImpulseActor::pClassPointer = NULL;

//0x000008 (0x000268 - 0x000260)
//RB_Thruster[0x1030BA70]
class ARB_Thruster : public AActor
{
public:
	unsigned long                                      bThrustEnabled : 1;                               		// 0x000260 (0x0004) [0x00000001] 
	float                                              ThrustStrength;                                   		// 0x000264 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_Thruster");
		return pClassPointer;
	};

public:
	void OnToggle(class USeqAct_Toggle* Action);//Engine.RB_Thruster.OnToggle
	bool OnSequenceAction(class USequenceAction* Action);//Engine.RB_Thruster.OnSequenceAction
};
UClass* ARB_Thruster::pClassPointer = NULL;

//0x000004 (0x0001E4 - 0x0001E0)
//RB_ConstraintDrawComponent[0x1030B940]
class URB_ConstraintDrawComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          LimitMaterial;                                    		// 0x0001E0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_ConstraintDrawComponent");
		return pClassPointer;
	};
};
UClass* URB_ConstraintDrawComponent::pClassPointer = NULL;

//0x000014 (0x0001F4 - 0x0001E0)
//RB_RadialImpulseComponent[0x1030B810]
class URB_RadialImpulseComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      ImpulseFalloff;                                   		// 0x0001E0 (0x0001)              PROPERTY: ERadialImpulseFalloff
	unsigned char                                      _0x0001E1[0x3];                                   		// 0x0001E1 (0x0003) MISSED OFFSET
	float                                              ImpulseStrength;                                  		// 0x0001E4 (0x0004)              
	float                                              ImpulseRadius;                                    		// 0x0001E8 (0x0004)              
	unsigned long                                      bVelChange : 1;                                   		// 0x0001EC (0x0004) [0x00000001] 
	class UDrawSphereComponent*                        PreviewSphere;                                    		// 0x0001F0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_RadialImpulseComponent");
		return pClassPointer;
	};

public:
	void FireImpulse(FVector3 Origin);//Engine.RB_RadialImpulseComponent.FireImpulse
};
UClass* URB_RadialImpulseComponent::pClassPointer = NULL;

//0x000000 (0x0001E0 - 0x0001E0)
//VehicleNetRenderingComponent[0x1030B6E0]
class UVehicleNetRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.VehicleNetRenderingComponent");
		return pClassPointer;
	};
};
UClass* UVehicleNetRenderingComponent::pClassPointer = NULL;

//0x000053 (0x0000AC - 0x000059)
//RB_Handle[0x1030B5B0]
class URB_Handle : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	class UPrimitiveComponent*                         GrabbedComponent;                                 		// 0x00005C (0x0004)              
	struct FName                                       GrabbedBoneName;                                  		// 0x000060 (0x0008)              
	int                                                SceneIndex;                                       		// 0x000068 (0x0004)              
	unsigned long                                      bInHardware : 1;                                  		// 0x00006C (0x0004) [0x00000001] 
	unsigned long                                      bRotationConstrained : 1;                         		// 0x00006C (0x0004) [0x00000002] 
	unsigned long                                      bInterpolating : 1;                               		// 0x00006C (0x0004) [0x00000004] 
	DWORD                                              HandleData;                                       		// 0x000070 (0x0004)              
	DWORD                                              KinActorData;                                     		// 0x000074 (0x0004)              
	float                                              LinearDamping;                                    		// 0x000078 (0x0004)              
	float                                              LinearStiffness;                                  		// 0x00007C (0x0004)              
	float                                              AngularDamping;                                   		// 0x000080 (0x0004)              
	float                                              AngularStiffness;                                 		// 0x000084 (0x0004)              
	FVector3                                           Destination;                                      		// 0x000088 (0x000C)              
	FVector3                                           StepSize;                                         		// 0x000094 (0x000C)              
	FVector3                                           Location;                                         		// 0x0000A0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_Handle");
		return pClassPointer;
	};

public:
	void ReleaseComponent();//Engine.RB_Handle.ReleaseComponent
	void SetSmoothLocation(FVector3 NewLocation,float MoveTime);//Engine.RB_Handle.SetSmoothLocation
	void GrabComponent(class UPrimitiveComponent* Component,struct FName InBoneName,FVector3 GrabLocation,bool bConstrainRotation);//Engine.RB_Handle.GrabComponent
	void UpdateSmoothLocation(FVector3* NewLocation);//Engine.RB_Handle.UpdateSmoothLocation
	struct FQuat GetOrientation();//Engine.RB_Handle.GetOrientation
	void SetLocation(FVector3 NewLocation);//Engine.RB_Handle.SetLocation
	void SetOrientation(struct FQuat* NewOrientation);//Engine.RB_Handle.SetOrientation
};
UClass* URB_Handle::pClassPointer = NULL;

//0x000053 (0x0000AC - 0x000059)
//RB_Spring[0x1030B480]
class URB_Spring : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	class UPrimitiveComponent*                         Component1;                                       		// 0x00005C (0x0004)              
	struct FName                                       BoneName1;                                        		// 0x000060 (0x0008)              
	class UPrimitiveComponent*                         Component2;                                       		// 0x000068 (0x0004)              
	struct FName                                       BoneName2;                                        		// 0x00006C (0x0008)              
	int                                                SceneIndex;                                       		// 0x000074 (0x0004)              
	unsigned long                                      bInHardware : 1;                                  		// 0x000078 (0x0004) [0x00000001] 
	unsigned long                                      bEnableForceMassRatio : 1;                        		// 0x000078 (0x0004) [0x00000002] 
	DWORD                                              SpringData;                                       		// 0x00007C (0x0004)              
	float                                              TimeSinceActivation;                              		// 0x000080 (0x0004)              
	float                                              MinBodyMass;                                      		// 0x000084 (0x0004)              
	float                                              SpringSaturateDist;                               		// 0x000088 (0x0004)              
	float                                              SpringMaxForce;                                   		// 0x00008C (0x0004)              
	float                                              MaxForceMassRatio;                                		// 0x000090 (0x0004)              
	struct FInterpCurveFloat                           SpringMaxForceTimeScale;                          		// 0x000094 (0x0010)              
	float                                              DampSaturateVel;                                  		// 0x0000A4 (0x0004)              
	float                                              DampMaxForce;                                     		// 0x0000A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_Spring");
		return pClassPointer;
	};

public:
	void SetComponents(class UPrimitiveComponent* InComponent1,struct FName InBoneName1,FVector3 Position1,class UPrimitiveComponent* InComponent2,struct FName InBoneName2,FVector3 Position2);//Engine.RB_Spring.SetComponents
	void Clear();//Engine.RB_Spring.Clear
};
UClass* URB_Spring::pClassPointer = NULL;

//0x00004B (0x0000A4 - 0x000059)
//SVehicleSimBase[0x1030B350]
class USVehicleSimBase : public UActorComponent
{
public:
	unsigned char                                      _0x000059[0x3];                                   		// 0x000059 (0x0003) MISSED OFFSET
	float                                              WheelSuspensionStiffness;                         		// 0x00005C (0x0004)              
	float                                              WheelSuspensionDamping;                           		// 0x000060 (0x0004)              
	float                                              WheelSuspensionBias;                              		// 0x000064 (0x0004)              
	float                                              WheelLongExtremumSlip;                            		// 0x000068 (0x0004)              
	float                                              WheelLongExtremumValue;                           		// 0x00006C (0x0004)              
	float                                              WheelLongAsymptoteSlip;                           		// 0x000070 (0x0004)              
	float                                              WheelLongAsymptoteValue;                          		// 0x000074 (0x0004)              
	float                                              WheelLatExtremumSlip;                             		// 0x000078 (0x0004)              
	float                                              WheelLatExtremumValue;                            		// 0x00007C (0x0004)              
	float                                              WheelLatAsymptoteSlip;                            		// 0x000080 (0x0004)              
	float                                              WheelLatAsymptoteValue;                           		// 0x000084 (0x0004)              
	float                                              WheelInertia;                                     		// 0x000088 (0x0004)              
	unsigned long                                      bWheelSpeedOverride : 1;                          		// 0x00008C (0x0004) [0x00000001] 
	unsigned long                                      bClampedFrictionModel : 1;                        		// 0x00008C (0x0004) [0x00000002] 
	unsigned long                                      bAutoDrive : 1;                                   		// 0x00008C (0x0004) [0x00000004] 
	unsigned long                                      m_bWheelPropertiesDirty : 1;                      		// 0x00008C (0x0004) [0x00000008] 
	float                                              AutoDriveSteer;                                   		// 0x000090 (0x0004)              
	float                                              m_fTorqueMod1;                                    		// 0x000094 (0x0004)              
	float                                              m_fTorqueMod2;                                    		// 0x000098 (0x0004)              
	float                                              m_fTorqueMod3;                                    		// 0x00009C (0x0004)              
	float                                              m_fTorqueMod4;                                    		// 0x0000A0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SVehicleSimBase");
		return pClassPointer;
	};

public:
	float GetLongExtremumSlip();//Engine.SVehicleSimBase.GetLongExtremumSlip
	float GetLongAsymptoteSlip();//Engine.SVehicleSimBase.GetLongAsymptoteSlip
	float GetLatExtremumValue();//Engine.SVehicleSimBase.GetLatExtremumValue
	float GetLongAsymptoteValue();//Engine.SVehicleSimBase.GetLongAsymptoteValue
	float GetLongExtremumValue();//Engine.SVehicleSimBase.GetLongExtremumValue
	float GetLatExtremumSlip();//Engine.SVehicleSimBase.GetLatExtremumSlip
	float GetLatAsymptoteSlip();//Engine.SVehicleSimBase.GetLatAsymptoteSlip
	float GetLatAsymptoteValue();//Engine.SVehicleSimBase.GetLatAsymptoteValue
};
UClass* USVehicleSimBase::pClassPointer = NULL;

//0x000034 (0x0000D8 - 0x0000A4)
//SVehicleSimCar[0x1030B220]
class USVehicleSimCar : public USVehicleSimBase
{
public:
	float                                              ChassisTorqueScale;                               		// 0x0000A4 (0x0004)              
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                               		// 0x0000A8 (0x0010)              
	float                                              SteerAccel;                                       		// 0x0000B8 (0x0004)              
	float                                              ReverseThrottle;                                  		// 0x0000BC (0x0004)              
	float                                              EngineBrakeFactor;                                		// 0x0000C0 (0x0004)              
	float                                              StopThreshold;                                    		// 0x0000C4 (0x0004)              
	unsigned long                                      bIsDriving : 1;                                   		// 0x0000C8 (0x0004) [0x00000001] 
	float                                              ActualSteering;                                   		// 0x0000CC (0x0004)              
	double                                             TimeSinceThrottle;                                		// 0x0000D0 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SVehicleSimCar");
		return pClassPointer;
	};
};
UClass* USVehicleSimCar::pClassPointer = NULL;

//0x000030 (0x000108 - 0x0000D8)
//SVehicleSimTank[0x1030B0F0]
class USVehicleSimTank : public USVehicleSimCar
{
public:
	float                                              LeftTrackVel;                                     		// 0x0000D8 (0x0004)              
	float                                              RightTrackVel;                                    		// 0x0000DC (0x0004)              
	float                                              LeftTrackTorque;                                  		// 0x0000E0 (0x0004)              
	float                                              RightTrackTorque;                                 		// 0x0000E4 (0x0004)              
	float                                              MaxEngineTorque;                                  		// 0x0000E8 (0x0004)              
	float                                              EngineDamping;                                    		// 0x0000EC (0x0004)              
	float                                              InsideTrackTorqueFactor;                          		// 0x0000F0 (0x0004)              
	float                                              SteeringLatStiffnessFactor;                       		// 0x0000F4 (0x0004)              
	float                                              TurnInPlaceThrottle;                              		// 0x0000F8 (0x0004)              
	float                                              TurnMaxGripReduction;                             		// 0x0000FC (0x0004)              
	float                                              TurnGripScaleRate;                                		// 0x000100 (0x0004)              
	unsigned long                                      bTurnInPlaceOnSteer : 1;                          		// 0x000104 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SVehicleSimTank");
		return pClassPointer;
	};
};
UClass* USVehicleSimTank::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cAPBLockedBone[0x1030AFC0]
class UcAPBLockedBone : public UObject
{
public:
	struct FName                                       sBoneName;                                        		// 0x000040 (0x0008)              
	struct FName                                       sRedirectBoneName;                                		// 0x000048 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cAPBLockedBone");
		return pClassPointer;
	};
};
UClass* UcAPBLockedBone::pClassPointer = NULL;

//0x000080 (0x0000C0 - 0x000040)
//PhysicalMaterial[0x1030AE90]
class UPhysicalMaterial : public UObject
{
public:
	int                                                MaterialIndex;                                    		// 0x000040 (0x0004)              
	float                                              Friction;                                         		// 0x000044 (0x0004)              
	float                                              Restitution;                                      		// 0x000048 (0x0004)              
	unsigned long                                      bForceConeFriction : 1;                           		// 0x00004C (0x0004) [0x00000001] 
	unsigned long                                      bEnableAnisotropicFriction : 1;                   		// 0x00004C (0x0004) [0x00000002] 
	unsigned long                                      m_bDestroyGrenades : 1;                           		// 0x00004C (0x0004) [0x00000004] 
	FVector3                                           AnisoFrictionDir;                                 		// 0x000050 (0x000C)              
	float                                              FrictionV;                                        		// 0x00005C (0x0004)              
	float                                              Density;                                          		// 0x000060 (0x0004)              
	float                                              AngularDamping;                                   		// 0x000064 (0x0004)              
	float                                              LinearDamping;                                    		// 0x000068 (0x0004)              
	float                                              MagneticResponse;                                 		// 0x00006C (0x0004)              
	float                                              WindResponse;                                     		// 0x000070 (0x0004)              
	struct FEnumeratedName                             AudioMaterialType;                                		// 0x000074 (0x0010)              
	int                                                AudioMaterialNum;                                 		// 0x000084 (0x0004)              
	struct FString                                     AudioFootstepMaterial;                            		// 0x000088 (0x000C)              
	unsigned char                                      CollisionType;                                    		// 0x000094 (0x0001)              PROPERTY: ECollisionType
	unsigned char                                      ImpactType;                                       		// 0x000095 (0x0001)              PROPERTY: etFXMaterialImpact
	unsigned char                                      _0x000096[0x2];                                   		// 0x000096 (0x0002) MISSED OFFSET
	float                                              ImpactThreshold;                                  		// 0x000098 (0x0004)              
	float                                              ImpactReFireDelay;                                		// 0x00009C (0x0004)              
	class UParticleSystem*                             ImpactEffect;                                     		// 0x0000A0 (0x0004)              
	class USoundCue*                                   ImpactSound;                                      		// 0x0000A4 (0x0004)              
	float                                              SlideThreshold;                                   		// 0x0000A8 (0x0004)              
	float                                              SlideReFireDelay;                                 		// 0x0000AC (0x0004)              
	class UParticleSystem*                             SlideEffect;                                      		// 0x0000B0 (0x0004)              
	class USoundCue*                                   SlideSound;                                       		// 0x0000B4 (0x0004)              
	class UPhysicalMaterial*                           Parent;                                           		// 0x0000B8 (0x0004)              
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                         		// 0x0000BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PhysicalMaterial");
		return pClassPointer;
	};

public:
	int GetAudioMaterialNum();//Engine.PhysicalMaterial.GetAudioMaterialNum
	class UPhysicalMaterialPropertyBase* GetPhysicalMaterialProperty(class UClass* DesiredClass);//Engine.PhysicalMaterial.GetPhysicalMaterialProperty
};
UClass* UPhysicalMaterial::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//PhysicalMaterialPropertyBase[0x1030AD60]
class UPhysicalMaterialPropertyBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		return pClassPointer;
	};
};
UClass* UPhysicalMaterialPropertyBase::pClassPointer = NULL;

//0x000028 (0x000068 - 0x000040)
//PhysicsAsset[0x1030AC30]
class UPhysicsAsset : public UObject
{
public:
	TArray<class URB_BodySetup*>                       BodySetup;                                        		// 0x000040 (0x000C)              
	TArray<class URB_ConstraintSetup*>                 ConstraintSetup;                                  		// 0x00004C (0x000C)              
	class UPhysicsAssetInstance*                       DefaultInstance;                                  		// 0x000058 (0x0004)              
	TArray<class UcAPBLockedBone*>                     LockedBones;                                      		// 0x00005C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PhysicsAsset");
		return pClassPointer;
	};
};
UClass* UPhysicsAsset::pClassPointer = NULL;

//0x000078 (0x0000B8 - 0x000040)
//PhysicsAssetInstance[0x1030AB00]
class UPhysicsAssetInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x000040 (0x0004)              
	int                                                RootBodyIndex;                                    		// 0x000044 (0x0004)              
	TArray<class URB_BodyInstance*>                    Bodies;                                           		// 0x000048 (0x000C)              
	TArray<class URB_ConstraintInstance*>              Constraints;                                      		// 0x000054 (0x000C)              
	struct FMap_Mirror                                 CollisionDisableTable;                            		// 0x000060 (0x003C)              
	float                                              LinearSpringScale;                                		// 0x00009C (0x0004)              
	float                                              LinearDampingScale;                               		// 0x0000A0 (0x0004)              
	float                                              LinearForceLimitScale;                            		// 0x0000A4 (0x0004)              
	float                                              AngularSpringScale;                               		// 0x0000A8 (0x0004)              
	float                                              AngularDampingScale;                              		// 0x0000AC (0x0004)              
	float                                              AngularForceLimitScale;                           		// 0x0000B0 (0x0004)              
	unsigned long                                      bInitBodies : 1;                                  		// 0x0000B4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PhysicsAssetInstance");
		return pClassPointer;
	};

public:
	void SetLinearDriveScale(float InLinearSpringScale,float InLinearDampingScale,float InLinearForceLimitScale);//Engine.PhysicsAssetInstance.SetLinearDriveScale
	void SetNamedMotorsAngularPositionDrive(bool bEnableSwingDrive,bool bEnableTwistDrive,TArray<struct FName> BoneNames,class USkeletalMeshComponent* SkelMeshComp,bool bSetOtherBodiesToComplement);//Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive
	void SetNamedBodiesFixed(bool bNewFixed,TArray<struct FName> BoneNames,class USkeletalMeshComponent* SkelMesh,bool bSetOtherBodiesToComplement);//Engine.PhysicsAssetInstance.SetNamedBodiesFixed
	float GetTotalMassBelowBone(struct FName InBoneName,class UPhysicsAsset* InAsset,class USkeletalMesh* InSkelMesh);//Engine.PhysicsAssetInstance.GetTotalMassBelowBone
	void SetAllBodiesFixed(bool bNewFixed);//Engine.PhysicsAssetInstance.SetAllBodiesFixed
	void SetAllMotorsAngularDriveStrength(float InAngularSpringStrength,float InAngularDampingStrength,float InAngularForceLimitStrength,class USkeletalMeshComponent* SkelMeshComp);//Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveStrength
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive,bool bEnableTwistDrive);//Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive
	void SetAllMotorsAngularDriveParams(float InSpring,float InDamping,float InForceLimit);//Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams
	class URB_ConstraintInstance* FindConstraintInstance(struct FName ConName,class UPhysicsAsset* InAsset);//Engine.PhysicsAssetInstance.FindConstraintInstance
	void SetAngularDriveScale(float InAngularSpringScale,float InAngularDampingScale,float InAngularForceLimitScale);//Engine.PhysicsAssetInstance.SetAngularDriveScale
	void SetNamedRBBoneSprings(bool bEnable,TArray<struct FName> BoneNames,float InBoneLinearSpring,float InBoneAngularSpring,class USkeletalMeshComponent* SkelMeshComp);//Engine.PhysicsAssetInstance.SetNamedRBBoneSprings
	void SetNamedBodiesBlockRigidBody(bool bNewBlockRigidBody,TArray<struct FName> BoneNames,class USkeletalMeshComponent* SkelMesh);//Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody
	void SetFullAnimWeightBonesFixed(bool bNewFixed,class USkeletalMeshComponent* SkelMesh);//Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed
	class URB_BodyInstance* FindBodyInstance(struct FName BodyName,class UPhysicsAsset* InAsset);//Engine.PhysicsAssetInstance.FindBodyInstance
};
UClass* UPhysicsAssetInstance::pClassPointer = NULL;

//0x000008 (0x000048 - 0x000040)
//PhysicsLODVerticalDestructible[0x1030A9D0]
class UPhysicsLODVerticalDestructible : public UObject
{
public:
	int                                                MaxDynamicChunkCount;                             		// 0x000040 (0x0004)              
	float                                              DebrisLifetime;                                   		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PhysicsLODVerticalDestructible");
		return pClassPointer;
	};
};
UClass* UPhysicsLODVerticalDestructible::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//PhysicsLODVerticalEmitter[0x1030A8A0]
class UPhysicsLODVerticalEmitter : public UObject
{
public:
	int                                                ParticlePercentage;                               		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PhysicsLODVerticalEmitter");
		return pClassPointer;
	};
};
UClass* UPhysicsLODVerticalEmitter::pClassPointer = NULL;

//0x0000BC (0x0000FC - 0x000040)
//RB_BodyInstance[0x1030A770]
class URB_BodyInstance : public UObject
{
public:
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x000040 (0x0004)              
	int                                                BodyIndex;                                        		// 0x000044 (0x0004)              
	FVector3                                           Velocity;                                         		// 0x000048 (0x000C)              
	FVector3                                           PreviousVelocity;                                 		// 0x000054 (0x000C)              
	int                                                SceneIndex;                                       		// 0x000060 (0x0004)              
	DWORD                                              BodyData;                                         		// 0x000064 (0x0004)              
	DWORD                                              BoneSpring;                                       		// 0x000068 (0x0004)              
	DWORD                                              BoneSpringKinActor;                               		// 0x00006C (0x0004)              
	unsigned long                                      bEnableBoneSpringLinear : 1;                      		// 0x000070 (0x0004) [0x00000001] 
	unsigned long                                      bEnableBoneSpringAngular : 1;                     		// 0x000070 (0x0004) [0x00000002] 
	unsigned long                                      bDisableOnOverextension : 1;                      		// 0x000070 (0x0004) [0x00000004] 
	unsigned long                                      bNotifyOwnerOnOverextension : 1;                  		// 0x000070 (0x0004) [0x00000008] 
	unsigned long                                      bTeleportOnOverextension : 1;                     		// 0x000070 (0x0004) [0x00000010] 
	unsigned long                                      bUseKinActorForBoneSpring : 1;                    		// 0x000070 (0x0004) [0x00000020] 
	unsigned long                                      bMakeSpringToBaseCollisionComponent : 1;          		// 0x000070 (0x0004) [0x00000040] 
	unsigned long                                      bOnlyCollideWithPawns : 1;                        		// 0x000070 (0x0004) [0x00000080] 
	unsigned long                                      bEnableCollisionResponse : 1;                     		// 0x000070 (0x0004) [0x00000100] 
	unsigned long                                      bPushBody : 1;                                    		// 0x000070 (0x0004) [0x00000200] 
	unsigned long                                      bIsTrigger : 1;                                   		// 0x000070 (0x0004) [0x00000400] 
	float                                              BoneLinearSpring;                                 		// 0x000074 (0x0004)              
	float                                              BoneLinearDamping;                                		// 0x000078 (0x0004)              
	float                                              BoneAngularSpring;                                		// 0x00007C (0x0004)              
	float                                              BoneAngularDamping;                               		// 0x000080 (0x0004)              
	float                                              OverextensionThreshold;                           		// 0x000084 (0x0004)              
	float                                              CustomGravityFactor;                              		// 0x000088 (0x0004)              
	float                                              LastEffectPlayedTime;                             		// 0x00008C (0x0004)              
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x000090 (0x0004)              
	float                                              ContactReportForceThreshold;                      		// 0x000094 (0x0004)              
	unsigned char                                      _0x000098[0x8];                                   		// 0x000098 (0x0008) MISSED OFFSET
	struct FRigidBodyState                             RBAbsorbState;                                    		// 0x0000A0 (0x0040)              
	float                                              fAbsorbRemaining;                                 		// 0x0000E0 (0x0004)              
	struct FsAPBCollision                              APBCollision;                                     		// 0x0000E4 (0x0014)              
	DWORD                                              BodyData_KinematicShadow;                         		// 0x0000F8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_BodyInstance");
		return pClassPointer;
	};

public:
	void SetContactReportForceThreshold(float Threshold);//Engine.RB_BodyInstance.SetContactReportForceThreshold
	void SetBoneSpringParams(float InLinearSpring,float InLinearDamping,float InAngularSpring,float InAngularDamping);//Engine.RB_BodyInstance.SetBoneSpringParams
	void SetAwake(bool bAwake);//Engine.RB_BodyInstance.SetAwake
	FVector3 GetUnrealWorldAngularVelocity();//Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity
	void EnableBoneSpring(bool bInEnableLinear,bool bInEnableAngular,FMatrix* InBoneTarget);//Engine.RB_BodyInstance.EnableBoneSpring
	bool IsValidBodyInstance();//Engine.RB_BodyInstance.IsValidBodyInstance
	FMatrix GetUnrealWorldTM();//Engine.RB_BodyInstance.GetUnrealWorldTM
	void SetIsTrigger(bool bNewIsTrigger);//Engine.RB_BodyInstance.SetIsTrigger
	FVector3 GetUnrealWorldVelocity();//Engine.RB_BodyInstance.GetUnrealWorldVelocity
	void SetAPBCollision(struct FsAPBCollision newAPBCollision);//Engine.RB_BodyInstance.SetAPBCollision
	bool IsFixed();//Engine.RB_BodyInstance.IsFixed
	class UPhysicsAssetInstance* GetPhysicsAssetInstance();//Engine.RB_BodyInstance.GetPhysicsAssetInstance
	void SetGravityResponse(bool bGravityResponse);//Engine.RB_BodyInstance.SetGravityResponse
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);//Engine.RB_BodyInstance.SetPhysMaterialOverride
	void SetFixed(bool bNewFixed);//Engine.RB_BodyInstance.SetFixed
	void SetBoneSpringTarget(FMatrix* InBoneTarget,bool bTeleport);//Engine.RB_BodyInstance.SetBoneSpringTarget
	void EnableCollisionResponse(bool bEnableResponse);//Engine.RB_BodyInstance.EnableCollisionResponse
	void SetBlockRigidBody(bool bNewBlockRigidBody);//Engine.RB_BodyInstance.SetBlockRigidBody
};
UClass* URB_BodyInstance::pClassPointer = NULL;

//0x00006C (0x0000AC - 0x000040)
//RB_ConstraintInstance[0x1030A640]
class URB_ConstraintInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x000040 (0x0004)              
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x000044 (0x0004)              
	int                                                ConstraintIndex;                                  		// 0x000048 (0x0004)              
	int                                                SceneIndex;                                       		// 0x00004C (0x0004)              
	unsigned long                                      bInHardware : 1;                                  		// 0x000050 (0x0004) [0x00000001] 
	unsigned long                                      bLinearXPositionDrive : 1;                        		// 0x000050 (0x0004) [0x00000002] 
	unsigned long                                      bLinearXVelocityDrive : 1;                        		// 0x000050 (0x0004) [0x00000004] 
	unsigned long                                      bLinearYPositionDrive : 1;                        		// 0x000050 (0x0004) [0x00000008] 
	unsigned long                                      bLinearYVelocityDrive : 1;                        		// 0x000050 (0x0004) [0x00000010] 
	unsigned long                                      bLinearZPositionDrive : 1;                        		// 0x000050 (0x0004) [0x00000020] 
	unsigned long                                      bLinearZVelocityDrive : 1;                        		// 0x000050 (0x0004) [0x00000040] 
	unsigned long                                      bSwingPositionDrive : 1;                          		// 0x000050 (0x0004) [0x00000080] 
	unsigned long                                      bSwingVelocityDrive : 1;                          		// 0x000050 (0x0004) [0x00000100] 
	unsigned long                                      bTwistPositionDrive : 1;                          		// 0x000050 (0x0004) [0x00000200] 
	unsigned long                                      bTwistVelocityDrive : 1;                          		// 0x000050 (0x0004) [0x00000400] 
	unsigned long                                      bAngularSlerpDrive : 1;                           		// 0x000050 (0x0004) [0x00000800] 
	unsigned long                                      bTerminated : 1;                                  		// 0x000050 (0x0004) [0x00001000] 
	DWORD                                              ConstraintData;                                   		// 0x000054 (0x0004)              
	FVector3                                           LinearPositionTarget;                             		// 0x000058 (0x000C)              
	FVector3                                           LinearVelocityTarget;                             		// 0x000064 (0x000C)              
	float                                              LinearDriveSpring;                                		// 0x000070 (0x0004)              
	float                                              LinearDriveDamping;                               		// 0x000074 (0x0004)              
	float                                              LinearDriveForceLimit;                            		// 0x000078 (0x0004)              
	unsigned char                                      _0x00007C[0x4];                                   		// 0x00007C (0x0004) MISSED OFFSET
	struct FQuat                                       AngularPositionTarget;                            		// 0x000080 (0x0010)              
	FVector3                                           AngularVelocityTarget;                            		// 0x000090 (0x000C)              
	float                                              AngularDriveSpring;                               		// 0x00009C (0x0004)              
	float                                              AngularDriveDamping;                              		// 0x0000A0 (0x0004)              
	float                                              AngularDriveForceLimit;                           		// 0x0000A4 (0x0004)              
	DWORD                                              DummyKinActor;                                    		// 0x0000A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_ConstraintInstance");
		return pClassPointer;
	};

public:
	void SetLinearDriveParams(float InSpring,float InDamping,float InForceLimit);//Engine.RB_ConstraintInstance.SetLinearDriveParams
	void SetAngularPositionTarget(struct FQuat* InPosTarget);//Engine.RB_ConstraintInstance.SetAngularPositionTarget
	void SetLinearVelocityDrive(bool bEnableXDrive,bool bEnableYDrive,bool bEnableZDrive);//Engine.RB_ConstraintInstance.SetLinearVelocityDrive
	void SetLinearPositionDrive(bool bEnableXDrive,bool bEnableYDrive,bool bEnableZDrive);//Engine.RB_ConstraintInstance.SetLinearPositionDrive
	void MoveKinActorTransform(FMatrix* NewTM);//Engine.RB_ConstraintInstance.MoveKinActorTransform
	void TermConstraint();//Engine.RB_ConstraintInstance.TermConstraint
	void SetAngularVelocityTarget(FVector3 InVelTarget);//Engine.RB_ConstraintInstance.SetAngularVelocityTarget
	void InitConstraint(class UPrimitiveComponent* PrimComp1,class UPrimitiveComponent* PrimComp2,class URB_ConstraintSetup* Setup,float Scale,class AActor* InOwner,class UPrimitiveComponent* InPrimComp,bool bMakeKinForBody1);//Engine.RB_ConstraintInstance.InitConstraint
	void SetLinearLimitSize(float NewLimitSize);//Engine.RB_ConstraintInstance.SetLinearLimitSize
	void SetLinearVelocityTarget(FVector3 InVelTarget);//Engine.RB_ConstraintInstance.SetLinearVelocityTarget
	void SetLinearPositionTarget(FVector3 InPosTarget);//Engine.RB_ConstraintInstance.SetLinearPositionTarget
	void SetAngularDriveParams(float InSpring,float InDamping,float InForceLimit);//Engine.RB_ConstraintInstance.SetAngularDriveParams
	void SetAngularVelocityDrive(bool bEnableSwingDrive,bool bEnableTwistDrive);//Engine.RB_ConstraintInstance.SetAngularVelocityDrive
	class UPhysicsAssetInstance* GetPhysicsAssetInstance();//Engine.RB_ConstraintInstance.GetPhysicsAssetInstance
	void SetAngularPositionDrive(bool bEnableSwingDrive,bool bEnableTwistDrive);//Engine.RB_ConstraintInstance.SetAngularPositionDrive
	FVector3 GetConstraintLocation();//Engine.RB_ConstraintInstance.GetConstraintLocation
	void SetAngularDOFLimitScale(float InSwing1LimitScale,float InSwing2LimitScale,float InTwistLimitScale,class URB_ConstraintSetup* InSetup);//Engine.RB_ConstraintInstance.SetAngularDOFLimitScale
};
UClass* URB_ConstraintInstance::pClassPointer = NULL;

//0x0000CC (0x00010C - 0x000040)
//RB_ConstraintSetup[0x1030A510]
class URB_ConstraintSetup : public UObject
{
public:
	struct FName                                       JointName;                                        		// 0x000040 (0x0008)              
	struct FName                                       ConstraintBone1;                                  		// 0x000048 (0x0008)              
	struct FName                                       ConstraintBone2;                                  		// 0x000050 (0x0008)              
	FVector3                                           Pos1;                                             		// 0x000058 (0x000C)              
	FVector3                                           PriAxis1;                                         		// 0x000064 (0x000C)              
	FVector3                                           SecAxis1;                                         		// 0x000070 (0x000C)              
	struct FName                                       Pos2BaseBone;                                     		// 0x00007C (0x0008)              
	FVector3                                           Pos2;                                             		// 0x000084 (0x000C)              
	FVector3                                           PriAxis2;                                         		// 0x000090 (0x000C)              
	FVector3                                           SecAxis2;                                         		// 0x00009C (0x000C)              
	FVector3                                           PulleyPivot1;                                     		// 0x0000A8 (0x000C)              
	FVector3                                           PulleyPivot2;                                     		// 0x0000B4 (0x000C)              
	unsigned long                                      bEnableProjection : 1;                            		// 0x0000C0 (0x0004) [0x00000001] 
	unsigned long                                      bLinearLimitSoft : 1;                             		// 0x0000C0 (0x0004) [0x00000002] 
	unsigned long                                      bLinearBreakable : 1;                             		// 0x0000C0 (0x0004) [0x00000004] 
	unsigned long                                      bSwingLimited : 1;                                		// 0x0000C0 (0x0004) [0x00000008] 
	unsigned long                                      bTwistLimited : 1;                                		// 0x0000C0 (0x0004) [0x00000010] 
	unsigned long                                      bSwingLimitSoft : 1;                              		// 0x0000C0 (0x0004) [0x00000020] 
	unsigned long                                      bTwistLimitSoft : 1;                              		// 0x0000C0 (0x0004) [0x00000040] 
	unsigned long                                      bAngularBreakable : 1;                            		// 0x0000C0 (0x0004) [0x00000080] 
	unsigned long                                      bIsPulley : 1;                                    		// 0x0000C0 (0x0004) [0x00000100] 
	unsigned long                                      bMaintainMinDistance : 1;                         		// 0x0000C0 (0x0004) [0x00000200] 
	unsigned long                                      bIsAnchor : 1;                                    		// 0x0000C0 (0x0004) [0x00000400] 
	unsigned long                                      bIsFixedWhenAnchored : 1;                         		// 0x0000C0 (0x0004) [0x00000800] 
	struct FLinearDOFSetup                             LinearXSetup;                                     		// 0x0000C4 (0x0008)              
	struct FLinearDOFSetup                             LinearYSetup;                                     		// 0x0000CC (0x0008)              
	struct FLinearDOFSetup                             LinearZSetup;                                     		// 0x0000D4 (0x0008)              
	float                                              LinearLimitStiffness;                             		// 0x0000DC (0x0004)              
	float                                              LinearLimitDamping;                               		// 0x0000E0 (0x0004)              
	float                                              LinearBreakThreshold;                             		// 0x0000E4 (0x0004)              
	float                                              Swing1LimitAngle;                                 		// 0x0000E8 (0x0004)              
	float                                              Swing2LimitAngle;                                 		// 0x0000EC (0x0004)              
	float                                              TwistLimitAngle;                                  		// 0x0000F0 (0x0004)              
	float                                              SwingLimitStiffness;                              		// 0x0000F4 (0x0004)              
	float                                              SwingLimitDamping;                                		// 0x0000F8 (0x0004)              
	float                                              TwistLimitStiffness;                              		// 0x0000FC (0x0004)              
	float                                              TwistLimitDamping;                                		// 0x000100 (0x0004)              
	float                                              AngularBreakThreshold;                            		// 0x000104 (0x0004)              
	float                                              PulleyRatio;                                      		// 0x000108 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_ConstraintSetup");
		return pClassPointer;
	};
};
UClass* URB_ConstraintSetup::pClassPointer = NULL;

//0x000000 (0x00010C - 0x00010C)
//RB_BSJointSetup[0x1030A3E0]
class URB_BSJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_BSJointSetup");
		return pClassPointer;
	};
};
UClass* URB_BSJointSetup::pClassPointer = NULL;

//0x000000 (0x00010C - 0x00010C)
//RB_DistanceJointSetup[0x1030A2B0]
class URB_DistanceJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_DistanceJointSetup");
		return pClassPointer;
	};
};
UClass* URB_DistanceJointSetup::pClassPointer = NULL;

//0x000000 (0x00010C - 0x00010C)
//RB_HingeSetup[0x1030A180]
class URB_HingeSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_HingeSetup");
		return pClassPointer;
	};
};
UClass* URB_HingeSetup::pClassPointer = NULL;

//0x000000 (0x00010C - 0x00010C)
//RB_PrismaticSetup[0x1030A050]
class URB_PrismaticSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_PrismaticSetup");
		return pClassPointer;
	};
};
UClass* URB_PrismaticSetup::pClassPointer = NULL;

//0x000000 (0x00010C - 0x00010C)
//RB_PulleyJointSetup[0x10309F20]
class URB_PulleyJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_PulleyJointSetup");
		return pClassPointer;
	};
};
UClass* URB_PulleyJointSetup::pClassPointer = NULL;

//0x000000 (0x00010C - 0x00010C)
//RB_SkelJointSetup[0x10309DF0]
class URB_SkelJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_SkelJointSetup");
		return pClassPointer;
	};
};
UClass* URB_SkelJointSetup::pClassPointer = NULL;

//0x000000 (0x00010C - 0x00010C)
//RB_StayUprightSetup[0x10309CC0]
class URB_StayUprightSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_StayUprightSetup");
		return pClassPointer;
	};
};
UClass* URB_StayUprightSetup::pClassPointer = NULL;

//0x000104 (0x000150 - 0x00004C)
//SVehicleWheel[0x10309B90]
class USVehicleWheel : public UComponent
{
public:
	float                                              Steer;                                            		// 0x00004C (0x0004)              
	float                                              MotorTorque;                                      		// 0x000050 (0x0004)              
	float                                              BrakeTorque;                                      		// 0x000054 (0x0004)              
	float                                              ChassisTorque;                                    		// 0x000058 (0x0004)              
	unsigned long                                      bPoweredWheel : 1;                                		// 0x00005C (0x0004) [0x00000001] 
	unsigned long                                      bHoverWheel : 1;                                  		// 0x00005C (0x0004) [0x00000002] 
	unsigned long                                      bCollidesVehicles : 1;                            		// 0x00005C (0x0004) [0x00000004] 
	unsigned long                                      bCollidesPawns : 1;                               		// 0x00005C (0x0004) [0x00000008] 
	unsigned long                                      m_bAffectedByHandbrake : 1;                       		// 0x00005C (0x0004) [0x00000010] 
	unsigned long                                      m_bWheelPropertiesDirty : 1;                      		// 0x00005C (0x0004) [0x00000020] 
	unsigned long                                      bIsSquealing : 1;                                 		// 0x00005C (0x0004) [0x00000040] 
	unsigned long                                      bWheelOnGround : 1;                               		// 0x00005C (0x0004) [0x00000080] 
	struct FName                                       m_SuspensionSkelControlName;                      		// 0x000060 (0x0008)              
	struct FName                                       m_OrientationSkelControlName;                     		// 0x000068 (0x0008)              
	FVector3                                           m_vMeshOffset;                                    		// 0x000070 (0x000C)              
	float                                              SteerFactor;                                      		// 0x00007C (0x0004)              
	struct FName                                       SkelControlName;                                  		// 0x000080 (0x0008)              
	class USkelControlWheel*                           WheelControl;                                     		// 0x000088 (0x0004)              
	struct FName                                       BoneName;                                         		// 0x00008C (0x0008)              
	FVector3                                           BoneOffset;                                       		// 0x000094 (0x000C)              
	float                                              WheelRadius;                                      		// 0x0000A0 (0x0004)              
	float                                              SuspensionTravel;                                 		// 0x0000A4 (0x0004)              
	float                                              SuspensionSpeed;                                  		// 0x0000A8 (0x0004)              
	class UParticleSystem*                             WheelParticleSystem;                              		// 0x0000AC (0x0004)              
	unsigned char                                      Side;                                             		// 0x0000B0 (0x0001)              PROPERTY: EWheelSide
	unsigned char                                      _0x0000B1[0x3];                                   		// 0x0000B1 (0x0003) MISSED OFFSET
	float                                              LongSlipFactor;                                   		// 0x0000B4 (0x0004)              
	float                                              LatSlipFactor;                                    		// 0x0000B8 (0x0004)              
	float                                              HandbrakeLongSlipFactor;                          		// 0x0000BC (0x0004)              
	float                                              HandbrakeLatSlipFactor;                           		// 0x0000C0 (0x0004)              
	float                                              ParkedSlipFactor;                                 		// 0x0000C4 (0x0004)              
	FVector3                                           WheelPosition;                                    		// 0x0000C8 (0x000C)              
	float                                              SpinVel;                                          		// 0x0000D4 (0x0004)              
	float                                              LongSlipRatio;                                    		// 0x0000D8 (0x0004)              
	float                                              LatSlipAngle;                                     		// 0x0000DC (0x0004)              
	FVector3                                           ContactNormal;                                    		// 0x0000E0 (0x000C)              
	FVector3                                           LongDirection;                                    		// 0x0000EC (0x000C)              
	FVector3                                           LatDirection;                                     		// 0x0000F8 (0x000C)              
	float                                              ContactForce;                                     		// 0x000104 (0x0004)              
	float                                              LongImpulse;                                      		// 0x000108 (0x0004)              
	float                                              LatImpulse;                                       		// 0x00010C (0x0004)              
	float                                              DesiredSuspensionPosition;                        		// 0x000110 (0x0004)              
	float                                              SuspensionPosition;                               		// 0x000114 (0x0004)              
	float                                              CurrentRotation;                                  		// 0x000118 (0x0004)              
	int                                                ContactAudioMaterial;                             		// 0x00011C (0x0004)              
	int                                                ContactVFXMaterial;                               		// 0x000120 (0x0004)              
	FVector3                                           ContactVFXPoint;                                  		// 0x000124 (0x000C)              
	class UParticleSystemComponent*                    ContactVFXEmitter;                                		// 0x000130 (0x0004)              
	class UParticleSystemComponent*                    ContactVFXEmitterFading;                          		// 0x000134 (0x0004)              
	DWORD                                              WheelShape;                                       		// 0x000138 (0x0004)              
	int                                                WheelMaterialIndex;                               		// 0x00013C (0x0004)              
	class UClass*                                      WheelPSCClass;                                    		// 0x000140 (0x0004)              
	class UParticleSystemComponent*                    WheelParticleComp;                                		// 0x000144 (0x0004)              
	struct FName                                       SlipParticleParamName;                            		// 0x000148 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SVehicleWheel");
		return pClassPointer;
	};

public:
	float GetHandbrakeLongSlipFactor();//Engine.SVehicleWheel.GetHandbrakeLongSlipFactor
	float GetMotorTorque();//Engine.SVehicleWheel.GetMotorTorque
	float GetChassisTorque();//Engine.SVehicleWheel.GetChassisTorque
	float GetSteerValue();//Engine.SVehicleWheel.GetSteerValue
	float GetParkedSlipFactor();//Engine.SVehicleWheel.GetParkedSlipFactor
	float GetLatSlipFactor();//Engine.SVehicleWheel.GetLatSlipFactor
	float GetBrakeTorque();//Engine.SVehicleWheel.GetBrakeTorque
	float GetSuspensionTravel();//Engine.SVehicleWheel.GetSuspensionTravel
	float GetHandbrakeLatSlipFactor();//Engine.SVehicleWheel.GetHandbrakeLatSlipFactor
	float GetLongSlipFactor();//Engine.SVehicleWheel.GetLongSlipFactor
	float GetWheelRadius();//Engine.SVehicleWheel.GetWheelRadius
};
UClass* USVehicleWheel::pClassPointer = NULL;

//0x0000CC (0x000368 - 0x00029C)
//NxGenericForceFieldBrush[0x10309A60]
class ANxGenericForceFieldBrush : public AVolume
{
public:
	int                                                ExcludeChannel;                                   		// 0x00029C (0x0004)              
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0002A0 (0x0004)              
	unsigned char                                      RBChannel;                                        		// 0x0002A4 (0x0001)              PROPERTY: ERBCollisionChannel
	unsigned char                                      Coordinates;                                      		// 0x0002A5 (0x0001)              PROPERTY: FFB_ForceFieldCoordinates
	unsigned char                                      _0x0002A6[0x2];                                   		// 0x0002A6 (0x0002) MISSED OFFSET
	FVector3                                           Constant;                                         		// 0x0002A8 (0x000C)              
	FVector3                                           PositionMultiplierX;                              		// 0x0002B4 (0x000C)              
	FVector3                                           PositionMultiplierY;                              		// 0x0002C0 (0x000C)              
	FVector3                                           PositionMultiplierZ;                              		// 0x0002CC (0x000C)              
	FVector3                                           PositionTarget;                                   		// 0x0002D8 (0x000C)              
	FVector3                                           VelocityMultiplierX;                              		// 0x0002E4 (0x000C)              
	FVector3                                           VelocityMultiplierY;                              		// 0x0002F0 (0x000C)              
	FVector3                                           VelocityMultiplierZ;                              		// 0x0002FC (0x000C)              
	FVector3                                           VelocityTarget;                                   		// 0x000308 (0x000C)              
	FVector3                                           Noise;                                            		// 0x000314 (0x000C)              
	FVector3                                           FalloffLinear;                                    		// 0x000320 (0x000C)              
	FVector3                                           FalloffQuadratic;                                 		// 0x00032C (0x000C)              
	float                                              TorusRadius;                                      		// 0x000338 (0x0004)              
	DWORD                                              ForceField;                                       		// 0x00033C (0x0004)              
	TArray<DWORD>                                      ConvexMeshes;                                     		// 0x000340 (0x000C)              
	TArray<DWORD>                                      ExclusionShapes;                                  		// 0x00034C (0x000C)              
	TArray<DWORD>                                      ExclusionShapePoses;                              		// 0x000358 (0x000C)              
	DWORD                                              LinearKernel;                                     		// 0x000364 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxGenericForceFieldBrush");
		return pClassPointer;
	};

public:
	bool StopsProjectile(class AProjectile* P);//Engine.NxGenericForceFieldBrush.StopsProjectile
	void PostBeginPlay();//Engine.NxGenericForceFieldBrush.PostBeginPlay
};
UClass* ANxGenericForceFieldBrush::pClassPointer = NULL;

//0x000004 (0x0002A0 - 0x00029C)
//RB_ForceFieldExcludeVolume[0x10309930]
class ARB_ForceFieldExcludeVolume : public AVolume
{
public:
	int                                                ForceFieldChannel;                                		// 0x00029C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_ForceFieldExcludeVolume");
		return pClassPointer;
	};
};
UClass* ARB_ForceFieldExcludeVolume::pClassPointer = NULL;

//0x00003C (0x00029C - 0x000260)
//NxForceField[0x10309800]
class ANxForceField : public AActor
{
public:
	int                                                ExcludeChannel;                                   		// 0x000260 (0x0004)              
	unsigned long                                      bForceActive : 1;                                 		// 0x000264 (0x0004) [0x00000001] 
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x000268 (0x0004)              
	unsigned char                                      RBChannel;                                        		// 0x00026C (0x0001)              PROPERTY: ERBCollisionChannel
	unsigned char                                      _0x00026D[0x3];                                   		// 0x00026D (0x0003) MISSED OFFSET
	DWORD                                              ForceField;                                       		// 0x000270 (0x0004)              
	TArray<DWORD>                                      ConvexMeshes;                                     		// 0x000274 (0x000C)              
	TArray<DWORD>                                      ExclusionShapes;                                  		// 0x000280 (0x000C)              
	TArray<DWORD>                                      ExclusionShapePoses;                              		// 0x00028C (0x000C)              
	DWORD                                              U2NRotation;                                      		// 0x000298 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxForceField");
		return pClassPointer;
	};

public:
	bool OnSequenceAction(class USequenceAction* Action);//Engine.NxForceField.OnSequenceAction
	void OnToggle(class USeqAct_Toggle* inAction);//Engine.NxForceField.OnToggle
};
UClass* ANxForceField::pClassPointer = NULL;

//0x00002C (0x0002C8 - 0x00029C)
//NxCylindricalForceField[0x103096D0]
class ANxCylindricalForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x00029C (0x0004)              
	float                                              RotationalStrength;                               		// 0x0002A0 (0x0004)              
	float                                              LiftStrength;                                     		// 0x0002A4 (0x0004)              
	float                                              ForceRadius;                                      		// 0x0002A8 (0x0004)              
	float                                              ForceTopRadius;                                   		// 0x0002AC (0x0004)              
	float                                              LiftFalloffHeight;                                		// 0x0002B0 (0x0004)              
	float                                              EscapeVelocity;                                   		// 0x0002B4 (0x0004)              
	float                                              ForceHeight;                                      		// 0x0002B8 (0x0004)              
	float                                              HeightOffset;                                     		// 0x0002BC (0x0004)              
	unsigned long                                      UseSpecialRadialForce : 1;                        		// 0x0002C0 (0x0004) [0x00000001] 
	DWORD                                              Kernel;                                           		// 0x0002C4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxCylindricalForceField");
		return pClassPointer;
	};
};
UClass* ANxCylindricalForceField::pClassPointer = NULL;

//0x000004 (0x0002CC - 0x0002C8)
//NxCylindricalForceFieldCapsule[0x103095A0]
class ANxCylindricalForceFieldCapsule : public ANxCylindricalForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x0002C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxCylindricalForceFieldCapsule");
		return pClassPointer;
	};
};
UClass* ANxCylindricalForceFieldCapsule::pClassPointer = NULL;

//0x0000B0 (0x00034C - 0x00029C)
//NxForceFieldGeneric[0x10309470]
class ANxForceFieldGeneric : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x00029C (0x0004)              
	class UActorComponent*                             DrawComponent;                                    		// 0x0002A0 (0x0004)              
	float                                              RoughExtentX;                                     		// 0x0002A4 (0x0004)              
	float                                              RoughExtentY;                                     		// 0x0002A8 (0x0004)              
	float                                              RoughExtentZ;                                     		// 0x0002AC (0x0004)              
	unsigned char                                      Coordinates;                                      		// 0x0002B0 (0x0001)              PROPERTY: FFG_ForceFieldCoordinates
	unsigned char                                      _0x0002B1[0x3];                                   		// 0x0002B1 (0x0003) MISSED OFFSET
	FVector3                                           Constant;                                         		// 0x0002B4 (0x000C)              
	FVector3                                           PositionMultiplierX;                              		// 0x0002C0 (0x000C)              
	FVector3                                           PositionMultiplierY;                              		// 0x0002CC (0x000C)              
	FVector3                                           PositionMultiplierZ;                              		// 0x0002D8 (0x000C)              
	FVector3                                           PositionTarget;                                   		// 0x0002E4 (0x000C)              
	FVector3                                           VelocityMultiplierX;                              		// 0x0002F0 (0x000C)              
	FVector3                                           VelocityMultiplierY;                              		// 0x0002FC (0x000C)              
	FVector3                                           VelocityMultiplierZ;                              		// 0x000308 (0x000C)              
	FVector3                                           VelocityTarget;                                   		// 0x000314 (0x000C)              
	FVector3                                           Noise;                                            		// 0x000320 (0x000C)              
	FVector3                                           FalloffLinear;                                    		// 0x00032C (0x000C)              
	FVector3                                           FalloffQuadratic;                                 		// 0x000338 (0x000C)              
	float                                              TorusRadius;                                      		// 0x000344 (0x0004)              
	DWORD                                              LinearKernel;                                     		// 0x000348 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxForceFieldGeneric");
		return pClassPointer;
	};
};
UClass* ANxForceFieldGeneric::pClassPointer = NULL;

//0x00001C (0x0002B8 - 0x00029C)
//NxForceFieldRadial[0x10309340]
class ANxForceFieldRadial : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x00029C (0x0004)              
	class UActorComponent*                             DrawComponent;                                    		// 0x0002A0 (0x0004)              
	float                                              ForceStrength;                                    		// 0x0002A4 (0x0004)              
	float                                              ForceRadius;                                      		// 0x0002A8 (0x0004)              
	float                                              SelfRotationStrength;                             		// 0x0002AC (0x0004)              
	unsigned char                                      ForceFalloff;                                     		// 0x0002B0 (0x0001)              PROPERTY: ERadialImpulseFalloff
	unsigned char                                      _0x0002B1[0x3];                                   		// 0x0002B1 (0x0003) MISSED OFFSET
	DWORD                                              Kernel;                                           		// 0x0002B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxForceFieldRadial");
		return pClassPointer;
	};
};
UClass* ANxForceFieldRadial::pClassPointer = NULL;

//0x000038 (0x0002D4 - 0x00029C)
//NxForceFieldTornado[0x10309210]
class ANxForceFieldTornado : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x00029C (0x0004)              
	class UActorComponent*                             DrawComponent;                                    		// 0x0002A0 (0x0004)              
	float                                              RadialStrength;                                   		// 0x0002A4 (0x0004)              
	float                                              RotationalStrength;                               		// 0x0002A8 (0x0004)              
	float                                              LiftStrength;                                     		// 0x0002AC (0x0004)              
	float                                              ForceRadius;                                      		// 0x0002B0 (0x0004)              
	float                                              ForceTopRadius;                                   		// 0x0002B4 (0x0004)              
	float                                              LiftFalloffHeight;                                		// 0x0002B8 (0x0004)              
	float                                              EscapeVelocity;                                   		// 0x0002BC (0x0004)              
	float                                              ForceHeight;                                      		// 0x0002C0 (0x0004)              
	float                                              HeightOffset;                                     		// 0x0002C4 (0x0004)              
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x0002C8 (0x0004) [0x00000001] 
	float                                              SelfRotationStrength;                             		// 0x0002CC (0x0004)              
	DWORD                                              Kernel;                                           		// 0x0002D0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxForceFieldTornado");
		return pClassPointer;
	};
};
UClass* ANxForceFieldTornado::pClassPointer = NULL;

//0x00009C (0x000338 - 0x00029C)
//NxGenericForceField[0x103090E0]
class ANxGenericForceField : public ANxForceField
{
public:
	unsigned char                                      Coordinates;                                      		// 0x00029C (0x0001)              PROPERTY: FFG_ForceFieldCoordinates
	unsigned char                                      _0x00029D[0x3];                                   		// 0x00029D (0x0003) MISSED OFFSET
	FVector3                                           Constant;                                         		// 0x0002A0 (0x000C)              
	FVector3                                           PositionMultiplierX;                              		// 0x0002AC (0x000C)              
	FVector3                                           PositionMultiplierY;                              		// 0x0002B8 (0x000C)              
	FVector3                                           PositionMultiplierZ;                              		// 0x0002C4 (0x000C)              
	FVector3                                           PositionTarget;                                   		// 0x0002D0 (0x000C)              
	FVector3                                           VelocityMultiplierX;                              		// 0x0002DC (0x000C)              
	FVector3                                           VelocityMultiplierY;                              		// 0x0002E8 (0x000C)              
	FVector3                                           VelocityMultiplierZ;                              		// 0x0002F4 (0x000C)              
	FVector3                                           VelocityTarget;                                   		// 0x000300 (0x000C)              
	FVector3                                           Noise;                                            		// 0x00030C (0x000C)              
	FVector3                                           FalloffLinear;                                    		// 0x000318 (0x000C)              
	FVector3                                           FalloffQuadratic;                                 		// 0x000324 (0x000C)              
	float                                              TorusRadius;                                      		// 0x000330 (0x0004)              
	DWORD                                              LinearKernel;                                     		// 0x000334 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxGenericForceField");
		return pClassPointer;
	};
};
UClass* ANxGenericForceField::pClassPointer = NULL;

//0x000010 (0x000348 - 0x000338)
//NxGenericForceFieldBox[0x10308FB0]
class ANxGenericForceFieldBox : public ANxGenericForceField
{
public:
	class UDrawBoxComponent*                           RenderComponent;                                  		// 0x000338 (0x0004)              
	FVector3                                           BoxExtent;                                        		// 0x00033C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxGenericForceFieldBox");
		return pClassPointer;
	};
};
UClass* ANxGenericForceFieldBox::pClassPointer = NULL;

//0x00000C (0x000344 - 0x000338)
//NxGenericForceFieldCapsule[0x10308E80]
class ANxGenericForceFieldCapsule : public ANxGenericForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x000338 (0x0004)              
	float                                              CapsuleHeight;                                    		// 0x00033C (0x0004)              
	float                                              CapsuleRadius;                                    		// 0x000340 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxGenericForceFieldCapsule");
		return pClassPointer;
	};
};
UClass* ANxGenericForceFieldCapsule::pClassPointer = NULL;

//0x000014 (0x0002B0 - 0x00029C)
//NxRadialForceField[0x10308D50]
class ANxRadialForceField : public ANxForceField
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x00029C (0x0004)              
	float                                              ForceStrength;                                    		// 0x0002A0 (0x0004)              
	float                                              ForceRadius;                                      		// 0x0002A4 (0x0004)              
	unsigned char                                      ForceFalloff;                                     		// 0x0002A8 (0x0001)              PROPERTY: ERadialImpulseFalloff
	unsigned char                                      _0x0002A9[0x3];                                   		// 0x0002A9 (0x0003) MISSED OFFSET
	DWORD                                              LinearKernel;                                     		// 0x0002AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxRadialForceField");
		return pClassPointer;
	};
};
UClass* ANxRadialForceField::pClassPointer = NULL;

//0x000008 (0x0002B8 - 0x0002B0)
//NxRadialCustomForceField[0x10308C20]
class ANxRadialCustomForceField : public ANxRadialForceField
{
public:
	float                                              SelfRotationStrength;                             		// 0x0002B0 (0x0004)              
	DWORD                                              Kernel;                                           		// 0x0002B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxRadialCustomForceField");
		return pClassPointer;
	};
};
UClass* ANxRadialCustomForceField::pClassPointer = NULL;

//0x000030 (0x0002CC - 0x00029C)
//NxTornadoAngularForceField[0x10308AF0]
class ANxTornadoAngularForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x00029C (0x0004)              
	float                                              RotationalStrength;                               		// 0x0002A0 (0x0004)              
	float                                              LiftStrength;                                     		// 0x0002A4 (0x0004)              
	float                                              ForceRadius;                                      		// 0x0002A8 (0x0004)              
	float                                              ForceTopRadius;                                   		// 0x0002AC (0x0004)              
	float                                              LiftFalloffHeight;                                		// 0x0002B0 (0x0004)              
	float                                              EscapeVelocity;                                   		// 0x0002B4 (0x0004)              
	float                                              ForceHeight;                                      		// 0x0002B8 (0x0004)              
	float                                              HeightOffset;                                     		// 0x0002BC (0x0004)              
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x0002C0 (0x0004) [0x00000001] 
	float                                              SelfRotationStrength;                             		// 0x0002C4 (0x0004)              
	DWORD                                              Kernel;                                           		// 0x0002C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxTornadoAngularForceField");
		return pClassPointer;
	};
};
UClass* ANxTornadoAngularForceField::pClassPointer = NULL;

//0x000004 (0x0002D0 - 0x0002CC)
//NxTornadoAngularForceFieldCapsule[0x103089C0]
class ANxTornadoAngularForceFieldCapsule : public ANxTornadoAngularForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x0002CC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxTornadoAngularForceFieldCapsule");
		return pClassPointer;
	};
};
UClass* ANxTornadoAngularForceFieldCapsule::pClassPointer = NULL;

//0x00002C (0x0002C8 - 0x00029C)
//NxTornadoForceField[0x10308890]
class ANxTornadoForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x00029C (0x0004)              
	float                                              RotationalStrength;                               		// 0x0002A0 (0x0004)              
	float                                              LiftStrength;                                     		// 0x0002A4 (0x0004)              
	float                                              ForceRadius;                                      		// 0x0002A8 (0x0004)              
	float                                              ForceTopRadius;                                   		// 0x0002AC (0x0004)              
	float                                              LiftFalloffHeight;                                		// 0x0002B0 (0x0004)              
	float                                              EscapeVelocity;                                   		// 0x0002B4 (0x0004)              
	float                                              ForceHeight;                                      		// 0x0002B8 (0x0004)              
	float                                              HeightOffset;                                     		// 0x0002BC (0x0004)              
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x0002C0 (0x0004) [0x00000001] 
	DWORD                                              Kernel;                                           		// 0x0002C4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxTornadoForceField");
		return pClassPointer;
	};
};
UClass* ANxTornadoForceField::pClassPointer = NULL;

//0x000004 (0x0002CC - 0x0002C8)
//NxTornadoForceFieldCapsule[0x10308760]
class ANxTornadoForceFieldCapsule : public ANxTornadoForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x0002C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NxTornadoForceFieldCapsule");
		return pClassPointer;
	};
};
UClass* ANxTornadoForceFieldCapsule::pClassPointer = NULL;

//0x000030 (0x000290 - 0x000260)
//RB_CylindricalForceActor[0x10308630]
class ARB_CylindricalForceActor : public AActor
{
public:
	class UDrawCylinderComponent*                      RenderComponent;                                  		// 0x000260 (0x0004)              
	float                                              RadialStrength;                                   		// 0x000264 (0x0004)              
	float                                              RotationalStrength;                               		// 0x000268 (0x0004)              
	float                                              LiftStrength;                                     		// 0x00026C (0x0004)              
	float                                              LiftFalloffHeight;                                		// 0x000270 (0x0004)              
	float                                              EscapeVelocity;                                   		// 0x000274 (0x0004)              
	float                                              ForceRadius;                                      		// 0x000278 (0x0004)              
	float                                              ForceTopRadius;                                   		// 0x00027C (0x0004)              
	float                                              ForceHeight;                                      		// 0x000280 (0x0004)              
	float                                              HeightOffset;                                     		// 0x000284 (0x0004)              
	unsigned long                                      bForceActive : 1;                                 		// 0x000288 (0x0004) [0x00000001] 
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x000288 (0x0004) [0x00000002] 
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x000288 (0x0004) [0x00000004] 
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x000288 (0x0004) [0x00000008] 
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x000288 (0x0004) [0x00000010] 
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x00028C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_CylindricalForceActor");
		return pClassPointer;
	};

public:
	bool OnSequenceAction(class USequenceAction* Action);//Engine.RB_CylindricalForceActor.OnSequenceAction
	void OnToggle(class USeqAct_Toggle* inAction);//Engine.RB_CylindricalForceActor.OnToggle
};
UClass* ARB_CylindricalForceActor::pClassPointer = NULL;

//0x000020 (0x000280 - 0x000260)
//RB_RadialForceActor[0x10308500]
class ARB_RadialForceActor : public AActor
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x000260 (0x0004)              
	float                                              ForceStrength;                                    		// 0x000264 (0x0004)              
	float                                              ForceRadius;                                      		// 0x000268 (0x0004)              
	float                                              SwirlStrength;                                    		// 0x00026C (0x0004)              
	float                                              SpinTorque;                                       		// 0x000270 (0x0004)              
	unsigned char                                      ForceFalloff;                                     		// 0x000274 (0x0001)              PROPERTY: ERadialImpulseFalloff
	unsigned char                                      RadialForceMode;                                  		// 0x000275 (0x0001)              PROPERTY: ERadialForceType
	unsigned char                                      _0x000276[0x2];                                   		// 0x000276 (0x0002) MISSED OFFSET
	unsigned long                                      bForceActive : 1;                                 		// 0x000278 (0x0004) [0x00000001] 
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x000278 (0x0004) [0x00000002] 
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x000278 (0x0004) [0x00000004] 
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x000278 (0x0004) [0x00000008] 
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x000278 (0x0004) [0x00000010] 
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x00027C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_RadialForceActor");
		return pClassPointer;
	};

public:
	bool OnSequenceAction(class USequenceAction* Action);//Engine.RB_RadialForceActor.OnSequenceAction
	void OnToggle(class USeqAct_Toggle* inAction);//Engine.RB_RadialForceActor.OnToggle
};
UClass* ARB_RadialForceActor::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//ForceFieldShape[0x103083D0]
class UForceFieldShape : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ForceFieldShape");
		return pClassPointer;
	};

public:
	void FillBySphere(float Radius);//Engine.ForceFieldShape.FillBySphere
	void FillByBox(FVector3 Dimension);//Engine.ForceFieldShape.FillByBox
	class UPrimitiveComponent* GetDrawComponent();//Engine.ForceFieldShape.GetDrawComponent
	void FillByCapsule(float Height,float Radius);//Engine.ForceFieldShape.FillByCapsule
	void FillByCylinder(float BottomRadius,float TopRadius,float Height,float HeightOffset);//Engine.ForceFieldShape.FillByCylinder
};
UClass* UForceFieldShape::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//ForceFieldShapeBox[0x103082A0]
class UForceFieldShapeBox : public UForceFieldShape
{
public:
	class UDrawBoxComponent*                           Shape;                                            		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ForceFieldShapeBox");
		return pClassPointer;
	};

public:
	FVector3 GetRadii();//Engine.ForceFieldShapeBox.GetRadii
	void FillByCylinder(float BottomRadius,float TopRadius,float Height,float HeightOffset);//Engine.ForceFieldShapeBox.FillByCylinder
	void FillByCapsule(float Height,float Radius);//Engine.ForceFieldShapeBox.FillByCapsule
	void FillByBox(FVector3 Extent);//Engine.ForceFieldShapeBox.FillByBox
	class UPrimitiveComponent* GetDrawComponent();//Engine.ForceFieldShapeBox.GetDrawComponent
	void FillBySphere(float Radius);//Engine.ForceFieldShapeBox.FillBySphere
};
UClass* UForceFieldShapeBox::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//ForceFieldShapeCapsule[0x10308170]
class UForceFieldShapeCapsule : public UForceFieldShape
{
public:
	class UDrawCapsuleComponent*                       Shape;                                            		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ForceFieldShapeCapsule");
		return pClassPointer;
	};

public:
	class UPrimitiveComponent* GetDrawComponent();//Engine.ForceFieldShapeCapsule.GetDrawComponent
	void FillByCylinder(float BottomRadius,float TopRadius,float Height,float HeightOffset);//Engine.ForceFieldShapeCapsule.FillByCylinder
	float GetRadius();//Engine.ForceFieldShapeCapsule.GetRadius
	float GetHeight();//Engine.ForceFieldShapeCapsule.GetHeight
	void FillByBox(FVector3 Extent);//Engine.ForceFieldShapeCapsule.FillByBox
	void FillByCapsule(float Height,float Radius);//Engine.ForceFieldShapeCapsule.FillByCapsule
	void FillBySphere(float Radius);//Engine.ForceFieldShapeCapsule.FillBySphere
};
UClass* UForceFieldShapeCapsule::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//ForceFieldShapeSphere[0x10308040]
class UForceFieldShapeSphere : public UForceFieldShape
{
public:
	class UDrawSphereComponent*                        Shape;                                            		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ForceFieldShapeSphere");
		return pClassPointer;
	};

public:
	void FillByCylinder(float BottomRadius,float TopRadius,float Height,float HeightOffset);//Engine.ForceFieldShapeSphere.FillByCylinder
	void FillByCapsule(float Height,float Radius);//Engine.ForceFieldShapeSphere.FillByCapsule
	float GetRadius();//Engine.ForceFieldShapeSphere.GetRadius
	class UPrimitiveComponent* GetDrawComponent();//Engine.ForceFieldShapeSphere.GetDrawComponent
	void FillByBox(FVector3 Extent);//Engine.ForceFieldShapeSphere.FillByBox
	void FillBySphere(float Radius);//Engine.ForceFieldShapeSphere.FillBySphere
};
UClass* UForceFieldShapeSphere::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cDynamicFontData[0x10307F10]
class UcDynamicFontData : public UObject
{
public:
	TArray<unsigned char>                              m_TTFontData;                                     		// 0x000040 (0x000C)              
	int                                                m_nMissingCharacterGlyphIndex;                    		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cDynamicFontData");
		return pClassPointer;
	};
};
UClass* UcDynamicFontData::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cDynamicFontManager[0x10307DE0]
class UcDynamicFontManager : public UObject
{
public:
	TArray<class UcDynamicFont*>                       m_UsedFonts;                                      		// 0x000040 (0x000C)              
	DWORD                                              m_pLibrary;                                       		// 0x00004C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cDynamicFontManager");
		return pClassPointer;
	};
};
UClass* UcDynamicFontManager::pClassPointer = NULL;

//0x0000AC (0x0001CC - 0x000120)
//cDynamicFont[0x10307CB0]
class UcDynamicFont : public UFont
{
public:
	int                                                m_nWidth;                                         		// 0x000120 (0x0004)              
	int                                                m_nHeight;                                        		// 0x000124 (0x0004)              
	int                                                m_nNumTextures;                                   		// 0x000128 (0x0004)              
	int                                                m_nTextureWidth;                                  		// 0x00012C (0x0004)              
	int                                                m_nTextureHeight;                                 		// 0x000130 (0x0004)              
	unsigned long                                      m_bFillCacheWithNumbers : 1;                      		// 0x000134 (0x0004) [0x00000001] 
	unsigned long                                      m_bCreateRGB : 1;                                 		// 0x000134 (0x0004) [0x00000002] 
	int                                                m_nSlotWidth;                                     		// 0x000138 (0x0004)              
	int                                                m_nSlotHeight;                                    		// 0x00013C (0x0004)              
	struct FMap_Mirror                                 m_CacheMap;                                       		// 0x000140 (0x003C)              
	TArray<struct FCacheSlot>                          m_CacheSlots;                                     		// 0x00017C (0x000C)              
	TArray<int>                                        m_CacheQueue;                                     		// 0x000188 (0x000C)              
	TArray<struct FDelayedChar>                        m_DelayedChars;                                   		// 0x000194 (0x000C)              
	DWORD                                              m_pFace;                                          		// 0x0001A0 (0x0004)              
	class UcDynamicFontData*                           m_pDynamicFontData;                               		// 0x0001A4 (0x0004)              
	TArray<DWORD>                                      m_aBatchedElements1;                              		// 0x0001A8 (0x000C)              
	TArray<DWORD>                                      m_aBatchedElements2;                              		// 0x0001B4 (0x000C)              
	DWORD                                              m_pCurBatchedElements;                            		// 0x0001C0 (0x0004)              
	int                                                m_nCurBatchedElement;                             		// 0x0001C4 (0x0004)              
	DWORD                                              m_pUpdatingLock;                                  		// 0x0001C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cDynamicFont");
		return pClassPointer;
	};
};
UClass* UcDynamicFont::pClassPointer = NULL;

//0x0000C0 (0x000320 - 0x000260)
//cActorProxiesManager[0x10307B80]
class AcActorProxiesManager : public AActor
{
public:
	TArray<class UcActorProxy*>                        aAllProxies;                                      		// 0x000260 (0x000C)              
	DWORD                                              pProxiesGrid;                                     		// 0x00026C (0x0004)              
	TArray<class UcActorProxy*>                        aDistanceVisibleProxies;                          		// 0x000270 (0x000C)              
	TArray<class UcActorProxy*>                        aPendingVisibleProxies;                           		// 0x00027C (0x000C)              
	TArray<class UcActorProxy*>                        aNetworkReferencedProxies;                        		// 0x000288 (0x000C)              
	struct FMap_Mirror                                 aUniqueIDToProxy;                                 		// 0x000294 (0x003C)              
	DWORD                                              PackageMap;                                       		// 0x0002D0 (0x0004)              
	struct FStProxiesManagerParams                     stParams;                                         		// 0x0002D4 (0x0018)              
	struct FStProxiesManagerParams                     stParams_replicated;                              		// 0x0002EC (0x0018)              
	FVector3                                           vViewLocation;                                    		// 0x000304 (0x000C)              
	FVector3                                           vViewDirection;                                   		// 0x000310 (0x000C)              
	float                                              fMaxDebugDistance;                                		// 0x00031C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cActorProxiesManager");
		return pClassPointer;
	};

public:
	void SetParameters(struct FStProxiesManagerParams newParams);//Engine.cActorProxiesManager.SetParameters
	void CreateProxy(class AActor* pActor);//Engine.cActorProxiesManager.CreateProxy
	void ReplicatedEvent(struct FName VarName);//Engine.cActorProxiesManager.ReplicatedEvent
};
UClass* AcActorProxiesManager::pClassPointer = NULL;

//0x000070 (0x0000B0 - 0x000040)
//cActorProxy[0x10307A50]
class UcActorProxy : public UObject
{
public:
	class UObject*                                     objArchetype;                                     		// 0x000040 (0x0004)              
	int                                                nUniqueID;                                        		// 0x000044 (0x0004)              
	struct FName                                       instanceName;                                     		// 0x000048 (0x0008)              
	int                                                instanceNetIndex;                                 		// 0x000050 (0x0004)              
	DWORD                                              pInstanceLevel;                                   		// 0x000054 (0x0004)              
	FVector3                                           Location;                                         		// 0x000058 (0x000C)              
	DWORD                                              pCurrentGridCell;                                 		// 0x000064 (0x0004)              
	unsigned char                                      RoleWhenInferred;                                 		// 0x000068 (0x0001)              PROPERTY: ENetRole
	unsigned char                                      _0x000069[0x3];                                   		// 0x000069 (0x0003) MISSED OFFSET
	class UcActorProxy*                                masterProxy;                                      		// 0x00006C (0x0004)              
	TArray<class UcActorProxy*>                        childrenProxies;                                  		// 0x000070 (0x000C)              
	class AActor*                                      spawnedInstance;                                  		// 0x00007C (0x0004)              
	double                                             fTimeFirstVisible;                                		// 0x000080 (0x0008)              
	class AActor*                                      debugActor;                                       		// 0x000088 (0x0004)              
	TArray<struct FStProxyReferencer>                  aReferencers;                                     		// 0x00008C (0x000C)              
	int                                                nCurrentFlags;                                    		// 0x000098 (0x0004)              
	int                                                nCurrentFlags_Children;                           		// 0x00009C (0x0004)              
	struct FString                                     m_ActiveFeatureBuildingName;                      		// 0x0000A0 (0x000C)              
	class AActor*                                      m_ActiveFeatureBuilding;                          		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cActorProxy");
		return pClassPointer;
	};
};
UClass* UcActorProxy::pClassPointer = NULL;

//0x0000B0 (0x000310 - 0x000260)
//PrefabInstance[0x10307920]
class APrefabInstance : public AActor
{
public:
	class UPrefab*                                     TemplatePrefab;                                   		// 0x000260 (0x0004)              
	int                                                TemplateVersion;                                  		// 0x000264 (0x0004)              
	unsigned char                                      ScalingRule;                                      		// 0x000268 (0x0001)              PROPERTY: EScalingRule
	unsigned char                                      PrefabInstanceState;                              		// 0x000269 (0x0001)              PROPERTY: EPrefabInstanceState
	unsigned char                                      _0x00026A[0x2];                                   		// 0x00026A (0x0002) MISSED OFFSET
	unsigned char                                      ArchetypeToInstanceMap[0x3C];                     		// 0x00026C (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      ArchetypeToInstanceIndexMap[0x3C];                		// 0x0002A8 (0x003C)              UNKNOWN PROPERTY: MapProperty
	class UPrefabSequence*                             SequenceInstance;                                 		// 0x0002E4 (0x0004)              
	int                                                PI_PackageVersion;                                		// 0x0002E8 (0x0004)              
	int                                                PI_LicenseePackageVersion;                        		// 0x0002EC (0x0004)              
	struct FString                                     m_ActiveFeatureBuildingName;                      		// 0x0002F0 (0x000C)              
	class AActor*                                      m_ActiveFeatureBuilding;                          		// 0x0002FC (0x0004)              
	unsigned long                                      m_isPooled : 1;                                   		// 0x000300 (0x0004) [0x00000001] 
	TArray<class UObject*>                             PI_ReplacementObjects;                            		// 0x000304 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PrefabInstance");
		return pClassPointer;
	};

public:
	void InstancePrefab(class UPrefab* InPrefab,TArray<struct FstReplacement> aReplacements);//Engine.PrefabInstance.InstancePrefab
};
UClass* APrefabInstance::pClassPointer = NULL;

//0x000068 (0x0000A8 - 0x000040)
//cVisualFXBase[0x103077F0]
class UcVisualFXBase : public UObject
{
public:
	class UcVisualFXComponent*                         m_pComponent;                                     		// 0x000040 (0x0004)              
	class AActor*                                      m_pAttachTarget;                                  		// 0x000044 (0x0004)              
	class USkeletalMeshComponent*                      m_pAttachComponent;                               		// 0x000048 (0x0004)              
	struct FName                                       m_AttachBoneName;                                 		// 0x00004C (0x0008)              
	class USkeletalMeshSocket*                         m_pAttachSocket;                                  		// 0x000054 (0x0004)              
	unsigned long                                      m_bIsReleasable : 1;                              		// 0x000058 (0x0004) [0x00000001] 
	class UClass*                                      m_pDefaultEmitterClass;                           		// 0x00005C (0x0004)              
	struct FLookupMap_Mirror                           m_AvailableEvents;                                		// 0x000060 (0x0048)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cVisualFXBase");
		return pClassPointer;
	};

public:
	void OnSpawnedParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);//Engine.cVisualFXBase.OnSpawnedParticleSystemFinished
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);//Engine.cVisualFXBase.OnParticleSystemFinished
};
UClass* UcVisualFXBase::pClassPointer = NULL;

//0x00001C (0x00005C - 0x000040)
//Prefab[0x103076C0]
class UPrefab : public UObject
{
public:
	int                                                PrefabVersion;                                    		// 0x000040 (0x0004)              
	TArray<class UObject*>                             PrefabArchetypes;                                 		// 0x000044 (0x000C)              
	unsigned char                                      ScalingRule;                                      		// 0x000050 (0x0001)              PROPERTY: EScalingRule
	unsigned char                                      _0x000051[0x3];                                   		// 0x000051 (0x0003) MISSED OFFSET
	class APrefabInstance*                             PrefabInstanceArchetype;                          		// 0x000054 (0x0004)              
	class UPrefabSequence*                             PrefabSequence;                                   		// 0x000058 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Prefab");
		return pClassPointer;
	};
};
UClass* UPrefab::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//cSocketAttachment[0x10307590]
class UcSocketAttachment : public UObject
{
public:
	class AActor*                                      LinkedActor;                                      		// 0x000040 (0x0004)              
	class USkeletalMeshComponent*                      LinkedSkeletalMeshComponent;                      		// 0x000044 (0x0004)              
	struct FName                                       LinkedBone;                                       		// 0x000048 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cSocketAttachment");
		return pClassPointer;
	};

public:
	void InitSocket(class AActor* newLinkedActor,class USkeletalMeshComponent* newSkelComp,struct FName newLinkedBone);//Engine.cSocketAttachment.InitSocket
};
UClass* UcSocketAttachment::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//SequenceObject[0x10307460]
class USequenceObject : public UObject
{
public:
	int                                                ObjInstanceVersion;                               		// 0x000040 (0x0004)              
	class USequence*                                   ParentSequence;                                   		// 0x000044 (0x0004)              
	unsigned long                                      bDeletable : 1;                                   		// 0x000048 (0x0004) [0x00000001] 
	unsigned long                                      bDrawFirst : 1;                                   		// 0x000048 (0x0004) [0x00000002] 
	unsigned long                                      bDrawLast : 1;                                    		// 0x000048 (0x0004) [0x00000004] 
	unsigned long                                      bOutputObjCommentToScreen : 1;                    		// 0x000048 (0x0004) [0x00000008] 
	unsigned long                                      bSuppressAutoComment : 1;                         		// 0x000048 (0x0004) [0x00000010] 
	int                                                DrawWidth;                                        		// 0x00004C (0x0004)              
	int                                                DrawHeight;                                       		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SequenceObject");
		return pClassPointer;
	};

public:
	bool IsPastingIntoUISequenceAllowed();//Engine.SequenceObject.IsPastingIntoUISequenceAllowed
	void ScriptLog(struct FString LogText,bool bWarning);//Engine.SequenceObject.ScriptLog
	bool IsValidLevelSequenceObject();//Engine.SequenceObject.IsValidLevelSequenceObject
	bool IsPastingIntoLevelSequenceAllowed();//Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed
	int GetObjClassVersion();//Engine.SequenceObject.GetObjClassVersion
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SequenceObject.IsValidUISequenceObject
	class AWorldInfo* GetWorldInfo();//Engine.SequenceObject.GetWorldInfo
};
UClass* USequenceObject::pClassPointer = NULL;

//0x000020 (0x000074 - 0x000054)
//SequenceFrame[0x10307330]
class USequenceFrame : public USequenceObject
{
public:
	int                                                SizeX;                                            		// 0x000054 (0x0004)              
	int                                                SizeY;                                            		// 0x000058 (0x0004)              
	int                                                BorderWidth;                                      		// 0x00005C (0x0004)              
	unsigned long                                      bDrawBox : 1;                                     		// 0x000060 (0x0004) [0x00000001] 
	unsigned long                                      bFilled : 1;                                      		// 0x000060 (0x0004) [0x00000002] 
	unsigned long                                      bTileFill : 1;                                    		// 0x000060 (0x0004) [0x00000004] 
	DWORD                                              BorderColor;                                      		// 0x000064 (0x0004)              
	DWORD                                              FillColor;                                        		// 0x000068 (0x0004)              
	class UTexture2D*                                  FillTexture;                                      		// 0x00006C (0x0004)              
	class UMaterial*                                   FillMaterial;                                     		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SequenceFrame");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SequenceFrame.IsValidUISequenceObject
};
UClass* USequenceFrame::pClassPointer = NULL;

//0x000000 (0x000074 - 0x000074)
//SequenceFrameWrapped[0x10307200]
class USequenceFrameWrapped : public USequenceFrame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SequenceFrameWrapped");
		return pClassPointer;
	};
};
UClass* USequenceFrameWrapped::pClassPointer = NULL;

//0x000040 (0x000094 - 0x000054)
//SequenceOp[0x103070D0]
class USequenceOp : public USequenceObject
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x000054 (0x0004) [0x00000001] 
	unsigned long                                      bLatentExecution : 1;                             		// 0x000054 (0x0004) [0x00000002] 
	unsigned long                                      bAutoActivateOutputLinks : 1;                     		// 0x000054 (0x0004) [0x00000004] 
	TArray<struct FSeqOpInputLink>                     InputLinks;                                       		// 0x000058 (0x000C)              
	TArray<struct FSeqOpOutputLink>                    OutputLinks;                                      		// 0x000064 (0x000C)              
	TArray<struct FSeqVarLink>                         VariableLinks;                                    		// 0x000070 (0x000C)              
	TArray<struct FSeqEventLink>                       EventLinks;                                       		// 0x00007C (0x000C)              
	int                                                PlayerIndex;                                      		// 0x000088 (0x0004)              
	int                                                ActivateCount;                                    		// 0x00008C (0x0004)              
	int                                                SearchTag;                                        		// 0x000090 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SequenceOp");
		return pClassPointer;
	};

public:
	bool HasLinkedOps(bool bConsiderInputLinks);//Engine.SequenceOp.HasLinkedOps
	void Deactivated();//Engine.SequenceOp.Deactivated
	void Activated();//Engine.SequenceOp.Activated
	void GetInterpDataVars(TArray<class UInterpData*>* outIData,struct FString inDesc);//Engine.SequenceOp.GetInterpDataVars
	void Reset();//Engine.SequenceOp.Reset
	class AController* GetController(class AActor* TheActor);//Engine.SequenceOp.GetController
	void VersionUpdated(int OldVersion,int NewVersion);//Engine.SequenceOp.VersionUpdated
	void PopulateLinkedVariableValues();//Engine.SequenceOp.PopulateLinkedVariableValues
	void PublishLinkedVariableValues();//Engine.SequenceOp.PublishLinkedVariableValues
	void GetLinkedObjects(TArray<class USequenceObject*>* out_Objects,class UClass* ObjectType,bool bRecurse);//Engine.SequenceOp.GetLinkedObjects
	void GetObjectVars(TArray<class UObject*>* objVars,struct FString inDesc);//Engine.SequenceOp.GetObjectVars
	class APawn* GetPawn(class AActor* TheActor);//Engine.SequenceOp.GetPawn
	void GetBoolVars(TArray<unsigned char>* boolVars,struct FString inDesc);//Engine.SequenceOp.GetBoolVars
	bool ActivateOutputLink(int OutputIdx);//Engine.SequenceOp.ActivateOutputLink
	void LinkedVariables(class UClass* VarClass,class USequenceVariable** OutVariable,struct FString inDesc);//Engine.SequenceOp.LinkedVariables
};
UClass* USequenceOp::pClassPointer = NULL;

//0x000054 (0x0000E8 - 0x000094)
//Sequence[0x10306FA0]
class USequence : public USequenceOp
{
public:
	DWORD                                              LogFile;                                          		// 0x000094 (0x0004)              
	TArray<class USequenceObject*>                     SequenceObjects;                                  		// 0x000098 (0x000C)              
	TArray<class USequenceOp*>                         ActiveSequenceOps;                                		// 0x0000A4 (0x000C)              
	TArray<class USequence*>                           NestedSequences;                                  		// 0x0000B0 (0x000C)              
	TArray<class USequenceEvent*>                      UnregisteredEvents;                               		// 0x0000BC (0x000C)              
	TArray<struct FActivateOp>                         DelayedActivatedOps;                              		// 0x0000C8 (0x000C)              
	unsigned long                                      bEnabled : 1;                                     		// 0x0000D4 (0x0004) [0x00000001] 
	int                                                DefaultViewX;                                     		// 0x0000D8 (0x0004)              
	int                                                DefaultViewY;                                     		// 0x0000DC (0x0004)              
	float                                              DefaultViewZoom;                                  		// 0x0000E0 (0x0004)              
	class UcVisualFXComponent*                         VFXComponentOwner;                                		// 0x0000E4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Sequence");
		return pClassPointer;
	};

public:
	void FindSeqObjectsByClass(class UClass* DesiredClass,bool bRecursive,TArray<class USequenceObject*>* OutputObjects);//Engine.Sequence.FindSeqObjectsByClass
	void SetEnabled(bool bInEnabled);//Engine.Sequence.SetEnabled
	void Reset();//Engine.Sequence.Reset
};
UClass* USequence::pClassPointer = NULL;

//0x000004 (0x0000EC - 0x0000E8)
//PrefabSequence[0x10306E70]
class UPrefabSequence : public USequence
{
public:
	class APrefabInstance*                             OwnerPrefab;                                      		// 0x0000E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PrefabSequence");
		return pClassPointer;
	};

public:
	class APrefabInstance* GetOwnerPrefab();//Engine.PrefabSequence.GetOwnerPrefab
	void SetOwnerPrefab(class APrefabInstance* InOwner);//Engine.PrefabSequence.SetOwnerPrefab
};
UClass* UPrefabSequence::pClassPointer = NULL;

//0x000000 (0x0000E8 - 0x0000E8)
//PrefabSequenceContainer[0x10306D40]
class UPrefabSequenceContainer : public USequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PrefabSequenceContainer");
		return pClassPointer;
	};
};
UClass* UPrefabSequenceContainer::pClassPointer = NULL;

//0x000018 (0x0000AC - 0x000094)
//SequenceAction[0x10306C10]
class USequenceAction : public USequenceOp
{
public:
	struct FName                                       HandlerName;                                      		// 0x000094 (0x0008)              
	unsigned long                                      bCallHandler : 1;                                 		// 0x00009C (0x0004) [0x00000001] 
	TArray<class UObject*>                             Targets;                                          		// 0x0000A0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SequenceAction");
		return pClassPointer;
	};
};
UClass* USequenceAction::pClassPointer = NULL;

//0x000018 (0x0000C4 - 0x0000AC)
//cSeqAct_GetSockets[0x10306AE0]
class UcSeqAct_GetSockets : public USequenceAction
{
public:
	struct FString                                     SocketsSubName;                                   		// 0x0000AC (0x000C)              
	TArray<class UcSocketAttachment*>                  Sockets;                                          		// 0x0000B8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cSeqAct_GetSockets");
		return pClassPointer;
	};
};
UClass* UcSeqAct_GetSockets::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_ActivateRemoteEvent[0x103069B0]
class USeqAct_ActivateRemoteEvent : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x0000AC (0x0004)              
	struct FName                                       EventName;                                        		// 0x0000B0 (0x0008)              
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0000B8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ActivateRemoteEvent");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion
};
UClass* USeqAct_ActivateRemoteEvent::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//SeqAct_ApplySoundNode[0x10306880]
class USeqAct_ApplySoundNode : public USequenceAction
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x0000AC (0x0004)              
	class USoundNode*                                  ApplyNode;                                        		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ApplySoundNode");
		return pClassPointer;
	};
};
UClass* USeqAct_ApplySoundNode::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_AttachToEvent[0x10306750]
class USeqAct_AttachToEvent : public USequenceAction
{
public:
	unsigned long                                      bPreferController : 1;                            		// 0x0000AC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_AttachToEvent");
		return pClassPointer;
	};
};
UClass* USeqAct_AttachToEvent::pClassPointer = NULL;

//0x000024 (0x0000D0 - 0x0000AC)
//SeqAct_CameraFade[0x10306620]
class USeqAct_CameraFade : public USequenceAction
{
public:
	DWORD                                              FadeColor;                                        		// 0x0000AC (0x0004)              
	FVector2                                           FadeAlpha;                                        		// 0x0000B0 (0x0008)              
	float                                              FadeTime;                                         		// 0x0000B8 (0x0004)              
	unsigned long                                      bPersistFade : 1;                                 		// 0x0000BC (0x0004) [0x00000001] 
	float                                              FadeTimeRemaining;                                		// 0x0000C0 (0x0004)              
	TArray<class ACamera*>                             CachedCameras;                                    		// 0x0000C4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_CameraFade");
		return pClassPointer;
	};
};
UClass* USeqAct_CameraFade::pClassPointer = NULL;

//0x000034 (0x0000E0 - 0x0000AC)
//SeqAct_CameraLookAt[0x103064F0]
class USeqAct_CameraLookAt : public USequenceAction
{
public:
	unsigned long                                      bAffectCamera : 1;                                		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bAlwaysFocus : 1;                                 		// 0x0000AC (0x0004) [0x00000002] 
	unsigned long                                      bAdjustCamera : 1;                                		// 0x0000AC (0x0004) [0x00000004] 
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x0000AC (0x0004) [0x00000008] 
	unsigned long                                      bIgnoreTrace : 1;                                 		// 0x0000AC (0x0004) [0x00000010] 
	unsigned long                                      bAffectHead : 1;                                  		// 0x0000AC (0x0004) [0x00000020] 
	unsigned long                                      bToggleGodMode : 1;                               		// 0x0000AC (0x0004) [0x00000040] 
	unsigned long                                      bLeaveCameraRotation : 1;                         		// 0x0000AC (0x0004) [0x00000080] 
	unsigned long                                      bDisableInput : 1;                                		// 0x0000AC (0x0004) [0x00000100] 
	unsigned long                                      bUsedTimer : 1;                                   		// 0x0000AC (0x0004) [0x00000200] 
	unsigned long                                      bCheckLineOfSight : 1;                            		// 0x0000AC (0x0004) [0x00000400] 
	FVector2                                           InterpSpeedRange;                                 		// 0x0000B0 (0x0008)              
	FVector2                                           InFocusFOV;                                       		// 0x0000B8 (0x0008)              
	struct FName                                       FocusBoneName;                                    		// 0x0000C0 (0x0008)              
	struct FString                                     TextDisplay;                                      		// 0x0000C8 (0x000C)              
	float                                              TotalTime;                                        		// 0x0000D4 (0x0004)              
	float                                              CameraFOV;                                        		// 0x0000D8 (0x0004)              
	float                                              RemainingTime;                                    		// 0x0000DC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_CameraLookAt");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_CameraLookAt.GetObjClassVersion
};
UClass* USeqAct_CameraLookAt::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_CauseDamage[0x103063C0]
class USeqAct_CauseDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x0000AC (0x0004)              
	float                                              Momentum;                                         		// 0x0000B0 (0x0004)              
	float                                              DamageAmount;                                     		// 0x0000B4 (0x0004)              
	class AActor*                                      Instigator;                                       		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_CauseDamage");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_CauseDamage.GetObjClassVersion
};
UClass* USeqAct_CauseDamage::pClassPointer = NULL;

//0x000018 (0x0000C4 - 0x0000AC)
//SeqAct_CauseDamageRadial[0x10306290]
class USeqAct_CauseDamageRadial : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x0000AC (0x0004)              
	float                                              Momentum;                                         		// 0x0000B0 (0x0004)              
	float                                              DamageAmount;                                     		// 0x0000B4 (0x0004)              
	float                                              DamageRadius;                                     		// 0x0000B8 (0x0004)              
	unsigned long                                      bDamageFalloff : 1;                               		// 0x0000BC (0x0004) [0x00000001] 
	class AActor*                                      Instigator;                                       		// 0x0000C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_CauseDamageRadial");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_CauseDamageRadial.GetObjClassVersion
};
UClass* USeqAct_CauseDamageRadial::pClassPointer = NULL;

//0x000005 (0x0000B1 - 0x0000AC)
//SeqAct_ChangeCollision[0x10306160]
class USeqAct_ChangeCollision : public USequenceAction
{
public:
	unsigned long                                      bCollideActors : 1;                               		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bBlockActors : 1;                                 		// 0x0000AC (0x0004) [0x00000002] 
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x0000AC (0x0004) [0x00000004] 
	unsigned char                                      CollisionType;                                    		// 0x0000B0 (0x0001)              PROPERTY: ECollisionType

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ChangeCollision");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_ChangeCollision.GetObjClassVersion
};
UClass* USeqAct_ChangeCollision::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_CommitMapChange[0x10306030]
class USeqAct_CommitMapChange : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_CommitMapChange");
		return pClassPointer;
	};
};
UClass* USeqAct_CommitMapChange::pClassPointer = NULL;

//0x00000C (0x0000B8 - 0x0000AC)
//SeqAct_FinishSequence[0x10305F00]
class USeqAct_FinishSequence : public USequenceAction
{
public:
	struct FString                                     OutputLabel;                                      		// 0x0000AC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_FinishSequence");
		return pClassPointer;
	};
};
UClass* USeqAct_FinishSequence::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//SeqAct_Gate[0x10305DD0]
class USeqAct_Gate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x0000AC (0x0004) [0x00000001] 
	int                                                AutoCloseCount;                                   		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Gate");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_Gate.IsValidUISequenceObject
};
UClass* USeqAct_Gate::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_GetDistance[0x10305CA0]
class USeqAct_GetDistance : public USequenceAction
{
public:
	float                                              Distance;                                         		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_GetDistance");
		return pClassPointer;
	};
};
UClass* USeqAct_GetDistance::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//SeqAct_GetProperty[0x10305B70]
class USeqAct_GetProperty : public USequenceAction
{
public:
	struct FName                                       PropertyName;                                     		// 0x0000AC (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_GetProperty");
		return pClassPointer;
	};
};
UClass* USeqAct_GetProperty::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_GetVelocity[0x10305A40]
class USeqAct_GetVelocity : public USequenceAction
{
public:
	float                                              Velocity;                                         		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_GetVelocity");
		return pClassPointer;
	};
};
UClass* USeqAct_GetVelocity::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_IsInObjectList[0x10305910]
class USeqAct_IsInObjectList : public USequenceAction
{
public:
	unsigned long                                      bCheckForAllObjects : 1;                          		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bObjectFound : 1;                                 		// 0x0000AC (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_IsInObjectList");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_IsInObjectList.IsValidUISequenceObject
};
UClass* USeqAct_IsInObjectList::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_Latent[0x103057E0]
class USeqAct_Latent : public USequenceAction
{
public:
	TArray<class AActor*>                              LatentActors;                                     		// 0x0000AC (0x000C)              
	unsigned long                                      bAborted : 1;                                     		// 0x0000B8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Latent");
		return pClassPointer;
	};

public:
	void AbortFor(class AActor* latentActor);//Engine.SeqAct_Latent.AbortFor
	bool Update(float DeltaTime);//Engine.SeqAct_Latent.Update
};
UClass* USeqAct_Latent::pClassPointer = NULL;

//0x000044 (0x000100 - 0x0000BC)
//SeqAct_ActorFactory[0x103056B0]
class USeqAct_ActorFactory : public USeqAct_Latent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0000BC (0x0004) [0x00000001] 
	unsigned long                                      bIsSpawning : 1;                                  		// 0x0000BC (0x0004) [0x00000002] 
	unsigned long                                      bAttachToSpawnPoint : 1;                          		// 0x0000BC (0x0004) [0x00000004] 
	unsigned long                                      bCheckSpawnCollision : 1;                         		// 0x0000BC (0x0004) [0x00000008] 
	class UActorFactory*                               Factory;                                          		// 0x0000C0 (0x0004)              
	unsigned char                                      PointSelection;                                   		// 0x0000C4 (0x0001)              PROPERTY: EPointSelection
	unsigned char                                      _0x0000C5[0x3];                                   		// 0x0000C5 (0x0003) MISSED OFFSET
	TArray<class UObject*>                             SpawnPoints;                                      		// 0x0000C8 (0x000C)              
	TArray<FVector3>                                   SpawnLocations;                                   		// 0x0000D4 (0x000C)              
	TArray<FVector3>                                   SpawnOrientations;                                		// 0x0000E0 (0x000C)              
	int                                                SpawnCount;                                       		// 0x0000EC (0x0004)              
	float                                              SpawnDelay;                                       		// 0x0000F0 (0x0004)              
	int                                                LastSpawnIdx;                                     		// 0x0000F4 (0x0004)              
	int                                                SpawnedCount;                                     		// 0x0000F8 (0x0004)              
	float                                              RemainingDelay;                                   		// 0x0000FC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ActorFactory");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_ActorFactory.GetObjClassVersion
};
UClass* USeqAct_ActorFactory::pClassPointer = NULL;

//0x000000 (0x000100 - 0x000100)
//SeqAct_ActorFactoryEx[0x10305580]
class USeqAct_ActorFactoryEx : public USeqAct_ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ActorFactoryEx");
		return pClassPointer;
	};
};
UClass* USeqAct_ActorFactoryEx::pClassPointer = NULL;

//0x000004 (0x0000C0 - 0x0000BC)
//SeqAct_AIMoveToActor[0x10305450]
class USeqAct_AIMoveToActor : public USeqAct_Latent
{
public:
	unsigned long                                      bInterruptable : 1;                               		// 0x0000BC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_AIMoveToActor");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_AIMoveToActor.GetObjClassVersion
};
UClass* USeqAct_AIMoveToActor::pClassPointer = NULL;

//0x000048 (0x000104 - 0x0000BC)
//SeqAct_CrossFadeMusicTracks[0x10305320]
class USeqAct_CrossFadeMusicTracks : public USeqAct_Latent
{
public:
	struct FName                                       TrackBankName;                                    		// 0x0000BC (0x0008)              
	struct FName                                       CurrTrackType;                                    		// 0x0000C4 (0x0008)              
	class UAudioComponent*                             CurrPlayingTrack;                                 		// 0x0000CC (0x0004)              
	float                                              AdjustVolumeDuration;                             		// 0x0000D0 (0x0004)              
	float                                              AdjustVolumeLevel;                                		// 0x0000D4 (0x0004)              
	double                                             NextTrackToPlayAt;                                		// 0x0000D8 (0x0008)              
	struct FMusicTrackStruct                           NextTrackToPlay;                                  		// 0x0000E0 (0x0024)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_CrossFadeMusicTracks");
		return pClassPointer;
	};

public:
	void CrossFadeTrack(struct FMusicTrackStruct* TrackToPlay);//Engine.SeqAct_CrossFadeMusicTracks.CrossFadeTrack
	void StopAllMusicManagerSounds();//Engine.SeqAct_CrossFadeMusicTracks.StopAllMusicManagerSounds
	void ClientSideCrossFadeTrackImmediately(struct FMusicTrackStruct* TrackToPlay);//Engine.SeqAct_CrossFadeMusicTracks.ClientSideCrossFadeTrackImmediately
	int GetObjClassVersion();//Engine.SeqAct_CrossFadeMusicTracks.GetObjClassVersion
};
UClass* USeqAct_CrossFadeMusicTracks::pClassPointer = NULL;

//0x000118 (0x0001D4 - 0x0000BC)
//SeqAct_CrowdSpawner[0x103051F0]
class USeqAct_CrowdSpawner : public USeqAct_Latent
{
public:
	unsigned long                                      bSpawningActive : 1;                              		// 0x0000BC (0x0004) [0x00000001] 
	unsigned long                                      bConformToBSP : 1;                                		// 0x0000BC (0x0004) [0x00000002] 
	unsigned long                                      bConformToWorld : 1;                              		// 0x0000BC (0x0004) [0x00000004] 
	unsigned long                                      bSpawnAtEdge : 1;                                 		// 0x0000BC (0x0004) [0x00000008] 
	unsigned long                                      bDrawDebugInfo : 1;                               		// 0x0000BC (0x0004) [0x00000010] 
	float                                              SpawnRate;                                        		// 0x0000C0 (0x0004)              
	int                                                SpawnNum;                                         		// 0x0000C4 (0x0004)              
	float                                              Radius;                                           		// 0x0000C8 (0x0004)              
	float                                              Remainder;                                        		// 0x0000CC (0x0004)              
	class UClass*                                      AgentClass;                                       		// 0x0000D0 (0x0004)              
	float                                              AwareRadius;                                      		// 0x0000D4 (0x0004)              
	float                                              AvoidOtherStrength;                               		// 0x0000D8 (0x0004)              
	float                                              AvoidOtherRadius;                                 		// 0x0000DC (0x0004)              
	float                                              MatchVelStrength;                                 		// 0x0000E0 (0x0004)              
	float                                              ToPathStrength;                                   		// 0x0000E4 (0x0004)              
	float                                              FollowPathStrength;                               		// 0x0000E8 (0x0004)              
	float                                              PathDistance;                                     		// 0x0000EC (0x0004)              
	float                                              ToAttractorStrength;                              		// 0x0000F0 (0x0004)              
	float                                              MinVelDamping;                                    		// 0x0000F4 (0x0004)              
	float                                              MaxVelDamping;                                    		// 0x0000F8 (0x0004)              
	struct FRawDistributionFloat                       ActionDuration;                                   		// 0x0000FC (0x001C)              
	struct FRawDistributionFloat                       ActionInterval;                                   		// 0x000118 (0x001C)              
	struct FRawDistributionFloat                       TargetActionInterval;                             		// 0x000134 (0x001C)              
	TArray<struct FName>                               ActionAnimNames;                                  		// 0x000150 (0x000C)              
	TArray<struct FName>                               TargetActionAnimNames;                            		// 0x00015C (0x000C)              
	struct FName                                       SpawnAnimName;                                    		// 0x000168 (0x0008)              
	TArray<struct FName>                               DeathAnimNames;                                   		// 0x000170 (0x000C)              
	float                                              ActionBlendTime;                                  		// 0x00017C (0x0004)              
	float                                              ReActionDelay;                                    		// 0x000180 (0x0004)              
	float                                              RotateToTargetSpeed;                              		// 0x000184 (0x0004)              
	float                                              SpeedBlendStart;                                  		// 0x000188 (0x0004)              
	float                                              SpeedBlendEnd;                                    		// 0x00018C (0x0004)              
	float                                              AnimVelRate;                                      		// 0x000190 (0x0004)              
	float                                              MaxYawRate;                                       		// 0x000194 (0x0004)              
	class USkeletalMesh*                               FlockMesh;                                        		// 0x000198 (0x0004)              
	TArray<class UAnimSet*>                            FlockAnimSets;                                    		// 0x00019C (0x000C)              
	struct FName                                       WalkAnimName;                                     		// 0x0001A8 (0x0008)              
	struct FName                                       RunAnimName;                                      		// 0x0001B0 (0x0008)              
	class UAnimTree*                                   FlockAnimTree;                                    		// 0x0001B8 (0x0004)              
	int                                                Health;                                           		// 0x0001BC (0x0004)              
	class UParticleSystem*                             ExplosiveDeathEffect;                             		// 0x0001C0 (0x0004)              
	float                                              ExplosiveDeathEffectScale;                        		// 0x0001C4 (0x0004)              
	TArray<class ACrowdAgent*>                         SpawnedList;                                      		// 0x0001C8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_CrowdSpawner");
		return pClassPointer;
	};

public:
	class ACrowdAgent* SpawnAgent(class AActor* SpawnLoc);//Engine.SeqAct_CrowdSpawner.SpawnAgent
};
UClass* USeqAct_CrowdSpawner::pClassPointer = NULL;

//0x000018 (0x0000D4 - 0x0000BC)
//SeqAct_Delay[0x103050C0]
class USeqAct_Delay : public USeqAct_Latent
{
public:
	unsigned long                                      bDelayActive : 1;                                 		// 0x0000BC (0x0004) [0x00000001] 
	float                                              DefaultDuration;                                  		// 0x0000C0 (0x0004)              
	float                                              Duration;                                         		// 0x0000C4 (0x0004)              
	double                                             LastUpdateTime;                                   		// 0x0000C8 (0x0008)              
	float                                              RemainingTime;                                    		// 0x0000D0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Delay");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_Delay.IsValidUISequenceObject
};
UClass* USeqAct_Delay::pClassPointer = NULL;

//0x000010 (0x0000CC - 0x0000BC)
//SeqAct_DelaySwitch[0x10304F90]
class USeqAct_DelaySwitch : public USeqAct_Latent
{
public:
	int                                                LinkCount;                                        		// 0x0000BC (0x0004)              
	int                                                CurrentIdx;                                       		// 0x0000C0 (0x0004)              
	float                                              SwitchDelay;                                      		// 0x0000C4 (0x0004)              
	float                                              NextLinkTime;                                     		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_DelaySwitch");
		return pClassPointer;
	};
};
UClass* USeqAct_DelaySwitch::pClassPointer = NULL;

//0x000000 (0x0000BC - 0x0000BC)
//SeqAct_ForceGarbageCollection[0x10304E60]
class USeqAct_ForceGarbageCollection : public USeqAct_Latent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ForceGarbageCollection");
		return pClassPointer;
	};
};
UClass* USeqAct_ForceGarbageCollection::pClassPointer = NULL;

//0x000020 (0x0000DC - 0x0000BC)
//SeqAct_ForceMaterialMipsResident[0x10304D30]
class USeqAct_ForceMaterialMipsResident : public USeqAct_Latent
{
public:
	float                                              ForceDuration;                                    		// 0x0000BC (0x0004)              
	TArray<class UMaterialInterface*>                  ForceMaterials;                                   		// 0x0000C0 (0x000C)              
	float                                              RemainingTime;                                    		// 0x0000CC (0x0004)              
	TArray<class UTexture2D*>                          ModifiedTextures;                                 		// 0x0000D0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ForceMaterialMipsResident");
		return pClassPointer;
	};
};
UClass* USeqAct_ForceMaterialMipsResident::pClassPointer = NULL;

//0x000078 (0x000134 - 0x0000BC)
//SeqAct_Interp[0x10304C00]
class USeqAct_Interp : public USeqAct_Latent
{
public:
	unsigned char                                      SavedActorTransforms[0x3C];                       		// 0x0000BC (0x003C)              UNKNOWN PROPERTY: MapProperty
	float                                              PlayRate;                                         		// 0x0000F8 (0x0004)              
	double                                             Position;                                         		// 0x0000FC (0x0008)              
	float                                              ForceStartPosition;                               		// 0x000104 (0x0004)              
	unsigned long                                      bIsPlaying : 1;                                   		// 0x000108 (0x0004) [0x00000001] 
	unsigned long                                      bPaused : 1;                                      		// 0x000108 (0x0004) [0x00000002] 
	unsigned long                                      bIsBeingEdited : 1;                               		// 0x000108 (0x0004) [0x00000004] 
	unsigned long                                      bLooping : 1;                                     		// 0x000108 (0x0004) [0x00000008] 
	unsigned long                                      bRewindOnPlay : 1;                                		// 0x000108 (0x0004) [0x00000010] 
	unsigned long                                      bRewindOnStop : 1;                                		// 0x000108 (0x0004) [0x00000020] 
	unsigned long                                      bNoResetOnRewind : 1;                             		// 0x000108 (0x0004) [0x00000040] 
	unsigned long                                      bRewindIfAlreadyPlaying : 1;                      		// 0x000108 (0x0004) [0x00000080] 
	unsigned long                                      bReversePlayback : 1;                             		// 0x000108 (0x0004) [0x00000100] 
	unsigned long                                      bInterpForPathBuilding : 1;                       		// 0x000108 (0x0004) [0x00000200] 
	unsigned long                                      bForceStartPos : 1;                               		// 0x000108 (0x0004) [0x00000400] 
	unsigned long                                      bClientSideOnly : 1;                              		// 0x000108 (0x0004) [0x00000800] 
	unsigned long                                      bSkipUpdateIfNotVisible : 1;                      		// 0x000108 (0x0004) [0x00001000] 
	unsigned long                                      bIsSkippable : 1;                                 		// 0x000108 (0x0004) [0x00002000] 
	unsigned long                                      bNoOneFrameLag : 1;                               		// 0x000108 (0x0004) [0x00004000] 
	TArray<class ACoverLink*>                          LinkedCover;                                      		// 0x00010C (0x000C)              
	class UInterpData*                                 InterpData;                                       		// 0x000118 (0x0004)              
	TArray<class UInterpGroupInst*>                    GroupInst;                                        		// 0x00011C (0x000C)              
	class UClass*                                      ReplicatedActorClass;                             		// 0x000128 (0x0004)              
	class AMatineeActor*                               ReplicatedActor;                                  		// 0x00012C (0x0004)              
	int                                                PreferredSplitScreenNum;                          		// 0x000130 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Interp");
		return pClassPointer;
	};

public:
	void AddPlayerToDirectorTracks(class APlayerController* PC);//Engine.SeqAct_Interp.AddPlayerToDirectorTracks
	void Stop();//Engine.SeqAct_Interp.Stop
	void Reset();//Engine.SeqAct_Interp.Reset
	void SetPosition(double NewPosition,bool bJump);//Engine.SeqAct_Interp.SetPosition
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_Interp.IsValidUISequenceObject
};
UClass* USeqAct_Interp::pClassPointer = NULL;

//0x000004 (0x0000C0 - 0x0000BC)
//SeqAct_LevelStreamingBase[0x10304AD0]
class USeqAct_LevelStreamingBase : public USeqAct_Latent
{
public:
	unsigned long                                      bMakeVisibleAfterLoad : 1;                        		// 0x0000BC (0x0004) [0x00000001] 
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x0000BC (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_LevelStreamingBase");
		return pClassPointer;
	};
};
UClass* USeqAct_LevelStreamingBase::pClassPointer = NULL;

//0x000010 (0x0000D0 - 0x0000C0)
//SeqAct_LevelStreaming[0x103049A0]
class USeqAct_LevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x0000C0 (0x0004)              
	struct FName                                       LevelName;                                        		// 0x0000C4 (0x0008)              
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0000CC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_LevelStreaming");
		return pClassPointer;
	};
};
UClass* USeqAct_LevelStreaming::pClassPointer = NULL;

//0x000010 (0x0000D0 - 0x0000C0)
//SeqAct_MultiLevelStreaming[0x10304870]
class USeqAct_MultiLevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	TArray<struct FLevelStreamingNameCombo>            Levels;                                           		// 0x0000C0 (0x000C)              
	unsigned long                                      bUnloadAllOtherLevels : 1;                        		// 0x0000CC (0x0004) [0x00000001] 
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0000CC (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_MultiLevelStreaming");
		return pClassPointer;
	};
};
UClass* USeqAct_MultiLevelStreaming::pClassPointer = NULL;

//0x000010 (0x0000CC - 0x0000BC)
//SeqAct_LevelVisibility[0x10304740]
class USeqAct_LevelVisibility : public USeqAct_Latent
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x0000BC (0x0004)              
	struct FName                                       LevelName;                                        		// 0x0000C0 (0x0008)              
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0000C8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_LevelVisibility");
		return pClassPointer;
	};
};
UClass* USeqAct_LevelVisibility::pClassPointer = NULL;

//0x00001C (0x0000D8 - 0x0000BC)
//SeqAct_PlayCameraAnim[0x10304610]
class USeqAct_PlayCameraAnim : public USeqAct_Latent
{
public:
	class UCameraAnim*                                 CameraAnim;                                       		// 0x0000BC (0x0004)              
	unsigned long                                      bLoop : 1;                                        		// 0x0000C0 (0x0004) [0x00000001] 
	unsigned long                                      bRandomStartTime : 1;                             		// 0x0000C0 (0x0004) [0x00000002] 
	unsigned long                                      bStopped : 1;                                     		// 0x0000C0 (0x0004) [0x00000004] 
	float                                              BlendInTime;                                      		// 0x0000C4 (0x0004)              
	float                                              BlendOutTime;                                     		// 0x0000C8 (0x0004)              
	float                                              Rate;                                             		// 0x0000CC (0x0004)              
	float                                              IntensityScale;                                   		// 0x0000D0 (0x0004)              
	float                                              AnimTimeRemaining;                                		// 0x0000D4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_PlayCameraAnim");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_PlayCameraAnim.GetObjClassVersion
};
UClass* USeqAct_PlayCameraAnim::pClassPointer = NULL;

//0x00005C (0x000118 - 0x0000BC)
//SeqAct_PlaySound[0x103044E0]
class USeqAct_PlaySound : public USeqAct_Latent
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x0000BC (0x0004)              
	float                                              ExtraDelay;                                       		// 0x0000C0 (0x0004)              
	float                                              SoundDuration;                                    		// 0x0000C4 (0x0004)              
	float                                              FadeInTime;                                       		// 0x0000C8 (0x0004)              
	float                                              FadeOutTime;                                      		// 0x0000CC (0x0004)              
	float                                              VolumeMultiplier;                                 		// 0x0000D0 (0x0004)              
	float                                              PitchMultiplier;                                  		// 0x0000D4 (0x0004)              
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x0000D8 (0x0004) [0x00000001] 
	unsigned long                                      bStopped : 1;                                     		// 0x0000D8 (0x0004) [0x00000002] 
	struct FString                                     strWwiseEventPlay;                                		// 0x0000DC (0x000C)              
	struct FString                                     strWwiseEventStop;                                		// 0x0000E8 (0x000C)              
	struct FString                                     strWwiseRTPCName1;                                		// 0x0000F4 (0x000C)              
	float                                              fWwiseRTPCValue1;                                 		// 0x000100 (0x0004)              
	struct FString                                     strWwiseRTPCName2;                                		// 0x000104 (0x000C)              
	float                                              fWwiseRTPCValue2;                                 		// 0x000110 (0x0004)              
	int                                                m_AKGameObjectID;                                 		// 0x000114 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_PlaySound");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_PlaySound.GetObjClassVersion
};
UClass* USeqAct_PlaySound::pClassPointer = NULL;

//0x000018 (0x0000D4 - 0x0000BC)
//SeqAct_PrepareMapChange[0x103043B0]
class USeqAct_PrepareMapChange : public USeqAct_Latent
{
public:
	struct FName                                       MainLevelName;                                    		// 0x0000BC (0x0008)              
	TArray<struct FName>                               InitiallyLoadedSecondaryLevelNames;               		// 0x0000C4 (0x000C)              
	unsigned long                                      bIsHighPriority : 1;                              		// 0x0000D0 (0x0004) [0x00000001] 
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0000D0 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_PrepareMapChange");
		return pClassPointer;
	};
};
UClass* USeqAct_PrepareMapChange::pClassPointer = NULL;

//0x000058 (0x000114 - 0x0000BC)
//SeqAct_SetDOFParams[0x10304280]
class USeqAct_SetDOFParams : public USeqAct_Latent
{
public:
	float                                              FalloffExponent;                                  		// 0x0000BC (0x0004)              
	float                                              BlurKernelSize;                                   		// 0x0000C0 (0x0004)              
	float                                              MaxNearBlurAmount;                                		// 0x0000C4 (0x0004)              
	float                                              MaxFarBlurAmount;                                 		// 0x0000C8 (0x0004)              
	DWORD                                              ModulateBlurColor;                                		// 0x0000CC (0x0004)              
	float                                              FocusInnerRadius;                                 		// 0x0000D0 (0x0004)              
	float                                              FocusDistance;                                    		// 0x0000D4 (0x0004)              
	FVector3                                           FocusPosition;                                    		// 0x0000D8 (0x000C)              
	float                                              InterpolateSeconds;                               		// 0x0000E4 (0x0004)              
	float                                              InterpolateElapsed;                               		// 0x0000E8 (0x0004)              
	float                                              OldFalloffExponent;                               		// 0x0000EC (0x0004)              
	float                                              OldBlurKernelSize;                                		// 0x0000F0 (0x0004)              
	float                                              OldMaxNearBlurAmount;                             		// 0x0000F4 (0x0004)              
	float                                              OldMaxFarBlurAmount;                              		// 0x0000F8 (0x0004)              
	DWORD                                              OldModulateBlurColor;                             		// 0x0000FC (0x0004)              
	float                                              OldFocusInnerRadius;                              		// 0x000100 (0x0004)              
	float                                              OldFocusDistance;                                 		// 0x000104 (0x0004)              
	FVector3                                           OldFocusPosition;                                 		// 0x000108 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetDOFParams");
		return pClassPointer;
	};
};
UClass* USeqAct_SetDOFParams::pClassPointer = NULL;

//0x000010 (0x0000CC - 0x0000BC)
//SeqAct_SetMotionBlurParams[0x10304150]
class USeqAct_SetMotionBlurParams : public USeqAct_Latent
{
public:
	float                                              MotionBlurAmount;                                 		// 0x0000BC (0x0004)              
	float                                              InterpolateSeconds;                               		// 0x0000C0 (0x0004)              
	float                                              InterpolateElapsed;                               		// 0x0000C4 (0x0004)              
	float                                              OldMotionBlurAmount;                              		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMotionBlurParams");
		return pClassPointer;
	};
};
UClass* USeqAct_SetMotionBlurParams::pClassPointer = NULL;

//0x000010 (0x0000CC - 0x0000BC)
//SeqAct_WaitForLevelsVisible[0x10304020]
class USeqAct_WaitForLevelsVisible : public USeqAct_Latent
{
public:
	TArray<struct FName>                               LevelNames;                                       		// 0x0000BC (0x000C)              
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x0000C8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_WaitForLevelsVisible");
		return pClassPointer;
	};
};
UClass* USeqAct_WaitForLevelsVisible::pClassPointer = NULL;

//0x000014 (0x0000C0 - 0x0000AC)
//SeqAct_Log[0x10303EF0]
class USeqAct_Log : public USequenceAction
{
public:
	unsigned long                                      bOutputToScreen : 1;                              		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bIncludeObjComment : 1;                           		// 0x0000AC (0x0004) [0x00000002] 
	float                                              TargetDuration;                                   		// 0x0000B0 (0x0004)              
	FVector3                                           TargetOffset;                                     		// 0x0000B4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Log");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_Log.GetObjClassVersion
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_Log.IsValidUISequenceObject
};
UClass* USeqAct_Log::pClassPointer = NULL;

//0x000048 (0x0000F4 - 0x0000AC)
//SeqAct_ParticleEventGenerator[0x10303DC0]
class USeqAct_ParticleEventGenerator : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bUseEmitterLocation : 1;                          		// 0x0000AC (0x0004) [0x00000002] 
	class AActor*                                      Instigator;                                       		// 0x0000B0 (0x0004)              
	TArray<struct FName>                               EventNames;                                       		// 0x0000B4 (0x000C)              
	float                                              EventTime;                                        		// 0x0000C0 (0x0004)              
	FVector3                                           EventLocation;                                    		// 0x0000C4 (0x000C)              
	FVector3                                           EventDirection;                                   		// 0x0000D0 (0x000C)              
	FVector3                                           EventVelocity;                                    		// 0x0000DC (0x000C)              
	FVector3                                           EventNormal;                                      		// 0x0000E8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ParticleEventGenerator");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion
};
UClass* USeqAct_ParticleEventGenerator::pClassPointer = NULL;

//0x00001C (0x0000C8 - 0x0000AC)
//SeqAct_PlayFaceFXAnim[0x10303C90]
class USeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x0000AC (0x0004)              
	struct FString                                     FaceFXGroupName;                                  		// 0x0000B0 (0x000C)              
	struct FString                                     FaceFXAnimName;                                   		// 0x0000BC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_PlayFaceFXAnim");
		return pClassPointer;
	};
};
UClass* USeqAct_PlayFaceFXAnim::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//SeqAct_Possess[0x10303B60]
class USeqAct_Possess : public USequenceAction
{
public:
	class APawn*                                       PawnToPossess;                                    		// 0x0000AC (0x0004)              
	unsigned long                                      bKillOldPawn : 1;                                 		// 0x0000B0 (0x0004) [0x00000001] 
	unsigned long                                      bTryToLeaveVehicle : 1;                           		// 0x0000B0 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Possess");
		return pClassPointer;
	};
};
UClass* USeqAct_Possess::pClassPointer = NULL;

//0x00000C (0x0000B8 - 0x0000AC)
//SeqAct_RangeSwitch[0x10303A30]
class USeqAct_RangeSwitch : public USequenceAction
{
public:
	TArray<struct FSwitchRange>                        Ranges;                                           		// 0x0000AC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_RangeSwitch");
		return pClassPointer;
	};
};
UClass* USeqAct_RangeSwitch::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_SetBlockRigidBody[0x10303900]
class USeqAct_SetBlockRigidBody : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetBlockRigidBody");
		return pClassPointer;
	};
};
UClass* USeqAct_SetBlockRigidBody::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_SetCameraTarget[0x103037D0]
class USeqAct_SetCameraTarget : public USequenceAction
{
public:
	class AActor*                                      CameraTarget;                                     		// 0x0000AC (0x0004)              
	struct FViewTargetTransitionParams                 TransitionParams;                                 		// 0x0000B0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetCameraTarget");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_SetCameraTarget.GetObjClassVersion
};
UClass* USeqAct_SetCameraTarget::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//SeqAct_SetMaterial[0x103036A0]
class USeqAct_SetMaterial : public USequenceAction
{
public:
	class UMaterialInterface*                          NewMaterial;                                      		// 0x0000AC (0x0004)              
	int                                                MaterialIndex;                                    		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMaterial");
		return pClassPointer;
	};
};
UClass* USeqAct_SetMaterial::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_SetMatInstScalarParam[0x10303570]
class USeqAct_SetMatInstScalarParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0000AC (0x0004)              
	struct FName                                       ParamName;                                        		// 0x0000B0 (0x0008)              
	float                                              ScalarValue;                                      		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMatInstScalarParam");
		return pClassPointer;
	};
};
UClass* USeqAct_SetMatInstScalarParam::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_SetMatInstTexParam[0x10303440]
class USeqAct_SetMatInstTexParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0000AC (0x0004)              
	class UTexture*                                    NewTexture;                                       		// 0x0000B0 (0x0004)              
	struct FName                                       ParamName;                                        		// 0x0000B4 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMatInstTexParam");
		return pClassPointer;
	};
};
UClass* USeqAct_SetMatInstTexParam::pClassPointer = NULL;

//0x00001C (0x0000C8 - 0x0000AC)
//SeqAct_SetMatInstVectorParam[0x10303310]
class USeqAct_SetMatInstVectorParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0000AC (0x0004)              
	struct FName                                       ParamName;                                        		// 0x0000B0 (0x0008)              
	struct FLinearColor                                VectorValue;                                      		// 0x0000B8 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMatInstVectorParam");
		return pClassPointer;
	};
};
UClass* USeqAct_SetMatInstVectorParam::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//SeqAct_SetMusicTrack[0x103031E0]
class USeqAct_SetMusicTrack : public USequenceAction
{
public:
	struct FName                                       TrackBankName;                                    		// 0x0000AC (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetMusicTrack");
		return pClassPointer;
	};
};
UClass* USeqAct_SetMusicTrack::pClassPointer = NULL;

//0x000001 (0x0000AD - 0x0000AC)
//SeqAct_SetPhysics[0x103030B0]
class USeqAct_SetPhysics : public USequenceAction
{
public:
	unsigned char                                      newPhysics;                                       		// 0x0000AC (0x0001)              PROPERTY: EPhysics

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetPhysics");
		return pClassPointer;
	};
};
UClass* USeqAct_SetPhysics::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_SetRigidBodyIgnoreVehicles[0x10302F80]
class USeqAct_SetRigidBodyIgnoreVehicles : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetRigidBodyIgnoreVehicles");
		return pClassPointer;
	};
};
UClass* USeqAct_SetRigidBodyIgnoreVehicles::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_SetSequenceVariable[0x10302E50]
class USeqAct_SetSequenceVariable : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetSequenceVariable");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_SetSequenceVariable.IsValidUISequenceObject
};
UClass* USeqAct_SetSequenceVariable::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_AddFloat[0x10302D20]
class USeqAct_AddFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x0000AC (0x0004)              
	float                                              ValueB;                                           		// 0x0000B0 (0x0004)              
	float                                              FloatResult;                                      		// 0x0000B4 (0x0004)              
	int                                                IntResult;                                        		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_AddFloat");
		return pClassPointer;
	};
};
UClass* USeqAct_AddFloat::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_AddInt[0x10302BF0]
class USeqAct_AddInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x0000AC (0x0004)              
	int                                                ValueB;                                           		// 0x0000B0 (0x0004)              
	float                                              FloatResult;                                      		// 0x0000B4 (0x0004)              
	int                                                IntResult;                                        		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_AddInt");
		return pClassPointer;
	};
};
UClass* USeqAct_AddInt::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//SeqAct_CastToFloat[0x10302AC0]
class USeqAct_CastToFloat : public USeqAct_SetSequenceVariable
{
public:
	int                                                Value;                                            		// 0x0000AC (0x0004)              
	float                                              FloatResult;                                      		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_CastToFloat");
		return pClassPointer;
	};
};
UClass* USeqAct_CastToFloat::pClassPointer = NULL;

//0x00000C (0x0000B8 - 0x0000AC)
//SeqAct_CastToInt[0x10302990]
class USeqAct_CastToInt : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bTruncate : 1;                                    		// 0x0000AC (0x0004) [0x00000001] 
	float                                              Value;                                            		// 0x0000B0 (0x0004)              
	int                                                IntResult;                                        		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_CastToInt");
		return pClassPointer;
	};
};
UClass* USeqAct_CastToInt::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_DivideFloat[0x10302860]
class USeqAct_DivideFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x0000AC (0x0004)              
	float                                              ValueB;                                           		// 0x0000B0 (0x0004)              
	float                                              FloatResult;                                      		// 0x0000B4 (0x0004)              
	int                                                IntResult;                                        		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_DivideFloat");
		return pClassPointer;
	};
};
UClass* USeqAct_DivideFloat::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_DivideInt[0x10302730]
class USeqAct_DivideInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x0000AC (0x0004)              
	int                                                ValueB;                                           		// 0x0000B0 (0x0004)              
	float                                              FloatResult;                                      		// 0x0000B4 (0x0004)              
	int                                                IntResult;                                        		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_DivideInt");
		return pClassPointer;
	};
};
UClass* USeqAct_DivideInt::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_ModifyObjectList[0x10302600]
class USeqAct_ModifyObjectList : public USeqAct_SetSequenceVariable
{
public:
	int                                                ListEntriesCount;                                 		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ModifyObjectList");
		return pClassPointer;
	};
};
UClass* USeqAct_ModifyObjectList::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_MultiplyFloat[0x103024D0]
class USeqAct_MultiplyFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x0000AC (0x0004)              
	float                                              ValueB;                                           		// 0x0000B0 (0x0004)              
	float                                              FloatResult;                                      		// 0x0000B4 (0x0004)              
	int                                                IntResult;                                        		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_MultiplyFloat");
		return pClassPointer;
	};
};
UClass* USeqAct_MultiplyFloat::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_MultiplyInt[0x103023A0]
class USeqAct_MultiplyInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x0000AC (0x0004)              
	int                                                ValueB;                                           		// 0x0000B0 (0x0004)              
	float                                              FloatResult;                                      		// 0x0000B4 (0x0004)              
	int                                                IntResult;                                        		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_MultiplyInt");
		return pClassPointer;
	};
};
UClass* USeqAct_MultiplyInt::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_SetBool[0x10302270]
class USeqAct_SetBool : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x0000AC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetBool");
		return pClassPointer;
	};
};
UClass* USeqAct_SetBool::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//SeqAct_SetFloat[0x10302140]
class USeqAct_SetFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              Target;                                           		// 0x0000AC (0x0004)              
	float                                              Value;                                            		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetFloat");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_SetFloat.GetObjClassVersion
};
UClass* USeqAct_SetFloat::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//SeqAct_SetInt[0x10302010]
class USeqAct_SetInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                Target;                                           		// 0x0000AC (0x0004)              
	int                                                Value;                                            		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetInt");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_SetInt.GetObjClassVersion
};
UClass* USeqAct_SetInt::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//SeqAct_SetObject[0x10301EE0]
class USeqAct_SetObject : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     DefaultValue;                                     		// 0x0000AC (0x0004)              
	class UObject*                                     Value;                                            		// 0x0000B0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetObject");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_SetObject.GetObjClassVersion
};
UClass* USeqAct_SetObject::pClassPointer = NULL;

//0x000018 (0x0000C4 - 0x0000AC)
//SeqAct_SetString[0x10301DB0]
class USeqAct_SetString : public USeqAct_SetSequenceVariable
{
public:
	struct FString                                     Target;                                           		// 0x0000AC (0x000C)              
	struct FString                                     Value;                                            		// 0x0000B8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetString");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_SetString.GetObjClassVersion
};
UClass* USeqAct_SetString::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_SubtractFloat[0x10301C80]
class USeqAct_SubtractFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x0000AC (0x0004)              
	float                                              ValueB;                                           		// 0x0000B0 (0x0004)              
	float                                              FloatResult;                                      		// 0x0000B4 (0x0004)              
	int                                                IntResult;                                        		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SubtractFloat");
		return pClassPointer;
	};
};
UClass* USeqAct_SubtractFloat::pClassPointer = NULL;

//0x000010 (0x0000BC - 0x0000AC)
//SeqAct_SubtractInt[0x10301B50]
class USeqAct_SubtractInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x0000AC (0x0004)              
	int                                                ValueB;                                           		// 0x0000B0 (0x0004)              
	float                                              FloatResult;                                      		// 0x0000B4 (0x0004)              
	int                                                IntResult;                                        		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SubtractInt");
		return pClassPointer;
	};
};
UClass* USeqAct_SubtractInt::pClassPointer = NULL;

//0x000018 (0x0000C4 - 0x0000AC)
//SeqAct_Switch[0x10301A20]
class USeqAct_Switch : public USequenceAction
{
public:
	int                                                LinkCount;                                        		// 0x0000AC (0x0004)              
	int                                                IncrementAmount;                                  		// 0x0000B0 (0x0004)              
	unsigned long                                      bLooping : 1;                                     		// 0x0000B4 (0x0004) [0x00000001] 
	unsigned long                                      bAutoDisableLinks : 1;                            		// 0x0000B4 (0x0004) [0x00000002] 
	TArray<int>                                        Indices;                                          		// 0x0000B8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Switch");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_Switch.IsValidUISequenceObject
};
UClass* USeqAct_Switch::pClassPointer = NULL;

//0x00000C (0x0000D0 - 0x0000C4)
//SeqAct_RandomSwitch[0x103018F0]
class USeqAct_RandomSwitch : public USeqAct_Switch
{
public:
	TArray<int>                                        AutoDisabledIndices;                              		// 0x0000C4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_RandomSwitch");
		return pClassPointer;
	};
};
UClass* USeqAct_RandomSwitch::pClassPointer = NULL;

//0x00000C (0x0000B8 - 0x0000AC)
//SeqAct_Timer[0x103017C0]
class USeqAct_Timer : public USequenceAction
{
public:
	double                                             ActivationTime;                                   		// 0x0000AC (0x0008)              
	float                                              Time;                                             		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Timer");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_Timer.IsValidUISequenceObject
};
UClass* USeqAct_Timer::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_Toggle[0x10301690]
class USeqAct_Toggle : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Toggle");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_Toggle.IsValidUISequenceObject
};
UClass* USeqAct_Toggle::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_ToggleDynamicChannel[0x10301560]
class USeqAct_ToggleDynamicChannel : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleDynamicChannel");
		return pClassPointer;
	};
};
UClass* USeqAct_ToggleDynamicChannel::pClassPointer = NULL;

//0x000030 (0x0000DC - 0x0000AC)
//SeqAct_Trace[0x10301430]
class USeqAct_Trace : public USequenceAction
{
public:
	unsigned long                                      bTraceActors : 1;                                 		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bTraceWorld : 1;                                  		// 0x0000AC (0x0004) [0x00000002] 
	FVector3                                           TraceExtent;                                      		// 0x0000B0 (0x000C)              
	FVector3                                           StartOffset;                                      		// 0x0000BC (0x000C)              
	FVector3                                           EndOffset;                                        		// 0x0000C8 (0x000C)              
	class UObject*                                     HitObject;                                        		// 0x0000D4 (0x0004)              
	float                                              Distance;                                         		// 0x0000D8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Trace");
		return pClassPointer;
	};
};
UClass* USeqAct_Trace::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//SequenceCondition[0x10301300]
class USequenceCondition : public USequenceOp
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SequenceCondition");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SequenceCondition.IsValidUISequenceObject
};
UClass* USequenceCondition::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//SeqCond_CompareBool[0x103011D0]
class USeqCond_CompareBool : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_CompareBool");
		return pClassPointer;
	};
};
UClass* USeqCond_CompareBool::pClassPointer = NULL;

//0x000008 (0x00009C - 0x000094)
//SeqCond_CompareFloat[0x103010A0]
class USeqCond_CompareFloat : public USequenceCondition
{
public:
	float                                              ValueA;                                           		// 0x000094 (0x0004)              
	float                                              ValueB;                                           		// 0x000098 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_CompareFloat");
		return pClassPointer;
	};
};
UClass* USeqCond_CompareFloat::pClassPointer = NULL;

//0x000008 (0x00009C - 0x000094)
//SeqCond_CompareInt[0x10300F70]
class USeqCond_CompareInt : public USequenceCondition
{
public:
	int                                                ValueA;                                           		// 0x000094 (0x0004)              
	int                                                ValueB;                                           		// 0x000098 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_CompareInt");
		return pClassPointer;
	};
};
UClass* USeqCond_CompareInt::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//SeqCond_CompareObject[0x10300E40]
class USeqCond_CompareObject : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_CompareObject");
		return pClassPointer;
	};
};
UClass* USeqCond_CompareObject::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//SeqCond_GetServerType[0x10300D10]
class USeqCond_GetServerType : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_GetServerType");
		return pClassPointer;
	};
};
UClass* USeqCond_GetServerType::pClassPointer = NULL;

//0x00000C (0x0000A0 - 0x000094)
//SeqCond_Increment[0x10300BE0]
class USeqCond_Increment : public USequenceCondition
{
public:
	int                                                IncrementAmount;                                  		// 0x000094 (0x0004)              
	int                                                ValueA;                                           		// 0x000098 (0x0004)              
	int                                                ValueB;                                           		// 0x00009C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_Increment");
		return pClassPointer;
	};
};
UClass* USeqCond_Increment::pClassPointer = NULL;

//0x00000C (0x0000A0 - 0x000094)
//SeqCond_IncrementFloat[0x10300AB0]
class USeqCond_IncrementFloat : public USequenceCondition
{
public:
	float                                              IncrementAmount;                                  		// 0x000094 (0x0004)              
	float                                              ValueA;                                           		// 0x000098 (0x0004)              
	float                                              ValueB;                                           		// 0x00009C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_IncrementFloat");
		return pClassPointer;
	};
};
UClass* USeqCond_IncrementFloat::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//SeqCond_IsInCombat[0x10300980]
class USeqCond_IsInCombat : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_IsInCombat");
		return pClassPointer;
	};
};
UClass* USeqCond_IsInCombat::pClassPointer = NULL;

//0x000004 (0x000098 - 0x000094)
//SeqCond_IsLoggedIn[0x10300850]
class USeqCond_IsLoggedIn : public USequenceCondition
{
public:
	int                                                NumNeededLoggedIn;                                		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_IsLoggedIn");
		return pClassPointer;
	};

public:
	bool CheckLogins();//Engine.SeqCond_IsLoggedIn.CheckLogins
};
UClass* USeqCond_IsLoggedIn::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//SeqCond_IsSameTeam[0x10300720]
class USeqCond_IsSameTeam : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_IsSameTeam");
		return pClassPointer;
	};
};
UClass* USeqCond_IsSameTeam::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//SeqCond_SwitchBase[0x103005F0]
class USeqCond_SwitchBase : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_SwitchBase");
		return pClassPointer;
	};

public:
	bool IsFallThruEnabled(int ValueIndex);//Engine.SeqCond_SwitchBase.IsFallThruEnabled
	void RemoveValueEntry(int RemoveIndex);//Engine.SeqCond_SwitchBase.RemoveValueEntry
	void VerifyDefaultCaseValue();//Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue
	void InsertValueEntry(int InsertIndex);//Engine.SeqCond_SwitchBase.InsertValueEntry
};
UClass* USeqCond_SwitchBase::pClassPointer = NULL;

//0x00000C (0x0000A0 - 0x000094)
//SeqCond_SwitchClass[0x103004C0]
class USeqCond_SwitchClass : public USeqCond_SwitchBase
{
public:
	TArray<struct FSwitchClassInfo>                    ClassArray;                                       		// 0x000094 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_SwitchClass");
		return pClassPointer;
	};

public:
	void RemoveValueEntry(int RemoveIndex);//Engine.SeqCond_SwitchClass.RemoveValueEntry
	bool IsFallThruEnabled(int ValueIndex);//Engine.SeqCond_SwitchClass.IsFallThruEnabled
	void VerifyDefaultCaseValue();//Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue
	void InsertValueEntry(int InsertIndex);//Engine.SeqCond_SwitchClass.InsertValueEntry
};
UClass* USeqCond_SwitchClass::pClassPointer = NULL;

//0x00000C (0x0000A0 - 0x000094)
//SeqCond_SwitchName[0x10300390]
class USeqCond_SwitchName : public USeqCond_SwitchBase
{
public:
	TArray<struct FSwitchNameCase>                     SupportedValues;                                  		// 0x000094 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_SwitchName");
		return pClassPointer;
	};

public:
	void InsertValueEntry(int InsertIndex);//Engine.SeqCond_SwitchName.InsertValueEntry
	void VerifyDefaultCaseValue();//Engine.SeqCond_SwitchName.VerifyDefaultCaseValue
	void RemoveValueEntry(int RemoveIndex);//Engine.SeqCond_SwitchName.RemoveValueEntry
	bool IsFallThruEnabled(int ValueIndex);//Engine.SeqCond_SwitchName.IsFallThruEnabled
};
UClass* USeqCond_SwitchName::pClassPointer = NULL;

//0x000010 (0x0000A4 - 0x000094)
//SeqCond_SwitchObject[0x10300260]
class USeqCond_SwitchObject : public USeqCond_SwitchBase
{
public:
	TArray<struct FSwitchObjectCase>                   SupportedValues;                                  		// 0x000094 (0x000C)              
	class UClass*                                      MetaClass;                                        		// 0x0000A0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqCond_SwitchObject");
		return pClassPointer;
	};

public:
	void InsertValueEntry(int InsertIndex);//Engine.SeqCond_SwitchObject.InsertValueEntry
	void VerifyDefaultCaseValue();//Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue
	bool IsFallThruEnabled(int ValueIndex);//Engine.SeqCond_SwitchObject.IsFallThruEnabled
	void RemoveValueEntry(int RemoveIndex);//Engine.SeqCond_SwitchObject.RemoveValueEntry
};
UClass* USeqCond_SwitchObject::pClassPointer = NULL;

//0x000034 (0x0000C8 - 0x000094)
//SequenceEvent[0x10300130]
class USequenceEvent : public USequenceOp
{
public:
	class AActor*                                      Originator;                                       		// 0x000094 (0x0004)              
	class AActor*                                      Instigator;                                       		// 0x000098 (0x0004)              
	double                                             ActivationTime;                                   		// 0x00009C (0x0008)              
	int                                                TriggerCount;                                     		// 0x0000A4 (0x0004)              
	int                                                MaxTriggerCount;                                  		// 0x0000A8 (0x0004)              
	float                                              ReTriggerDelay;                                   		// 0x0000AC (0x0004)              
	unsigned long                                      bEnabled : 1;                                     		// 0x0000B0 (0x0004) [0x00000001] 
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0000B0 (0x0004) [0x00000002] 
	unsigned long                                      bRegistered : 1;                                  		// 0x0000B0 (0x0004) [0x00000004] 
	unsigned long                                      bClientSideOnly : 1;                              		// 0x0000B0 (0x0004) [0x00000008] 
	unsigned char                                      Priority;                                         		// 0x0000B4 (0x0001)              PROPERTY: 
	unsigned char                                      _0x0000B5[0x3];                                   		// 0x0000B5 (0x0003) MISSED OFFSET
	int                                                MaxWidth;                                         		// 0x0000B8 (0x0004)              
	TArray<struct FQueuedActivationInfo>               QueuedActivations;                                		// 0x0000BC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SequenceEvent");
		return pClassPointer;
	};

public:
	void Toggled();//Engine.SequenceEvent.Toggled
	void Reset();//Engine.SequenceEvent.Reset
	void RegisterEvent();//Engine.SequenceEvent.RegisterEvent
	bool CheckActivate(class AActor* InOriginator,class AActor* InInstigator,bool bTest,TArray<int>* ActivateIndices,bool bPushTop);//Engine.SequenceEvent.CheckActivate
};
UClass* USequenceEvent::pClassPointer = NULL;

//0x000004 (0x0000CC - 0x0000C8)
//SeqEvent_AISeeEnemy[0x10300000]
class USeqEvent_AISeeEnemy : public USequenceEvent
{
public:
	float                                              MaxSightDistance;                                 		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_AISeeEnemy");
		return pClassPointer;
	};
};
UClass* USeqEvent_AISeeEnemy::pClassPointer = NULL;

//0x000014 (0x0000DC - 0x0000C8)
//SeqEvent_Console[0x1032FE20]
class USeqEvent_Console : public USequenceEvent
{
public:
	struct FName                                       ConsoleEventName;                                 		// 0x0000C8 (0x0008)              
	struct FString                                     EventDesc;                                        		// 0x0000D0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_Console");
		return pClassPointer;
	};
};
UClass* USeqEvent_Console::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//SeqEvent_ConstraintBroken[0x1032FCF0]
class USeqEvent_ConstraintBroken : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_ConstraintBroken");
		return pClassPointer;
	};
};
UClass* USeqEvent_ConstraintBroken::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//SeqEvent_Destroyed[0x1032FBC0]
class USeqEvent_Destroyed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_Destroyed");
		return pClassPointer;
	};
};
UClass* USeqEvent_Destroyed::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//SeqEvent_GetInventory[0x1032FA90]
class USeqEvent_GetInventory : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_GetInventory");
		return pClassPointer;
	};
};
UClass* USeqEvent_GetInventory::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//SeqEvent_LevelBeginning[0x1032F960]
class USeqEvent_LevelBeginning : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_LevelBeginning");
		return pClassPointer;
	};
};
UClass* USeqEvent_LevelBeginning::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//SeqEvent_LevelLoaded[0x1032F830]
class USeqEvent_LevelLoaded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_LevelLoaded");
		return pClassPointer;
	};
};
UClass* USeqEvent_LevelLoaded::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//SeqEvent_LevelStartup[0x1032F700]
class USeqEvent_LevelStartup : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_LevelStartup");
		return pClassPointer;
	};
};
UClass* USeqEvent_LevelStartup::pClassPointer = NULL;

//0x000004 (0x0000CC - 0x0000C8)
//SeqEvent_Mover[0x1032F5D0]
class USeqEvent_Mover : public USequenceEvent
{
public:
	float                                              StayOpenTime;                                     		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_Mover");
		return pClassPointer;
	};

public:
	void NotifyAttached(class AActor* Other);//Engine.SeqEvent_Mover.NotifyAttached
	void RegisterEvent();//Engine.SeqEvent_Mover.RegisterEvent
	void NotifyEncroachingOn(class AActor* Hit);//Engine.SeqEvent_Mover.NotifyEncroachingOn
	void NotifyFinishedOpen();//Engine.SeqEvent_Mover.NotifyFinishedOpen
	void NotifyDetached(class AActor* Other);//Engine.SeqEvent_Mover.NotifyDetached
};
UClass* USeqEvent_Mover::pClassPointer = NULL;

//0x000034 (0x0000FC - 0x0000C8)
//SeqEvent_ParticleEvent[0x1032F4A0]
class USeqEvent_ParticleEvent : public USequenceEvent
{
public:
	unsigned char                                      EventType;                                        		// 0x0000C8 (0x0001)              PROPERTY: EParticleEventOutputType
	unsigned char                                      _0x0000C9[0x3];                                   		// 0x0000C9 (0x0003) MISSED OFFSET
	FVector3                                           EventPosition;                                    		// 0x0000CC (0x000C)              
	float                                              EventEmitterTime;                                 		// 0x0000D8 (0x0004)              
	FVector3                                           EventVelocity;                                    		// 0x0000DC (0x000C)              
	float                                              EventParticleTime;                                		// 0x0000E8 (0x0004)              
	FVector3                                           EventNormal;                                      		// 0x0000EC (0x000C)              
	unsigned long                                      UseRelfectedImpactVector : 1;                     		// 0x0000F8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_ParticleEvent");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqEvent_ParticleEvent.GetObjClassVersion
};
UClass* USeqEvent_ParticleEvent::pClassPointer = NULL;

//0x000004 (0x0000CC - 0x0000C8)
//SeqEvent_ProjectileLanded[0x1032F370]
class USeqEvent_ProjectileLanded : public USequenceEvent
{
public:
	float                                              MaxDistance;                                      		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_ProjectileLanded");
		return pClassPointer;
	};
};
UClass* USeqEvent_ProjectileLanded::pClassPointer = NULL;

//0x00000C (0x0000D4 - 0x0000C8)
//SeqEvent_RemoteEvent[0x1032F240]
class USeqEvent_RemoteEvent : public USequenceEvent
{
public:
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0000C8 (0x0004) [0x00000001] 
	struct FName                                       EventName;                                        		// 0x0000CC (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_RemoteEvent");
		return pClassPointer;
	};
};
UClass* USeqEvent_RemoteEvent::pClassPointer = NULL;

//0x000004 (0x0000CC - 0x0000C8)
//SeqEvent_RigidBodyCollision[0x1032F110]
class USeqEvent_RigidBodyCollision : public USequenceEvent
{
public:
	float                                              MinCollisionVelocity;                             		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_RigidBodyCollision");
		return pClassPointer;
	};
};
UClass* USeqEvent_RigidBodyCollision::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//SeqEvent_SeeDeath[0x1032EFE0]
class USeqEvent_SeeDeath : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_SeeDeath");
		return pClassPointer;
	};
};
UClass* USeqEvent_SeeDeath::pClassPointer = NULL;

//0x00000C (0x0000D4 - 0x0000C8)
//SeqEvent_SequenceActivated[0x1032EEB0]
class USeqEvent_SequenceActivated : public USequenceEvent
{
public:
	struct FString                                     InputLabel;                                       		// 0x0000C8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_SequenceActivated");
		return pClassPointer;
	};
};
UClass* USeqEvent_SequenceActivated::pClassPointer = NULL;

//0x000028 (0x0000F0 - 0x0000C8)
//SeqEvent_Touch[0x1032ED80]
class USeqEvent_Touch : public USequenceEvent
{
public:
	TArray<class UClass*>                              ClassProximityTypes;                              		// 0x0000C8 (0x000C)              
	TArray<class UClass*>                              IgnoredClassProximityTypes;                       		// 0x0000D4 (0x000C)              
	unsigned long                                      bForceOverlapping : 1;                            		// 0x0000E0 (0x0004) [0x00000001] 
	unsigned long                                      bUseInstigator : 1;                               		// 0x0000E0 (0x0004) [0x00000002] 
	unsigned long                                      bAllowDeadPawns : 1;                              		// 0x0000E0 (0x0004) [0x00000004] 
	TArray<class AActor*>                              TouchedList;                                      		// 0x0000E4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_Touch");
		return pClassPointer;
	};

public:
	void NotifyTouchingPawnDied(class APawn* P);//Engine.SeqEvent_Touch.NotifyTouchingPawnDied
	void Toggled();//Engine.SeqEvent_Touch.Toggled
	bool CheckTouchActivate(class AActor* InOriginator,class AActor* InInstigator,bool bTest);//Engine.SeqEvent_Touch.CheckTouchActivate
	bool CheckUnTouchActivate(class AActor* InOriginator,class AActor* InInstigator,bool bTest);//Engine.SeqEvent_Touch.CheckUnTouchActivate
};
UClass* USeqEvent_Touch::pClassPointer = NULL;

//0x000018 (0x0000E0 - 0x0000C8)
//SeqEvent_Used[0x1032EC50]
class USeqEvent_Used : public USequenceEvent
{
public:
	unsigned long                                      bAimToInteract : 1;                               		// 0x0000C8 (0x0004) [0x00000001] 
	float                                              InteractDistance;                                 		// 0x0000CC (0x0004)              
	struct FString                                     InteractText;                                     		// 0x0000D0 (0x000C)              
	class UTexture2D*                                  InteractIcon;                                     		// 0x0000DC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_Used");
		return pClassPointer;
	};
};
UClass* USeqEvent_Used::pClassPointer = NULL;

//0x000014 (0x000068 - 0x000054)
//SequenceVariable[0x1032EB20]
class USequenceVariable : public USequenceObject
{
public:
	struct FString                                     APBVarName;                                       		// 0x000054 (0x000C)              
	struct FName                                       VarName;                                          		// 0x000060 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SequenceVariable");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SequenceVariable.IsValidUISequenceObject
};
UClass* USequenceVariable::pClassPointer = NULL;

//0x00002C (0x000094 - 0x000068)
//InterpData[0x1032E9F0]
class UInterpData : public USequenceVariable
{
public:
	float                                              InterpLength;                                     		// 0x000068 (0x0004)              
	double                                             PathBuildTime;                                    		// 0x00006C (0x0008)              
	TArray<class UInterpGroup*>                        InterpGroups;                                     		// 0x000074 (0x000C)              
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x000080 (0x0004)              
	double                                             EdSectionStart;                                   		// 0x000084 (0x0008)              
	double                                             EdSectionEnd;                                     		// 0x00008C (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InterpData");
		return pClassPointer;
	};
};
UClass* UInterpData::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//SeqVar_Bool[0x1032E8C0]
class USeqVar_Bool : public USequenceVariable
{
public:
	int                                                bValue;                                           		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_Bool");
		return pClassPointer;
	};
};
UClass* USeqVar_Bool::pClassPointer = NULL;

//0x000010 (0x000078 - 0x000068)
//SeqVar_External[0x1032E790]
class USeqVar_External : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x000068 (0x0004)              
	struct FString                                     VariableLabel;                                    		// 0x00006C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_External");
		return pClassPointer;
	};
};
UClass* USeqVar_External::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//SeqVar_Float[0x1032E660]
class USeqVar_Float : public USequenceVariable
{
public:
	float                                              FloatValue;                                       		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_Float");
		return pClassPointer;
	};
};
UClass* USeqVar_Float::pClassPointer = NULL;

//0x000008 (0x000074 - 0x00006C)
//SeqVar_RandomFloat[0x1032E530]
class USeqVar_RandomFloat : public USeqVar_Float
{
public:
	float                                              Min;                                              		// 0x00006C (0x0004)              
	float                                              Max;                                              		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_RandomFloat");
		return pClassPointer;
	};
};
UClass* USeqVar_RandomFloat::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//SeqVar_Int[0x1032E400]
class USeqVar_Int : public USequenceVariable
{
public:
	int                                                IntValue;                                         		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_Int");
		return pClassPointer;
	};
};
UClass* USeqVar_Int::pClassPointer = NULL;

//0x000008 (0x000074 - 0x00006C)
//SeqVar_RandomInt[0x1032E2D0]
class USeqVar_RandomInt : public USeqVar_Int
{
public:
	int                                                Min;                                              		// 0x00006C (0x0004)              
	int                                                Max;                                              		// 0x000070 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_RandomInt");
		return pClassPointer;
	};
};
UClass* USeqVar_RandomInt::pClassPointer = NULL;

//0x000008 (0x000070 - 0x000068)
//SeqVar_Name[0x1032E1A0]
class USeqVar_Name : public USequenceVariable
{
public:
	struct FName                                       NameValue;                                        		// 0x000068 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_Name");
		return pClassPointer;
	};
};
UClass* USeqVar_Name::pClassPointer = NULL;

//0x000010 (0x000078 - 0x000068)
//SeqVar_Named[0x1032E070]
class USeqVar_Named : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x000068 (0x0004)              
	struct FName                                       FindVarName;                                      		// 0x00006C (0x0008)              
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x000074 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_Named");
		return pClassPointer;
	};
};
UClass* USeqVar_Named::pClassPointer = NULL;

//0x000010 (0x000078 - 0x000068)
//SeqVar_Object[0x1032DF40]
class USeqVar_Object : public USequenceVariable
{
public:
	class UObject*                                     ObjValue;                                         		// 0x000068 (0x0004)              
	TArray<class UClass*>                              SupportedClasses;                                 		// 0x00006C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_Object");
		return pClassPointer;
	};

public:
	class UObject* GetObjectValue();//Engine.SeqVar_Object.GetObjectValue
	void SetObjectValue(class UObject* NewValue);//Engine.SeqVar_Object.SetObjectValue
};
UClass* USeqVar_Object::pClassPointer = NULL;

//0x000018 (0x000090 - 0x000078)
//SeqVar_Group[0x1032DE10]
class USeqVar_Group : public USeqVar_Object
{
public:
	struct FName                                       GroupName;                                        		// 0x000078 (0x0008)              
	unsigned long                                      bCachedList : 1;                                  		// 0x000080 (0x0004) [0x00000001] 
	TArray<class UObject*>                             Actors;                                           		// 0x000084 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_Group");
		return pClassPointer;
	};
};
UClass* USeqVar_Group::pClassPointer = NULL;

//0x000024 (0x00009C - 0x000078)
//SeqVar_MusicTrack[0x1032DCE0]
class USeqVar_MusicTrack : public USeqVar_Object
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                       		// 0x000078 (0x0024)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_MusicTrack");
		return pClassPointer;
	};
};
UClass* USeqVar_MusicTrack::pClassPointer = NULL;

//0x00000C (0x000084 - 0x000078)
//SeqVar_MusicTrackBank[0x1032DBB0]
class USeqVar_MusicTrackBank : public USeqVar_Object
{
public:
	TArray<struct FMusicTrackStruct>                   MusicTrackBank;                                   		// 0x000078 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_MusicTrackBank");
		return pClassPointer;
	};
};
UClass* USeqVar_MusicTrackBank::pClassPointer = NULL;

//0x00000C (0x000084 - 0x000078)
//SeqVar_ObjectList[0x1032DA80]
class USeqVar_ObjectList : public USeqVar_Object
{
public:
	TArray<class UObject*>                             ObjList;                                          		// 0x000078 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_ObjectList");
		return pClassPointer;
	};

public:
	void SetObjectValue(class UObject* NewValue);//Engine.SeqVar_ObjectList.SetObjectValue
	class UObject* GetObjectValue();//Engine.SeqVar_ObjectList.GetObjectValue
};
UClass* USeqVar_ObjectList::pClassPointer = NULL;

//0x000024 (0x00009C - 0x000078)
//SeqVar_ObjectVolume[0x1032D950]
class USeqVar_ObjectVolume : public USeqVar_Object
{
public:
	double                                             LastUpdateTime;                                   		// 0x000078 (0x0008)              
	TArray<class UObject*>                             ContainedObjects;                                 		// 0x000080 (0x000C)              
	TArray<class UClass*>                              ExcludeClassList;                                 		// 0x00008C (0x000C)              
	unsigned long                                      bCollidingOnly : 1;                               		// 0x000098 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_ObjectVolume");
		return pClassPointer;
	};
};
UClass* USeqVar_ObjectVolume::pClassPointer = NULL;

//0x000014 (0x00008C - 0x000078)
//SeqVar_Player[0x1032D820]
class USeqVar_Player : public USeqVar_Object
{
public:
	TArray<class UObject*>                             Players;                                          		// 0x000078 (0x000C)              
	unsigned long                                      bAllPlayers : 1;                                  		// 0x000084 (0x0004) [0x00000001] 
	int                                                PlayerIdx;                                        		// 0x000088 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_Player");
		return pClassPointer;
	};

public:
	class UObject* GetObjectValue();//Engine.SeqVar_Player.GetObjectValue
};
UClass* USeqVar_Player::pClassPointer = NULL;

//0x00000C (0x000074 - 0x000068)
//SeqVar_String[0x1032D6F0]
class USeqVar_String : public USequenceVariable
{
public:
	struct FString                                     StrValue;                                         		// 0x000068 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_String");
		return pClassPointer;
	};
};
UClass* USeqVar_String::pClassPointer = NULL;

//0x000030 (0x000098 - 0x000068)
//SeqVar_Union[0x1032D5C0]
class USeqVar_Union : public USequenceVariable
{
public:
	TArray<class UClass*>                              SupportedVariableClasses;                         		// 0x000068 (0x000C)              
	int                                                IntValue;                                         		// 0x000074 (0x0004)              
	int                                                BoolValue;                                        		// 0x000078 (0x0004)              
	float                                              FloatValue;                                       		// 0x00007C (0x0004)              
	struct FString                                     StringValue;                                      		// 0x000080 (0x000C)              
	class UObject*                                     ObjectValue;                                      		// 0x00008C (0x0004)              
	struct FUniqueNetId                                NetIdValue;                                       		// 0x000090 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_Union");
		return pClassPointer;
	};
};
UClass* USeqVar_Union::pClassPointer = NULL;

//0x00000C (0x000074 - 0x000068)
//SeqVar_Vector[0x1032D490]
class USeqVar_Vector : public USequenceVariable
{
public:
	FVector3                                           VectValue;                                        		// 0x000068 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_Vector");
		return pClassPointer;
	};
};
UClass* USeqVar_Vector::pClassPointer = NULL;

//0x000008 (0x000268 - 0x000260)
//AmbientSound[0x1032D360]
class AAmbientSound : public AKeypoint
{
public:
	unsigned long                                      bAutoPlay : 1;                                    		// 0x000260 (0x0004) [0x00000001] 
	unsigned long                                      bIsPlaying : 1;                                   		// 0x000260 (0x0004) [0x00000002] 
	class UAudioComponent*                             AudioComponent;                                   		// 0x000264 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AmbientSound");
		return pClassPointer;
	};
};
UClass* AAmbientSound::pClassPointer = NULL;

//0x00000C (0x000274 - 0x000268)
//AmbientSoundSimple[0x1032D230]
class AAmbientSoundSimple : public AAmbientSound
{
public:
	class USoundNodeAmbient*                           AmbientProperties;                                		// 0x000268 (0x0004)              
	class USoundCue*                                   SoundCueInstance;                                 		// 0x00026C (0x0004)              
	class USoundNodeAmbient*                           SoundNodeInstance;                                		// 0x000270 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AmbientSoundSimple");
		return pClassPointer;
	};
};
UClass* AAmbientSoundSimple::pClassPointer = NULL;

//0x000000 (0x000274 - 0x000274)
//AmbientSoundNonLoop[0x1032D100]
class AAmbientSoundNonLoop : public AAmbientSoundSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AmbientSoundNonLoop");
		return pClassPointer;
	};
};
UClass* AAmbientSoundNonLoop::pClassPointer = NULL;

//0x000003 (0x000074 - 0x000071)
//DistributionFloatSoundParameter[0x1032CFD0]
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:
	unsigned char                                      _0x000071[0x3];                                   		// 0x000071 (0x0003) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DistributionFloatSoundParameter");
		return pClassPointer;
	};
};
UClass* UDistributionFloatSoundParameter::pClassPointer = NULL;

//0x0000B4 (0x000104 - 0x000050)
//SoundNodeAmbient[0x1032CEA0]
class USoundNodeAmbient : public USoundNode
{
public:
	unsigned char                                      DistanceModel;                                    		// 0x000050 (0x0001)              PROPERTY: SoundDistanceModel
	unsigned char                                      _0x000051[0x3];                                   		// 0x000051 (0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       MinRadius;                                        		// 0x000054 (0x001C)              
	struct FRawDistributionFloat                       MaxRadius;                                        		// 0x000070 (0x001C)              
	struct FRawDistributionFloat                       LPFMinRadius;                                     		// 0x00008C (0x001C)              
	struct FRawDistributionFloat                       LPFMaxRadius;                                     		// 0x0000A8 (0x001C)              
	unsigned long                                      bSpatialize : 1;                                  		// 0x0000C4 (0x0004) [0x00000001] 
	unsigned long                                      bAttenuate : 1;                                   		// 0x0000C4 (0x0004) [0x00000002] 
	unsigned long                                      bAttenuateWithLowPassFilter : 1;                  		// 0x0000C4 (0x0004) [0x00000004] 
	class USoundNodeWave*                              Wave;                                             		// 0x0000C8 (0x0004)              
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x0000CC (0x001C)              
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x0000E8 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeAmbient");
		return pClassPointer;
	};
};
UClass* USoundNodeAmbient::pClassPointer = NULL;

//0x000028 (0x00012C - 0x000104)
//SoundNodeAmbientNonLoop[0x1032CD70]
class USoundNodeAmbientNonLoop : public USoundNodeAmbient
{
public:
	struct FRawDistributionFloat                       DelayTime;                                        		// 0x000104 (0x001C)              
	TArray<struct FAmbientSoundSlot>                   SoundSlots;                                       		// 0x000120 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeAmbientNonLoop");
		return pClassPointer;
	};
};
UClass* USoundNodeAmbientNonLoop::pClassPointer = NULL;

//0x00007C (0x0000CC - 0x000050)
//SoundNodeAttenuation[0x1032CC40]
class USoundNodeAttenuation : public USoundNode
{
public:
	unsigned char                                      DistanceModel;                                    		// 0x000050 (0x0001)              PROPERTY: SoundDistanceModel
	unsigned char                                      _0x000051[0x3];                                   		// 0x000051 (0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       MinRadius;                                        		// 0x000054 (0x001C)              
	struct FRawDistributionFloat                       MaxRadius;                                        		// 0x000070 (0x001C)              
	float                                              dBAttenuationAtMax;                               		// 0x00008C (0x0004)              
	struct FRawDistributionFloat                       LPFMinRadius;                                     		// 0x000090 (0x001C)              
	struct FRawDistributionFloat                       LPFMaxRadius;                                     		// 0x0000AC (0x001C)              
	unsigned long                                      bSpatialize : 1;                                  		// 0x0000C8 (0x0004) [0x00000001] 
	unsigned long                                      bAttenuate : 1;                                   		// 0x0000C8 (0x0004) [0x00000002] 
	unsigned long                                      bAttenuateWithLowPassFilter : 1;                  		// 0x0000C8 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeAttenuation");
		return pClassPointer;
	};
};
UClass* USoundNodeAttenuation::pClassPointer = NULL;

//0x00000C (0x00005C - 0x000050)
//SoundNodeConcatenator[0x1032CB10]
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                      		// 0x000050 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeConcatenator");
		return pClassPointer;
	};
};
UClass* USoundNodeConcatenator::pClassPointer = NULL;

//0x00001C (0x00006C - 0x000050)
//SoundNodeDelay[0x1032C9E0]
class USoundNodeDelay : public USoundNode
{
public:
	struct FRawDistributionFloat                       DelayDuration;                                    		// 0x000050 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeDelay");
		return pClassPointer;
	};
};
UClass* USoundNodeDelay::pClassPointer = NULL;

//0x00000C (0x00005C - 0x000050)
//SoundNodeDistanceCrossFade[0x1032C8B0]
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                   		// 0x000050 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		return pClassPointer;
	};
};
UClass* USoundNodeDistanceCrossFade::pClassPointer = NULL;

//0x000020 (0x000070 - 0x000050)
//SoundNodeLooping[0x1032C780]
class USoundNodeLooping : public USoundNode
{
public:
	unsigned long                                      bLoopIndefinitely : 1;                            		// 0x000050 (0x0004) [0x00000001] 
	struct FRawDistributionFloat                       LoopCount;                                        		// 0x000054 (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeLooping");
		return pClassPointer;
	};
};
UClass* USoundNodeLooping::pClassPointer = NULL;

//0x000000 (0x000050 - 0x000050)
//SoundNodeMature[0x1032C650]
class USoundNodeMature : public USoundNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeMature");
		return pClassPointer;
	};
};
UClass* USoundNodeMature::pClassPointer = NULL;

//0x00000C (0x00005C - 0x000050)
//SoundNodeMixer[0x1032C520]
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                      		// 0x000050 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeMixer");
		return pClassPointer;
	};
};
UClass* USoundNodeMixer::pClassPointer = NULL;

//0x000038 (0x000088 - 0x000050)
//SoundNodeModulator[0x1032C3F0]
class USoundNodeModulator : public USoundNode
{
public:
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x000050 (0x001C)              
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x00006C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeModulator");
		return pClassPointer;
	};
};
UClass* USoundNodeModulator::pClassPointer = NULL;

//0x000038 (0x000088 - 0x000050)
//SoundNodeModulatorContinuous[0x1032C2C0]
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x000050 (0x001C)              
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x00006C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		return pClassPointer;
	};
};
UClass* USoundNodeModulatorContinuous::pClassPointer = NULL;

//0x000074 (0x0000C4 - 0x000050)
//SoundNodeOscillator[0x1032C190]
class USoundNodeOscillator : public USoundNode
{
public:
	struct FRawDistributionFloat                       Amplitude;                                        		// 0x000050 (0x001C)              
	struct FRawDistributionFloat                       Frequency;                                        		// 0x00006C (0x001C)              
	struct FRawDistributionFloat                       Offset;                                           		// 0x000088 (0x001C)              
	struct FRawDistributionFloat                       Center;                                           		// 0x0000A4 (0x001C)              
	unsigned long                                      bModulatePitch : 1;                               		// 0x0000C0 (0x0004) [0x00000001] 
	unsigned long                                      bModulateVolume : 1;                              		// 0x0000C0 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeOscillator");
		return pClassPointer;
	};
};
UClass* USoundNodeOscillator::pClassPointer = NULL;

//0x000020 (0x000070 - 0x000050)
//SoundNodeRandom[0x1032C060]
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                          		// 0x000050 (0x000C)              
	unsigned long                                      bRandomizeWithoutReplacement : 1;                 		// 0x00005C (0x0004) [0x00000001] 
	TArray<unsigned long>                              HasBeenUsed;                                      		// 0x000060 (0x000C)              
	int                                                NumRandomUsed;                                    		// 0x00006C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeRandom");
		return pClassPointer;
	};
};
UClass* USoundNodeRandom::pClassPointer = NULL;

//0x0000EC (0x00034C - 0x000260)
//Terrain[0x1032BF30]
class ATerrain : public AInfo
{
public:
	TArray<struct FTerrainHeight>                      Heights;                                          		// 0x000260 (0x000C)              
	TArray<struct FTerrainInfoData>                    InfoData;                                         		// 0x00026C (0x000C)              
	TArray<struct FTerrainLayer>                       Layers;                                           		// 0x000278 (0x000C)              
	int                                                NormalMapLayer;                                   		// 0x000284 (0x0004)              
	TArray<struct FTerrainDecoLayer>                   DecoLayers;                                       		// 0x000288 (0x000C)              
	TArray<struct FAlphaMap>                           AlphaMaps;                                        		// 0x000294 (0x000C)              
	TArray<class UTerrainComponent*>                   TerrainComponents;                                		// 0x0002A0 (0x000C)              
	int                                                NumSectionsX;                                     		// 0x0002AC (0x0004)              
	int                                                NumSectionsY;                                     		// 0x0002B0 (0x0004)              
	int                                                SectionSize;                                      		// 0x0002B4 (0x0004)              
	TArray<struct FTerrainWeightedMaterial>            WeightedMaterials;                                		// 0x0002B8 (0x000C)              
	TArray<class UTerrainWeightMapTexture*>            WeightedTextureMaps;                              		// 0x0002C4 (0x000C)              
	TArray<unsigned char>                              CachedDisplacements;                              		// 0x0002D0 (0x000C)              
	float                                              MaxCollisionDisplacement;                         		// 0x0002DC (0x0004)              
	int                                                MaxTesselationLevel;                              		// 0x0002E0 (0x0004)              
	int                                                MinTessellationLevel;                             		// 0x0002E4 (0x0004)              
	float                                              TesselationDistanceScale;                         		// 0x0002E8 (0x0004)              
	int                                                TessellationCheckCount;                           		// 0x0002EC (0x0004)              
	float                                              TessellationCheckDistance;                        		// 0x0002F0 (0x0004)              
	float                                              TessellationCheckBorder;                          		// 0x0002F4 (0x0004)              
	int                                                CollisionTesselationLevel;                        		// 0x0002F8 (0x0004)              
	struct FCachedTerrainMaterialArray                 CachedTerrainMaterials[0x2];                      		// 0x0002FC (0x0018)              
	int                                                NumVerticesX;                                     		// 0x000314 (0x0004)              
	int                                                NumVerticesY;                                     		// 0x000318 (0x0004)              
	int                                                NumPatchesX;                                      		// 0x00031C (0x0004)              
	int                                                NumPatchesY;                                      		// 0x000320 (0x0004)              
	int                                                MaxComponentSize;                                 		// 0x000324 (0x0004)              
	int                                                StaticLightingResolution;                         		// 0x000328 (0x0004)              
	unsigned long                                      bIsOverridingLightResolution : 1;                 		// 0x00032C (0x0004) [0x00000001] 
	unsigned long                                      bBilinearFilterLightmapGeneration : 1;            		// 0x00032C (0x0004) [0x00000002] 
	unsigned long                                      bCastShadow : 1;                                  		// 0x00032C (0x0004) [0x00000004] 
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x00032C (0x0004) [0x00000008] 
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x00032C (0x0004) [0x00000010] 
	unsigned long                                      bBlockRigidBody : 1;                              		// 0x00032C (0x0004) [0x00000020] 
	unsigned long                                      bAllowRigidBodyUnderneath : 1;                    		// 0x00032C (0x0004) [0x00000040] 
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x00032C (0x0004) [0x00000080] 
	unsigned long                                      bMorphingEnabled : 1;                             		// 0x00032C (0x0004) [0x00000100] 
	unsigned long                                      bMorphingGradientsEnabled : 1;                    		// 0x00032C (0x0004) [0x00000200] 
	unsigned long                                      bLocked : 1;                                      		// 0x00032C (0x0004) [0x00000400] 
	unsigned long                                      bHeightmapLocked : 1;                             		// 0x00032C (0x0004) [0x00000800] 
	unsigned long                                      bShowingCollision : 1;                            		// 0x00032C (0x0004) [0x00001000] 
	unsigned long                                      bShowWireframe : 1;                               		// 0x00032C (0x0004) [0x00002000] 
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x000330 (0x0004)              
	DWORD                                              ReleaseResourcesFence;                            		// 0x000334 (0x0004)              
	int                                                EditorTessellationLevel;                          		// 0x000338 (0x0004)              
	TArray<struct FSelectedTerrainVertex>              SelectedVertices;                                 		// 0x00033C (0x000C)              
	DWORD                                              WireframeColor;                                   		// 0x000348 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Terrain");
		return pClassPointer;
	};

public:
	void CalcLayerBounds();//Engine.Terrain.CalcLayerBounds
	void PostBeginPlay();//Engine.Terrain.PostBeginPlay
};
UClass* ATerrain::pClassPointer = NULL;

//0x000094 (0x000274 - 0x0001E0)
//TerrainComponent[0x1032BE00]
class UTerrainComponent : public UPrimitiveComponent
{
public:
	TArray<class UShadowMap2D*>                        ShadowMaps;                                       		// 0x0001E0 (0x000C)              
	TArray<struct FGuid>                               IrrelevantLights;                                 		// 0x0001EC (0x000C)              
	DWORD                                              TerrainObject;                                    		// 0x0001F8 (0x0004)              
	int                                                SectionBaseX;                                     		// 0x0001FC (0x0004)              
	int                                                SectionBaseY;                                     		// 0x000200 (0x0004)              
	int                                                SectionSizeX;                                     		// 0x000204 (0x0004)              
	int                                                SectionSizeY;                                     		// 0x000208 (0x0004)              
	int                                                TrueSectionSizeX;                                 		// 0x00020C (0x0004)              
	int                                                TrueSectionSizeY;                                 		// 0x000210 (0x0004)              
	DWORD                                              LightMap;                                         		// 0x000214 (0x0004)              
	TArray<int>                                        PatchBounds;                                      		// 0x000218 (0x000C)              
	TArray<int>                                        PatchBatches;                                     		// 0x000224 (0x000C)              
	TArray<int>                                        BatchMaterials;                                   		// 0x000230 (0x000C)              
	int                                                FullBatch;                                        		// 0x00023C (0x0004)              
	DWORD                                              PatchBatchOffsets;                                		// 0x000240 (0x0004)              
	DWORD                                              WorkingOffsets;                                   		// 0x000244 (0x0004)              
	DWORD                                              PatchBatchTriangles;                              		// 0x000248 (0x0004)              
	DWORD                                              PatchCachedTessellationValues;                    		// 0x00024C (0x0004)              
	DWORD                                              TesselationLevels;                                		// 0x000250 (0x0004)              
	struct FTerrainBVTree                              BVTree;                                           		// 0x000254 (0x000C)              
	TArray<FVector3>                                   CollisionVertices;                                		// 0x000260 (0x000C)              
	DWORD                                              RBHeightfield;                                    		// 0x00026C (0x0004)              
	unsigned long                                      bDisplayCollisionLevel : 1;                       		// 0x000270 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TerrainComponent");
		return pClassPointer;
	};
};
UClass* UTerrainComponent::pClassPointer = NULL;

//0x000010 (0x00014C - 0x00013C)
//TerrainWeightMapTexture[0x1032BCD0]
class UTerrainWeightMapTexture : public UTexture2D
{
public:
	class ATerrain*                                    ParentTerrain;                                    		// 0x00013C (0x0004)              
	TArray<DWORD>                                      WeightedMaterials;                                		// 0x000140 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TerrainWeightMapTexture");
		return pClassPointer;
	};
};
UClass* UTerrainWeightMapTexture::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//TerrainLayerSetup[0x1032BBA0]
class UTerrainLayerSetup : public UObject
{
public:
	TArray<struct FTerrainFilteredMaterial>            Materials;                                        		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TerrainLayerSetup");
		return pClassPointer;
	};

public:
	void SetMaterials(TArray<struct FTerrainFilteredMaterial> NewMaterials);//Engine.TerrainLayerSetup.SetMaterials
	void PostBeginPlay();//Engine.TerrainLayerSetup.PostBeginPlay
};
UClass* UTerrainLayerSetup::pClassPointer = NULL;

//0x00006C (0x0000AC - 0x000040)
//TerrainMaterial[0x1032BA70]
class UTerrainMaterial : public UObject
{
public:
	FMatrix                                            LocalToMapping;                                   		// 0x000040 (0x0040)              
	unsigned char                                      MappingType;                                      		// 0x000080 (0x0001)              PROPERTY: ETerrainMappingType
	unsigned char                                      _0x000081[0x3];                                   		// 0x000081 (0x0003) MISSED OFFSET
	float                                              MappingScale;                                     		// 0x000084 (0x0004)              
	float                                              MappingRotation;                                  		// 0x000088 (0x0004)              
	float                                              MappingPanU;                                      		// 0x00008C (0x0004)              
	float                                              MappingPanV;                                      		// 0x000090 (0x0004)              
	class UMaterialInterface*                          Material;                                         		// 0x000094 (0x0004)              
	class UTexture2D*                                  DisplacementMap;                                  		// 0x000098 (0x0004)              
	float                                              DisplacementScale;                                		// 0x00009C (0x0004)              
	TArray<struct FTerrainFoliageMesh>                 FoliageMeshes;                                    		// 0x0000A0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TerrainMaterial");
		return pClassPointer;
	};
};
UClass* UTerrainMaterial::pClassPointer = NULL;

//0x00001C (0x00005C - 0x000040)
//cEntity[0x1032B940]
class UcEntity : public UObject
{
public:
	struct FString                                     m_sType;                                          		// 0x000040 (0x000C)              
	class UObject*                                     m_pObject;                                        		// 0x00004C (0x0004)              
	unsigned long                                      m_bSelected : 1;                                  		// 0x000050 (0x0004) [0x00000001] 
	DWORD                                              m_pfnRender;                                      		// 0x000054 (0x0004)              
	DWORD                                              m_pfnEntitySelected;                              		// 0x000058 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cEntity");
		return pClassPointer;
	};
};
UClass* UcEntity::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//UIRoot[0x1032B5B0]
class UUIRoot : public UObject
{
public:
	DWORD                                              VfTable_ISequenceInterface;                       		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIRoot");
		return pClassPointer;
	};

public:
	class UGameUISceneClient* GetSceneClient();//Engine.UIRoot.GetSceneClient
	unsigned char GetInputPlatformType(class ULocalPlayer* OwningPlayer);//Engine.UIRoot.GetInputPlatformType
	bool GetCursorPosition(int* CursorX,int* CursorY,class UUIScene* Scene);//Engine.UIRoot.GetCursorPosition
	bool GetDataStoreFieldValue(struct FString InDataStoreMarkup,struct FUIProviderFieldValue* OutFieldValue,class UUIScene* OwnerScene,class ULocalPlayer* OwnerPlayer);//Engine.UIRoot.GetDataStoreFieldValue
	struct FString ConvertWidgetIDToString(class UUIObject* SourceWidget);//Engine.UIRoot.ConvertWidgetIDToString
	bool IsConsole(unsigned char ConsoleType);//Engine.UIRoot.IsConsole
	class UUIInteraction* GetCurrentUIController();//Engine.UIRoot.GetCurrentUIController
	void SetMouseCaptureOverride(bool bCaptureMouse);//Engine.UIRoot.SetMouseCaptureOverride
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIRoot.OnSequenceAction
	bool GetCursorSize(float* CursorXL,float* CursorYL);//Engine.UIRoot.GetCursorSize
	class UUIDataStore* StaticResolveDataStore(struct FName DataStoreTag,class UUIScene* OwnerScene,class ULocalPlayer* InPlayerOwner);//Engine.UIRoot.StaticResolveDataStore
	bool GetDataStoreStringValue(struct FString InDataStoreMarkup,struct FString* OutStringValue,class UUIScene* OwnerScene,class ULocalPlayer* OwnerPlayer);//Engine.UIRoot.GetDataStoreStringValue
	bool SetDataStoreFieldValue(struct FString InDataStoreMarkup,struct FUIProviderFieldValue* InFieldValue,class UUIScene* OwnerScene,class ULocalPlayer* OwnerPlayer);//Engine.UIRoot.SetDataStoreFieldValue
	bool SetDataStoreStringValue(struct FString InDataStoreMarkup,struct FString InStringValue,class UUIScene* OwnerScene,class ULocalPlayer* OwnerPlayer);//Engine.UIRoot.SetDataStoreStringValue
	FMatrix GetPrimitiveTransform(class UUIObject* Widget,bool bIncludeAnchorPosition,bool bIncudeRotation,bool bIncludeScale);//Engine.UIRoot.GetPrimitiveTransform
	unsigned char GetFaceOrientation(unsigned char Face);//Engine.UIRoot.GetFaceOrientation
};
UClass* UUIRoot::pClassPointer = NULL;

//0x000154 (0x000198 - 0x000044)
//UIScreenObject[0x1032B6E0]
class UUIScreenObject : public UUIRoot
{
public:
	struct FUIScreenValue_Bounds                       Position;                                         		// 0x000044 (0x001C)              
	float                                              ZDepth;                                           		// 0x000060 (0x0004)              
	unsigned long                                      bHidden : 1;                                      		// 0x000064 (0x0004) [0x00000001] 
	unsigned long                                      bInitialized : 1;                                 		// 0x000064 (0x0004) [0x00000002] 
	unsigned long                                      bNeverFocus : 1;                                  		// 0x000064 (0x0004) [0x00000004] 
	unsigned long                                      bSupports3DPrimitives : 1;                        		// 0x000064 (0x0004) [0x00000008] 
	TArray<class UUIObject*>                           Children;                                         		// 0x000068 (0x000C)              
	TArray<class UClass*>                              DefaultStates;                                    		// 0x000074 (0x000C)              
	class UClass*                                      InitialState;                                     		// 0x000080 (0x0004)              
	TArray<class UUIState*>                            InactiveStates;                                   		// 0x000084 (0x000C)              
	TArray<class UUIState*>                            StateStack;                                       		// 0x000090 (0x000C)              
	TArray<struct FPlayerInteractionData>              FocusControls;                                    		// 0x00009C (0x000C)              
	TArray<struct FUIFocusPropagationData>             FocusPropagation;                                 		// 0x0000A8 (0x000C)              
	unsigned char                                      PlayerInputMask;                                  		// 0x0000B4 (0x0001)              PROPERTY: 
	unsigned char                                      _0x0000B5[0x3];                                   		// 0x0000B5 (0x0003) MISSED OFFSET
	float                                              Opacity;                                          		// 0x0000B8 (0x0004)              
	class UUIComp_Event*                               EventProvider;                                    		// 0x0000BC (0x0004)              
	struct FEnumeratedName                             FocusedCue;                                       		// 0x0000C0 (0x0010)              
	struct FEnumeratedName                             MouseEnterCue;                                    		// 0x0000D0 (0x0010)              
	struct FEnumeratedName                             NavigateUpCue;                                    		// 0x0000E0 (0x0010)              
	struct FEnumeratedName                             NavigateDownCue;                                  		// 0x0000F0 (0x0010)              
	struct FEnumeratedName                             NavigateLeftCue;                                  		// 0x000100 (0x0010)              
	struct FEnumeratedName                             NavigateRightCue;                                 		// 0x000110 (0x0010)              
	struct FScriptDelegate                             __NotifyActiveSkinChanged__Delegate;              		// 0x000120 (0x000C)              
	struct FScriptDelegate                             __OnRawInputKey__Delegate;                        		// 0x00012C (0x000C)              
	struct FScriptDelegate                             __OnRawInputAxis__Delegate;                       		// 0x000138 (0x000C)              
	struct FScriptDelegate                             __OnProcessInputKey__Delegate;                    		// 0x000144 (0x000C)              
	struct FScriptDelegate                             __OnProcessInputAxis__Delegate;                   		// 0x000150 (0x000C)              
	struct FScriptDelegate                             __NotifyPositionChanged__Delegate;                		// 0x00015C (0x000C)              
	struct FScriptDelegate                             __NotifyResolutionChanged__Delegate;              		// 0x000168 (0x000C)              
	struct FScriptDelegate                             __NotifyActiveStateChanged__Delegate;             		// 0x000174 (0x000C)              
	struct FScriptDelegate                             __NotifyVisibilityChanged__Delegate;              		// 0x000180 (0x000C)              
	struct FScriptDelegate                             __OnInitialSceneUpdate__Delegate;                 		// 0x00018C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIScreenObject");
		return pClassPointer;
	};

public:
	void RemovedChild(class UUIScreenObject* WidgetOwner,class UUIObject* OldChild,TArray<class UUIObject*> ExclusionSet);//Engine.UIScreenObject.RemovedChild
	FVector3 DeProject(FVector3* PixelPosition);//Engine.UIScreenObject.DeProject
	class ULocalPlayer* GetPlayerOwner(int PlayerIndex);//Engine.UIScreenObject.GetPlayerOwner
	struct FString GetWidgetPathName();//Engine.UIScreenObject.GetWidgetPathName
	bool FocusFirstControl(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIScreenObject.FocusFirstControl
	bool IsHoldingAlt(int ControllerId);//Engine.UIScreenObject.IsHoldingAlt
	bool IsFocused(int PlayerIndex);//Engine.UIScreenObject.IsFocused
	class UUIObject* GetLastFocusedControl(bool bRecurse,int PlayerIndex);//Engine.UIScreenObject.GetLastFocusedControl
	bool IsVisible();//Engine.UIScreenObject.IsVisible
	void LogCurrentState(int Indent);//Engine.UIScreenObject.LogCurrentState
	bool ActivateStateByClass(class UClass* StateToActivate,int PlayerIndex,class UUIState** StateThatWasAdded);//Engine.UIScreenObject.ActivateStateByClass
	bool OnProcessInputAxis(struct FSubscribedInputEventParameters* EventParms);//Engine.UIScreenObject.OnProcessInputAxis
	void CreatePlayerData(int PlayerIndex,class ULocalPlayer* AddedPlayer);//Engine.UIScreenObject.CreatePlayerData
	bool ReplaceChild(class UUIObject* ExistingChild,class UUIObject* NewChild);//Engine.UIScreenObject.ReplaceChild
	TArray<class UUIObject*> GetChildren(bool bRecurse,TArray<class UUIObject*> ExclusionSet);//Engine.UIScreenObject.GetChildren
	bool IsActive(int PlayerIndex);//Engine.UIScreenObject.IsActive
	class UUIState* GetCurrentState(int PlayerIndex);//Engine.UIScreenObject.GetCurrentState
	bool IsInitialized();//Engine.UIScreenObject.IsInitialized
	class UUIObject* GetFocusedControl(bool bRecurse,int PlayerIndex);//Engine.UIScreenObject.GetFocusedControl
	FVector3 GetPositionVector(bool bIncludeParentPosition);//Engine.UIScreenObject.GetPositionVector
	bool IsEnabled(int PlayerIndex,bool bCheckOwnerChain);//Engine.UIScreenObject.IsEnabled
	bool SetFocusToChild(class UUIObject* ChildToFocus,int PlayerIndex);//Engine.UIScreenObject.SetFocusToChild
	void OnConsoleCommand(class UUIAction_ConsoleCommand* Action);//Engine.UIScreenObject.OnConsoleCommand
	void RequestPrimitiveReview(bool bReinitializePrimitives,bool bReviewPrimitiveUsage);//Engine.UIScreenObject.RequestPrimitiveReview
	bool PlayUISound(struct FEnumeratedName SoundCueName,int PlayerIndex,struct FString ComponentName);//Engine.UIScreenObject.PlayUISound
	void OnShowContentMarketplaceUI(class UUIAction_ShowContentMarketplaceUI* Action);//Engine.UIScreenObject.OnShowContentMarketplaceUI
	FMatrix GetInverseCanvasToScreen();//Engine.UIScreenObject.GetInverseCanvasToScreen
	void SetPosition(float NewValue,unsigned char Face,unsigned char InputType,bool bZeroOrigin);//Engine.UIScreenObject.SetPosition
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIScreenObject.OnSequenceAction
	bool PrevControl(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIScreenObject.PrevControl
	void OnChangeVisibility(class UUIAction_ChangeVisibility* Action);//Engine.UIScreenObject.OnChangeVisibility
	bool IsPressed(int PlayerIndex);//Engine.UIScreenObject.IsPressed
	int GetSupportedPlayerCount();//Engine.UIScreenObject.GetSupportedPlayerCount
	bool SetEnabled(bool bEnabled,int PlayerIndex);//Engine.UIScreenObject.SetEnabled
	void FindEventsOfClass(class UClass* EventClassToFind,TArray<class UUIEvent*>* out_EventInstances,class UUIState* LimitScope,bool bExactClass);//Engine.UIScreenObject.FindEventsOfClass
	void OnInitialSceneUpdate();//Engine.UIScreenObject.OnInitialSceneUpdate
	bool NavigateFocus(class UUIScreenObject* Sender,unsigned char Direction,int PlayerIndex);//Engine.UIScreenObject.NavigateFocus
	unsigned char GetLoginStatus(int ControllerId);//Engine.UIScreenObject.GetLoginStatus
	void DisablePlayerInput(unsigned char PlayerIndex,bool bRecurse);//Engine.UIScreenObject.DisablePlayerInput
	bool ActivateState(class UUIState* StateToActivate,int PlayerIndex);//Engine.UIScreenObject.ActivateState
	bool EnableWidget(int PlayerIndex);//Engine.UIScreenObject.EnableWidget
	bool KillFocus(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIScreenObject.KillFocus
	bool AcceptsPlayerInput(int PlayerIndex);//Engine.UIScreenObject.AcceptsPlayerInput
	void RemovePlayerData(int PlayerIndex,class ULocalPlayer* RemovedPlayer);//Engine.UIScreenObject.RemovePlayerData
	bool GetViewportOffset(FVector2* out_ViewportOffset);//Engine.UIScreenObject.GetViewportOffset
	TArray<class UUIObject*> RemoveChildren(TArray<class UUIObject*> ChildrenToRemove);//Engine.UIScreenObject.RemoveChildren
	void OnShowMessagesUI(class UUIAction_ShowMessagesUI* Action);//Engine.UIScreenObject.OnShowMessagesUI
	bool DeactivateState(class UUIState* StateToRemove,int PlayerIndex);//Engine.UIScreenObject.DeactivateState
	void Initialized();//Engine.UIScreenObject.Initialized
	bool DisableWidget(int PlayerIndex);//Engine.UIScreenObject.DisableWidget
	bool ContainsChildOfClass(class UClass* SearchClass,bool bRecurse);//Engine.UIScreenObject.ContainsChildOfClass
	float GetAspectRatioAutoScaleFactor(class UFont* BaseFont);//Engine.UIScreenObject.GetAspectRatioAutoScaleFactor
	bool RemoveChild(class UUIObject* ExistingChild,TArray<class UUIObject*> ExclusionSet);//Engine.UIScreenObject.RemoveChild
	int GetObjectCount();//Engine.UIScreenObject.GetObjectCount
	struct FVector4 PixelToScreen(FVector2* PixelPosition);//Engine.UIScreenObject.PixelToScreen
	void NotifyVisibilityChanged(class UUIScreenObject* SourceWidget,bool bIsVisible);//Engine.UIScreenObject.NotifyVisibilityChanged
	bool HasLinkConnection();//Engine.UIScreenObject.HasLinkConnection
	void Initialize(class UUIScene* inOwnerScene,class UUIObject* InOwner);//Engine.UIScreenObject.Initialize
	void OnShowFriendInviteUI(class UUIAction_ShowFriendInviteUI* Action);//Engine.UIScreenObject.OnShowFriendInviteUI
	void EnablePlayerInput(unsigned char PlayerIndex,bool bRecurse);//Engine.UIScreenObject.EnablePlayerInput
	void OnShowPlayersUI(class UUIAction_ShowPlayersUI* Action);//Engine.UIScreenObject.OnShowPlayersUI
	void OnShowFriendsUI(class UUIAction_ShowFriendsUI* Action);//Engine.UIScreenObject.OnShowFriendsUI
	float GetViewportScale();//Engine.UIScreenObject.GetViewportScale
	void SetInputMask(unsigned char NewInputMask,bool bRecurse);//Engine.UIScreenObject.SetInputMask
	float GetViewportWidth();//Engine.UIScreenObject.GetViewportWidth
	void NotifyPositionChanged(class UUIScreenObject* Sender);//Engine.UIScreenObject.NotifyPositionChanged
	void NotifyActiveSkinChanged();//Engine.UIScreenObject.NotifyActiveSkinChanged
	void OnShowFeedbackUI(class UUIAction_ShowFeedbackUI* Action);//Engine.UIScreenObject.OnShowFeedbackUI
	bool IsLoggedIn(int ControllerId,bool bRequireOnlineLogin);//Engine.UIScreenObject.IsLoggedIn
	struct FVector4 CanvasToScreen(FVector3* CanvasPosition);//Engine.UIScreenObject.CanvasToScreen
	void NotifyResolutionChanged(FVector2* OldViewportsize,FVector2* NewViewportSize);//Engine.UIScreenObject.NotifyResolutionChanged
	bool FocusLastControl(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIScreenObject.FocusLastControl
	FMatrix GetCanvasToScreen();//Engine.UIScreenObject.GetCanvasToScreen
	class UUIObject* FindChild(struct FName WidgetName,bool bRecurse);//Engine.UIScreenObject.FindChild
	void GetDockedWidgets(TArray<class UUIObject*>* out_DockedWidgets,unsigned char SourceFace,unsigned char TargetFace);//Engine.UIScreenObject.GetDockedWidgets
	void RemovedFromParent(class UUIScreenObject* WidgetOwner);//Engine.UIScreenObject.RemovedFromParent
	bool ConditionalPropagateEnabledState(int PlayerIndex,bool bForce);//Engine.UIScreenObject.ConditionalPropagateEnabledState
	unsigned char GetNATType();//Engine.UIScreenObject.GetNATType
	bool GetViewportOrigin(FVector2* out_ViewportOrigin);//Engine.UIScreenObject.GetViewportOrigin
	void GetSupportedUIActionKeyNames(TArray<struct FName>* out_KeyNames);//Engine.UIScreenObject.GetSupportedUIActionKeyNames
	void InitializePlayerTracking();//Engine.UIScreenObject.InitializePlayerTracking
	int InsertChild(class UUIObject* NewChild,int InsertIndex,bool bRenameExisting);//Engine.UIScreenObject.InsertChild
	float GetPosition(unsigned char Face,unsigned char OutputType,bool bZeroOrigin,bool bIgnoreDockPadding);//Engine.UIScreenObject.GetPosition
	bool CanPropagateFocusFor(class UUIObject* TestChild);//Engine.UIScreenObject.CanPropagateFocusFor
	void RebuildNavigationLinks();//Engine.UIScreenObject.RebuildNavigationLinks
	bool HasActiveStateOfClass(class UClass* StateClass,int PlayerIndex,int* StateIndex);//Engine.UIScreenObject.HasActiveStateOfClass
	void OnShowAchievementsUI(class UUIAction_ShowAchievementsUI* Action);//Engine.UIScreenObject.OnShowAchievementsUI
	bool IsNeverFocused();//Engine.UIScreenObject.IsNeverFocused
	float GetBounds(unsigned char Dimension,unsigned char OutputType,bool bIgnoreDockPadding);//Engine.UIScreenObject.GetBounds
	bool IsHoldingCtrl(int ControllerId);//Engine.UIScreenObject.IsHoldingCtrl
	void NotifyActiveStateChanged(class UUIScreenObject* Sender,int PlayerIndex,class UUIState* NewlyActiveState,class UUIState* PreviouslyActiveState);//Engine.UIScreenObject.NotifyActiveStateChanged
	bool OnRawInputKey(struct FInputEventParameters* EventParms);//Engine.UIScreenObject.OnRawInputKey
	FVector3 Project(FVector3* CanvasPosition);//Engine.UIScreenObject.Project
	int GetBestPlayerIndex();//Engine.UIScreenObject.GetBestPlayerIndex
	void SetVisibility(bool bIsVisible);//Engine.UIScreenObject.SetVisibility
	bool IsHidden();//Engine.UIScreenObject.IsHidden
	class UUIScreenObject* GetParent();//Engine.UIScreenObject.GetParent
	bool CanPlayOnline(int ControllerId);//Engine.UIScreenObject.CanPlayOnline
	FVector2 ScreenToPixel(struct FVector4* ScreenPosition);//Engine.UIScreenObject.ScreenToPixel
	int GetBestControllerId();//Engine.UIScreenObject.GetBestControllerId
	class UUIObject* FindChildUsingID(struct FWIDGET_ID WidgetID,bool bRecurse);//Engine.UIScreenObject.FindChildUsingID
	bool CanAcceptFocus(int PlayerIndex);//Engine.UIScreenObject.CanAcceptFocus
	void OverrideLastFocusedControl(int PlayerIndex,class UUIObject* ChildToFocus);//Engine.UIScreenObject.OverrideLastFocusedControl
	void OnShowMembershipMarketplaceUI(class UUIAction_ShowMembershipMarketplaceUI* Action);//Engine.UIScreenObject.OnShowMembershipMarketplaceUI
	bool DeactivateStateByClass(class UClass* StateToRemove,int PlayerIndex,class UUIState** StateThatWasRemoved);//Engine.UIScreenObject.DeactivateStateByClass
	class UUIObject* CreateWidget(class UUIScreenObject* Owner,class UClass* WidgetClass,class UObject* WidgetArchetype,struct FName WidgetName);//Engine.UIScreenObject.CreateWidget
	int GetActivePlayerCount();//Engine.UIScreenObject.GetActivePlayerCount
	float GetViewportHeight();//Engine.UIScreenObject.GetViewportHeight
	void RequestFormattingUpdate();//Engine.UIScreenObject.RequestFormattingUpdate
	int FindChildIndex(struct FName WidgetName);//Engine.UIScreenObject.FindChildIndex
	bool ContainsChild(class UUIObject* Child,bool bRecurse);//Engine.UIScreenObject.ContainsChild
	bool NextControl(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIScreenObject.NextControl
	bool IsHoldingShift(int ControllerId);//Engine.UIScreenObject.IsHoldingShift
	void PostInitialize();//Engine.UIScreenObject.PostInitialize
	void OnSetControllerId(class UUIAction_SetControllerId* Action);//Engine.UIScreenObject.OnSetControllerId
	bool GetViewportSize(FVector2* out_ViewportSize);//Engine.UIScreenObject.GetViewportSize
	bool OnRawInputAxis(struct FInputEventParameters* EventParms);//Engine.UIScreenObject.OnRawInputAxis
	FVector3 ScreenToCanvas(struct FVector4* ScreenPosition);//Engine.UIScreenObject.ScreenToCanvas
	void AddedChild(class UUIScreenObject* WidgetOwner,class UUIObject* NewChild);//Engine.UIScreenObject.AddedChild
	void RequestSceneUpdate(bool bDockingStackChanged,bool bPositionsChanged,bool bNavLinksOutdated,bool bWidgetStylesChanged);//Engine.UIScreenObject.RequestSceneUpdate
	bool NextControlAPB(class UUIScreenObject* pSender);//Engine.UIScreenObject.NextControlAPB
	bool OnProcessInputKey(struct FSubscribedInputEventParameters* EventParms);//Engine.UIScreenObject.OnProcessInputKey
	void ActivateEventByClass(int PlayerIndex,class UClass* EventClassToActivate,class UObject* InEventActivator,bool bActivateImmediately,TArray<int> IndicesToActivate,TArray<class UUIEvent*>* out_ActivatedEvents);//Engine.UIScreenObject.ActivateEventByClass
	bool PrevControlAPB(class UUIScreenObject* pSender);//Engine.UIScreenObject.PrevControlAPB
	bool SetFocus(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIScreenObject.SetFocus
	FVector3 PixelToCanvas(FVector2* PixelPosition);//Engine.UIScreenObject.PixelToCanvas
	void OnShowGamerCardUI(class UUIAction_ShowGamerCardUI* Action);//Engine.UIScreenObject.OnShowGamerCardUI
	void PrivateSetVisibility(bool bVisible);//Engine.UIScreenObject.PrivateSetVisibility
};
UClass* UUIScreenObject::pClassPointer = NULL;

//0x000000 (0x00004C - 0x00004C)
//UIComponent[0x1032B810]
class UUIComponent : public UComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComponent");
		return pClassPointer;
	};
};
UClass* UUIComponent::pClassPointer = NULL;

//0x000020 (0x00006C - 0x00004C)
//UIComp_Event[0x1032B480]
class UUIComp_Event : public UUIComponent
{
public:
	TArray<struct FDefaultEventSpecification>          DefaultEvents;                                    		// 0x00004C (0x000C)              
	class UUISequence*                                 EventContainer;                                   		// 0x000058 (0x0004)              
	class UUIEvent_ProcessInput*                       InputProcessor;                                   		// 0x00005C (0x0004)              
	TArray<struct FName>                               DisabledEventAliases;                             		// 0x000060 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_Event");
		return pClassPointer;
	};

public:
	void RegisterInputEvents(class UUIState* InputEventOwner,int PlayerIndex);//Engine.UIComp_Event.RegisterInputEvents
	void UnregisterInputEvents(class UUIState* InputEventOwner,int PlayerIndex);//Engine.UIComp_Event.UnregisterInputEvents
};
UClass* UUIComp_Event::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UIEventContainer[0x1032B350]
class UUIEventContainer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEventContainer");
		return pClassPointer;
	};

public:
	void GetUIEvents(TArray<class UUIEvent*>* out_Events,class UClass* LimitClass);//Engine.UIEventContainer.GetUIEvents
	void RemoveSequenceObjects(TArray<class USequenceObject*> ObjectsToRemove);//Engine.UIEventContainer.RemoveSequenceObjects
	bool AddSequenceObject(class USequenceObject* NewObj,bool bRecurse);//Engine.UIEventContainer.AddSequenceObject
	void RemoveSequenceObject(class USequenceObject* ObjectToRemove);//Engine.UIEventContainer.RemoveSequenceObject
};
UClass* UUIEventContainer::pClassPointer = NULL;

//0x00003C (0x000080 - 0x000044)
//DataStoreClient[0x1032B220]
class UDataStoreClient : public UUIRoot
{
public:
	TArray<struct FString>                             GlobalDataStoreClasses;                           		// 0x000044 (0x000C)              
	TArray<class UUIDataStore*>                        GlobalDataStores;                                 		// 0x000050 (0x000C)              
	TArray<struct FString>                             PlayerDataStoreClassNames;                        		// 0x00005C (0x000C)              
	TArray<class UClass*>                              PlayerDataStoreClasses;                           		// 0x000068 (0x000C)              
	TArray<struct FPlayerDataStoreGroup>               PlayerDataStores;                                 		// 0x000074 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DataStoreClient");
		return pClassPointer;
	};

public:
	class UClass* FindDataStoreClass(class UClass* RequiredMetaClass);//Engine.DataStoreClient.FindDataStoreClass
	void DebugDumpDataStoreInfo(bool bVerbose);//Engine.DataStoreClient.DebugDumpDataStoreInfo
	void NotifyGameSessionEnded();//Engine.DataStoreClient.NotifyGameSessionEnded
	int FindPlayerDataStoreIndex(class ULocalPlayer* PlayerOwner);//Engine.DataStoreClient.FindPlayerDataStoreIndex
	bool RegisterDataStore(class UUIDataStore* DataStore,class ULocalPlayer* PlayerOwner);//Engine.DataStoreClient.RegisterDataStore
	bool UnregisterDataStore(class UUIDataStore* DataStore);//Engine.DataStoreClient.UnregisterDataStore
	void GetAvailableDataStores(class UUIScene* CurrentScene,TArray<class UUIDataStore*>* out_DataStores);//Engine.DataStoreClient.GetAvailableDataStores
	class UUIDataStore* FindDataStore(struct FName DataStoreTag,class ULocalPlayer* PlayerOwner);//Engine.DataStoreClient.FindDataStore
	class UUIDataStore* CreateDataStore(class UClass* DataStoreClass);//Engine.DataStoreClient.CreateDataStore
};
UClass* UDataStoreClient::pClassPointer = NULL;

//0x000030 (0x000074 - 0x000044)
//Interaction[0x1032B0F0]
class UInteraction : public UUIRoot
{
public:
	struct FScriptDelegate                             __OnReceivedNativeInputKey__Delegate;             		// 0x000044 (0x000C)              
	struct FScriptDelegate                             __OnReceivedNativeInputAxis__Delegate;            		// 0x000050 (0x000C)              
	struct FScriptDelegate                             __OnReceivedNativeInputChar__Delegate;            		// 0x00005C (0x000C)              
	struct FScriptDelegate                             __OnInitialize__Delegate;                         		// 0x000068 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Interaction");
		return pClassPointer;
	};

public:
	void Initialized();//Engine.Interaction.Initialized
	bool OnReceivedNativeInputKey(int ControllerId,struct FName Key,unsigned char EventType,float AmountDepressed,bool bGamepad);//Engine.Interaction.OnReceivedNativeInputKey
	void Init();//Engine.Interaction.Init
	void NotifyPlayerAdded(int PlayerIndex,class ULocalPlayer* AddedPlayer);//Engine.Interaction.NotifyPlayerAdded
	void OnInitialize();//Engine.Interaction.OnInitialize
	bool OnReceivedNativeInputChar(int ControllerId,struct FString Unicode);//Engine.Interaction.OnReceivedNativeInputChar
	void Tick(float DeltaTime);//Engine.Interaction.Tick
	void NotifyPlayerRemoved(int PlayerIndex,class ULocalPlayer* RemovedPlayer);//Engine.Interaction.NotifyPlayerRemoved
	bool OnReceivedNativeInputAxis(int ControllerId,struct FName Key,float Delta,float DeltaTime,bool bGamepad);//Engine.Interaction.OnReceivedNativeInputAxis
	void NotifyGameSessionEnded();//Engine.Interaction.NotifyGameSessionEnded
	void ChangedInputLanguage(struct FString sInputLangId,bool bHasIME,bool bIMEActive);//Engine.Interaction.ChangedInputLanguage
};
UClass* UInteraction::pClassPointer = NULL;

//0x000028 (0x00009C - 0x000074)
//cDebugPageManager[0x1032AFC0]
class UcDebugPageManager : public UInteraction
{
public:
	TArray<class UcDebugPage*>                         m_vDebugPages;                                    		// 0x000074 (0x000C)              
	int                                                m_nCurrentPageIndex;                              		// 0x000080 (0x0004)              
	unsigned long                                      m_bHaveDisabledHUD : 1;                           		// 0x000084 (0x0004) [0x00000001] 
	unsigned long                                      bDebugPageVisible : 1;                            		// 0x000084 (0x0004) [0x00000002] 
	class UCanvas*                                     m_Canvas;                                         		// 0x000088 (0x0004)              
	int                                                m_nIndexHighlighted;                              		// 0x00008C (0x0004)              
	int                                                m_nFirstIndexDisplayed;                           		// 0x000090 (0x0004)              
	class UTexture2D*                                  DefaultTexture_Black;                             		// 0x000094 (0x0004)              
	class UTexture2D*                                  DefaultTexture_White;                             		// 0x000098 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cDebugPageManager");
		return pClassPointer;
	};

public:
	void DrawTitleBar();//Engine.cDebugPageManager.DrawTitleBar
	void NotifyGameSessionEnded();//Engine.cDebugPageManager.NotifyGameSessionEnded
	void DoLevelChangeCleanup();//Engine.cDebugPageManager.DoLevelChangeCleanup
	void ClearDebugPages();//Engine.cDebugPageManager.ClearDebugPages
	bool InputKey(int ControllerId,struct FName Key,unsigned char Event,float AmountDepressed,bool bGamepad);//Engine.cDebugPageManager.InputKey
	void DrawIndexPage();//Engine.cDebugPageManager.DrawIndexPage
	void IndexUp();//Engine.cDebugPageManager.IndexUp
	void PostRender_DebugPages(class UCanvas* Canvas);//Engine.cDebugPageManager.PostRender_DebugPages
	void RemoveDebugPage(class UcDebugPage* PageToRemove);//Engine.cDebugPageManager.RemoveDebugPage
	void Destroyed();//Engine.cDebugPageManager.Destroyed
	void IndexDown();//Engine.cDebugPageManager.IndexDown
	void AddDebugPage(class UcDebugPage* PageToAdd);//Engine.cDebugPageManager.AddDebugPage
	void Tick(float fDeltaTime);//Engine.cDebugPageManager.Tick
};
UClass* UcDebugPageManager::pClassPointer = NULL;

//0x0000CC (0x000140 - 0x000074)
//cDistrictVisualiser[0x1032AE90]
class UcDistrictVisualiser : public UInteraction
{
public:
	float                                              MAX_ZOOM_LEVEL;                                   		// 0x000074 (0x0004)              
	float                                              MOUSE_DRAG_SPEED;                                 		// 0x000078 (0x0004)              
	int                                                MAX_DEBUG_TEXT_LINES;                             		// 0x00007C (0x0004)              
	struct FMap_Mirror                                 m_tEntityTypes;                                   		// 0x000080 (0x003C)              
	struct FMap_Mirror                                 m_tEntities;                                      		// 0x0000BC (0x003C)              
	class UcEntity*                                    m_pSelectedEntity;                                		// 0x0000F8 (0x0004)              
	TArray<struct FString>                             OutputTextArr;                                    		// 0x0000FC (0x000C)              
	FVector2                                           m_ratio2d;                                        		// 0x000108 (0x0008)              
	FVector2                                           m_mousePos;                                       		// 0x000110 (0x0008)              
	float                                              m_fZoomLevel;                                     		// 0x000118 (0x0004)              
	FVector2                                           m_ViewportOffset;                                 		// 0x00011C (0x0008)              
	FVector2                                           m_mapCentre;                                      		// 0x000124 (0x0008)              
	unsigned long                                      m_bMouseKeyXPressed : 1;                          		// 0x00012C (0x0004) [0x00000001] 
	unsigned long                                      m_bShowDVis : 1;                                  		// 0x00012C (0x0004) [0x00000002] 
	float                                              aMouseX;                                          		// 0x000130 (0x0004)              
	float                                              aMouseY;                                          		// 0x000134 (0x0004)              
	struct FName                                       DVis_TOGGLE_KEY;                                  		// 0x000138 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cDistrictVisualiser");
		return pClassPointer;
	};

public:
	FVector2 GetOffset();//Engine.cDistrictVisualiser.GetOffset
	void Remove(struct FString sType,class UObject* pObject);//Engine.cDistrictVisualiser.Remove
	void NativeOnClicked();//Engine.cDistrictVisualiser.NativeOnClicked
	void OutputTextLine(struct FString Text);//Engine.cDistrictVisualiser.OutputTextLine
	bool InputAxis(int ControllerId,struct FName Key,float Delta,float DeltaTime,bool bGamepad);//Engine.cDistrictVisualiser.InputAxis
	bool InputKey(int ControllerId,struct FName Key,unsigned char Event,float AmountDepressed,bool bGamepad);//Engine.cDistrictVisualiser.InputKey
	void Initialized();//Engine.cDistrictVisualiser.Initialized
	FVector2 GetVPToWRatio();//Engine.cDistrictVisualiser.GetVPToWRatio
	void RemoveAllEntities();//Engine.cDistrictVisualiser.RemoveAllEntities
	void Register(struct FString sType,struct FtEntityType tType,class UcEntity* pEntity,class UTexture2D* pTexture);//Engine.cDistrictVisualiser.Register
	float GetZoomLevel();//Engine.cDistrictVisualiser.GetZoomLevel
	void ToggleEntityVisibility(struct FString sKey);//Engine.cDistrictVisualiser.ToggleEntityVisibility
	void OutputText(struct FString Text);//Engine.cDistrictVisualiser.OutputText
	void RenderMap(class UCanvas* Canvas);//Engine.cDistrictVisualiser.RenderMap
	void PostRender(class UCanvas* Canvas);//Engine.cDistrictVisualiser.PostRender
};
UClass* UcDistrictVisualiser::pClassPointer = NULL;

//0x000158 (0x0001CC - 0x000074)
//Console[0x1032AD60]
class UConsole : public UInteraction
{
public:
	class ULocalPlayer*                                ConsoleTargetPlayer;                              		// 0x000074 (0x0004)              
	class UTexture2D*                                  DefaultTexture_Black;                             		// 0x000078 (0x0004)              
	class UTexture2D*                                  DefaultTexture_White;                             		// 0x00007C (0x0004)              
	struct FName                                       ConsoleKey;                                       		// 0x000080 (0x0008)              
	struct FName                                       TypeKey;                                          		// 0x000088 (0x0008)              
	int                                                MaxScrollbackSize;                                		// 0x000090 (0x0004)              
	TArray<struct FString>                             Scrollback;                                       		// 0x000094 (0x000C)              
	int                                                SBHead;                                           		// 0x0000A0 (0x0004)              
	int                                                SBPos;                                            		// 0x0000A4 (0x0004)              
	int                                                HistoryTop;                                       		// 0x0000A8 (0x0004)              
	int                                                HistoryBot;                                       		// 0x0000AC (0x0004)              
	int                                                HistoryCur;                                       		// 0x0000B0 (0x0004)              
	struct FString                                     History[0x10];                                    		// 0x0000B4 (0x00C0)              
	unsigned long                                      bNavigatingHistory : 1;                           		// 0x000174 (0x0004) [0x00000001] 
	unsigned long                                      bCaptureKeyInput : 1;                             		// 0x000174 (0x0004) [0x00000002] 
	unsigned long                                      bCtrl : 1;                                        		// 0x000174 (0x0004) [0x00000004] 
	unsigned long                                      bEnableUI : 1;                                    		// 0x000174 (0x0004) [0x00000008] 
	unsigned long                                      m_bIsTypingBarActive : 1;                         		// 0x000174 (0x0004) [0x00000010] 
	unsigned long                                      bAutoCompleteLocked : 1;                          		// 0x000174 (0x0004) [0x00000020] 
	unsigned long                                      bRequireCtrlToNavigateAutoComplete : 1;           		// 0x000174 (0x0004) [0x00000040] 
	unsigned long                                      bIsRuntimeAutoCompleteUpToDate : 1;               		// 0x000174 (0x0004) [0x00000080] 
	struct FString                                     TypedStr;                                         		// 0x000178 (0x000C)              
	int                                                TypedStrPos;                                      		// 0x000184 (0x0004)              
	TArray<struct FAutoCompleteCommand>                ManualAutoCompleteList;                           		// 0x000188 (0x000C)              
	TArray<struct FAutoCompleteCommand>                AutoCompleteList;                                 		// 0x000194 (0x000C)              
	int                                                AutoCompleteIndex;                                		// 0x0001A0 (0x0004)              
	struct FAutoCompleteNode                           AutoCompleteTree;                                 		// 0x0001A4 (0x001C)              
	TArray<int>                                        AutoCompleteIndices;                              		// 0x0001C0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Console");
		return pClassPointer;
	};

public:
	void StartTyping(struct FString Text);//Engine.Console.StartTyping
	void ConsoleCommand(struct FString Command);//Engine.Console.ConsoleCommand
	void BuildRuntimeAutoCompleteList(bool bForce);//Engine.Console.BuildRuntimeAutoCompleteList
	void SetCursorPos(int Position);//Engine.Console.SetCursorPos
	void SetInputText(struct FString Text);//Engine.Console.SetInputText
	void UpdateCompleteIndices();//Engine.Console.UpdateCompleteIndices
	void PostRender_Console(class UCanvas* Canvas);//Engine.Console.PostRender_Console
	bool InputChar(int ControllerId,struct FString Unicode);//Engine.Console.InputChar
	bool ProcessControlKey(struct FName Key,unsigned char Event);//Engine.Console.ProcessControlKey
	bool InputKey(int ControllerId,struct FName Key,unsigned char Event,float AmountDepressed,bool bGamepad);//Engine.Console.InputKey
	void FlushPlayerInput();//Engine.Console.FlushPlayerInput
	void ClearOutput();//Engine.Console.ClearOutput
	void OutputTextLine(struct FString Text);//Engine.Console.OutputTextLine
	void OutputText(struct FString Text);//Engine.Console.OutputText
	void Initialized();//Engine.Console.Initialized
	void PurgeCommandFromHistory(struct FString Command);//Engine.Console.PurgeCommandFromHistory
	void AppendInputText(struct FString Text);//Engine.Console.AppendInputText
};
UClass* UConsole::pClassPointer = NULL;

//0x00006C (0x0000E0 - 0x000074)
//Input[0x1032AC30]
class UInput : public UInteraction
{
public:
	TArray<struct FKeyBind>                            Bindings;                                         		// 0x000074 (0x000C)              
	TArray<struct FName>                               PressedKeys;                                      		// 0x000080 (0x000C)              
	unsigned char                                      CurrentEvent;                                     		// 0x00008C (0x0001)              PROPERTY: EInputEvent
	unsigned char                                      _0x00008D[0x3];                                   		// 0x00008D (0x0003) MISSED OFFSET
	float                                              CurrentDelta;                                     		// 0x000090 (0x0004)              
	float                                              CurrentDeltaTime;                                 		// 0x000094 (0x0004)              
	unsigned char                                      NameToPtr[0x3C];                                  		// 0x000098 (0x003C)              UNKNOWN PROPERTY: MapProperty
	TArray<DWORD>                                      AxisArray;                                        		// 0x0000D4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Input");
		return pClassPointer;
	};

public:
	void ResetInput();//Engine.Input.ResetInput
	struct FString GetBind(struct FName Key);//Engine.Input.GetBind
};
UClass* UInput::pClassPointer = NULL;

//0x000084 (0x000164 - 0x0000E0)
//PlayerInput[0x1032AB00]
class UPlayerInput : public UInput
{
public:
	unsigned long                                      bUsingGamepad : 1;                                		// 0x0000E0 (0x0004) [0x00000001] 
	unsigned long                                      bInvertMouse : 1;                                 		// 0x0000E0 (0x0004) [0x00000002] 
	unsigned long                                      bInvertTurn : 1;                                  		// 0x0000E0 (0x0004) [0x00000004] 
	unsigned long                                      bEnableMouseSmoothing : 1;                        		// 0x0000E0 (0x0004) [0x00000008] 
	unsigned long                                      bEnableFOVScaling : 1;                            		// 0x0000E0 (0x0004) [0x00000010] 
	struct FName                                       LastAxisKeyName;                                  		// 0x0000E4 (0x0008)              
	float                                              MouseSensitivity;                                 		// 0x0000EC (0x0004)              
	float                                              aBaseX;                                           		// 0x0000F0 (0x0004)              
	float                                              aBaseY;                                           		// 0x0000F4 (0x0004)              
	float                                              aBaseZ;                                           		// 0x0000F8 (0x0004)              
	float                                              aMouseX;                                          		// 0x0000FC (0x0004)              
	float                                              aMouseY;                                          		// 0x000100 (0x0004)              
	float                                              aForward;                                         		// 0x000104 (0x0004)              
	float                                              aTurn;                                            		// 0x000108 (0x0004)              
	float                                              aStrafe;                                          		// 0x00010C (0x0004)              
	float                                              aUp;                                              		// 0x000110 (0x0004)              
	float                                              aLookUp;                                          		// 0x000114 (0x0004)              
	float                                              aPS3AccelX;                                       		// 0x000118 (0x0004)              
	float                                              aPS3AccelY;                                       		// 0x00011C (0x0004)              
	float                                              aPS3AccelZ;                                       		// 0x000120 (0x0004)              
	float                                              aPS3Gyro;                                         		// 0x000124 (0x0004)              
	float                                              RawJoyUp;                                         		// 0x000128 (0x0004)              
	float                                              RawJoyRight;                                      		// 0x00012C (0x0004)              
	float                                              RawJoyLookRight;                                  		// 0x000130 (0x0004)              
	float                                              RawJoyLookUp;                                     		// 0x000134 (0x0004)              
	float                                              MoveForwardSpeed;                                 		// 0x000138 (0x0004)              
	float                                              MoveStrafeSpeed;                                  		// 0x00013C (0x0004)              
	float                                              LookRightScale;                                   		// 0x000140 (0x0004)              
	float                                              LookUpScale;                                      		// 0x000144 (0x0004)              
	unsigned char                                      bStrafe;                                          		// 0x000148 (0x0001)              PROPERTY: 
	unsigned char                                      bXAxis;                                           		// 0x000149 (0x0001)              PROPERTY: 
	unsigned char                                      bYAxis;                                           		// 0x00014A (0x0001)              PROPERTY: 
	unsigned char                                      _0x00014B[0x1];                                   		// 0x00014B (0x0001) MISSED OFFSET
	float                                              ZeroTime[0x2];                                    		// 0x00014C (0x0008)              
	float                                              SmoothedMouse[0x2];                               		// 0x000154 (0x0008)              
	int                                                MouseSamples;                                     		// 0x00015C (0x0004)              
	float                                              MouseSamplingTotal;                               		// 0x000160 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlayerInput");
		return pClassPointer;
	};

public:
	void SmartJump();//Engine.PlayerInput.SmartJump
	void PostProcessInput(float DeltaTime);//Engine.PlayerInput.PostProcessInput
	float SmoothMouse(float aMouse,float DeltaTime,unsigned char* SampleCount,int Index);//Engine.PlayerInput.SmoothMouse
	void ClearSmoothing();//Engine.PlayerInput.ClearSmoothing
	bool InvertTurn();//Engine.PlayerInput.InvertTurn
	void PlayerInput(float DeltaTime);//Engine.PlayerInput.PlayerInput
	void AdjustMouseSensitivity(float FOVScale);//Engine.PlayerInput.AdjustMouseSensitivity
	void PreProcessInput(float DeltaTime);//Engine.PlayerInput.PreProcessInput
	void Jump();//Engine.PlayerInput.Jump
	void DrawHUD(class AHUD* H);//Engine.PlayerInput.DrawHUD
	void ProcessInputMatching(float DeltaTime);//Engine.PlayerInput.ProcessInputMatching
	void SetSensitivity(float F);//Engine.PlayerInput.SetSensitivity
};
UClass* UPlayerInput::pClassPointer = NULL;

//0x000000 (0x000074 - 0x000074)
//PlayerManagerInteraction[0x1032A9D0]
class UPlayerManagerInteraction : public UInteraction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlayerManagerInteraction");
		return pClassPointer;
	};
};
UClass* UPlayerManagerInteraction::pClassPointer = NULL;

//0x000148 (0x0001BC - 0x000074)
//UIInteraction[0x1032A8A0]
class UUIInteraction : public UInteraction
{
public:
	DWORD                                              VfTable_FExec;                                    		// 0x000074 (0x0004)              
	DWORD                                              VfTable_FGlobalDataStoreClientManager;            		// 0x000078 (0x0004)              
	class UClass*                                      SceneClientClass;                                 		// 0x00007C (0x0004)              
	struct FString                                     SceneClientClassName;                             		// 0x000080 (0x000C)              
	class UGameUISceneClient*                          SceneClient;                                      		// 0x00008C (0x0004)              
	struct FString                                     UISkinName;                                       		// 0x000090 (0x000C)              
	TArray<struct FName>                               UISoundCueNames;                                  		// 0x00009C (0x000C)              
	TArray<struct FName>                               SupportedDoubleClickKeys;                         		// 0x0000A8 (0x000C)              
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x0000B4 (0x0004)              
	class UUIInputConfiguration*                       UIInputConfig;                                    		// 0x0000B8 (0x0004)              
	unsigned char                                      WidgetInputAliasLookupTable[0x3C];                		// 0x0000BC (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned long                                      bProcessInput : 1;                                		// 0x0000F8 (0x0004) [0x00000001] 
	unsigned long                                      bConsumeInput : 1;                                		// 0x0000F8 (0x0004) [0x00000002] 
	unsigned long                                      bDisableToolTips : 1;                             		// 0x0000F8 (0x0004) [0x00000004] 
	unsigned long                                      bFocusOnActive : 1;                               		// 0x0000F8 (0x0004) [0x00000008] 
	unsigned long                                      bCaptureUnprocessedInput : 1;                     		// 0x0000F8 (0x0004) [0x00000010] 
	unsigned long                                      bFocusedStateRules : 1;                           		// 0x0000F8 (0x0004) [0x00000020] 
	unsigned long                                      bIsUIPrimitiveSceneInitialized : 1;               		// 0x0000F8 (0x0004) [0x00000040] 
	float                                              UIJoystickDeadZone;                               		// 0x0000FC (0x0004)              
	float                                              UIAxisMultiplier;                                 		// 0x000100 (0x0004)              
	float                                              AxisRepeatDelay;                                  		// 0x000104 (0x0004)              
	float                                              MouseButtonRepeatDelay;                           		// 0x000108 (0x0004)              
	float                                              DoubleClickTriggerSeconds;                        		// 0x00010C (0x0004)              
	int                                                DoubleClickPixelTolerance;                        		// 0x000110 (0x0004)              
	float                                              ToolTipInitialDelaySeconds;                       		// 0x000114 (0x0004)              
	float                                              ToolTipExpirationSeconds;                         		// 0x000118 (0x0004)              
	struct FUIKeyRepeatData                            MouseButtonRepeatInfo;                            		// 0x00011C (0x0010)              
	unsigned char                                      AxisEmulationDefinitions[0x3C];                   		// 0x00012C (0x003C)              UNKNOWN PROPERTY: MapProperty
	struct FUIAxisEmulationData                        AxisInputEmulation[0x4];                          		// 0x000168 (0x0050)              
	DWORD                                              CanvasScene;                                      		// 0x0001B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIInteraction");
		return pClassPointer;
	};

public:
	void NotifyPlayerRemoved(int PlayerIndex,class ULocalPlayer* RemovedPlayer);//Engine.UIInteraction.NotifyPlayerRemoved
	bool IsLoggedIn(int ControllerId,bool bRequireOnlineLogin);//Engine.UIInteraction.IsLoggedIn
	class UUIObject* CreateTransientWidget(class UClass* WidgetClass,struct FName WidgetTag,class UUIObject* Owner);//Engine.UIInteraction.CreateTransientWidget
	bool CloseScene(class UUIScene* Scene);//Engine.UIInteraction.CloseScene
	bool OpenScene(class UUIScene* Scene,class ULocalPlayer* SceneOwner,class UUIScene** OpenedScene);//Engine.UIInteraction.OpenScene
	class UUIScene* FindSceneByTag(struct FName SceneTag,class ULocalPlayer* SceneOwner);//Engine.UIInteraction.FindSceneByTag
	int GetPlayerControllerId(int PlayerIndex);//Engine.UIInteraction.GetPlayerControllerId
	void NotifyPlayerAdded(int PlayerIndex,class ULocalPlayer* AddedPlayer);//Engine.UIInteraction.NotifyPlayerAdded
	void SetMousePosition(int NewMouseX,int NewMouseY,bool bScaledPosition);//Engine.UIInteraction.SetMousePosition
	class UDataStoreClient* GetDataStoreClient();//Engine.UIInteraction.GetDataStoreClient
	bool HasLinkConnection();//Engine.UIInteraction.HasLinkConnection
	bool MergeScene(class UUIScene* SourceScene,class UUIScene* SceneTarget);//Engine.UIInteraction.MergeScene
	class UUIScene* CreateScene(class UClass* SceneClass,struct FName SceneTag,class UUIScene* SceneTemplate);//Engine.UIInteraction.CreateScene
	class UUIScene* GetTransientScene();//Engine.UIInteraction.GetTransientScene
	int GetPlayerCount();//Engine.UIInteraction.GetPlayerCount
	int GetPlayerIndex(int ControllerId);//Engine.UIInteraction.GetPlayerIndex
	unsigned char GetNATType();//Engine.UIInteraction.GetNATType
	void NotifyGameSessionEnded();//Engine.UIInteraction.NotifyGameSessionEnded
	unsigned char GetLoginStatus(int ControllerId);//Engine.UIInteraction.GetLoginStatus
	bool PlayUISound(struct FEnumeratedName SoundCueName,int PlayerIndex,struct FString ComponentName);//Engine.UIInteraction.PlayUISound
	bool IsMenuLevel(struct FString MapName);//Engine.UIInteraction.IsMenuLevel
	bool CanPlayOnline(int ControllerId);//Engine.UIInteraction.CanPlayOnline
};
UClass* UUIInteraction::pClassPointer = NULL;

//0x000000 (0x000044 - 0x000044)
//UIAnimation[0x1032A770]
class UUIAnimation : public UUIRoot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAnimation");
		return pClassPointer;
	};
};
UClass* UUIAnimation::pClassPointer = NULL;

//0x000018 (0x00005C - 0x000044)
//UIInputConfiguration[0x1032A640]
class UUIInputConfiguration : public UUIRoot
{
public:
	TArray<struct FUIInputAliasClassMap>               WidgetInputAliases;                               		// 0x000044 (0x000C)              
	TArray<struct FUIAxisEmulationDefinition>          AxisEmulationDefinitions;                         		// 0x000050 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIInputConfiguration");
		return pClassPointer;
	};

public:
	void LoadInputAliasClasses();//Engine.UIInputConfiguration.LoadInputAliasClasses
};
UClass* UUIInputConfiguration::pClassPointer = NULL;

//0x000000 (0x000044 - 0x000044)
//UILayerBase[0x1032A510]
class UUILayerBase : public UUIRoot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UILayerBase");
		return pClassPointer;
	};
};
UClass* UUILayerBase::pClassPointer = NULL;

//0x0000B4 (0x0000F8 - 0x000044)
//UISceneClient[0x1032A3E0]
class UUISceneClient : public UUIRoot
{
public:
	DWORD                                              VfTable_FExec;                                    		// 0x000044 (0x0004)              
	DWORD                                              VfTable_FCallbackEventDevice;                     		// 0x000048 (0x0004)              
	DWORD                                              RenderViewport;                                   		// 0x00004C (0x0004)              
	class UUISkin*                                     ActiveSkin;                                       		// 0x000050 (0x0004)              
	struct FIntPoint                                   MousePosition;                                    		// 0x000054 (0x0008)              
	class UUIObject*                                   ActiveControl;                                    		// 0x00005C (0x0004)              
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x000060 (0x0004)              
	class UMaterialInstanceConstant*                   OpacityParameter;                                 		// 0x000064 (0x0004)              
	struct FName                                       OpacityParameterName;                             		// 0x000068 (0x0008)              
	FMatrix                                            CanvasToScreen;                                   		// 0x000070 (0x0040)              
	FMatrix                                            InvCanvasToScreen;                                		// 0x0000B0 (0x0040)              
	class UPostProcessChain*                           UIScenePostProcess;                               		// 0x0000F0 (0x0004)              
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x0000F4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UISceneClient");
		return pClassPointer;
	};

public:
	bool OpenScene(class UUIScene* Scene,class ULocalPlayer* SceneOwner,class UUIScene** OpenedScene);//Engine.UISceneClient.OpenScene
	bool CloseScene(class UUIScene* Scene);//Engine.UISceneClient.CloseScene
	bool ChangeActiveSkin(class UUISkin* NewActiveSkin);//Engine.UISceneClient.ChangeActiveSkin
	FMatrix GetCanvasToScreen(class UUIObject* Widget);//Engine.UISceneClient.GetCanvasToScreen
	bool IsSceneInitialized(class UUIScene* Scene);//Engine.UISceneClient.IsSceneInitialized
	bool IsUIActive(int Flags);//Engine.UISceneClient.IsUIActive
	class UUIScene* GetActiveScene();//Engine.UISceneClient.GetActiveScene
	FMatrix GetInverseCanvasToScreen(class UUIObject* Widget);//Engine.UISceneClient.GetInverseCanvasToScreen
	void UpdateCanvasToScreen();//Engine.UISceneClient.UpdateCanvasToScreen
	bool ChangeMouseCursor(struct FName CursorName);//Engine.UISceneClient.ChangeMouseCursor
	void SetMousePosition(int NewMouseX,int NewMouseY,bool bScaledPosition);//Engine.UISceneClient.SetMousePosition
	bool InitializeScene(class UUIScene* Scene,class ULocalPlayer* SceneOwner,class UUIScene** InitializedScene);//Engine.UISceneClient.InitializeScene
};
UClass* UUISceneClient::pClassPointer = NULL;

//0x00002A (0x00006E - 0x000044)
//UIState[0x1032A2B0]
class UUIState : public UUIRoot
{
public:
	DWORD                                              VfTable_IUIEventContainer;                        		// 0x000044 (0x0004)              
	class UUIStateSequence*                            StateSequence;                                    		// 0x000048 (0x0004)              
	TArray<struct FInputKeyAction>                     StateInputActions;                                		// 0x00004C (0x000C)              
	TArray<struct FInputKeyAction>                     DisabledInputActions;                             		// 0x000058 (0x000C)              
	struct FName                                       MouseCursorName;                                  		// 0x000064 (0x0008)              
	unsigned char                                      PlayerIndexMask;                                  		// 0x00006C (0x0001)              PROPERTY: 
	unsigned char                                      StackPriority;                                    		// 0x00006D (0x0001)              PROPERTY: 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIState");
		return pClassPointer;
	};

public:
	void RemoveSequenceObject(class USequenceObject* ObjectToRemove);//Engine.UIState.RemoveSequenceObject
	void GetUIEvents(TArray<class UUIEvent*>* out_Events,class UClass* LimitClass);//Engine.UIState.GetUIEvents
	bool IsStateAllowed(class UUIScreenObject* Target,class UUIState* NewState,int PlayerIndex);//Engine.UIState.IsStateAllowed
	void OnDeactivate(class UUIScreenObject* Target,int PlayerIndex,bool bPoppedState);//Engine.UIState.OnDeactivate
	bool AddSequenceObject(class USequenceObject* NewObj,bool bRecurse);//Engine.UIState.AddSequenceObject
	bool ActivateState(class UUIScreenObject* Target,int PlayerIndex);//Engine.UIState.ActivateState
	bool DeactivateState(class UUIScreenObject* Target,int PlayerIndex);//Engine.UIState.DeactivateState
	bool IsWidgetClassSupported(class UClass* WidgetClass);//Engine.UIState.IsWidgetClassSupported
	bool IsActiveForPlayer(int PlayerIndex);//Engine.UIState.IsActiveForPlayer
	void RemoveSequenceObjects(TArray<class USequenceObject*>* ObjectsToRemove);//Engine.UIState.RemoveSequenceObjects
	void OnActivate(class UUIScreenObject* Target,int PlayerIndex,bool bPushedState);//Engine.UIState.OnActivate
};
UClass* UUIState::pClassPointer = NULL;

//0x000002 (0x000070 - 0x00006E)
//UIState_Disabled[0x1032A180]
class UUIState_Disabled : public UUIState
{
public:
	unsigned char                                      _0x00006E[0x2];                                   		// 0x00006E (0x0002) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIState_Disabled");
		return pClassPointer;
	};

public:
	bool IsStateAllowed(class UUIScreenObject* Target,class UUIState* NewState,int PlayerIndex);//Engine.UIState_Disabled.IsStateAllowed
	bool ActivateState(class UUIScreenObject* Target,int PlayerIndex);//Engine.UIState_Disabled.ActivateState
};
UClass* UUIState_Disabled::pClassPointer = NULL;

//0x000002 (0x000070 - 0x00006E)
//UIState_Enabled[0x1032A050]
class UUIState_Enabled : public UUIState
{
public:
	unsigned char                                      _0x00006E[0x2];                                   		// 0x00006E (0x0002) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIState_Enabled");
		return pClassPointer;
	};
};
UClass* UUIState_Enabled::pClassPointer = NULL;

//0x0000B0 (0x0000F4 - 0x000044)
//UIString[0x10329F20]
class UUIString : public UUIRoot
{
public:
	struct FString                                     m_InputString;                                    		// 0x000044 (0x000C)              
	TArray<DWORD>                                      Nodes;                                            		// 0x000050 (0x000C)              
	struct FUICombinedStyleData                        StringStyleData;                                  		// 0x00005C (0x0090)              
	FVector2                                           StringExtent;                                     		// 0x0000EC (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIString");
		return pClassPointer;
	};

public:
	bool ContainsMarkup();//Engine.UIString.ContainsMarkup
	void GetAutoScaleValue(FVector2 BoundingRegionSize,FVector2 StringSize,FVector2* out_AutoScalePercent);//Engine.UIString.GetAutoScaleValue
	struct FString GetValue(bool bReturnProcessedText);//Engine.UIString.GetValue
	bool SetValue(struct FString InputString,bool bIgnoreMarkup);//Engine.UIString.SetValue
};
UClass* UUIString::pClassPointer = NULL;

//0x00001C (0x000060 - 0x000044)
//UIDataProvider[0x10329A60]
class UUIDataProvider : public UUIRoot
{
public:
	unsigned char                                      WriteAccessType;                                  		// 0x000044 (0x0001)              PROPERTY: EProviderAccessType
	unsigned char                                      _0x000045[0x3];                                   		// 0x000045 (0x0003) MISSED OFFSET
	TArray<struct FScriptDelegate>                     ProviderChangedNotifies;                          		// 0x000048 (0x000C)              
	struct FScriptDelegate                             __OnDataProviderPropertyChange__Delegate;         		// 0x000054 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataProvider");
		return pClassPointer;
	};

public:
	bool SetFieldValue(struct FString FieldName,struct FUIProviderScriptFieldValue* FieldValue,int ArrayIndex);//Engine.UIDataProvider.SetFieldValue
	bool IsCollectionDataType(unsigned char FieldType);//Engine.UIDataProvider.IsCollectionDataType
	struct FString GenerateFillerData(struct FString DataTag);//Engine.UIDataProvider.GenerateFillerData
	void OnDataProviderPropertyChange(class UUIDataProvider* SourceProvider,struct FName PropTag);//Engine.UIDataProvider.OnDataProviderPropertyChange
	int ParseTagArrayDelimiter(struct FName* FieldName);//Engine.UIDataProvider.ParseTagArrayDelimiter
	bool AddPropertyNotificationChangeRequest(struct FScriptDelegate InDelegate,bool bAllowDuplicates);//Engine.UIDataProvider.AddPropertyNotificationChangeRequest
	bool GetProviderFieldType(struct FString DataTag,unsigned char* out_ProviderFieldType);//Engine.UIDataProvider.GetProviderFieldType
	bool RemovePropertyNotificationChangeRequest(struct FScriptDelegate InDelegate);//Engine.UIDataProvider.RemovePropertyNotificationChangeRequest
	void NotifyPropertyChanged(struct FName PropTag);//Engine.UIDataProvider.NotifyPropertyChanged
	bool GetFieldValue(struct FString FieldName,struct FUIProviderScriptFieldValue* FieldValue,int ArrayIndex);//Engine.UIDataProvider.GetFieldValue
	int ParseArrayDelimiter(struct FString* DataTag);//Engine.UIDataProvider.ParseArrayDelimiter
	void GetSupportedScriptFields(TArray<struct FUIDataProviderField>* out_Fields);//Engine.UIDataProvider.GetSupportedScriptFields
	struct FString GenerateScriptMarkupString(struct FName DataTag);//Engine.UIDataProvider.GenerateScriptMarkupString
	bool IsProviderDisabled();//Engine.UIDataProvider.IsProviderDisabled
	bool AllowPublishingToField(struct FString FieldName,int ArrayIndex);//Engine.UIDataProvider.AllowPublishingToField
};
UClass* UUIDataProvider::pClassPointer = NULL;

//0x000020 (0x000080 - 0x000060)
//UIDataStore[0x10329B90]
class UUIDataStore : public UUIDataProvider
{
public:
	struct FName                                       Tag;                                              		// 0x000060 (0x0008)              
	TArray<struct FScriptDelegate>                     RefreshSubscriberNotifies;                        		// 0x000068 (0x000C)              
	struct FScriptDelegate                             __OnDataStoreValueUpdated__Delegate;              		// 0x000074 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore");
		return pClassPointer;
	};

public:
	void SubscriberDetached(class UUIDataStoreSubscriber* Subscriber);//Engine.UIDataStore.SubscriberDetached
	void Registered(class ULocalPlayer* PlayerOwner);//Engine.UIDataStore.Registered
	class UDataStoreClient* GetDataStoreClient();//Engine.UIDataStore.GetDataStoreClient
	void OnCommit();//Engine.UIDataStore.OnCommit
	void RefreshSubscribers(struct FName PropertyTag,bool bInvalidateValues,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIDataStore.RefreshSubscribers
	void Unregistered(class ULocalPlayer* PlayerOwner);//Engine.UIDataStore.Unregistered
	void OnDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIDataStore.OnDataStoreValueUpdated
	bool NotifyGameSessionEnded();//Engine.UIDataStore.NotifyGameSessionEnded
	void SubscriberAttached(class UUIDataStoreSubscriber* Subscriber);//Engine.UIDataStore.SubscriberAttached
};
UClass* UUIDataStore::pClassPointer = NULL;

//0x00015C (0x0001DC - 0x000080)
//UISkin[0x10329CC0]
class UUISkin : public UUIDataStore
{
public:
	TArray<class UUIStyle*>                            Styles;                                           		// 0x000080 (0x000C)              
	TArray<struct FString>                             StyleGroups;                                      		// 0x00008C (0x000C)              
	TArray<struct FUISoundCue>                         SoundCues;                                        		// 0x000098 (0x000C)              
	unsigned char                                      StyleLookupTable[0x3C];                           		// 0x0000A4 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      StyleNameMap[0x3C];                               		// 0x0000E0 (0x003C)              UNKNOWN PROPERTY: MapProperty
	struct FLookupMap_Mirror                           StyleGroupMap;                                    		// 0x00011C (0x0048)              
	unsigned char                                      CursorMap[0x3C];                                  		// 0x000164 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      SoundCueMap[0x3C];                                		// 0x0001A0 (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UISkin");
		return pClassPointer;
	};

public:
	struct FString GetStyleGroupAtIndex(int Index);//Engine.UISkin.GetStyleGroupAtIndex
	bool RenameStyleGroup(struct FString OldStyleGroupName,struct FString NewStyleGroupName);//Engine.UISkin.RenameStyleGroup
	bool AddStyleGroupName(struct FString StyleGroupName);//Engine.UISkin.AddStyleGroupName
	void GetStyleGroups(TArray<struct FString>* StyleGroupArray,bool bIncludeInheritedGroups);//Engine.UISkin.GetStyleGroups
	int FindStyleGroupIndex(struct FString StyleGroupName);//Engine.UISkin.FindStyleGroupIndex
	bool GetUISoundCue(struct FName SoundCueName,class USoundCue** out_UISoundCue);//Engine.UISkin.GetUISoundCue
	bool RemoveStyleGroupName(struct FString StyleGroupName);//Engine.UISkin.RemoveStyleGroupName
	bool AddUISoundCue(struct FName SoundCueName,class USoundCue* SoundToPlay);//Engine.UISkin.AddUISoundCue
	void GetAvailableStyles(TArray<class UUIStyle*>* out_Styles,bool bIncludeInheritedStyles);//Engine.UISkin.GetAvailableStyles
	void GetSkinSoundCues(TArray<struct FUISoundCue>* out_SoundCues);//Engine.UISkin.GetSkinSoundCues
	bool IsInheritedGroupName(struct FString StyleGroupName);//Engine.UISkin.IsInheritedGroupName
	bool RemoveUISoundCue(struct FName SoundCueName);//Engine.UISkin.RemoveUISoundCue
	class UUITexture* GetCursorResource(struct FName CursorName);//Engine.UISkin.GetCursorResource
};
UClass* UUISkin::pClassPointer = NULL;

//0x000070 (0x0000B4 - 0x000044)
//UIStyle[0x10329DF0]
class UUIStyle : public UUIRoot
{
public:
	struct FSTYLE_ID                                   StyleID;                                          		// 0x000044 (0x0010)              
	struct FName                                       StyleTag;                                         		// 0x000054 (0x0008)              
	struct FString                                     StyleName;                                        		// 0x00005C (0x000C)              
	struct FString                                     StyleGroupName;                                   		// 0x000068 (0x000C)              
	class UClass*                                      StyleDataClass;                                   		// 0x000074 (0x0004)              
	unsigned char                                      StateDataMap[0x3C];                               		// 0x000078 (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIStyle");
		return pClassPointer;
	};

public:
	class UUIStyle_Data* GetStyleForState(class UUIState* StateObject);//Engine.UIStyle.GetStyleForState
	class UUIStyle_Data* GetStyleForStateByClass(class UClass* StateClass);//Engine.UIStyle.GetStyleForStateByClass
	class UUIStyle_Data* GetDefaultStyle();//Engine.UIStyle.GetDefaultStyle
};
UClass* UUIStyle::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//UISoundTheme[0x10329930]
class UUISoundTheme : public UObject
{
public:
	TArray<struct FSoundEventMapping>                  SoundEventBindings;                               		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UISoundTheme");
		return pClassPointer;
	};

public:
	void ProcessSoundEvent(struct FName SoundEventName,class APlayerController* SoundOwner);//Engine.UISoundTheme.ProcessSoundEvent
};
UClass* UUISoundTheme::pClassPointer = NULL;

//0x0002D4 (0x00046C - 0x000198)
//UIObject[0x103296D0]
class UUIObject : public UUIScreenObject
{
public:
	struct FWIDGET_ID                                  WidgetID;                                         		// 0x000198 (0x0010)              
	struct FName                                       WidgetTag;                                        		// 0x0001A8 (0x0008)              
	class UUIObject*                                   Owner;                                            		// 0x0001B0 (0x0004)              
	class UUIScene*                                    OwnerScene;                                       		// 0x0001B4 (0x0004)              
	struct FUIStyleReference                           PrimaryStyle;                                     		// 0x0001B8 (0x0020)              
	struct FUINavigationData                           NavigationTargets;                                		// 0x0001D8 (0x0024)              
	int                                                TabIndex;                                         		// 0x0001FC (0x0004)              
	struct FUIDockingSet                               DockTargets;                                      		// 0x000200 (0x0038)              
	float                                              RenderBounds[0x4];                                		// 0x000238 (0x0010)              
	FVector2                                           RenderBoundsVertices[0x4];                        		// 0x000248 (0x0020)              
	unsigned char                                      _0x000268[0x8];                                   		// 0x000268 (0x0008) MISSED OFFSET
	struct FUIRotation                                 Rotation;                                         		// 0x000270 (0x0070)              
	FVector3                                           RenderOffset;                                     		// 0x0002E0 (0x000C)              
	int                                                PrivateFlags;                                     		// 0x0002EC (0x0004)              
	struct FUIDataStoreBinding                         ToolTip;                                          		// 0x0002F0 (0x0030)              
	struct FUIDataStoreBinding                         ContextMenuData;                                  		// 0x000320 (0x0030)              
	struct FUIDataStoreBinding                         ActiveDisabledDataSource;                         		// 0x000350 (0x0030)              
	unsigned long                                      ActiveDisabled : 1;                               		// 0x000380 (0x0004) [0x00000001] 
	unsigned long                                      bEnableActiveCursorUpdates : 1;                   		// 0x000380 (0x0004) [0x00000002] 
	unsigned long                                      bSupportsPrimaryStyle : 1;                        		// 0x000380 (0x0004) [0x00000004] 
	unsigned long                                      bEnableSceneUpdateNotifications : 1;              		// 0x000380 (0x0004) [0x00000008] 
	unsigned long                                      bDebugShowBounds : 1;                             		// 0x000380 (0x0004) [0x00000010] 
	unsigned long                                      m_bPositionDirty : 1;                             		// 0x000380 (0x0004) [0x00000020] 
	unsigned long                                      m_bShowWidgetHighlight : 1;                       		// 0x000380 (0x0004) [0x00000040] 
	class UUIObject*                                   AnimationParent;                                  		// 0x000384 (0x0004)              
	FVector3                                           AnimationPosition;                                		// 0x000388 (0x000C)              
	TArray<struct FUIAnimSeqRef>                       AnimStack;                                        		// 0x000394 (0x000C)              
	TArray<class UUIStyleResolver*>                    StyleSubscribers;                                 		// 0x0003A0 (0x000C)              
	DWORD                                              DebugBoundsColor;                                 		// 0x0003AC (0x0004)              
	struct FName                                       m_ActiveCursor;                                   		// 0x0003B0 (0x0008)              
	struct FScriptDelegate                             __OnCreate__Delegate;                             		// 0x0003B8 (0x000C)              
	struct FScriptDelegate                             __OnPreSceneUpdate__Delegate;                     		// 0x0003C4 (0x000C)              
	struct FScriptDelegate                             __OnPostSceneUpdate__Delegate;                    		// 0x0003D0 (0x000C)              
	struct FScriptDelegate                             __OnValueChanged__Delegate;                       		// 0x0003DC (0x000C)              
	struct FScriptDelegate                             __OnRefreshSubscriberValue__Delegate;             		// 0x0003E8 (0x000C)              
	struct FScriptDelegate                             __OnPressed__Delegate;                            		// 0x0003F4 (0x000C)              
	struct FScriptDelegate                             __OnPressRepeat__Delegate;                        		// 0x000400 (0x000C)              
	struct FScriptDelegate                             __OnPressRelease__Delegate;                       		// 0x00040C (0x000C)              
	struct FScriptDelegate                             __OnClicked__Delegate;                            		// 0x000418 (0x000C)              
	struct FScriptDelegate                             __OnDoubleClick__Delegate;                        		// 0x000424 (0x000C)              
	struct FScriptDelegate                             __OnQueryToolTip__Delegate;                       		// 0x000430 (0x000C)              
	struct FScriptDelegate                             __OnOpenContextMenu__Delegate;                    		// 0x00043C (0x000C)              
	struct FScriptDelegate                             __OnCloseContextMenu__Delegate;                   		// 0x000448 (0x000C)              
	struct FScriptDelegate                             __OnContextMenuItemSelected__Delegate;            		// 0x000454 (0x000C)              
	struct FScriptDelegate                             __OnUIAnimEnd__Delegate;                          		// 0x000460 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIObject");
		return pClassPointer;
	};

public:
	void UIAnimEnd(int SeqIndex);//Engine.UIObject.UIAnimEnd
	bool OnClicked(class UUIScreenObject* EventObject,int PlayerIndex);//Engine.UIObject.OnClicked
	void OnPreSceneUpdate(class UUIObject* Sender);//Engine.UIObject.OnPreSceneUpdate
	void SetActiveCursorUpdate(bool bShouldReceiveCursorUpdates);//Engine.UIObject.SetActiveCursorUpdate
	class UUIObject* GetOwner();//Engine.UIObject.GetOwner
	void RemoveStyleSubscriber(class UUIStyleResolver* Subscriber);//Engine.UIObject.RemoveStyleSubscriber
	void OnPressRelease(class UUIScreenObject* EventObject,int PlayerIndex);//Engine.UIObject.OnPressRelease
	void OnValueChanged(class UUIObject* Sender,int PlayerIndex);//Engine.UIObject.OnValueChanged
	float GetPositionExtent(unsigned char Face,bool bIncludeRotation);//Engine.UIObject.GetPositionExtent
	void AnimSetTop(float NewTop);//Engine.UIObject.AnimSetTop
	void AnimSetOpacity(float NewOpacity);//Engine.UIObject.AnimSetOpacity
	void UpdateRotationMatrix();//Engine.UIObject.UpdateRotationMatrix
	bool SetWidgetStyleByName(struct FName StyleResolverTagToSet,struct FName StyleFriendlyName);//Engine.UIObject.SetWidgetStyleByName
	void AnimSetRight(float NewRight);//Engine.UIObject.AnimSetRight
	void AnimSetRotation(FRotator NewRotation);//Engine.UIObject.AnimSetRotation
	bool ResolveDefaultDataBinding(int BindingIndex);//Engine.UIObject.ResolveDefaultDataBinding
	void OnPressRepeat(class UUIScreenObject* EventObject,int PlayerIndex);//Engine.UIObject.OnPressRepeat
	void OnPostSceneUpdate(class UUIObject* Sender);//Engine.UIObject.OnPostSceneUpdate
	class UUIScreenObject* GetParent();//Engine.UIObject.GetParent
	bool OnCloseContextMenu(class UUIContextMenu* ContextMenu,int PlayerIndex);//Engine.UIObject.OnCloseContextMenu
	void AnimSetColor(struct FLinearColor NewColor);//Engine.UIObject.AnimSetColor
	FMatrix GenerateTransformMatrix(bool bIncludeParentTransforms);//Engine.UIObject.GenerateTransformMatrix
	bool OnRefreshSubscriberValue(class UUIObject* Sender,int BindingIndex);//Engine.UIObject.OnRefreshSubscriberValue
	void StopUIAnimation(struct FName AnimName,class UUIAnimationSeq* AnimSeq,bool bFinalize);//Engine.UIObject.StopUIAnimation
	void AnimSetBottom(float NewBottom);//Engine.UIObject.AnimSetBottom
	bool NeedsActiveCursorUpdates();//Engine.UIObject.NeedsActiveCursorUpdates
	void OnUIAnimEnd(class UUIObject* AnimTarget,int AnimIndex,class UUIAnimationSeq* AnimSeq);//Engine.UIObject.OnUIAnimEnd
	void OnDoubleClick(class UUIScreenObject* EventObject,int PlayerIndex);//Engine.UIObject.OnDoubleClick
	FMatrix GetRotationMatrix(bool bIncludeParentRotations);//Engine.UIObject.GetRotationMatrix
	void AnimSetVisibility(bool bIsVisible);//Engine.UIObject.AnimSetVisibility
	bool IsPrivateBehaviorSet(int Behavior);//Engine.UIObject.IsPrivateBehaviorSet
	void AnimSetPosition(FVector3 NewPosition);//Engine.UIObject.AnimSetPosition
	void SetAnchorPosition(FVector3 NewAnchorPosition,unsigned char InputType);//Engine.UIObject.SetAnchorPosition
	class UUIScene* GetScene();//Engine.UIObject.GetScene
	void TickAnim(float DeltaTime);//Engine.UIObject.TickAnim
	struct FString GetToolTipValue();//Engine.UIObject.GetToolTipValue
	bool HasTransform(bool bIncludeParentTransforms);//Engine.UIObject.HasTransform
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIObject.OnSequenceAction
	void SetPrivateBehavior(int Behavior,bool Value,bool bRecurse);//Engine.UIObject.SetPrivateBehavior
	struct FString GetDefaultDataBinding(int BindingIndex);//Engine.UIObject.GetDefaultDataBinding
	int FindStyleSubscriberIndexById(struct FName StyleSubscriberId);//Engine.UIObject.FindStyleSubscriberIndexById
	bool SetDockPadding(unsigned char SourceFace,float PaddingValue,unsigned char PaddingInputType,bool bModifyPaddingScaleType);//Engine.UIObject.SetDockPadding
	struct FString GenerateSceneDataStoreMarkup(struct FString Group);//Engine.UIObject.GenerateSceneDataStoreMarkup
	bool SetNavigationTarget(unsigned char Face,class UUIObject* NewNavTarget);//Engine.UIObject.SetNavigationTarget
	void ClearDefaultDataBinding(int BindingIndex);//Engine.UIObject.ClearDefaultDataBinding
	bool SetDockParameters(unsigned char SourceFace,class UUIScreenObject* Target,unsigned char TargetFace,float PaddingValue,unsigned char PaddingInputType,bool bModifyPaddingScaleType);//Engine.UIObject.SetDockParameters
	void SetDefaultDataBinding(struct FString MarkupText,int BindingIndex);//Engine.UIObject.SetDefaultDataBinding
	void AnimSetRelPosition(FVector3 NewPosition,FVector3 InitialPosition);//Engine.UIObject.AnimSetRelPosition
	bool IsContainedBy(class UUIObject* TestWidget);//Engine.UIObject.IsContainedBy
	bool OnQueryToolTip(class UUIObject* Sender,class UUIToolTip** CustomToolTip);//Engine.UIObject.OnQueryToolTip
	bool OnOpenContextMenu(class UUIObject* Sender,int PlayerIndex,class UUIContextMenu** CustomContextMenu);//Engine.UIObject.OnOpenContextMenu
	int FindStyleSubscriberIndex(class UUIStyleResolver** Subscriber);//Engine.UIObject.FindStyleSubscriberIndex
	void GetPositionExtents(float* MinX,float* MaxX,float* MinY,float* MaxY,bool bIncludeRotation);//Engine.UIObject.GetPositionExtents
	void LogRenderBounds(int Indent);//Engine.UIObject.LogRenderBounds
	void PlayUIAnimation(struct FName AnimName,class UUIAnimationSeq* AnimSeqTemplate,float PlaybackRate,bool bLoop,float InitialPosition);//Engine.UIObject.PlayUIAnimation
	void OnSetDatastoreBinding(class UUIAction_SetDatastoreBinding* Action);//Engine.UIObject.OnSetDatastoreBinding
	void AddStyleSubscriber(class UUIStyleResolver* Subscriber);//Engine.UIObject.AddStyleSubscriber
	bool SetDockTarget(unsigned char SourceFace,class UUIScreenObject* Target,unsigned char TargetFace);//Engine.UIObject.SetDockTarget
	void ClearUIAnimation(struct FName AnimName,class UUIAnimationSeq* AnimSeq);//Engine.UIObject.ClearUIAnimation
	FVector3 GetAnchorPosition(bool bRelativeToWidget,bool bPixelSpace);//Engine.UIObject.GetAnchorPosition
	void GetDefaultDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UIObject.GetDefaultDataStores
	void OnPressed(class UUIScreenObject* EventObject,int PlayerIndex);//Engine.UIObject.OnPressed
	bool IsDockedTo(class UUIScreenObject* TargetWidget,unsigned char SourceFace,unsigned char TargetFace);//Engine.UIObject.IsDockedTo
	void OnCreate(class UUIObject* CreatedWidget,class UUIScreenObject* CreatorContainer);//Engine.UIObject.OnCreate
	bool CanAcceptFocus(int PlayerIndex);//Engine.UIObject.CanAcceptFocus
	void AnimSetScale(float NewScale);//Engine.UIObject.AnimSetScale
	void OnContextMenuItemSelected(class UUIContextMenu* ContextMenu,int PlayerIndex,int ItemIndex);//Engine.UIObject.OnContextMenuItemSelected
	void AnimSetLeft(float NewLeft);//Engine.UIObject.AnimSetLeft
	void RotateWidget(FRotator NewRotationAmount,bool bAccumulateRotation);//Engine.UIObject.RotateWidget
	bool SetForcedNavigationTarget(unsigned char Face,class UUIObject* NavTarget,bool bIsNullOverride);//Engine.UIObject.SetForcedNavigationTarget
	void NotifyValueChanged(int PlayerIndex,int NotifyFlags);//Engine.UIObject.NotifyValueChanged
};
UClass* UUIObject::pClassPointer = NULL;

//0x000002 (0x00004E - 0x00004C)
//UIComp_AutoAlignment[0x10329800]
class UUIComp_AutoAlignment : public UUIComponent
{
public:
	unsigned char                                      HorzAlignment;                                    		// 0x00004C (0x0001)              PROPERTY: EUIAlignment
	unsigned char                                      VertAlignment;                                    		// 0x00004D (0x0001)              PROPERTY: EUIAlignment

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_AutoAlignment");
		return pClassPointer;
	};
};
UClass* UUIComp_AutoAlignment::pClassPointer = NULL;

//0x000028 (0x000074 - 0x00004C)
//UIComp_DrawComponents[0x103295A0]
class UUIComp_DrawComponents : public UUIComponent
{
public:
	unsigned char                                      FadeType;                                         		// 0x00004C (0x0001)              PROPERTY: EFadeType
	unsigned char                                      _0x00004D[0x3];                                   		// 0x00004D (0x0003) MISSED OFFSET
	float                                              FadeAlpha;                                        		// 0x000050 (0x0004)              
	float                                              FadeTarget;                                       		// 0x000054 (0x0004)              
	float                                              FadeTime;                                         		// 0x000058 (0x0004)              
	double                                             LastRenderTime;                                   		// 0x00005C (0x0008)              
	float                                              FadeRate;                                         		// 0x000064 (0x0004)              
	struct FScriptDelegate                             __OnFadeComplete__Delegate;                       		// 0x000068 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_DrawComponents");
		return pClassPointer;
	};

public:
	void Fade(float FromAlpha,float ToAlpha,float TargetFadeTime);//Engine.UIComp_DrawComponents.Fade
	void Pulse(float MaxAlpha,float MinAlpha,float PulseRate);//Engine.UIComp_DrawComponents.Pulse
	void OnFadeComplete(class UUIComp_DrawComponents* Sender);//Engine.UIComp_DrawComponents.OnFadeComplete
	void ResetFade();//Engine.UIComp_DrawComponents.ResetFade
};
UClass* UUIComp_DrawComponents::pClassPointer = NULL;

//0x000088 (0x0000FC - 0x000074)
//UIComp_DrawImage[0x10329470]
class UUIComp_DrawImage : public UUIComp_DrawComponents
{
public:
	DWORD                                              VfTable_IUIStyleResolver;                         		// 0x000074 (0x0004)              
	DWORD                                              VfTable_ICustomPropertyItemHandler;               		// 0x000078 (0x0004)              
	struct FName                                       StyleResolverTag;                                 		// 0x00007C (0x0008)              
	class UUITexture*                                  ImageRef;                                         		// 0x000084 (0x0004)              
	struct FUIImageStyleOverride                       StyleCustomization;                               		// 0x000088 (0x0054)              
	struct FUIStyleReference                           ImageStyle;                                       		// 0x0000DC (0x0020)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_DrawImage");
		return pClassPointer;
	};

public:
	void DisableCustomPadding();//Engine.UIComp_DrawImage.DisableCustomPadding
	void DisableCustomOpacity();//Engine.UIComp_DrawImage.DisableCustomOpacity
	void SetColor(struct FLinearColor NewColor);//Engine.UIComp_DrawImage.SetColor
	void DisableCustomCoordinates();//Engine.UIComp_DrawImage.DisableCustomCoordinates
	void DisableCustomFormatting();//Engine.UIComp_DrawImage.DisableCustomFormatting
	void SetImage(class USurface* NewImage);//Engine.UIComp_DrawImage.SetImage
	void SetFormatting(unsigned char Orientation,struct FUIImageAdjustmentData NewFormattingData);//Engine.UIComp_DrawImage.SetFormatting
	void SetOpacity(float NewOpacity);//Engine.UIComp_DrawImage.SetOpacity
	bool NotifyResolveStyle(class UUISkin* ActiveSkin,bool bClearExistingValue,class UUIState* CurrentMenuState,struct FName StylePropertyName);//Engine.UIComp_DrawImage.NotifyResolveStyle
	void SetPadding(float HorizontalPadding,float VerticalPadding);//Engine.UIComp_DrawImage.SetPadding
	void DisableCustomColor();//Engine.UIComp_DrawImage.DisableCustomColor
	class UUIStyle_Image* GetAppliedImageStyle(class UUIState* DesiredMenuState);//Engine.UIComp_DrawImage.GetAppliedImageStyle
	void SetCoordinates(struct FTextureCoordinates NewCoordinates);//Engine.UIComp_DrawImage.SetCoordinates
	bool SetStyleResolverTag(struct FName NewResolverTag);//Engine.UIComp_DrawImage.SetStyleResolverTag
	struct FName GetStyleResolverTag();//Engine.UIComp_DrawImage.GetStyleResolverTag
	class USurface* GetImage();//Engine.UIComp_DrawImage.GetImage
};
UClass* UUIComp_DrawImage::pClassPointer = NULL;

//0x0000F4 (0x000168 - 0x000074)
//UIComp_DrawString[0x10329340]
class UUIComp_DrawString : public UUIComp_DrawComponents
{
public:
	DWORD                                              VfTable_IUIStyleResolver;                         		// 0x000074 (0x0004)              
	class UUIDataStoreSubscriber*                      SubscriberOwner;                                  		// 0x000078 (0x0004)              
	unsigned char                                      _0x00007C[0x4];                                   		// 0x00007C (0x0004) ALIGNEMENT
	struct FName                                       StyleResolverTag;                                 		// 0x000080 (0x0008)              
	class UUIString*                                   ValueString;                                      		// 0x000088 (0x0004)              
	class UClass*                                      StringClass;                                      		// 0x00008C (0x0004)              
	struct FAutoSizeData                               AutoSizeParameters[0x2];                          		// 0x000090 (0x0038)              
	struct FUIRenderingSubregion                       ClampRegion[0x2];                                 		// 0x0000C8 (0x0030)              
	struct FUITextStyleOverride                        TextStyleCustomization;                           		// 0x0000F8 (0x004C)              
	struct FUIStyleReference                           StringStyle;                                      		// 0x000144 (0x0020)              
	unsigned long                                      bIgnoreMarkup : 1;                                		// 0x000164 (0x0004) [0x00000001] 
	unsigned long                                      bRefreshString : 1;                               		// 0x000164 (0x0004) [0x00000002] 
	unsigned long                                      bReapplyFormatting : 1;                           		// 0x000164 (0x0004) [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_DrawString");
		return pClassPointer;
	};

public:
	void DisableCustomAttributes();//Engine.UIComp_DrawString.DisableCustomAttributes
	void EnableAutoSizing(unsigned char Orientation,bool bShouldEnable);//Engine.UIComp_DrawString.EnableAutoSizing
	void DisableCustomScale();//Engine.UIComp_DrawString.DisableCustomScale
	void RefreshValue();//Engine.UIComp_DrawString.RefreshValue
	void EnableSubregion(unsigned char Orientation,bool bShouldEnable);//Engine.UIComp_DrawString.EnableSubregion
	void SetColor(struct FLinearColor NewColor);//Engine.UIComp_DrawString.SetColor
	void SetWrapMode(unsigned char NewClipMode);//Engine.UIComp_DrawString.SetWrapMode
	bool IsAutoSizeEnabled(unsigned char Orientation);//Engine.UIComp_DrawString.IsAutoSizeEnabled
	void SetAutoSizePadding(unsigned char Orientation,float NearValue,float FarValue,unsigned char NearScaleType,unsigned char FarScaleType);//Engine.UIComp_DrawString.SetAutoSizePadding
	struct FString GetValue(bool bReturnProcessedText);//Engine.UIComp_DrawString.GetValue
	void SetAutoScaling(unsigned char NewAutoScaleMode,float NewMinScaleValue);//Engine.UIComp_DrawString.SetAutoScaling
	void DisableCustomPadding();//Engine.UIComp_DrawString.DisableCustomPadding
	void SetScale(unsigned char Orientation,float NewScale);//Engine.UIComp_DrawString.SetScale
	void DisableCustomColor();//Engine.UIComp_DrawString.DisableCustomColor
	void DisableCustomOpacity();//Engine.UIComp_DrawString.DisableCustomOpacity
	void SetSpacingAdjust(unsigned char Orientation,float NewSpacingAdjust);//Engine.UIComp_DrawString.SetSpacingAdjust
	void SetAlignment(unsigned char Orientation,unsigned char NewAlignment);//Engine.UIComp_DrawString.SetAlignment
	bool NotifyResolveStyle(class UUISkin* ActiveSkin,bool bClearExistingValue,class UUIState* CurrentMenuState,struct FName StylePropertyName);//Engine.UIComp_DrawString.NotifyResolveStyle
	void SetSubregionSize(unsigned char Orientation,float NewValue,unsigned char EvalType);//Engine.UIComp_DrawString.SetSubregionSize
	void SetSubregionOffset(unsigned char Orientation,float NewValue,unsigned char EvalType);//Engine.UIComp_DrawString.SetSubregionOffset
	float GetSubregionOffset(unsigned char Orientation,unsigned char OutputType);//Engine.UIComp_DrawString.GetSubregionOffset
	void SetValue(struct FString NewText);//Engine.UIComp_DrawString.SetValue
	void SetAutoSizeExtent(unsigned char Orientation,float MinValue,float MaxValue,unsigned char MinScaleType,unsigned char MaxScaleType);//Engine.UIComp_DrawString.SetAutoSizeExtent
	void DisableCustomAlignment();//Engine.UIComp_DrawString.DisableCustomAlignment
	bool SetStyleResolverTag(struct FName NewResolverTag);//Engine.UIComp_DrawString.SetStyleResolverTag
	void SetAttributes(struct FUITextAttributes NewAttributes);//Engine.UIComp_DrawString.SetAttributes
	class UUIStyle_Combo* GetAppliedStringStyle(class UUIState* DesiredMenuState);//Engine.UIComp_DrawString.GetAppliedStringStyle
	void DisableCustomFont();//Engine.UIComp_DrawString.DisableCustomFont
	void DisableCustomAutoScaling();//Engine.UIComp_DrawString.DisableCustomAutoScaling
	unsigned char GetSubregionAlignment(unsigned char Orientation);//Engine.UIComp_DrawString.GetSubregionAlignment
	void DisableCustomSpacingAdjust();//Engine.UIComp_DrawString.DisableCustomSpacingAdjust
	void SetOpacity(float NewOpacity);//Engine.UIComp_DrawString.SetOpacity
	void SetClipAlignment(unsigned char NewClipAlignment);//Engine.UIComp_DrawString.SetClipAlignment
	struct FName GetStyleResolverTag();//Engine.UIComp_DrawString.GetStyleResolverTag
	void SetFont(class UFont* NewFont);//Engine.UIComp_DrawString.SetFont
	void SetPadding(float HorizontalPadding,float VerticalPadding);//Engine.UIComp_DrawString.SetPadding
	bool IsSubregionEnabled(unsigned char Orientation);//Engine.UIComp_DrawString.IsSubregionEnabled
	void DisableCustomClipMode();//Engine.UIComp_DrawString.DisableCustomClipMode
	void SetSubregionAlignment(unsigned char Orientation,unsigned char NewValue);//Engine.UIComp_DrawString.SetSubregionAlignment
	void DisableCustomClipAlignment();//Engine.UIComp_DrawString.DisableCustomClipAlignment
	bool GetFinalStringStyle(struct FUICombinedStyleData* FinalStyleData);//Engine.UIComp_DrawString.GetFinalStringStyle
	unsigned char GetWrapMode();//Engine.UIComp_DrawString.GetWrapMode
	float GetSubregionSize(unsigned char Orientation,unsigned char OutputType);//Engine.UIComp_DrawString.GetSubregionSize
};
UClass* UUIComp_DrawString::pClassPointer = NULL;

//0x000000 (0x000168 - 0x000168)
//UIComp_DrawCaption[0x10329210]
class UUIComp_DrawCaption : public UUIComp_DrawString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_DrawCaption");
		return pClassPointer;
	};
};
UClass* UUIComp_DrawCaption::pClassPointer = NULL;

//0x000064 (0x0004D0 - 0x00046C)
//UIEditBox[0x10328FB0]
class UUIEditBox : public UUIObject
{
public:
	DWORD                                              VfTable_IUIDataStorePublisher;                    		// 0x00046C (0x0004)              
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x000470 (0x0030)              
	class UUIComp_DrawStringEditbox*                   StringRenderComponent;                            		// 0x0004A0 (0x0004)              
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x0004A4 (0x0004)              
	struct FString                                     InitialValue;                                     		// 0x0004A8 (0x000C)              
	unsigned long                                      bReadOnly : 1;                                    		// 0x0004B4 (0x0004) [0x00000001] 
	unsigned long                                      bPasswordMode : 1;                                		// 0x0004B4 (0x0004) [0x00000002] 
	unsigned long                                      bMultiLine : 1;                                   		// 0x0004B4 (0x0004) [0x00000004] 
	unsigned long                                      bScrollBar : 1;                                   		// 0x0004B4 (0x0004) [0x00000008] 
	int                                                MaxCharacters;                                    		// 0x0004B8 (0x0004)              
	unsigned char                                      CharacterSet;                                     		// 0x0004BC (0x0001)              PROPERTY: EEditBoxCharacterSet
	unsigned char                                      _0x0004BD[0x3];                                   		// 0x0004BD (0x0003) MISSED OFFSET
	class UUIScrollbar*                                ScrollBar;                                        		// 0x0004C0 (0x0004)              
	struct FScriptDelegate                             __OnSubmitText__Delegate;                         		// 0x0004C4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEditBox");
		return pClassPointer;
	};

public:
	int CalculateCaretPositionFromCursorLocation(int PlayerIndex);//Engine.UIEditBox.CalculateCaretPositionFromCursorLocation
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UIEditBox.GetDataStoreBinding
	struct FString GetValue(bool bReturnUserText);//Engine.UIEditBox.GetValue
	void SetBackgroundImage(class USurface* NewImage);//Engine.UIEditBox.SetBackgroundImage
	void OnScrollBarSpaceClicked(class UUIScrollbar* Sender,float PositionPerc,int PlayerIndex);//Engine.UIEditBox.OnScrollBarSpaceClicked
	void SetReadOnly(bool bShouldBeReadOnly);//Engine.UIEditBox.SetReadOnly
	void Initialized();//Engine.UIEditBox.Initialized
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UIEditBox.GetBoundDataStores
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UIEditBox.SetDataStoreBinding
	void RefreshMaxCharacters();//Engine.UIEditBox.RefreshMaxCharacters
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UIEditBox.SaveSubscriberValue
	void SetValue(struct FString NewText,int PlayerIndex,bool bSkipNotification);//Engine.UIEditBox.SetValue
	bool OnSubmitText(class UUIEditBox* Sender,int PlayerIndex);//Engine.UIEditBox.OnSubmitText
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIEditBox.NotifyDataStoreValueUpdated
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UIEditBox.RefreshSubscriberValue
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIEditBox.OnSequenceAction
	bool OnScrollBarMoved(class UUIScrollbar* Sender,float PositionChange,bool bPositionMaxed);//Engine.UIEditBox.OnScrollBarMoved
	void IgnoreMarkup(bool bShouldIgnoreMarkup);//Engine.UIEditBox.IgnoreMarkup
	void OnSetLabelText(class UUIAction_SetLabelText* Action);//Engine.UIEditBox.OnSetLabelText
	void OnGetTextValue(class UUIAction_GetTextValue* Action);//Engine.UIEditBox.OnGetTextValue
	void ClearBoundDataStores();//Engine.UIEditBox.ClearBoundDataStores
	bool IsReadOnly();//Engine.UIEditBox.IsReadOnly
};
UClass* UUIEditBox::pClassPointer = NULL;

//0x000070 (0x0001D8 - 0x000168)
//UIComp_DrawStringEditbox[0x103290E0]
class UUIComp_DrawStringEditbox : public UUIComp_DrawString
{
public:
	struct FString                                     UserText;                                         		// 0x000168 (0x000C)              
	struct FUIStringCaretParameters                    StringCaret;                                      		// 0x000174 (0x001C)              
	struct FUIStringSelectionRegion                    SelectionRegion;                                  		// 0x000190 (0x0008)              
	struct FLinearColor                                SelectionTextColor;                               		// 0x000198 (0x0010)              
	struct FLinearColor                                SelectionBackgroundColor;                         		// 0x0001A8 (0x0010)              
	DWORD                                              CaretNode;                                        		// 0x0001B8 (0x0004)              
	int                                                FirstCharacterPosition;                           		// 0x0001BC (0x0004)              
	unsigned long                                      bRecalculateFirstCharacter : 1;                   		// 0x0001C0 (0x0004) [0x00000001] 
	float                                              CaretOffsetX;                                     		// 0x0001C4 (0x0004)              
	float                                              CaretOffsetY;                                     		// 0x0001C8 (0x0004)              
	TArray<struct FWrappedStringElement>               WrappedText;                                      		// 0x0001CC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_DrawStringEditbox");
		return pClassPointer;
	};

public:
	bool SetSelectionRange(int StartIndex,int EndIndex);//Engine.UIComp_DrawStringEditbox.SetSelectionRange
	bool SetUserText(struct FString NewValue);//Engine.UIComp_DrawStringEditbox.SetUserText
	struct FString GetSelectedText();//Engine.UIComp_DrawStringEditbox.GetSelectedText
	bool ClearSelection();//Engine.UIComp_DrawStringEditbox.ClearSelection
	bool SetSelectionEnd(int EndIndex);//Engine.UIComp_DrawStringEditbox.SetSelectionEnd
	int GetUserTextLength();//Engine.UIComp_DrawStringEditbox.GetUserTextLength
	bool SetSelectionStart(int StartIndex);//Engine.UIComp_DrawStringEditbox.SetSelectionStart
	bool GetSelectionRange(int* out_StartIndex,int* out_EndIndex);//Engine.UIComp_DrawStringEditbox.GetSelectionRange
};
UClass* UUIComp_DrawStringEditbox::pClassPointer = NULL;

//0x000000 (0x000168 - 0x000168)
//UIComp_DrawStringSlider[0x10328E80]
class UUIComp_DrawStringSlider : public UUIComp_DrawString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_DrawStringSlider");
		return pClassPointer;
	};
};
UClass* UUIComp_DrawStringSlider::pClassPointer = NULL;

//0x0002A0 (0x00070C - 0x00046C)
//UIList[0x10328C20]
class UUIList : public UUIObject
{
public:
	DWORD                                              VfTable_IUIDataStorePublisher;                    		// 0x00046C (0x0004)              
	struct FUIScreenValue_Extent                       RowHeight;                                        		// 0x000470 (0x0008)              
	struct FUIScreenValue_Extent                       MinColumnSize;                                    		// 0x000478 (0x0008)              
	struct FUIScreenValue_Extent                       ColumnWidth;                                      		// 0x000480 (0x0008)              
	struct FUIScreenValue_Extent                       HeaderCellPadding;                                		// 0x000488 (0x0008)              
	struct FUIScreenValue_Extent                       HeaderElementSpacing;                             		// 0x000490 (0x0008)              
	struct FUIScreenValue_Extent                       CellSpacing;                                      		// 0x000498 (0x0008)              
	struct FUIScreenValue_Extent                       CellPadding;                                      		// 0x0004A0 (0x0008)              
	int                                                Index;                                            		// 0x0004A8 (0x0004)              
	int                                                TopIndex;                                         		// 0x0004AC (0x0004)              
	int                                                ToolTipIndex;                                     		// 0x0004B0 (0x0004)              
	int                                                ToolTipColumnIndex;                               		// 0x0004B4 (0x0004)              
	unsigned long                                      ToolTipOverColumnHeader : 1;                      		// 0x0004B8 (0x0004) [0x00000001] 
	unsigned long                                      bEnableMultiSelect : 1;                           		// 0x0004B8 (0x0004) [0x00000002] 
	unsigned long                                      bEnableVerticalScrollbar : 1;                     		// 0x0004B8 (0x0004) [0x00000004] 
	unsigned long                                      bAlwaysShowVerticalScrollbar : 1;                 		// 0x0004B8 (0x0004) [0x00000008] 
	unsigned long                                      bInitializeScrollbars : 1;                        		// 0x0004B8 (0x0004) [0x00000010] 
	unsigned long                                      bAllowDisabledItemSelection : 1;                  		// 0x0004B8 (0x0004) [0x00000020] 
	unsigned long                                      bRenderSelectableDisabledItemsAsDisabled : 1;     		// 0x0004B8 (0x0004) [0x00000040] 
	unsigned long                                      bDisableItemSelection : 1;                        		// 0x0004B8 (0x0004) [0x00000080] 
	unsigned long                                      bConsumeMouseInput : 1;                           		// 0x0004B8 (0x0004) [0x00000100] 
	unsigned long                                      m_bAllowDragAndDropReordering : 1;                		// 0x0004B8 (0x0004) [0x00000200] 
	unsigned long                                      m_bInsertBetween : 1;                             		// 0x0004B8 (0x0004) [0x00000400] 
	unsigned long                                      bSingleClickSubmission : 1;                       		// 0x0004B8 (0x0004) [0x00000800] 
	unsigned long                                      bCtrlAlwaysOn : 1;                                		// 0x0004B8 (0x0004) [0x00001000] 
	unsigned long                                      bUpdateItemUnderCursor : 1;                       		// 0x0004B8 (0x0004) [0x00002000] 
	unsigned long                                      bHoverStateOverridesSelected : 1;                 		// 0x0004B8 (0x0004) [0x00004000] 
	unsigned long                                      bRowBasedHotTracking : 1;                         		// 0x0004B8 (0x0004) [0x00008000] 
	unsigned long                                      bRowBasedSelection : 1;                           		// 0x0004B8 (0x0004) [0x00010000] 
	unsigned long                                      bAllowColumnResizing : 1;                         		// 0x0004B8 (0x0004) [0x00020000] 
	unsigned long                                      bDisplayDataBindings : 1;                         		// 0x0004B8 (0x0004) [0x00040000] 
	unsigned long                                      bSortingList : 1;                                 		// 0x0004B8 (0x0004) [0x00080000] 
	int                                                MaxVisibleItems;                                  		// 0x0004BC (0x0004)              
	int                                                ColumnCount;                                      		// 0x0004C0 (0x0004)              
	int                                                RowCount;                                         		// 0x0004C4 (0x0004)              
	unsigned char                                      ColumnAutoSizeMode;                               		// 0x0004C8 (0x0001)              PROPERTY: ECellAutoSizeMode
	unsigned char                                      RowAutoSizeMode;                                  		// 0x0004C9 (0x0001)              PROPERTY: ECellAutoSizeMode
	unsigned char                                      CellLinkType;                                     		// 0x0004CA (0x0001)              PROPERTY: ECellLinkType
	unsigned char                                      WrapType;                                         		// 0x0004CB (0x0001)              PROPERTY: EListWrapBehavior
	struct FUIScreenValue_Position                     m_DragAndDropDeadzone;                            		// 0x0004CC (0x000C)              
	struct FUIScreenValue                              m_InsertMarkerSize;                               		// 0x0004D8 (0x0008)              
	struct FUIStyleReference                           m_InsertMarkerStyle;                              		// 0x0004E0 (0x0020)              
	struct FUIStyleReference                           m_BackgroundStyle;                                		// 0x000500 (0x0020)              
	struct FUIStyleReference                           m_CellStyle;                                      		// 0x000520 (0x0020)              
	int                                                m_nInsertPosition;                                		// 0x000540 (0x0004)              
	struct FUIScreenValue_Position                     m_StartMousePosition;                             		// 0x000544 (0x000C)              
	float                                              m_fAutoScrollStart;                               		// 0x000550 (0x0004)              
	float                                              m_fAutoScrollAmount;                              		// 0x000554 (0x0004)              
	struct FEnumeratedName                             DragCue;                                          		// 0x000558 (0x0010)              
	struct FEnumeratedName                             DropCue;                                          		// 0x000568 (0x0010)              
	struct FEnumeratedName                             DropFailedCue;                                    		// 0x000578 (0x0010)              
	float                                              fDraggedAlpha;                                    		// 0x000588 (0x0004)              
	struct FUIScreenValue_Extent                       ScrollbarDockingOffsetTop;                        		// 0x00058C (0x0008)              
	struct FUIScreenValue_Extent                       ScrollbarDockingOffsetBottom;                     		// 0x000594 (0x0008)              
	class UUIScrollbar*                                VerticalScrollbar;                                		// 0x00059C (0x0004)              
	struct FUIStyleReference                           ColumnHeaderStyle;                                		// 0x0005A0 (0x0020)              
	struct FUIStyleReference                           ColumnHeaderBackgroundStyle[0x3];                 		// 0x0005C0 (0x0060)              
	int                                                ResizeColumn;                                     		// 0x000620 (0x0004)              
	int                                                SetIndexMutex;                                    		// 0x000624 (0x0004)              
	int                                                ValueChangeNotificationMutex;                     		// 0x000628 (0x0004)              
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x00062C (0x0030)              
	class UUIListElementProvider*                      DataProvider;                                     		// 0x00065C (0x0004)              
	unsigned char                                      _0x000660[0x4];                                   		// 0x000660 (0x0004) ALIGNEMENT
	TArray<int>                                        Items;                                            		// 0x000664 (0x000C)              
	TArray<int>                                        SelectedItems;                                    		// 0x000670 (0x000C)              
	class UUIComp_ListElementSorter*                   SortComponent;                                    		// 0x00067C (0x0004)              
	class UUIComp_ListPresenterBase*                   CellDataComponent;                                		// 0x000680 (0x0004)              
	struct FEnumeratedName                             SubmitDataSuccessCue;                             		// 0x000684 (0x0010)              
	struct FEnumeratedName                             SubmitDataFailedCue;                              		// 0x000694 (0x0010)              
	struct FEnumeratedName                             DecrementIndexCue;                                		// 0x0006A4 (0x0010)              
	struct FEnumeratedName                             IncrementIndexCue;                                		// 0x0006B4 (0x0010)              
	struct FEnumeratedName                             SortAscendingCue;                                 		// 0x0006C4 (0x0010)              
	struct FEnumeratedName                             SortDescendingCue;                                		// 0x0006D4 (0x0010)              
	struct FEnumeratedName                             ClickedCue;                                       		// 0x0006E4 (0x0010)              
	struct FScriptDelegate                             __OnSubmitSelection__Delegate;                    		// 0x0006F4 (0x000C)              
	struct FScriptDelegate                             __OnListElementsSorted__Delegate;                 		// 0x000700 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIList");
		return pClassPointer;
	};

public:
	bool AllMutexesDisabled();//Engine.UIList.AllMutexesDisabled
	float GetColumnWidth(int ColumnIndex,bool bColHeader,bool bReturnUnformattedValue);//Engine.UIList.GetColumnWidth
	void DecrementAllMutexes(bool bDispatchUpdates);//Engine.UIList.DecrementAllMutexes
	void SetHotTracking(bool bShouldUpdateItemUnderCursor);//Engine.UIList.SetHotTracking
	void PostInitialize();//Engine.UIList.PostInitialize
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UIList.SaveSubscriberValue
	bool IsElementEnabled(int ElementIndex);//Engine.UIList.IsElementEnabled
	int GetCurrentItem();//Engine.UIList.GetCurrentItem
	void OnSetListIndex(class UUIAction_SetListIndex* Action);//Engine.UIList.OnSetListIndex
	void DisableSetIndex();//Engine.UIList.DisableSetIndex
	void OnStateChanged(class UUIScreenObject* Sender,int PlayerIndex,class UUIState* NewlyActiveState,class UUIState* PreviouslyActiveState);//Engine.UIList.OnStateChanged
	bool IsElementAutoSizingEnabled();//Engine.UIList.IsElementAutoSizingEnabled
	int RemoveElement(int ElementToRemove);//Engine.UIList.RemoveElement
	bool CanSelectElement(int ElementIndex);//Engine.UIList.CanSelectElement
	struct FString GetElementValue(int ElementIndex,int CellIndex);//Engine.UIList.GetElementValue
	void OnGetTextValue(class UUIAction_GetTextValue* Action);//Engine.UIList.OnGetTextValue
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UIList.GetBoundDataStores
	bool ScrollVertical(class UUIScrollbar* Sender,float PositionChange,bool bPositionMaxed);//Engine.UIList.ScrollVertical
	void IncrementAllMutexes();//Engine.UIList.IncrementAllMutexes
	int GetMaxNumVisibleRows();//Engine.UIList.GetMaxNumVisibleRows
	bool IsValueChangeNotificationEnabled();//Engine.UIList.IsValueChangeNotificationEnabled
	int GetMaxNumVisibleColumns();//Engine.UIList.GetMaxNumVisibleColumns
	bool IsHoldingCtrl(int ControllerId);//Engine.UIList.IsHoldingCtrl
	bool IsSetIndexEnabled();//Engine.UIList.IsSetIndexEnabled
	int GetResizeColumn(struct FCellHitDetectionInfo* ClickedCell);//Engine.UIList.GetResizeColumn
	int GetTotalRowCount();//Engine.UIList.GetTotalRowCount
	bool SetIndex(int NewIndex,bool bClampValue,bool bSkipNotification);//Engine.UIList.SetIndex
	void ClearBoundDataStores();//Engine.UIList.ClearBoundDataStores
	void EnableColumnHeaderRendering(bool bShouldRenderColHeaders);//Engine.UIList.EnableColumnHeaderRendering
	FVector2 GetClientRegion(bool bColHeader);//Engine.UIList.GetClientRegion
	int GetItemCount();//Engine.UIList.GetItemCount
	int CalculateIndexFromCursorLocation(bool bRequireValidIndex);//Engine.UIList.CalculateIndexFromCursorLocation
	void EnableSetIndex();//Engine.UIList.EnableSetIndex
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIList.NotifyDataStoreValueUpdated
	void Initialized();//Engine.UIList.Initialized
	void SetRowCount(int NewRowCount);//Engine.UIList.SetRowCount
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UIList.GetDataStoreBinding
	bool ScrollVerticalPage(int nPageChange);//Engine.UIList.ScrollVerticalPage
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UIList.SetDataStoreBinding
	bool IsHotTrackingEnabled();//Engine.UIList.IsHotTrackingEnabled
	void SelectElement(int ElementIndex,bool bSelected);//Engine.UIList.SelectElement
	int GetMaxVisibleElementCount();//Engine.UIList.GetMaxVisibleElementCount
	void ClickedScrollZone(class UUIScrollbar* Sender,float PositionPerc,int PlayerIndex);//Engine.UIList.ClickedScrollZone
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UIList.RefreshSubscriberValue
	void DisableValueChangeNotification();//Engine.UIList.DisableValueChangeNotification
	void EnableValueChangeNotification();//Engine.UIList.EnableValueChangeNotification
	bool SetTopIndex(int NewTopIndex,bool bClampValue);//Engine.UIList.SetTopIndex
	float GetRowHeight(int RowIndex,bool bColHeader,bool bReturnUnformattedValue);//Engine.UIList.GetRowHeight
	int GetTotalColumnCount();//Engine.UIList.GetTotalColumnCount
	void OnChildRepositioned(class UUIScreenObject* Sender);//Engine.UIList.OnChildRepositioned
	void OnListElementsSorted(class UUIList* Sender);//Engine.UIList.OnListElementsSorted
	bool ShouldRenderColumnHeaders();//Engine.UIList.ShouldRenderColumnHeaders
	int FindItemIndex(struct FString ItemValue,int CellIndex);//Engine.UIList.FindItemIndex
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIList.OnSequenceAction
	TArray<int> GetSelectedItems();//Engine.UIList.GetSelectedItems
	void SetColumnCount(int NewColumnCount);//Engine.UIList.SetColumnCount
	void OnSubmitSelection(class UUIList* Sender,int PlayerIndex);//Engine.UIList.OnSubmitSelection
};
UClass* UUIList::pClassPointer = NULL;

//0x000000 (0x00004C - 0x00004C)
//UIComp_ListComponentBase[0x10328D50]
class UUIComp_ListComponentBase : public UUIComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_ListComponentBase");
		return pClassPointer;
	};
};
UClass* UUIComp_ListComponentBase::pClassPointer = NULL;

//0x000020 (0x00006C - 0x00004C)
//UIComp_ListElementSorter[0x10328AF0]
class UUIComp_ListElementSorter : public UUIComp_ListComponentBase
{
public:
	unsigned long                                      bAllowCompoundSorting : 1;                        		// 0x00004C (0x0004) [0x00000001] 
	unsigned long                                      bReversePrimarySorting : 1;                       		// 0x00004C (0x0004) [0x00000002] 
	unsigned long                                      bReverseSecondarySorting : 1;                     		// 0x00004C (0x0004) [0x00000004] 
	int                                                InitialSortColumn;                                		// 0x000050 (0x0004)              
	int                                                InitialSecondarySortColumn;                       		// 0x000054 (0x0004)              
	int                                                PrimarySortColumn;                                		// 0x000058 (0x0004)              
	int                                                SecondarySortColumn;                              		// 0x00005C (0x0004)              
	struct FScriptDelegate                             __OverrideListSort__Delegate;                     		// 0x000060 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_ListElementSorter");
		return pClassPointer;
	};

public:
	bool OverrideListSort(class UUIList* Sender,struct FName CollectionFieldName,struct FUIListSortingParameters* SortParameters,TArray<int>* OrderedIndices);//Engine.UIComp_ListElementSorter.OverrideListSort
	void ResetSortColumns(bool bResort);//Engine.UIComp_ListElementSorter.ResetSortColumns
	bool ResortItems(bool bCaseSensitive);//Engine.UIComp_ListElementSorter.ResortItems
	bool SortItems(int ColumnIndex,bool bSecondarySort,bool bCaseSensitive);//Engine.UIComp_ListElementSorter.SortItems
};
UClass* UUIComp_ListElementSorter::pClassPointer = NULL;

//0x000004 (0x000050 - 0x00004C)
//UIComp_ListPresenterBase[0x103289C0]
class UUIComp_ListPresenterBase : public UUIComp_ListComponentBase
{
public:
	unsigned long                                      bReapplyFormatting : 1;                           		// 0x00004C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_ListPresenterBase");
		return pClassPointer;
	};

public:
	void CalculateAutoSizeRowHeight(int RowIndex,float* out_RowHeight,float* out_StylePadding,bool bReturnUnformattedValue);//Engine.UIComp_ListPresenterBase.CalculateAutoSizeRowHeight
	void EnableColumnHeaderRendering(bool bShouldRenderColHeaders);//Engine.UIComp_ListPresenterBase.EnableColumnHeaderRendering
	bool ShouldAdjustListBounds(unsigned char Orientation);//Engine.UIComp_ListPresenterBase.ShouldAdjustListBounds
	class UUIListElementCellProvider* GetCellSchemaProvider();//Engine.UIComp_ListPresenterBase.GetCellSchemaProvider
	bool ShouldRenderColumnHeaders();//Engine.UIComp_ListPresenterBase.ShouldRenderColumnHeaders
	struct FString GetElementValue(int ElementIndex,int CellIndex);//Engine.UIComp_ListPresenterBase.GetElementValue
	void CalculateAutoSizeColumnWidth(int ColIndex,float* out_ColWidth,float* out_StylePadding,bool bReturnUnformattedValue);//Engine.UIComp_ListPresenterBase.CalculateAutoSizeColumnWidth
};
UClass* UUIComp_ListPresenterBase::pClassPointer = NULL;

//0x0000FC (0x00014C - 0x000050)
//UIComp_ListPresenter[0x10328890]
class UUIComp_ListPresenter : public UUIComp_ListPresenterBase
{
public:
	DWORD                                              VfTable_ICustomPropertyItemHandler;               		// 0x000050 (0x0004)              
	struct FUIElementCellSchema                        ElementSchema;                                    		// 0x000054 (0x000C)              
	TArray<struct FUIListItem>                         ListItems;                                        		// 0x000060 (0x000C)              
	class UUITexture*                                  ColumnHeaderBackground[0x3];                      		// 0x00006C (0x000C)              
	class UUITexture*                                  ListItemOverlay[0x6];                             		// 0x000078 (0x0018)              
	struct FTextureCoordinates                         ColumnHeaderBackgroundCoordinates[0x3];           		// 0x000090 (0x0030)              
	class UUITexture*                                  m_InsertMarker;                                   		// 0x0000C0 (0x0004)              
	struct FTextureCoordinates                         ListItemOverlayCoordinates[0x6];                  		// 0x0000C4 (0x0060)              
	unsigned long                                      bDisplayColumnHeaders : 1;                        		// 0x000124 (0x0004) [0x00000001] 
	TArray<DWORD>                                      RowBackgroundColors;                              		// 0x000128 (0x000C)              
	TArray<class UUIListString*>                       m_ListStringPool;                                 		// 0x000134 (0x000C)              
	TArray<class UUITexture*>                          m_TexturePool;                                    		// 0x000140 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_ListPresenter");
		return pClassPointer;
	};

public:
	int FindElementIndex(int DataSourceIndex);//Engine.UIComp_ListPresenter.FindElementIndex
};
UClass* UUIComp_ListPresenter::pClassPointer = NULL;

//0x000000 (0x00014C - 0x00014C)
//UIComp_ListPresenterCascade[0x10328760]
class UUIComp_ListPresenterCascade : public UUIComp_ListPresenter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_ListPresenterCascade");
		return pClassPointer;
	};
};
UClass* UUIComp_ListPresenterCascade::pClassPointer = NULL;

//0x000014 (0x000720 - 0x00070C)
//UIContextMenu[0x10328500]
class UUIContextMenu : public UUIList
{
public:
	class UUIObject*                                   InvokingWidget;                                   		// 0x00070C (0x0004)              
	TArray<struct FContextMenuItem>                    MenuItems;                                        		// 0x000710 (0x000C)              
	unsigned long                                      bResolvePosition : 1;                             		// 0x00071C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIContextMenu");
		return pClassPointer;
	};

public:
	bool InsertMenuItem(class UUIObject* Widget,struct FString Item,int InsertIndex,bool bAllowDuplicates);//Engine.UIContextMenu.InsertMenuItem
	bool IsActiveContextMenu();//Engine.UIContextMenu.IsActiveContextMenu
	bool ClearMenuItems(class UUIObject* Widget);//Engine.UIContextMenu.ClearMenuItems
	bool Open(int PlayerIndex);//Engine.UIContextMenu.Open
	bool GetMenuItem(class UUIObject* Widget,int IndexToGet,struct FString* out_MenuItem);//Engine.UIContextMenu.GetMenuItem
	bool SetMenuItems(class UUIObject* Widget,TArray<struct FString> NewMenuItems,bool bClearExisting,int InsertIndex);//Engine.UIContextMenu.SetMenuItems
	bool RemoveMenuItemAtIndex(class UUIObject* Widget,int IndexToRemove);//Engine.UIContextMenu.RemoveMenuItemAtIndex
	bool RemoveMenuItem(class UUIObject* Widget,struct FString ItemToRemove);//Engine.UIContextMenu.RemoveMenuItem
	bool GetAllMenuItems(class UUIObject* Widget,TArray<struct FString>* out_MenuItems);//Engine.UIContextMenu.GetAllMenuItems
	bool Close(int PlayerIndex);//Engine.UIContextMenu.Close
	int FindMenuItemIndex(class UUIObject* Widget,struct FString ItemToFind);//Engine.UIContextMenu.FindMenuItemIndex
};
UClass* UUIContextMenu::pClassPointer = NULL;

//0x000000 (0x00014C - 0x00014C)
//UIComp_ContextMenuListPresenter[0x10328630]
class UUIComp_ContextMenuListPresenter : public UUIComp_ListPresenterCascade
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_ContextMenuListPresenter");
		return pClassPointer;
	};
};
UClass* UUIComp_ContextMenuListPresenter::pClassPointer = NULL;

//0x000000 (0x00014C - 0x00014C)
//UIComp_ListPresenterTree[0x103283D0]
class UUIComp_ListPresenterTree : public UUIComp_ListPresenter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_ListPresenterTree");
		return pClassPointer;
	};
};
UClass* UUIComp_ListPresenterTree::pClassPointer = NULL;

//0x000000 (0x00070C - 0x00070C)
//UIObjectList[0x10328170]
class UUIObjectList : public UUIList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIObjectList");
		return pClassPointer;
	};
};
UClass* UUIObjectList::pClassPointer = NULL;

//0x000000 (0x00014C - 0x00014C)
//UIComp_ObjectListPresenter[0x103282A0]
class UUIComp_ObjectListPresenter : public UUIComp_ListPresenter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComp_ObjectListPresenter");
		return pClassPointer;
	};
};
UClass* UUIComp_ObjectListPresenter::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UIDataStoreSubscriber[0x10328040]
class UUIDataStoreSubscriber : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStoreSubscriber");
		return pClassPointer;
	};

public:
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated
	void ClearBoundDataStores();//Engine.UIDataStoreSubscriber.ClearBoundDataStores
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UIDataStoreSubscriber.RefreshSubscriberValue
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UIDataStoreSubscriber.GetDataStoreBinding
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UIDataStoreSubscriber.GetBoundDataStores
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UIDataStoreSubscriber.SetDataStoreBinding
};
UClass* UUIDataStoreSubscriber::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UIDataStorePublisher[0x10327F10]
class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStorePublisher");
		return pClassPointer;
	};

public:
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UIDataStorePublisher.SaveSubscriberValue
};
UClass* UUIDataStorePublisher::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UIListElementCellProvider[0x10327DE0]
class UUIListElementCellProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIListElementCellProvider");
		return pClassPointer;
	};
};
UClass* UUIListElementCellProvider::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UIListElementProvider[0x10327CB0]
class UUIListElementProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIListElementProvider");
		return pClassPointer;
	};
};
UClass* UUIListElementProvider::pClassPointer = NULL;

//0x00001C (0x000060 - 0x000044)
//UIAnimationSeq[0x10327B80]
class UUIAnimationSeq : public UUIAnimation
{
public:
	struct FName                                       SeqName;                                          		// 0x000044 (0x0008)              
	float                                              SeqDuration;                                      		// 0x00004C (0x0004)              
	TArray<struct FUIAnimTrack>                        Tracks;                                           		// 0x000050 (0x000C)              
	unsigned long                                      bAbsolutePositioning : 1;                         		// 0x00005C (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAnimationSeq");
		return pClassPointer;
	};

public:
	void ApplyAnimation(class UUIObject* TargetWidget,int TrackIndex,float Position,int LFI,int NFI,struct FUIAnimSeqRef AnimRefInst);//Engine.UIAnimationSeq.ApplyAnimation
};
UClass* UUIAnimationSeq::pClassPointer = NULL;

//0x000000 (0x000060 - 0x000060)
//UIConfigProvider[0x10327A50]
class UUIConfigProvider : public UUIDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIConfigProvider");
		return pClassPointer;
	};
};
UClass* UUIConfigProvider::pClassPointer = NULL;

//0x000018 (0x000078 - 0x000060)
//UIConfigFileProvider[0x10327920]
class UUIConfigFileProvider : public UUIConfigProvider
{
public:
	TArray<class UUIConfigSectionProvider*>            Sections;                                         		// 0x000060 (0x000C)              
	struct FString                                     ConfigFileName;                                   		// 0x00006C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIConfigFileProvider");
		return pClassPointer;
	};
};
UClass* UUIConfigFileProvider::pClassPointer = NULL;

//0x00000C (0x00006C - 0x000060)
//UIConfigSectionProvider[0x103277F0]
class UUIConfigSectionProvider : public UUIConfigProvider
{
public:
	struct FString                                     SectionName;                                      		// 0x000060 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIConfigSectionProvider");
		return pClassPointer;
	};
};
UClass* UUIConfigSectionProvider::pClassPointer = NULL;

//0x000004 (0x000064 - 0x000060)
//UIDataProvider_OnlinePlayerDataBase[0x103276C0]
class UUIDataProvider_OnlinePlayerDataBase : public UUIDataProvider
{
public:
	class ULocalPlayer*                                Player;                                           		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerDataBase");
		return pClassPointer;
	};

public:
	void OnUnregister();//Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister
	void OnRegister(class ULocalPlayer* InPlayer);//Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister
};
UClass* UUIDataProvider_OnlinePlayerDataBase::pClassPointer = NULL;

//0x000004 (0x000068 - 0x000064)
//UIDataProvider_OnlineClanMates[0x10327590]
class UUIDataProvider_OnlineClanMates : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlineClanMates");
		return pClassPointer;
	};

public:
	void OnRegister(class ULocalPlayer* InPlayer);//Engine.UIDataProvider_OnlineClanMates.OnRegister
	void OnClanMatesReadComplete();//Engine.UIDataProvider_OnlineClanMates.OnClanMatesReadComplete
};
UClass* UUIDataProvider_OnlineClanMates::pClassPointer = NULL;

//0x000058 (0x0000BC - 0x000064)
//UIDataProvider_OnlineFriendMessages[0x10327460]
class UUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x000064 (0x0004)              
	TArray<struct FOnlineFriendMessage>                Messages;                                         		// 0x000068 (0x000C)              
	struct FString                                     SendingPlayerNameCol;                             		// 0x000074 (0x000C)              
	struct FString                                     bIsFriendInviteCol;                               		// 0x000080 (0x000C)              
	struct FString                                     bWasAcceptedCol;                                  		// 0x00008C (0x000C)              
	struct FString                                     bWasDeniedCol;                                    		// 0x000098 (0x000C)              
	struct FString                                     MessageCol;                                       		// 0x0000A4 (0x000C)              
	struct FString                                     LastInviteFrom;                                   		// 0x0000B0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlineFriendMessages");
		return pClassPointer;
	};

public:
	void OnFriendMessageReceived(unsigned char LocalUserNum,struct FUniqueNetId SendingPlayer,struct FString SendingNick,struct FString Message);//Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived
	void OnRegister(class ULocalPlayer* InPlayer);//Engine.UIDataProvider_OnlineFriendMessages.OnRegister
	void OnGameInviteReceived(unsigned char LocalUserNum,struct FString InviterName);//Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived
	void ReadMessages();//Engine.UIDataProvider_OnlineFriendMessages.ReadMessages
	void OnFriendInviteReceived(unsigned char LocalUserNum,struct FUniqueNetId RequestingPlayer,struct FString RequestingNick,struct FString Message);//Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived
	void OnLoginChange(unsigned char LocalUserNum);//Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange
	void OnUnregister();//Engine.UIDataProvider_OnlineFriendMessages.OnUnregister
};
UClass* UUIDataProvider_OnlineFriendMessages::pClassPointer = NULL;

//0x000064 (0x0000C8 - 0x000064)
//UIDataProvider_OnlineFriends[0x10327330]
class UUIDataProvider_OnlineFriends : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x000064 (0x0004)              
	TArray<struct FOnlineFriend>                       FriendsList;                                      		// 0x000068 (0x000C)              
	struct FString                                     NickNameCol;                                      		// 0x000074 (0x000C)              
	struct FString                                     PresenceInfoCol;                                  		// 0x000080 (0x000C)              
	struct FString                                     bIsOnlineCol;                                     		// 0x00008C (0x000C)              
	struct FString                                     bIsPlayingCol;                                    		// 0x000098 (0x000C)              
	struct FString                                     bIsPlayingThisGameCol;                            		// 0x0000A4 (0x000C)              
	struct FString                                     bIsJoinableCol;                                   		// 0x0000B0 (0x000C)              
	struct FString                                     bHasVoiceSupportCol;                              		// 0x0000BC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlineFriends");
		return pClassPointer;
	};

public:
	void OnFriendsReadComplete(bool bWasSuccessful);//Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete
	void OnUnregister();//Engine.UIDataProvider_OnlineFriends.OnUnregister
	void RefreshFriendsList();//Engine.UIDataProvider_OnlineFriends.RefreshFriendsList
	void OnLoginChange(unsigned char LocalUserNum);//Engine.UIDataProvider_OnlineFriends.OnLoginChange
	void OnRegister(class ULocalPlayer* InPlayer);//Engine.UIDataProvider_OnlineFriends.OnRegister
};
UClass* UUIDataProvider_OnlineFriends::pClassPointer = NULL;

//0x000004 (0x000068 - 0x000064)
//UIDataProvider_OnlinePlayers[0x10327200]
class UUIDataProvider_OnlinePlayers : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x000064 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayers");
		return pClassPointer;
	};

public:
	void OnRegister(class ULocalPlayer* InPlayer);//Engine.UIDataProvider_OnlinePlayers.OnRegister
	void OnPlayersReadComplete();//Engine.UIDataProvider_OnlinePlayers.OnPlayersReadComplete
};
UClass* UUIDataProvider_OnlinePlayers::pClassPointer = NULL;

//0x00001C (0x000080 - 0x000064)
//UIDataProvider_OnlineProfileSettings[0x103270D0]
class UUIDataProvider_OnlineProfileSettings : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class UOnlineProfileSettings*                      Profile;                                          		// 0x000064 (0x0004)              
	struct FName                                       ProviderName;                                     		// 0x000068 (0x0008)              
	unsigned long                                      bWasErrorLastRead : 1;                            		// 0x000070 (0x0004) [0x00000001] 
	unsigned long                                      bInitializeFromDefaults : 1;                      		// 0x000070 (0x0004) [0x00000002] 
	TArray<struct FProfileSettingsArrayProvider>       ProfileSettingsArrayProviders;                    		// 0x000074 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlineProfileSettings");
		return pClassPointer;
	};

public:
	void OnReadProfileComplete(unsigned char LocalUserNum,bool bWasSuccessful);//Engine.UIDataProvider_OnlineProfileSettings.OnReadProfileComplete
	bool SaveProfileData();//Engine.UIDataProvider_OnlineProfileSettings.SaveProfileData
	void OnUnregister();//Engine.UIDataProvider_OnlineProfileSettings.OnUnregister
	void OnRegister(class ULocalPlayer* InPlayer);//Engine.UIDataProvider_OnlineProfileSettings.OnRegister
	void OnLoginChange(unsigned char LocalUserNum);//Engine.UIDataProvider_OnlineProfileSettings.OnLoginChange
};
UClass* UUIDataProvider_OnlineProfileSettings::pClassPointer = NULL;

//0x000030 (0x000090 - 0x000060)
//UIDataProvider_OnlineProfileSettingsArray[0x10326FA0]
class UUIDataProvider_OnlineProfileSettingsArray : public UUIDataProvider
{
public:
	DWORD                                              VfTable_IUIListElementProvider;                   		// 0x000060 (0x0004)              
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x000064 (0x0004)              
	class UOnlineProfileSettings*                      ProfileSettings;                                  		// 0x000068 (0x0004)              
	int                                                ProfileSettingId;                                 		// 0x00006C (0x0004)              
	struct FName                                       ProfileSettingsName;                              		// 0x000070 (0x0008)              
	struct FString                                     ColumnHeaderText;                                 		// 0x000078 (0x000C)              
	TArray<struct FName>                               Values;                                           		// 0x000084 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataProvider_OnlineProfileSettingsArray");
		return pClassPointer;
	};
};
UClass* UUIDataProvider_OnlineProfileSettingsArray::pClassPointer = NULL;

//0x000030 (0x000090 - 0x000060)
//UIDataProvider_SettingsArray[0x10326E70]
class UUIDataProvider_SettingsArray : public UUIDataProvider
{
public:
	DWORD                                              VfTable_IUIListElementProvider;                   		// 0x000060 (0x0004)              
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x000064 (0x0004)              
	class USettings*                                   Settings;                                         		// 0x000068 (0x0004)              
	int                                                SettingsId;                                       		// 0x00006C (0x0004)              
	struct FName                                       SettingsName;                                     		// 0x000070 (0x0008)              
	struct FString                                     ColumnHeaderText;                                 		// 0x000078 (0x000C)              
	TArray<struct FIdToStringMapping>                  Values;                                           		// 0x000084 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataProvider_SettingsArray");
		return pClassPointer;
	};
};
UClass* UUIDataProvider_SettingsArray::pClassPointer = NULL;

//0x000010 (0x000090 - 0x000080)
//cUIDataStore_Localisation[0x10326D40]
class UcUIDataStore_Localisation : public UUIDataStore
{
public:
	struct FString                                     m_sInputLanguageId;                               		// 0x000080 (0x000C)              
	unsigned long                                      m_bHasIME : 1;                                    		// 0x00008C (0x0004) [0x00000001] 
	unsigned long                                      m_bIMEActive : 1;                                 		// 0x00008C (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cUIDataStore_Localisation");
		return pClassPointer;
	};

public:
	void SetInputLanguageId(struct FString sInputLangId,bool bHasIME,bool bIMEActive);//Engine.cUIDataStore_Localisation.SetInputLanguageId
};
UClass* UcUIDataStore_Localisation::pClassPointer = NULL;

//0x000010 (0x000090 - 0x000080)
//SceneDataStore[0x10326C10]
class USceneDataStore : public UUIDataStore
{
public:
	DWORD                                              VfTable_IUIListElementProvider;                   		// 0x000080 (0x0004)              
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x000084 (0x0004)              
	class UUIScene*                                    OwnerScene;                                       		// 0x000088 (0x0004)              
	class UUIDynamicFieldProvider*                     SceneDataProvider;                                		// 0x00008C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SceneDataStore");
		return pClassPointer;
	};

public:
	bool GetCollectionValueArray(struct FName FieldName,TArray<struct FString>* out_DataValueArray,bool bPersistent,struct FName CellTag);//Engine.SceneDataStore.GetCollectionValueArray
	bool ClearFields(bool bReinitializeRuntimeFields);//Engine.SceneDataStore.ClearFields
	bool ClearCollectionValueArray(struct FName FieldName,bool bPersistent,struct FName CellTag);//Engine.SceneDataStore.ClearCollectionValueArray
	bool ReplaceCollectionValueByIndex(struct FName FieldName,int ValueIndex,struct FString* NewValue,bool bPersistent,struct FName CellTag);//Engine.SceneDataStore.ReplaceCollectionValueByIndex
	bool ReplaceCollectionValue(struct FName FieldName,struct FString* CurrentValue,struct FString* NewValue,bool bPersistent,struct FName CellTag);//Engine.SceneDataStore.ReplaceCollectionValue
	bool RemoveCollectionValueByIndex(struct FName FieldName,int ValueIndex,bool bPersistent,struct FName CellTag);//Engine.SceneDataStore.RemoveCollectionValueByIndex
	bool AddField(struct FName FieldName,unsigned char FieldType,bool bPersistent,int* out_InsertPosition);//Engine.SceneDataStore.AddField
	bool GetCollectionValue(struct FName FieldName,int ValueIndex,struct FString* out_Value,bool bPersistent,struct FName CellTag);//Engine.SceneDataStore.GetCollectionValue
	bool RemoveCollectionValue(struct FName FieldName,struct FString* ValueToRemove,bool bPersistent,struct FName CellTag);//Engine.SceneDataStore.RemoveCollectionValue
	int FindCollectionValueIndex(struct FName FieldName,struct FString* ValueToFind,bool bPersistent,struct FName CellTag);//Engine.SceneDataStore.FindCollectionValueIndex
	int FindFieldIndex(struct FName FieldName,bool bSearchPersistentFields);//Engine.SceneDataStore.FindFieldIndex
	bool RemoveField(struct FName FieldName);//Engine.SceneDataStore.RemoveField
	bool SetCollectionValueArray(struct FName FieldName,TArray<struct FString>* CollectionValues,bool bClearExisting,int InsertIndex,bool bPersistent,struct FName CellTag);//Engine.SceneDataStore.SetCollectionValueArray
	bool InsertCollectionValue(struct FName FieldName,struct FString* NewValue,int InsertIndex,bool bPersistent,bool bAllowDuplicateValues,struct FName CellTag);//Engine.SceneDataStore.InsertCollectionValue
};
UClass* USceneDataStore::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//UIDataStore_Color[0x10326AE0]
class UUIDataStore_Color : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_Color");
		return pClassPointer;
	};
};
UClass* UUIDataStore_Color::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//UIDataStore_Fonts[0x103269B0]
class UUIDataStore_Fonts : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_Fonts");
		return pClassPointer;
	};
};
UClass* UUIDataStore_Fonts::pClassPointer = NULL;

//0x00004C (0x0000CC - 0x000080)
//UIDataStore_GameResource[0x10326880]
class UUIDataStore_GameResource : public UUIDataStore
{
public:
	DWORD                                              VfTable_IUIListElementProvider;                   		// 0x000080 (0x0004)              
	TArray<struct FGameResourceDataProvider>           ElementProviderTypes;                             		// 0x000084 (0x000C)              
	struct FMultiMap_Mirror                            ListElementProviders;                             		// 0x000090 (0x003C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_GameResource");
		return pClassPointer;
	};

public:
	bool GetResourceProviderFields(struct FName ProviderTag,TArray<struct FName>* ProviderFieldTags);//Engine.UIDataStore_GameResource.GetResourceProviderFields
	int FindProviderIndexByFieldValue(struct FName ProviderTag,struct FName SearchField,struct FUIProviderScriptFieldValue* ValueToSearchFor);//Engine.UIDataStore_GameResource.FindProviderIndexByFieldValue
	int GetProviderCount(struct FName ProviderTag);//Engine.UIDataStore_GameResource.GetProviderCount
	struct FName GenerateProviderAccessTag(int ProviderIndex,int InstanceIndex);//Engine.UIDataStore_GameResource.GenerateProviderAccessTag
	bool GetProviderFieldValue(struct FName ProviderTag,struct FName SearchField,int ProviderIndex,struct FUIProviderScriptFieldValue* out_FieldValue);//Engine.UIDataStore_GameResource.GetProviderFieldValue
	bool GetResourceProviders(struct FName ProviderTag,TArray<class UUIResourceDataProvider*>* out_Providers);//Engine.UIDataStore_GameResource.GetResourceProviders
	int FindProviderTypeIndex(struct FName ProviderTag);//Engine.UIDataStore_GameResource.FindProviderTypeIndex
};
UClass* UUIDataStore_GameResource::pClassPointer = NULL;

//0x00000C (0x00008C - 0x000080)
//UIDataStore_GameState[0x10326750]
class UUIDataStore_GameState : public UUIDataStore
{
public:
	struct FScriptDelegate                             __OnRefreshDataFieldValue__Delegate;              		// 0x000080 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_GameState");
		return pClassPointer;
	};

public:
	void OnRefreshDataFieldValue();//Engine.UIDataStore_GameState.OnRefreshDataFieldValue
	bool NotifyGameSessionEnded();//Engine.UIDataStore_GameState.NotifyGameSessionEnded
};
UClass* UUIDataStore_GameState::pClassPointer = NULL;

//0x00003C (0x0000C8 - 0x00008C)
//CurrentGameDataStore[0x10326620]
class UCurrentGameDataStore : public UUIDataStore_GameState
{
public:
	DWORD                                              VfTable_IUIListElementProvider;                   		// 0x00008C (0x0004)              
	struct FGameDataProviderTypes                      ProviderTypes;                                    		// 0x000090 (0x000C)              
	class UGameInfoDataProvider*                       GameData;                                         		// 0x00009C (0x0004)              
	TArray<class UPlayerDataProvider*>                 PlayerData;                                       		// 0x0000A0 (0x000C)              
	TArray<class UTeamDataProvider*>                   TeamData;                                         		// 0x0000AC (0x000C)              
	unsigned long                                      bRefreshPlayerDataProviders : 1;                  		// 0x0000B8 (0x0004) [0x00000001] 
	unsigned long                                      bRefreshTeamDataProviders : 1;                    		// 0x0000B8 (0x0004) [0x00000002] 
	struct FScriptDelegate                             __OnAddTeamProvider__Delegate;                    		// 0x0000BC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CurrentGameDataStore");
		return pClassPointer;
	};

public:
	bool NotifyGameSessionEnded();//Engine.CurrentGameDataStore.NotifyGameSessionEnded
	class UPlayerDataProvider* GetPlayerDataProvider(class APlayerReplicationInfo* PRI);//Engine.CurrentGameDataStore.GetPlayerDataProvider
	void ClearDataProviders();//Engine.CurrentGameDataStore.ClearDataProviders
	void OnAddTeamProvider(class UTeamDataProvider* Provider);//Engine.CurrentGameDataStore.OnAddTeamProvider
	void TeamDataProviderPropertyChange(class UUIDataProvider* SourceProvider,struct FName PropTag);//Engine.CurrentGameDataStore.TeamDataProviderPropertyChange
	class UTeamDataProvider* GetTeamDataProvider(class ATeamInfo* TI);//Engine.CurrentGameDataStore.GetTeamDataProvider
	void PlayerDataProviderPropertyChange(class UUIDataProvider* SourceProvider,struct FName PropTag);//Engine.CurrentGameDataStore.PlayerDataProviderPropertyChange
	void RefreshPlayerDataProviders();//Engine.CurrentGameDataStore.RefreshPlayerDataProviders
	void RemovePlayerDataProvider(class APlayerReplicationInfo* PRI);//Engine.CurrentGameDataStore.RemovePlayerDataProvider
	void CreateGameDataProvider(class AGameReplicationInfo* GRI);//Engine.CurrentGameDataStore.CreateGameDataProvider
	void NotifyPlayersChanged();//Engine.CurrentGameDataStore.NotifyPlayersChanged
	void AddPlayerDataProvider(class APlayerReplicationInfo* PRI);//Engine.CurrentGameDataStore.AddPlayerDataProvider
	void Timer();//Engine.CurrentGameDataStore.Timer
	void NotifyTeamChange();//Engine.CurrentGameDataStore.NotifyTeamChange
	int FindPlayerDataProviderIndex(class APlayerReplicationInfo* PRI);//Engine.CurrentGameDataStore.FindPlayerDataProviderIndex
	int FindTeamDataProviderIndex(class ATeamInfo* TI);//Engine.CurrentGameDataStore.FindTeamDataProviderIndex
	void RemoveTeamDataProvider(class ATeamInfo* TI);//Engine.CurrentGameDataStore.RemoveTeamDataProvider
	void AddTeamDataProvider(class ATeamInfo* TI);//Engine.CurrentGameDataStore.AddTeamDataProvider
	void RefreshTeamDataProviders();//Engine.CurrentGameDataStore.RefreshTeamDataProviders
};
UClass* UCurrentGameDataStore::pClassPointer = NULL;

//0x000030 (0x0000BC - 0x00008C)
//PlayerOwnerDataStore[0x103264F0]
class UPlayerOwnerDataStore : public UUIDataStore_GameState
{
public:
	struct FPlayerDataProviderTypes                    ProviderTypes;                                    		// 0x00008C (0x0010)              
	class UPlayerOwnerDataProvider*                    PlayerData;                                       		// 0x00009C (0x0004)              
	class UCurrentWeaponDataProvider*                  CurrentWeapon;                                    		// 0x0000A0 (0x0004)              
	TArray<class UWeaponDataProvider*>                 WeaponList;                                       		// 0x0000A4 (0x000C)              
	TArray<class UPowerupDataProvider*>                PowerupList;                                      		// 0x0000B0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlayerOwnerDataStore");
		return pClassPointer;
	};

public:
	bool NotifyGameSessionEnded();//Engine.PlayerOwnerDataStore.NotifyGameSessionEnded
	void SetPlayerDataProvider(class UPlayerDataProvider* NewPlayerData);//Engine.PlayerOwnerDataStore.SetPlayerDataProvider
	void ClearDataProviders();//Engine.PlayerOwnerDataStore.ClearDataProviders
};
UClass* UPlayerOwnerDataStore::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//UIDataStore_Gamma[0x103263C0]
class UUIDataStore_Gamma : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_Gamma");
		return pClassPointer;
	};
};
UClass* UUIDataStore_Gamma::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//UIDataStore_Images[0x10326290]
class UUIDataStore_Images : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_Images");
		return pClassPointer;
	};
};
UClass* UUIDataStore_Images::pClassPointer = NULL;

//0x000004 (0x000084 - 0x000080)
//UIDataStore_Registry[0x10326160]
class UUIDataStore_Registry : public UUIDataStore
{
public:
	class UUIDynamicFieldProvider*                     RegistryDataProvider;                             		// 0x000080 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_Registry");
		return pClassPointer;
	};

public:
	class UUIDynamicFieldProvider* GetDataProvider();//Engine.UIDataStore_Registry.GetDataProvider
};
UClass* UUIDataStore_Registry::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//UIDataStore_Remote[0x10326030]
class UUIDataStore_Remote : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_Remote");
		return pClassPointer;
	};
};
UClass* UUIDataStore_Remote::pClassPointer = NULL;

//0x000030 (0x0000B0 - 0x000080)
//UIDataStore_OnlineGameSearch[0x10325F00]
class UUIDataStore_OnlineGameSearch : public UUIDataStore_Remote
{
public:
	DWORD                                              VfTable_IUIListElementProvider;                   		// 0x000080 (0x0004)              
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x000084 (0x0004)              
	struct FName                                       SearchResultsName;                                		// 0x000088 (0x0008)              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x000090 (0x0004)              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x000094 (0x0004)              
	unsigned char                                      _0x000098[0x4];                                   		// 0x000098 (0x0004) ALIGNEMENT
	TArray<struct FGameSearchCfg>                      GameSearchCfgList;                                		// 0x00009C (0x000C)              
	int                                                SelectedIndex;                                    		// 0x0000A8 (0x0004)              
	int                                                ActiveSearchIndex;                                		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_OnlineGameSearch");
		return pClassPointer;
	};

public:
	void MoveToPrevious(bool bInvalidateExistingSearchResults);//Engine.UIDataStore_OnlineGameSearch.MoveToPrevious
	void Init();//Engine.UIDataStore_OnlineGameSearch.Init
	void BuildSearchResults();//Engine.UIDataStore_OnlineGameSearch.BuildSearchResults
	bool GetSearchResultFromIndex(int ListIndex,struct FOnlineGameSearchResult* Result);//Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex
	bool InvalidateCurrentSearchResults();//Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults
	void SetCurrentByIndex(int NewIndex,bool bInvalidateExistingSearchResults);//Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex
	bool SubmitGameSearch(unsigned char ControllerIndex,bool bInvalidateExistingSearchResults);//Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch
	class UOnlineGameSearch* GetActiveGameSearch();//Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch
	bool ShowHostGamercard(unsigned char ControllerIndex,int ListIndex);//Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard
	void ClearAllSearchResults();//Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults
	class UOnlineGameSearch* GetCurrentGameSearch();//Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch
	void SetCurrentByName(struct FName SearchName,bool bInvalidateExistingSearchResults);//Engine.UIDataStore_OnlineGameSearch.SetCurrentByName
	void MoveToNext(bool bInvalidateExistingSearchResults);//Engine.UIDataStore_OnlineGameSearch.MoveToNext
	void OnSearchComplete(bool bWasSuccessful);//Engine.UIDataStore_OnlineGameSearch.OnSearchComplete
	bool OverrideQuerySubmission(unsigned char ControllerId,class UOnlineGameSearch* Search);//Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission
	int FindSearchConfigurationIndex(struct FName SearchTag);//Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex
};
UClass* UUIDataStore_OnlineGameSearch::pClassPointer = NULL;

//0x000080 (0x000100 - 0x000080)
//UIDataStore_OnlinePlayerData[0x10325DD0]
class UUIDataStore_OnlinePlayerData : public UUIDataStore_Remote
{
public:
	DWORD                                              VfTable_IUIListElementProvider;                   		// 0x000080 (0x0004)              
	class UUIDataProvider_OnlineFriends*               FriendsProvider;                                  		// 0x000084 (0x0004)              
	class UUIDataProvider_OnlinePlayers*               PlayersProvider;                                  		// 0x000088 (0x0004)              
	class UUIDataProvider_OnlineClanMates*             ClanMatesProvider;                                		// 0x00008C (0x0004)              
	class ULocalPlayer*                                Player;                                           		// 0x000090 (0x0004)              
	struct FString                                     PlayerNick;                                       		// 0x000094 (0x000C)              
	int                                                NumNewDownloads;                                  		// 0x0000A0 (0x0004)              
	int                                                NumTotalDownloads;                                		// 0x0000A4 (0x0004)              
	struct FString                                     ProfileSettingsClassName;                         		// 0x0000A8 (0x000C)              
	class UClass*                                      ProfileSettingsClass;                             		// 0x0000B4 (0x0004)              
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x0000B8 (0x0004)              
	class UUIDataProvider_OnlineFriendMessages*        FriendMessagesProvider;                           		// 0x0000BC (0x0004)              
	struct FString                                     FriendsProviderClassName;                         		// 0x0000C0 (0x000C)              
	class UClass*                                      FriendsProviderClass;                             		// 0x0000CC (0x0004)              
	struct FString                                     PlayersProviderClassName;                         		// 0x0000D0 (0x000C)              
	class UClass*                                      PlayersProviderClass;                             		// 0x0000DC (0x0004)              
	struct FString                                     ClanMatesProviderClassName;                       		// 0x0000E0 (0x000C)              
	class UClass*                                      ClanMatesProviderClass;                           		// 0x0000EC (0x0004)              
	struct FString                                     FriendMessagesProviderClassName;                  		// 0x0000F0 (0x000C)              
	class UClass*                                      FriendMessagesProviderClass;                      		// 0x0000FC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_OnlinePlayerData");
		return pClassPointer;
	};

public:
	void OnDownloadableContentQueryDone(bool bWasSuccessful);//Engine.UIDataStore_OnlinePlayerData.OnDownloadableContentQueryDone
	void RegisterDelegates();//Engine.UIDataStore_OnlinePlayerData.RegisterDelegates
	bool SaveProfileData();//Engine.UIDataStore_OnlinePlayerData.SaveProfileData
	void OnProviderChanged(class UUIDataProvider* SourceProvider,struct FName PropTag);//Engine.UIDataStore_OnlinePlayerData.OnProviderChanged
	void OnPlayerDataChange();//Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange
	void OnLoginChange(unsigned char LocalUserNum);//Engine.UIDataStore_OnlinePlayerData.OnLoginChange
	void OnRegister(class ULocalPlayer* InPlayer);//Engine.UIDataStore_OnlinePlayerData.OnRegister
	void OnUnregister();//Engine.UIDataStore_OnlinePlayerData.OnUnregister
};
UClass* UUIDataStore_OnlinePlayerData::pClassPointer = NULL;

//0x000070 (0x0000F0 - 0x000080)
//UIDataStore_OnlineStats[0x10325CA0]
class UUIDataStore_OnlineStats : public UUIDataStore_Remote
{
public:
	DWORD                                              VfTable_IUIListElementProvider;                   		// 0x000080 (0x0004)              
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x000084 (0x0004)              
	TArray<class UClass*>                              StatsReadClasses;                                 		// 0x000088 (0x000C)              
	struct FName                                       StatsReadName;                                    		// 0x000094 (0x0008)              
	struct FPlayerNickMetaData                         PlayerNickData;                                   		// 0x00009C (0x0014)              
	struct FRankMetaData                               RankNameMetaData;                                 		// 0x0000B0 (0x0014)              
	struct FName                                       TotalRowsName;                                    		// 0x0000C4 (0x0008)              
	TArray<class UOnlineStatsRead*>                    StatsReadObjects;                                 		// 0x0000CC (0x000C)              
	class UOnlineStatsRead*                            StatsRead;                                        		// 0x0000D8 (0x0004)              
	unsigned char                                      CurrentReadType;                                  		// 0x0000DC (0x0001)              PROPERTY: EStatsFetchType
	unsigned char                                      _0x0000DD[0x3];                                   		// 0x0000DD (0x0003) MISSED OFFSET
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x0000E0 (0x0004)              
	unsigned char                                      _0x0000E4[0x4];                                   		// 0x0000E4 (0x0004) ALIGNEMENT
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x0000E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_OnlineStats");
		return pClassPointer;
	};

public:
	void Init();//Engine.UIDataStore_OnlineStats.Init
	void OnReadComplete(bool bWasSuccessful);//Engine.UIDataStore_OnlineStats.OnReadComplete
	bool ShowGamercard(unsigned char ConrollerIndex,int ListIndex);//Engine.UIDataStore_OnlineStats.ShowGamercard
	bool RefreshStats(unsigned char ControllerIndex);//Engine.UIDataStore_OnlineStats.RefreshStats
	void SetStatsReadInfo();//Engine.UIDataStore_OnlineStats.SetStatsReadInfo
	void SortResultsByRank();//Engine.UIDataStore_OnlineStats.SortResultsByRank
};
UClass* UUIDataStore_OnlineStats::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//UIDataStore_Settings[0x10325B70]
class UUIDataStore_Settings : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_Settings");
		return pClassPointer;
	};
};
UClass* UUIDataStore_Settings::pClassPointer = NULL;

//0x000014 (0x000094 - 0x000080)
//UIDataStore_OnlineGameSettings[0x10325A40]
class UUIDataStore_OnlineGameSettings : public UUIDataStore_Settings
{
public:
	TArray<struct FGameSettingsCfg>                    GameSettingsCfgList;                              		// 0x000080 (0x000C)              
	class UClass*                                      SettingsProviderClass;                            		// 0x00008C (0x0004)              
	int                                                SelectedIndex;                                    		// 0x000090 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_OnlineGameSettings");
		return pClassPointer;
	};

public:
	void SetCurrentByName(struct FName SettingsName);//Engine.UIDataStore_OnlineGameSettings.SetCurrentByName
	void MoveToNext();//Engine.UIDataStore_OnlineGameSettings.MoveToNext
	class UUIDataProvider_Settings* GetCurrentProvider();//Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider
	void SetCurrentByIndex(int NewIndex);//Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex
	void MoveToPrevious();//Engine.UIDataStore_OnlineGameSettings.MoveToPrevious
	class UOnlineGameSettings* GetCurrentGameSettings();//Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings
	bool CreateGame(unsigned char ControllerIndex);//Engine.UIDataStore_OnlineGameSettings.CreateGame
};
UClass* UUIDataStore_OnlineGameSettings::pClassPointer = NULL;

//0x000028 (0x0000A8 - 0x000080)
//UIDataStore_PlayerSettings[0x10325910]
class UUIDataStore_PlayerSettings : public UUIDataStore_Settings
{
public:
	TArray<struct FString>                             PlayerSettingsProviderClassNames;                 		// 0x000080 (0x000C)              
	TArray<class UClass*>                              PlayerSettingsProviderClasses;                    		// 0x00008C (0x000C)              
	TArray<class UPlayerSettingsProvider*>             PlayerSettings;                                   		// 0x000098 (0x000C)              
	int                                                PlayerIndex;                                      		// 0x0000A4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_PlayerSettings");
		return pClassPointer;
	};

public:
	void ClearDataProviders();//Engine.UIDataStore_PlayerSettings.ClearDataProviders
	class ULocalPlayer* GetPlayerOwner();//Engine.UIDataStore_PlayerSettings.GetPlayerOwner
	bool NotifyGameSessionEnded();//Engine.UIDataStore_PlayerSettings.NotifyGameSessionEnded
};
UClass* UUIDataStore_PlayerSettings::pClassPointer = NULL;

//0x000024 (0x0000A4 - 0x000080)
//UIDataStore_SessionSettings[0x103257E0]
class UUIDataStore_SessionSettings : public UUIDataStore_Settings
{
public:
	TArray<struct FString>                             SessionSettingsProviderClassNames;                		// 0x000080 (0x000C)              
	TArray<class UClass*>                              SessionSettingsProviderClasses;                   		// 0x00008C (0x000C)              
	TArray<class USessionSettingsProvider*>            SessionSettings;                                  		// 0x000098 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_SessionSettings");
		return pClassPointer;
	};

public:
	bool NotifyGameSessionEnded();//Engine.UIDataStore_SessionSettings.NotifyGameSessionEnded
	void ClearDataProviders();//Engine.UIDataStore_SessionSettings.ClearDataProviders
};
UClass* UUIDataStore_SessionSettings::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//UIDataStore_StringBase[0x103256B0]
class UUIDataStore_StringBase : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_StringBase");
		return pClassPointer;
	};
};
UClass* UUIDataStore_StringBase::pClassPointer = NULL;

//0x000048 (0x0000C8 - 0x000080)
//UIDataStore_InputAlias[0x10325580]
class UUIDataStore_InputAlias : public UUIDataStore_StringBase
{
public:
	TArray<struct FUIDataStoreInputAlias>              InputAliases;                                     		// 0x000080 (0x000C)              
	unsigned char                                      InputAliasLookupMap[0x3C];                        		// 0x00008C (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_InputAlias");
		return pClassPointer;
	};

public:
	struct FString GetAliasFontMarkup(struct FName DesiredAlias,unsigned char OverridePlatform);//Engine.UIDataStore_InputAlias.GetAliasFontMarkup
	bool GetAliasInputKeyData(struct FRawInputKeyEventData* out_InputKeyData,struct FName DesiredAlias,unsigned char OverridePlatform);//Engine.UIDataStore_InputAlias.GetAliasInputKeyData
	struct FName GetAliasInputKeyNameByIndex(int AliasIndex,unsigned char OverridePlatform);//Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex
	int FindInputAliasIndex(struct FName DesiredAlias);//Engine.UIDataStore_InputAlias.FindInputAliasIndex
	struct FName GetAliasInputKeyName(struct FName DesiredAlias,unsigned char OverridePlatform);//Engine.UIDataStore_InputAlias.GetAliasInputKeyName
	struct FString GetAliasFontMarkupByIndex(int AliasIndex,unsigned char OverridePlatform);//Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex
	bool HasAliasMappingForPlatform(struct FName DesiredAlias,unsigned char DesiredPlatform);//Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform
	bool GetAliasInputKeyDataByIndex(struct FRawInputKeyEventData* out_InputKeyData,int AliasIndex,unsigned char OverridePlatform);//Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex
};
UClass* UUIDataStore_InputAlias::pClassPointer = NULL;

//0x00004C (0x0000CC - 0x000080)
//UIDataStore_StringAliasMap[0x10325450]
class UUIDataStore_StringAliasMap : public UUIDataStore_StringBase
{
public:
	TArray<struct FUIMenuInputMap>                     MenuInputMapArray;                                		// 0x000080 (0x000C)              
	struct FMap_Mirror                                 MenuInputSets;                                    		// 0x00008C (0x003C)              
	int                                                PlayerIndex;                                      		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_StringAliasMap");
		return pClassPointer;
	};

public:
	int GetStringWithFieldName(struct FString FieldName,struct FString* MappedString);//Engine.UIDataStore_StringAliasMap.GetStringWithFieldName
	int FindMappingWithFieldName(struct FString FieldName,struct FString SetName);//Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName
	class ULocalPlayer* GetPlayerOwner();//Engine.UIDataStore_StringAliasMap.GetPlayerOwner
};
UClass* UUIDataStore_StringAliasMap::pClassPointer = NULL;

//0x00000C (0x00008C - 0x000080)
//UIDataStore_Strings[0x10325320]
class UUIDataStore_Strings : public UUIDataStore_StringBase
{
public:
	TArray<class UUIConfigFileProvider*>               LocFileProviders;                                 		// 0x000080 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataStore_Strings");
		return pClassPointer;
	};
};
UClass* UUIDataStore_Strings::pClassPointer = NULL;

//0x00003C (0x000218 - 0x0001DC)
//UICustomSkin[0x103251F0]
class UUICustomSkin : public UUISkin
{
public:
	unsigned char                                      WidgetStyleMap[0x3C];                             		// 0x0001DC (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UICustomSkin");
		return pClassPointer;
	};
};
UClass* UUICustomSkin::pClassPointer = NULL;

//0x000090 (0x0000F0 - 0x000060)
//UIDynamicFieldProvider[0x103250C0]
class UUIDynamicFieldProvider : public UUIDataProvider
{
public:
	TArray<struct FUIProviderScriptFieldValue>         PersistentDataFields;                             		// 0x000060 (0x000C)              
	TArray<struct FUIProviderScriptFieldValue>         RuntimeDataFields;                                		// 0x00006C (0x000C)              
	struct FMap_Mirror                                 PersistentCollectionData;                         		// 0x000078 (0x003C)              
	struct FMap_Mirror                                 RuntimeCollectionData;                            		// 0x0000B4 (0x003C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDynamicFieldProvider");
		return pClassPointer;
	};

public:
	bool ClearCollectionValueArray(struct FName FieldName,bool bPersistent,struct FName CellTag);//Engine.UIDynamicFieldProvider.ClearCollectionValueArray
	int FindFieldIndex(struct FName FieldName,bool bSearchPersistentFields);//Engine.UIDynamicFieldProvider.FindFieldIndex
	bool SetCollectionValueArray(struct FName FieldName,TArray<struct FString>* CollectionValues,bool bClearExisting,int InsertIndex,bool bPersistent,struct FName CellTag);//Engine.UIDynamicFieldProvider.SetCollectionValueArray
	bool ClearFields(bool bReinitializeRuntimeFields);//Engine.UIDynamicFieldProvider.ClearFields
	void InitializeRuntimeFields();//Engine.UIDynamicFieldProvider.InitializeRuntimeFields
	bool GetCollectionValueSchema(struct FName FieldName,TArray<struct FName>* out_CellTagArray,bool bPersistent);//Engine.UIDynamicFieldProvider.GetCollectionValueSchema
	bool RemoveField(struct FName FieldName);//Engine.UIDynamicFieldProvider.RemoveField
	bool RemoveCollectionValue(struct FName FieldName,struct FString* ValueToRemove,bool bPersistent,struct FName CellTag);//Engine.UIDynamicFieldProvider.RemoveCollectionValue
	bool ReplaceCollectionValueByIndex(struct FName FieldName,int ValueIndex,struct FString* NewValue,bool bPersistent,struct FName CellTag);//Engine.UIDynamicFieldProvider.ReplaceCollectionValueByIndex
	bool GetCollectionValueArray(struct FName FieldName,TArray<struct FString>* out_DataValueArray,bool bPersistent,struct FName CellTag);//Engine.UIDynamicFieldProvider.GetCollectionValueArray
	bool RemoveCollectionValueByIndex(struct FName FieldName,int ValueIndex,bool bPersistent,struct FName CellTag);//Engine.UIDynamicFieldProvider.RemoveCollectionValueByIndex
	bool GetCollectionValue(struct FName FieldName,int ValueIndex,struct FString* out_Value,bool bPersistent,struct FName CellTag);//Engine.UIDynamicFieldProvider.GetCollectionValue
	void SavePersistentProviderData();//Engine.UIDynamicFieldProvider.SavePersistentProviderData
	int FindCollectionValueIndex(struct FName FieldName,struct FString* ValueToFind,bool bPersistent,struct FName CellTag);//Engine.UIDynamicFieldProvider.FindCollectionValueIndex
	bool GetField(struct FName FieldName,struct FUIProviderScriptFieldValue* out_Field);//Engine.UIDynamicFieldProvider.GetField
	bool AddField(struct FName FieldName,unsigned char FieldType,bool bPersistent,int* out_InsertPosition);//Engine.UIDynamicFieldProvider.AddField
	bool ReplaceCollectionValue(struct FName FieldName,struct FString* CurrentValue,struct FString* NewValue,bool bPersistent,struct FName CellTag);//Engine.UIDynamicFieldProvider.ReplaceCollectionValue
	bool InsertCollectionValue(struct FName FieldName,struct FString* NewValue,int InsertIndex,bool bPersistent,bool bAllowDuplicateValues,struct FName CellTag);//Engine.UIDynamicFieldProvider.InsertCollectionValue
	bool SetField(struct FName FieldName,struct FUIProviderScriptFieldValue* FieldValue,bool bChangeExistingOnly);//Engine.UIDynamicFieldProvider.SetField
};
UClass* UUIDynamicFieldProvider::pClassPointer = NULL;

//0x00000C (0x00006C - 0x000060)
//UIPropertyDataProvider[0x10324F90]
class UUIPropertyDataProvider : public UUIDataProvider
{
public:
	struct FScriptDelegate                             __CanSupportComplexPropertyType__Delegate;        		// 0x000060 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIPropertyDataProvider");
		return pClassPointer;
	};

public:
	bool GetCustomPropertyValue(struct FUIProviderScriptFieldValue* PropertyValue,int ArrayIndex);//Engine.UIPropertyDataProvider.GetCustomPropertyValue
	bool CanSupportComplexPropertyType(class UField* UnsupportedProperty);//Engine.UIPropertyDataProvider.CanSupportComplexPropertyType
};
UClass* UUIPropertyDataProvider::pClassPointer = NULL;

//0x00000C (0x000078 - 0x00006C)
//UIDynamicDataProvider[0x10324E60]
class UUIDynamicDataProvider : public UUIPropertyDataProvider
{
public:
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x00006C (0x0004)              
	class UClass*                                      DataClass;                                        		// 0x000070 (0x0004)              
	class UObject*                                     DataSource;                                       		// 0x000074 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDynamicDataProvider");
		return pClassPointer;
	};

public:
	bool BindProviderInstance(class UObject* DataSourceInstance);//Engine.UIDynamicDataProvider.BindProviderInstance
	class UObject* GetDataSource();//Engine.UIDynamicDataProvider.GetDataSource
	void ProviderInstanceBound(class UObject* DataSourceInstance);//Engine.UIDynamicDataProvider.ProviderInstanceBound
	void ProviderInstanceUnbound(class UObject* DataSourceInstance);//Engine.UIDynamicDataProvider.ProviderInstanceUnbound
	bool UnbindProviderInstance();//Engine.UIDynamicDataProvider.UnbindProviderInstance
	bool CleanupDataProvider();//Engine.UIDynamicDataProvider.CleanupDataProvider
	bool IsValidDataSourceClass(class UClass* PotentialDataSourceClass);//Engine.UIDynamicDataProvider.IsValidDataSourceClass
};
UClass* UUIDynamicDataProvider::pClassPointer = NULL;

//0x000004 (0x00007C - 0x000078)
//GameInfoDataProvider[0x10324D30]
class UGameInfoDataProvider : public UUIDynamicDataProvider
{
public:
	class AGameReplicationInfo*                        GameDataSource;                                   		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.GameInfoDataProvider");
		return pClassPointer;
	};

public:
	void ProviderInstanceBound(class UObject* DataSourceInstance);//Engine.GameInfoDataProvider.ProviderInstanceBound
};
UClass* UGameInfoDataProvider::pClassPointer = NULL;

//0x000000 (0x000078 - 0x000078)
//InventoryDataProvider[0x10324C00]
class UInventoryDataProvider : public UUIDynamicDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InventoryDataProvider");
		return pClassPointer;
	};
};
UClass* UInventoryDataProvider::pClassPointer = NULL;

//0x000000 (0x000078 - 0x000078)
//PowerupDataProvider[0x10324AD0]
class UPowerupDataProvider : public UInventoryDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PowerupDataProvider");
		return pClassPointer;
	};

public:
	bool IsValidDataSourceClass(class UClass* PotentialDataSourceClass);//Engine.PowerupDataProvider.IsValidDataSourceClass
};
UClass* UPowerupDataProvider::pClassPointer = NULL;

//0x000000 (0x000078 - 0x000078)
//WeaponDataProvider[0x103249A0]
class UWeaponDataProvider : public UInventoryDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.WeaponDataProvider");
		return pClassPointer;
	};
};
UClass* UWeaponDataProvider::pClassPointer = NULL;

//0x000000 (0x000078 - 0x000078)
//CurrentWeaponDataProvider[0x10324870]
class UCurrentWeaponDataProvider : public UWeaponDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CurrentWeaponDataProvider");
		return pClassPointer;
	};
};
UClass* UCurrentWeaponDataProvider::pClassPointer = NULL;

//0x000000 (0x000078 - 0x000078)
//PickupDataProvider[0x10324740]
class UPickupDataProvider : public UUIDynamicDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PickupDataProvider");
		return pClassPointer;
	};
};
UClass* UPickupDataProvider::pClassPointer = NULL;

//0x000000 (0x000078 - 0x000078)
//PlayerDataProvider[0x10324610]
class UPlayerDataProvider : public UUIDynamicDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlayerDataProvider");
		return pClassPointer;
	};
};
UClass* UPlayerDataProvider::pClassPointer = NULL;

//0x000004 (0x00007C - 0x000078)
//PlayerOwnerDataProvider[0x103244E0]
class UPlayerOwnerDataProvider : public UPlayerDataProvider
{
public:
	class UPlayerDataProvider*                         PlayerData;                                       		// 0x000078 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlayerOwnerDataProvider");
		return pClassPointer;
	};

public:
	void SetPlayerDataProvider(class UPlayerDataProvider* NewPlayerData);//Engine.PlayerOwnerDataProvider.SetPlayerDataProvider
	bool CleanupDataProvider();//Engine.PlayerOwnerDataProvider.CleanupDataProvider
};
UClass* UPlayerOwnerDataProvider::pClassPointer = NULL;

//0x000018 (0x000090 - 0x000078)
//TeamDataProvider[0x103243B0]
class UTeamDataProvider : public UUIDynamicDataProvider
{
public:
	DWORD                                              VfTable_IUIListElementProvider;                   		// 0x000078 (0x0004)              
	struct FName                                       PlayerListFieldName;                              		// 0x00007C (0x0008)              
	TArray<class UPlayerDataProvider*>                 Players;                                          		// 0x000084 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TeamDataProvider");
		return pClassPointer;
	};

public:
	void RegeneratePlayerLists(TArray<class UPlayerDataProvider*> AllPlayers);//Engine.TeamDataProvider.RegeneratePlayerLists
};
UClass* UTeamDataProvider::pClassPointer = NULL;

//0x000014 (0x00008C - 0x000078)
//UIDataProvider_Settings[0x10324280]
class UUIDataProvider_Settings : public UUIDynamicDataProvider
{
public:
	class USettings*                                   Settings;                                         		// 0x000078 (0x0004)              
	TArray<struct FSettingsArrayProvider>              SettingsArrayProviders;                           		// 0x00007C (0x000C)              
	unsigned long                                      bIsAListRow : 1;                                  		// 0x000088 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIDataProvider_Settings");
		return pClassPointer;
	};
};
UClass* UUIDataProvider_Settings::pClassPointer = NULL;

//0x000008 (0x000074 - 0x00006C)
//UIResourceDataProvider[0x10324150]
class UUIResourceDataProvider : public UUIPropertyDataProvider
{
public:
	DWORD                                              VfTable_IUIListElementCellProvider;               		// 0x00006C (0x0004)              
	unsigned long                                      bDataBindingPropertiesOnly : 1;                   		// 0x000070 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIResourceDataProvider");
		return pClassPointer;
	};
};
UClass* UUIResourceDataProvider::pClassPointer = NULL;

//0x000008 (0x000074 - 0x00006C)
//UISettingsProvider[0x10324020]
class UUISettingsProvider : public UUIPropertyDataProvider
{
public:
	struct FName                                       ProviderTag;                                      		// 0x00006C (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UISettingsProvider");
		return pClassPointer;
	};

public:
	bool CleanupDataProvider();//Engine.UISettingsProvider.CleanupDataProvider
	void LoadPropertyValue(struct FName PropertyName,class UUIObject* Widget);//Engine.UISettingsProvider.LoadPropertyValue
	bool OnModifiedProperty(struct FName PropertyName,class UUIObject* Widget);//Engine.UISettingsProvider.OnModifiedProperty
	void SavePropertyValue(struct FName PropertyName,class UUIObject* Widget);//Engine.UISettingsProvider.SavePropertyValue
};
UClass* UUISettingsProvider::pClassPointer = NULL;

//0x000000 (0x000074 - 0x000074)
//PlayerSettingsProvider[0x10323EF0]
class UPlayerSettingsProvider : public UUISettingsProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlayerSettingsProvider");
		return pClassPointer;
	};

public:
	void OnRegister(class ULocalPlayer* InPlayer);//Engine.PlayerSettingsProvider.OnRegister
	void OnUnregister();//Engine.PlayerSettingsProvider.OnUnregister
};
UClass* UPlayerSettingsProvider::pClassPointer = NULL;

//0x00000C (0x000080 - 0x000074)
//SessionSettingsProvider[0x10323DC0]
class USessionSettingsProvider : public UUISettingsProvider
{
public:
	class UClass*                                      ProviderClientClass;                              		// 0x000074 (0x0004)              
	class UClass*                                      ProviderClientMetaClass;                          		// 0x000078 (0x0004)              
	class UClass*                                      ProviderClient;                                   		// 0x00007C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SessionSettingsProvider");
		return pClassPointer;
	};

public:
	bool BindProviderClient(class UClass* DataSourceClass);//Engine.SessionSettingsProvider.BindProviderClient
	void ProviderClientUnbound(class UClass* DataSourceClass);//Engine.SessionSettingsProvider.ProviderClientUnbound
	bool CleanupDataProvider();//Engine.SessionSettingsProvider.CleanupDataProvider
	bool IsValidDataSourceClass(class UClass* PotentialDataSourceClass);//Engine.SessionSettingsProvider.IsValidDataSourceClass
	void ProviderClientBound(class UClass* DataSourceClass);//Engine.SessionSettingsProvider.ProviderClientBound
	bool UnbindProviderClient();//Engine.SessionSettingsProvider.UnbindProviderClient
};
UClass* USessionSettingsProvider::pClassPointer = NULL;

//0x0000D8 (0x0001D0 - 0x0000F8)
//GameUISceneClient[0x10323C90]
class UGameUISceneClient : public UUISceneClient
{
public:
	TArray<class UUIScene*>                            ActiveScenes;                                     		// 0x0000F8 (0x000C)              
	class UUITexture*                                  CurrentMouseCursor;                               		// 0x000104 (0x0004)              
	unsigned long                                      m_bUseHardwareCursor : 1;                         		// 0x000108 (0x0004) [0x00000001] 
	unsigned long                                      bRenderCursor : 1;                                		// 0x000108 (0x0004) [0x00000002] 
	unsigned long                                      bIgnoreCharacterAll : 1;                          		// 0x000108 (0x0004) [0x00000004] 
	unsigned long                                      bUpdateInputProcessingStatus : 1;                 		// 0x000108 (0x0004) [0x00000008] 
	unsigned long                                      bUpdateCursorRenderStatus : 1;                    		// 0x000108 (0x0004) [0x00000010] 
	unsigned long                                      bEnableDebugInput : 1;                            		// 0x000108 (0x0004) [0x00000020] 
	unsigned long                                      bRenderDebugInfo : 1;                             		// 0x000108 (0x0004) [0x00000040] 
	unsigned long                                      bRenderDebugInfoAtTop : 1;                        		// 0x000108 (0x0004) [0x00000080] 
	unsigned long                                      bRenderActiveControlInfo : 1;                     		// 0x000108 (0x0004) [0x00000100] 
	unsigned long                                      bRenderFocusedControlInfo : 1;                    		// 0x000108 (0x0004) [0x00000200] 
	unsigned long                                      bRenderTargetControlInfo : 1;                     		// 0x000108 (0x0004) [0x00000400] 
	unsigned long                                      bSelectVisibleTargetsOnly : 1;                    		// 0x000108 (0x0004) [0x00000800] 
	unsigned long                                      bInteractiveMode : 1;                             		// 0x000108 (0x0004) [0x00001000] 
	unsigned long                                      bDisplayFullPaths : 1;                            		// 0x000108 (0x0004) [0x00002000] 
	unsigned long                                      bShowWidgetPath : 1;                              		// 0x000108 (0x0004) [0x00004000] 
	unsigned long                                      bShowRenderBounds : 1;                            		// 0x000108 (0x0004) [0x00008000] 
	unsigned long                                      bShowCurrentState : 1;                            		// 0x000108 (0x0004) [0x00010000] 
	unsigned long                                      bShowMousePos : 1;                                		// 0x000108 (0x0004) [0x00020000] 
	unsigned long                                      bRestrictActiveControlToFocusedScene : 1;         		// 0x000108 (0x0004) [0x00040000] 
	unsigned long                                      bKillRestoreMenuProgression : 1;                  		// 0x000108 (0x0004) [0x00080000] 
	unsigned long                                      bOverrideEmulateButtonPress : 1;                  		// 0x000108 (0x0004) [0x00100000] 
	int                                                m_nHardwareCurrentMouseCursor;                    		// 0x00010C (0x0004)              
	float                                              LatestDeltaTime;                                  		// 0x000110 (0x0004)              
	double                                             DoubleClickStartTime;                             		// 0x000114 (0x0008)              
	struct FIntPoint                                   DoubleClickStartPosition;                         		// 0x00011C (0x0008)              
	class UTexture*                                    DefaultUITexture[0x3];                            		// 0x000124 (0x000C)              
	struct FMap_Mirror                                 InitialPressedKeys;                               		// 0x000130 (0x003C)              
	int                                                IgnoreCharacterRepeat;                            		// 0x00016C (0x0004)              
	float                                              OverlaySceneAlphaModulation;                      		// 0x000170 (0x0004)              
	class UUIScreenObject*                             DebugTarget;                                      		// 0x000174 (0x0004)              
	TArray<class UUIAnimationSeq*>                     AnimSequencePool;                                 		// 0x000178 (0x000C)              
	TArray<class UUIObject*>                           AnimSubscribers;                                  		// 0x000184 (0x000C)              
	struct FUIDragState                                DragState;                                        		// 0x000190 (0x0030)              
	float                                              fUIScale;                                         		// 0x0001C0 (0x0004)              
	TArray<class UClass*>                              aPropagatedEventClasses;                          		// 0x0001C4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.GameUISceneClient");
		return pClassPointer;
	};

public:
	class UUIScene* GetTransientScene();//Engine.GameUISceneClient.GetTransientScene
	void SaveMenuProgression();//Engine.GameUISceneClient.SaveMenuProgression
	class UUIObject* CreateTransientWidget(class UClass* WidgetClass,struct FName WidgetTag,class UUIObject* Owner);//Engine.GameUISceneClient.CreateTransientWidget
	void ShowDataStores(bool bVerbose);//Engine.GameUISceneClient.ShowDataStores
	void NotifyPlayerAdded(int PlayerIndex,class ULocalPlayer* AddedPlayer);//Engine.GameUISceneClient.NotifyPlayerAdded
	void CloseMenu(struct FName SceneName);//Engine.GameUISceneClient.CloseMenu
	void ShowDataStoreField(struct FString DataStoreMarkup);//Engine.GameUISceneClient.ShowDataStoreField
	void ConditionalPause(bool bDesiredPauseState);//Engine.GameUISceneClient.ConditionalPause
	class UUIScene* GetActiveScene();//Engine.GameUISceneClient.GetActiveScene
	void RequestInputProcessingUpdate();//Engine.GameUISceneClient.RequestInputProcessingUpdate
	void CreateMenu(class UClass* SceneClass,int PlayerIndex);//Engine.GameUISceneClient.CreateMenu
	void NotifyPlayerRemoved(int PlayerIndex,class ULocalPlayer* RemovedPlayer);//Engine.GameUISceneClient.NotifyPlayerRemoved
	void NotifyClientTravel(class APlayerController* TravellingPlayer,struct FString TravelURL,unsigned char TravelType,bool bIsSeamlessTravel);//Engine.GameUISceneClient.NotifyClientTravel
	void NotifyGameSessionEnded();//Engine.GameUISceneClient.NotifyGameSessionEnded
	void NotifyLinkStatusChanged(bool bConnected);//Engine.GameUISceneClient.NotifyLinkStatusChanged
	void ShowRenderBounds();//Engine.GameUISceneClient.ShowRenderBounds
	void NotifyOnlineServiceStatusChanged(unsigned char NewConnectionStatus);//Engine.GameUISceneClient.NotifyOnlineServiceStatusChanged
	void SetUIScale(float fNewUIScale);//Engine.GameUISceneClient.SetUIScale
	float GetUIScale();//Engine.GameUISceneClient.GetUIScale
	void AnimUnSubscribe(class UUIObject* Target);//Engine.GameUISceneClient.AnimUnSubscribe
	class UUIScene* CreateScene(class UClass* SceneClass,struct FName SceneTag,class UUIScene* SceneTemplate);//Engine.GameUISceneClient.CreateScene
	void ClearMenuProgression();//Engine.GameUISceneClient.ClearMenuProgression
	void ShowDockingStacks();//Engine.GameUISceneClient.ShowDockingStacks
	void ShowMenuStates();//Engine.GameUISceneClient.ShowMenuStates
	void RestoreMenuProgression(class UUIScene* BaseScene);//Engine.GameUISceneClient.RestoreMenuProgression
	unsigned char GetCurrentNetMode();//Engine.GameUISceneClient.GetCurrentNetMode
	class UUIAnimationSeq* AnimLookupSequence(struct FName SequenceName);//Engine.GameUISceneClient.AnimLookupSequence
	void RequestCursorRenderUpdate();//Engine.GameUISceneClient.RequestCursorRenderUpdate
	void OpenMenu(struct FString MenuPath,int PlayerIndex);//Engine.GameUISceneClient.OpenMenu
	void ShowMenuProgression();//Engine.GameUISceneClient.ShowMenuProgression
	bool CanUnpauseInternalUI();//Engine.GameUISceneClient.CanUnpauseInternalUI
	void AnimSubscribe(class UUIObject* Target);//Engine.GameUISceneClient.AnimSubscribe
	void ToggleDebugInput(bool bEnable);//Engine.GameUISceneClient.ToggleDebugInput
	bool SetActiveControl(class UUIObject* NewActiveControl);//Engine.GameUISceneClient.SetActiveControl
	bool CanShowToolTips();//Engine.GameUISceneClient.CanShowToolTips
	void RefreshFormatting();//Engine.GameUISceneClient.RefreshFormatting
	class UUIScene* FindSceneByTag(struct FName SceneTag,class ULocalPlayer* SceneOwner);//Engine.GameUISceneClient.FindSceneByTag
};
UClass* UGameUISceneClient::pClassPointer = NULL;

//0x00001C (0x000488 - 0x00046C)
//ConsoleEntry[0x10323B60]
class UConsoleEntry : public UUIObject
{
public:
	class UUILabel*                                    ConsolePromptLabel;                               		// 0x00046C (0x0004)              
	class UUIImage*                                    ConsolePromptBackground;                          		// 0x000470 (0x0004)              
	class UUIEditBox*                                  InputBox;                                         		// 0x000474 (0x0004)              
	class UUIImage*                                    LowerConsoleBorder;                               		// 0x000478 (0x0004)              
	class UUIImage*                                    UpperConsoleBorder;                               		// 0x00047C (0x0004)              
	int                                                CursorPosition;                                   		// 0x000480 (0x0004)              
	unsigned long                                      bRenderCursor : 1;                                		// 0x000484 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ConsoleEntry");
		return pClassPointer;
	};

public:
	void PostInitialize();//Engine.ConsoleEntry.PostInitialize
	void RemovedChild(class UUIScreenObject* WidgetOwner,class UUIObject* OldChild,TArray<class UUIObject*> ExclusionSet);//Engine.ConsoleEntry.RemovedChild
	void SetValue(struct FString NewValue);//Engine.ConsoleEntry.SetValue
	void AddedChild(class UUIScreenObject* WidgetOwner,class UUIObject* NewChild);//Engine.ConsoleEntry.AddedChild
	void SetupDockingLinks();//Engine.ConsoleEntry.SetupDockingLinks
};
UClass* UConsoleEntry::pClassPointer = NULL;

//0x000018 (0x000484 - 0x00046C)
//UIButton[0x10323A30]
class UUIButton : public UUIObject
{
public:
	DWORD                                              VfTable_IUIDataStorePublisher;                    		// 0x00046C (0x0004)              
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x000470 (0x0004)              
	struct FEnumeratedName                             ClickedCue;                                       		// 0x000474 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIButton");
		return pClassPointer;
	};

public:
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UIButton.SaveSubscriberValue
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UIButton.RefreshSubscriberValue
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIButton.NotifyDataStoreValueUpdated
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UIButton.GetDataStoreBinding
	void ClearBoundDataStores();//Engine.UIButton.ClearBoundDataStores
	void SetImage(class USurface* NewImage);//Engine.UIButton.SetImage
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UIButton.GetBoundDataStores
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIButton.OnSequenceAction
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UIButton.SetDataStoreBinding
	void OnSetImage(class UcUIAction_SetImage* Action);//Engine.UIButton.OnSetImage
};
UClass* UUIButton::pClassPointer = NULL;

//0x000058 (0x0004DC - 0x000484)
//UICheckbox[0x10323900]
class UUICheckbox : public UUIButton
{
public:
	struct FEnumeratedName                             CheckedCue;                                       		// 0x000484 (0x0010)              
	struct FEnumeratedName                             UncheckedCue;                                     		// 0x000494 (0x0010)              
	struct FUIDataStoreBinding                         ValueDataSource;                                  		// 0x0004A4 (0x0030)              
	class UUIComp_DrawImage*                           CheckedImageComponent;                            		// 0x0004D4 (0x0004)              
	unsigned long                                      bIsChecked : 1;                                   		// 0x0004D8 (0x0004) [0x00000001] 
	unsigned long                                      bRadioButtonBehaviour : 1;                        		// 0x0004D8 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UICheckbox");
		return pClassPointer;
	};

public:
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UICheckbox.GetBoundDataStores
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UICheckbox.NotifyDataStoreValueUpdated
	void SetValue(bool bShouldBeChecked,int PlayerIndex);//Engine.UICheckbox.SetValue
	void OnSetBoolValue(class UUIAction_SetBoolValue* Action);//Engine.UICheckbox.OnSetBoolValue
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UICheckbox.GetDataStoreBinding
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UICheckbox.RefreshSubscriberValue
	void SetCheckImage(class USurface* NewImage);//Engine.UICheckbox.SetCheckImage
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UICheckbox.SaveSubscriberValue
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UICheckbox.SetDataStoreBinding
	void ClearBoundDataStores();//Engine.UICheckbox.ClearBoundDataStores
	bool IsChecked();//Engine.UICheckbox.IsChecked
};
UClass* UUICheckbox::pClassPointer = NULL;

//0x000038 (0x0004BC - 0x000484)
//UILabelButton[0x103237D0]
class UUILabelButton : public UUIButton
{
public:
	DWORD                                              VfTable_IUIStringRenderer;                        		// 0x000484 (0x0004)              
	struct FUIDataStoreBinding                         CaptionDataSource;                                		// 0x000488 (0x0030)              
	class UUIComp_DrawString*                          StringRenderComponent;                            		// 0x0004B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UILabelButton");
		return pClassPointer;
	};

public:
	void OnGetTextValue(class UUIAction_GetTextValue* Action);//Engine.UILabelButton.OnGetTextValue
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UILabelButton.GetBoundDataStores
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UILabelButton.GetDataStoreBinding
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UILabelButton.NotifyDataStoreValueUpdated
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UILabelButton.SetDataStoreBinding
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UILabelButton.SaveSubscriberValue
	void ClearBoundDataStores();//Engine.UILabelButton.ClearBoundDataStores
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UILabelButton.OnSequenceAction
	void SetTextAlignment(unsigned char Horizontal,unsigned char Vertical);//Engine.UILabelButton.SetTextAlignment
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UILabelButton.RefreshSubscriberValue
	void SetCaption(struct FString NewText);//Engine.UILabelButton.SetCaption
	void OnSetLabelText(class UUIAction_SetLabelText* Action);//Engine.UILabelButton.OnSetLabelText
	struct FString GetCaption();//Engine.UILabelButton.GetCaption
};
UClass* UUILabelButton::pClassPointer = NULL;

//0x00001D (0x0004D9 - 0x0004BC)
//UICalloutButton[0x103236A0]
class UUICalloutButton : public UUILabelButton
{
public:
	struct FString                                     DefaultMarkupStringTemplate;                      		// 0x0004BC (0x000C)              
	struct FName                                       CalloutDataStoreTag;                              		// 0x0004C8 (0x0008)              
	struct FName                                       InputAliasTag;                                    		// 0x0004D0 (0x0008)              
	unsigned char                                      IconAlignment;                                    		// 0x0004D8 (0x0001)              PROPERTY: EUIAlignment

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UICalloutButton");
		return pClassPointer;
	};

public:
	bool SetInputAlias(struct FName NewInputAlias);//Engine.UICalloutButton.SetInputAlias
	class UUIDataStore_InputAlias* GetCalloutDataStore(class ULocalPlayer* AlternatePlayer);//Engine.UICalloutButton.GetCalloutDataStore
	bool UnsubscribeFromInputProxy(class UUIEvent_CalloutButtonInputProxy* InputProxy);//Engine.UICalloutButton.UnsubscribeFromInputProxy
	void RemovedFromParent(class UUIScreenObject* WidgetOwner);//Engine.UICalloutButton.RemovedFromParent
	void PostInitialize();//Engine.UICalloutButton.PostInitialize
	struct FName GetCalloutDataStoreName();//Engine.UICalloutButton.GetCalloutDataStoreName
	void SetInputTag(struct FName NewInputAlias);//Engine.UICalloutButton.SetInputTag
	bool VerifyDefaultMarkupString();//Engine.UICalloutButton.VerifyDefaultMarkupString
	class UUIEvent_CalloutButtonInputProxy* GetCalloutInputProxy(bool bCreateIfNecessary);//Engine.UICalloutButton.GetCalloutInputProxy
	struct FString GetCalloutMarkupString(struct FName AlternateInputAlias);//Engine.UICalloutButton.GetCalloutMarkupString
	struct FString GenerateCompleteCaptionMarkup(struct FName InputAlias);//Engine.UICalloutButton.GenerateCompleteCaptionMarkup
	bool OnReceivedInputKey(struct FInputEventParameters* EventParms);//Engine.UICalloutButton.OnReceivedInputKey
	bool SubscribeToInputProxy(class UUIEvent_CalloutButtonInputProxy* InputProxy);//Engine.UICalloutButton.SubscribeToInputProxy
	class UUICalloutButtonPanel* GetPanelOwner();//Engine.UICalloutButton.GetPanelOwner
};
UClass* UUICalloutButton::pClassPointer = NULL;

//0x000048 (0x000504 - 0x0004BC)
//UITabButton[0x10323570]
class UUITabButton : public UUILabelButton
{
public:
	struct FUIDataStoreBinding                         OverlayImageDataSource;                           		// 0x0004BC (0x0030)              
	class UUIComp_DrawImage*                           OverlayImageComponent;                            		// 0x0004EC (0x0004)              
	class UUITabPage*                                  TabPage;                                          		// 0x0004F0 (0x0004)              
	unsigned long                                      bOverrideParentStyle : 1;                         		// 0x0004F4 (0x0004) [0x00000001] 
	struct FScriptDelegate                             __IsActivationAllowed__Delegate;                  		// 0x0004F8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UITabButton");
		return pClassPointer;
	};

public:
	void OnStateChanged(class UUIScreenObject* Sender,int PlayerIndex,class UUIState* NewlyActiveState,class UUIState* PreviouslyActiveState);//Engine.UITabButton.OnStateChanged
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UITabButton.RefreshSubscriberValue
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UITabButton.NotifyDataStoreValueUpdated
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UITabButton.SaveSubscriberValue
	void RemovedFromParent(class UUIScreenObject* WidgetOwner);//Engine.UITabButton.RemovedFromParent
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UITabButton.GetBoundDataStores
	void RemovedChild(class UUIScreenObject* WidgetOwner,class UUIObject* OldChild,TArray<class UUIObject*> ExclusionSet);//Engine.UITabButton.RemovedChild
	bool IsTargeted(int PlayerIndex,int* StateIndex);//Engine.UITabButton.IsTargeted
	bool CanActivateButton(int PlayerIndex);//Engine.UITabButton.CanActivateButton
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UITabButton.GetDataStoreBinding
	void ClearBoundDataStores();//Engine.UITabButton.ClearBoundDataStores
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UITabButton.SetDataStoreBinding
	void AddedChild(class UUIScreenObject* WidgetOwner,class UUIObject* NewChild);//Engine.UITabButton.AddedChild
	class UUITabPage* GetTabPage();//Engine.UITabButton.GetTabPage
	bool IsActivationAllowed(class UUITabButton* Sender,int PlayerIndex);//Engine.UITabButton.IsActivationAllowed
};
UClass* UUITabButton::pClassPointer = NULL;

//0x00003C (0x0004F8 - 0x0004BC)
//UIToggleButton[0x10323440]
class UUIToggleButton : public UUILabelButton
{
public:
	struct FUIDataStoreBinding                         ValueDataSource;                                  		// 0x0004BC (0x0030)              
	unsigned long                                      bIsChecked : 1;                                   		// 0x0004EC (0x0004) [0x00000001] 
	class UUIComp_DrawString*                          CheckedStringRenderComponent;                     		// 0x0004F0 (0x0004)              
	class UUIComp_DrawImage*                           CheckedBackgroundImageComponent;                  		// 0x0004F4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIToggleButton");
		return pClassPointer;
	};

public:
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIToggleButton.NotifyDataStoreValueUpdated
	void SetValue(bool bShouldBeChecked,int PlayerIndex);//Engine.UIToggleButton.SetValue
	void OnSetBoolValue(class UUIAction_SetBoolValue* Action);//Engine.UIToggleButton.OnSetBoolValue
	bool IsChecked();//Engine.UIToggleButton.IsChecked
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIToggleButton.OnSequenceAction
	void SetCaption(struct FString NewText);//Engine.UIToggleButton.SetCaption
	bool ButtonClicked(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIToggleButton.ButtonClicked
};
UClass* UUIToggleButton::pClassPointer = NULL;

//0x000000 (0x000484 - 0x000484)
//UINumericEditBoxButton[0x10323310]
class UUINumericEditBoxButton : public UUIButton
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UINumericEditBoxButton");
		return pClassPointer;
	};
};
UClass* UUINumericEditBoxButton::pClassPointer = NULL;

//0x0000CC (0x000538 - 0x00046C)
//UIOptionListBase[0x103230B0]
class UUIOptionListBase : public UUIObject
{
public:
	DWORD                                              VfTable_IUIDataStorePublisher;                    		// 0x00046C (0x0004)              
	struct FUIStyleReference                           DecrementStyle;                                   		// 0x000470 (0x0020)              
	struct FUIStyleReference                           IncrementStyle;                                   		// 0x000490 (0x0020)              
	class UUIOptionListButton*                         DecrementButton;                                  		// 0x0004B0 (0x0004)              
	class UUIOptionListButton*                         IncrementButton;                                  		// 0x0004B4 (0x0004)              
	class UClass*                                      OptionListButtonClass;                            		// 0x0004B8 (0x0004)              
	struct FUIScreenValue_Extent                       ButtonSpacing;                                    		// 0x0004BC (0x0008)              
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x0004C4 (0x0004)              
	class UUIComp_DrawString*                          StringRenderComponent;                            		// 0x0004C8 (0x0004)              
	struct FEnumeratedName                             IncrementCue;                                     		// 0x0004CC (0x0010)              
	struct FEnumeratedName                             DecrementCue;                                     		// 0x0004DC (0x0010)              
	unsigned long                                      bWrapOptions : 1;                                 		// 0x0004EC (0x0004) [0x00000001] 
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x0004F0 (0x0030)              
	struct FScriptDelegate                             __CreateCustomDecrementButton__Delegate;          		// 0x000520 (0x000C)              
	struct FScriptDelegate                             __CreateCustomIncrementButton__Delegate;          		// 0x00052C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIOptionListBase");
		return pClassPointer;
	};

public:
	void OnMoveSelectionRight(int PlayerIndex);//Engine.UIOptionListBase.OnMoveSelectionRight
	void ClearBoundDataStores();//Engine.UIOptionListBase.ClearBoundDataStores
	void OnMoveSelectionLeft(int PlayerIndex);//Engine.UIOptionListBase.OnMoveSelectionLeft
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UIOptionListBase.SetDataStoreBinding
	void Initialized();//Engine.UIOptionListBase.Initialized
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UIOptionListBase.GetBoundDataStores
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UIOptionListBase.SaveSubscriberValue
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIOptionListBase.NotifyDataStoreValueUpdated
	bool HasPrevValue();//Engine.UIOptionListBase.HasPrevValue
	class UUIOptionListButton* CreateCustomIncrementButton(class UUIOptionListBase* ButtonOwner);//Engine.UIOptionListBase.CreateCustomIncrementButton
	class UUIOptionListButton* CreateCustomDecrementButton(class UUIOptionListBase* ButtonOwner);//Engine.UIOptionListBase.CreateCustomDecrementButton
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UIOptionListBase.GetDataStoreBinding
	void Created(class UUIObject* CreatedWidget,class UUIScreenObject* CreatorContainer);//Engine.UIOptionListBase.Created
	bool OnButtonClicked(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIOptionListBase.OnButtonClicked
	void InitializeInternalControls();//Engine.UIOptionListBase.InitializeInternalControls
	bool HasNextValue();//Engine.UIOptionListBase.HasNextValue
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UIOptionListBase.RefreshSubscriberValue
};
UClass* UUIOptionListBase::pClassPointer = NULL;

//0x000000 (0x000484 - 0x000484)
//UIOptionListButton[0x103231E0]
class UUIOptionListButton : public UUIButton
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIOptionListButton");
		return pClassPointer;
	};

public:
	void UpdateButtonState(int PlayerIndex);//Engine.UIOptionListButton.UpdateButtonState
};
UClass* UUIOptionListButton::pClassPointer = NULL;

//0x0000D0 (0x00053C - 0x00046C)
//UIScrollbar[0x10322E50]
class UUIScrollbar : public UUIObject
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x00046C (0x0004)              
	class UUIScrollbarButton*                          IncrementButton;                                  		// 0x000470 (0x0004)              
	class UUIScrollbarButton*                          DecrementButton;                                  		// 0x000474 (0x0004)              
	class UUIScrollbarMarkerButton*                    MarkerButton;                                     		// 0x000478 (0x0004)              
	struct FUIStyleReference                           IncrementStyle;                                   		// 0x00047C (0x0020)              
	struct FUIStyleReference                           DecrementStyle;                                   		// 0x00049C (0x0020)              
	struct FUIStyleReference                           MarkerStyle;                                      		// 0x0004BC (0x0020)              
	float                                              NudgeValue;                                       		// 0x0004DC (0x0004)              
	float                                              NudgeMultiplier;                                  		// 0x0004E0 (0x0004)              
	float                                              NudgePercent;                                     		// 0x0004E4 (0x0004)              
	float                                              MarkerPosPercent;                                 		// 0x0004E8 (0x0004)              
	float                                              MarkerSizePercent;                                		// 0x0004EC (0x0004)              
	struct FUIScreenValue_Extent                       BarWidth;                                         		// 0x0004F0 (0x0008)              
	struct FUIScreenValue_Extent                       MinimumMarkerSize;                                		// 0x0004F8 (0x0008)              
	unsigned char                                      ScrollbarOrientation;                             		// 0x000500 (0x0001)              PROPERTY: EUIOrientation
	unsigned char                                      _0x000501[0x3];                                   		// 0x000501 (0x0003) MISSED OFFSET
	unsigned long                                      bAddCornerPadding : 1;                            		// 0x000504 (0x0004) [0x00000001] 
	unsigned long                                      bInitializeMarker : 1;                            		// 0x000504 (0x0004) [0x00000002] 
	struct FUIScreenValue_Position                     MousePosition;                                    		// 0x000508 (0x000C)              
	struct FUIScreenValue_Position                     MouseMarkerOffset;                                		// 0x000514 (0x000C)              
	float                                              MousePositionDelta;                               		// 0x000520 (0x0004)              
	struct FScriptDelegate                             __OnScrollActivity__Delegate;                     		// 0x000524 (0x000C)              
	struct FScriptDelegate                             __OnClickedScrollZone__Delegate;                  		// 0x000530 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIScrollbar");
		return pClassPointer;
	};

public:
	float GetScrollZoneExtent(float* ScrollZoneStart);//Engine.UIScrollbar.GetScrollZoneExtent
	void Initialized();//Engine.UIScrollbar.Initialized
	float GetNudgeValue();//Engine.UIScrollbar.GetNudgeValue
	void SetNudgeSizePixels(float NudgePixels);//Engine.UIScrollbar.SetNudgeSizePixels
	void DragScrollBegin(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIScrollbar.DragScrollBegin
	void ScrollIncrement(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIScrollbar.ScrollIncrement
	float GetMarkerButtonPosition();//Engine.UIScrollbar.GetMarkerButtonPosition
	void SetMarkerSize(float SizePercentage);//Engine.UIScrollbar.SetMarkerSize
	void DragScroll(class UUIScrollbarMarkerButton* Sender,int PlayerIndex);//Engine.UIScrollbar.DragScroll
	void DragScrollEnd(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIScrollbar.DragScrollEnd
	float GetNudgePercent();//Engine.UIScrollbar.GetNudgePercent
	bool OnScrollActivity(class UUIScrollbar* Sender,float PositionChange,bool bPositionMaxed);//Engine.UIScrollbar.OnScrollActivity
	void PostInitialize();//Engine.UIScrollbar.PostInitialize
	float GetScrollZoneWidth();//Engine.UIScrollbar.GetScrollZoneWidth
	float GetMarkerPosPercent();//Engine.UIScrollbar.GetMarkerPosPercent
	void SetMarkerPosition(float PositionPercentage);//Engine.UIScrollbar.SetMarkerPosition
	void OnClickedScrollZone(class UUIScrollbar* Sender,float PositionPerc,int PlayerIndex);//Engine.UIScrollbar.OnClickedScrollZone
	float GetMarkerSizePercent();//Engine.UIScrollbar.GetMarkerSizePercent
	void SetNudgeSizePercent(float NudgePercentage);//Engine.UIScrollbar.SetNudgeSizePercent
	void ScrollDecrement(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UIScrollbar.ScrollDecrement
	void EnableCornerPadding(bool FlagValue);//Engine.UIScrollbar.EnableCornerPadding
};
UClass* UUIScrollbar::pClassPointer = NULL;

//0x000000 (0x000484 - 0x000484)
//UIScrollbarButton[0x10322F80]
class UUIScrollbarButton : public UUIButton
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIScrollbarButton");
		return pClassPointer;
	};
};
UClass* UUIScrollbarButton::pClassPointer = NULL;

//0x000010 (0x000494 - 0x000484)
//UIScrollbarMarkerButton[0x10322D20]
class UUIScrollbarMarkerButton : public UUIScrollbarButton
{
public:
	unsigned char                                      ScrollbarOrientation;                             		// 0x000484 (0x0001)              PROPERTY: EUIOrientation
	unsigned char                                      _0x000485[0x3];                                   		// 0x000485 (0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnButtonDragged__Delegate;                      		// 0x000488 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIScrollbarMarkerButton");
		return pClassPointer;
	};

public:
	void OnButtonDragged(class UUIScrollbarMarkerButton* Sender,int PlayerIndex);//Engine.UIScrollbarMarkerButton.OnButtonDragged
};
UClass* UUIScrollbarMarkerButton::pClassPointer = NULL;

//0x00009C (0x000508 - 0x00046C)
//UIComboBox[0x10322BF0]
class UUIComboBox : public UUIObject
{
public:
	DWORD                                              VfTable_IUIDataStorePublisher;                    		// 0x00046C (0x0004)              
	class UClass*                                      ComboEditboxClass;                                		// 0x000470 (0x0004)              
	class UClass*                                      ComboButtonClass;                                 		// 0x000474 (0x0004)              
	class UClass*                                      ComboListClass;                                   		// 0x000478 (0x0004)              
	class UUIEditBox*                                  ComboEditbox;                                     		// 0x00047C (0x0004)              
	class UUIToggleButton*                             ComboButton;                                      		// 0x000480 (0x0004)              
	class UUIList*                                     ComboList;                                        		// 0x000484 (0x0004)              
	class UUIComp_DrawCaption*                         CaptionRenderComponent;                           		// 0x000488 (0x0004)              
	class UUIComp_DrawImage*                           BackgroundRenderComponent;                        		// 0x00048C (0x0004)              
	struct FUIDataStoreBinding                         CaptionDataSource;                                		// 0x000490 (0x0030)              
	struct FEnumeratedName                             OpenList;                                         		// 0x0004C0 (0x0010)              
	struct FEnumeratedName                             DecrementCue;                                     		// 0x0004D0 (0x0010)              
	unsigned long                                      bDockListToButton : 1;                            		// 0x0004E0 (0x0004) [0x00000001] 
	struct FScriptDelegate                             __CreateCustomComboEditbox__Delegate;             		// 0x0004E4 (0x000C)              
	struct FScriptDelegate                             __CreateCustomComboButton__Delegate;              		// 0x0004F0 (0x000C)              
	struct FScriptDelegate                             __CreateCustomComboList__Delegate;                		// 0x0004FC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIComboBox");
		return pClassPointer;
	};

public:
	void PostInitialize();//Engine.UIComboBox.PostInitialize
	void ShowList(int PlayerIndex);//Engine.UIComboBox.ShowList
	void SelectedItemChanged(class UUIObject* Sender,int PlayerIndex);//Engine.UIComboBox.SelectedItemChanged
	void ButtonPressed(class UUIScreenObject* EventObject,int PlayerIndex);//Engine.UIComboBox.ButtonPressed
	void ListItemSelected(class UUIList* Sender,int PlayerIndex);//Engine.UIComboBox.ListItemSelected
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIComboBox.OnSequenceAction
	void ClearBoundDataStores();//Engine.UIComboBox.ClearBoundDataStores
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UIComboBox.SetDataStoreBinding
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UIComboBox.RefreshSubscriberValue
	void HideList(int PlayerIndex);//Engine.UIComboBox.HideList
	class UUIList* CreateCustomComboList(class UUIComboBox* ListOwner);//Engine.UIComboBox.CreateCustomComboList
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIComboBox.NotifyDataStoreValueUpdated
	void EditboxTextChanged(class UUIObject* Sender,int PlayerIndex);//Engine.UIComboBox.EditboxTextChanged
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UIComboBox.GetDataStoreBinding
	void EditboxPressed(class UUIScreenObject* EventObject,int PlayerIndex);//Engine.UIComboBox.EditboxPressed
	void SetListDocking(bool bDockToButton);//Engine.UIComboBox.SetListDocking
	void OnGetTextValue(class UUIAction_GetTextValue* Action);//Engine.UIComboBox.OnGetTextValue
	class UUIToggleButton* CreateCustomComboButton(class UUIComboBox* ButtonOwner);//Engine.UIComboBox.CreateCustomComboButton
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UIComboBox.SaveSubscriberValue
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UIComboBox.GetBoundDataStores
	void SetVisibility(bool bIsVisible);//Engine.UIComboBox.SetVisibility
	class UUIEditBox* CreateCustomComboEditbox(class UUIComboBox* EditboxOwner);//Engine.UIComboBox.CreateCustomComboEditbox
	bool IsListDockedToButton();//Engine.UIComboBox.IsListDockedToButton
	void SetEditboxText(struct FString NewText,int PlayerIndex,bool bListItemsOnly,bool bSkipNotification);//Engine.UIComboBox.SetEditboxText
	bool ShowListClickHandler(class UUIScreenObject* EventObject,int PlayerIndex);//Engine.UIComboBox.ShowListClickHandler
};
UClass* UUIComboBox::pClassPointer = NULL;

//0x000004 (0x000470 - 0x00046C)
//UIContainer[0x10322AC0]
class UUIContainer : public UUIObject
{
public:
	class UUIComp_AutoAlignment*                       AutoAlignment;                                    		// 0x00046C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIContainer");
		return pClassPointer;
	};
};
UClass* UUIContainer::pClassPointer = NULL;

//0x000070 (0x0004E0 - 0x000470)
//UICalloutButtonPanel[0x10322990]
class UUICalloutButtonPanel : public UUIContainer
{
public:
	class UUICalloutButton*                            ButtonTemplate;                                   		// 0x000470 (0x0004)              
	TArray<class UUICalloutButton*>                    CalloutButtons;                                   		// 0x000474 (0x000C)              
	unsigned char                                      ButtonBarOrientation;                             		// 0x000480 (0x0001)              PROPERTY: EUIOrientation
	unsigned char                                      ButtonLayout;                                     		// 0x000481 (0x0001)              PROPERTY: ECalloutButtonLayoutType
	unsigned char                                      _0x000482[0x2];                                   		// 0x000482 (0x0002) MISSED OFFSET
	struct FUIScreenValue_Extent                       ButtonPadding[0x2];                               		// 0x000484 (0x0010)              
	unsigned char                                      ButtonInputKeyMappings[0x3C];                     		// 0x000494 (0x003C)              UNKNOWN PROPERTY: MapProperty
	TArray<struct FName>                               CalloutButtonAliases;                             		// 0x0004D0 (0x000C)              
	unsigned long                                      bGeneratingInitialButtons : 1;                    		// 0x0004DC (0x0004) [0x00000001] 
	unsigned long                                      bRefreshButtonDocking : 1;                        		// 0x0004DC (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UICalloutButtonPanel");
		return pClassPointer;
	};

public:
	class UUIEvent_CalloutButtonInputProxy* GetCalloutInputProxy(bool bCreateIfNecessary);//Engine.UICalloutButtonPanel.GetCalloutInputProxy
	void SynchronizeInputAliases();//Engine.UICalloutButtonPanel.SynchronizeInputAliases
	bool SetButtonCaption(struct FName ButtonInputAlias,struct FString NewButtonCaption);//Engine.UICalloutButtonPanel.SetButtonCaption
	int FindBestInsertionIndex(class UUICalloutButton* ButtonToInsert,bool bSearchChildrenArray);//Engine.UICalloutButtonPanel.FindBestInsertionIndex
	void RequestButtonDockingUpdate(bool bImmediately);//Engine.UICalloutButtonPanel.RequestButtonDockingUpdate
	bool EnableButton(struct FName ButtonInputAlias,int PlayerIndex,bool bEnableButton,bool bUpdateButtonVisibility);//Engine.UICalloutButtonPanel.EnableButton
	class UUICalloutButton* CreateCalloutButton(struct FName ButtonInputAlias,struct FName ButtonName,bool bInsertChild);//Engine.UICalloutButtonPanel.CreateCalloutButton
	bool SetButtonInputAlias(struct FName ButtonInputAlias,struct FName NewButtonInputAlias);//Engine.UICalloutButtonPanel.SetButtonInputAlias
	void InitializeInputProxy();//Engine.UICalloutButtonPanel.InitializeInputProxy
	void RemovedFromParent(class UUIScreenObject* WidgetOwner);//Engine.UICalloutButtonPanel.RemovedFromParent
	int InsertButton(class UUICalloutButton* NewButton);//Engine.UICalloutButtonPanel.InsertButton
	class UUICalloutButton* FindButton(struct FName ButtonInputAlias);//Engine.UICalloutButtonPanel.FindButton
	void PostInitialize();//Engine.UICalloutButtonPanel.PostInitialize
	void AddedChild(class UUIScreenObject* WidgetOwner,class UUIObject* NewChild);//Engine.UICalloutButtonPanel.AddedChild
	int FindButtonIndex(struct FName ButtonInputAlias);//Engine.UICalloutButtonPanel.FindButtonIndex
	void PopulateCalloutButtonArray();//Engine.UICalloutButtonPanel.PopulateCalloutButtonArray
	void ConfigureChildButton(class UUICalloutButton* ChildButton);//Engine.UICalloutButtonPanel.ConfigureChildButton
	bool ContainsButton(struct FName ButtonInputAlias);//Engine.UICalloutButtonPanel.ContainsButton
	bool RemoveButtonByAlias(struct FName ButtonInputAlias);//Engine.UICalloutButtonPanel.RemoveButtonByAlias
	bool SetButtonCallback(struct FName ButtonInputAlias,struct FScriptDelegate NewClickHandler);//Engine.UICalloutButtonPanel.SetButtonCallback
	bool CanButtonAcceptFocus(struct FName InputAliasTag,int PlayerIndex);//Engine.UICalloutButtonPanel.CanButtonAcceptFocus
	void GetAvailableCalloutButtonAliases(TArray<struct FName>* AvailableAliases,class ULocalPlayer* PlayerOwner);//Engine.UICalloutButtonPanel.GetAvailableCalloutButtonAliases
	bool ShowButton(struct FName ButtonInputAlias,bool bShowButton);//Engine.UICalloutButtonPanel.ShowButton
	void RemovedChild(class UUIScreenObject* WidgetOwner,class UUIObject* OldChild,TArray<class UUIObject*> ExclusionSet);//Engine.UICalloutButtonPanel.RemovedChild
	bool RemoveButton(class UUICalloutButton* ButtonToRemove);//Engine.UICalloutButtonPanel.RemoveButton
};
UClass* UUICalloutButtonPanel::pClassPointer = NULL;

//0x000054 (0x0004C4 - 0x000470)
//UIFrameBox[0x10322860]
class UUIFrameBox : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent[0x9];                    		// 0x000470 (0x0024)              
	struct FCornerSizes                                BackgroundCornerSizes;                            		// 0x000494 (0x0030)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIFrameBox");
		return pClassPointer;
	};

public:
	void SetBackgroundImage(unsigned char ImageToSet,class USurface* NewImage);//Engine.UIFrameBox.SetBackgroundImage
};
UClass* UUIFrameBox::pClassPointer = NULL;

//0x000008 (0x000478 - 0x000470)
//UIPanel[0x10322730]
class UUIPanel : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x000470 (0x0004)              
	unsigned long                                      bEnforceClipping : 1;                             		// 0x000474 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIPanel");
		return pClassPointer;
	};

public:
	void OnSetImage(class UcUIAction_SetImage* Action);//Engine.UIPanel.OnSetImage
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIPanel.OnSequenceAction
	void SetBackgroundImage(class USurface* NewImage);//Engine.UIPanel.SetBackgroundImage
};
UClass* UUIPanel::pClassPointer = NULL;

//0x000014 (0x000484 - 0x000470)
//UISafeRegionPanel[0x10322600]
class UUISafeRegionPanel : public UUIContainer
{
public:
	unsigned char                                      RegionType;                                       		// 0x000470 (0x0001)              PROPERTY: ESafeRegionType
	unsigned char                                      _0x000471[0x3];                                   		// 0x000471 (0x0003) MISSED OFFSET
	TArray<float>                                      RegionPercentages;                                		// 0x000474 (0x000C)              
	unsigned long                                      bForce4x3AspectRatio : 1;                         		// 0x000480 (0x0004) [0x00000001] 
	unsigned long                                      bUseFullRegionIn4x3 : 1;                          		// 0x000480 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UISafeRegionPanel");
		return pClassPointer;
	};
};
UClass* UUISafeRegionPanel::pClassPointer = NULL;

//0x000038 (0x0004A8 - 0x000470)
//UIScrollFrame[0x103224D0]
class UUIScrollFrame : public UUIContainer
{
public:
	class UUIComp_DrawImage*                           StaticBackgroundImage;                            		// 0x000470 (0x0004)              
	class UUIScrollbar*                                ScrollbarHorizontal;                              		// 0x000474 (0x0004)              
	class UUIScrollbar*                                ScrollbarVertical;                                		// 0x000478 (0x0004)              
	unsigned long                                      IgnoreInvisibleChildren : 1;                      		// 0x00047C (0x0004) [0x00000001] 
	unsigned long                                      AlwaysShowHorizontalScrollbar : 1;                		// 0x00047C (0x0004) [0x00000002] 
	unsigned long                                      AlwaysShowVerticalScrollbar : 1;                  		// 0x00047C (0x0004) [0x00000004] 
	unsigned long                                      bRefreshScrollbars : 1;                           		// 0x00047C (0x0004) [0x00000008] 
	unsigned long                                      bRecalculateClientRegion : 1;                     		// 0x00047C (0x0004) [0x00000010] 
	struct FUIScreenValue_Extent                       HorizontalClientRegion;                           		// 0x000480 (0x0008)              
	struct FUIScreenValue_Extent                       VerticalClientRegion;                             		// 0x000488 (0x0008)              
	FVector2                                           ClientRegionPosition;                             		// 0x000490 (0x0008)              
	float                                              FrameBounds[0x4];                                 		// 0x000498 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIScrollFrame");
		return pClassPointer;
	};

public:
	FVector2 GetClientRegionSizeVector();//Engine.UIScrollFrame.GetClientRegionSizeVector
	bool SetClientRegionPositionVector(FVector2 NewPosition);//Engine.UIScrollFrame.SetClientRegionPositionVector
	void RemovedChild(class UUIScreenObject* WidgetOwner,class UUIObject* OldChild,TArray<class UUIObject*> ExclusionSet);//Engine.UIScrollFrame.RemovedChild
	float GetVisibleRegionPercentage(unsigned char Orientation);//Engine.UIScrollFrame.GetVisibleRegionPercentage
	bool SetClientRegionPosition(unsigned char Orientation,float NewPosition);//Engine.UIScrollFrame.SetClientRegionPosition
	void RefreshScrollbars(bool bImmediately);//Engine.UIScrollFrame.RefreshScrollbars
	void GetClipRegion(float* MinX,float* MinY,float* MaxX,float* MaxY);//Engine.UIScrollFrame.GetClipRegion
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIScrollFrame.OnSequenceAction
	void AddedChild(class UUIScreenObject* WidgetOwner,class UUIObject* NewChild);//Engine.UIScrollFrame.AddedChild
	void ScrollZoneClicked(class UUIScrollbar* Sender,float PositionPerc,int PlayerIndex);//Engine.UIScrollFrame.ScrollZoneClicked
	void OnApplyScrolling(class UUIAction_ApplyScrolling* Action);//Engine.UIScrollFrame.OnApplyScrolling
	bool ScrollRegion(class UUIScrollbar* Sender,float PositionChange,bool bPositionMaxed);//Engine.UIScrollFrame.ScrollRegion
	void ReapplyFormatting(bool bImmediately);//Engine.UIScrollFrame.ReapplyFormatting
	float GetClientRegionPosition(unsigned char Orientation);//Engine.UIScrollFrame.GetClientRegionPosition
	void OnChildRepositioned(class UUIScreenObject* Sender);//Engine.UIScrollFrame.OnChildRepositioned
	FVector2 GetClientRegionPositionVector();//Engine.UIScrollFrame.GetClientRegionPositionVector
	float GetClientRegionSize(unsigned char Orientation);//Engine.UIScrollFrame.GetClientRegionSize
};
UClass* UUIScrollFrame::pClassPointer = NULL;

//0x00009C (0x00050C - 0x000470)
//UITabPage[0x103223A0]
class UUITabPage : public UUIContainer
{
public:
	DWORD                                              VfTable_IUIDataStoreSubscriber;                   		// 0x000470 (0x0004)              
	class UClass*                                      ButtonClass;                                      		// 0x000474 (0x0004)              
	class UUITabButton*                                TabButton;                                        		// 0x000478 (0x0004)              
	struct FUIDataStoreBinding                         ButtonCaption;                                    		// 0x00047C (0x0030)              
	struct FUIDataStoreBinding                         ButtonToolTip;                                    		// 0x0004AC (0x0030)              
	struct FUIDataStoreBinding                         PageDescription;                                  		// 0x0004DC (0x0030)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UITabPage");
		return pClassPointer;
	};

public:
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UITabPage.SetDataStoreBinding
	bool ActivatePage(int PlayerIndex,bool bActivate,bool bTakeFocus);//Engine.UITabPage.ActivatePage
	class UUITabButton* CreateTabButton(class UUITabControl* TabControl);//Engine.UITabPage.CreateTabButton
	bool IsActivePage();//Engine.UITabPage.IsActivePage
	void OnActiveStateChanged(class UUIScreenObject* Sender,int PlayerIndex,class UUIState* NewlyActiveState,class UUIState* PreviouslyActiveState);//Engine.UITabPage.OnActiveStateChanged
	class UUITabButton* GetTabButton(class UUITabControl* TabControl);//Engine.UITabPage.GetTabButton
	bool LinkToTabButton(class UUITabButton* NewButton,class UUITabControl* TabControl);//Engine.UITabPage.LinkToTabButton
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UITabPage.RefreshSubscriberValue
	void ClearBoundDataStores();//Engine.UITabPage.ClearBoundDataStores
	class UUITabControl* GetOwnerTabControl();//Engine.UITabPage.GetOwnerTabControl
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UITabPage.GetDataStoreBinding
	bool CanActivatePage(int PlayerIndex);//Engine.UITabPage.CanActivatePage
	void SetTabCaption(struct FString NewButtonMarkup);//Engine.UITabPage.SetTabCaption
	void AddedToTabControl(class UUITabControl* TabControl);//Engine.UITabPage.AddedToTabControl
	void RemovedFromParent(class UUIScreenObject* WidgetOwner);//Engine.UITabPage.RemovedFromParent
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UITabPage.NotifyDataStoreValueUpdated
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UITabPage.GetBoundDataStores
};
UClass* UUITabPage::pClassPointer = NULL;

//0x000098 (0x000568 - 0x0004D0)
//UINumericEditBox[0x10322270]
class UUINumericEditBox : public UUIEditBox
{
public:
	struct FUIStyleReference                           IncrementStyle;                                   		// 0x0004D0 (0x0020)              
	struct FUIStyleReference                           DecrementStyle;                                   		// 0x0004F0 (0x0020)              
	class UUINumericEditBoxButton*                     IncrementButton;                                  		// 0x000510 (0x0004)              
	class UUINumericEditBoxButton*                     DecrementButton;                                  		// 0x000514 (0x0004)              
	struct FUIRangeData                                NumericValue;                                     		// 0x000518 (0x0014)              
	int                                                DecimalPlaces;                                    		// 0x00052C (0x0004)              
	struct FUIScreenValue_Bounds                       IncButton_Position;                               		// 0x000530 (0x001C)              
	struct FUIScreenValue_Bounds                       DecButton_Position;                               		// 0x00054C (0x001C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UINumericEditBox");
		return pClassPointer;
	};

public:
	bool SetNumericValue(float NewValue,bool bForceRefreshString);//Engine.UINumericEditBox.SetNumericValue
	void Initialized();//Engine.UINumericEditBox.Initialized
	float GetNumericValue();//Engine.UINumericEditBox.GetNumericValue
	void DecrementValue(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UINumericEditBox.DecrementValue
	void IncrementValue(class UUIScreenObject* Sender,int PlayerIndex);//Engine.UINumericEditBox.IncrementValue
	void PostInitialize();//Engine.UINumericEditBox.PostInitialize
};
UClass* UUINumericEditBox::pClassPointer = NULL;

//0x0000C4 (0x000530 - 0x00046C)
//UIImage[0x10322140]
class UUIImage : public UUIObject
{
public:
	DWORD                                              VfTable_IUIDataStorePublisher;                    		// 0x00046C (0x0004)              
	struct FUIDataStoreBinding                         ImageDataSource;                                  		// 0x000470 (0x0030)              
	class UUIComp_DrawImage*                           ImageComponent;                                   		// 0x0004A0 (0x0004)              
	unsigned long                                      AllowDragAndDrop : 1;                             		// 0x0004A4 (0x0004) [0x00000001] 
	unsigned long                                      MonitorDragAndDropDeadzone : 1;                   		// 0x0004A4 (0x0004) [0x00000002] 
	struct FUIScreenValue_Position                     DragAndDropDeadzone;                              		// 0x0004A8 (0x000C)              
	struct FUIScreenValue_Position                     DragAndDropStartMousePosition;                    		// 0x0004B4 (0x000C)              
	struct FUIStyleReference                           DraggingStyle;                                    		// 0x0004C0 (0x0020)              
	struct FUIStyleReference                           DropOntoStyle;                                    		// 0x0004E0 (0x0020)              
	struct FEnumeratedName                             DragCue;                                          		// 0x000500 (0x0010)              
	struct FEnumeratedName                             DropCue;                                          		// 0x000510 (0x0010)              
	struct FEnumeratedName                             DropFailedCue;                                    		// 0x000520 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIImage");
		return pClassPointer;
	};

public:
	void ClearBoundDataStores();//Engine.UIImage.ClearBoundDataStores
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIImage.NotifyDataStoreValueUpdated
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UIImage.RefreshSubscriberValue
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UIImage.GetBoundDataStores
	void OnSetImage(class UcUIAction_SetImage* Action);//Engine.UIImage.OnSetImage
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UIImage.SetDataStoreBinding
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UIImage.GetDataStoreBinding
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UIImage.SaveSubscriberValue
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIImage.OnSequenceAction
	void SetValue(class USurface* NewImage);//Engine.UIImage.SetValue
};
UClass* UUIImage::pClassPointer = NULL;

//0x000040 (0x0004AC - 0x00046C)
//UILabel[0x10322010]
class UUILabel : public UUIObject
{
public:
	DWORD                                              VfTable_IUIDataStoreSubscriber;                   		// 0x00046C (0x0004)              
	DWORD                                              VfTable_IUIStringRenderer;                        		// 0x000470 (0x0004)              
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x000474 (0x0030)              
	class UUIComp_DrawString*                          StringRenderComponent;                            		// 0x0004A4 (0x0004)              
	class UUIComp_DrawImage*                           LabelBackground;                                  		// 0x0004A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UILabel");
		return pClassPointer;
	};

public:
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UILabel.SetDataStoreBinding
	void IgnoreMarkup(bool bShouldIgnoreMarkup);//Engine.UILabel.IgnoreMarkup
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UILabel.OnSequenceAction
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UILabel.NotifyDataStoreValueUpdated
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UILabel.GetBoundDataStores
	void SetTextAlignment(unsigned char Horizontal,unsigned char Vertical);//Engine.UILabel.SetTextAlignment
	void SetArrayValue(TArray<struct FString> ValueArray);//Engine.UILabel.SetArrayValue
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UILabel.GetDataStoreBinding
	void OnSetLabelText(class UUIAction_SetLabelText* Action);//Engine.UILabel.OnSetLabelText
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UILabel.RefreshSubscriberValue
	void SetValue(struct FString NewText);//Engine.UILabel.SetValue
	struct FString GetValue();//Engine.UILabel.GetValue
	void ClearBoundDataStores();//Engine.UILabel.ClearBoundDataStores
	void OnGetTextValue(class UUIAction_GetTextValue* Action);//Engine.UILabel.OnGetTextValue
};
UClass* UUILabel::pClassPointer = NULL;

//0x00002C (0x0004D8 - 0x0004AC)
//UIToolTip[0x10321EE0]
class UUIToolTip : public UUILabel
{
public:
	unsigned long                                      bPendingPositionUpdate : 1;                       		// 0x0004AC (0x0004) [0x00000001] 
	unsigned long                                      bResolveToolTipPosition : 1;                      		// 0x0004AC (0x0004) [0x00000002] 
	unsigned long                                      bFollowCursor : 1;                                		// 0x0004AC (0x0004) [0x00000004] 
	unsigned long                                      bAutoHideOnInput : 1;                             		// 0x0004AC (0x0004) [0x00000008] 
	float                                              SecondsActive;                                    		// 0x0004B0 (0x0004)              
	struct FScriptDelegate                             __ActivateToolTip__Delegate;                      		// 0x0004B4 (0x000C)              
	struct FScriptDelegate                             __DeactivateToolTip__Delegate;                    		// 0x0004C0 (0x000C)              
	struct FScriptDelegate                             __CanShowToolTip__Delegate;                       		// 0x0004CC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIToolTip");
		return pClassPointer;
	};

public:
	class UUIToolTip* ActivateToolTip(class UUIToolTip* Sender);//Engine.UIToolTip.ActivateToolTip
	bool CanShowToolTip(class UUIToolTip* Sender);//Engine.UIToolTip.CanShowToolTip
	bool EndTracking();//Engine.UIToolTip.EndTracking
	bool DeactivateToolTip();//Engine.UIToolTip.DeactivateToolTip
	void UpdateToolTipPosition();//Engine.UIToolTip.UpdateToolTipPosition
	class UUIToolTip* BeginTracking();//Engine.UIToolTip.BeginTracking
};
UClass* UUIToolTip::pClassPointer = NULL;

//0x000008 (0x0004E0 - 0x0004D8)
//cUIBaseToolTip[0x10321DB0]
class UcUIBaseToolTip : public UUIToolTip
{
public:
	class UUIScene*                                    m_pMouseOverScene;                                		// 0x0004D8 (0x0004)              
	unsigned long                                      m_bUpdatePosition : 1;                            		// 0x0004DC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cUIBaseToolTip");
		return pClassPointer;
	};

public:
	void SetValue(struct FString NewText);//Engine.cUIBaseToolTip.SetValue
	float GetBounds(unsigned char Dimension,unsigned char OutputType,bool bIgnoreDockPadding);//Engine.cUIBaseToolTip.GetBounds
};
UClass* UcUIBaseToolTip::pClassPointer = NULL;

//0x000000 (0x00070C - 0x00070C)
//UINavigationList[0x10321C80]
class UUINavigationList : public UUIList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UINavigationList");
		return pClassPointer;
	};
};
UClass* UUINavigationList::pClassPointer = NULL;

//0x000004 (0x000470 - 0x00046C)
//UIMeshWidget[0x10321B50]
class UUIMeshWidget : public UUIObject
{
public:
	class UStaticMeshComponent*                        Mesh;                                             		// 0x00046C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIMeshWidget");
		return pClassPointer;
	};
};
UClass* UUIMeshWidget::pClassPointer = NULL;

//0x000014 (0x00054C - 0x000538)
//UINumericOptionList[0x10321A20]
class UUINumericOptionList : public UUIOptionListBase
{
public:
	struct FUIRangeData                                RangeValue;                                       		// 0x000538 (0x0014)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UINumericOptionList");
		return pClassPointer;
	};

public:
	bool SetValue(float NewValue,bool bPercentageValue);//Engine.UINumericOptionList.SetValue
	float GetValue(bool bPercentageValue);//Engine.UINumericOptionList.GetValue
};
UClass* UUINumericOptionList::pClassPointer = NULL;

//0x00000C (0x000544 - 0x000538)
//UIOptionList[0x103218F0]
class UUIOptionList : public UUIOptionListBase
{
public:
	int                                                CurrentIndex;                                     		// 0x000538 (0x0004)              
	class UUIListElementProvider*                      DataProvider;                                     		// 0x00053C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIOptionList");
		return pClassPointer;
	};

public:
	void SetPrevValue();//Engine.UIOptionList.SetPrevValue
	bool GetListValue(int ListIndex,struct FString* OutValue);//Engine.UIOptionList.GetListValue
	void OnSetListIndex(class UUIAction_SetListIndex* Action);//Engine.UIOptionList.OnSetListIndex
	void SetNextValue();//Engine.UIOptionList.SetNextValue
	int GetCurrentIndex();//Engine.UIOptionList.GetCurrentIndex
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIOptionList.OnSequenceAction
	void SetCurrentIndex(int NewIndex);//Engine.UIOptionList.SetCurrentIndex
};
UClass* UUIOptionList::pClassPointer = NULL;

//0x00000C (0x000478 - 0x00046C)
//UIPrefab[0x103217C0]
class UUIPrefab : public UUIObject
{
public:
	int                                                PrefabVersion;                                    		// 0x00046C (0x0004)              
	int                                                InternalPrefabVersion;                            		// 0x000470 (0x0004)              
	int                                                ModificationCounter;                              		// 0x000474 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIPrefab");
		return pClassPointer;
	};
};
UClass* UUIPrefab::pClassPointer = NULL;

//0x000080 (0x0004EC - 0x00046C)
//UIPrefabInstance[0x10321690]
class UUIPrefabInstance : public UUIObject
{
public:
	class UUIPrefab*                                   SourcePrefab;                                     		// 0x00046C (0x0004)              
	int                                                PrefabInstanceVersion;                            		// 0x000470 (0x0004)              
	unsigned char                                      ArchetypeToInstanceMap[0x3C];                     		// 0x000474 (0x003C)              UNKNOWN PROPERTY: MapProperty
	unsigned char                                      PI_ObjectMap[0x3C];                               		// 0x0004B0 (0x003C)              UNKNOWN PROPERTY: MapProperty

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIPrefabInstance");
		return pClassPointer;
	};

public:
	void DetachFromSourcePrefab();//Engine.UIPrefabInstance.DetachFromSourcePrefab
};
UClass* UUIPrefabInstance::pClassPointer = NULL;

//0x00008D (0x0004F9 - 0x00046C)
//UIProgressBar[0x10321560]
class UUIProgressBar : public UUIObject
{
public:
	DWORD                                              VfTable_IUIDataStorePublisher;                    		// 0x00046C (0x0004)              
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x000470 (0x0004)              
	class UUIComp_DrawImage*                           FillImageComponent;                               		// 0x000474 (0x0004)              
	class UUIComp_DrawImage*                           OverlayImageComponent;                            		// 0x000478 (0x0004)              
	unsigned long                                      bDrawOverlay : 1;                                 		// 0x00047C (0x0004) [0x00000001] 
	unsigned long                                      bReverseDirection : 1;                            		// 0x00047C (0x0004) [0x00000002] 
	unsigned long                                      bUseUVExtents : 1;                                		// 0x00047C (0x0004) [0x00000004] 
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x000480 (0x0030)              
	struct FUIRangeData                                ProgressBarValue;                                 		// 0x0004B0 (0x0014)              
	struct FUIDataStoreBinding                         PivotPointDataSource;                             		// 0x0004C4 (0x0030)              
	float                                              m_fPivotPoint;                                    		// 0x0004F4 (0x0004)              
	unsigned char                                      ProgressBarOrientation;                           		// 0x0004F8 (0x0001)              PROPERTY: EUIOrientation

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIProgressBar");
		return pClassPointer;
	};

public:
	void OnSetProgressBarValue(class UUIAction_SetProgressBarValue* Action);//Engine.UIProgressBar.OnSetProgressBarValue
	void SetOverlayImage(class USurface* NewImage);//Engine.UIProgressBar.SetOverlayImage
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UIProgressBar.GetDataStoreBinding
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UIProgressBar.RefreshSubscriberValue
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UIProgressBar.NotifyDataStoreValueUpdated
	float GetValue(bool bPercentageValue);//Engine.UIProgressBar.GetValue
	void OnGetProgressBarValue(class UUIAction_GetProgressBarValue* Action);//Engine.UIProgressBar.OnGetProgressBarValue
	void SetFillImage(class USurface* NewImage);//Engine.UIProgressBar.SetFillImage
	bool OnSequenceAction(class USequenceAction* Action);//Engine.UIProgressBar.OnSequenceAction
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UIProgressBar.SaveSubscriberValue
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UIProgressBar.SetDataStoreBinding
	void SetBackgroundImage(class USurface* NewImage);//Engine.UIProgressBar.SetBackgroundImage
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UIProgressBar.GetBoundDataStores
	void ClearBoundDataStores();//Engine.UIProgressBar.ClearBoundDataStores
	bool SetValue(float NewValue,bool bPercentageValue);//Engine.UIProgressBar.SetValue
	void OnSetImage(class UcUIAction_SetImage* Action);//Engine.UIProgressBar.OnSetImage
};
UClass* UUIProgressBar::pClassPointer = NULL;

//0x000098 (0x000504 - 0x00046C)
//UISlider[0x10321430]
class UUISlider : public UUIObject
{
public:
	DWORD                                              VfTable_IUIDataStorePublisher;                    		// 0x00046C (0x0004)              
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x000470 (0x0004)              
	class UUIComp_DrawImage*                           SliderBarImageComponent;                          		// 0x000474 (0x0004)              
	class UUIComp_DrawImage*                           MarkerImageComponent;                             		// 0x000478 (0x0004)              
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x00047C (0x0030)              
	class UUIComp_DrawStringSlider*                    CaptionRenderComponent;                           		// 0x0004AC (0x0004)              
	struct FUIRangeData                                SliderValue;                                      		// 0x0004B0 (0x0014)              
	unsigned long                                      bRenderCaption : 1;                               		// 0x0004C4 (0x0004) [0x00000001] 
	unsigned char                                      SliderOrientation;                                		// 0x0004C8 (0x0001)              PROPERTY: EUIOrientation
	unsigned char                                      _0x0004C9[0x3];                                   		// 0x0004C9 (0x0003) MISSED OFFSET
	struct FUIScreenValue_Extent                       BarSize;                                          		// 0x0004CC (0x0008)              
	struct FUIScreenValue_Extent                       MarkerHeight;                                     		// 0x0004D4 (0x0008)              
	struct FUIScreenValue_Extent                       MarkerWidth;                                      		// 0x0004DC (0x0008)              
	struct FEnumeratedName                             IncrementCue;                                     		// 0x0004E4 (0x0010)              
	struct FEnumeratedName                             DecrementCue;                                     		// 0x0004F4 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UISlider");
		return pClassPointer;
	};

public:
	struct FString GetDataStoreBinding(int BindingIndex);//Engine.UISlider.GetDataStoreBinding
	void ClearBoundDataStores();//Engine.UISlider.ClearBoundDataStores
	float GetValue(bool bPercentageValue);//Engine.UISlider.GetValue
	void SetBackgroundImage(class USurface* NewImage);//Engine.UISlider.SetBackgroundImage
	bool SaveSubscriberValue(TArray<class UUIDataStore*>* out_BoundDataStores,int BindingIndex);//Engine.UISlider.SaveSubscriberValue
	void OnStateChanged(class UUIScreenObject* Sender,int PlayerIndex,class UUIState* NewlyActiveState,class UUIState* PreviouslyActiveState);//Engine.UISlider.OnStateChanged
	bool RefreshSubscriberValue(int BindingIndex);//Engine.UISlider.RefreshSubscriberValue
	void SetBarImage(class USurface* NewImage);//Engine.UISlider.SetBarImage
	void SetDataStoreBinding(struct FString MarkupText,int BindingIndex);//Engine.UISlider.SetDataStoreBinding
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore,bool bValuesInvalidated,struct FName PropertyTag,class UUIDataProvider* SourceProvider,int ArrayIndex);//Engine.UISlider.NotifyDataStoreValueUpdated
	void SetMarkerImage(class USurface* NewImage);//Engine.UISlider.SetMarkerImage
	bool SetValue(float NewValue,bool bPercentageValue);//Engine.UISlider.SetValue
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);//Engine.UISlider.GetBoundDataStores
};
UClass* UUISlider::pClassPointer = NULL;

//0x0000CC (0x000538 - 0x00046C)
//UITabControl[0x10321300]
class UUITabControl : public UUIObject
{
public:
	TArray<class UUITabPage*>                          Pages;                                            		// 0x00046C (0x000C)              
	class UUITabPage*                                  ActivePage;                                       		// 0x000478 (0x0004)              
	class UUITabPage*                                  PendingPage;                                      		// 0x00047C (0x0004)              
	unsigned char                                      TabDockFace;                                      		// 0x000480 (0x0001)              PROPERTY: EUIWidgetFace
	unsigned char                                      TabSizeMode;                                      		// 0x000481 (0x0001)              PROPERTY: EUITabAutosizeType
	unsigned char                                      _0x000482[0x2];                                   		// 0x000482 (0x0002) MISSED OFFSET
	float                                              TabButtonLengthConst;                             		// 0x000484 (0x0004)              
	struct FUIScreenValue_Extent                       TabButtonSize;                                    		// 0x000488 (0x0008)              
	struct FUIScreenValue_Extent                       TabButtonPadding[0x2];                            		// 0x000490 (0x0010)              
	struct FUIStyleReference                           TabButtonBackgroundStyle;                         		// 0x0004A0 (0x0020)              
	struct FUIStyleReference                           TabButtonCaptionStyle;                            		// 0x0004C0 (0x0020)              
	struct FUIStyleReference                           TabButtonImageOverlayStyle;                       		// 0x0004E0 (0x0020)              
	unsigned long                                      bAllowPagePreviews : 1;                           		// 0x000500 (0x0004) [0x00000001] 
	unsigned long                                      bUpdateLayout : 1;                                		// 0x000500 (0x0004) [0x00000002] 
	struct FEnumeratedName                             ActivateTabCue;                                   		// 0x000504 (0x0010)              
	struct FScriptDelegate                             __OnPageActivated__Delegate;                      		// 0x000514 (0x000C)              
	struct FScriptDelegate                             __OnPageInserted__Delegate;                       		// 0x000520 (0x000C)              
	struct FScriptDelegate                             __OnPageRemoved__Delegate;                        		// 0x00052C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UITabControl");
		return pClassPointer;
	};

public:
	bool ActivateNextPage(int PlayerIndex,bool bFocusPage,bool bAllowWrapping);//Engine.UITabControl.ActivateNextPage
	bool ActivateBestTab(int PlayerIndex,bool bFocusPage,int StartIndex);//Engine.UITabControl.ActivateBestTab
	void OnPageRemoved(class UUITabControl* Sender,class UUITabPage* OldPage,int PlayerIndex);//Engine.UITabControl.OnPageRemoved
	bool ActivatePage(class UUITabPage* PageToActivate,int PlayerIndex,bool bFocusPage);//Engine.UITabControl.ActivatePage
	void OnPageActivated(class UUITabControl* Sender,class UUITabPage* NewlyActivePage,int PlayerIndex);//Engine.UITabControl.OnPageActivated
	int FindPageIndexByButton(class UUITabButton* SearchButton);//Engine.UITabControl.FindPageIndexByButton
	void OnPageInserted(class UUITabControl* Sender,class UUITabPage* NewPage,int PlayerIndex);//Engine.UITabControl.OnPageInserted
	void PrivateActivatePage(class UUITabPage* PageToActivate,int PlayerIndex);//Engine.UITabControl.PrivateActivatePage
	bool MovePageLeft(int PageIndex);//Engine.UITabControl.MovePageLeft
	class UUITabPage* GetPageAtIndex(int PageIndex);//Engine.UITabControl.GetPageAtIndex
	bool InsertPage(class UUITabPage* PageToInsert,int PlayerIndex,int InsertIndex,bool bActivateImmediately);//Engine.UITabControl.InsertPage
	void RequestLayoutUpdate();//Engine.UITabControl.RequestLayoutUpdate
	class UUITabPage* CreateTabPage(class UClass* TabPageClass,class UUITabPage* PagePrefab);//Engine.UITabControl.CreateTabPage
	void TabButtonClicked(class UUIScreenObject* EventObject,int PlayerIndex);//Engine.UITabControl.TabButtonClicked
	int FindPageIndexByCaption(struct FString PageCaption,bool bMarkupString);//Engine.UITabControl.FindPageIndexByCaption
	void AddedChild(class UUIScreenObject* WidgetOwner,class UUIObject* NewChild);//Engine.UITabControl.AddedChild
	bool ActivatePreviousPage(int PlayerIndex,bool bFocusPage,bool bAllowWrapping);//Engine.UITabControl.ActivatePreviousPage
	int GetPageCount();//Engine.UITabControl.GetPageCount
	class UUITabButton* FindTargetedTab(int PlayerIndex);//Engine.UITabControl.FindTargetedTab
	bool RemovePage(class UUITabPage* PageToRemove,int PlayerIndex);//Engine.UITabControl.RemovePage
	int FindPageIndexByPageRef(class UUITabPage* SearchPage);//Engine.UITabControl.FindPageIndexByPageRef
	bool ReplacePage(class UUITabPage* ExistingPage,class UUITabPage* NewPage,int PlayerIndex,bool bFocusPage);//Engine.UITabControl.ReplacePage
	void PostInitialize();//Engine.UITabControl.PostInitialize
	bool MovePageRight(int PageIndex);//Engine.UITabControl.MovePageRight
	bool EnableTabPage(class UUITabPage* PageToEnable,int PlayerIndex,bool bEnablePage,bool bActivatePage,bool bFocusPage);//Engine.UITabControl.EnableTabPage
	bool ProcessInputKey(struct FInputEventParameters* EventParms);//Engine.UITabControl.ProcessInputKey
	bool ActivatePageByCaption(struct FString PageCaption,int PlayerIndex,bool bFocusPage);//Engine.UITabControl.ActivatePageByCaption
};
UClass* UUITabControl::pClassPointer = NULL;

//0x000120 (0x0002B8 - 0x000198)
//UIScene[0x103211D0]
class UUIScene : public UUIScreenObject
{
public:
	unsigned char                                      SceneLayer;                                       		// 0x000198 (0x0001)              PROPERTY: ESceneLayer
	unsigned char                                      SceneInputMode;                                   		// 0x000199 (0x0001)              PROPERTY: EScreenInputMode
	unsigned char                                      SceneRenderMode;                                  		// 0x00019A (0x0001)              PROPERTY: ESplitscreenRenderMode
	unsigned char                                      _0x00019B[0x1];                                   		// 0x00019B (0x0001) MISSED OFFSET
	struct FEnumeratedName                             APBSceneLayer;                                    		// 0x00019C (0x0010)              
	int                                                nAPBSceneLayerOrdinal;                            		// 0x0001AC (0x0004)              
	struct FName                                       SceneTag;                                         		// 0x0001B0 (0x0008)              
	class UUISceneClient*                              SceneClient;                                      		// 0x0001B8 (0x0004)              
	class USceneDataStore*                             SceneData;                                        		// 0x0001BC (0x0004)              
	class ULocalPlayer*                                PlayerOwner;                                      		// 0x0001C0 (0x0004)              
	class UUIToolTip*                                  ActiveToolTip;                                    		// 0x0001C4 (0x0004)              
	class UUIToolTip*                                  StandardToolTip;                                  		// 0x0001C8 (0x0004)              
	class UClass*                                      DefaultToolTipClass;                              		// 0x0001CC (0x0004)              
	class UUIContextMenu*                              ActiveContextMenu;                                		// 0x0001D0 (0x0004)              
	class UUIContextMenu*                              StandardContextMenu;                              		// 0x0001D4 (0x0004)              
	class UClass*                                      DefaultContextMenuClass;                          		// 0x0001D8 (0x0004)              
	TArray<struct FUIDockingNode>                      DockingStack;                                     		// 0x0001DC (0x000C)              
	TArray<class UUIObject*>                           RenderStack;                                      		// 0x0001E8 (0x000C)              
	TArray<class UUITickableObject*>                   TickableObjects;                                  		// 0x0001F4 (0x000C)              
	struct FMap_Mirror                                 InputSubscriptions;                               		// 0x000200 (0x003C)              
	int                                                LastPlayerIndex;                                  		// 0x00023C (0x0004)              
	unsigned long                                      bUpdateDockingStack : 1;                          		// 0x000240 (0x0004) [0x00000001] 
	unsigned long                                      bUpdateScenePositions : 1;                        		// 0x000240 (0x0004) [0x00000002] 
	unsigned long                                      bUpdateNavigationLinks : 1;                       		// 0x000240 (0x0004) [0x00000004] 
	unsigned long                                      bUpdatePrimitiveUsage : 1;                        		// 0x000240 (0x0004) [0x00000008] 
	unsigned long                                      bRefreshWidgetStyles : 1;                         		// 0x000240 (0x0004) [0x00000010] 
	unsigned long                                      bRefreshStringFormatting : 1;                     		// 0x000240 (0x0004) [0x00000020] 
	unsigned long                                      bPerformedInitialUpdate : 1;                      		// 0x000240 (0x0004) [0x00000040] 
	unsigned long                                      bResolvingScenePositions : 1;                     		// 0x000240 (0x0004) [0x00000080] 
	unsigned long                                      bUsesPrimitives : 1;                              		// 0x000240 (0x0004) [0x00000100] 
	unsigned long                                      bDisplayCursor : 1;                               		// 0x000240 (0x0004) [0x00000200] 
	unsigned long                                      bRenderParentScenes : 1;                          		// 0x000240 (0x0004) [0x00000400] 
	unsigned long                                      bAlwaysRenderScene : 1;                           		// 0x000240 (0x0004) [0x00000800] 
	unsigned long                                      bPauseGameWhileActive : 1;                        		// 0x000240 (0x0004) [0x00001000] 
	unsigned long                                      bExemptFromAutoClose : 1;                         		// 0x000240 (0x0004) [0x00002000] 
	unsigned long                                      bCloseOnLevelChange : 1;                          		// 0x000240 (0x0004) [0x00004000] 
	unsigned long                                      bClosePreDisconnect : 1;                          		// 0x000240 (0x0004) [0x00008000] 
	unsigned long                                      bSaveSceneValuesOnClose : 1;                      		// 0x000240 (0x0004) [0x00010000] 
	unsigned long                                      bEnableScenePostProcessing : 1;                   		// 0x000240 (0x0004) [0x00020000] 
	unsigned long                                      bEnableSceneDepthTesting : 1;                     		// 0x000240 (0x0004) [0x00040000] 
	unsigned long                                      bRequiresNetwork : 1;                             		// 0x000240 (0x0004) [0x00080000] 
	unsigned long                                      bRequiresOnlineService : 1;                       		// 0x000240 (0x0004) [0x00100000] 
	unsigned long                                      bMenuLevelRestoresScene : 1;                      		// 0x000240 (0x0004) [0x00200000] 
	unsigned long                                      bFlushPlayerKeyboardInput : 1;                    		// 0x000240 (0x0004) [0x00400000] 
	unsigned long                                      bFlushPlayerMouseInput : 1;                       		// 0x000240 (0x0004) [0x00800000] 
	unsigned long                                      bFlushPlayerInput : 1;                            		// 0x000240 (0x0004) [0x01000000] 
	unsigned long                                      bDisableWorldRendering : 1;                       		// 0x000240 (0x0004) [0x02000000] 
	unsigned long                                      bAllowInputWhenInvisible : 1;                     		// 0x000240 (0x0004) [0x04000000] 
	unsigned long                                      bPassUnhandledInputToGame : 1;                    		// 0x000240 (0x0004) [0x08000000] 
	unsigned long                                      bNeedsUICompositeTexture : 1;                     		// 0x000240 (0x0004) [0x10000000] 
	unsigned long                                      bBlocksMusicTrackActions : 1;                     		// 0x000240 (0x0004) [0x20000000] 
	FVector2                                           CurrentViewportSize;                              		// 0x000244 (0x0008)              
	TArray<class UUIEditBox*>                          TabbingWidgets;                                   		// 0x00024C (0x000C)              
	struct FEnumeratedName                             SceneOpenedCue;                                   		// 0x000258 (0x0010)              
	struct FEnumeratedName                             SceneClosedCue;                                   		// 0x000268 (0x0010)              
	class UUIScene*                                    m_ToolTipParent;                                  		// 0x000278 (0x0004)              
	struct FScriptDelegate                             __GetSceneInputMode__Delegate;                    		// 0x00027C (0x000C)              
	struct FScriptDelegate                             __OnSceneActivated__Delegate;                     		// 0x000288 (0x000C)              
	struct FScriptDelegate                             __OnSceneDeactivated__Delegate;                   		// 0x000294 (0x000C)              
	struct FScriptDelegate                             __OnTopSceneChanged__Delegate;                    		// 0x0002A0 (0x000C)              
	struct FScriptDelegate                             __ShouldModulateBackgroundAlpha__Delegate;        		// 0x0002AC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIScene");
		return pClassPointer;
	};

public:
	void SetInputMask(unsigned char NewInputMask,bool bRecurse);//Engine.UIScene.SetInputMask
	void SetSceneInputMode(unsigned char NewInputMode);//Engine.UIScene.SetSceneInputMode
	class UUIToolTip* GetDefaultToolTip();//Engine.UIScene.GetDefaultToolTip
	void AnimEnd(class UUIObject* AnimTarget,int AnimIndex,class UUIAnimationSeq* AnimSeq);//Engine.UIScene.AnimEnd
	void ForceImmediateSceneUpdate();//Engine.UIScene.ForceImmediateSceneUpdate
	void UnbindSubscribers();//Engine.UIScene.UnbindSubscribers
	int FindTickableObjectIndex(class UUITickableObject* ObjectToFind);//Engine.UIScene.FindTickableObjectIndex
	class UUIContextMenu* GetDefaultContextMenu();//Engine.UIScene.GetDefaultContextMenu
	void LogRenderBounds(int Indent);//Engine.UIScene.LogRenderBounds
	void CalculateInputMask();//Engine.UIScene.CalculateInputMask
	class UUIDataStore* ResolveDataStore(struct FName DataStoreTag,class ULocalPlayer* InPlayerOwner);//Engine.UIScene.ResolveDataStore
	void SceneDeactivated();//Engine.UIScene.SceneDeactivated
	bool UnregisterTickableObject(class UUITickableObject* ObjectToRemove);//Engine.UIScene.UnregisterTickableObject
	void LoadSceneDataValues();//Engine.UIScene.LoadSceneDataValues
	void RemovedChild(class UUIScreenObject* WidgetOwner,class UUIObject* OldChild,TArray<class UUIObject*> ExclusionSet);//Engine.UIScene.RemovedChild
	void RebuildDockingStack();//Engine.UIScene.RebuildDockingStack
	void LogCurrentState(int Indent);//Engine.UIScene.LogCurrentState
	void SceneActivated(bool bInitialActivation);//Engine.UIScene.SceneActivated
	class UUIScene* GetPreviousScene(bool bRequireMatchingPlayerOwner);//Engine.UIScene.GetPreviousScene
	void OnSceneActivated(class UUIScene* ActivatedScene,bool bInitialActivation);//Engine.UIScene.OnSceneActivated
	void NotifyGameSessionEnded();//Engine.UIScene.NotifyGameSessionEnded
	void LogDockingStack();//Engine.UIScene.LogDockingStack
	class USceneDataStore* GetSceneDataStore();//Engine.UIScene.GetSceneDataStore
	bool SetActiveContextMenu(class UUIContextMenu* NewContextMenu,int PlayerIndex);//Engine.UIScene.SetActiveContextMenu
	void NotifyOnlineServiceStatusChanged(unsigned char NewConnectionStatus);//Engine.UIScene.NotifyOnlineServiceStatusChanged
	void OnSceneDeactivated(class UUIScene* DeactivatedScene);//Engine.UIScene.OnSceneDeactivated
	void NotifyLinkStatusChanged(bool bConnected);//Engine.UIScene.NotifyLinkStatusChanged
	void SceneCreated(class UUIScene* CreatedScene);//Engine.UIScene.SceneCreated
	void ResolveScenePositions();//Engine.UIScene.ResolveScenePositions
	void SaveSceneDataValues(bool bUnbindSubscribers);//Engine.UIScene.SaveSceneDataValues
	bool CloseScene(class UUIScene* SceneToClose,bool bSkipKismetNotify,bool bSkipAnimation);//Engine.UIScene.CloseScene
	bool SetActiveToolTip(class UUIToolTip* NewToolTip);//Engine.UIScene.SetActiveToolTip
	class AWorldInfo* GetWorldInfo();//Engine.UIScene.GetWorldInfo
	void NotifyPreClientTravel(struct FString TravelURL,unsigned char TravelType,bool bIsSeamless);//Engine.UIScene.NotifyPreClientTravel
	bool IsSceneActive(bool bTopmostScene);//Engine.UIScene.IsSceneActive
	class UUIToolTip* GetActiveToolTip();//Engine.UIScene.GetActiveToolTip
	class UUIScene* OpenScene(class UUIScene* SceneToOpen,bool bSkipAnimation,struct FScriptDelegate SceneActivatedDelegate,struct FScriptDelegate SceneDeactivatedDelegate);//Engine.UIScene.OpenScene
	class UUIContextMenu* GetActiveContextMenu();//Engine.UIScene.GetActiveContextMenu
	void SetVisibility(bool bIsVisible);//Engine.UIScene.SetVisibility
	unsigned char GetSceneInputMode();//Engine.UIScene.GetSceneInputMode
	bool RegisterTickableObject(class UUITickableObject* ObjectToRegister,int InsertIndex);//Engine.UIScene.RegisterTickableObject
	bool ShouldModulateBackgroundAlpha(float* AlphaModulationPercent);//Engine.UIScene.ShouldModulateBackgroundAlpha
	void OnTopSceneChanged(class UUIScene* NewTopScene);//Engine.UIScene.OnTopSceneChanged
};
UClass* UUIScene::pClassPointer = NULL;

//0x000004 (0x0002BC - 0x0002B8)
//UIPrefabScene[0x103210A0]
class UUIPrefabScene : public UUIScene
{
public:
	DWORD                                              VfTable_FCallbackEventDevice;                     		// 0x0002B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIPrefabScene");
		return pClassPointer;
	};
};
UClass* UUIPrefabScene::pClassPointer = NULL;

//0x000002 (0x000070 - 0x00006E)
//UIState_Active[0x10320F70]
class UUIState_Active : public UUIState
{
public:
	unsigned char                                      _0x00006E[0x2];                                   		// 0x00006E (0x0002) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIState_Active");
		return pClassPointer;
	};
};
UClass* UUIState_Active::pClassPointer = NULL;

//0x000002 (0x000070 - 0x00006E)
//UIState_Focused[0x10320E40]
class UUIState_Focused : public UUIState
{
public:
	unsigned char                                      _0x00006E[0x2];                                   		// 0x00006E (0x0002) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIState_Focused");
		return pClassPointer;
	};

public:
	bool ActivateState(class UUIScreenObject* Target,int PlayerIndex);//Engine.UIState_Focused.ActivateState
};
UClass* UUIState_Focused::pClassPointer = NULL;

//0x000002 (0x000070 - 0x00006E)
//UIState_Pressed[0x10320D10]
class UUIState_Pressed : public UUIState
{
public:
	unsigned char                                      _0x00006E[0x2];                                   		// 0x00006E (0x0002) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIState_Pressed");
		return pClassPointer;
	};
};
UClass* UUIState_Pressed::pClassPointer = NULL;

//0x000002 (0x000070 - 0x00006E)
//UIState_TargetedTab[0x10320BE0]
class UUIState_TargetedTab : public UUIState
{
public:
	unsigned char                                      _0x00006E[0x2];                                   		// 0x00006E (0x0002) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIState_TargetedTab");
		return pClassPointer;
	};

public:
	bool IsWidgetClassSupported(class UClass* WidgetClass);//Engine.UIState_TargetedTab.IsWidgetClassSupported
};
UClass* UUIState_TargetedTab::pClassPointer = NULL;

//0x000000 (0x0000F4 - 0x0000F4)
//UIEditboxString[0x10320AB0]
class UUIEditboxString : public UUIString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEditboxString");
		return pClassPointer;
	};
};
UClass* UUIEditboxString::pClassPointer = NULL;

//0x000000 (0x0000F4 - 0x0000F4)
//UIListString[0x10320980]
class UUIListString : public UUIString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIListString");
		return pClassPointer;
	};
};
UClass* UUIListString::pClassPointer = NULL;

//0x00001C (0x000060 - 0x000044)
//UIStyle_Data[0x10320850]
class UUIStyle_Data : public UUIRoot
{
public:
	struct FLinearColor                                StyleColor;                                       		// 0x000044 (0x0010)              
	float                                              StylePadding[0x2];                                		// 0x000054 (0x0008)              
	unsigned long                                      bEnabled : 1;                                     		// 0x00005C (0x0004) [0x00000001] 
	unsigned long                                      bDirty : 1;                                       		// 0x00005C (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIStyle_Data");
		return pClassPointer;
	};
};
UClass* UUIStyle_Data::pClassPointer = NULL;

//0x000040 (0x0000A0 - 0x000060)
//UIStyle_Combo[0x10320720]
class UUIStyle_Combo : public UUIStyle_Data
{
public:
	struct FStyleDataReference                         ImageStyle;                                       		// 0x000060 (0x0020)              
	struct FStyleDataReference                         TextStyle;                                        		// 0x000080 (0x0020)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIStyle_Combo");
		return pClassPointer;
	};
};
UClass* UUIStyle_Combo::pClassPointer = NULL;

//0x000034 (0x000094 - 0x000060)
//UIStyle_Image[0x103205F0]
class UUIStyle_Image : public UUIStyle_Data
{
public:
	class USurface*                                    DefaultImage;                                     		// 0x000060 (0x0004)              
	struct FTextureCoordinates                         Coordinates;                                      		// 0x000064 (0x0010)              
	struct FUIImageAdjustmentData                      AdjustmentType[0x2];                              		// 0x000074 (0x0020)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIStyle_Image");
		return pClassPointer;
	};
};
UClass* UUIStyle_Image::pClassPointer = NULL;

//0x000024 (0x000084 - 0x000060)
//UIStyle_Text[0x103204C0]
class UUIStyle_Text : public UUIStyle_Data
{
public:
	class UFont*                                       StyleFont;                                        		// 0x000060 (0x0004)              
	struct FUITextAttributes                           Attributes;                                       		// 0x000064 (0x0004)              
	unsigned char                                      Alignment[0x2];                                   		// 0x000068 (0x0002)              PROPERTY: EUIAlignment
	unsigned char                                      ClipMode;                                         		// 0x00006A (0x0001)              PROPERTY: ETextClipMode
	unsigned char                                      ClipAlignment;                                    		// 0x00006B (0x0001)              PROPERTY: EUIAlignment
	struct FTextAutoScaleValue                         AutoScaling;                                      		// 0x00006C (0x0008)              
	FVector2                                           Scale;                                            		// 0x000074 (0x0008)              
	FVector2                                           SpacingAdjust;                                    		// 0x00007C (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIStyle_Text");
		return pClassPointer;
	};
};
UClass* UUIStyle_Text::pClassPointer = NULL;

//0x000094 (0x0000D8 - 0x000044)
//UITexture[0x10320390]
class UUITexture : public UUIRoot
{
public:
	struct FUICombinedStyleData                        ImageStyleData;                                   		// 0x000044 (0x0090)              
	class USurface*                                    ImageTexture;                                     		// 0x0000D4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UITexture");
		return pClassPointer;
	};

public:
	bool HasValidStyleData();//Engine.UITexture.HasValidStyleData
	void SetImageStyle(class UUIStyle_Image* NewImageStyle);//Engine.UITexture.SetImageStyle
	class USurface* GetSurface();//Engine.UITexture.GetSurface
};
UClass* UUITexture::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UIStringRenderer[0x10320260]
class UUIStringRenderer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIStringRenderer");
		return pClassPointer;
	};

public:
	void SetTextAlignment(unsigned char Horizontal,unsigned char Vertical);//Engine.UIStringRenderer.SetTextAlignment
};
UClass* UUIStringRenderer::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UIStyleResolver[0x10320130]
class UUIStyleResolver : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIStyleResolver");
		return pClassPointer;
	};

public:
	bool NotifyResolveStyle(class UUISkin* ActiveSkin,bool bClearExistingValue,class UUIState* CurrentMenuState,struct FName StylePropertyName);//Engine.UIStyleResolver.NotifyResolveStyle
	struct FName GetStyleResolverTag();//Engine.UIStyleResolver.GetStyleResolverTag
	bool SetStyleResolverTag(struct FName NewResolverTag);//Engine.UIStyleResolver.SetStyleResolverTag
};
UClass* UUIStyleResolver::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UITickableObject[0x10320000]
class UUITickableObject : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UITickableObject");
		return pClassPointer;
	};
};
UClass* UUITickableObject::pClassPointer = NULL;

//0x000010 (0x0000F8 - 0x0000E8)
//UISequence[0x1035FE20]
class UUISequence : public USequence
{
public:
	DWORD                                              VfTable_IUIEventContainer;                        		// 0x0000E8 (0x0004)              
	TArray<class UUIEvent*>                            UIEvents;                                         		// 0x0000EC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UISequence");
		return pClassPointer;
	};

public:
	class UUIScreenObject* GetOwner();//Engine.UISequence.GetOwner
	bool AddSequenceObject(class USequenceObject* NewObj,bool bRecurse);//Engine.UISequence.AddSequenceObject
	void RemoveSequenceObject(class USequenceObject* ObjectToRemove);//Engine.UISequence.RemoveSequenceObject
	void RemoveSequenceObjects(TArray<class USequenceObject*>* ObjectsToRemove);//Engine.UISequence.RemoveSequenceObjects
	void GetUIEvents(TArray<class UUIEvent*>* out_Events,class UClass* LimitClass);//Engine.UISequence.GetUIEvents
};
UClass* UUISequence::pClassPointer = NULL;

//0x000000 (0x0000F8 - 0x0000F8)
//UIStateSequence[0x1035FCF0]
class UUIStateSequence : public UUISequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIStateSequence");
		return pClassPointer;
	};

public:
	class UUIState* GetOwnerState();//Engine.UIStateSequence.GetOwnerState
};
UClass* UUIStateSequence::pClassPointer = NULL;

//0x000008 (0x0000B4 - 0x0000AC)
//UIAction[0x1035FBC0]
class UUIAction : public USequenceAction
{
public:
	int                                                GamepadID;                                        		// 0x0000AC (0x0004)              
	unsigned long                                      bAutoTargetOwner : 1;                             		// 0x0000B0 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIAction.IsValidUISequenceObject
	int GetObjClassVersion();//Engine.UIAction.GetObjClassVersion
	class UUIScreenObject* GetOwner();//Engine.UIAction.GetOwner
	bool IsValidLevelSequenceObject();//Engine.UIAction.IsValidLevelSequenceObject
	class UUIScene* GetOwnerScene();//Engine.UIAction.GetOwnerScene
	bool HasDynamicOutputLinks();//Engine.UIAction.HasDynamicOutputLinks
};
UClass* UUIAction::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_ActivateLevelEvent[0x1035FA90]
class UUIAction_ActivateLevelEvent : public UUIAction
{
public:
	struct FName                                       EventName;                                        		// 0x0000B4 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ActivateLevelEvent");
		return pClassPointer;
	};
};
UClass* UUIAction_ActivateLevelEvent::pClassPointer = NULL;

//0x00000C (0x0000C0 - 0x0000B4)
//UIAction_ChangeState[0x1035F960]
class UUIAction_ChangeState : public UUIAction
{
public:
	class UClass*                                      StateType;                                        		// 0x0000B4 (0x0004)              
	class UUIState*                                    TargetState;                                      		// 0x0000B8 (0x0004)              
	unsigned long                                      bStateChangeFailed : 1;                           		// 0x0000BC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ChangeState");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_ChangeState.GetObjClassVersion
};
UClass* UUIAction_ChangeState::pClassPointer = NULL;

//0x000000 (0x0000C0 - 0x0000C0)
//UIAction_ActivateState[0x1035F830]
class UUIAction_ActivateState : public UUIAction_ChangeState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ActivateState");
		return pClassPointer;
	};
};
UClass* UUIAction_ActivateState::pClassPointer = NULL;

//0x000000 (0x0000C0 - 0x0000C0)
//UIAction_DeactivateState[0x1035F700]
class UUIAction_DeactivateState : public UUIAction_ChangeState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_DeactivateState");
		return pClassPointer;
	};
};
UClass* UUIAction_DeactivateState::pClassPointer = NULL;

//0x000014 (0x0000C8 - 0x0000B4)
//UIAction_CreateOnlineGame[0x1035F5D0]
class UUIAction_CreateOnlineGame : public UUIAction
{
public:
	struct FName                                       DataStoreName;                                    		// 0x0000B4 (0x0008)              
	struct FString                                     MapName;                                          		// 0x0000BC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_CreateOnlineGame");
		return pClassPointer;
	};
};
UClass* UUIAction_CreateOnlineGame::pClassPointer = NULL;

//0x000004 (0x0000B8 - 0x0000B4)
//UIAction_DataStore[0x1035F4A0]
class UUIAction_DataStore : public UUIAction
{
public:
	int                                                BindingIndex;                                     		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_DataStore");
		return pClassPointer;
	};
};
UClass* UUIAction_DataStore::pClassPointer = NULL;

//0x000010 (0x0000C8 - 0x0000B8)
//UIAction_DataStoreField[0x1035F370]
class UUIAction_DataStoreField : public UUIAction_DataStore
{
public:
	class UUIScene*                                    TargetScene;                                      		// 0x0000B8 (0x0004)              
	struct FString                                     DataFieldMarkupString;                            		// 0x0000BC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_DataStoreField");
		return pClassPointer;
	};
};
UClass* UUIAction_DataStoreField::pClassPointer = NULL;

//0x000005 (0x0000CD - 0x0000C8)
//UIAction_AddDataField[0x1035F240]
class UUIAction_AddDataField : public UUIAction_DataStoreField
{
public:
	unsigned long                                      bPersistentField : 1;                             		// 0x0000C8 (0x0004) [0x00000001] 
	unsigned char                                      FieldType;                                        		// 0x0000CC (0x0001)              PROPERTY: EUIDataProviderFieldType

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_AddDataField");
		return pClassPointer;
	};
};
UClass* UUIAction_AddDataField::pClassPointer = NULL;

//0x00003C (0x000104 - 0x0000C8)
//UIAction_GetDatafieldValue[0x1035F110]
class UUIAction_GetDatafieldValue : public UUIAction_DataStoreField
{
public:
	struct FString                                     DataFieldStringValue;                             		// 0x0000C8 (0x000C)              
	class USurface*                                    DataFieldImageValue;                              		// 0x0000D4 (0x0004)              
	TArray<int>                                        DataFieldArrayValue;                              		// 0x0000D8 (0x000C)              
	struct FUIRangeData                                DataFieldRangeValue;                              		// 0x0000E4 (0x0014)              
	struct FUniqueNetId                                DataFieldNetIdValue;                              		// 0x0000F8 (0x0008)              
	class UObject*                                     DataFieldObjectValue;                             		// 0x000100 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetDatafieldValue");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_GetDatafieldValue.GetObjClassVersion
};
UClass* UUIAction_GetDatafieldValue::pClassPointer = NULL;

//0x000038 (0x000100 - 0x0000C8)
//UIAction_SetDatafieldValue[0x1035EFE0]
class UUIAction_SetDatafieldValue : public UUIAction_DataStoreField
{
public:
	struct FString                                     DataFieldStringValue;                             		// 0x0000C8 (0x000C)              
	class USurface*                                    DataFieldImageValue;                              		// 0x0000D4 (0x0004)              
	TArray<int>                                        DataFieldArrayValue;                              		// 0x0000D8 (0x000C)              
	struct FUIRangeData                                DataFieldRangeValue;                              		// 0x0000E4 (0x0014)              
	unsigned long                                      bCommitValueImmediately : 1;                      		// 0x0000F8 (0x0004) [0x00000001] 
	class UObject*                                     DataFieldObjectValue;                             		// 0x0000FC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_SetDatafieldValue");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_SetDatafieldValue.GetObjClassVersion
};
UClass* UUIAction_SetDatafieldValue::pClassPointer = NULL;

//0x000044 (0x0000FC - 0x0000B8)
//UIAction_GetCellValue[0x1035EEB0]
class UUIAction_GetCellValue : public UUIAction_DataStore
{
public:
	int                                                CollectionIndex;                                  		// 0x0000B8 (0x0004)              
	struct FName                                       CellFieldName;                                    		// 0x0000BC (0x0008)              
	struct FString                                     CellFieldMarkup;                                  		// 0x0000C4 (0x000C)              
	struct FString                                     CellFieldStringValue;                             		// 0x0000D0 (0x000C)              
	class USurface*                                    CellFieldImageValue;                              		// 0x0000DC (0x0004)              
	struct FUIRangeData                                CellFieldRangeValue;                              		// 0x0000E0 (0x0014)              
	struct FUniqueNetId                                CellFieldNetIdValue;                              		// 0x0000F4 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetCellValue");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_GetCellValue.GetObjClassVersion
};
UClass* UUIAction_GetCellValue::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//UIAction_PublishValue[0x1035ED80]
class UUIAction_PublishValue : public UUIAction_DataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_PublishValue");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIAction_PublishValue.IsValidUISequenceObject
};
UClass* UUIAction_PublishValue::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//UIAction_RefreshBindingValue[0x1035EC50]
class UUIAction_RefreshBindingValue : public UUIAction_DataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_RefreshBindingValue");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIAction_RefreshBindingValue.IsValidUISequenceObject
};
UClass* UUIAction_RefreshBindingValue::pClassPointer = NULL;

//0x000018 (0x0000CC - 0x0000B4)
//UIAction_DisplaySurvey[0x1035EB20]
class UUIAction_DisplaySurvey : public UUIAction
{
public:
	struct FString                                     QuestionId;                                       		// 0x0000B4 (0x000C)              
	struct FString                                     QuestionContext;                                  		// 0x0000C0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_DisplaySurvey");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_DisplaySurvey.GetObjClassVersion
};
UClass* UUIAction_DisplaySurvey::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_FindOnlineGames[0x1035E9F0]
class UUIAction_FindOnlineGames : public UUIAction
{
public:
	struct FName                                       DataStoreName;                                    		// 0x0000B4 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_FindOnlineGames");
		return pClassPointer;
	};
};
UClass* UUIAction_FindOnlineGames::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_FocusActions[0x1035E8C0]
class UUIAction_FocusActions : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_FocusActions");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_FocusActions.GetObjClassVersion
};
UClass* UUIAction_FocusActions::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_GetFocused[0x1035E790]
class UUIAction_GetFocused : public UUIAction_FocusActions
{
public:
	class UUIScreenObject*                             FocusedChild;                                     		// 0x0000B4 (0x0004)              
	unsigned long                                      bRecursiveSearch : 1;                             		// 0x0000B8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetFocused");
		return pClassPointer;
	};
};
UClass* UUIAction_GetFocused::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_GetLastFocused[0x1035E660]
class UUIAction_GetLastFocused : public UUIAction_FocusActions
{
public:
	class UUIScreenObject*                             LastFocused;                                      		// 0x0000B4 (0x0004)              
	unsigned long                                      bRecursiveSearch : 1;                             		// 0x0000B8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetLastFocused");
		return pClassPointer;
	};
};
UClass* UUIAction_GetLastFocused::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_SetFocus[0x1035E530]
class UUIAction_SetFocus : public UUIAction_FocusActions
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_SetFocus");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_SetFocus.GetObjClassVersion
};
UClass* UUIAction_SetFocus::pClassPointer = NULL;

//0x000004 (0x0000B8 - 0x0000B4)
//UIAction_GetListItemCount[0x1035E400]
class UUIAction_GetListItemCount : public UUIAction
{
public:
	int                                                ItemCount;                                        		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetListItemCount");
		return pClassPointer;
	};
};
UClass* UUIAction_GetListItemCount::pClassPointer = NULL;

//0x000010 (0x0000C4 - 0x0000B4)
//UIAction_GetLoggedInPlayerCount[0x1035E2D0]
class UUIAction_GetLoggedInPlayerCount : public UUIAction
{
public:
	int                                                TotalLoggedIn;                                    		// 0x0000B4 (0x0004)              
	int                                                NumOnlineEnabled;                                 		// 0x0000B8 (0x0004)              
	int                                                NumLocalOnly;                                     		// 0x0000BC (0x0004)              
	int                                                MaxPlayers;                                       		// 0x0000C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetLoggedInPlayerCount");
		return pClassPointer;
	};

public:
	void GetLoginStatus();//Engine.UIAction_GetLoggedInPlayerCount.GetLoginStatus
};
UClass* UUIAction_GetLoggedInPlayerCount::pClassPointer = NULL;

//0x000004 (0x0000B8 - 0x0000B4)
//UIAction_GetNATType[0x1035E1A0]
class UUIAction_GetNATType : public UUIAction
{
public:
	unsigned long                                      bAlwaysOpen : 1;                                  		// 0x0000B4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetNATType");
		return pClassPointer;
	};

public:
	bool GetNATType(unsigned char* OutNATType);//Engine.UIAction_GetNATType.GetNATType
};
UClass* UUIAction_GetNATType::pClassPointer = NULL;

//0x000005 (0x0000B9 - 0x0000B4)
//UIAction_GetPrivilegeLevel[0x1035E070]
class UUIAction_GetPrivilegeLevel : public UUIAction
{
public:
	int                                                PlayerID;                                         		// 0x0000B4 (0x0004)              
	unsigned char                                      PrivMode;                                         		// 0x0000B8 (0x0001)              PROPERTY: EFeaturePrivilegeMode

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetPrivilegeLevel");
		return pClassPointer;
	};

public:
	unsigned char GetPrivilegeLevel(int ControllerId);//Engine.UIAction_GetPrivilegeLevel.GetPrivilegeLevel
};
UClass* UUIAction_GetPrivilegeLevel::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_GetValue[0x1035DF40]
class UUIAction_GetValue : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetValue");
		return pClassPointer;
	};
};
UClass* UUIAction_GetValue::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_GetListIndex[0x1035DE10]
class UUIAction_GetListIndex : public UUIAction_GetValue
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetListIndex");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_GetListIndex.GetObjClassVersion
};
UClass* UUIAction_GetListIndex::pClassPointer = NULL;

//0x000010 (0x0000C4 - 0x0000B4)
//UIAction_JoinOnlineGame[0x1035DCE0]
class UUIAction_JoinOnlineGame : public UUIAction
{
public:
	struct FOnlineGameSearchResult                     PendingGameJoin;                                  		// 0x0000B4 (0x0008)              
	class AWorldInfo*                                  CachedWorldInfo;                                  		// 0x0000BC (0x0004)              
	unsigned long                                      bIsDone : 1;                                      		// 0x0000C0 (0x0004) [0x00000001] 
	unsigned long                                      bResult : 1;                                      		// 0x0000C0 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_JoinOnlineGame");
		return pClassPointer;
	};

public:
	struct FString BuildJoinURL(struct FString ResolvedConnectionURL);//Engine.UIAction_JoinOnlineGame.BuildJoinURL
	void JoinOnlineGame(unsigned char ControllerId,struct FOnlineGameSearchResult GameToJoin,class AWorldInfo* InWorldInfo);//Engine.UIAction_JoinOnlineGame.JoinOnlineGame
	void OnJoinGameComplete(struct FName SessionName,bool bWasSuccessful);//Engine.UIAction_JoinOnlineGame.OnJoinGameComplete
};
UClass* UUIAction_JoinOnlineGame::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_MoveListItem[0x1035DBB0]
class UUIAction_MoveListItem : public UUIAction
{
public:
	int                                                ElementIndex;                                     		// 0x0000B4 (0x0004)              
	int                                                MoveCount;                                        		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_MoveListItem");
		return pClassPointer;
	};
};
UClass* UUIAction_MoveListItem::pClassPointer = NULL;

//0x000010 (0x0000C4 - 0x0000B4)
//UIAction_PlayUISoundCue[0x1035DA80]
class UUIAction_PlayUISoundCue : public UUIAction
{
public:
	struct FEnumeratedName                             SoundCueName;                                     		// 0x0000B4 (0x0010)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_PlayUISoundCue");
		return pClassPointer;
	};
};
UClass* UUIAction_PlayUISoundCue::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_RefreshStats[0x1035D950]
class UUIAction_RefreshStats : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_RefreshStats");
		return pClassPointer;
	};
};
UClass* UUIAction_RefreshStats::pClassPointer = NULL;

//0x000004 (0x0000B8 - 0x0000B4)
//UIAction_SaveProfileSettings[0x1035D820]
class UUIAction_SaveProfileSettings : public UUIAction
{
public:
	unsigned long                                      bIsDone : 1;                                      		// 0x0000B4 (0x0004) [0x00000001] 
	unsigned long                                      bWroteProfile : 1;                                		// 0x0000B4 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_SaveProfileSettings");
		return pClassPointer;
	};

public:
	void OnProfileWriteComplete(unsigned char LocalUserNum,bool bWasSuccessful);//Engine.UIAction_SaveProfileSettings.OnProfileWriteComplete
	void ClearDelegate();//Engine.UIAction_SaveProfileSettings.ClearDelegate
	void RegisterDelegate();//Engine.UIAction_SaveProfileSettings.RegisterDelegate
};
UClass* UUIAction_SaveProfileSettings::pClassPointer = NULL;

//0x000004 (0x0000B8 - 0x0000B4)
//UIAction_Scene[0x1035D6F0]
class UUIAction_Scene : public UUIAction
{
public:
	class UUIScene*                                    Scene;                                            		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_Scene");
		return pClassPointer;
	};

public:
	bool IsValidLevelSequenceObject();//Engine.UIAction_Scene.IsValidLevelSequenceObject
};
UClass* UUIAction_Scene::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//UIAction_CloseScene[0x1035D5C0]
class UUIAction_CloseScene : public UUIAction_Scene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_CloseScene");
		return pClassPointer;
	};
};
UClass* UUIAction_CloseScene::pClassPointer = NULL;

//0x00002C (0x0000E4 - 0x0000B8)
//UIAction_OpenScene[0x1035D490]
class UUIAction_OpenScene : public UUIAction_Scene
{
public:
	class UUIScene*                                    OpenedScene;                                      		// 0x0000B8 (0x0004)              
	unsigned long                                      AllowMultipleCopies : 1;                          		// 0x0000BC (0x0004) [0x00000001] 
	struct FString                                     m_sCallbackDataStoreTag;                          		// 0x0000C0 (0x000C)              
	struct FString                                     m_sCallbackFunction_Activated;                    		// 0x0000CC (0x000C)              
	struct FString                                     m_sCallbackFunction_Deactivated;                  		// 0x0000D8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_OpenScene");
		return pClassPointer;
	};
};
UClass* UUIAction_OpenScene::pClassPointer = NULL;

//0x000018 (0x0000CC - 0x0000B4)
//UIAction_ShowDeviceSelectionUI[0x1035D360]
class UUIAction_ShowDeviceSelectionUI : public UUIAction
{
public:
	int                                                SizeNeeded;                                       		// 0x0000B4 (0x0004)              
	unsigned long                                      bForceShowUI : 1;                                 		// 0x0000B8 (0x0004) [0x00000001] 
	unsigned long                                      bIsDone : 1;                                      		// 0x0000B8 (0x0004) [0x00000002] 
	unsigned long                                      bResult : 1;                                      		// 0x0000B8 (0x0004) [0x00000004] 
	int                                                DeviceID;                                         		// 0x0000BC (0x0004)              
	struct FString                                     DeviceName;                                       		// 0x0000C0 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowDeviceSelectionUI");
		return pClassPointer;
	};

public:
	void OnDeviceSelectionComplete(bool bWasSuccessful);//Engine.UIAction_ShowDeviceSelectionUI.OnDeviceSelectionComplete
	void WriteToVariables();//Engine.UIAction_ShowDeviceSelectionUI.WriteToVariables
	void SelectDevice();//Engine.UIAction_ShowDeviceSelectionUI.SelectDevice
};
UClass* UUIAction_ShowDeviceSelectionUI::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_ShowGamercardForServerHost[0x1035D230]
class UUIAction_ShowGamercardForServerHost : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowGamercardForServerHost");
		return pClassPointer;
	};
};
UClass* UUIAction_ShowGamercardForServerHost::pClassPointer = NULL;

//0x000040 (0x0000F4 - 0x0000B4)
//UIAction_ShowKeyboardUI[0x1035D100]
class UUIAction_ShowKeyboardUI : public UUIAction
{
public:
	struct FString                                     TitleText;                                        		// 0x0000B4 (0x000C)              
	struct FString                                     DefaultText;                                      		// 0x0000C0 (0x000C)              
	struct FString                                     DescriptionText;                                  		// 0x0000CC (0x000C)              
	unsigned long                                      bShouldValidate : 1;                              		// 0x0000D8 (0x0004) [0x00000001] 
	unsigned long                                      bIsPassword : 1;                                  		// 0x0000D8 (0x0004) [0x00000002] 
	unsigned long                                      bIsDone : 1;                                      		// 0x0000D8 (0x0004) [0x00000004] 
	struct FString                                     StringReturnValue;                                		// 0x0000DC (0x000C)              
	struct FString                                     TempStringReturnValue;                            		// 0x0000E8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowKeyboardUI");
		return pClassPointer;
	};

public:
	void OnKeyboardInputDone(bool bWasSuccessful);//Engine.UIAction_ShowKeyboardUI.OnKeyboardInputDone
	int GetObjClassVersion();//Engine.UIAction_ShowKeyboardUI.GetObjClassVersion
	void ReadKeyboardInput();//Engine.UIAction_ShowKeyboardUI.ReadKeyboardInput
};
UClass* UUIAction_ShowKeyboardUI::pClassPointer = NULL;

//0x000004 (0x0000B8 - 0x0000B4)
//UIAction_ShowLoginUI[0x1035CFD0]
class UUIAction_ShowLoginUI : public UUIAction
{
public:
	unsigned long                                      bIsDone : 1;                                      		// 0x0000B4 (0x0004) [0x00000001] 
	unsigned long                                      bShowOnlineOnly : 1;                              		// 0x0000B4 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowLoginUI");
		return pClassPointer;
	};

public:
	void ShowUI();//Engine.UIAction_ShowLoginUI.ShowUI
	void OnLoginCancelled();//Engine.UIAction_ShowLoginUI.OnLoginCancelled
	void OnLoginChanged(unsigned char LocalUserNum);//Engine.UIAction_ShowLoginUI.OnLoginChanged
};
UClass* UUIAction_ShowLoginUI::pClassPointer = NULL;

//0x000000 (0x000094 - 0x000094)
//UICond_IsFocused[0x1035CEA0]
class UUICond_IsFocused : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UICond_IsFocused");
		return pClassPointer;
	};

public:
	bool IsValidLevelSequenceObject();//Engine.UICond_IsFocused.IsValidLevelSequenceObject
};
UClass* UUICond_IsFocused::pClassPointer = NULL;

//0x000018 (0x0000E0 - 0x0000C8)
//UIEvent[0x1035CD70]
class UUIEvent : public USequenceEvent
{
public:
	class UUIScreenObject*                             EventOwner;                                       		// 0x0000C8 (0x0004)              
	class UObject*                                     EventActivator;                                   		// 0x0000CC (0x0004)              
	unsigned long                                      bShouldRegisterEvent : 1;                         		// 0x0000D0 (0x0004) [0x00000001] 
	unsigned long                                      bPropagateEvent : 1;                              		// 0x0000D0 (0x0004) [0x00000002] 
	struct FScriptDelegate                             __AllowEventActivation__Delegate;                 		// 0x0000D4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent");
		return pClassPointer;
	};

public:
	bool CanBeActivated(int ControllerIndex,class UUIScreenObject* InEventOwner,class UObject* InEventActivator,bool bActivateImmediately,TArray<int>* IndicesToActivate);//Engine.UIEvent.CanBeActivated
	bool ActivateUIEvent(int ControllerIndex,class UUIScreenObject* InEventOwner,class UObject* InEventActivator,bool bActivateImmediately,TArray<int>* IndicesToActivate);//Engine.UIEvent.ActivateUIEvent
	bool IsValidLevelSequenceObject();//Engine.UIEvent.IsValidLevelSequenceObject
	class UUIScreenObject* GetOwner();//Engine.UIEvent.GetOwner
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent.IsValidUISequenceObject
	class UUIScene* GetOwnerScene();//Engine.UIEvent.GetOwnerScene
	bool ConditionalActivateUIEvent(int ControllerIndex,class UUIScreenObject* InEventOwner,class UObject* InEventActivator,bool bActivateImmediately,TArray<int>* IndicesToActivate);//Engine.UIEvent.ConditionalActivateUIEvent
	bool ShouldAlwaysInstance();//Engine.UIEvent.ShouldAlwaysInstance
	int GetObjClassVersion();//Engine.UIEvent.GetObjClassVersion
	bool AllowEventActivation(int ControllerIndex,class UUIScreenObject* InEventOwner,class UObject* InEventActivator,bool bActivateImmediately,TArray<int>* IndicesToActivate);//Engine.UIEvent.AllowEventActivation
};
UClass* UUIEvent::pClassPointer = NULL;

//0x000004 (0x0000E4 - 0x0000E0)
//UIEvent_CalloutButtonInputProxy[0x1035CC40]
class UUIEvent_CalloutButtonInputProxy : public UUIEvent
{
public:
	class UUICalloutButtonPanel*                       ButtonPanel;                                      		// 0x0000E0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_CalloutButtonInputProxy");
		return pClassPointer;
	};

public:
	bool ChangeButtonAlias(struct FName CurrentAliasName,struct FName NewAliasName);//Engine.UIEvent_CalloutButtonInputProxy.ChangeButtonAlias
	bool RegisterButtonAlias(struct FName ButtonAliasName);//Engine.UIEvent_CalloutButtonInputProxy.RegisterButtonAlias
	int GetObjClassVersion();//Engine.UIEvent_CalloutButtonInputProxy.GetObjClassVersion
	int FindButtonAliasIndex(struct FName ButtonAliasName);//Engine.UIEvent_CalloutButtonInputProxy.FindButtonAliasIndex
	bool UnregisterButtonAlias(struct FName ButtonAliasName);//Engine.UIEvent_CalloutButtonInputProxy.UnregisterButtonAlias
	bool IsPastingIntoUISequenceAllowed();//Engine.UIEvent_CalloutButtonInputProxy.IsPastingIntoUISequenceAllowed
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_CalloutButtonInputProxy.IsValidUISequenceObject
};
UClass* UUIEvent_CalloutButtonInputProxy::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_DynamicButton_OnMouseEnter[0x1035CB10]
class UUIEvent_DynamicButton_OnMouseEnter : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_DynamicButton_OnMouseEnter");
		return pClassPointer;
	};
};
UClass* UUIEvent_DynamicButton_OnMouseEnter::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_DynamicButton_OnMouseLeave[0x1035C9E0]
class UUIEvent_DynamicButton_OnMouseLeave : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_DynamicButton_OnMouseLeave");
		return pClassPointer;
	};
};
UClass* UUIEvent_DynamicButton_OnMouseLeave::pClassPointer = NULL;

//0x000004 (0x0000E4 - 0x0000E0)
//UIEvent_MetaObject[0x1035C8B0]
class UUIEvent_MetaObject : public UUIEvent
{
public:
	DWORD                                              VfTable_FCallbackEventDevice;                     		// 0x0000E0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_MetaObject");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_MetaObject.IsValidUISequenceObject
	bool IsPastingIntoUISequenceAllowed();//Engine.UIEvent_MetaObject.IsPastingIntoUISequenceAllowed
};
UClass* UUIEvent_MetaObject::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_OnClick[0x1035C780]
class UUIEvent_OnClick : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnClick");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnClick::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_OnDoubleClick[0x1035C650]
class UUIEvent_OnDoubleClick : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnDoubleClick");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnDoubleClick::pClassPointer = NULL;

//0x000008 (0x0000E8 - 0x0000E0)
//UIEvent_OnFocusChanged[0x1035C520]
class UUIEvent_OnFocusChanged : public UUIEvent
{
public:
	class UObject*                                     m_pOldFocussedWidget;                             		// 0x0000E0 (0x0004)              
	class UObject*                                     m_pNewFocussedWidget;                             		// 0x0000E4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnFocusChanged");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnFocusChanged::pClassPointer = NULL;

//0x000018 (0x0000F8 - 0x0000E0)
//UIEvent_OnListCellClicked[0x1035C3F0]
class UUIEvent_OnListCellClicked : public UUIEvent
{
public:
	struct FString                                     m_sCellName;                                      		// 0x0000E0 (0x000C)              
	int                                                m_nRow;                                           		// 0x0000EC (0x0004)              
	int                                                m_nColumn;                                        		// 0x0000F0 (0x0004)              
	unsigned long                                      m_bSortRowIndex : 1;                              		// 0x0000F4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnListCellClicked");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnListCellClicked::pClassPointer = NULL;

//0x000000 (0x0000F8 - 0x0000F8)
//UIEvent_OnListCellDoubleClicked[0x1035C2C0]
class UUIEvent_OnListCellDoubleClicked : public UUIEvent_OnListCellClicked
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnListCellDoubleClicked");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnListCellDoubleClicked::pClassPointer = NULL;

//0x000018 (0x0000F8 - 0x0000E0)
//UIEvent_OnListCellMouseOver[0x1035C190]
class UUIEvent_OnListCellMouseOver : public UUIEvent
{
public:
	struct FString                                     m_sCellName;                                      		// 0x0000E0 (0x000C)              
	int                                                m_nRow;                                           		// 0x0000EC (0x0004)              
	int                                                m_nColumn;                                        		// 0x0000F0 (0x0004)              
	unsigned long                                      m_bSortRowIndex : 1;                              		// 0x0000F4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnListCellMouseOver");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnListCellMouseOver::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_OnListSelectionChanged[0x1035C060]
class UUIEvent_OnListSelectionChanged : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnListSelectionChanged");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnListSelectionChanged::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_OnScrollDown[0x1035BF30]
class UUIEvent_OnScrollDown : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnScrollDown");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnScrollDown::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_OnScrollUp[0x1035BE00]
class UUIEvent_OnScrollUp : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnScrollUp");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnScrollUp::pClassPointer = NULL;

//0x00003C (0x00011C - 0x0000E0)
//UIEvent_ProcessInput[0x1035BCD0]
class UUIEvent_ProcessInput : public UUIEvent
{
public:
	struct FMultiMap_Mirror                            ActionMap;                                        		// 0x0000E0 (0x003C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_ProcessInput");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_ProcessInput.IsValidUISequenceObject
};
UClass* UUIEvent_ProcessInput::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_Scene[0x1035BBA0]
class UUIEvent_Scene : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_Scene");
		return pClassPointer;
	};
};
UClass* UUIEvent_Scene::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_ScrollbarPositionChanged[0x1035BA70]
class UUIEvent_ScrollbarPositionChanged : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_ScrollbarPositionChanged");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_ScrollbarPositionChanged.IsValidUISequenceObject
};
UClass* UUIEvent_ScrollbarPositionChanged::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_State[0x1035B940]
class UUIEvent_State : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_State");
		return pClassPointer;
	};
};
UClass* UUIEvent_State::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_OnEnterState[0x1035B810]
class UUIEvent_OnEnterState : public UUIEvent_State
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnEnterState");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnEnterState::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_OnLeaveState[0x1035B6E0]
class UUIEvent_OnLeaveState : public UUIEvent_State
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OnLeaveState");
		return pClassPointer;
	};
};
UClass* UUIEvent_OnLeaveState::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_SubmitData[0x1035B5B0]
class UUIEvent_SubmitData : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_SubmitData");
		return pClassPointer;
	};
};
UClass* UUIEvent_SubmitData::pClassPointer = NULL;

//0x000004 (0x0000E4 - 0x0000E0)
//UIEvent_SubmitListData[0x1035B480]
class UUIEvent_SubmitListData : public UUIEvent_SubmitData
{
public:
	int                                                SelectedItem;                                     		// 0x0000E0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_SubmitListData");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_SubmitListData.IsValidUISequenceObject
};
UClass* UUIEvent_SubmitListData::pClassPointer = NULL;

//0x000010 (0x0000F0 - 0x0000E0)
//UIEvent_SubmitTextData[0x1035B350]
class UUIEvent_SubmitTextData : public UUIEvent_SubmitData
{
public:
	struct FString                                     Value;                                            		// 0x0000E0 (0x000C)              
	unsigned long                                      bClearValue : 1;                                  		// 0x0000EC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_SubmitTextData");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_SubmitTextData.IsValidUISequenceObject
};
UClass* UUIEvent_SubmitTextData::pClassPointer = NULL;

//0x000004 (0x0000E4 - 0x0000E0)
//UIEvent_TabControl[0x1035B220]
class UUIEvent_TabControl : public UUIEvent
{
public:
	class UUITabControl*                               OwnerTabControl;                                  		// 0x0000E0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_TabControl");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_TabControl.IsValidUISequenceObject
};
UClass* UUIEvent_TabControl::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_ValueChanged[0x1035B0F0]
class UUIEvent_ValueChanged : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_ValueChanged");
		return pClassPointer;
	};
};
UClass* UUIEvent_ValueChanged::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_CheckValueChanged[0x1035AFC0]
class UUIEvent_CheckValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_CheckValueChanged");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_CheckValueChanged.IsValidUISequenceObject
};
UClass* UUIEvent_CheckValueChanged::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_ComboboxValueChanged[0x1035AE90]
class UUIEvent_ComboboxValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_ComboboxValueChanged");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_ComboboxValueChanged.IsValidUISequenceObject
};
UClass* UUIEvent_ComboboxValueChanged::pClassPointer = NULL;

//0x000008 (0x0000E8 - 0x0000E0)
//UIEvent_ListIndexChanged[0x1035AD60]
class UUIEvent_ListIndexChanged : public UUIEvent_ValueChanged
{
public:
	int                                                PreviousIndex;                                    		// 0x0000E0 (0x0004)              
	int                                                CurrentIndex;                                     		// 0x0000E4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_ListIndexChanged");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_ListIndexChanged.IsValidUISequenceObject
};
UClass* UUIEvent_ListIndexChanged::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_NumericOptionListValueChanged[0x1035AC30]
class UUIEvent_NumericOptionListValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_NumericOptionListValueChanged");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_NumericOptionListValueChanged.IsValidUISequenceObject
};
UClass* UUIEvent_NumericOptionListValueChanged::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_OptionListValueChanged[0x1035AB00]
class UUIEvent_OptionListValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_OptionListValueChanged");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_OptionListValueChanged.IsValidUISequenceObject
};
UClass* UUIEvent_OptionListValueChanged::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_ProgressBarValueChanged[0x1035A9D0]
class UUIEvent_ProgressBarValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_ProgressBarValueChanged");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_ProgressBarValueChanged.IsValidUISequenceObject
};
UClass* UUIEvent_ProgressBarValueChanged::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_SliderValueChanged[0x1035A8A0]
class UUIEvent_SliderValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_SliderValueChanged");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_SliderValueChanged.IsValidUISequenceObject
};
UClass* UUIEvent_SliderValueChanged::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_TextValueChanged[0x1035A770]
class UUIEvent_TextValueChanged : public UUIEvent_ValueChanged
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_TextValueChanged");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIEvent_TextValueChanged.IsValidUISequenceObject
};
UClass* UUIEvent_TextValueChanged::pClassPointer = NULL;

//0x000014 (0x00007C - 0x000068)
//SeqVar_UIRange[0x1035A640]
class USeqVar_UIRange : public USequenceVariable
{
public:
	struct FUIRangeData                                RangeValue;                                       		// 0x000068 (0x0014)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_UIRange");
		return pClassPointer;
	};

public:
	bool IsValidLevelSequenceObject();//Engine.SeqVar_UIRange.IsValidLevelSequenceObject
};
UClass* USeqVar_UIRange::pClassPointer = NULL;

//0x000008 (0x000070 - 0x000068)
//SeqVar_UniqueNetId[0x1035A510]
class USeqVar_UniqueNetId : public USequenceVariable
{
public:
	struct FUniqueNetId                                NetIdValue;                                       		// 0x000068 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqVar_UniqueNetId");
		return pClassPointer;
	};

public:
	bool IsValidLevelSequenceObject();//Engine.SeqVar_UniqueNetId.IsValidLevelSequenceObject
};
UClass* USeqVar_UniqueNetId::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//Scene[0x1035A3E0]
class UScene : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Scene");
		return pClassPointer;
	};
};
UClass* UScene::pClassPointer = NULL;

//0x000144 (0x000194 - 0x000050)
//SoundNodeWave[0x1035A2B0]
class USoundNodeWave : public USoundNode
{
public:
	int                                                CompressionQuality;                               		// 0x000050 (0x0004)              
	unsigned long                                      bForceRealtimeDecompression : 1;                  		// 0x000054 (0x0004) [0x00000001] 
	unsigned long                                      bDynamicResource : 1;                             		// 0x000054 (0x0004) [0x00000002] 
	unsigned long                                      bOneTimeUse : 1;                                  		// 0x000054 (0x0004) [0x00000004] 
	unsigned long                                      bUseTTS : 1;                                      		// 0x000054 (0x0004) [0x00000008] 
	unsigned long                                      bMature : 1;                                      		// 0x000054 (0x0004) [0x00000010] 
	unsigned long                                      bAlwaysLocalise : 1;                              		// 0x000054 (0x0004) [0x00000020] 
	unsigned long                                      bManualWordWrap : 1;                              		// 0x000054 (0x0004) [0x00000040] 
	unsigned char                                      TTSSpeaker;                                       		// 0x000058 (0x0001)              PROPERTY: ETTSSpeaker
	unsigned char                                      DecompressionType;                                		// 0x000059 (0x0001)              PROPERTY: EDecompressionType
	unsigned char                                      _0x00005A[0x2];                                   		// 0x00005A (0x0002) MISSED OFFSET
	struct FString                                     SpokenText;                                       		// 0x00005C (0x000C)              
	float                                              Volume;                                           		// 0x000068 (0x0004)              
	float                                              Pitch;                                            		// 0x00006C (0x0004)              
	float                                              Duration;                                         		// 0x000070 (0x0004)              
	int                                                NumChannels;                                      		// 0x000074 (0x0004)              
	int                                                SampleRate;                                       		// 0x000078 (0x0004)              
	int                                                SampleDataSize;                                   		// 0x00007C (0x0004)              
	struct FUntypedBulkData_Mirror                     RawData;                                          		// 0x000080 (0x0034)              
	DWORD                                              RawPCMData;                                       		// 0x0000B4 (0x0004)              
	DWORD                                              VorbisDecompressor;                               		// 0x0000B8 (0x0004)              
	TArray<unsigned char>                              PCMData;                                          		// 0x0000BC (0x000C)              
	struct FUntypedBulkData_Mirror                     CompressedPCData;                                 		// 0x0000C8 (0x0034)              
	struct FUntypedBulkData_Mirror                     CompressedXbox360Data;                            		// 0x0000FC (0x0034)              
	struct FUntypedBulkData_Mirror                     CompressedPS3Data;                                		// 0x000130 (0x0034)              
	int                                                ResourceID;                                       		// 0x000164 (0x0004)              
	int                                                ResourceSize;                                     		// 0x000168 (0x0004)              
	DWORD                                              ResourceData;                                     		// 0x00016C (0x0004)              
	TArray<struct FSubtitleCue>                        Subtitles;                                        		// 0x000170 (0x000C)              
	TArray<struct FMatureTimings>                      BleepTimings;                                     		// 0x00017C (0x000C)              
	struct FString                                     Comment;                                          		// 0x000188 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SoundNodeWave");
		return pClassPointer;
	};
};
UClass* USoundNodeWave::pClassPointer = NULL;

//0x000028 (0x0002C4 - 0x00029C)
//FoliageFactory[0x1035A180]
class AFoliageFactory : public AVolume
{
public:
	TArray<struct FFoliageMesh>                        Meshes;                                           		// 0x00029C (0x000C)              
	float                                              VolumeFalloffRadius;                              		// 0x0002A8 (0x0004)              
	float                                              VolumeFalloffExponent;                            		// 0x0002AC (0x0004)              
	float                                              SurfaceDensityUpFacing;                           		// 0x0002B0 (0x0004)              
	float                                              SurfaceDensityDownFacing;                         		// 0x0002B4 (0x0004)              
	float                                              SurfaceDensitySideFacing;                         		// 0x0002B8 (0x0004)              
	float                                              FacingFalloffExponent;                            		// 0x0002BC (0x0004)              
	int                                                MaxInstanceCount;                                 		// 0x0002C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FoliageFactory");
		return pClassPointer;
	};
};
UClass* AFoliageFactory::pClassPointer = NULL;

//0x00007C (0x00025C - 0x0001E0)
//FoliageComponent[0x1035A050]
class UFoliageComponent : public UPrimitiveComponent
{
public:
	TArray<struct FGatheredFoliageInstance>            Instances;                                        		// 0x0001E0 (0x000C)              
	TArray<struct FGuid>                               StaticallyRelevantLights;                         		// 0x0001EC (0x000C)              
	TArray<struct FGuid>                               StaticallyIrrelevantLights;                       		// 0x0001F8 (0x000C)              
	float                                              DirectionalStaticLightingScale[0x3];              		// 0x000204 (0x000C)              
	float                                              SimpleStaticLightingScale[0x3];                   		// 0x000210 (0x000C)              
	struct FGuid                                       ShadowMapGuid;                                    		// 0x00021C (0x0010)              
	class UStaticMesh*                                 InstanceStaticMesh;                               		// 0x00022C (0x0004)              
	class UMaterialInterface*                          Material;                                         		// 0x000230 (0x0004)              
	float                                              MaxDrawRadius;                                    		// 0x000234 (0x0004)              
	float                                              MinTransitionRadius;                              		// 0x000238 (0x0004)              
	float                                              MinThinningRadius;                                		// 0x00023C (0x0004)              
	FVector3                                           MinScale;                                         		// 0x000240 (0x000C)              
	FVector3                                           MaxScale;                                         		// 0x00024C (0x000C)              
	float                                              SwayScale;                                        		// 0x000258 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FoliageComponent");
		return pClassPointer;
	};
};
UClass* UFoliageComponent::pClassPointer = NULL;

//0x00000C (0x00026C - 0x000260)
//FluidInfluenceActor[0x10359F20]
class AFluidInfluenceActor : public AActor
{
public:
	class UArrowComponent*                             FlowDirection;                                    		// 0x000260 (0x0004)              
	class USpriteComponent*                            Sprite;                                           		// 0x000264 (0x0004)              
	class UFluidInfluenceComponent*                    InfluenceComponent;                               		// 0x000268 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FluidInfluenceActor");
		return pClassPointer;
	};

public:
	void OnToggle(class USeqAct_Toggle* inAction);//Engine.FluidInfluenceActor.OnToggle
	bool OnSequenceAction(class USequenceAction* Action);//Engine.FluidInfluenceActor.OnSequenceAction
};
UClass* AFluidInfluenceActor::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//FluidSurfaceActor[0x10359DF0]
class AFluidSurfaceActor : public AActor
{
public:
	class UFluidSurfaceComponent*                      FluidComponent;                                   		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FluidSurfaceActor");
		return pClassPointer;
	};

public:
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//Engine.FluidSurfaceActor.Touch
};
UClass* AFluidSurfaceActor::pClassPointer = NULL;

//0x000058 (0x000238 - 0x0001E0)
//FluidInfluenceComponent[0x10359CC0]
class UFluidInfluenceComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x0001E0 (0x0004) [0x00000001] 
	unsigned long                                      RaindropFillEntireFluid : 1;                      		// 0x0001E0 (0x0004) [0x00000002] 
	class AFluidSurfaceActor*                          FluidActor;                                       		// 0x0001E4 (0x0004)              
	unsigned char                                      InfluenceType;                                    		// 0x0001E8 (0x0001)              PROPERTY: EInfluenceType
	unsigned char                                      _0x0001E9[0x3];                                   		// 0x0001E9 (0x0003) MISSED OFFSET
	float                                              WaveStrength;                                     		// 0x0001EC (0x0004)              
	float                                              WaveFrequency;                                    		// 0x0001F0 (0x0004)              
	float                                              WavePhase;                                        		// 0x0001F4 (0x0004)              
	float                                              WaveRadius;                                       		// 0x0001F8 (0x0004)              
	float                                              RaindropAreaRadius;                               		// 0x0001FC (0x0004)              
	float                                              RaindropRadius;                                   		// 0x000200 (0x0004)              
	float                                              RaindropStrength;                                 		// 0x000204 (0x0004)              
	float                                              RaindropRate;                                     		// 0x000208 (0x0004)              
	float                                              FlowSpeed;                                        		// 0x00020C (0x0004)              
	int                                                FlowNumRipples;                                   		// 0x000210 (0x0004)              
	float                                              FlowSideMotionRadius;                             		// 0x000214 (0x0004)              
	float                                              FlowWaveRadius;                                   		// 0x000218 (0x0004)              
	float                                              FlowStrength;                                     		// 0x00021C (0x0004)              
	float                                              FlowFrequency;                                    		// 0x000220 (0x0004)              
	float                                              SphereOuterRadius;                                		// 0x000224 (0x0004)              
	float                                              SphereInnerRadius;                                		// 0x000228 (0x0004)              
	float                                              SphereStrength;                                   		// 0x00022C (0x0004)              
	float                                              CurrentAngle;                                     		// 0x000230 (0x0004)              
	float                                              CurrentTimer;                                     		// 0x000234 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FluidInfluenceComponent");
		return pClassPointer;
	};
};
UClass* UFluidInfluenceComponent::pClassPointer = NULL;

//0x00007C (0x00025C - 0x0001E0)
//FluidSurfaceComponent[0x10359B90]
class UFluidSurfaceComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          FluidMaterial;                                    		// 0x0001E0 (0x0004)              
	int                                                LightMapResolution;                               		// 0x0001E4 (0x0004)              
	unsigned long                                      EnableVertexAnimation : 1;                        		// 0x0001E8 (0x0004) [0x00000001] 
	unsigned long                                      EnableDetailAnimation : 1;                        		// 0x0001E8 (0x0004) [0x00000002] 
	unsigned long                                      bPause : 1;                                       		// 0x0001E8 (0x0004) [0x00000004] 
	unsigned long                                      bShowNormals : 1;                                 		// 0x0001E8 (0x0004) [0x00000008] 
	unsigned long                                      bShowDetailPosition : 1;                          		// 0x0001E8 (0x0004) [0x00000010] 
	unsigned long                                      bShowDetailFluid : 1;                             		// 0x0001E8 (0x0004) [0x00000020] 
	unsigned long                                      bVisualizeDetailNormal : 1;                       		// 0x0001E8 (0x0004) [0x00000040] 
	unsigned long                                      bShowMainFluid : 1;                               		// 0x0001E8 (0x0004) [0x00000080] 
	unsigned long                                      bTestRipple : 1;                                  		// 0x0001E8 (0x0004) [0x00000100] 
	unsigned long                                      bTestRippleCenterOnDetail : 1;                    		// 0x0001E8 (0x0004) [0x00000200] 
	float                                              GridSpacing;                                      		// 0x0001EC (0x0004)              
	float                                              GPUTessellationFactor;                            		// 0x0001F0 (0x0004)              
	float                                              FluidDamping;                                     		// 0x0001F4 (0x0004)              
	float                                              FluidHeightScale;                                 		// 0x0001F8 (0x0004)              
	float                                              FluidUpdateRate;                                  		// 0x0001FC (0x0004)              
	float                                              ImpactForce;                                      		// 0x000200 (0x0004)              
	float                                              ContinuousForce;                                  		// 0x000204 (0x0004)              
	float                                              LightingContrast;                                 		// 0x000208 (0x0004)              
	class AActor*                                      DetailTarget;                                     		// 0x00020C (0x0004)              
	int                                                DetailResolution;                                 		// 0x000210 (0x0004)              
	float                                              DetailSize;                                       		// 0x000214 (0x0004)              
	float                                              DetailDamping;                                    		// 0x000218 (0x0004)              
	float                                              DetailTransfer;                                   		// 0x00021C (0x0004)              
	float                                              DetailHeightScale;                                		// 0x000220 (0x0004)              
	float                                              DetailUpdateRate;                                 		// 0x000224 (0x0004)              
	float                                              NormalLength;                                     		// 0x000228 (0x0004)              
	float                                              TestRippleSpeed;                                  		// 0x00022C (0x0004)              
	float                                              TestRippleFrequency;                              		// 0x000230 (0x0004)              
	float                                              TestRippleRadius;                                 		// 0x000234 (0x0004)              
	float                                              FluidWidth;                                       		// 0x000238 (0x0004)              
	float                                              FluidHeight;                                      		// 0x00023C (0x0004)              
	float                                              TestRippleTime;                                   		// 0x000240 (0x0004)              
	float                                              TestRippleAngle;                                  		// 0x000244 (0x0004)              
	TArray<unsigned char>                              ClampMap;                                         		// 0x000248 (0x000C)              
	struct FLightMapRef                                LightMap;                                         		// 0x000254 (0x0004)              
	DWORD                                              FluidSimulation;                                  		// 0x000258 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FluidSurfaceComponent");
		return pClassPointer;
	};

public:
	void SetDetailPosition(FVector3 WorldPos);//Engine.FluidSurfaceComponent.SetDetailPosition
	void ApplyForce(FVector3 WorldPos,float Strength,float Radius,bool bImpulse);//Engine.FluidSurfaceComponent.ApplyForce
};
UClass* UFluidSurfaceComponent::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//SpeedTreeActor[0x10359A60]
class ASpeedTreeActor : public AActor
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                               		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpeedTreeActor");
		return pClassPointer;
	};
};
UClass* ASpeedTreeActor::pClassPointer = NULL;

//0x000084 (0x000264 - 0x0001E0)
//SpeedTreeComponent[0x10359930]
class USpeedTreeComponent : public UPrimitiveComponent
{
public:
	class USpeedTree*                                  SpeedTree;                                        		// 0x0001E0 (0x0004)              
	unsigned long                                      bUseLeaves : 1;                                   		// 0x0001E4 (0x0004) [0x00000001] 
	unsigned long                                      bUseBranches : 1;                                 		// 0x0001E4 (0x0004) [0x00000002] 
	unsigned long                                      bUseFronds : 1;                                   		// 0x0001E4 (0x0004) [0x00000004] 
	unsigned long                                      bUseBillboards : 1;                               		// 0x0001E4 (0x0004) [0x00000008] 
	float                                              LodNearDistance;                                  		// 0x0001E8 (0x0004)              
	float                                              LodFarDistance;                                   		// 0x0001EC (0x0004)              
	float                                              LodLevelOverride;                                 		// 0x0001F0 (0x0004)              
	class UMaterialInterface*                          BranchMaterial;                                   		// 0x0001F4 (0x0004)              
	class UMaterialInterface*                          FrondMaterial;                                    		// 0x0001F8 (0x0004)              
	class UMaterialInterface*                          LeafMaterial;                                     		// 0x0001FC (0x0004)              
	class UMaterialInterface*                          BillboardMaterial;                                		// 0x000200 (0x0004)              
	TArray<struct FSpeedTreeStaticLight>               StaticLights;                                     		// 0x000204 (0x000C)              
	struct FLightMapRef                                BranchAndFrondLightMap;                           		// 0x000210 (0x0004)              
	struct FLightMapRef                                LeafMeshLightMap;                                 		// 0x000214 (0x0004)              
	struct FLightMapRef                                LeafCardLightMap;                                 		// 0x000218 (0x0004)              
	struct FLightMapRef                                BillboardLightMap;                                		// 0x00021C (0x0004)              
	FMatrix                                            RotationOnlyMatrix;                               		// 0x000220 (0x0040)              
	float                                              WindMatrixOffset;                                 		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpeedTreeComponent");
		return pClassPointer;
	};
};
UClass* USpeedTreeComponent::pClassPointer = NULL;

//0x000004 (0x00006C - 0x000068)
//SpeedTreeActorFactory[0x10359800]
class USpeedTreeActorFactory : public UActorFactory
{
public:
	class USpeedTree*                                  SpeedTree;                                        		// 0x000068 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpeedTreeActorFactory");
		return pClassPointer;
	};
};
UClass* USpeedTreeActorFactory::pClassPointer = NULL;

//0x000004 (0x000048 - 0x000044)
//SpeedTreeComponentFactory[0x103596D0]
class USpeedTreeComponentFactory : public UPrimitiveComponentFactory
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                               		// 0x000044 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpeedTreeComponentFactory");
		return pClassPointer;
	};
};
UClass* USpeedTreeComponentFactory::pClassPointer = NULL;

//0x000088 (0x0000C8 - 0x000040)
//SpeedTree[0x103595A0]
class USpeedTree : public UObject
{
public:
	DWORD                                              SRH;                                              		// 0x000040 (0x0004)              
	int                                                RandomSeed;                                       		// 0x000044 (0x0004)              
	float                                              Sink;                                             		// 0x000048 (0x0004)              
	float                                              LeafStaticShadowOpacity;                          		// 0x00004C (0x0004)              
	class UMaterialInterface*                          BranchMaterial;                                   		// 0x000050 (0x0004)              
	class UMaterialInterface*                          FrondMaterial;                                    		// 0x000054 (0x0004)              
	class UMaterialInterface*                          LeafMaterial;                                     		// 0x000058 (0x0004)              
	class UMaterialInterface*                          BillboardMaterial;                                		// 0x00005C (0x0004)              
	float                                              MaxBendAngle;                                     		// 0x000060 (0x0004)              
	float                                              BranchExponent;                                   		// 0x000064 (0x0004)              
	float                                              LeafExponent;                                     		// 0x000068 (0x0004)              
	float                                              Response;                                         		// 0x00006C (0x0004)              
	float                                              ResponseLimiter;                                  		// 0x000070 (0x0004)              
	float                                              Gusting_MinStrength;                              		// 0x000074 (0x0004)              
	float                                              Gusting_MaxStrength;                              		// 0x000078 (0x0004)              
	float                                              Gusting_Frequency;                                		// 0x00007C (0x0004)              
	float                                              Gusting_MinDuration;                              		// 0x000080 (0x0004)              
	float                                              Gusting_MaxDuration;                              		// 0x000084 (0x0004)              
	float                                              BranchHorizontal_LowWindAngle;                    		// 0x000088 (0x0004)              
	float                                              BranchHorizontal_LowWindSpeed;                    		// 0x00008C (0x0004)              
	float                                              BranchHorizontal_HighWindAngle;                   		// 0x000090 (0x0004)              
	float                                              BranchHorizontal_HighWindSpeed;                   		// 0x000094 (0x0004)              
	float                                              BranchVertical_LowWindAngle;                      		// 0x000098 (0x0004)              
	float                                              BranchVertical_LowWindSpeed;                      		// 0x00009C (0x0004)              
	float                                              BranchVertical_HighWindAngle;                     		// 0x0000A0 (0x0004)              
	float                                              BranchVertical_HighWindSpeed;                     		// 0x0000A4 (0x0004)              
	float                                              LeafRocking_LowWindAngle;                         		// 0x0000A8 (0x0004)              
	float                                              LeafRocking_LowWindSpeed;                         		// 0x0000AC (0x0004)              
	float                                              LeafRocking_HighWindAngle;                        		// 0x0000B0 (0x0004)              
	float                                              LeafRocking_HighWindSpeed;                        		// 0x0000B4 (0x0004)              
	float                                              LeafRustling_LowWindAngle;                        		// 0x0000B8 (0x0004)              
	float                                              LeafRustling_LowWindSpeed;                        		// 0x0000BC (0x0004)              
	float                                              LeafRustling_HighWindAngle;                       		// 0x0000C0 (0x0004)              
	float                                              LeafRustling_HighWindSpeed;                       		// 0x0000C4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SpeedTree");
		return pClassPointer;
	};
};
UClass* USpeedTree::pClassPointer = NULL;

//0x000008 (0x000268 - 0x000260)
//LensFlareSource[0x10359470]
class ALensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         LensFlareComp;                                    		// 0x000260 (0x0004)              
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x000264 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LensFlareSource");
		return pClassPointer;
	};

public:
	void SetColorParameter(struct FName ParameterName,struct FLinearColor Param);//Engine.LensFlareSource.SetColorParameter
	void SetVectorParameter(struct FName ParameterName,FVector3 Param);//Engine.LensFlareSource.SetVectorParameter
	void SetExtColorParameter(struct FName ParameterName,float Red,float Green,float Blue,float Alpha);//Engine.LensFlareSource.SetExtColorParameter
	void SetTemplate(class ULensFlare* NewTemplate);//Engine.LensFlareSource.SetTemplate
	void SetFloatParameter(struct FName ParameterName,float Param);//Engine.LensFlareSource.SetFloatParameter
	void OnToggle(class USeqAct_Toggle* Action);//Engine.LensFlareSource.OnToggle
	void SetActorParameter(struct FName ParameterName,class AActor* Param);//Engine.LensFlareSource.SetActorParameter
	bool OnSequenceAction(class USequenceAction* Action);//Engine.LensFlareSource.OnSequenceAction
};
UClass* ALensFlareSource::pClassPointer = NULL;

//0x000038 (0x000218 - 0x0001E0)
//LensFlareComponent[0x10359340]
class ULensFlareComponent : public UPrimitiveComponent
{
public:
	class ULensFlare*                                  Template;                                         		// 0x0001E0 (0x0004)              
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x0001E4 (0x0004)              
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x0001E8 (0x0004)              
	class UDrawLightRadiusComponent*                   PreviewRadius;                                    		// 0x0001EC (0x0004)              
	unsigned long                                      bAutoActivate : 1;                                		// 0x0001F0 (0x0004) [0x00000001] 
	unsigned long                                      bIsActive : 1;                                    		// 0x0001F0 (0x0004) [0x00000002] 
	unsigned long                                      bHasTranslucency : 1;                             		// 0x0001F0 (0x0004) [0x00000004] 
	unsigned long                                      bHasUnlitTranslucency : 1;                        		// 0x0001F0 (0x0004) [0x00000008] 
	unsigned long                                      bHasUnlitDistortion : 1;                          		// 0x0001F0 (0x0004) [0x00000010] 
	unsigned long                                      bUsesSceneColor : 1;                              		// 0x0001F0 (0x0004) [0x00000020] 
	float                                              OuterCone;                                        		// 0x0001F4 (0x0004)              
	float                                              InnerCone;                                        		// 0x0001F8 (0x0004)              
	float                                              ConeFudgeFactor;                                  		// 0x0001FC (0x0004)              
	float                                              Radius;                                           		// 0x000200 (0x0004)              
	struct FLinearColor                                SourceColor;                                      		// 0x000204 (0x0010)              
	DWORD                                              ReleaseResourcesFence;                            		// 0x000214 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LensFlareComponent");
		return pClassPointer;
	};

public:
	void SetIsActive(bool bInIsActive);//Engine.LensFlareComponent.SetIsActive
	void SetSourceColor(struct FLinearColor InSourceColor);//Engine.LensFlareComponent.SetSourceColor
	void SetTemplate(class ULensFlare* NewTemplate);//Engine.LensFlareComponent.SetTemplate
};
UClass* ULensFlareComponent::pClassPointer = NULL;

//0x0001BC (0x0001FC - 0x000040)
//LensFlare[0x10359210]
class ULensFlare : public UObject
{
public:
	struct FLensFlareElement                           SourceElement;                                    		// 0x000040 (0x0140)              
	class UStaticMesh*                                 SourceMesh;                                       		// 0x000180 (0x0004)              
	unsigned char                                      SourceDPG;                                        		// 0x000184 (0x0001)              PROPERTY: ESceneDepthPriorityGroup
	unsigned char                                      ReflectionsDPG;                                   		// 0x000185 (0x0001)              PROPERTY: ESceneDepthPriorityGroup
	unsigned char                                      _0x000186[0x2];                                   		// 0x000186 (0x0002) MISSED OFFSET
	TArray<struct FLensFlareElement>                   Reflections;                                      		// 0x000188 (0x000C)              
	float                                              OuterCone;                                        		// 0x000194 (0x0004)              
	float                                              InnerCone;                                        		// 0x000198 (0x0004)              
	float                                              ConeFudgeFactor;                                  		// 0x00019C (0x0004)              
	float                                              Radius;                                           		// 0x0001A0 (0x0004)              
	struct FRawDistributionFloat                       ScreenPercentageMap;                              		// 0x0001A4 (0x001C)              
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x0001C0 (0x0004) [0x00000001] 
	unsigned long                                      bRenderDebugLines : 1;                            		// 0x0001C0 (0x0004) [0x00000002] 
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x0001C0 (0x0004) [0x00000004] 
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x0001C4 (0x001C)              
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x0001E0 (0x0004)              
	int                                                ReflectionCount;                                  		// 0x0001E4 (0x0004)              
	FRotator                                           ThumbnailAngle;                                   		// 0x0001E8 (0x000C)              
	float                                              ThumbnailDistance;                                		// 0x0001F4 (0x0004)              
	class UTexture2D*                                  ThumbnailImage;                                   		// 0x0001F8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LensFlare");
		return pClassPointer;
	};
};
UClass* ULensFlare::pClassPointer = NULL;

//0x000114 (0x000158 - 0x000044)
//AudioDevice[0x103590E0]
class UAudioDevice : public USubsystem
{
public:
	int                                                MaxChannels;                                      		// 0x000044 (0x0004)              
	unsigned long                                      UseEffectsProcessing : 1;                         		// 0x000048 (0x0004) [0x00000001] 
	unsigned long                                      bGameWasTicking : 1;                              		// 0x000048 (0x0004) [0x00000002] 
	unsigned long                                      bTestLowPassFilter : 1;                           		// 0x000048 (0x0004) [0x00000004] 
	unsigned long                                      bDisableLowPassFilter : 1;                        		// 0x000048 (0x0004) [0x00000008] 
	unsigned long                                      bTestEQFilter : 1;                                		// 0x000048 (0x0004) [0x00000010] 
	unsigned long                                      bDisableEQFilter : 1;                             		// 0x000048 (0x0004) [0x00000020] 
	TArray<class UAudioComponent*>                     AudioComponents;                                  		// 0x00004C (0x000C)              
	TArray<DWORD>                                      Sources;                                          		// 0x000058 (0x000C)              
	TArray<DWORD>                                      FreeSources;                                      		// 0x000064 (0x000C)              
	struct FMap_Mirror                                 WaveInstanceSourceMap;                            		// 0x000070 (0x003C)              
	TArray<struct FListener>                           Listeners;                                        		// 0x0000AC (0x000C)              
	struct FQWord                                      CurrentTick;                                      		// 0x0000B8 (0x0008)              
	struct FMap_Mirror                                 NameToSoundGroupIndexMap;                         		// 0x0000C0 (0x003C)              
	TArray<struct FSoundGroup>                         SourceSoundGroups;                                		// 0x0000FC (0x000C)              
	TArray<struct FSoundGroup>                         CurrentSoundGroups;                               		// 0x000108 (0x000C)              
	TArray<struct FSoundGroup>                         DestinationSoundGroups;                           		// 0x000114 (0x000C)              
	TArray<struct FSoundGroup>                         SoundGroups;                                      		// 0x000120 (0x000C)              
	TArray<struct FSoundGroupEffect>                   SoundGroupEffects;                                		// 0x00012C (0x000C)              
	DWORD                                              Effects;                                          		// 0x000138 (0x0004)              
	unsigned char                                      CurrentMode;                                      		// 0x00013C (0x0001)              PROPERTY: ESoundMode
	unsigned char                                      _0x00013D[0x3];                                   		// 0x00013D (0x0003) MISSED OFFSET
	double                                             SoundModeStartTime;                               		// 0x000140 (0x0008)              
	double                                             SoundModeEndTime;                                 		// 0x000148 (0x0008)              
	DWORD                                              TextToSpeech;                                     		// 0x000150 (0x0004)              
	float                                              TransientMasterVolume;                            		// 0x000154 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AudioDevice");
		return pClassPointer;
	};

public:
	void SetSoundMode(unsigned char NewSoundMode,float FadeTime);//Engine.AudioDevice.SetSoundMode
};
UClass* UAudioDevice::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//CloudStorageUpgradeHelper[0x10358FB0]
class UCloudStorageUpgradeHelper : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CloudStorageUpgradeHelper");
		return pClassPointer;
	};

public:
	void HandleLocalDocument(struct FString* DocName,int* bShouldMoveToCloud,int* bShouldDeleteLocalFile);//Engine.CloudStorageUpgradeHelper.HandleLocalDocument
	void GetCloudUpgradeKeys(TArray<struct FString>* CloudKeys);//Engine.CloudStorageUpgradeHelper.GetCloudUpgradeKeys
	void HandleLocalKeyValue(struct FString* CloudKeyName,struct FPlatformInterfaceData* CloudValue,int* bShouldMoveToCloud,int* bShouldDeleteLocalKey);//Engine.CloudStorageUpgradeHelper.HandleLocalKeyValue
};
UClass* UCloudStorageUpgradeHelper::pClassPointer = NULL;

//0x000018 (0x000058 - 0x000040)
//PlatformInterfaceBase[0x10358E80]
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                     		// 0x000040 (0x000C)              
	struct FScriptDelegate                             __PlatformInterfaceDelegate__Delegate;            		// 0x00004C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlatformInterfaceBase");
		return pClassPointer;
	};

public:
	class UCloudStorageBase* GetLocalStorageInterface();//Engine.PlatformInterfaceBase.GetLocalStorageInterface
	class UInGameAdManager* GetInGameAdManager();//Engine.PlatformInterfaceBase.GetInGameAdManager
	class UTwitterIntegrationBase* GetTwitterIntegration();//Engine.PlatformInterfaceBase.GetTwitterIntegration
	void ClearDelegate(int DelegateType,struct FScriptDelegate InDelegate);//Engine.PlatformInterfaceBase.ClearDelegate
	void AddDelegate(int DelegateType,struct FScriptDelegate InDelegate);//Engine.PlatformInterfaceBase.AddDelegate
	class UCloudStorageBase* GetCloudStorageInterface();//Engine.PlatformInterfaceBase.GetCloudStorageInterface
	class UAnalyticEventsBase* GetAnalyticEventsInterface();//Engine.PlatformInterfaceBase.GetAnalyticEventsInterface
	class UInAppMessageBase* GetInAppMessageInterface();//Engine.PlatformInterfaceBase.GetInAppMessageInterface
	void CallDelegates(int DelegateType,struct FPlatformInterfaceDelegateResult* DelegateResult);//Engine.PlatformInterfaceBase.CallDelegates
	class UAppNotificationsBase* GetAppNotificationsInterface();//Engine.PlatformInterfaceBase.GetAppNotificationsInterface
	void PlatformInterfaceDelegate(struct FPlatformInterfaceDelegateResult* Result);//Engine.PlatformInterfaceBase.PlatformInterfaceDelegate
	class UMicroTransactionBase* GetMicroTransactionInterface();//Engine.PlatformInterfaceBase.GetMicroTransactionInterface
	class UFacebookIntegration* GetFacebookIntegration();//Engine.PlatformInterfaceBase.GetFacebookIntegration
};
UClass* UPlatformInterfaceBase::pClassPointer = NULL;

//0x000014 (0x00006C - 0x000058)
//AnalyticEventsBase[0x10358D50]
class UAnalyticEventsBase : public UPlatformInterfaceBase
{
public:
	unsigned long                                      bSessionInProgress : 1;                           		// 0x000058 (0x0004) [0x00000001] 
	unsigned long                                      bAutoStartSession : 1;                            		// 0x000058 (0x0004) [0x00000002] 
	int                                                SessionPauseThresholdSec;                         		// 0x00005C (0x0004)              
	struct FString                                     UserId;                                           		// 0x000060 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnalyticEventsBase");
		return pClassPointer;
	};

public:
	void LogErrorMessage(struct FString ErrorName,struct FString ErrorMessage);//Engine.AnalyticEventsBase.LogErrorMessage
	void LogCurrencyPurchaseEvent(struct FString GameCurrencyType,int GameCurrencyAmount,struct FString RealCurrencyType,float RealMoneyCost,struct FString PaymentProvider);//Engine.AnalyticEventsBase.LogCurrencyPurchaseEvent
	bool IsSessionInProgress();//Engine.AnalyticEventsBase.IsSessionInProgress
	void StartSession();//Engine.AnalyticEventsBase.StartSession
	void SendCachedEvents();//Engine.AnalyticEventsBase.SendCachedEvents
	void LogStringEventParam(struct FString EventName,struct FString ParamName,struct FString ParamValue,bool bTimed);//Engine.AnalyticEventsBase.LogStringEventParam
	void LogUserAttributeUpdateArray(TArray<struct FEventStringParam> AttributeArray);//Engine.AnalyticEventsBase.LogUserAttributeUpdateArray
	void EndStringEvent(struct FString EventName);//Engine.AnalyticEventsBase.EndStringEvent
	void LogStringEventParamArray(struct FString EventName,TArray<struct FEventStringParam> ParamArray,bool bTimed);//Engine.AnalyticEventsBase.LogStringEventParamArray
	void EndStringEventParamArray(struct FString EventName,TArray<struct FEventStringParam> ParamArray);//Engine.AnalyticEventsBase.EndStringEventParamArray
	void LogCurrencyGivenEvent(struct FString GameCurrencyType,int GameCurrencyAmount);//Engine.AnalyticEventsBase.LogCurrencyGivenEvent
	void EndSession();//Engine.AnalyticEventsBase.EndSession
	void Init();//Engine.AnalyticEventsBase.Init
	void LogItemPurchaseEvent(struct FString ItemId,struct FString Currency,int PerItemCost,int ItemQuantity);//Engine.AnalyticEventsBase.LogItemPurchaseEvent
	void SetUserId(struct FString NewUserId);//Engine.AnalyticEventsBase.SetUserId
	void EndStringEventParam(struct FString EventName,struct FString ParamName,struct FString ParamValue);//Engine.AnalyticEventsBase.EndStringEventParam
	void LogStringEvent(struct FString EventName,bool bTimed);//Engine.AnalyticEventsBase.LogStringEvent
	void LogUserAttributeUpdate(struct FString AttributeName,struct FString AttributeValue);//Engine.AnalyticEventsBase.LogUserAttributeUpdate
};
UClass* UAnalyticEventsBase::pClassPointer = NULL;

//0x00003C (0x000094 - 0x000058)
//AppNotificationsBase[0x10358C20]
class UAppNotificationsBase : public UPlatformInterfaceBase
{
public:
	struct FLaunchNotificationInfo                     AppLaunchNotification;                            		// 0x000058 (0x0024)              
	struct FScriptDelegate                             __OnReceivedLocalNotification__Delegate;          		// 0x00007C (0x000C)              
	struct FScriptDelegate                             __OnReceivedRemoteNotification__Delegate;         		// 0x000088 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AppNotificationsBase");
		return pClassPointer;
	};

public:
	bool WasLaunchedViaNotification();//Engine.AppNotificationsBase.WasLaunchedViaNotification
	void OnReceivedRemoteNotification(struct FNotificationInfo* Notification,bool bWasAppActive);//Engine.AppNotificationsBase.OnReceivedRemoteNotification
	void DebugLogNotification(struct FNotificationInfo* Notification);//Engine.AppNotificationsBase.DebugLogNotification
	void CancelAllScheduledLocalNotifications();//Engine.AppNotificationsBase.CancelAllScheduledLocalNotifications
	void ScheduleLocalNotification(struct FNotificationInfo* Notification,int StartOffsetSeconds);//Engine.AppNotificationsBase.ScheduleLocalNotification
	void OnReceivedLocalNotification(struct FNotificationInfo* Notification,bool bWasAppActive);//Engine.AppNotificationsBase.OnReceivedLocalNotification
	void Init();//Engine.AppNotificationsBase.Init
};
UClass* UAppNotificationsBase::pClassPointer = NULL;

//0x000010 (0x000068 - 0x000058)
//CloudStorageBase[0x10358AF0]
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                  		// 0x000058 (0x000C)              
	unsigned long                                      bSuppressDelegateCalls : 1;                       		// 0x000064 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CloudStorageBase");
		return pClassPointer;
	};

public:
	void DeleteAllCloudDocuments();//Engine.CloudStorageBase.DeleteAllCloudDocuments
	bool IsStillWritingFiles();//Engine.CloudStorageBase.IsStillWritingFiles
	struct FString GetCloudDocumentName(int Index);//Engine.CloudStorageBase.GetCloudDocumentName
	bool QueryForCloudDocuments();//Engine.CloudStorageBase.QueryForCloudDocuments
	bool SaveDocumentWithObject(int Index,class UObject* ObjectData,int SaveVersion);//Engine.CloudStorageBase.SaveDocumentWithObject
	bool ReadKeyValueFromLocalStore(struct FString KeyName,unsigned char Type,struct FPlatformInterfaceDelegateResult* Value);//Engine.CloudStorageBase.ReadKeyValueFromLocalStore
	int GetNumCloudDocuments(bool bIsForConflict);//Engine.CloudStorageBase.GetNumCloudDocuments
	void ParseDocumentAsBytes(int Index,TArray<unsigned char>* ByteData,bool bIsForConflict);//Engine.CloudStorageBase.ParseDocumentAsBytes
	bool WriteKeyValue(struct FString KeyName,struct FPlatformInterfaceData* Value);//Engine.CloudStorageBase.WriteKeyValue
	bool ReadCloudDocument(int Index,bool bIsForConflict);//Engine.CloudStorageBase.ReadCloudDocument
	bool WaitForWritesToFinish(float MaxTimeSeconds);//Engine.CloudStorageBase.WaitForWritesToFinish
	int CreateCloudDocument(struct FString Filename);//Engine.CloudStorageBase.CreateCloudDocument
	bool IsUsingLocalStorage();//Engine.CloudStorageBase.IsUsingLocalStorage
	bool UpgradeLocalStorageToCloud(class UCloudStorageUpgradeHelper* UpgradeHelper,bool bForceSearchAgain);//Engine.CloudStorageBase.UpgradeLocalStorageToCloud
	bool SaveDocumentWithBytes(int Index,TArray<unsigned char> ByteData);//Engine.CloudStorageBase.SaveDocumentWithBytes
	void Init();//Engine.CloudStorageBase.Init
	bool ResolveConflictWithNewestDocument();//Engine.CloudStorageBase.ResolveConflictWithNewestDocument
	bool ResolveConflictWithVersionIndex(int Index);//Engine.CloudStorageBase.ResolveConflictWithVersionIndex
	bool ReadKeyValue(struct FString KeyName,unsigned char Type,struct FPlatformInterfaceDelegateResult* Value);//Engine.CloudStorageBase.ReadKeyValue
	bool WriteCloudDocument(int Index);//Engine.CloudStorageBase.WriteCloudDocument
	bool SaveDocumentWithString(int Index,struct FString StringData);//Engine.CloudStorageBase.SaveDocumentWithString
	struct FString ParseDocumentAsString(int Index,bool bIsForConflict);//Engine.CloudStorageBase.ParseDocumentAsString
	class UObject* ParseDocumentAsObject(int Index,class UClass* ObjectClass,int ExpectedVersion,bool bIsForConflict);//Engine.CloudStorageBase.ParseDocumentAsObject
};
UClass* UCloudStorageBase::pClassPointer = NULL;

//0x000048 (0x0000A0 - 0x000058)
//FacebookIntegration[0x103589C0]
class UFacebookIntegration : public UPlatformInterfaceBase
{
public:
	struct FString                                     AppID;                                            		// 0x000058 (0x000C)              
	TArray<struct FString>                             Permissions;                                      		// 0x000064 (0x000C)              
	struct FString                                     UserName;                                         		// 0x000070 (0x000C)              
	struct FString                                     UserId;                                           		// 0x00007C (0x000C)              
	struct FString                                     AccessToken;                                      		// 0x000088 (0x000C)              
	TArray<struct FFacebookFriend>                     FriendsList;                                      		// 0x000094 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FacebookIntegration");
		return pClassPointer;
	};

public:
	void Disconnect();//Engine.FacebookIntegration.Disconnect
	bool IsAuthorized();//Engine.FacebookIntegration.IsAuthorized
	bool Init();//Engine.FacebookIntegration.Init
	void FacebookRequest(struct FString GraphRequest);//Engine.FacebookIntegration.FacebookRequest
	void FacebookDialog(struct FString Action,TArray<struct FString> ParamKeysAndValues);//Engine.FacebookIntegration.FacebookDialog
	bool Authorize();//Engine.FacebookIntegration.Authorize
};
UClass* UFacebookIntegration::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//InAppMessageBase[0x10358890]
class UInAppMessageBase : public UPlatformInterfaceBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InAppMessageBase");
		return pClassPointer;
	};

public:
	void Init();//Engine.InAppMessageBase.Init
	bool ShowInAppEmailUI(struct FString InitialSubject,struct FString InitialMessage);//Engine.InAppMessageBase.ShowInAppEmailUI
	bool ShowInAppSMSUI(struct FString InitialMessage);//Engine.InAppMessageBase.ShowInAppSMSUI
};
UClass* UInAppMessageBase::pClassPointer = NULL;

//0x000004 (0x00005C - 0x000058)
//InGameAdManager[0x10358760]
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned long                                      bShouldPauseWhileAdOpen : 1;                      		// 0x000058 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.InGameAdManager");
		return pClassPointer;
	};

public:
	void Init();//Engine.InGameAdManager.Init
	void HideBanner();//Engine.InGameAdManager.HideBanner
	void SetPauseWhileAdOpen(bool bShouldPause);//Engine.InGameAdManager.SetPauseWhileAdOpen
	void ShowBanner(bool bShowBottomOfScreen);//Engine.InGameAdManager.ShowBanner
	void ForceCloseAd();//Engine.InGameAdManager.ForceCloseAd
};
UClass* UInGameAdManager::pClassPointer = NULL;

//0x000024 (0x00007C - 0x000058)
//MicroTransactionBase[0x10358630]
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                		// 0x000058 (0x000C)              
	struct FString                                     LastError;                                        		// 0x000064 (0x000C)              
	struct FString                                     LastErrorSolution;                                		// 0x000070 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.MicroTransactionBase");
		return pClassPointer;
	};

public:
	void Init();//Engine.MicroTransactionBase.Init
	bool BeginPurchase(int Index);//Engine.MicroTransactionBase.BeginPurchase
	int GetProductIndex(struct FString Identifier);//Engine.MicroTransactionBase.GetProductIndex
	bool IsAllowedToMakePurchases();//Engine.MicroTransactionBase.IsAllowedToMakePurchases
	bool QueryForAvailablePurchases();//Engine.MicroTransactionBase.QueryForAvailablePurchases
};
UClass* UMicroTransactionBase::pClassPointer = NULL;

//0x000000 (0x000058 - 0x000058)
//TwitterIntegrationBase[0x10358500]
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TwitterIntegrationBase");
		return pClassPointer;
	};

public:
	struct FString GetAccountId(int AccountIndex);//Engine.TwitterIntegrationBase.GetAccountId
	bool CanShowTweetUI();//Engine.TwitterIntegrationBase.CanShowTweetUI
	bool ShowTweetUI(struct FString InitialMessage,struct FString URL,struct FString Picture);//Engine.TwitterIntegrationBase.ShowTweetUI
	int GetNumAccounts();//Engine.TwitterIntegrationBase.GetNumAccounts
	void Init();//Engine.TwitterIntegrationBase.Init
	struct FString GetAccountName(int AccountIndex);//Engine.TwitterIntegrationBase.GetAccountName
	bool AuthorizeAccounts();//Engine.TwitterIntegrationBase.AuthorizeAccounts
	bool TwitterRequest(struct FString URL,TArray<struct FString> ParamKeysAndValues,unsigned char RequestMethod,int AccountIndex);//Engine.TwitterIntegrationBase.TwitterRequest
};
UClass* UTwitterIntegrationBase::pClassPointer = NULL;

//0x000068 (0x0000A8 - 0x000040)
//PlatformInterfaceWebResponse[0x103583D0]
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                      		// 0x000040 (0x000C)              
	int                                                ResponseCode;                                     		// 0x00004C (0x0004)              
	int                                                Tag;                                              		// 0x000050 (0x0004)              
	struct FMap_Mirror                                 Headers;                                          		// 0x000054 (0x003C)              
	struct FString                                     StringResponse;                                   		// 0x000090 (0x000C)              
	TArray<unsigned char>                              BinaryResponse;                                   		// 0x00009C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PlatformInterfaceWebResponse");
		return pClassPointer;
	};

public:
	int GetNumHeaders();//Engine.PlatformInterfaceWebResponse.GetNumHeaders
	void GetHeader(int HeaderIndex,struct FString* Header,struct FString* Value);//Engine.PlatformInterfaceWebResponse.GetHeader
	struct FString GetHeaderValue(struct FString HeaderName);//Engine.PlatformInterfaceWebResponse.GetHeaderValue
};
UClass* UPlatformInterfaceWebResponse::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//SequenceInterface[0x103582A0]
class USequenceInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SequenceInterface");
		return pClassPointer;
	};

public:
	bool OnSequenceAction(class USequenceAction* Action);//Engine.SequenceInterface.OnSequenceAction
};
UClass* USequenceInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UpdatePropertyInterface[0x10358170]
class UUpdatePropertyInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UpdatePropertyInterface");
		return pClassPointer;
	};

public:
	void OnUpdateProperty(struct FName PropertyName);//Engine.UpdatePropertyInterface.OnUpdateProperty
};
UClass* UUpdatePropertyInterface::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//cToDManagerBase[0x10391EE0]
class AcToDManagerBase : public AReplicationInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cToDManagerBase");
		return pClassPointer;
	};
};
UClass* AcToDManagerBase::pClassPointer = NULL;

//0x0000D4 (0x000334 - 0x000260)
//AccessControl[0x10881A20]
class AAccessControl : public AInfo
{
public:
	TArray<struct FString>                             IPPolicies;                                       		// 0x000260 (0x000C)              
	TArray<struct FUniqueNetId>                        BannedIDs;                                        		// 0x00026C (0x000C)              
	struct FString                                     IPBanned;                                         		// 0x000278 (0x000C)              
	struct FString                                     WrongPassword;                                    		// 0x000284 (0x000C)              
	struct FString                                     NeedPassword;                                     		// 0x000290 (0x000C)              
	struct FString                                     SessionBanned;                                    		// 0x00029C (0x000C)              
	struct FString                                     KickedMsg;                                        		// 0x0002A8 (0x000C)              
	struct FString                                     DefaultKickReason;                                		// 0x0002B4 (0x000C)              
	struct FString                                     IdleKickReason;                                   		// 0x0002C0 (0x000C)              
	class UClass*                                      AdminClass;                                       		// 0x0002CC (0x0004)              
	struct FString                                     AdminPassword;                                    		// 0x0002D0 (0x000C)              
	struct FString                                     GamePassword;                                     		// 0x0002DC (0x000C)              
	struct FString                                     ACDisplayText[0x3];                               		// 0x0002E8 (0x0024)              
	struct FString                                     ACDescText[0x3];                                  		// 0x00030C (0x0024)              
	unsigned long                                      bDontAddDefaultAdmin : 1;                         		// 0x000330 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AccessControl");
		return pClassPointer;
	};

public:
	bool AdminLogout(class APlayerController* P);//Engine.AccessControl.AdminLogout
	bool SetAdminPassword(struct FString P);//Engine.AccessControl.SetAdminPassword
	bool CheckIPPolicy(struct FString Address);//Engine.AccessControl.CheckIPPolicy
	void AdminExited(class APlayerController* P);//Engine.AccessControl.AdminExited
	class AController* GetControllerFromString(struct FString Target);//Engine.AccessControl.GetControllerFromString
	bool AdminLogin(class APlayerController* P,struct FString Password);//Engine.AccessControl.AdminLogin
	void KickBan(struct FString Target);//Engine.AccessControl.KickBan
	void Kick(struct FString Target);//Engine.AccessControl.Kick
	bool ParseAdminOptions(struct FString Options);//Engine.AccessControl.ParseAdminOptions
	void AdminEntered(class APlayerController* P);//Engine.AccessControl.AdminEntered
	bool RequiresPassword();//Engine.AccessControl.RequiresPassword
	void SetGamePassword(struct FString P);//Engine.AccessControl.SetGamePassword
	void PreLogin(struct FString Options,struct FString Address,struct FString* OutError,bool bSpectator);//Engine.AccessControl.PreLogin
	bool IsIDBanned(struct FUniqueNetId* NetId);//Engine.AccessControl.IsIDBanned
	bool KickPlayer(class APlayerController* C,struct FString KickReason);//Engine.AccessControl.KickPlayer
	bool IsAdmin(class APlayerController* P);//Engine.AccessControl.IsAdmin
	bool ValidLogin(struct FString UserName,struct FString Password);//Engine.AccessControl.ValidLogin
};
UClass* AAccessControl::pClassPointer = NULL;

//0x000000 (0x000078 - 0x000078)
//ActorFactorySkeletalMeshMAT[0x108818F0]
class UActorFactorySkeletalMeshMAT : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorFactorySkeletalMeshMAT");
		return pClassPointer;
	};
};
UClass* UActorFactorySkeletalMeshMAT::pClassPointer = NULL;

//0x000000 (0x000628 - 0x000628)
//Admin[0x10881560]
class AAdmin : public APlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Admin");
		return pClassPointer;
	};

public:
	void Kick(struct FString S);//Engine.Admin.Kick
	void PostBeginPlay();//Engine.Admin.PostBeginPlay
	void RestartMap();//Engine.Admin.RestartMap
	void ServerAdmin(struct FString CommandLine);//Engine.Admin.ServerAdmin
	void ServerKick(struct FString S);//Engine.Admin.ServerKick
	void Admin(struct FString CommandLine);//Engine.Admin.Admin
	void Switch(struct FString URL);//Engine.Admin.Switch
	void ServerSwitch(struct FString URL);//Engine.Admin.ServerSwitch
	void ServerRestartMap();//Engine.Admin.ServerRestartMap
	void PlayerList();//Engine.Admin.PlayerList
	void KickBan(struct FString S);//Engine.Admin.KickBan
	void ServerKickBan(struct FString S);//Engine.Admin.ServerKickBan
};
UClass* AAdmin::pClassPointer = NULL;

//0x000014 (0x000288 - 0x000274)
//AmbientSoundSimpleToggleable[0x10881430]
class AAmbientSoundSimpleToggleable : public AAmbientSoundSimple
{
public:
	unsigned long                                      bCurrentlyPlaying : 1;                            		// 0x000274 (0x0004) [0x00000001] 
	unsigned long                                      bFadeOnToggle : 1;                                		// 0x000274 (0x0004) [0x00000002] 
	float                                              FadeInDuration;                                   		// 0x000278 (0x0004)              
	float                                              FadeInVolumeLevel;                                		// 0x00027C (0x0004)              
	float                                              FadeOutDuration;                                  		// 0x000280 (0x0004)              
	float                                              FadeOutVolumeLevel;                               		// 0x000284 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AmbientSoundSimpleToggleable");
		return pClassPointer;
	};

public:
	bool OnSequenceAction(class USequenceAction* Action);//Engine.AmbientSoundSimpleToggleable.OnSequenceAction
	void StartPlaying();//Engine.AmbientSoundSimpleToggleable.StartPlaying
	void ReplicatedEvent(struct FName VarName);//Engine.AmbientSoundSimpleToggleable.ReplicatedEvent
	void StopPlaying();//Engine.AmbientSoundSimpleToggleable.StopPlaying
	void PostBeginPlay();//Engine.AmbientSoundSimpleToggleable.PostBeginPlay
	void OnToggle(class USeqAct_Toggle* Action);//Engine.AmbientSoundSimpleToggleable.OnToggle
};
UClass* AAmbientSoundSimpleToggleable::pClassPointer = NULL;

//0x000024 (0x000064 - 0x000040)
//AnimNotify_PlayFaceFXAnim[0x10881300]
class UAnimNotify_PlayFaceFXAnim : public UAnimNotify_Scripted
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x000040 (0x0004)              
	struct FString                                     GroupName;                                        		// 0x000044 (0x000C)              
	struct FString                                     AnimName;                                         		// 0x000050 (0x000C)              
	unsigned long                                      bOverridePlayingAnim : 1;                         		// 0x00005C (0x0004) [0x00000001] 
	float                                              PlayFrequency;                                    		// 0x000060 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNotify_PlayFaceFXAnim");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//Engine.AnimNotify_PlayFaceFXAnim.Notify
};
UClass* UAnimNotify_PlayFaceFXAnim::pClassPointer = NULL;

//0x00004C (0x00008C - 0x000040)
//AnimNotify_ViewShake[0x108811D0]
class UAnimNotify_ViewShake : public UAnimNotify_Scripted
{
public:
	float                                              ShakeRadius;                                      		// 0x000040 (0x0004)              
	float                                              Duration;                                         		// 0x000044 (0x0004)              
	FVector3                                           RotAmplitude;                                     		// 0x000048 (0x000C)              
	FVector3                                           RotFrequency;                                     		// 0x000054 (0x000C)              
	FVector3                                           LocAmplitude;                                     		// 0x000060 (0x000C)              
	FVector3                                           LocFrequency;                                     		// 0x00006C (0x000C)              
	float                                              FOVAmplitude;                                     		// 0x000078 (0x0004)              
	float                                              FOVFrequency;                                     		// 0x00007C (0x0004)              
	unsigned long                                      bUseBoneLocation : 1;                             		// 0x000080 (0x0004) [0x00000001] 
	struct FName                                       BoneName;                                         		// 0x000084 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.AnimNotify_ViewShake");
		return pClassPointer;
	};

public:
	void Notify(class AActor* Owner,class UAnimNodeSequence* AnimSeqInstigator);//Engine.AnimNotify_ViewShake.Notify
};
UClass* UAnimNotify_ViewShake::pClassPointer = NULL;

//0x000020 (0x000060 - 0x000040)
//cAPBVisualServerHUD[0x108810A0]
class UcAPBVisualServerHUD : public UObject
{
public:
	unsigned long                                      m_bShowHUD : 1;                                   		// 0x000040 (0x0004) [0x00000001] 
	float                                              m_fSizeX;                                         		// 0x000044 (0x0004)              
	float                                              m_fSizeY;                                         		// 0x000048 (0x0004)              
	float                                              m_fCenterX;                                       		// 0x00004C (0x0004)              
	float                                              m_fCenterY;                                       		// 0x000050 (0x0004)              
	float                                              m_fRatioX;                                        		// 0x000054 (0x0004)              
	float                                              m_fRatioY;                                        		// 0x000058 (0x0004)              
	class UCanvas*                                     m_Canvas;                                         		// 0x00005C (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cAPBVisualServerHUD");
		return pClassPointer;
	};

public:
	void PreCalcValues();//Engine.cAPBVisualServerHUD.PreCalcValues
	void PostRender();//Engine.cAPBVisualServerHUD.PostRender
	void DrawHUD();//Engine.cAPBVisualServerHUD.DrawHUD
};
UClass* UcAPBVisualServerHUD::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//CloudSaveSystemDataBlobStoreInterface[0x10880F70]
class UCloudSaveSystemDataBlobStoreInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CloudSaveSystemDataBlobStoreInterface");
		return pClassPointer;
	};

public:
	bool DeleteDataBlob(struct FString StorageID,struct FString BlobName,struct FScriptDelegate InDeleteDataBlobCallback);//Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlob
	void GetDataBlobCallbackDelegate(bool bWasSuccessful,struct FString StorageID,struct FString BlobName,TArray<unsigned char>* DataBlob,struct FString Error);//Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlobCallbackDelegate
	void DeleteDataBlobCallbackDelegate(bool bWasSucessfull,struct FString StorageID,struct FString BlobName,struct FString Error);//Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlobCallbackDelegate
	void SetDataBlob(struct FString StorageID,struct FString BlobName,TArray<unsigned char>* DataBlob,struct FScriptDelegate InSetDataBlobCallback);//Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlob
	void GetDataBlob(struct FString StorageID,struct FString BlobName,struct FScriptDelegate OnGetDataBlobComplete);//Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlob
	void SetDataBlobCallbackDelegate(bool bWasSucessfull,struct FString StorageID,struct FString BlobName,struct FString Error);//Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlobCallbackDelegate
};
UClass* UCloudSaveSystemDataBlobStoreInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//CloudSaveSystemKVSInterface[0x10880E40]
class UCloudSaveSystemKVSInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CloudSaveSystemKVSInterface");
		return pClassPointer;
	};

public:
	bool ReadKeyValue(int SaveSlotIndex,struct FString KeyName,unsigned char Type,struct FPlatformInterfaceDelegateResult* Value);//Engine.CloudSaveSystemKVSInterface.ReadKeyValue
	bool WriteKeyValue(int SaveSlotIndex,struct FString KeyName,struct FPlatformInterfaceData* Value);//Engine.CloudSaveSystemKVSInterface.WriteKeyValue
};
UClass* UCloudSaveSystemKVSInterface::pClassPointer = NULL;

//0x000004 (0x000044 - 0x000040)
//CloudStorageBaseCloudSaveSystemKVS[0x10880D10]
class UCloudStorageBaseCloudSaveSystemKVS : public UObject
{
public:
	class UCloudStorageBase*                           CloudStorage;                                     		// 0x000040 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CloudStorageBaseCloudSaveSystemKVS");
		return pClassPointer;
	};

public:
	struct FString GenerateKeyNameForSaveSlot(int SaveSlotIndex,struct FString KeyName);//Engine.CloudStorageBaseCloudSaveSystemKVS.GenerateKeyNameForSaveSlot
	bool WriteKeyValue(int SaveSlotIndex,struct FString KeyName,struct FPlatformInterfaceData* Value);//Engine.CloudStorageBaseCloudSaveSystemKVS.WriteKeyValue
	void Init(class UCloudStorageBase* InCloudStorage);//Engine.CloudStorageBaseCloudSaveSystemKVS.Init
	bool ReadKeyValue(int SaveSlotIndex,struct FString KeyName,unsigned char Type,struct FPlatformInterfaceDelegateResult* Value);//Engine.CloudStorageBaseCloudSaveSystemKVS.ReadKeyValue
};
UClass* UCloudStorageBaseCloudSaveSystemKVS::pClassPointer = NULL;

//0x000010 (0x0002AC - 0x00029C)
//ColorScaleVolume[0x10880BE0]
class AColorScaleVolume : public AVolume
{
public:
	FVector3                                           ColorScale;                                       		// 0x00029C (0x000C)              
	float                                              InterpTime;                                       		// 0x0002A8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ColorScaleVolume");
		return pClassPointer;
	};

public:
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//Engine.ColorScaleVolume.Touch
	void UnTouch(class AActor* Other);//Engine.ColorScaleVolume.UnTouch
};
UClass* AColorScaleVolume::pClassPointer = NULL;

//0x00000C (0x00026C - 0x000260)
//CoverReplicator[0x10880AB0]
class ACoverReplicator : public AReplicationInfo
{
public:
	TArray<struct FCoverReplicationInfo>               CoverReplicationData;                             		// 0x000260 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CoverReplicator");
		return pClassPointer;
	};

public:
	void ServerSendInitialCoverReplicationInfo(int Index);//Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo
	void ServerSendDisabledSlots(int Index);//Engine.CoverReplicator.ServerSendDisabledSlots
	void ClientReceiveDisabledSlots(int Index,class ACoverLink* Link,unsigned char NumSlotsDisabled,unsigned char* SlotsDisabled,bool bDone);//Engine.CoverReplicator.ClientReceiveDisabledSlots
	void PurgeOldEntries();//Engine.CoverReplicator.PurgeOldEntries
	void NotifyDisabledSlots(class ACoverLink* Link,TArray<int>* SlotIndices);//Engine.CoverReplicator.NotifyDisabledSlots
	void ReplicateInitialCoverInfo();//Engine.CoverReplicator.ReplicateInitialCoverInfo
	void NotifyEnabledSlots(class ACoverLink* Link,TArray<int>* SlotIndices);//Engine.CoverReplicator.NotifyEnabledSlots
	void NotifyAutoAdjustSlots(class ACoverLink* Link,TArray<int>* SlotIndices);//Engine.CoverReplicator.NotifyAutoAdjustSlots
	void ClientReceiveAdjustedSlots(int Index,class ACoverLink* Link,unsigned char NumSlotsAdjusted,unsigned char* SlotsAdjusted,bool bDone);//Engine.CoverReplicator.ClientReceiveAdjustedSlots
	void ServerSendAdjustedSlots(int Index);//Engine.CoverReplicator.ServerSendAdjustedSlots
	void ServerSendManualCoverTypeSlots(int Index);//Engine.CoverReplicator.ServerSendManualCoverTypeSlots
	void ServerSendEnabledSlots(int Index);//Engine.CoverReplicator.ServerSendEnabledSlots
	void NotifySetManualCoverTypeForSlots(class ACoverLink* Link,TArray<int>* SlotIndices,unsigned char NewCoverType);//Engine.CoverReplicator.NotifySetManualCoverTypeForSlots
	void ClientReceiveEnabledSlots(int Index,class ACoverLink* Link,unsigned char NumSlotsEnabled,unsigned char* SlotsEnabled,bool bDone);//Engine.CoverReplicator.ClientReceiveEnabledSlots
	void ClientReceiveManualCoverTypeSlots(int Index,class ACoverLink* Link,unsigned char NumCoverTypesChanged,struct FManualCoverTypeInfo* SlotsCoverTypeChanged,bool bDone);//Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots
	void ClientReceiveInitialCoverReplicationInfo(int Index,class ACoverLink* Link,unsigned char NumSlotsEnabled,unsigned char* SlotsEnabled,unsigned char NumSlotsDisabled,unsigned char* SlotsDisabled,unsigned char NumSlotsAdjusted,unsigned char* SlotsAdjusted,unsigned char NumCoverTypesChanged,struct FManualCoverTypeInfo* SlotsCoverTypeChanged,bool bDone);//Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo
};
UClass* ACoverReplicator::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//cUIAction_SetImage[0x10880980]
class UcUIAction_SetImage : public UUIAction_SetValue
{
public:
	class UObject*                                     m_NewImage;                                       		// 0x0000B4 (0x0004)              
	class UObject*                                     m_SecondaryImage;                                 		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.cUIAction_SetImage");
		return pClassPointer;
	};
};
UClass* UcUIAction_SetImage::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_SetValue[0x10880850]
class UUIAction_SetValue : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_SetValue");
		return pClassPointer;
	};
};
UClass* UUIAction_SetValue::pClassPointer = NULL;

//0x000010 (0x000638 - 0x000628)
//DebugCameraController[0x10880720]
class ADebugCameraController : public APlayerController
{
public:
	class APlayerController*                           OryginalControllerRef;                            		// 0x000628 (0x0004)              
	class UPlayer*                                     OryginalPlayer;                                   		// 0x00062C (0x0004)              
	unsigned long                                      bIsFrozenRendering : 1;                           		// 0x000630 (0x0004) [0x00000001] 
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x000634 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DebugCameraController");
		return pClassPointer;
	};

public:
	void NormalSpeed();//Engine.DebugCameraController.NormalSpeed
	void SetFreezeRendering();//Engine.DebugCameraController.SetFreezeRendering
	void MoreSpeed();//Engine.DebugCameraController.MoreSpeed
	void PostBeginPlay();//Engine.DebugCameraController.PostBeginPlay
	void DisableDebugCamera();//Engine.DebugCameraController.DisableDebugCamera
	void OnDeactivate(class APlayerController* PC);//Engine.DebugCameraController.OnDeactivate
	void OnActivate(class APlayerController* PC);//Engine.DebugCameraController.OnActivate
};
UClass* ADebugCameraController::pClassPointer = NULL;

//0x000000 (0x000508 - 0x000508)
//DebugCameraHUD[0x108805F0]
class ADebugCameraHUD : public AHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DebugCameraHUD");
		return pClassPointer;
	};

public:
	void PostBeginPlay();//Engine.DebugCameraHUD.PostBeginPlay
	void PostRender();//Engine.DebugCameraHUD.PostRender
};
UClass* ADebugCameraHUD::pClassPointer = NULL;

//0x000000 (0x000164 - 0x000164)
//DebugCameraInput[0x108804C0]
class UDebugCameraInput : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DebugCameraInput");
		return pClassPointer;
	};
};
UClass* UDebugCameraInput::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//DecalLifetime[0x10880390]
class UDecalLifetime : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DecalLifetime");
		return pClassPointer;
	};
};
UClass* UDecalLifetime::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//DecalLifetimeAge[0x10880260]
class UDecalLifetimeAge : public UDecalLifetime
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DecalLifetimeAge");
		return pClassPointer;
	};
};
UClass* UDecalLifetimeAge::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//DialogueManager[0x10880130]
class ADialogueManager : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DialogueManager");
		return pClassPointer;
	};

public:
	bool TriggerDialogueEvent(class UClass* InEventClass,class AActor* InInstigator,class AActor* InOriginator);//Engine.DialogueManager.TriggerDialogueEvent
};
UClass* ADialogueManager::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//DmgType_Crushed[0x10880000]
class UDmgType_Crushed : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DmgType_Crushed");
		return pClassPointer;
	};
};
UClass* UDmgType_Crushed::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//DmgType_Suicided[0x1CFFFE20]
class UDmgType_Suicided : public UKillZDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DmgType_Suicided");
		return pClassPointer;
	};
};
UClass* UDmgType_Suicided::pClassPointer = NULL;

//0x000000 (0x000090 - 0x000090)
//DmgType_Telefragged[0x1CFFFCF0]
class UDmgType_Telefragged : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DmgType_Telefragged");
		return pClassPointer;
	};
};
UClass* UDmgType_Telefragged::pClassPointer = NULL;

//0x000000 (0x0002D8 - 0x0002D8)
//DynamicPhysicsVolume[0x1CFFFBC0]
class ADynamicPhysicsVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DynamicPhysicsVolume");
		return pClassPointer;
	};
};
UClass* ADynamicPhysicsVolume::pClassPointer = NULL;

//0x000000 (0x000298 - 0x000298)
//DynamicSMActor_Spawnable[0x1CFFFA90]
class ADynamicSMActor_Spawnable : public ADynamicSMActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DynamicSMActor_Spawnable");
		return pClassPointer;
	};
};
UClass* ADynamicSMActor_Spawnable::pClassPointer = NULL;

//0x000000 (0x00029C - 0x00029C)
//DynamicTriggerVolume[0x1CFFF960]
class ADynamicTriggerVolume : public ATriggerVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DynamicTriggerVolume");
		return pClassPointer;
	};
};
UClass* ADynamicTriggerVolume::pClassPointer = NULL;

//0x000004 (0x00027C - 0x000278)
//EmitterSpawnable[0x1CFFF830]
class AEmitterSpawnable : public AEmitter
{
public:
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x000278 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.EmitterSpawnable");
		return pClassPointer;
	};

public:
	void SetTemplate(class UParticleSystem* NewTemplate,bool bDestroyOnFinish);//Engine.EmitterSpawnable.SetTemplate
	void ReplicatedEvent(struct FName VarName);//Engine.EmitterSpawnable.ReplicatedEvent
};
UClass* AEmitterSpawnable::pClassPointer = NULL;

//0x000030 (0x000084 - 0x000054)
//FailedConnect[0x1CFFF700]
class UFailedConnect : public ULocalMessage
{
public:
	struct FString                                     FailMessage[0x4];                                 		// 0x000054 (0x0030)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FailedConnect");
		return pClassPointer;
	};

public:
	struct FString GetString(int Switch,bool bPRI1HUD,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.FailedConnect.GetString
	int GetFailSwitch(struct FString FailString);//Engine.FailedConnect.GetFailSwitch
};
UClass* UFailedConnect::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//LocalMessage[0x1CFFF5D0]
class ULocalMessage : public UObject
{
public:
	unsigned long                                      bIsSpecial : 1;                                   		// 0x000040 (0x0004) [0x00000001] 
	unsigned long                                      bIsUnique : 1;                                    		// 0x000040 (0x0004) [0x00000002] 
	unsigned long                                      bIsPartiallyUnique : 1;                           		// 0x000040 (0x0004) [0x00000004] 
	unsigned long                                      bIsConsoleMessage : 1;                            		// 0x000040 (0x0004) [0x00000008] 
	unsigned long                                      bBeep : 1;                                        		// 0x000040 (0x0004) [0x00000010] 
	unsigned long                                      bCountInstances : 1;                              		// 0x000040 (0x0004) [0x00000020] 
	float                                              Lifetime;                                         		// 0x000044 (0x0004)              
	DWORD                                              DrawColor;                                        		// 0x000048 (0x0004)              
	float                                              PosY;                                             		// 0x00004C (0x0004)              
	int                                                FontSize;                                         		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LocalMessage");
		return pClassPointer;
	};

public:
	DWORD GetConsoleColor(class APlayerReplicationInfo* RelatedPRI);//Engine.LocalMessage.GetConsoleColor
	int GetFontSize(int Switch,class APlayerReplicationInfo* RelatedPRI1,class APlayerReplicationInfo* RelatedPRI2,class APlayerReplicationInfo* LocalPlayer);//Engine.LocalMessage.GetFontSize
	bool IsConsoleMessage(int Switch);//Engine.LocalMessage.IsConsoleMessage
	float GetLifeTime(int Switch);//Engine.LocalMessage.GetLifeTime
	void ClientReceive(class APlayerController* P,int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.LocalMessage.ClientReceive
	struct FString GetString(int Switch,bool bPRI1HUD,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.LocalMessage.GetString
	DWORD GetColor(int Switch,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.LocalMessage.GetColor
	bool PartiallyDuplicates(int Switch1,int Switch2,class UObject* OptionalObject1,class UObject* OptionalObject2);//Engine.LocalMessage.PartiallyDuplicates
	bool IsKeyObjectiveMessage(int Switch);//Engine.LocalMessage.IsKeyObjectiveMessage
	float GetPos(int Switch,class AHUD* myHUD);//Engine.LocalMessage.GetPos
};
UClass* ULocalMessage::pClassPointer = NULL;

//0x000114 (0x000168 - 0x000054)
//GameMessage[0x1CFFF4A0]
class UGameMessage : public ULocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                               		// 0x000054 (0x000C)              
	struct FString                                     LeftMessage;                                      		// 0x000060 (0x000C)              
	struct FString                                     FailedTeamMessage;                                		// 0x00006C (0x000C)              
	struct FString                                     FailedPlaceMessage;                               		// 0x000078 (0x000C)              
	struct FString                                     FailedSpawnMessage;                               		// 0x000084 (0x000C)              
	struct FString                                     EnteredMessage;                                   		// 0x000090 (0x000C)              
	struct FString                                     MaxedOutMessage;                                  		// 0x00009C (0x000C)              
	struct FString                                     ArbitrationMessage;                               		// 0x0000A8 (0x000C)              
	struct FString                                     OvertimeMessage;                                  		// 0x0000B4 (0x000C)              
	struct FString                                     GlobalNameChange;                                 		// 0x0000C0 (0x000C)              
	struct FString                                     NewTeamMessage;                                   		// 0x0000CC (0x000C)              
	struct FString                                     NewTeamMessageTrailer;                            		// 0x0000D8 (0x000C)              
	struct FString                                     NoNameChange;                                     		// 0x0000E4 (0x000C)              
	struct FString                                     VoteStarted;                                      		// 0x0000F0 (0x000C)              
	struct FString                                     VotePassed;                                       		// 0x0000FC (0x000C)              
	struct FString                                     MustHaveStats;                                    		// 0x000108 (0x000C)              
	struct FString                                     CantBeSpectator;                                  		// 0x000114 (0x000C)              
	struct FString                                     CantBePlayer;                                     		// 0x000120 (0x000C)              
	struct FString                                     BecameSpectator;                                  		// 0x00012C (0x000C)              
	struct FString                                     NewPlayerMessage;                                 		// 0x000138 (0x000C)              
	struct FString                                     KickWarning;                                      		// 0x000144 (0x000C)              
	struct FString                                     NewSpecMessage;                                   		// 0x000150 (0x000C)              
	struct FString                                     SpecEnteredMessage;                               		// 0x00015C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.GameMessage");
		return pClassPointer;
	};

public:
	struct FString GetString(int Switch,bool bPRI1HUD,class APlayerReplicationInfo* RelatedPRI,class APlayerReplicationInfo* RelatedPRI,class UObject* OptionalObject);//Engine.GameMessage.GetString
};
UClass* UGameMessage::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//GameRules[0x1CFFF370]
class AGameRules : public AInfo
{
public:
	class AGameRules*                                  NextGameRules;                                    		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.GameRules");
		return pClassPointer;
	};

public:
	void NetDamage(int OriginalDamage,int* Damage,class APawn* injured,class AController* InstigatedBy,FVector3 HitLocation,FVector3* Momentum,class UClass* DamageType);//Engine.GameRules.NetDamage
	bool HandleRestartGame();//Engine.GameRules.HandleRestartGame
	struct FString GetRules();//Engine.GameRules.GetRules
	class ANavigationPoint* FindPlayerStart(class AController* Player,unsigned char InTeam,struct FString IncomingName);//Engine.GameRules.FindPlayerStart
	bool CheckEndGame(class APlayerReplicationInfo* Winner,struct FString Reason);//Engine.GameRules.CheckEndGame
	void ScoreKill(class AController* Killer,class AController* Killed);//Engine.GameRules.ScoreKill
	bool PreventDeath(class APawn* Killed,class AController* Killer,class UClass* DamageType,FVector3 HitLocation);//Engine.GameRules.PreventDeath
	void ScoreObjective(class APlayerReplicationInfo* Scorer,int Score);//Engine.GameRules.ScoreObjective
	void AddGameRules(class AGameRules* GR);//Engine.GameRules.AddGameRules
};
UClass* AGameRules::pClassPointer = NULL;

//0x000008 (0x000268 - 0x000260)
//HeightFog[0x1CFFF240]
class AHeightFog : public AInfo
{
public:
	class UHeightFogComponent*                         Component;                                        		// 0x000260 (0x0004)              
	unsigned long                                      bEnabled : 1;                                     		// 0x000264 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.HeightFog");
		return pClassPointer;
	};

public:
	void PostBeginPlay();//Engine.HeightFog.PostBeginPlay
	bool OnSequenceAction(class USequenceAction* Action);//Engine.HeightFog.OnSequenceAction
	void ReplicatedEvent(struct FName VarName);//Engine.HeightFog.ReplicatedEvent
	void OnToggle(class USeqAct_Toggle* Action);//Engine.HeightFog.OnToggle
};
UClass* AHeightFog::pClassPointer = NULL;

//0x00000C (0x00004C - 0x000040)
//HttpFactory[0x1CFFF110]
class UHttpFactory : public UObject
{
public:
	struct FString                                     HttpRequestClassName;                             		// 0x000040 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.HttpFactory");
		return pClassPointer;
	};

public:
	class UHttpRequestInterface* CreateRequest();//Engine.HttpFactory.CreateRequest
};
UClass* UHttpFactory::pClassPointer = NULL;

//0x000000 (0x000270 - 0x000270)
//KAssetSpawnable[0x1CFFEFE0]
class AKAssetSpawnable : public AKAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.KAssetSpawnable");
		return pClassPointer;
	};
};
UClass* AKAssetSpawnable::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineAccountInterface[0x1CFFEEB0]
class UOnlineAccountInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineAccountInterface");
		return pClassPointer;
	};

public:
	void ClearCreateOnlineAccountCompletedDelegate(struct FScriptDelegate AccountCreateDelegate);//Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate
	bool RenameLocalAccount(struct FString NewUserName,struct FString OldUserName,struct FString Password);//Engine.OnlineAccountInterface.RenameLocalAccount
	void OnCreateOnlineAccountCompleted(unsigned char ErrorStatus);//Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted
	void AddCreateOnlineAccountCompletedDelegate(struct FScriptDelegate AccountCreateDelegate);//Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate
	bool DeleteLocalAccount(struct FString UserName,struct FString Password);//Engine.OnlineAccountInterface.DeleteLocalAccount
	bool CreateOnlineAccount(struct FString UserName,struct FString Password,struct FString EmailAddress,struct FString ProductKey);//Engine.OnlineAccountInterface.CreateOnlineAccount
	bool CreateLocalAccount(struct FString UserName,struct FString Password);//Engine.OnlineAccountInterface.CreateLocalAccount
	bool GetLocalAccountNames(TArray<struct FString>* Accounts);//Engine.OnlineAccountInterface.GetLocalAccountNames
};
UClass* UOnlineAccountInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineCommunityContentInterface[0x1CFFED80]
class UOnlineCommunityContentInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineCommunityContentInterface");
		return pClassPointer;
	};

public:
	void OnReadFriendsContentListComplete(bool bWasSuccessful);//Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete
	void AddDownloadContentCompleteDelegate(struct FScriptDelegate DownloadContentCompleteDelegate);//Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate
	void OnDownloadContentComplete(bool bWasSuccessful,struct FCommunityContentFile FileDownloaded);//Engine.OnlineCommunityContentInterface.OnDownloadContentComplete
	void ClearDownloadContentCompleteDelegate(struct FScriptDelegate DownloadContentCompleteDelegate);//Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate
	void Exit();//Engine.OnlineCommunityContentInterface.Exit
	bool ReadContentList(unsigned char PlayerNum,int StartAt,int NumToRead);//Engine.OnlineCommunityContentInterface.ReadContentList
	bool GetContentList(unsigned char PlayerNum,TArray<struct FCommunityContentFile>* ContentFiles);//Engine.OnlineCommunityContentInterface.GetContentList
	void ClearUploadContentCompleteDelegate(struct FScriptDelegate UploadContentCompleteDelegate);//Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate
	bool ReadFriendsContentList(unsigned char PlayerNum,TArray<struct FOnlineFriend>* Friends,int StartAt,int NumToRead);//Engine.OnlineCommunityContentInterface.ReadFriendsContentList
	bool Init();//Engine.OnlineCommunityContentInterface.Init
	void ClearGetContentPayloadCompleteDelegate(struct FScriptDelegate GetContentPayloadCompleteDelegate);//Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate
	void ClearReadContentListCompleteDelegate(struct FScriptDelegate ReadContentListCompleteDelegate);//Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate
	void OnReadContentListComplete(bool bWasSuccessful);//Engine.OnlineCommunityContentInterface.OnReadContentListComplete
	bool GetContentPayload(unsigned char PlayerNum,struct FCommunityContentFile* FileDownloaded);//Engine.OnlineCommunityContentInterface.GetContentPayload
	void OnUploadContentComplete(bool bWasSuccessful,struct FCommunityContentFile UploadedFile);//Engine.OnlineCommunityContentInterface.OnUploadContentComplete
	void AddReadFriendsContentListCompleteDelegate(struct FScriptDelegate ReadFriendsContentListCompleteDelegate);//Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate
	bool GetFriendsContentList(unsigned char PlayerNum,struct FOnlineFriend* Friend,TArray<struct FCommunityContentFile>* ContentFiles);//Engine.OnlineCommunityContentInterface.GetFriendsContentList
	void AddUploadContentCompleteDelegate(struct FScriptDelegate UploadContentCompleteDelegate);//Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate
	bool DownloadContent(unsigned char PlayerNum,struct FCommunityContentFile* FileToDownload);//Engine.OnlineCommunityContentInterface.DownloadContent
	void OnGetContentPayloadComplete(bool bWasSuccessful,struct FCommunityContentFile FileDownloaded,TArray<unsigned char>* Payload);//Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete
	void AddReadContentListCompleteDelegate(struct FScriptDelegate ReadContentListCompleteDelegate);//Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate
	void RateContent(unsigned char PlayerNum,struct FCommunityContentFile* FileToRate,int NewRating);//Engine.OnlineCommunityContentInterface.RateContent
	void ClearReadFriendsContentListCompleteDelegate(struct FScriptDelegate ReadFriendsContentListCompleteDelegate);//Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate
	void AddGetContentPayloadCompleteDelegate(struct FScriptDelegate GetContentPayloadCompleteDelegate);//Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate
	bool UploadContent(unsigned char PlayerNum,TArray<unsigned char>* Payload,struct FCommunityContentMetadata* MetaData);//Engine.OnlineCommunityContentInterface.UploadContent
};
UClass* UOnlineCommunityContentInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineContentInterface[0x1CFFEC50]
class UOnlineContentInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineContentInterface");
		return pClassPointer;
	};

public:
	void AddReadContentComplete(unsigned char LocalUserNum,unsigned char ContentType,struct FScriptDelegate ReadContentCompleteDelegate);//Engine.OnlineContentInterface.AddReadContentComplete
	void OnReadCrossTitleContentComplete(bool bWasSuccessful);//Engine.OnlineContentInterface.OnReadCrossTitleContentComplete
	void ClearQueryAvailableDownloadsComplete(unsigned char LocalUserNum,struct FScriptDelegate QueryDownloadsDelegate);//Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete
	bool ReadContentList(unsigned char LocalUserNum,unsigned char ContentType,int DeviceID);//Engine.OnlineContentInterface.ReadContentList
	void ClearCrossTitleContentList(unsigned char LocalUserNum,unsigned char ContentType);//Engine.OnlineContentInterface.ClearCrossTitleContentList
	bool WriteSaveGameData(unsigned char LocalUserNum,int DeviceID,struct FString FriendlyName,struct FString Filename,struct FString SaveFileName,TArray<unsigned char>* SaveGameData);//Engine.OnlineContentInterface.WriteSaveGameData
	void OnReadSaveGameDataComplete(bool bWasSuccessful,unsigned char LocalUserNum,int DeviceID,struct FString FriendlyName,struct FString Filename,struct FString SaveFileName);//Engine.OnlineContentInterface.OnReadSaveGameDataComplete
	void ClearWriteSaveGameDataComplete(unsigned char LocalUserNum,struct FScriptDelegate WriteSaveGameDataCompleteDelegate);//Engine.OnlineContentInterface.ClearWriteSaveGameDataComplete
	void OnContentChange();//Engine.OnlineContentInterface.OnContentChange
	void AddQueryAvailableDownloadsComplete(unsigned char LocalUserNum,struct FScriptDelegate QueryDownloadsDelegate);//Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete
	void OnWriteSaveGameDataComplete(bool bWasSuccessful,unsigned char LocalUserNum,int DeviceID,struct FString FriendlyName,struct FString Filename,struct FString SaveFileName);//Engine.OnlineContentInterface.OnWriteSaveGameDataComplete
	bool QueryAvailableDownloads(unsigned char LocalUserNum,int CategoryMask);//Engine.OnlineContentInterface.QueryAvailableDownloads
	void ClearReadCrossTitleContentCompleteDelegate(unsigned char LocalUserNum,unsigned char ContentType,struct FScriptDelegate ReadContentCompleteDelegate);//Engine.OnlineContentInterface.ClearReadCrossTitleContentCompleteDelegate
	void OnReadCrossTitleSaveGameDataComplete(bool bWasSuccessful,unsigned char LocalUserNum,int DeviceID,int TitleId,struct FString FriendlyName,struct FString Filename,struct FString SaveFileName);//Engine.OnlineContentInterface.OnReadCrossTitleSaveGameDataComplete
	bool ReadCrossTitleSaveGameData(unsigned char LocalUserNum,int DeviceID,int TitleId,struct FString FriendlyName,struct FString Filename,struct FString SaveFileName);//Engine.OnlineContentInterface.ReadCrossTitleSaveGameData
	bool DeleteSaveGame(unsigned char LocalUserNum,int DeviceID,struct FString FriendlyName,struct FString Filename);//Engine.OnlineContentInterface.DeleteSaveGame
	void ClearContentList(unsigned char LocalUserNum,unsigned char ContentType);//Engine.OnlineContentInterface.ClearContentList
	void AddContentChangeDelegate(struct FScriptDelegate ContentDelegate,unsigned char LocalUserNum);//Engine.OnlineContentInterface.AddContentChangeDelegate
	void ClearContentChangeDelegate(struct FScriptDelegate ContentDelegate,unsigned char LocalUserNum);//Engine.OnlineContentInterface.ClearContentChangeDelegate
	void GetAvailableDownloadCounts(unsigned char LocalUserNum,int* NewDownloads,int* TotalDownloads);//Engine.OnlineContentInterface.GetAvailableDownloadCounts
	bool ReadCrossTitleContentList(unsigned char LocalUserNum,unsigned char ContentType,int TitleId,int DeviceID);//Engine.OnlineContentInterface.ReadCrossTitleContentList
	bool GetSaveGameData(unsigned char LocalUserNum,int DeviceID,struct FString FriendlyName,struct FString Filename,struct FString SaveFileName,unsigned char* bIsValid,TArray<unsigned char>* SaveGameData);//Engine.OnlineContentInterface.GetSaveGameData
	bool ClearSaveGames(unsigned char LocalUserNum);//Engine.OnlineContentInterface.ClearSaveGames
	unsigned char GetCrossTitleContentList(unsigned char LocalUserNum,unsigned char ContentType,TArray<struct FOnlineCrossTitleContent>* ContentList);//Engine.OnlineContentInterface.GetCrossTitleContentList
	void AddWriteSaveGameDataComplete(unsigned char LocalUserNum,struct FScriptDelegate WriteSaveGameDataCompleteDelegate);//Engine.OnlineContentInterface.AddWriteSaveGameDataComplete
	void ClearReadSaveGameDataComplete(unsigned char LocalUserNum,struct FScriptDelegate ReadSaveGameDataCompleteDelegate);//Engine.OnlineContentInterface.ClearReadSaveGameDataComplete
	void ClearReadCrossTitleSaveGameDataComplete(unsigned char LocalUserNum,struct FScriptDelegate ReadSaveGameDataCompleteDelegate);//Engine.OnlineContentInterface.ClearReadCrossTitleSaveGameDataComplete
	bool ClearCrossTitleSaveGames(unsigned char LocalUserNum);//Engine.OnlineContentInterface.ClearCrossTitleSaveGames
	unsigned char GetContentList(unsigned char LocalUserNum,unsigned char ContentType,TArray<struct FOnlineContent>* ContentList);//Engine.OnlineContentInterface.GetContentList
	void AddReadCrossTitleSaveGameDataComplete(unsigned char LocalUserNum,struct FScriptDelegate ReadSaveGameDataCompleteDelegate);//Engine.OnlineContentInterface.AddReadCrossTitleSaveGameDataComplete
	void OnQueryAvailableDownloadsComplete(bool bWasSuccessful);//Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete
	void OnReadContentComplete(bool bWasSuccessful);//Engine.OnlineContentInterface.OnReadContentComplete
	void AddReadCrossTitleContentCompleteDelegate(unsigned char LocalUserNum,unsigned char ContentType,struct FScriptDelegate ReadContentCompleteDelegate);//Engine.OnlineContentInterface.AddReadCrossTitleContentCompleteDelegate
	bool GetCrossTitleSaveGameData(unsigned char LocalUserNum,int DeviceID,int TitleId,struct FString FriendlyName,struct FString Filename,struct FString SaveFileName,unsigned char* bIsValid,TArray<unsigned char>* SaveGameData);//Engine.OnlineContentInterface.GetCrossTitleSaveGameData
	bool ReadSaveGameData(unsigned char LocalUserNum,int DeviceID,struct FString FriendlyName,struct FString Filename,struct FString SaveFileName);//Engine.OnlineContentInterface.ReadSaveGameData
	void AddReadSaveGameDataComplete(unsigned char LocalUserNum,struct FScriptDelegate ReadSaveGameDataCompleteDelegate);//Engine.OnlineContentInterface.AddReadSaveGameDataComplete
	void ClearReadContentComplete(unsigned char LocalUserNum,unsigned char ContentType,struct FScriptDelegate ReadContentCompleteDelegate);//Engine.OnlineContentInterface.ClearReadContentComplete
};
UClass* UOnlineContentInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineEventsInterface[0x1CFFEB20]
class UOnlineEventsInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineEventsInterface");
		return pClassPointer;
	};

public:
	bool UploadPlayerData(struct FUniqueNetId UniqueId,struct FString PlayerNick,class UOnlineProfileSettings* ProfileSettings,class UOnlinePlayerStorage* PlayerStorage);//Engine.OnlineEventsInterface.UploadPlayerData
	bool UpdatePlaylistPopulation(int PlaylistId,int NumPlayers);//Engine.OnlineEventsInterface.UpdatePlaylistPopulation
	bool UploadGameplayEventsData(struct FUniqueNetId UniqueId,TArray<unsigned char>* Payload);//Engine.OnlineEventsInterface.UploadGameplayEventsData
};
UClass* UOnlineEventsInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineGameInterface[0x1CFFE9F0]
class UOnlineGameInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineGameInterface");
		return pClassPointer;
	};

public:
	void ClearCancelFindOnlineGamesCompleteDelegate(struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate);//Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate
	void OnRecalculateSkillRatingComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineGameInterface.OnRecalculateSkillRatingComplete
	bool RegisterForArbitration(struct FName SessionName);//Engine.OnlineGameInterface.RegisterForArbitration
	void OnMigrateOnlineGameComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineGameInterface.OnMigrateOnlineGameComplete
	void AddRecalculateSkillRatingCompleteDelegate(struct FScriptDelegate RecalculateSkillRatingCompleteDelegate);//Engine.OnlineGameInterface.AddRecalculateSkillRatingCompleteDelegate
	void OnJoinMigratedOnlineGameComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineGameInterface.OnJoinMigratedOnlineGameComplete
	void OnCreateOnlineGameComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineGameInterface.OnCreateOnlineGameComplete
	bool BindPlatformSpecificSessionToSearch(unsigned char SearchingPlayerNum,class UOnlineGameSearch* SearchSettings,unsigned char* PlatformSpecificInfo);//Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch
	void ClearFindOnlineGamesCompleteDelegate(struct FScriptDelegate FindOnlineGamesCompleteDelegate);//Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate
	TArray<struct FOnlineArbitrationRegistrant> GetArbitratedPlayers(struct FName SessionName);//Engine.OnlineGameInterface.GetArbitratedPlayers
	void OnUpdateOnlineGameComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineGameInterface.OnUpdateOnlineGameComplete
	void ClearCreateOnlineGameCompleteDelegate(struct FScriptDelegate CreateOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate
	bool FindOnlineGames(unsigned char SearchingPlayerNum,class UOnlineGameSearch* SearchSettings);//Engine.OnlineGameInterface.FindOnlineGames
	void AddMigrateOnlineGameCompleteDelegate(struct FScriptDelegate MigrateOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.AddMigrateOnlineGameCompleteDelegate
	bool AcceptGameInvite(unsigned char LocalUserNum,struct FName SessionName);//Engine.OnlineGameInterface.AcceptGameInvite
	void ClearRegisterPlayerCompleteDelegate(struct FScriptDelegate RegisterPlayerCompleteDelegate);//Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate
	bool DestroyOnlineGame(struct FName SessionName);//Engine.OnlineGameInterface.DestroyOnlineGame
	void OnEndOnlineGameComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineGameInterface.OnEndOnlineGameComplete
	bool ReadPlatformSpecificSessionInfo(struct FOnlineGameSearchResult* DesiredGame,unsigned char* PlatformSpecificInfo);//Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo
	void ClearQosStatusChangedDelegate(struct FScriptDelegate QosStatusChangedDelegate);//Engine.OnlineGameInterface.ClearQosStatusChangedDelegate
	void AddUpdateOnlineGameCompleteDelegate(struct FScriptDelegate UpdateOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate
	bool CreateOnlineGame(unsigned char HostingPlayerNum,struct FName SessionName,class UOnlineGameSettings* NewGameSettings);//Engine.OnlineGameInterface.CreateOnlineGame
	bool RegisterPlayer(struct FName SessionName,struct FUniqueNetId PlayerID,bool bWasInvited);//Engine.OnlineGameInterface.RegisterPlayer
	bool FreeSearchResults(class UOnlineGameSearch* Search);//Engine.OnlineGameInterface.FreeSearchResults
	void AddStartOnlineGameCompleteDelegate(struct FScriptDelegate StartOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate
	void OnJoinOnlineGameComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineGameInterface.OnJoinOnlineGameComplete
	bool JoinOnlineGame(unsigned char PlayerNum,struct FName SessionName,struct FOnlineGameSearchResult* DesiredGame);//Engine.OnlineGameInterface.JoinOnlineGame
	void AddDestroyOnlineGameCompleteDelegate(struct FScriptDelegate DestroyOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate
	void OnRegisterPlayerComplete(struct FName SessionName,struct FUniqueNetId PlayerID,bool bWasSuccessful);//Engine.OnlineGameInterface.OnRegisterPlayerComplete
	bool EndOnlineGame(struct FName SessionName);//Engine.OnlineGameInterface.EndOnlineGame
	void ClearUpdateOnlineGameCompleteDelegate(struct FScriptDelegate UpdateOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate
	void ClearJoinMigratedOnlineGameCompleteDelegate(struct FScriptDelegate JoinMigratedOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.ClearJoinMigratedOnlineGameCompleteDelegate
	bool UnregisterPlayers(struct FName SessionName,TArray<struct FUniqueNetId>* Players);//Engine.OnlineGameInterface.UnregisterPlayers
	void OnQosStatusChanged(int NumComplete,int NumTotal);//Engine.OnlineGameInterface.OnQosStatusChanged
	void OnDestroyOnlineGameComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineGameInterface.OnDestroyOnlineGameComplete
	void AddCancelFindOnlineGamesCompleteDelegate(struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate);//Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate
	void OnCancelFindOnlineGamesComplete(bool bWasSuccessful);//Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete
	bool StartOnlineGame(struct FName SessionName);//Engine.OnlineGameInterface.StartOnlineGame
	class UOnlineGameSettings* GetGameSettings(struct FName SessionName);//Engine.OnlineGameInterface.GetGameSettings
	void AddUnregisterPlayerCompleteDelegate(struct FScriptDelegate UnregisterPlayerCompleteDelegate);//Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate
	void AddArbitrationRegistrationCompleteDelegate(struct FScriptDelegate ArbitrationRegistrationCompleteDelegate);//Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate
	bool CancelFindOnlineGames();//Engine.OnlineGameInterface.CancelFindOnlineGames
	void AddJoinOnlineGameCompleteDelegate(struct FScriptDelegate JoinOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate
	bool RecalculateSkillRating(struct FName SessionName,TArray<struct FUniqueNetId>* Players);//Engine.OnlineGameInterface.RecalculateSkillRating
	void ClearGameInviteAcceptedDelegate(unsigned char LocalUserNum,struct FScriptDelegate GameInviteAcceptedDelegate);//Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate
	void ClearRecalculateSkillRatingCompleteDelegate(struct FScriptDelegate RecalculateSkillRatingGameCompleteDelegate);//Engine.OnlineGameInterface.ClearRecalculateSkillRatingCompleteDelegate
	void AddJoinMigratedOnlineGameCompleteDelegate(struct FScriptDelegate JoinMigratedOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.AddJoinMigratedOnlineGameCompleteDelegate
	void OnArbitrationRegistrationComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineGameInterface.OnArbitrationRegistrationComplete
	void AddRegisterPlayerCompleteDelegate(struct FScriptDelegate RegisterPlayerCompleteDelegate);//Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate
	class UOnlineGameSearch* GetGameSearch();//Engine.OnlineGameInterface.GetGameSearch
	bool UnregisterPlayer(struct FName SessionName,struct FUniqueNetId PlayerID);//Engine.OnlineGameInterface.UnregisterPlayer
	void ClearJoinOnlineGameCompleteDelegate(struct FScriptDelegate JoinOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate
	void ClearUnregisterPlayerCompleteDelegate(struct FScriptDelegate UnregisterPlayerCompleteDelegate);//Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate
	bool GetResolvedConnectString(struct FName SessionName,struct FString* ConnectInfo);//Engine.OnlineGameInterface.GetResolvedConnectString
	void OnFindOnlineGamesComplete(bool bWasSuccessful);//Engine.OnlineGameInterface.OnFindOnlineGamesComplete
	bool RegisterPlayers(struct FName SessionName,TArray<struct FUniqueNetId>* Players);//Engine.OnlineGameInterface.RegisterPlayers
	void ClearEndOnlineGameCompleteDelegate(struct FScriptDelegate EndOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate
	void OnUnregisterPlayerComplete(struct FName SessionName,struct FUniqueNetId PlayerID,bool bWasSuccessful);//Engine.OnlineGameInterface.OnUnregisterPlayerComplete
	void AddQosStatusChangedDelegate(struct FScriptDelegate QosStatusChangedDelegate);//Engine.OnlineGameInterface.AddQosStatusChangedDelegate
	void ClearStartOnlineGameCompleteDelegate(struct FScriptDelegate StartOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate
	void AddCreateOnlineGameCompleteDelegate(struct FScriptDelegate CreateOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate
	bool JoinMigratedOnlineGame(unsigned char PlayerNum,struct FName SessionName,struct FOnlineGameSearchResult* DesiredGame);//Engine.OnlineGameInterface.JoinMigratedOnlineGame
	void AddGameInviteAcceptedDelegate(unsigned char LocalUserNum,struct FScriptDelegate GameInviteAcceptedDelegate);//Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate
	void ClearArbitrationRegistrationCompleteDelegate(struct FScriptDelegate ArbitrationRegistrationCompleteDelegate);//Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate
	void AddEndOnlineGameCompleteDelegate(struct FScriptDelegate EndOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate
	void AddFindOnlineGamesCompleteDelegate(struct FScriptDelegate FindOnlineGamesCompleteDelegate);//Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate
	void OnGameInviteAccepted(struct FOnlineGameSearchResult* InviteResult);//Engine.OnlineGameInterface.OnGameInviteAccepted
	bool ReadPlatformSpecificSessionInfoBySessionName(struct FName SessionName,unsigned char* PlatformSpecificInfo);//Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName
	void ClearMigrateOnlineGameCompleteDelegate(struct FScriptDelegate MigrateOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.ClearMigrateOnlineGameCompleteDelegate
	bool MigrateOnlineGame(unsigned char HostingPlayerNum,struct FName SessionName);//Engine.OnlineGameInterface.MigrateOnlineGame
	void ClearDestroyOnlineGameCompleteDelegate(struct FScriptDelegate DestroyOnlineGameCompleteDelegate);//Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate
	void OnStartOnlineGameComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineGameInterface.OnStartOnlineGameComplete
	bool UpdateOnlineGame(struct FName SessionName,class UOnlineGameSettings* UpdatedGameSettings,bool bShouldRefreshOnlineData);//Engine.OnlineGameInterface.UpdateOnlineGame
	bool QueryNonAdvertisedData(int StartAt,int NumberToQuery);//Engine.OnlineGameInterface.QueryNonAdvertisedData
};
UClass* UOnlineGameInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineNewsInterface[0x1CFFE8C0]
class UOnlineNewsInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineNewsInterface");
		return pClassPointer;
	};

public:
	void ClearReadNewsCompletedDelegate(struct FScriptDelegate ReadNewsDelegate);//Engine.OnlineNewsInterface.ClearReadNewsCompletedDelegate
	void OnReadNewsCompleted(bool bWasSuccessful,unsigned char NewsType);//Engine.OnlineNewsInterface.OnReadNewsCompleted
	struct FString GetNews(unsigned char LocalUserNum,unsigned char NewsType);//Engine.OnlineNewsInterface.GetNews
	bool ReadNews(unsigned char LocalUserNum,unsigned char NewsType);//Engine.OnlineNewsInterface.ReadNews
	void AddReadNewsCompletedDelegate(struct FScriptDelegate ReadNewsDelegate);//Engine.OnlineNewsInterface.AddReadNewsCompletedDelegate
};
UClass* UOnlineNewsInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlinePartyChatInterface[0x1CFFE790]
class UOnlinePartyChatInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlinePartyChatInterface");
		return pClassPointer;
	};

public:
	void ClearSendPartyGameInvitesCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate SendPartyGameInvitesCompleteDelegate);//Engine.OnlinePartyChatInterface.ClearSendPartyGameInvitesCompleteDelegate
	void AddSendPartyGameInvitesCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate SendPartyGameInvitesCompleteDelegate);//Engine.OnlinePartyChatInterface.AddSendPartyGameInvitesCompleteDelegate
	void AddPartyMemberListChangedDelegate(unsigned char LocalUserNum,struct FScriptDelegate PartyMemberListChangedDelegate);//Engine.OnlinePartyChatInterface.AddPartyMemberListChangedDelegate
	bool SendPartyGameInvites(unsigned char LocalUserNum);//Engine.OnlinePartyChatInterface.SendPartyGameInvites
	void ClearPartyMembersInfoChangedDelegate(unsigned char LocalUserNum,struct FScriptDelegate PartyMembersInfoChangedDelegate);//Engine.OnlinePartyChatInterface.ClearPartyMembersInfoChangedDelegate
	int GetPartyBandwidth();//Engine.OnlinePartyChatInterface.GetPartyBandwidth
	bool ShowCommunitySessionsUI(unsigned char LocalUserNum);//Engine.OnlinePartyChatInterface.ShowCommunitySessionsUI
	void OnSendPartyGameInvitesComplete(bool bWasSuccessful);//Engine.OnlinePartyChatInterface.OnSendPartyGameInvitesComplete
	void OnPartyMembersInfoChanged(struct FString PlayerName,struct FUniqueNetId PlayerID,int CustomData1,int CustomData2,int CustomData3,int CustomData4);//Engine.OnlinePartyChatInterface.OnPartyMembersInfoChanged
	void AddPartyMembersInfoChangedDelegate(unsigned char LocalUserNum,struct FScriptDelegate PartyMembersInfoChangedDelegate);//Engine.OnlinePartyChatInterface.AddPartyMembersInfoChangedDelegate
	bool GetPartyMemberInformation(struct FUniqueNetId MemberId,struct FOnlinePartyMember* PartyMember);//Engine.OnlinePartyChatInterface.GetPartyMemberInformation
	bool ShowVoiceChannelUI(unsigned char LocalUserNum);//Engine.OnlinePartyChatInterface.ShowVoiceChannelUI
	bool SetPartyMemberCustomData(unsigned char LocalUserNum,int Data1,int Data2,int Data3,int Data4);//Engine.OnlinePartyChatInterface.SetPartyMemberCustomData
	bool GetPartyMembersInformation(TArray<struct FOnlinePartyMember>* PartyMembers);//Engine.OnlinePartyChatInterface.GetPartyMembersInformation
	bool ShowPartyUI(unsigned char LocalUserNum);//Engine.OnlinePartyChatInterface.ShowPartyUI
	void OnPartyMemberListChanged(bool bJoinedOrLeft,struct FString PlayerName,struct FUniqueNetId PlayerID);//Engine.OnlinePartyChatInterface.OnPartyMemberListChanged
	void ClearPartyMemberListChangedDelegate(unsigned char LocalUserNum,struct FScriptDelegate PartyMemberListChangedDelegate);//Engine.OnlinePartyChatInterface.ClearPartyMemberListChangedDelegate
	bool IsInPartyChat(unsigned char LocalUserNum);//Engine.OnlinePartyChatInterface.IsInPartyChat
};
UClass* UOnlinePartyChatInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlinePlayerInterface[0x1CFFE660]
class UOnlinePlayerInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlinePlayerInterface");
		return pClassPointer;
	};

public:
	void ClearWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate WriteProfileSettingsCompleteDelegate);//Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate
	bool JoinFriendGame(unsigned char LocalUserNum,struct FUniqueNetId Friend);//Engine.OnlinePlayerInterface.JoinFriendGame
	void ClearJoinFriendGameCompleteDelegate(struct FScriptDelegate JoinFriendGameCompleteDelegate);//Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate
	void AddLoginCancelledDelegate(struct FScriptDelegate CancelledDelegate);//Engine.OnlinePlayerInterface.AddLoginCancelledDelegate
	bool SendMessageToFriend(unsigned char LocalUserNum,struct FUniqueNetId Friend,struct FString Message);//Engine.OnlinePlayerInterface.SendMessageToFriend
	bool IsFriend(unsigned char LocalUserNum,struct FUniqueNetId PlayerID);//Engine.OnlinePlayerInterface.IsFriend
	void OnReceivedGameInvite(unsigned char LocalUserNum,struct FString InviterName);//Engine.OnlinePlayerInterface.OnReceivedGameInvite
	void AddWritePlayerStorageCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate WritePlayerStorageCompleteDelegate);//Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate
	void AddUnlockAchievementCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate UnlockAchievementCompleteDelegate);//Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate
	void ClearKeyboardInputDoneDelegate(struct FScriptDelegate InputDelegate);//Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate
	void AddReceivedGameInviteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReceivedGameInviteDelegate);//Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate
	void AddFriendInviteReceivedDelegate(unsigned char LocalUserNum,struct FScriptDelegate InviteDelegate);//Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate
	void OnFriendMessageReceived(unsigned char LocalUserNum,struct FUniqueNetId SendingPlayer,struct FString SendingNick,struct FString Message);//Engine.OnlinePlayerInterface.OnFriendMessageReceived
	void SetOnlineStatus(unsigned char LocalUserNum,int StatusId,TArray<struct FLocalizedStringSetting>* LocalizedStringSettings,TArray<struct FSettingsProperty>* Properties);//Engine.OnlinePlayerInterface.SetOnlineStatus
	bool AcceptFriendInvite(unsigned char LocalUserNum,struct FUniqueNetId RequestingPlayer);//Engine.OnlinePlayerInterface.AcceptFriendInvite
	void OnWritePlayerStorageComplete(unsigned char LocalUserNum,bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete
	bool AreAnyFriends(unsigned char LocalUserNum,TArray<struct FFriendsQuery>* Query);//Engine.OnlinePlayerInterface.AreAnyFriends
	unsigned char CanViewPlayerProfiles(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.CanViewPlayerProfiles
	bool IsLocalLogin(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.IsLocalLogin
	void ClearReadPlayerStorageCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReadPlayerStorageCompleteDelegate);//Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate
	void ClearLoginChangeDelegate(struct FScriptDelegate LoginDelegate);//Engine.OnlinePlayerInterface.ClearLoginChangeDelegate
	void AddAddFriendByNameCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate FriendDelegate);//Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate
	void AddLoginStatusChangeDelegate(struct FScriptDelegate LoginStatusDelegate,unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate
	void OnWriteProfileSettingsComplete(unsigned char LocalUserNum,bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete
	void ClearAddFriendByNameCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate FriendDelegate);//Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate
	bool AutoLogin();//Engine.OnlinePlayerInterface.AutoLogin
	void ClearFriendsChangeDelegate(unsigned char LocalUserNum,struct FScriptDelegate FriendsDelegate);//Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate
	void ClearFriendMessageReceivedDelegate(unsigned char LocalUserNum,struct FScriptDelegate MessageDelegate);//Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate
	class UOnlinePlayerStorage* GetPlayerStorage(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.GetPlayerStorage
	void AddReadAchievementsCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReadAchievementsCompleteDelegate);//Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate
	void ClearLoginFailedDelegate(unsigned char LocalUserNum,struct FScriptDelegate LoginDelegate);//Engine.OnlinePlayerInterface.ClearLoginFailedDelegate
	void OnReadPlayerStorageComplete(unsigned char LocalUserNum,bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete
	unsigned char GetAchievements(unsigned char LocalUserNum,TArray<struct FAchievementDetails>* Achievements,int TitleId);//Engine.OnlinePlayerInterface.GetAchievements
	bool GetUniquePlayerId(unsigned char LocalUserNum,struct FUniqueNetId* PlayerID);//Engine.OnlinePlayerInterface.GetUniquePlayerId
	void AddLoginChangeDelegate(struct FScriptDelegate LoginDelegate);//Engine.OnlinePlayerInterface.AddLoginChangeDelegate
	bool ShowFriendsUI(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.ShowFriendsUI
	bool DeleteMessage(unsigned char LocalUserNum,int MessageIndex);//Engine.OnlinePlayerInterface.DeleteMessage
	bool Logout(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.Logout
	void OnLoginFailed(unsigned char LocalUserNum,unsigned char ErrorCode);//Engine.OnlinePlayerInterface.OnLoginFailed
	void AddMutingChangeDelegate(struct FScriptDelegate MutingDelegate);//Engine.OnlinePlayerInterface.AddMutingChangeDelegate
	bool AddFriend(unsigned char LocalUserNum,struct FUniqueNetId NewFriend,struct FString Message);//Engine.OnlinePlayerInterface.AddFriend
	void GetFriendMessages(unsigned char LocalUserNum,TArray<struct FOnlineFriendMessage>* FriendMessages);//Engine.OnlinePlayerInterface.GetFriendMessages
	void OnReadAchievementsComplete(int TitleId);//Engine.OnlinePlayerInterface.OnReadAchievementsComplete
	void OnReadFriendsComplete(bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnReadFriendsComplete
	void ClearMutingChangeDelegate(struct FScriptDelegate MutingDelegate);//Engine.OnlinePlayerInterface.ClearMutingChangeDelegate
	bool ReadPlayerStorage(unsigned char LocalUserNum,class UOnlinePlayerStorage* PlayerStorage,int DeviceID);//Engine.OnlinePlayerInterface.ReadPlayerStorage
	void AddReadFriendsCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReadFriendsCompleteDelegate);//Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate
	void ClearReadPlayerStorageForNetIdCompleteDelegate(struct FUniqueNetId NetId,struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate);//Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate
	void AddLoginFailedDelegate(unsigned char LocalUserNum,struct FScriptDelegate LoginDelegate);//Engine.OnlinePlayerInterface.AddLoginFailedDelegate
	void ClearFriendInviteReceivedDelegate(unsigned char LocalUserNum,struct FScriptDelegate InviteDelegate);//Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate
	bool WriteProfileSettings(unsigned char LocalUserNum,class UOnlineProfileSettings* ProfileSettings);//Engine.OnlinePlayerInterface.WriteProfileSettings
	void ClearLoginCancelledDelegate(struct FScriptDelegate CancelledDelegate);//Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate
	bool DenyFriendInvite(unsigned char LocalUserNum,struct FUniqueNetId RequestingPlayer);//Engine.OnlinePlayerInterface.DenyFriendInvite
	void ClearReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReadProfileSettingsCompleteDelegate);//Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate
	void OnLoginStatusChange(unsigned char NewStatus,struct FUniqueNetId NewId);//Engine.OnlinePlayerInterface.OnLoginStatusChange
	unsigned char GetLoginStatus(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.GetLoginStatus
	void AddLogoutCompletedDelegate(unsigned char LocalUserNum,struct FScriptDelegate LogoutDelegate);//Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate
	bool WritePlayerStorage(unsigned char LocalUserNum,class UOnlinePlayerStorage* PlayerStorage,int DeviceID);//Engine.OnlinePlayerInterface.WritePlayerStorage
	bool IsMuted(unsigned char LocalUserNum,struct FUniqueNetId PlayerID);//Engine.OnlinePlayerInterface.IsMuted
	void OnUnlockAchievementComplete(bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnUnlockAchievementComplete
	void OnAddFriendByNameComplete(bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnAddFriendByNameComplete
	void OnReadProfileSettingsComplete(unsigned char LocalUserNum,bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete
	void OnLoginCancelled();//Engine.OnlinePlayerInterface.OnLoginCancelled
	bool ReadAchievements(unsigned char LocalUserNum,int TitleId,bool bShouldReadText,bool bShouldReadImages);//Engine.OnlinePlayerInterface.ReadAchievements
	unsigned char CanCommunicate(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.CanCommunicate
	void ClearUnlockAchievementCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate UnlockAchievementCompleteDelegate);//Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate
	unsigned char CanPurchaseContent(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.CanPurchaseContent
	bool ReadPlayerStorageForNetId(unsigned char LocalUserNum,struct FUniqueNetId NetId,class UOnlinePlayerStorage* PlayerStorage);//Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId
	struct FString GetPlayerNickname(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.GetPlayerNickname
	void OnLoginChange(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.OnLoginChange
	void AddReadPlayerStorageForNetIdCompleteDelegate(struct FUniqueNetId NetId,struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate);//Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate
	bool AddFriendByName(unsigned char LocalUserNum,struct FString FriendName,struct FString Message);//Engine.OnlinePlayerInterface.AddFriendByName
	void AddKeyboardInputDoneDelegate(struct FScriptDelegate InputDelegate);//Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate
	void ClearWritePlayerStorageCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate WritePlayerStorageCompleteDelegate);//Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate
	unsigned char CanPlayOnline(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.CanPlayOnline
	void OnFriendInviteReceived(unsigned char LocalUserNum,struct FUniqueNetId RequestingPlayer,struct FString RequestingNick,struct FString Message);//Engine.OnlinePlayerInterface.OnFriendInviteReceived
	void OnMutingChange();//Engine.OnlinePlayerInterface.OnMutingChange
	bool ReadFriendsList(unsigned char LocalUserNum,int Count,int StartingAt);//Engine.OnlinePlayerInterface.ReadFriendsList
	void OnJoinFriendGameComplete(bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnJoinFriendGameComplete
	bool SendGameInviteToFriends(unsigned char LocalUserNum,TArray<struct FUniqueNetId> Friends,struct FString Text);//Engine.OnlinePlayerInterface.SendGameInviteToFriends
	void ClearReadAchievementsCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReadAchievementsCompleteDelegate);//Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate
	bool ShowKeyboardUI(unsigned char LocalUserNum,struct FString TitleText,struct FString DescriptionText,bool bIsPassword,bool bShouldValidate,struct FString DefaultText,int MaxResultLength);//Engine.OnlinePlayerInterface.ShowKeyboardUI
	struct FString GetKeyboardInputResults(unsigned char* bWasCanceled);//Engine.OnlinePlayerInterface.GetKeyboardInputResults
	void ClearReadFriendsCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReadFriendsCompleteDelegate);//Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate
	void OnFriendsChange();//Engine.OnlinePlayerInterface.OnFriendsChange
	unsigned char GetFriendsList(unsigned char LocalUserNum,TArray<struct FOnlineFriend>* Friends,int Count,int StartingAt);//Engine.OnlinePlayerInterface.GetFriendsList
	void ClearLogoutCompletedDelegate(unsigned char LocalUserNum,struct FScriptDelegate LogoutDelegate);//Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate
	void OnLogoutCompleted(bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnLogoutCompleted
	void AddJoinFriendGameCompleteDelegate(struct FScriptDelegate JoinFriendGameCompleteDelegate);//Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate
	bool RemoveFriend(unsigned char LocalUserNum,struct FUniqueNetId FormerFriend);//Engine.OnlinePlayerInterface.RemoveFriend
	bool UnlockAchievement(unsigned char LocalUserNum,int AchievementId,float PercentComplete);//Engine.OnlinePlayerInterface.UnlockAchievement
	void ClearLoginStatusChangeDelegate(struct FScriptDelegate LoginStatusDelegate,unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate
	class UOnlineProfileSettings* GetProfileSettings(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.GetProfileSettings
	unsigned char CanShowPresenceInformation(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.CanShowPresenceInformation
	void AddFriendMessageReceivedDelegate(unsigned char LocalUserNum,struct FScriptDelegate MessageDelegate);//Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate
	bool IsGuestLogin(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.IsGuestLogin
	void OnKeyboardInputComplete(bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnKeyboardInputComplete
	void AddFriendsChangeDelegate(unsigned char LocalUserNum,struct FScriptDelegate FriendsDelegate);//Engine.OnlinePlayerInterface.AddFriendsChangeDelegate
	void AddReadPlayerStorageCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReadPlayerStorageCompleteDelegate);//Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate
	void AddReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReadProfileSettingsCompleteDelegate);//Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate
	void OnReadPlayerStorageForNetIdComplete(struct FUniqueNetId NetId,bool bWasSuccessful);//Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete
	unsigned char CanDownloadUserContent(unsigned char LocalUserNum);//Engine.OnlinePlayerInterface.CanDownloadUserContent
	bool ShowLoginUI(bool bShowOnlineOnly);//Engine.OnlinePlayerInterface.ShowLoginUI
	bool ReadProfileSettings(unsigned char LocalUserNum,class UOnlineProfileSettings* ProfileSettings);//Engine.OnlinePlayerInterface.ReadProfileSettings
	bool SendGameInviteToFriend(unsigned char LocalUserNum,struct FUniqueNetId Friend,struct FString Text);//Engine.OnlinePlayerInterface.SendGameInviteToFriend
	bool Login(unsigned char LocalUserNum,struct FString LoginName,struct FString Password,bool bWantsLocalOnly);//Engine.OnlinePlayerInterface.Login
	void AddWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate WriteProfileSettingsCompleteDelegate);//Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate
	void ClearReceivedGameInviteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReceivedGameInviteDelegate);//Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate
};
UClass* UOnlinePlayerInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlinePlayerInterfaceEx[0x1CFFE530]
class UOnlinePlayerInterfaceEx : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlinePlayerInterfaceEx");
		return pClassPointer;
	};

public:
	bool ShowPlayersUI(unsigned char LocalUserNum);//Engine.OnlinePlayerInterfaceEx.ShowPlayersUI
	bool ShowFriendsInviteUI(unsigned char LocalUserNum,struct FUniqueNetId PlayerID);//Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI
	bool ShowMembershipMarketplaceUI(unsigned char LocalUserNum);//Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI
	bool ShowGamerCardUI(unsigned char LocalUserNum,struct FUniqueNetId PlayerID);//Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI
	void ClearProfileDataChangedDelegate(unsigned char LocalUserNum,struct FScriptDelegate ProfileDataChangedDelegate);//Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate
	void OnDeviceSelectionComplete(bool bWasSuccessful);//Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete
	bool ShowContentMarketplaceUI(unsigned char LocalUserNum,int CategoryMask,int OfferId);//Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI
	void OnProfileDataChanged();//Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged
	bool ShowCustomPlayersUI(unsigned char LocalUserNum,TArray<struct FUniqueNetId>* Players,struct FString Title,struct FString Description);//Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI
	void ClearReadCrossTitleProfileSettingsCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReadProfileSettingsCompleteDelegate);//Engine.OnlinePlayerInterfaceEx.ClearReadCrossTitleProfileSettingsCompleteDelegate
	bool ShowCustomMessageUI(unsigned char LocalUserNum,TArray<struct FUniqueNetId>* Recipients,struct FString MessageTitle,struct FString NonEditableMessage,struct FString EditableMessage);//Engine.OnlinePlayerInterfaceEx.ShowCustomMessageUI
	bool ShowInviteUI(unsigned char LocalUserNum,struct FString InviteText);//Engine.OnlinePlayerInterfaceEx.ShowInviteUI
	bool ReadCrossTitleProfileSettings(unsigned char LocalUserNum,int TitleId,class UOnlineProfileSettings* ProfileSettings);//Engine.OnlinePlayerInterfaceEx.ReadCrossTitleProfileSettings
	int GetDeviceSelectionResults(unsigned char LocalUserNum,struct FString* DeviceName);//Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults
	bool UnlockAvatarAward(unsigned char LocalUserNum,int AvatarItemId);//Engine.OnlinePlayerInterfaceEx.UnlockAvatarAward
	void AddDeviceSelectionDoneDelegate(unsigned char LocalUserNum,struct FScriptDelegate DeviceDelegate);//Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate
	bool IsDeviceValid(int DeviceID,int SizeNeeded);//Engine.OnlinePlayerInterfaceEx.IsDeviceValid
	bool ShowFeedbackUI(unsigned char LocalUserNum,struct FUniqueNetId PlayerID);//Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI
	void AddProfileDataChangedDelegate(unsigned char LocalUserNum,struct FScriptDelegate ProfileDataChangedDelegate);//Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate
	void OnReadCrossTitleProfileSettingsComplete(unsigned char LocalUserNum,int TitleId,bool bWasSuccessful);//Engine.OnlinePlayerInterfaceEx.OnReadCrossTitleProfileSettingsComplete
	bool ShowAchievementsUI(unsigned char LocalUserNum);//Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI
	bool UnlockGamerPicture(unsigned char LocalUserNum,int PictureId);//Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture
	void AddReadCrossTitleProfileSettingsCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate ReadProfileSettingsCompleteDelegate);//Engine.OnlinePlayerInterfaceEx.AddReadCrossTitleProfileSettingsCompleteDelegate
	class UOnlineProfileSettings* GetCrossTitleProfileSettings(unsigned char LocalUserNum,int TitleId);//Engine.OnlinePlayerInterfaceEx.GetCrossTitleProfileSettings
	void ClearCrossTitleProfileSettings(unsigned char LocalUserNum,int TitleId);//Engine.OnlinePlayerInterfaceEx.ClearCrossTitleProfileSettings
	bool ShowDeviceSelectionUI(unsigned char LocalUserNum,int SizeNeeded,bool bManageStorage);//Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI
	bool ShowMessagesUI(unsigned char LocalUserNum);//Engine.OnlinePlayerInterfaceEx.ShowMessagesUI
	void ClearDeviceSelectionDoneDelegate(unsigned char LocalUserNum,struct FScriptDelegate DeviceDelegate);//Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate
};
UClass* UOnlinePlayerInterfaceEx::pClassPointer = NULL;

//0x000024 (0x000098 - 0x000074)
//OnlinePlaylistGameTypeProvider[0x1CFFE400]
class UOnlinePlaylistGameTypeProvider : public UUIResourceDataProvider
{
public:
	struct FName                                       PlaylistGameTypeName;                             		// 0x000074 (0x0008)              
	struct FString                                     DisplayName;                                      		// 0x00007C (0x000C)              
	struct FString                                     Description;                                      		// 0x000088 (0x000C)              
	int                                                GameTypeId;                                       		// 0x000094 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlinePlaylistGameTypeProvider");
		return pClassPointer;
	};
};
UClass* UOnlinePlaylistGameTypeProvider::pClassPointer = NULL;

//0x000048 (0x000088 - 0x000040)
//OnlineRecentPlayersList[0x1CFFE2D0]
class UOnlineRecentPlayersList : public UObject
{
public:
	TArray<struct FUniqueNetId>                        RecentPlayers;                                    		// 0x000040 (0x000C)              
	TArray<struct FRecentParty>                        RecentParties;                                    		// 0x00004C (0x000C)              
	struct FRecentParty                                LastParty;                                        		// 0x000058 (0x0014)              
	int                                                MaxRecentPlayers;                                 		// 0x00006C (0x0004)              
	int                                                MaxRecentParties;                                 		// 0x000070 (0x0004)              
	int                                                RecentPlayersAddIndex;                            		// 0x000074 (0x0004)              
	int                                                RecentPartiesAddIndex;                            		// 0x000078 (0x0004)              
	TArray<struct FCurrentPlayerMet>                   CurrentPlayers;                                   		// 0x00007C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineRecentPlayersList");
		return pClassPointer;
	};

public:
	int GetSkillForCurrentPlayer(struct FUniqueNetId Player);//Engine.OnlineRecentPlayersList.GetSkillForCurrentPlayer
	void SetLastParty(struct FUniqueNetId PartyLeader,TArray<struct FUniqueNetId>* PartyMembers);//Engine.OnlineRecentPlayersList.SetLastParty
	void ClearRecentPlayers();//Engine.OnlineRecentPlayersList.ClearRecentPlayers
	void ClearRecentParties();//Engine.OnlineRecentPlayersList.ClearRecentParties
	void DumpPlayersList(TArray<struct FCurrentPlayerMet>* Players);//Engine.OnlineRecentPlayersList.DumpPlayersList
	bool ShowRecentPartiesPlayerList(unsigned char LocalUserNum,struct FString Title,struct FString Description);//Engine.OnlineRecentPlayersList.ShowRecentPartiesPlayerList
	void SetCurrentPlayersList(TArray<struct FCurrentPlayerMet> Players);//Engine.OnlineRecentPlayersList.SetCurrentPlayersList
	int GetCurrentPlayersListCount();//Engine.OnlineRecentPlayersList.GetCurrentPlayersListCount
	bool ShowCurrentPlayersList(unsigned char LocalUserNum,struct FString Title,struct FString Description);//Engine.OnlineRecentPlayersList.ShowCurrentPlayersList
	bool ShowRecentPlayerList(unsigned char LocalUserNum,struct FString Title,struct FString Description);//Engine.OnlineRecentPlayersList.ShowRecentPlayerList
	void GetPlayersFromCurrentPlayers(TArray<struct FUniqueNetId>* Players);//Engine.OnlineRecentPlayersList.GetPlayersFromCurrentPlayers
	void DumpCurrentPlayers();//Engine.OnlineRecentPlayersList.DumpCurrentPlayers
	void AddPartyToRecentParties(struct FUniqueNetId PartyLeader,TArray<struct FUniqueNetId>* PartyMembers);//Engine.OnlineRecentPlayersList.AddPartyToRecentParties
	int GetTeamForCurrentPlayer(struct FUniqueNetId Player);//Engine.OnlineRecentPlayersList.GetTeamForCurrentPlayer
	void GetPlayersFromRecentParties(TArray<struct FUniqueNetId>* Players);//Engine.OnlineRecentPlayersList.GetPlayersFromRecentParties
	void AddPlayerToRecentPlayers(struct FUniqueNetId NewPlayer);//Engine.OnlineRecentPlayersList.AddPlayerToRecentPlayers
	bool ShowLastPartyPlayerList(unsigned char LocalUserNum,struct FString Title,struct FString Description);//Engine.OnlineRecentPlayersList.ShowLastPartyPlayerList
};
UClass* UOnlineRecentPlayersList::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineSocialInterface[0x1CFFE1A0]
class UOnlineSocialInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineSocialInterface");
		return pClassPointer;
	};

public:
	void ClearPostImageCompleted(unsigned char LocalUserNum,struct FScriptDelegate PostImageDelegate);//Engine.OnlineSocialInterface.ClearPostImageCompleted
	void OnQuerySocialPostPrivilegesCompleted(bool bWasSuccessful,struct FSocialPostPrivileges PostPrivileges);//Engine.OnlineSocialInterface.OnQuerySocialPostPrivilegesCompleted
	void AddPostLinkCompleted(unsigned char LocalUserNum,struct FScriptDelegate PostLinkDelegate);//Engine.OnlineSocialInterface.AddPostLinkCompleted
	void OnPostImageCompleted(unsigned char LocalUserNum,bool bWasSuccessful);//Engine.OnlineSocialInterface.OnPostImageCompleted
	bool QuerySocialPostPrivileges();//Engine.OnlineSocialInterface.QuerySocialPostPrivileges
	void ClearPostLinkCompleted(unsigned char LocalUserNum,struct FScriptDelegate PostLinkDelegate);//Engine.OnlineSocialInterface.ClearPostLinkCompleted
	void AddQuerySocialPostPrivilegesCompleted(struct FScriptDelegate PostPrivilegesDelegate);//Engine.OnlineSocialInterface.AddQuerySocialPostPrivilegesCompleted
	void ClearQuerySocialPostPrivilegesCompleted(struct FScriptDelegate PostPrivilegesDelegate);//Engine.OnlineSocialInterface.ClearQuerySocialPostPrivilegesCompleted
	void OnPostLinkCompleted(unsigned char LocalUserNum,bool bWasSuccessful);//Engine.OnlineSocialInterface.OnPostLinkCompleted
	bool PostLink(unsigned char LocalUserNum,struct FSocialPostLinkInfo* PostLinkInfo);//Engine.OnlineSocialInterface.PostLink
	bool PostImage(unsigned char LocalUserNum,struct FSocialPostImageInfo* PostImageInfo,TArray<unsigned char> FullImage);//Engine.OnlineSocialInterface.PostImage
	void AddPostImageCompleted(unsigned char LocalUserNum,struct FScriptDelegate PostImageDelegate);//Engine.OnlineSocialInterface.AddPostImageCompleted
};
UClass* UOnlineSocialInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineStatsInterface[0x1CFFE070]
class UOnlineStatsInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineStatsInterface");
		return pClassPointer;
	};

public:
	bool ReadOnlineStatsForFriends(unsigned char LocalUserNum,class UOnlineStatsRead* StatsRead);//Engine.OnlineStatsInterface.ReadOnlineStatsForFriends
	void CalcAggregateSkill(TArray<double> Mus,TArray<double> Sigmas,double* OutAggregateMu,double* OutAggregateSigma);//Engine.OnlineStatsInterface.CalcAggregateSkill
	bool ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead,int StartIndex,int NumToRead);//Engine.OnlineStatsInterface.ReadOnlineStatsByRank
	void ClearRegisterHostStatGuidCompleteDelegateDelegate(struct FScriptDelegate RegisterHostStatGuidCompleteDelegate);//Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate
	void AddFlushOnlineStatsCompleteDelegate(struct FScriptDelegate FlushOnlineStatsCompleteDelegate);//Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate
	void AddReadOnlineStatsCompleteDelegate(struct FScriptDelegate ReadOnlineStatsCompleteDelegate);//Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate
	bool ReadOnlineStats(TArray<struct FUniqueNetId>* Players,class UOnlineStatsRead* StatsRead);//Engine.OnlineStatsInterface.ReadOnlineStats
	bool RegisterHostStatGuid(struct FString* HostStatGuid);//Engine.OnlineStatsInterface.RegisterHostStatGuid
	bool ReadOnlineStatsByRankAroundPlayer(unsigned char LocalUserNum,class UOnlineStatsRead* StatsRead,int NumRows);//Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer
	void OnReadOnlineStatsComplete(bool bWasSuccessful);//Engine.OnlineStatsInterface.OnReadOnlineStatsComplete
	void OnFlushOnlineStatsComplete(struct FName SessionName,bool bWasSuccessful);//Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete
	void ClearReadOnlineStatsCompleteDelegate(struct FScriptDelegate ReadOnlineStatsCompleteDelegate);//Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate
	void ClearFlushOnlineStatsCompleteDelegate(struct FScriptDelegate FlushOnlineStatsCompleteDelegate);//Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate
	bool FlushOnlineStats(struct FName SessionName);//Engine.OnlineStatsInterface.FlushOnlineStats
	bool RegisterStatGuid(struct FUniqueNetId PlayerID,struct FString* ClientStatGuid);//Engine.OnlineStatsInterface.RegisterStatGuid
	bool WriteOnlineStats(struct FName SessionName,struct FUniqueNetId Player,class UOnlineStatsWrite* StatsWrite);//Engine.OnlineStatsInterface.WriteOnlineStats
	struct FString GetClientStatGuid();//Engine.OnlineStatsInterface.GetClientStatGuid
	void FreeStats(class UOnlineStatsRead* StatsRead);//Engine.OnlineStatsInterface.FreeStats
	bool WriteOnlinePlayerScores(struct FName SessionName,int LeaderboardId,TArray<struct FOnlinePlayerScore>* PlayerScores);//Engine.OnlineStatsInterface.WriteOnlinePlayerScores
	void OnRegisterHostStatGuidComplete(bool bWasSuccessful);//Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete
	void AddRegisterHostStatGuidCompleteDelegate(struct FScriptDelegate RegisterHostStatGuidCompleteDelegate);//Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate
	struct FString GetHostStatGuid();//Engine.OnlineStatsInterface.GetHostStatGuid
};
UClass* UOnlineStatsInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineSuppliedUIInterface[0x1CFFDF40]
class UOnlineSuppliedUIInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineSuppliedUIInterface");
		return pClassPointer;
	};

public:
	bool ShowOnlineStatsUI(TArray<struct FUniqueNetId>* Players,class UOnlineStatsRead* StatsRead);//Engine.OnlineSuppliedUIInterface.ShowOnlineStatsUI
	void ClearShowOnlineStatsUICompleteDelegate(struct FScriptDelegate ShowOnlineStatsUICompleteDelegate);//Engine.OnlineSuppliedUIInterface.ClearShowOnlineStatsUICompleteDelegate
	void AddShowOnlineStatsUICompleteDelegate(struct FScriptDelegate ShowOnlineStatsUICompleteDelegate);//Engine.OnlineSuppliedUIInterface.AddShowOnlineStatsUICompleteDelegate
	bool ShowMatchmakingUI(unsigned char SearchingPlayerNum,class UOnlineGameSearch* SearchSettings,class UOnlineGameSettings* GameSettings);//Engine.OnlineSuppliedUIInterface.ShowMatchmakingUI
	void OnShowOnlineStatsUIComplete();//Engine.OnlineSuppliedUIInterface.OnShowOnlineStatsUIComplete
};
UClass* UOnlineSuppliedUIInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineSystemInterface[0x1CFFDE10]
class UOnlineSystemInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineSystemInterface");
		return pClassPointer;
	};

public:
	void AddExternalUIChangeDelegate(struct FScriptDelegate ExternalUIDelegate);//Engine.OnlineSystemInterface.AddExternalUIChangeDelegate
	void OnLinkStatusChange(bool bIsConnected);//Engine.OnlineSystemInterface.OnLinkStatusChange
	void ClearStorageDeviceChangeDelegate(struct FScriptDelegate StorageDeviceChangeDelegate);//Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate
	int GetLocale();//Engine.OnlineSystemInterface.GetLocale
	void AddConnectionStatusChangeDelegate(struct FScriptDelegate ConnectionStatusDelegate);//Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate
	void AddLinkStatusChangeDelegate(struct FScriptDelegate LinkStatusDelegate);//Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate
	unsigned char GetNetworkNotificationPosition();//Engine.OnlineSystemInterface.GetNetworkNotificationPosition
	void ClearLinkStatusChangeDelegate(struct FScriptDelegate LinkStatusDelegate);//Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate
	bool IsControllerConnected(int ControllerId);//Engine.OnlineSystemInterface.IsControllerConnected
	void SetNetworkNotificationPosition(unsigned char NewPos);//Engine.OnlineSystemInterface.SetNetworkNotificationPosition
	unsigned char GetNATType();//Engine.OnlineSystemInterface.GetNATType
	void ClearControllerChangeDelegate(struct FScriptDelegate ControllerChangeDelegate);//Engine.OnlineSystemInterface.ClearControllerChangeDelegate
	void OnStorageDeviceChange();//Engine.OnlineSystemInterface.OnStorageDeviceChange
	void ClearConnectionStatusChangeDelegate(struct FScriptDelegate ConnectionStatusDelegate);//Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate
	void OnConnectionStatusChange(unsigned char ConnectionStatus);//Engine.OnlineSystemInterface.OnConnectionStatusChange
	void AddControllerChangeDelegate(struct FScriptDelegate ControllerChangeDelegate);//Engine.OnlineSystemInterface.AddControllerChangeDelegate
	void ClearExternalUIChangeDelegate(struct FScriptDelegate ExternalUIDelegate);//Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate
	void OnExternalUIChange(bool bIsOpening);//Engine.OnlineSystemInterface.OnExternalUIChange
	void AddStorageDeviceChangeDelegate(struct FScriptDelegate StorageDeviceChangeDelegate);//Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate
	void OnControllerChange(int ControllerId,bool bIsConnected);//Engine.OnlineSystemInterface.OnControllerChange
	bool HasLinkConnection();//Engine.OnlineSystemInterface.HasLinkConnection
};
UClass* UOnlineSystemInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineTitleFileCacheInterface[0x1CFFDCE0]
class UOnlineTitleFileCacheInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineTitleFileCacheInterface");
		return pClassPointer;
	};

public:
	bool SaveTitleFile(struct FString Filename,struct FString LogicalName,TArray<unsigned char> FileContents);//Engine.OnlineTitleFileCacheInterface.SaveTitleFile
	bool DeleteTitleFiles(float MaxAgeSeconds);//Engine.OnlineTitleFileCacheInterface.DeleteTitleFiles
	unsigned char GetTitleFileState(struct FString Filename);//Engine.OnlineTitleFileCacheInterface.GetTitleFileState
	bool GetTitleFileContents(struct FString Filename,TArray<unsigned char>* FileContents);//Engine.OnlineTitleFileCacheInterface.GetTitleFileContents
	bool ClearCachedFile(struct FString Filename);//Engine.OnlineTitleFileCacheInterface.ClearCachedFile
	struct FString GetTitleFileLogicalName(struct FString Filename);//Engine.OnlineTitleFileCacheInterface.GetTitleFileLogicalName
	void ClearSaveTitleFileCompleteDelegate(struct FScriptDelegate SaveCompleteDelegate);//Engine.OnlineTitleFileCacheInterface.ClearSaveTitleFileCompleteDelegate
	void OnLoadTitleFileComplete(bool bWasSuccessful,struct FString Filename);//Engine.OnlineTitleFileCacheInterface.OnLoadTitleFileComplete
	void OnSaveTitleFileComplete(bool bWasSuccessful,struct FString Filename);//Engine.OnlineTitleFileCacheInterface.OnSaveTitleFileComplete
	bool ClearCachedFiles();//Engine.OnlineTitleFileCacheInterface.ClearCachedFiles
	struct FString GetTitleFileHash(struct FString Filename);//Engine.OnlineTitleFileCacheInterface.GetTitleFileHash
	void AddSaveTitleFileCompleteDelegate(struct FScriptDelegate SaveCompleteDelegate);//Engine.OnlineTitleFileCacheInterface.AddSaveTitleFileCompleteDelegate
	void AddLoadTitleFileCompleteDelegate(struct FScriptDelegate LoadCompleteDelegate);//Engine.OnlineTitleFileCacheInterface.AddLoadTitleFileCompleteDelegate
	bool LoadTitleFile(struct FString Filename);//Engine.OnlineTitleFileCacheInterface.LoadTitleFile
	bool DeleteTitleFile(struct FString Filename);//Engine.OnlineTitleFileCacheInterface.DeleteTitleFile
	void ClearLoadTitleFileCompleteDelegate(struct FScriptDelegate LoadCompleteDelegate);//Engine.OnlineTitleFileCacheInterface.ClearLoadTitleFileCompleteDelegate
};
UClass* UOnlineTitleFileCacheInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineTitleFileInterface[0x1CFFDBB0]
class UOnlineTitleFileInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineTitleFileInterface");
		return pClassPointer;
	};

public:
	bool ReadTitleFile(struct FString FileToRead);//Engine.OnlineTitleFileInterface.ReadTitleFile
	void OnReadTitleFileComplete(bool bWasSuccessful,struct FString Filename);//Engine.OnlineTitleFileInterface.OnReadTitleFileComplete
	unsigned char GetTitleFileState(struct FString Filename);//Engine.OnlineTitleFileInterface.GetTitleFileState
	void AddRequestTitleFileListCompleteDelegate(struct FScriptDelegate RequestTitleFileListDelegate);//Engine.OnlineTitleFileInterface.AddRequestTitleFileListCompleteDelegate
	void AddReadTitleFileCompleteDelegate(struct FScriptDelegate ReadTitleFileCompleteDelegate);//Engine.OnlineTitleFileInterface.AddReadTitleFileCompleteDelegate
	void ClearRequestTitleFileListCompleteDelegate(struct FScriptDelegate RequestTitleFileListDelegate);//Engine.OnlineTitleFileInterface.ClearRequestTitleFileListCompleteDelegate
	bool ClearDownloadedFiles();//Engine.OnlineTitleFileInterface.ClearDownloadedFiles
	void ClearReadTitleFileCompleteDelegate(struct FScriptDelegate ReadTitleFileCompleteDelegate);//Engine.OnlineTitleFileInterface.ClearReadTitleFileCompleteDelegate
	void OnRequestTitleFileListComplete(bool bWasSuccessful,struct FString ResultStr);//Engine.OnlineTitleFileInterface.OnRequestTitleFileListComplete
	bool ClearDownloadedFile(struct FString Filename);//Engine.OnlineTitleFileInterface.ClearDownloadedFile
	bool GetTitleFileContents(struct FString Filename,TArray<unsigned char>* FileContents);//Engine.OnlineTitleFileInterface.GetTitleFileContents
	void RequestTitleFileList();//Engine.OnlineTitleFileInterface.RequestTitleFileList
};
UClass* UOnlineTitleFileInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//OnlineVoiceInterface[0x1CFFDA80]
class UOnlineVoiceInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.OnlineVoiceInterface");
		return pClassPointer;
	};

public:
	void OnPlayerTalkingStateChange(struct FUniqueNetId Player,bool bIsTalking);//Engine.OnlineVoiceInterface.OnPlayerTalkingStateChange
	bool GetRecognitionResults(unsigned char LocalUserNum,TArray<struct FSpeechRecognizedWord>* Words);//Engine.OnlineVoiceInterface.GetRecognitionResults
	bool SelectVocabulary(unsigned char LocalUserNum,int VocabularyId);//Engine.OnlineVoiceInterface.SelectVocabulary
	void StartNetworkedVoice(unsigned char LocalUserNum);//Engine.OnlineVoiceInterface.StartNetworkedVoice
	void ClearPlayerTalkingDelegate(struct FScriptDelegate TalkerDelegate);//Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate
	bool SetSpeechRecognitionObject(unsigned char LocalUserNum,class USpeechRecognition* SpeechRecogObj);//Engine.OnlineVoiceInterface.SetSpeechRecognitionObject
	bool UnregisterRemoteTalker(struct FUniqueNetId PlayerID);//Engine.OnlineVoiceInterface.UnregisterRemoteTalker
	void OnRecognitionComplete();//Engine.OnlineVoiceInterface.OnRecognitionComplete
	bool MuteAll(unsigned char LocalUserNum,bool bAllowFriends);//Engine.OnlineVoiceInterface.MuteAll
	bool IsRemotePlayerTalking(struct FUniqueNetId PlayerID);//Engine.OnlineVoiceInterface.IsRemotePlayerTalking
	bool SetRemoteTalkerPriority(unsigned char LocalUserNum,struct FUniqueNetId PlayerID,int Priority);//Engine.OnlineVoiceInterface.SetRemoteTalkerPriority
	bool UnmuteRemoteTalker(unsigned char LocalUserNum,struct FUniqueNetId PlayerID,bool bIsSystemWide);//Engine.OnlineVoiceInterface.UnmuteRemoteTalker
	bool UnmuteAll(unsigned char LocalUserNum);//Engine.OnlineVoiceInterface.UnmuteAll
	bool RegisterLocalTalker(unsigned char LocalUserNum);//Engine.OnlineVoiceInterface.RegisterLocalTalker
	void AddRecognitionCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate RecognitionDelegate);//Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate
	bool UnregisterLocalTalker(unsigned char LocalUserNum);//Engine.OnlineVoiceInterface.UnregisterLocalTalker
	bool RegisterRemoteTalker(struct FUniqueNetId PlayerID);//Engine.OnlineVoiceInterface.RegisterRemoteTalker
	bool IsHeadsetPresent(unsigned char LocalUserNum);//Engine.OnlineVoiceInterface.IsHeadsetPresent
	void ClearRecognitionCompleteDelegate(unsigned char LocalUserNum,struct FScriptDelegate RecognitionDelegate);//Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate
	bool IsLocalPlayerTalking(unsigned char LocalUserNum);//Engine.OnlineVoiceInterface.IsLocalPlayerTalking
	bool StopSpeechRecognition(unsigned char LocalUserNum);//Engine.OnlineVoiceInterface.StopSpeechRecognition
	bool StartSpeechRecognition(unsigned char LocalUserNum);//Engine.OnlineVoiceInterface.StartSpeechRecognition
	void StopNetworkedVoice(unsigned char LocalUserNum);//Engine.OnlineVoiceInterface.StopNetworkedVoice
	bool MuteRemoteTalker(unsigned char LocalUserNum,struct FUniqueNetId PlayerID,bool bIsSystemWide);//Engine.OnlineVoiceInterface.MuteRemoteTalker
	void AddPlayerTalkingDelegate(struct FScriptDelegate TalkerDelegate);//Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate
};
UClass* UOnlineVoiceInterface::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//PhysicalMaterialSDD[0x1CFFD950]
class UPhysicalMaterialSDD : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PhysicalMaterialSDD");
		return pClassPointer;
	};

public:
	unsigned char CastGraffitiInteractionType(int I);//Engine.PhysicalMaterialSDD.CastGraffitiInteractionType
	unsigned char CastAPBViewportType(int I);//Engine.PhysicalMaterialSDD.CastAPBViewportType
	unsigned char CastHUDWSCharInfo(int I);//Engine.PhysicalMaterialSDD.CastHUDWSCharInfo
	unsigned char CastTimeofDayPeriod(int I);//Engine.PhysicalMaterialSDD.CastTimeofDayPeriod
	unsigned char CastMailSort(int I);//Engine.PhysicalMaterialSDD.CastMailSort
	unsigned char CastModifierType(int I);//Engine.PhysicalMaterialSDD.CastModifierType
	unsigned char CastModifierClass(int I);//Engine.PhysicalMaterialSDD.CastModifierClass
	unsigned char CastMailDuration(int I);//Engine.PhysicalMaterialSDD.CastMailDuration
	unsigned char CastTaskTargetSpecificationMethod(int I);//Engine.PhysicalMaterialSDD.CastTaskTargetSpecificationMethod
	unsigned char CastTaskItemSize(int I);//Engine.PhysicalMaterialSDD.CastTaskItemSize
	unsigned char CastHUDCeremonyMsgType(int I);//Engine.PhysicalMaterialSDD.CastHUDCeremonyMsgType
	unsigned char CastVehiclePositionIndex(int I);//Engine.PhysicalMaterialSDD.CastVehiclePositionIndex
	unsigned char CastPawnHitReaction_Float(int I);//Engine.PhysicalMaterialSDD.CastPawnHitReaction_Float
	unsigned char CastInteractiveActorType(int I);//Engine.PhysicalMaterialSDD.CastInteractiveActorType
	unsigned char CastSpawnVariable(int I);//Engine.PhysicalMaterialSDD.CastSpawnVariable
	unsigned char CastMarketplaceConstant(int I);//Engine.PhysicalMaterialSDD.CastMarketplaceConstant
	unsigned char CastMissionUITrackedValueDisplay(int I);//Engine.PhysicalMaterialSDD.CastMissionUITrackedValueDisplay
	unsigned char CastTaskItemSpecificationMethod(int I);//Engine.PhysicalMaterialSDD.CastTaskItemSpecificationMethod
	unsigned char CastCSAType(int I);//Engine.PhysicalMaterialSDD.CastCSAType
	unsigned char CastTTIPlayerAnimType(int I);//Engine.PhysicalMaterialSDD.CastTTIPlayerAnimType
	unsigned char CastVehicleInteractionAnimation(int I);//Engine.PhysicalMaterialSDD.CastVehicleInteractionAnimation
	unsigned char CastMarketplaceSort(int I);//Engine.PhysicalMaterialSDD.CastMarketplaceSort
	unsigned char CastNameQuery(int I);//Engine.PhysicalMaterialSDD.CastNameQuery
	unsigned char CastTutorialBypassBehaviour(int I);//Engine.PhysicalMaterialSDD.CastTutorialBypassBehaviour
	unsigned char CastTaskItemCategory(int I);//Engine.PhysicalMaterialSDD.CastTaskItemCategory
	unsigned char CastVehicleDriveType(int I);//Engine.PhysicalMaterialSDD.CastVehicleDriveType
	unsigned char CastClanRank(int I);//Engine.PhysicalMaterialSDD.CastClanRank
	unsigned char CastTaskMemberRequirement(int I);//Engine.PhysicalMaterialSDD.CastTaskMemberRequirement
	unsigned char CastDifficultyRating(int I);//Engine.PhysicalMaterialSDD.CastDifficultyRating
	unsigned char CastSpawnConstant(int I);//Engine.PhysicalMaterialSDD.CastSpawnConstant
	unsigned char CastChatTag(int I);//Engine.PhysicalMaterialSDD.CastChatTag
	unsigned char CastLoadingScreenHintDomain(int I);//Engine.PhysicalMaterialSDD.CastLoadingScreenHintDomain
	unsigned char CastCameraConstant(int I);//Engine.PhysicalMaterialSDD.CastCameraConstant
	unsigned char CastInventoryItemCategory(int I);//Engine.PhysicalMaterialSDD.CastInventoryItemCategory
	unsigned char CastMarketplaceInfo(int I);//Engine.PhysicalMaterialSDD.CastMarketplaceInfo
	unsigned char CastHUDInfoBrowser(int I);//Engine.PhysicalMaterialSDD.CastHUDInfoBrowser
	unsigned char CastGameplayEventMutuallyExclusiveGroup(int I);//Engine.PhysicalMaterialSDD.CastGameplayEventMutuallyExclusiveGroup
	unsigned char CastCrimeType(int I);//Engine.PhysicalMaterialSDD.CastCrimeType
	unsigned char CastVehicleGear(int I);//Engine.PhysicalMaterialSDD.CastVehicleGear
	unsigned char CastDirection(int I);//Engine.PhysicalMaterialSDD.CastDirection
	unsigned char CastPawnHitReaction_ConstrainedBoneList(int I);//Engine.PhysicalMaterialSDD.CastPawnHitReaction_ConstrainedBoneList
	unsigned char CastMailConstant(int I);//Engine.PhysicalMaterialSDD.CastMailConstant
	unsigned char CastPvPType(int I);//Engine.PhysicalMaterialSDD.CastPvPType
	unsigned char CastMarketplaceCashType(int I);//Engine.PhysicalMaterialSDD.CastMarketplaceCashType
	unsigned char CastMailDetach(int I);//Engine.PhysicalMaterialSDD.CastMailDetach
	unsigned char CastVehicleSetupType(int I);//Engine.PhysicalMaterialSDD.CastVehicleSetupType
	unsigned char CastHUDPopUpItemRule(int I);//Engine.PhysicalMaterialSDD.CastHUDPopUpItemRule
	unsigned char CastCrimeTargetCategory(int I);//Engine.PhysicalMaterialSDD.CastCrimeTargetCategory
	unsigned char CastPopulation(int I);//Engine.PhysicalMaterialSDD.CastPopulation
	unsigned char CastWarningPromptGroup(int I);//Engine.PhysicalMaterialSDD.CastWarningPromptGroup
	unsigned char CastPawnHitReactionType(int I);//Engine.PhysicalMaterialSDD.CastPawnHitReactionType
	unsigned char CastVehicleUICategory(int I);//Engine.PhysicalMaterialSDD.CastVehicleUICategory
	unsigned char CastModifierStackingSlot(int I);//Engine.PhysicalMaterialSDD.CastModifierStackingSlot
	unsigned char CastNPCCategory(int I);//Engine.PhysicalMaterialSDD.CastNPCCategory
	unsigned char CastPrimitiveType(int I);//Engine.PhysicalMaterialSDD.CastPrimitiveType
	unsigned char CastPedestrianTTIReaction(int I);//Engine.PhysicalMaterialSDD.CastPedestrianTTIReaction
	unsigned char CastHUDMarkerUsage(int I);//Engine.PhysicalMaterialSDD.CastHUDMarkerUsage
	unsigned char CastHUDConstant(int I);//Engine.PhysicalMaterialSDD.CastHUDConstant
	unsigned char CastContextSensitiveActionBase(int I);//Engine.PhysicalMaterialSDD.CastContextSensitiveActionBase
	unsigned char CastTTINPCEndingType(int I);//Engine.PhysicalMaterialSDD.CastTTINPCEndingType
	unsigned char CastVIPAssignmentMethod(int I);//Engine.PhysicalMaterialSDD.CastVIPAssignmentMethod
	unsigned char CastHostingConfigFileCharacterPersistentId(int I);//Engine.PhysicalMaterialSDD.CastHostingConfigFileCharacterPersistentId
	unsigned char CastModifierEffectType(int I);//Engine.PhysicalMaterialSDD.CastModifierEffectType
	unsigned char CastActivityMessageParameterConversion(int I);//Engine.PhysicalMaterialSDD.CastActivityMessageParameterConversion
	unsigned char CastOnFootDeathAnimation(int I);//Engine.PhysicalMaterialSDD.CastOnFootDeathAnimation
	unsigned char CastCSALineCheckType(int I);//Engine.PhysicalMaterialSDD.CastCSALineCheckType
	unsigned char CastTaskOperationCategory(int I);//Engine.PhysicalMaterialSDD.CastTaskOperationCategory
	unsigned char CastMarketplaceAuctionType(int I);//Engine.PhysicalMaterialSDD.CastMarketplaceAuctionType
	unsigned char CastCSAState(int I);//Engine.PhysicalMaterialSDD.CastCSAState
	unsigned char CastNPCWorldEvent(int I);//Engine.PhysicalMaterialSDD.CastNPCWorldEvent
	unsigned char CastGameplayEventCategory(int I);//Engine.PhysicalMaterialSDD.CastGameplayEventCategory
	unsigned char CastHeatFunctionality(int I);//Engine.PhysicalMaterialSDD.CastHeatFunctionality
	unsigned char CastHeatConstant(int I);//Engine.PhysicalMaterialSDD.CastHeatConstant
	unsigned char CastTaskTargetGraffiti(int I);//Engine.PhysicalMaterialSDD.CastTaskTargetGraffiti
	unsigned char CastPvPRule(int I);//Engine.PhysicalMaterialSDD.CastPvPRule
	unsigned char CastActivityMessageLocation(int I);//Engine.PhysicalMaterialSDD.CastActivityMessageLocation
	unsigned char CastTaskItemBatch(int I);//Engine.PhysicalMaterialSDD.CastTaskItemBatch
	unsigned char CastNPCEvent(int I);//Engine.PhysicalMaterialSDD.CastNPCEvent
	unsigned char CastPawnHitReaction_Vector2D(int I);//Engine.PhysicalMaterialSDD.CastPawnHitReaction_Vector2D
	unsigned char CastMarketplaceDuration(int I);//Engine.PhysicalMaterialSDD.CastMarketplaceDuration
	unsigned char CastCameraHandyCamPresetExported(int I);//Engine.PhysicalMaterialSDD.CastCameraHandyCamPresetExported
	unsigned char CastCSAAlignmentType(int I);//Engine.PhysicalMaterialSDD.CastCSAAlignmentType
	unsigned char CastPawnHitReaction_BoneRemapTable(int I);//Engine.PhysicalMaterialSDD.CastPawnHitReaction_BoneRemapTable
	unsigned char CastCameraShakePresetExported(int I);//Engine.PhysicalMaterialSDD.CastCameraShakePresetExported
	unsigned char CastTaskTargetClass(int I);//Engine.PhysicalMaterialSDD.CastTaskTargetClass
	unsigned char CastTaskItemAnimationType(int I);//Engine.PhysicalMaterialSDD.CastTaskItemAnimationType
	unsigned char CastPawnHitReaction_BoneList(int I);//Engine.PhysicalMaterialSDD.CastPawnHitReaction_BoneList
	unsigned char CastCSAAutoRouteType(int I);//Engine.PhysicalMaterialSDD.CastCSAAutoRouteType
	unsigned char CastVehicleDamageVFXState(int I);//Engine.PhysicalMaterialSDD.CastVehicleDamageVFXState
	unsigned char CastMarketplaceTimeLeft(int I);//Engine.PhysicalMaterialSDD.CastMarketplaceTimeLeft
	unsigned char CastChatConstant(int I);//Engine.PhysicalMaterialSDD.CastChatConstant
	unsigned char CastMissionUITrackedValue(int I);//Engine.PhysicalMaterialSDD.CastMissionUITrackedValue
	unsigned char CastVehicleColour(int I);//Engine.PhysicalMaterialSDD.CastVehicleColour
	unsigned char CastFireOffset(int I);//Engine.PhysicalMaterialSDD.CastFireOffset
	unsigned char CastWeaponClass(int I);//Engine.PhysicalMaterialSDD.CastWeaponClass
	unsigned char CastVehicleBatch(int I);//Engine.PhysicalMaterialSDD.CastVehicleBatch
	unsigned char CastCSAEndPoint(int I);//Engine.PhysicalMaterialSDD.CastCSAEndPoint
	unsigned char CastVehicleSpecificationMethod(int I);//Engine.PhysicalMaterialSDD.CastVehicleSpecificationMethod
	unsigned char CastTrackedActivityOperation(int I);//Engine.PhysicalMaterialSDD.CastTrackedActivityOperation
	unsigned char CastHUDZoneNotifier(int I);//Engine.PhysicalMaterialSDD.CastHUDZoneNotifier
	unsigned char CastCrimeTargetType(int I);//Engine.PhysicalMaterialSDD.CastCrimeTargetType
	unsigned char CastFacialHairRandomGeneration(int I);//Engine.PhysicalMaterialSDD.CastFacialHairRandomGeneration
	unsigned char CastHUDMessageRank(int I);//Engine.PhysicalMaterialSDD.CastHUDMessageRank
	unsigned char CastVehicleModelClass(int I);//Engine.PhysicalMaterialSDD.CastVehicleModelClass
	unsigned char CastMarketplaceListType(int I);//Engine.PhysicalMaterialSDD.CastMarketplaceListType
	unsigned char CastContactType(int I);//Engine.PhysicalMaterialSDD.CastContactType
	unsigned char CastPawnHitReaction_Bool(int I);//Engine.PhysicalMaterialSDD.CastPawnHitReaction_Bool
	unsigned char CastCSAAnimType(int I);//Engine.PhysicalMaterialSDD.CastCSAAnimType
	unsigned char CastMissionCriminalDispatchTypes(int I);//Engine.PhysicalMaterialSDD.CastMissionCriminalDispatchTypes
	unsigned char CastOpenWorldConstant(int I);//Engine.PhysicalMaterialSDD.CastOpenWorldConstant
	unsigned char CastSkillRatingConstant(int I);//Engine.PhysicalMaterialSDD.CastSkillRatingConstant
	unsigned char CastCrimeTargetEnvironmental(int I);//Engine.PhysicalMaterialSDD.CastCrimeTargetEnvironmental
	unsigned char CastGameplayEventCategory2(int I);//Engine.PhysicalMaterialSDD.CastGameplayEventCategory2
	unsigned char CastYesNoEither(int I);//Engine.PhysicalMaterialSDD.CastYesNoEither
	unsigned char CastMissionResultReason(int I);//Engine.PhysicalMaterialSDD.CastMissionResultReason
	unsigned char CastFormulaOperation(int I);//Engine.PhysicalMaterialSDD.CastFormulaOperation
	unsigned char CastLocaleTypePriority(int I);//Engine.PhysicalMaterialSDD.CastLocaleTypePriority
	unsigned char CastChatState(int I);//Engine.PhysicalMaterialSDD.CastChatState
	unsigned char CastHostingConfigFileAccountPersistentId(int I);//Engine.PhysicalMaterialSDD.CastHostingConfigFileAccountPersistentId
	unsigned char CastFeedbackMessage(int I);//Engine.PhysicalMaterialSDD.CastFeedbackMessage
	unsigned char CastWeaponFiringState(int I);//Engine.PhysicalMaterialSDD.CastWeaponFiringState
	unsigned char CastTrackedActivityUnitConversion(int I);//Engine.PhysicalMaterialSDD.CastTrackedActivityUnitConversion
	unsigned char CastCCameraMode(int I);//Engine.PhysicalMaterialSDD.CastCCameraMode
	unsigned char CastInteractiveActorCategory(int I);//Engine.PhysicalMaterialSDD.CastInteractiveActorCategory
	unsigned char CastFXMaterialImpact(int I);//Engine.PhysicalMaterialSDD.CastFXMaterialImpact
	unsigned char CastTaskTargetCategory(int I);//Engine.PhysicalMaterialSDD.CastTaskTargetCategory
	unsigned char CastDisplayPointActivationType(int I);//Engine.PhysicalMaterialSDD.CastDisplayPointActivationType
	unsigned char CastVehicleTempSetup(int I);//Engine.PhysicalMaterialSDD.CastVehicleTempSetup
	unsigned char CastAPBPawnConstant(int I);//Engine.PhysicalMaterialSDD.CastAPBPawnConstant
	unsigned char CastWeaponPickupAvailability(int I);//Engine.PhysicalMaterialSDD.CastWeaponPickupAvailability
	unsigned char CastTaskItemVisibility(int I);//Engine.PhysicalMaterialSDD.CastTaskItemVisibility
	unsigned char CastNPCReaction(int I);//Engine.PhysicalMaterialSDD.CastNPCReaction
	unsigned char CastMarketplaceSearch(int I);//Engine.PhysicalMaterialSDD.CastMarketplaceSearch
	unsigned char CastInventoryItemCategoryLimited(int I);//Engine.PhysicalMaterialSDD.CastInventoryItemCategoryLimited
	unsigned char CastHUDConstantBool(int I);//Engine.PhysicalMaterialSDD.CastHUDConstantBool
	unsigned char CastErrorCode(int I);//Engine.PhysicalMaterialSDD.CastErrorCode
	unsigned char CastDisplayPointType(int I);//Engine.PhysicalMaterialSDD.CastDisplayPointType
	unsigned char CastPlayerRadarPings(int I);//Engine.PhysicalMaterialSDD.CastPlayerRadarPings
	unsigned char CastTutorialPosition(int I);//Engine.PhysicalMaterialSDD.CastTutorialPosition
	unsigned char CastDeployedUsableArray(int I);//Engine.PhysicalMaterialSDD.CastDeployedUsableArray
	unsigned char CastVehicleDistricts(int I);//Engine.PhysicalMaterialSDD.CastVehicleDistricts
	unsigned char CastHUDMessageType(int I);//Engine.PhysicalMaterialSDD.CastHUDMessageType
	unsigned char CastHUDMarkerCategory(int I);//Engine.PhysicalMaterialSDD.CastHUDMarkerCategory
	unsigned char CastOrganisation(int I);//Engine.PhysicalMaterialSDD.CastOrganisation
	unsigned char CastEncumbrance(int I);//Engine.PhysicalMaterialSDD.CastEncumbrance
	unsigned char CastMissionEnforcerDispatchTypes(int I);//Engine.PhysicalMaterialSDD.CastMissionEnforcerDispatchTypes
	unsigned char CastCharacterStatus(int I);//Engine.PhysicalMaterialSDD.CastCharacterStatus
	unsigned char CastFaction(int I);//Engine.PhysicalMaterialSDD.CastFaction
	unsigned char CastCSAAnimEvent(int I);//Engine.PhysicalMaterialSDD.CastCSAAnimEvent
	unsigned char CastMailInfo(int I);//Engine.PhysicalMaterialSDD.CastMailInfo
	unsigned char CastPawnHitReaction_SpringList(int I);//Engine.PhysicalMaterialSDD.CastPawnHitReaction_SpringList
	unsigned char CastHUDReticule(int I);//Engine.PhysicalMaterialSDD.CastHUDReticule
	unsigned char CastHUDMarkerState(int I);//Engine.PhysicalMaterialSDD.CastHUDMarkerState
	unsigned char CastTutorialType(int I);//Engine.PhysicalMaterialSDD.CastTutorialType
	unsigned char CastCustomisedAssetPriority(int I);//Engine.PhysicalMaterialSDD.CastCustomisedAssetPriority
	unsigned char CastCSAInputType(int I);//Engine.PhysicalMaterialSDD.CastCSAInputType
	unsigned char CastCapacityItemType(int I);//Engine.PhysicalMaterialSDD.CastCapacityItemType
	unsigned char CastLoadingMovieTransitionType(int I);//Engine.PhysicalMaterialSDD.CastLoadingMovieTransitionType
	unsigned char CastSpawnDestroyData(int I);//Engine.PhysicalMaterialSDD.CastSpawnDestroyData
	unsigned char CastPedestrianPaletteType(int I);//Engine.PhysicalMaterialSDD.CastPedestrianPaletteType
	unsigned char CastWeaponOverrideType(int I);//Engine.PhysicalMaterialSDD.CastWeaponOverrideType
	unsigned char CastWitnessingFunctionality(int I);//Engine.PhysicalMaterialSDD.CastWitnessingFunctionality
	unsigned char CastCrimeTargetZone(int I);//Engine.PhysicalMaterialSDD.CastCrimeTargetZone
	unsigned char CastTESProjectionInfo(int I);//Engine.PhysicalMaterialSDD.CastTESProjectionInfo
	unsigned char CastWorldFaction(int I);//Engine.PhysicalMaterialSDD.CastWorldFaction
	unsigned char CastModifierItemEffectType(int I);//Engine.PhysicalMaterialSDD.CastModifierItemEffectType
	unsigned char CastCSA_IATState(int I);//Engine.PhysicalMaterialSDD.CastCSA_IATState
	unsigned char CastTaskObjectiveStage(int I);//Engine.PhysicalMaterialSDD.CastTaskObjectiveStage
	unsigned char CastWeaponImpactClass(int I);//Engine.PhysicalMaterialSDD.CastWeaponImpactClass
	unsigned char CastPedestrianTempSetup(int I);//Engine.PhysicalMaterialSDD.CastPedestrianTempSetup
	unsigned char CastInventoryItemSubCategory(int I);//Engine.PhysicalMaterialSDD.CastInventoryItemSubCategory
	unsigned char CastCharacterVOIPStatus(int I);//Engine.PhysicalMaterialSDD.CastCharacterVOIPStatus
	unsigned char CastTimeOfDayAvailability(int I);//Engine.PhysicalMaterialSDD.CastTimeOfDayAvailability
	unsigned char CastRCEType(int I);//Engine.PhysicalMaterialSDD.CastRCEType
};
UClass* UPhysicalMaterialSDD::pClassPointer = NULL;

//0x000000 (0x00027C - 0x00027C)
//RB_BSJointActor[0x1CFFD820]
class ARB_BSJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_BSJointActor");
		return pClassPointer;
	};
};
UClass* ARB_BSJointActor::pClassPointer = NULL;

//0x000000 (0x00027C - 0x00027C)
//RB_ConstraintActorSpawnable[0x1CFFD6F0]
class ARB_ConstraintActorSpawnable : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_ConstraintActorSpawnable");
		return pClassPointer;
	};
};
UClass* ARB_ConstraintActorSpawnable::pClassPointer = NULL;

//0x000000 (0x00027C - 0x00027C)
//RB_HingeActor[0x1CFFD5C0]
class ARB_HingeActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_HingeActor");
		return pClassPointer;
	};
};
UClass* ARB_HingeActor::pClassPointer = NULL;

//0x000000 (0x00027C - 0x00027C)
//RB_PrismaticActor[0x1CFFD490]
class ARB_PrismaticActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_PrismaticActor");
		return pClassPointer;
	};
};
UClass* ARB_PrismaticActor::pClassPointer = NULL;

//0x000000 (0x00027C - 0x00027C)
//RB_PulleyJointActor[0x1CFFD360]
class ARB_PulleyJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.RB_PulleyJointActor");
		return pClassPointer;
	};
};
UClass* ARB_PulleyJointActor::pClassPointer = NULL;

//0x000004 (0x00050C - 0x000508)
//Scoreboard[0x1CFFD230]
class AScoreboard : public AHUD
{
public:
	unsigned long                                      bDisplayMessages : 1;                             		// 0x000508 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Scoreboard");
		return pClassPointer;
	};

public:
	bool UpdateGRI();//Engine.Scoreboard.UpdateGRI
	void ChangeState(bool bIsVisible);//Engine.Scoreboard.ChangeState
	void DrawHUD();//Engine.Scoreboard.DrawHUD
	void UpdateScoreBoard();//Engine.Scoreboard.UpdateScoreBoard
};
UClass* AScoreboard::pClassPointer = NULL;

//0x00000C (0x000484 - 0x000478)
//ScriptConsoleEntry[0x1CFFD100]
class UScriptConsoleEntry : public UUIPanel
{
public:
	class UUIEditBox*                                  InputBox;                                         		// 0x000478 (0x0004)              
	class UUIImage*                                    UpperConsoleBorder;                               		// 0x00047C (0x0004)              
	class UUIImage*                                    LowerConsoleBorder;                               		// 0x000480 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ScriptConsoleEntry");
		return pClassPointer;
	};

public:
	void Initialized();//Engine.ScriptConsoleEntry.Initialized
	void OnCreateChild(class UUIObject* CreatedWidget,class UUIScreenObject* CreatorContainer);//Engine.ScriptConsoleEntry.OnCreateChild
	void PostInitialize();//Engine.ScriptConsoleEntry.PostInitialize
	void SetValue(struct FString NewValue);//Engine.ScriptConsoleEntry.SetValue
};
UClass* UScriptConsoleEntry::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_AIAbortMoveToActor[0x1CFFCFD0]
class USeqAct_AIAbortMoveToActor : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_AIAbortMoveToActor");
		return pClassPointer;
	};
};
UClass* USeqAct_AIAbortMoveToActor::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_AssignController[0x1CFFCEA0]
class USeqAct_AssignController : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_AssignController");
		return pClassPointer;
	};
};
UClass* USeqAct_AssignController::pClassPointer = NULL;

//0x000024 (0x0000D0 - 0x0000AC)
//SeqAct_AttachToActor[0x1CFFCD70]
class USeqAct_AttachToActor : public USequenceAction
{
public:
	unsigned long                                      bDetach : 1;                                      		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bHardAttach : 1;                                  		// 0x0000AC (0x0004) [0x00000002] 
	unsigned long                                      bUseRelativeOffset : 1;                           		// 0x0000AC (0x0004) [0x00000004] 
	unsigned long                                      bUseRelativeRotation : 1;                         		// 0x0000AC (0x0004) [0x00000008] 
	struct FName                                       BoneName;                                         		// 0x0000B0 (0x0008)              
	FVector3                                           RelativeOffset;                                   		// 0x0000B8 (0x000C)              
	FRotator                                           RelativeRotation;                                 		// 0x0000C4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_AttachToActor");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_AttachToActor.GetObjClassVersion
};
UClass* USeqAct_AttachToActor::pClassPointer = NULL;

//0x000018 (0x0000C4 - 0x0000AC)
//SeqAct_ConsoleCommand[0x1CFFCC40]
class USeqAct_ConsoleCommand : public USequenceAction
{
public:
	struct FString                                     Command;                                          		// 0x0000AC (0x000C)              
	TArray<struct FString>                             Commands;                                         		// 0x0000B8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ConsoleCommand");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_ConsoleCommand.GetObjClassVersion
	void VersionUpdated(int OldVersion,int NewVersion);//Engine.SeqAct_ConsoleCommand.VersionUpdated
};
UClass* USeqAct_ConsoleCommand::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_ControlMovieTexture[0x1CFFCB10]
class USeqAct_ControlMovieTexture : public USequenceAction
{
public:
	class UTextureMovie*                               MovieTexture;                                     		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ControlMovieTexture");
		return pClassPointer;
	};

public:
	void Activated();//Engine.SeqAct_ControlMovieTexture.Activated
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_ControlMovieTexture.IsValidUISequenceObject
};
UClass* USeqAct_ControlMovieTexture::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_Destroy[0x1CFFC9E0]
class USeqAct_Destroy : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Destroy");
		return pClassPointer;
	};
};
UClass* USeqAct_Destroy::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_FlyThroughHasEnded[0x1CFFC8B0]
class USeqAct_FlyThroughHasEnded : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_FlyThroughHasEnded");
		return pClassPointer;
	};
};
UClass* USeqAct_FlyThroughHasEnded::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_ForceFeedback[0x1CFFC780]
class USeqAct_ForceFeedback : public USequenceAction
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ForceFeedback");
		return pClassPointer;
	};
};
UClass* USeqAct_ForceFeedback::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_GiveInventory[0x1CFFC650]
class USeqAct_GiveInventory : public USequenceAction
{
public:
	unsigned long                                      bClearExisting : 1;                               		// 0x0000AC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_GiveInventory");
		return pClassPointer;
	};
};
UClass* USeqAct_GiveInventory::pClassPointer = NULL;

//0x00000C (0x0000B8 - 0x0000AC)
//SeqAct_HealDamage[0x1CFFC520]
class USeqAct_HealDamage : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x0000AC (0x0004)              
	int                                                HealAmount;                                       		// 0x0000B0 (0x0004)              
	class AActor*                                      Instigator;                                       		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_HealDamage");
		return pClassPointer;
	};
};
UClass* USeqAct_HealDamage::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_MakeNoise[0x1CFFC3F0]
class USeqAct_MakeNoise : public USequenceAction
{
public:
	float                                              Loudness;                                         		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_MakeNoise");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_MakeNoise.GetObjClassVersion
};
UClass* USeqAct_MakeNoise::pClassPointer = NULL;

//0x00000D (0x0000B9 - 0x0000AC)
//SeqAct_ModifyCover[0x1CFFC2C0]
class USeqAct_ModifyCover : public USequenceAction
{
public:
	TArray<int>                                        Slots;                                            		// 0x0000AC (0x000C)              
	unsigned char                                      ManualCoverType;                                  		// 0x0000B8 (0x0001)              PROPERTY: ECoverType

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ModifyCover");
		return pClassPointer;
	};
};
UClass* USeqAct_ModifyCover::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_SetDamageInstigator[0x1CFFC190]
class USeqAct_SetDamageInstigator : public USequenceAction
{
public:
	class AActor*                                      DamageInstigator;                                 		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetDamageInstigator");
		return pClassPointer;
	};
};
UClass* USeqAct_SetDamageInstigator::pClassPointer = NULL;

//0x000014 (0x0000C0 - 0x0000AC)
//SeqAct_SetParticleSysParam[0x1CFFC060]
class USeqAct_SetParticleSysParam : public USequenceAction
{
public:
	TArray<struct FParticleSysParam>                   InstanceParameters;                               		// 0x0000AC (0x000C)              
	unsigned long                                      bOverrideScalar : 1;                              		// 0x0000B8 (0x0004) [0x00000001] 
	float                                              ScalarValue;                                      		// 0x0000BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetParticleSysParam");
		return pClassPointer;
	};
};
UClass* USeqAct_SetParticleSysParam::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_SetSkeletalMesh[0x1CFFBF30]
class USeqAct_SetSkeletalMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               NewSkeletalMesh;                                  		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetSkeletalMesh");
		return pClassPointer;
	};
};
UClass* USeqAct_SetSkeletalMesh::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_SetStaticMesh[0x1CFFBE00]
class USeqAct_SetStaticMesh : public USequenceAction
{
public:
	class UStaticMesh*                                 NewStaticMesh;                                    		// 0x0000AC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetStaticMesh");
		return pClassPointer;
	};
};
UClass* USeqAct_SetStaticMesh::pClassPointer = NULL;

//0x00000C (0x0000B8 - 0x0000AC)
//SeqAct_SetVector[0x1CFFBCD0]
class USeqAct_SetVector : public USeqAct_SetSequenceVariable
{
public:
	FVector3                                           DefaultValue;                                     		// 0x0000AC (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_SetVector");
		return pClassPointer;
	};

public:
	void Activated();//Engine.SeqAct_SetVector.Activated
};
UClass* USeqAct_SetVector::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_Teleport[0x1CFFBBA0]
class USeqAct_Teleport : public USequenceAction
{
public:
	unsigned long                                      bUpdateRotation : 1;                              		// 0x0000AC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_Teleport");
		return pClassPointer;
	};
};
UClass* USeqAct_Teleport::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_ToggleAffectedByHitEffects[0x1CFFBA70]
class USeqAct_ToggleAffectedByHitEffects : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleAffectedByHitEffects");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_ToggleAffectedByHitEffects.IsValidUISequenceObject
};
UClass* USeqAct_ToggleAffectedByHitEffects::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_ToggleCinematicMode[0x1CFFB940]
class USeqAct_ToggleCinematicMode : public USequenceAction
{
public:
	unsigned long                                      bDisableMovement : 1;                             		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bDisableTurning : 1;                              		// 0x0000AC (0x0004) [0x00000002] 
	unsigned long                                      bHidePlayer : 1;                                  		// 0x0000AC (0x0004) [0x00000004] 
	unsigned long                                      bDisableInput : 1;                                		// 0x0000AC (0x0004) [0x00000008] 
	unsigned long                                      bHideHUD : 1;                                     		// 0x0000AC (0x0004) [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleCinematicMode");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_ToggleCinematicMode.IsValidUISequenceObject
};
UClass* USeqAct_ToggleCinematicMode::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_ToggleGodMode[0x1CFFB810]
class USeqAct_ToggleGodMode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleGodMode");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_ToggleGodMode.IsValidUISequenceObject
};
UClass* USeqAct_ToggleGodMode::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_ToggleHidden[0x1CFFB6E0]
class USeqAct_ToggleHidden : public USeqAct_Toggle
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleHidden");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_ToggleHidden.IsValidUISequenceObject
};
UClass* USeqAct_ToggleHidden::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_ToggleHUD[0x1CFFB5B0]
class USeqAct_ToggleHUD : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleHUD");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_ToggleHUD.IsValidUISequenceObject
	int GetObjClassVersion();//Engine.SeqAct_ToggleHUD.GetObjClassVersion
};
UClass* USeqAct_ToggleHUD::pClassPointer = NULL;

//0x000004 (0x0000B0 - 0x0000AC)
//SeqAct_ToggleInput[0x1CFFB480]
class USeqAct_ToggleInput : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleMovement : 1;                              		// 0x0000AC (0x0004) [0x00000001] 
	unsigned long                                      bToggleTurning : 1;                               		// 0x0000AC (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_ToggleInput");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.SeqAct_ToggleInput.IsValidUISequenceObject
};
UClass* USeqAct_ToggleInput::pClassPointer = NULL;

//0x000000 (0x0000AC - 0x0000AC)
//SeqAct_UpdateDynamicCover[0x1CFFB350]
class USeqAct_UpdateDynamicCover : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqAct_UpdateDynamicCover");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.SeqAct_UpdateDynamicCover.GetObjClassVersion
};
UClass* USeqAct_UpdateDynamicCover::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//SeqEvent_Death[0x1CFFB220]
class USeqEvent_Death : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_Death");
		return pClassPointer;
	};
};
UClass* USeqEvent_Death::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//SeqEvent_LevelReset[0x1CFFB0F0]
class USeqEvent_LevelReset : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_LevelReset");
		return pClassPointer;
	};
};
UClass* USeqEvent_LevelReset::pClassPointer = NULL;

//0x00000C (0x0000D4 - 0x0000C8)
//SeqEvent_LOS[0x1CFFAFC0]
class USeqEvent_LOS : public USequenceEvent
{
public:
	float                                              ScreenCenterDistance;                             		// 0x0000C8 (0x0004)              
	float                                              TriggerDistance;                                  		// 0x0000CC (0x0004)              
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x0000D0 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_LOS");
		return pClassPointer;
	};
};
UClass* USeqEvent_LOS::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//SeqEvent_PickupStatusChange[0x1CFFAE90]
class USeqEvent_PickupStatusChange : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_PickupStatusChange");
		return pClassPointer;
	};
};
UClass* USeqEvent_PickupStatusChange::pClassPointer = NULL;

//0x000004 (0x0000CC - 0x0000C8)
//SeqEvent_PlayerSpawned[0x1CFFAD60]
class USeqEvent_PlayerSpawned : public USequenceEvent
{
public:
	class UObject*                                     SpawnPoint;                                       		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_PlayerSpawned");
		return pClassPointer;
	};
};
UClass* USeqEvent_PlayerSpawned::pClassPointer = NULL;

//0x000024 (0x0000EC - 0x0000C8)
//SeqEvent_TakeDamage[0x1CFFAC30]
class USeqEvent_TakeDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                  		// 0x0000C8 (0x0004)              
	float                                              DamageThreshold;                                  		// 0x0000CC (0x0004)              
	TArray<class UClass*>                              DamageTypes;                                      		// 0x0000D0 (0x000C)              
	TArray<class UClass*>                              IgnoreDamageTypes;                                		// 0x0000DC (0x000C)              
	float                                              CurrentDamage;                                    		// 0x0000E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SeqEvent_TakeDamage");
		return pClassPointer;
	};

public:
	bool IsValidDamageType(class UClass* InDamageType);//Engine.SeqEvent_TakeDamage.IsValidDamageType
	void Reset();//Engine.SeqEvent_TakeDamage.Reset
	int GetObjClassVersion();//Engine.SeqEvent_TakeDamage.GetObjClassVersion
	void HandleDamage(class AActor* InOriginator,class AActor* InInstigator,class UClass* InDamageType,int inAmount);//Engine.SeqEvent_TakeDamage.HandleDamage
};
UClass* USeqEvent_TakeDamage::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//SessionSettingsProvider_GameInfo[0x1CFFAB00]
class USessionSettingsProvider_GameInfo : public USessionSettingsProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SessionSettingsProvider_GameInfo");
		return pClassPointer;
	};
};
UClass* USessionSettingsProvider_GameInfo::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//SharedCloudFileInterface[0x1CFFA9D0]
class USharedCloudFileInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SharedCloudFileInterface");
		return pClassPointer;
	};

public:
	bool ClearSharedFile(struct FString SharedHandle);//Engine.SharedCloudFileInterface.ClearSharedFile
	void OnReadSharedFileComplete(bool bWasSuccessful,struct FString SharedHandle);//Engine.SharedCloudFileInterface.OnReadSharedFileComplete
	void ClearWriteSharedFileCompleteDelegate(struct FScriptDelegate WriteSharedFileCompleteDelegate);//Engine.SharedCloudFileInterface.ClearWriteSharedFileCompleteDelegate
	void ClearReadSharedFileCompleteDelegate(struct FScriptDelegate ReadSharedFileCompleteDelegate);//Engine.SharedCloudFileInterface.ClearReadSharedFileCompleteDelegate
	void AddWriteSharedFileCompleteDelegate(struct FScriptDelegate WriteSharedFileCompleteDelegate);//Engine.SharedCloudFileInterface.AddWriteSharedFileCompleteDelegate
	bool ClearSharedFiles();//Engine.SharedCloudFileInterface.ClearSharedFiles
	void AddReadSharedFileCompleteDelegate(struct FScriptDelegate ReadSharedFileCompleteDelegate);//Engine.SharedCloudFileInterface.AddReadSharedFileCompleteDelegate
	bool WriteSharedFile(struct FString UserId,struct FString Filename,TArray<unsigned char>* Contents);//Engine.SharedCloudFileInterface.WriteSharedFile
	bool ReadSharedFile(struct FString SharedHandle);//Engine.SharedCloudFileInterface.ReadSharedFile
	bool GetSharedFileContents(struct FString SharedHandle,TArray<unsigned char>* FileContents);//Engine.SharedCloudFileInterface.GetSharedFileContents
	void OnWriteSharedFileComplete(bool bWasSuccessful,struct FString UserId,struct FString Filename,struct FString SharedHandle);//Engine.SharedCloudFileInterface.OnWriteSharedFileComplete
};
UClass* USharedCloudFileInterface::pClassPointer = NULL;

//0x000000 (0x000280 - 0x000280)
//SkeletalMeshActorMATSpawnable[0x1CFFA8A0]
class ASkeletalMeshActorMATSpawnable : public ASkeletalMeshActorMAT
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkeletalMeshActorMATSpawnable");
		return pClassPointer;
	};
};
UClass* ASkeletalMeshActorMATSpawnable::pClassPointer = NULL;

//0x000000 (0x000274 - 0x000274)
//SkeletalMeshActorSpawnable[0x1CFFA770]
class ASkeletalMeshActorSpawnable : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SkeletalMeshActorSpawnable");
		return pClassPointer;
	};
};
UClass* ASkeletalMeshActorSpawnable::pClassPointer = NULL;

//0x000000 (0x000260 - 0x000260)
//TargetPoint[0x1CFFA640]
class ATargetPoint : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TargetPoint");
		return pClassPointer;
	};
};
UClass* ATargetPoint::pClassPointer = NULL;

//0x000000 (0x00026C - 0x00026C)
//Trigger_Dynamic[0x1CFFA510]
class ATrigger_Dynamic : public ATrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Trigger_Dynamic");
		return pClassPointer;
	};
};
UClass* ATrigger_Dynamic::pClassPointer = NULL;

//0x000000 (0x00026C - 0x00026C)
//Trigger_LOS[0x1CFFA3E0]
class ATrigger_LOS : public ATrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Trigger_LOS");
		return pClassPointer;
	};

public:
	void Tick(float DeltaTime);//Engine.Trigger_LOS.Tick
};
UClass* ATrigger_LOS::pClassPointer = NULL;

//0x000008 (0x00034C - 0x000344)
//TriggeredPath[0x1CFFA2B0]
class ATriggeredPath : public ANavigationPoint
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x000344 (0x0004) [0x00000001] 
	class AActor*                                      MyTrigger;                                        		// 0x000348 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TriggeredPath");
		return pClassPointer;
	};

public:
	bool SuggestMovePreparation(class APawn* Other);//Engine.TriggeredPath.SuggestMovePreparation
	void OnToggle(class USeqAct_Toggle* inAction);//Engine.TriggeredPath.OnToggle
	class AActor* SpecialHandling(class APawn* Other);//Engine.TriggeredPath.SpecialHandling
};
UClass* ATriggeredPath::pClassPointer = NULL;

//0x00000C (0x000278 - 0x00026C)
//TriggerStreamingLevel[0x1CFFA180]
class ATriggerStreamingLevel : public ATrigger
{
public:
	TArray<struct FLevelStreamingData>                 Levels;                                           		// 0x00026C (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.TriggerStreamingLevel");
		return pClassPointer;
	};

public:
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//Engine.TriggerStreamingLevel.Touch
};
UClass* ATriggerStreamingLevel::pClassPointer = NULL;

//0x000008 (0x0000C0 - 0x0000B8)
//UIAction_ActivatePage[0x1CFFA050]
class UUIAction_ActivatePage : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageToActivate;                                   		// 0x0000B8 (0x0004)              
	unsigned long                                      bActivate : 1;                                    		// 0x0000BC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ActivatePage");
		return pClassPointer;
	};

public:
	void Activated();//Engine.UIAction_ActivatePage.Activated
};
UClass* UUIAction_ActivatePage::pClassPointer = NULL;

//0x000004 (0x0000B8 - 0x0000B4)
//UIAction_TabControl[0x1CFF9F20]
class UUIAction_TabControl : public UUIAction
{
public:
	class UUITabControl*                               TabControl;                                       		// 0x0000B4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_TabControl");
		return pClassPointer;
	};
};
UClass* UUIAction_TabControl::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_ApplyScrolling[0x1CFF9DF0]
class UUIAction_ApplyScrolling : public UUIAction
{
public:
	unsigned char                                      ScrollOrientation;                                		// 0x0000B4 (0x0001)              PROPERTY: EUIOrientation
	unsigned char                                      _0x0000B5[0x3];                                   		// 0x0000B5 (0x0003) MISSED OFFSET
	unsigned long                                      bIncreaseScroll : 1;                              		// 0x0000B8 (0x0004) [0x00000001] 
	unsigned long                                      bFullPage : 1;                                    		// 0x0000B8 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ApplyScrolling");
		return pClassPointer;
	};
};
UClass* UUIAction_ApplyScrolling::pClassPointer = NULL;

//0x000004 (0x0000B8 - 0x0000B4)
//UIAction_ChangeVisibility[0x1CFF9CC0]
class UUIAction_ChangeVisibility : public UUIAction
{
public:
	unsigned long                                      bVisible : 1;                                     		// 0x0000B4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ChangeVisibility");
		return pClassPointer;
	};
};
UClass* UUIAction_ChangeVisibility::pClassPointer = NULL;

//0x00000C (0x0000C0 - 0x0000B4)
//UIAction_ConsoleCommand[0x1CFF9B90]
class UUIAction_ConsoleCommand : public UUIAction
{
public:
	struct FString                                     Command;                                          		// 0x0000B4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ConsoleCommand");
		return pClassPointer;
	};
};
UClass* UUIAction_ConsoleCommand::pClassPointer = NULL;

//0x000008 (0x0000C0 - 0x0000B8)
//UIAction_EnablePage[0x1CFF9A60]
class UUIAction_EnablePage : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageToEnable;                                     		// 0x0000B8 (0x0004)              
	unsigned long                                      bEnable : 1;                                      		// 0x0000BC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_EnablePage");
		return pClassPointer;
	};

public:
	void Activated();//Engine.UIAction_EnablePage.Activated
};
UClass* UUIAction_EnablePage::pClassPointer = NULL;

//0x000010 (0x0000D0 - 0x0000C0)
//UIAction_FindPageByCaption[0x1CFF9930]
class UUIAction_FindPageByCaption : public UUIAction_GetPageReference
{
public:
	struct FString                                     SearchCaption;                                    		// 0x0000C0 (0x000C)              
	unsigned long                                      bMarkupString : 1;                                		// 0x0000CC (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_FindPageByCaption");
		return pClassPointer;
	};

public:
	void Activated();//Engine.UIAction_FindPageByCaption.Activated
};
UClass* UUIAction_FindPageByCaption::pClassPointer = NULL;

//0x000008 (0x0000C0 - 0x0000B8)
//UIAction_GetPageReference[0x1CFF9800]
class UUIAction_GetPageReference : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageReference;                                    		// 0x0000B8 (0x0004)              
	int                                                PageIndex;                                        		// 0x0000BC (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetPageReference");
		return pClassPointer;
	};

public:
	void Activated();//Engine.UIAction_GetPageReference.Activated
};
UClass* UUIAction_GetPageReference::pClassPointer = NULL;

//0x000004 (0x0000C4 - 0x0000C0)
//UIAction_FindPageByIndex[0x1CFF96D0]
class UUIAction_FindPageByIndex : public UUIAction_GetPageReference
{
public:
	int                                                SearchIndex;                                      		// 0x0000C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_FindPageByIndex");
		return pClassPointer;
	};

public:
	void Activated();//Engine.UIAction_FindPageByIndex.Activated
};
UClass* UUIAction_FindPageByIndex::pClassPointer = NULL;

//0x000000 (0x0000C0 - 0x0000C0)
//UIAction_GetActivePage[0x1CFF95A0]
class UUIAction_GetActivePage : public UUIAction_GetPageReference
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetActivePage");
		return pClassPointer;
	};

public:
	void Activated();//Engine.UIAction_GetActivePage.Activated
};
UClass* UUIAction_GetActivePage::pClassPointer = NULL;

//0x000000 (0x0000B8 - 0x0000B8)
//UIAction_GetPageCount[0x1CFF9470]
class UUIAction_GetPageCount : public UUIAction_TabControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetPageCount");
		return pClassPointer;
	};

public:
	void Activated();//Engine.UIAction_GetPageCount.Activated
};
UClass* UUIAction_GetPageCount::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_GetProgressBarValue[0x1CFF9340]
class UUIAction_GetProgressBarValue : public UUIAction_GetValue
{
public:
	float                                              Value;                                            		// 0x0000B4 (0x0004)              
	unsigned long                                      bPercentageValue : 1;                             		// 0x0000B8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetProgressBarValue");
		return pClassPointer;
	};
};
UClass* UUIAction_GetProgressBarValue::pClassPointer = NULL;

//0x00000C (0x0000C0 - 0x0000B4)
//UIAction_GetTextValue[0x1CFF9210]
class UUIAction_GetTextValue : public UUIAction_GetValue
{
public:
	struct FString                                     StringValue;                                      		// 0x0000B4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_GetTextValue");
		return pClassPointer;
	};
};
UClass* UUIAction_GetTextValue::pClassPointer = NULL;

//0x000014 (0x0000CC - 0x0000B8)
//UIAction_InsertPage[0x1CFF90E0]
class UUIAction_InsertPage : public UUIAction_TabControl
{
public:
	class UClass*                                      TabPageClass;                                     		// 0x0000B8 (0x0004)              
	int                                                InsertIndex;                                      		// 0x0000BC (0x0004)              
	unsigned long                                      bFocusPage : 1;                                   		// 0x0000C0 (0x0004) [0x00000001] 
	class UUITabPage*                                  PageToInsert;                                     		// 0x0000C4 (0x0004)              
	class UUITabPage*                                  PagePrefab;                                       		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_InsertPage");
		return pClassPointer;
	};

public:
	void Activated();//Engine.UIAction_InsertPage.Activated
};
UClass* UUIAction_InsertPage::pClassPointer = NULL;

//0x000000 (0x000118 - 0x000118)
//UIAction_PlaySound[0x1CFF8FB0]
class UUIAction_PlaySound : public USeqAct_PlaySound
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_PlaySound");
		return pClassPointer;
	};

public:
	bool IsValidUISequenceObject(class UUIScreenObject* TargetObject);//Engine.UIAction_PlaySound.IsValidUISequenceObject
};
UClass* UUIAction_PlaySound::pClassPointer = NULL;

//0x000004 (0x0000BC - 0x0000B8)
//UIAction_RemovePage[0x1CFF8E80]
class UUIAction_RemovePage : public UUIAction_TabControl
{
public:
	class UUITabPage*                                  PageToRemove;                                     		// 0x0000B8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_RemovePage");
		return pClassPointer;
	};

public:
	void Activated();//Engine.UIAction_RemovePage.Activated
};
UClass* UUIAction_RemovePage::pClassPointer = NULL;

//0x000014 (0x0000CC - 0x0000B8)
//UIAction_ReplacePage[0x1CFF8D50]
class UUIAction_ReplacePage : public UUIAction_TabControl
{
public:
	class UClass*                                      TabPageClass;                                     		// 0x0000B8 (0x0004)              
	class UUITabPage*                                  PageToRemove;                                     		// 0x0000BC (0x0004)              
	unsigned long                                      bFocusPage : 1;                                   		// 0x0000C0 (0x0004) [0x00000001] 
	class UUITabPage*                                  PageToInsert;                                     		// 0x0000C4 (0x0004)              
	class UUITabPage*                                  PagePrefab;                                       		// 0x0000C8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ReplacePage");
		return pClassPointer;
	};

public:
	void Activated();//Engine.UIAction_ReplacePage.Activated
};
UClass* UUIAction_ReplacePage::pClassPointer = NULL;

//0x000004 (0x0000B8 - 0x0000B4)
//UIAction_SetBoolValue[0x1CFF8C20]
class UUIAction_SetBoolValue : public UUIAction_SetValue
{
public:
	unsigned long                                      bNewValue : 1;                                    		// 0x0000B4 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_SetBoolValue");
		return pClassPointer;
	};
};
UClass* UUIAction_SetBoolValue::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_SetControllerId[0x1CFF8AF0]
class UUIAction_SetControllerId : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_SetControllerId");
		return pClassPointer;
	};
};
UClass* UUIAction_SetControllerId::pClassPointer = NULL;

//0x00000C (0x0000C4 - 0x0000B8)
//UIAction_SetDatastoreBinding[0x1CFF89C0]
class UUIAction_SetDatastoreBinding : public UUIAction_DataStore
{
public:
	struct FString                                     NewMarkup;                                        		// 0x0000B8 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_SetDatastoreBinding");
		return pClassPointer;
	};
};
UClass* UUIAction_SetDatastoreBinding::pClassPointer = NULL;

//0x00000C (0x0000C0 - 0x0000B4)
//UIAction_SetLabelText[0x1CFF8890]
class UUIAction_SetLabelText : public UUIAction_SetValue
{
public:
	struct FString                                     NewText;                                          		// 0x0000B4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_SetLabelText");
		return pClassPointer;
	};
};
UClass* UUIAction_SetLabelText::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_SetListIndex[0x1CFF8760]
class UUIAction_SetListIndex : public UUIAction_SetValue
{
public:
	int                                                NewIndex;                                         		// 0x0000B4 (0x0004)              
	unsigned long                                      bClampInvalidValues : 1;                          		// 0x0000B8 (0x0004) [0x00000001] 
	unsigned long                                      bActivateListChangeEvent : 1;                     		// 0x0000B8 (0x0004) [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_SetListIndex");
		return pClassPointer;
	};
};
UClass* UUIAction_SetListIndex::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_SetProgressBarValue[0x1CFF8630]
class UUIAction_SetProgressBarValue : public UUIAction_SetValue
{
public:
	float                                              NewValue;                                         		// 0x0000B4 (0x0004)              
	unsigned long                                      bPercentageValue : 1;                             		// 0x0000B8 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_SetProgressBarValue");
		return pClassPointer;
	};
};
UClass* UUIAction_SetProgressBarValue::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_ShowAchievementsUI[0x1CFF8500]
class UUIAction_ShowAchievementsUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowAchievementsUI");
		return pClassPointer;
	};
};
UClass* UUIAction_ShowAchievementsUI::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_ShowContentMarketplaceUI[0x1CFF83D0]
class UUIAction_ShowContentMarketplaceUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowContentMarketplaceUI");
		return pClassPointer;
	};
};
UClass* UUIAction_ShowContentMarketplaceUI::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_ShowFeedbackUI[0x1CFF82A0]
class UUIAction_ShowFeedbackUI : public UUIAction
{
public:
	struct FUniqueNetId                                RemotePlayerNetId;                                		// 0x0000B4 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowFeedbackUI");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_ShowFeedbackUI.GetObjClassVersion
};
UClass* UUIAction_ShowFeedbackUI::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_ShowFriendInviteUI[0x1CFF8170]
class UUIAction_ShowFriendInviteUI : public UUIAction
{
public:
	struct FUniqueNetId                                RemotePlayerNetId;                                		// 0x0000B4 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowFriendInviteUI");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_ShowFriendInviteUI.GetObjClassVersion
};
UClass* UUIAction_ShowFriendInviteUI::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_ShowFriendsUI[0x1CFF8040]
class UUIAction_ShowFriendsUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowFriendsUI");
		return pClassPointer;
	};
};
UClass* UUIAction_ShowFriendsUI::pClassPointer = NULL;

//0x000008 (0x0000BC - 0x0000B4)
//UIAction_ShowGamerCardUI[0x1CFF7F10]
class UUIAction_ShowGamerCardUI : public UUIAction
{
public:
	struct FUniqueNetId                                RemotePlayerNetId;                                		// 0x0000B4 (0x0008)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowGamerCardUI");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIAction_ShowGamerCardUI.GetObjClassVersion
};
UClass* UUIAction_ShowGamerCardUI::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_ShowMembershipMarketplaceUI[0x1CFF7DE0]
class UUIAction_ShowMembershipMarketplaceUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowMembershipMarketplaceUI");
		return pClassPointer;
	};
};
UClass* UUIAction_ShowMembershipMarketplaceUI::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_ShowMessagesUI[0x1CFF7CB0]
class UUIAction_ShowMessagesUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowMessagesUI");
		return pClassPointer;
	};
};
UClass* UUIAction_ShowMessagesUI::pClassPointer = NULL;

//0x000000 (0x0000B4 - 0x0000B4)
//UIAction_ShowPlayersUI[0x1CFF7B80]
class UUIAction_ShowPlayersUI : public UUIAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIAction_ShowPlayersUI");
		return pClassPointer;
	};
};
UClass* UUIAction_ShowPlayersUI::pClassPointer = NULL;

//0x000000 (0x0000A4 - 0x0000A4)
//UICond_SwitchWidget[0x1CFF7A50]
class UUICond_SwitchWidget : public USeqCond_SwitchObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UICond_SwitchWidget");
		return pClassPointer;
	};

public:
	bool IsValidLevelSequenceObject();//Engine.UICond_SwitchWidget.IsValidLevelSequenceObject
};
UClass* UUICond_SwitchWidget::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_Initialized[0x1CFF7920]
class UUIEvent_Initialized : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_Initialized");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIEvent_Initialized.GetObjClassVersion
};
UClass* UUIEvent_Initialized::pClassPointer = NULL;

//0x000004 (0x0000E4 - 0x0000E0)
//UIEvent_SceneActivated[0x1CFF77F0]
class UUIEvent_SceneActivated : public UUIEvent_Scene
{
public:
	unsigned long                                      bInitialActivation : 1;                           		// 0x0000E0 (0x0004) [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_SceneActivated");
		return pClassPointer;
	};

public:
	int GetObjClassVersion();//Engine.UIEvent_SceneActivated.GetObjClassVersion
	void Deactivated();//Engine.UIEvent_SceneActivated.Deactivated
};
UClass* UUIEvent_SceneActivated::pClassPointer = NULL;

//0x000000 (0x0000E0 - 0x0000E0)
//UIEvent_SceneDeactivated[0x1CFF76C0]
class UUIEvent_SceneDeactivated : public UUIEvent_Scene
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_SceneDeactivated");
		return pClassPointer;
	};
};
UClass* UUIEvent_SceneDeactivated::pClassPointer = NULL;

//0x000000 (0x0000E4 - 0x0000E4)
//UIEvent_TabPageActivated[0x1CFF7590]
class UUIEvent_TabPageActivated : public UUIEvent_TabControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_TabPageActivated");
		return pClassPointer;
	};
};
UClass* UUIEvent_TabPageActivated::pClassPointer = NULL;

//0x000000 (0x0000E4 - 0x0000E4)
//UIEvent_TabPageEnabled[0x1CFF7460]
class UUIEvent_TabPageEnabled : public UUIEvent_TabControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_TabPageEnabled");
		return pClassPointer;
	};
};
UClass* UUIEvent_TabPageEnabled::pClassPointer = NULL;

//0x000004 (0x0000E8 - 0x0000E4)
//UIEvent_TabPageInserted[0x1CFF7330]
class UUIEvent_TabPageInserted : public UUIEvent_TabControl
{
public:
	int                                                InsertedIndex;                                    		// 0x0000E4 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_TabPageInserted");
		return pClassPointer;
	};
};
UClass* UUIEvent_TabPageInserted::pClassPointer = NULL;

//0x000000 (0x0000E4 - 0x0000E4)
//UIEvent_TabPageRemoved[0x1CFF7200]
class UUIEvent_TabPageRemoved : public UUIEvent_TabControl
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIEvent_TabPageRemoved");
		return pClassPointer;
	};
};
UClass* UUIEvent_TabPageRemoved::pClassPointer = NULL;

//0x00004C (0x0000C0 - 0x000074)
//UIGameInfoSummary[0x1CFF70D0]
class UUIGameInfoSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassName;                                        		// 0x000074 (0x000C)              
	struct FString                                     GameAcronym;                                      		// 0x000080 (0x000C)              
	struct FString                                     MapPrefix;                                        		// 0x00008C (0x000C)              
	unsigned long                                      bIsTeamGame : 1;                                  		// 0x000098 (0x0004) [0x00000001] 
	unsigned long                                      bIsDisabled : 1;                                  		// 0x000098 (0x0004) [0x00000002] 
	struct FString                                     GameSettingsClassName;                            		// 0x00009C (0x000C)              
	struct FString                                     GameName;                                         		// 0x0000A8 (0x000C)              
	struct FString                                     Description;                                      		// 0x0000B4 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIGameInfoSummary");
		return pClassPointer;
	};

public:
	bool IsProviderDisabled();//Engine.UIGameInfoSummary.IsProviderDisabled
};
UClass* UUIGameInfoSummary::pClassPointer = NULL;

//0x000030 (0x0000A4 - 0x000074)
//UIMapSummary[0x1CFF6FA0]
class UUIMapSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     MapName;                                          		// 0x000074 (0x000C)              
	struct FString                                     ScreenshotPathName;                               		// 0x000080 (0x000C)              
	struct FString                                     DisplayName;                                      		// 0x00008C (0x000C)              
	struct FString                                     Description;                                      		// 0x000098 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIMapSummary");
		return pClassPointer;
	};
};
UClass* UUIMapSummary::pClassPointer = NULL;

//0x00000C (0x0002C4 - 0x0002B8)
//UIScriptConsoleScene[0x1CFF6E70]
class UUIScriptConsoleScene : public UUIScene
{
public:
	class UUILabel*                                    BufferText;                                       		// 0x0002B8 (0x0004)              
	class UUIImage*                                    BufferBackground;                                 		// 0x0002BC (0x0004)              
	class UScriptConsoleEntry*                         CommandRegion;                                    		// 0x0002C0 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UIScriptConsoleScene");
		return pClassPointer;
	};

public:
	void OnCreateChild(class UUIObject* CreatedWidget,class UUIScreenObject* CreatorContainer);//Engine.UIScriptConsoleScene.OnCreateChild
	void PostInitialize();//Engine.UIScriptConsoleScene.PostInitialize
	void Initialized();//Engine.UIScriptConsoleScene.Initialized
};
UClass* UUIScriptConsoleScene::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UISettingsClient[0x1CFF6D40]
class UUISettingsClient : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UISettingsClient");
		return pClassPointer;
	};
};
UClass* UUISettingsClient::pClassPointer = NULL;

//0x000050 (0x000090 - 0x000040)
//UserCloudFileCloudSaveSystemDataBlobStore[0x1CFF6C10]
class UUserCloudFileCloudSaveSystemDataBlobStore : public UObject
{
public:
	class UUserCloudFileInterface*                     UserCloudFile;                                    		// 0x000040 (0x0004)              
	unsigned char                                      _0x000044[0x4];                                   		// 0x000044 (0x0004) ALIGNEMENT
	struct FScriptDelegate                             GetDataBlobCallback;                              		// 0x000048 (0x000C)              
	struct FScriptDelegate                             SetDataBlobCallback;                              		// 0x000054 (0x000C)              
	struct FScriptDelegate                             DeleteDataBlobCallback;                           		// 0x000060 (0x000C)              
	struct FScriptDelegate                             __GetDataBlobCallbackDelegate__Delegate;          		// 0x00006C (0x000C)              
	struct FScriptDelegate                             __SetDataBlobCallbackDelegate__Delegate;          		// 0x000078 (0x000C)              
	struct FScriptDelegate                             __DeleteDataBlobCallbackDelegate__Delegate;       		// 0x000084 (0x000C)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UserCloudFileCloudSaveSystemDataBlobStore");
		return pClassPointer;
	};

public:
	void SetDataBlob(struct FString StorageID,struct FString BlobName,TArray<unsigned char>* DataBlob,struct FScriptDelegate InSetDataBlobCallback);//Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlob
	void OnReadUserFileComplete(bool bWasSuccessful,struct FString UserId,struct FString Filename);//Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnReadUserFileComplete
	void DeleteDataBlobCallbackDelegate(bool bWasSucessfull,struct FString StorageID,struct FString BlobName,struct FString Error);//Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlobCallbackDelegate
	void GetDataBlobCallbackDelegate(bool bWasSuccessful,struct FString StorageID,struct FString BlobName,TArray<unsigned char>* DataBlob,struct FString Error);//Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlobCallbackDelegate
	void Init(class UUserCloudFileInterface* InUserCloudFile);//Engine.UserCloudFileCloudSaveSystemDataBlobStore.Init
	void GetDataBlob(struct FString StorageID,struct FString BlobName,struct FScriptDelegate InGetDataBlobCallback);//Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlob
	void SetDataBlobCallbackDelegate(bool bWasSucessfull,struct FString StorageID,struct FString BlobName,struct FString Error);//Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlobCallbackDelegate
	bool DeleteDataBlob(struct FString StorageID,struct FString BlobName,struct FScriptDelegate InDeleteDataBlobCallback);//Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlob
	void OnWriteUserFileComplete(bool bWasSuccessful,struct FString UserId,struct FString Filename);//Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnWriteUserFileComplete
	void OnDeleteUserFileComplete(bool bWasSuccessful,struct FString UserId,struct FString Filename);//Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnDeleteUserFileComplete
};
UClass* UUserCloudFileCloudSaveSystemDataBlobStore::pClassPointer = NULL;

//0x000000 (0x000040 - 0x000040)
//UserCloudFileInterface[0x1CFF6AE0]
class UUserCloudFileInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.UserCloudFileInterface");
		return pClassPointer;
	};

public:
	void ClearEnumerateUserFileCompleteDelegate(struct FScriptDelegate EnumerateUserFileCompleteDelegate);//Engine.UserCloudFileInterface.ClearEnumerateUserFileCompleteDelegate
	void GetUserFileList(struct FString UserId,TArray<struct FEmsFile>* UserFiles);//Engine.UserCloudFileInterface.GetUserFileList
	void AddReadUserFileCompleteDelegate(struct FScriptDelegate ReadUserFileCompleteDelegate);//Engine.UserCloudFileInterface.AddReadUserFileCompleteDelegate
	bool DeleteUserFile(struct FString UserId,struct FString Filename,bool bShouldCloudDelete,bool bShouldLocallyDelete);//Engine.UserCloudFileInterface.DeleteUserFile
	void OnReadUserFileComplete(bool bWasSuccessful,struct FString UserId,struct FString Filename);//Engine.UserCloudFileInterface.OnReadUserFileComplete
	void ClearAllDelegates();//Engine.UserCloudFileInterface.ClearAllDelegates
	void OnEnumerateUserFilesComplete(bool bWasSuccessful,struct FString UserId);//Engine.UserCloudFileInterface.OnEnumerateUserFilesComplete
	void ClearDeleteUserFileCompleteDelegate(struct FScriptDelegate DeleteUserFileCompleteDelegate);//Engine.UserCloudFileInterface.ClearDeleteUserFileCompleteDelegate
	void OnWriteUserFileComplete(bool bWasSuccessful,struct FString UserId,struct FString Filename);//Engine.UserCloudFileInterface.OnWriteUserFileComplete
	bool ClearFile(struct FString UserId,struct FString Filename);//Engine.UserCloudFileInterface.ClearFile
	void AddEnumerateUserFileCompleteDelegate(struct FScriptDelegate EnumerateUserFileCompleteDelegate);//Engine.UserCloudFileInterface.AddEnumerateUserFileCompleteDelegate
	void AddWriteUserFileCompleteDelegate(struct FScriptDelegate WriteUserFileCompleteDelegate);//Engine.UserCloudFileInterface.AddWriteUserFileCompleteDelegate
	bool GetFileContents(struct FString UserId,struct FString Filename,TArray<unsigned char>* FileContents);//Engine.UserCloudFileInterface.GetFileContents
	void EnumerateUserFiles(struct FString UserId);//Engine.UserCloudFileInterface.EnumerateUserFiles
	void ClearReadUserFileCompleteDelegate(struct FScriptDelegate ReadUserFileCompleteDelegate);//Engine.UserCloudFileInterface.ClearReadUserFileCompleteDelegate
	void OnDeleteUserFileComplete(bool bWasSuccessful,struct FString UserId,struct FString Filename);//Engine.UserCloudFileInterface.OnDeleteUserFileComplete
	void AddDeleteUserFileCompleteDelegate(struct FScriptDelegate DeleteUserFileCompleteDelegate);//Engine.UserCloudFileInterface.AddDeleteUserFileCompleteDelegate
	void ClearWriteUserFileCompleteDelegate(struct FScriptDelegate WriteUserFileCompleteDelegate);//Engine.UserCloudFileInterface.ClearWriteUserFileCompleteDelegate
	bool ClearFiles(struct FString UserId);//Engine.UserCloudFileInterface.ClearFiles
	bool ReadUserFile(struct FString UserId,struct FString Filename);//Engine.UserCloudFileInterface.ReadUserFile
	bool WriteUserFile(struct FString UserId,struct FString Filename,TArray<unsigned char>* FileContents);//Engine.UserCloudFileInterface.WriteUserFile
};
UClass* UUserCloudFileInterface::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//VolumeTimer[0x1CFF69B0]
class AVolumeTimer : public AInfo
{
public:
	class APhysicsVolume*                              V;                                                		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.VolumeTimer");
		return pClassPointer;
	};

public:
	void Timer();//Engine.VolumeTimer.Timer
	void PostBeginPlay();//Engine.VolumeTimer.PostBeginPlay
};
UClass* AVolumeTimer::pClassPointer = NULL;

//0x000014 (0x0002EC - 0x0002D8)
//WaterVolume[0x1CFF6880]
class AWaterVolume : public APhysicsVolume
{
public:
	class USoundCue*                                   EntrySound;                                       		// 0x0002D8 (0x0004)              
	class USoundCue*                                   ExitSound;                                        		// 0x0002DC (0x0004)              
	class UClass*                                      EntryActor;                                       		// 0x0002E0 (0x0004)              
	class UClass*                                      ExitActor;                                        		// 0x0002E4 (0x0004)              
	class UClass*                                      PawnEntryActor;                                   		// 0x0002E8 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.WaterVolume");
		return pClassPointer;
	};

public:
	void UnTouch(class AActor* Other);//Engine.WaterVolume.UnTouch
	void PlayExitSplash(class AActor* Other);//Engine.WaterVolume.PlayExitSplash
	void PlayEntrySplash(class AActor* Other);//Engine.WaterVolume.PlayEntrySplash
	void Touch(class AActor* Other,class UPrimitiveComponent* OtherComp,FVector3 HitLocation,FVector3 HitNormal);//Engine.WaterVolume.Touch
};
UClass* AWaterVolume::pClassPointer = NULL;

//0x000004 (0x000264 - 0x000260)
//WindDirectionalSource[0x1CFF6750]
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                        		// 0x000260 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.WindDirectionalSource");
		return pClassPointer;
	};
};
UClass* AWindDirectionalSource::pClassPointer = NULL;

//0x000034 (0x000074 - 0x000040)
//Channel[0x026B0260]
class UChannel : public UObject
{
public:
	unsigned char                                      _0x000040[0x34];                                  		// 0x000040 (0x0034) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Channel");
		return pClassPointer;
	};
};
UClass* UChannel::pClassPointer = NULL;

//0x000078 (0x0000EC - 0x000074)
//ActorChannel[0x026B0130]
class UActorChannel : public UChannel
{
public:
	unsigned char                                      _0x000074[0x78];                                  		// 0x000074 (0x0078) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ActorChannel");
		return pClassPointer;
	};
};
UClass* UActorChannel::pClassPointer = NULL;

//0x000010 (0x000084 - 0x000074)
//ControlChannel[0x026B0000]
class UControlChannel : public UChannel
{
public:
	unsigned char                                      _0x000074[0x10];                                  		// 0x000074 (0x0010) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ControlChannel");
		return pClassPointer;
	};
};
UClass* UControlChannel::pClassPointer = NULL;

//0x00021C (0x000290 - 0x000074)
//FileChannel[0x102DFE20]
class UFileChannel : public UChannel
{
public:
	unsigned char                                      _0x000074[0x21C];                                 		// 0x000074 (0x021C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.FileChannel");
		return pClassPointer;
	};
};
UClass* UFileChannel::pClassPointer = NULL;

//0x00000C (0x000080 - 0x000074)
//VoiceChannel[0x102DFCF0]
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      _0x000074[0xC];                                   		// 0x000074 (0x000C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.VoiceChannel");
		return pClassPointer;
	};
};
UClass* UVoiceChannel::pClassPointer = NULL;

//0x000014 (0x000054 - 0x000040)
//Client[0x102DF830]
class UClient : public UObject
{
public:
	unsigned char                                      _0x000040[0x4];                                   		// 0x000040 (0x0004) MISSED OFFSET
	float                                              MinDesiredFrameRate;                              		// 0x000044 (0x0004)              
	float                                              DisplayGamma;                                     		// 0x000048 (0x0004)              
	float                                              InitialButtonRepeatDelay;                         		// 0x00004C (0x0004)              
	float                                              ButtonRepeatDelay;                                		// 0x000050 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Client");
		return pClassPointer;
	};
};
UClass* UClient::pClassPointer = NULL;

//0x000024 (0x00006C - 0x000048)
//CodecMovieBink[0x102DF240]
class UCodecMovieBink : public UCodecMovie
{
public:
	unsigned char                                      _0x000048[0x24];                                  		// 0x000048 (0x0024) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.CodecMovieBink");
		return pClassPointer;
	};
};
UClass* UCodecMovieBink::pClassPointer = NULL;

//0x000A34 (0x000A74 - 0x000040)
//Download[0x102DDBB0]
class UDownload : public UObject
{
public:
	unsigned char                                      _0x000040[0xA34];                                 		// 0x000040 (0x0A34) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Download");
		return pClassPointer;
	};
};
UClass* UDownload::pClassPointer = NULL;

//0x000004 (0x000A78 - 0x000A74)
//ChannelDownload[0x102DDA80]
class UChannelDownload : public UDownload
{
public:
	unsigned char                                      _0x000A74[0x4];                                   		// 0x000A74 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ChannelDownload");
		return pClassPointer;
	};
};
UClass* UChannelDownload::pClassPointer = NULL;

//0x000048 (0x000088 - 0x000040)
//GuidCache[0x102DCD70]
class UGuidCache : public UObject
{
public:
	unsigned char                                      _0x000040[0x48];                                  		// 0x000040 (0x0048) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.GuidCache");
		return pClassPointer;
	};
};
UClass* UGuidCache::pClassPointer = NULL;

//0x000098 (0x0000D8 - 0x000040)
//LevelBase[0x102DC2C0]
class ULevelBase : public UObject
{
public:
	unsigned char                                      _0x000040[0x98];                                  		// 0x000040 (0x0098) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LevelBase");
		return pClassPointer;
	};
};
UClass* ULevelBase::pClassPointer = NULL;

//0x0001A4 (0x00027C - 0x0000D8)
//Level[0x102DC190]
class ULevel : public ULevelBase
{
public:
	unsigned char                                      _0x0000D8[0x1A4];                                 		// 0x0000D8 (0x01A4) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Level");
		return pClassPointer;
	};
};
UClass* ULevel::pClassPointer = NULL;

//0x000038 (0x000110 - 0x0000D8)
//PendingLevel[0x102DC060]
class UPendingLevel : public ULevelBase
{
public:
	unsigned char                                      _0x0000D8[0x38];                                  		// 0x0000D8 (0x0038) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PendingLevel");
		return pClassPointer;
	};
};
UClass* UPendingLevel::pClassPointer = NULL;

//0x000000 (0x000110 - 0x000110)
//DemoPlayPendingLevel[0x102DBF30]
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DemoPlayPendingLevel");
		return pClassPointer;
	};
};
UClass* UDemoPlayPendingLevel::pClassPointer = NULL;

//0x000000 (0x000110 - 0x000110)
//NetPendingLevel[0x102DBE00]
class UNetPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NetPendingLevel");
		return pClassPointer;
	};
};
UClass* UNetPendingLevel::pClassPointer = NULL;

//0x000A80 (0x000AC0 - 0x000040)
//Model[0x102DB0F0]
class UModel : public UObject
{
public:
	unsigned char                                      _0x000040[0xA80];                                 		// 0x000040 (0x0A80) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Model");
		return pClassPointer;
	};
};
UClass* UModel::pClassPointer = NULL;

//0x0001C0 (0x000204 - 0x000044)
//NetDriver[0x102DAE90]
class UNetDriver : public USubsystem
{
public:
	unsigned char                                      _0x000044[0x8];                                   		// 0x000044 (0x0008) MISSED OFFSET
	int                                                ServerActionRatePerPeriod;                        		// 0x00004C (0x0004)              
	int                                                ServerActionRateAverageSeconds;                   		// 0x000050 (0x0004)              
	int                                                ServerActionRatePerPacket;                        		// 0x000054 (0x0004)              
	unsigned char                                      _0x000058[0x24];                                  		// 0x000058 (0x0024) MISSED OFFSET
	float                                              ConnectionTimeout;                                		// 0x00007C (0x0004)              
	float                                              InitialConnectTimeout;                            		// 0x000080 (0x0004)              
	float                                              KeepAliveTime;                                    		// 0x000084 (0x0004)              
	float                                              RelevantTimeout;                                  		// 0x000088 (0x0004)              
	float                                              SpawnPrioritySeconds;                             		// 0x00008C (0x0004)              
	float                                              ServerTravelPause;                                		// 0x000090 (0x0004)              
	int                                                MaxClientRate;                                    		// 0x000094 (0x0004)              
	int                                                MaxInternetClientRate;                            		// 0x000098 (0x0004)              
	int                                                NetServerMaxTickRate;                             		// 0x00009C (0x0004)              
	unsigned long                                      bClampListenServerTickRate : 1;                   		// 0x0000A0 (0x0004) [0x00000001] 
	unsigned long                                      AllowDownloads : 1;                               		// 0x0000A4 (0x0004) [0x00000001] 
	unsigned long                                      AllowPeerConnections : 1;                         		// 0x0000A8 (0x0004) [0x00000001] 
	unsigned long                                      AllowPeerVoice : 1;                               		// 0x0000AC (0x0004) [0x00000001] 
	unsigned char                                      _0x0000B0[0x8];                                   		// 0x0000B0 (0x0008) MISSED OFFSET
	float                                              AckTimeOut;                                       		// 0x0000B8 (0x0004)              
	float                                              AckMaxWaitInBufferTime;                           		// 0x0000BC (0x0004)              
	int                                                NetServerMaxTickRate_Social;                      		// 0x0000C0 (0x0004)              
	int                                                NetRateAtten_Near;                                		// 0x0000C4 (0x0004)              
	int                                                NetRateAtten_Medium;                              		// 0x0000C8 (0x0004)              
	int                                                NetRateAtten_Far;                                 		// 0x0000CC (0x0004)              
	int                                                NetRateAtten_BehindViewer;                        		// 0x0000D0 (0x0004)              
	unsigned char                                      _0x0000D4[0xC];                                   		// 0x0000D4 (0x000C) MISSED OFFSET
	float                                              fRelevancyDistance;                               		// 0x0000E0 (0x0004)              
	float                                              fRelevancyDistance_Social;                        		// 0x0000E4 (0x0004)              
	unsigned char                                      _0x0000E8[0x18];                                  		// 0x0000E8 (0x0018) MISSED OFFSET
	int                                                MaxDownloadSize;                                  		// 0x000100 (0x0004)              
	TArray<struct FString>                             DownloadManagers;                                 		// 0x000104 (0x000C)              
	unsigned char                                      _0x000110[0x94];                                  		// 0x000110 (0x0094) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                           		// 0x0001A4 (0x000C)              
	unsigned char                                      _0x0001B0[0x28];                                  		// 0x0001B0 (0x0028) MISSED OFFSET
	int                                                ServerBandwidth_OutBytesMax;                      		// 0x0001D8 (0x0004)              
	unsigned char                                      _0x0001DC[0x4];                                   		// 0x0001DC (0x0004) MISSED OFFSET
	int                                                ServerBandwidth_FallbackRate;                     		// 0x0001E0 (0x0004)              
	int                                                ServerBandwidth_FallbackTimeout;                  		// 0x0001E4 (0x0004)              
	unsigned char                                      _0x0001E8[0x4];                                   		// 0x0001E8 (0x0004) MISSED OFFSET
	float                                              m_fTickDispatchTimeout;                           		// 0x0001EC (0x0004)              
	float                                              m_fTickDispatchUnreliableTimeout;                 		// 0x0001F0 (0x0004)              
	unsigned char                                      _0x0001F4[0x10];                                  		// 0x0001F4 (0x0010) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NetDriver");
		return pClassPointer;
	};
};
UClass* UNetDriver::pClassPointer = NULL;

//0x0000C4 (0x0002C8 - 0x000204)
//DemoRecDriver[0x102DAD60]
class UDemoRecDriver : public UNetDriver
{
public:
	unsigned char                                      _0x000204[0x28];                                  		// 0x000204 (0x0028) MISSED OFFSET
	struct FString                                     DemoSpectatorClass;                               		// 0x00022C (0x000C)              
	unsigned char                                      _0x000238[0x7C];                                  		// 0x000238 (0x007C) MISSED OFFSET
	int                                                MaxRewindPoints;                                  		// 0x0002B4 (0x0004)              
	unsigned char                                      _0x0002B8[0x4];                                   		// 0x0002B8 (0x0004) MISSED OFFSET
	float                                              RewindPointInterval;                              		// 0x0002BC (0x0004)              
	int                                                NumRecentRewindPoints;                            		// 0x0002C0 (0x0004)              
	unsigned char                                      _0x0002C4[0x4];                                   		// 0x0002C4 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DemoRecDriver");
		return pClassPointer;
	};
};
UClass* UDemoRecDriver::pClassPointer = NULL;

//0x000004 (0x0000C8 - 0x0000C4)
//PackageMapLevel[0x102DA2B0]
class UPackageMapLevel : public UPackageMap
{
public:
	unsigned char                                      _0x0000C4[0x4];                                   		// 0x0000C4 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PackageMapLevel");
		return pClassPointer;
	};
};
UClass* UPackageMapLevel::pClassPointer = NULL;

//0x000000 (0x0000C8 - 0x0000C8)
//PackageMapSeekFree[0x102DA180]
class UPackageMapSeekFree : public UPackageMapLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.PackageMapSeekFree");
		return pClassPointer;
	};
};
UClass* UPackageMapSeekFree::pClassPointer = NULL;

//0x008FA8 (0x009018 - 0x000070)
//NetConnection[0x102D9DF0]
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      _0x000070[0x160];                                 		// 0x000070 (0x0160) MISSED OFFSET
	int                                                DefaultRepFreq_Action;                            		// 0x0001D0 (0x0004)              
	int                                                DefaultRepFreq_Social;                            		// 0x0001D4 (0x0004)              
	unsigned char                                      _0x0001D8[0x8E20];                                		// 0x0001D8 (0x8E20) MISSED OFFSET
	TArray<class UChildConnection*>                    Children;                                         		// 0x008FF8 (0x000C)              
	unsigned char                                      _0x009004[0x14];                                  		// 0x009004 (0x0014) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.NetConnection");
		return pClassPointer;
	};
};
UClass* UNetConnection::pClassPointer = NULL;

//0x000004 (0x00901C - 0x009018)
//ChildConnection[0x102D9CC0]
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                           		// 0x009018 (0x0004)              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ChildConnection");
		return pClassPointer;
	};
};
UClass* UChildConnection::pClassPointer = NULL;

//0x000000 (0x009018 - 0x009018)
//DemoRecConnection[0x102D9B90]
class UDemoRecConnection : public UNetConnection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.DemoRecConnection");
		return pClassPointer;
	};
};
UClass* UDemoRecConnection::pClassPointer = NULL;

//0x000010 (0x000050 - 0x000040)
//Polys[0x102D9A60]
class UPolys : public UObject
{
public:
	unsigned char                                      _0x000040[0x10];                                  		// 0x000040 (0x0010) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.Polys");
		return pClassPointer;
	};
};
UClass* UPolys::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//ServerCommandlet[0x102D6880]
class UServerCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ServerCommandlet");
		return pClassPointer;
	};
};
UClass* UServerCommandlet::pClassPointer = NULL;

//0x0000BC (0x0000FC - 0x000040)
//ShaderCache[0x102D63C0]
class UShaderCache : public UObject
{
public:
	unsigned char                                      _0x000040[0xBC];                                  		// 0x000040 (0x00BC) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ShaderCache");
		return pClassPointer;
	};
};
UClass* UShaderCache::pClassPointer = NULL;

//0x000058 (0x000098 - 0x000040)
//ShadowMap1D[0x102D6290]
class UShadowMap1D : public UObject
{
public:
	unsigned char                                      _0x000040[0x58];                                  		// 0x000040 (0x0058) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.ShadowMap1D");
		return pClassPointer;
	};
};
UClass* UShadowMap1D::pClassPointer = NULL;

//0x000000 (0x000080 - 0x000080)
//SmokeTestCommandlet[0x102D5DD0]
class USmokeTestCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.SmokeTestCommandlet");
		return pClassPointer;
	};
};
UClass* USmokeTestCommandlet::pClassPointer = NULL;

//0x0000EC (0x00012C - 0x000040)
//StaticMesh[0x102D57E0]
class UStaticMesh : public UObject
{
public:
	unsigned char                                      _0x000040[0xC];                                   		// 0x000040 (0x000C) MISSED OFFSET
	TArray<struct FStaticMeshLODInfo>                  LODInfo;                                          		// 0x00004C (0x000C)              
	float                                              LODDistanceRatio;                                 		// 0x000058 (0x0004)              
	unsigned char                                      _0x00005C[0x14];                                  		// 0x00005C (0x0014) MISSED OFFSET
	int                                                LightMapResolution;                               		// 0x000070 (0x0004)              
	int                                                LightMapCoordinateIndex;                          		// 0x000074 (0x0004)              
	unsigned long                                      m_bCollisionOnly : 1;                             		// 0x000078 (0x0004) [0x00000001] 
	unsigned long                                      m_bDiscardCPURenderData : 1;                      		// 0x00007C (0x0004) [0x00000001] 
	unsigned long                                      m_bRequiresCollisionData : 1;                     		// 0x000080 (0x0004) [0x00000001] 
	unsigned char                                      _0x000084[0x4];                                   		// 0x000084 (0x0004) MISSED OFFSET
	unsigned long                                      NeverStream : 1;                                  		// 0x000088 (0x0004) [0x00000001] 
	unsigned char                                      _0x00008C[0x18];                                  		// 0x00008C (0x0018) MISSED OFFSET
	class URB_BodySetup*                               BodySetup;                                        		// 0x0000A4 (0x0004)              
	unsigned char                                      _0x0000A8[0x34];                                  		// 0x0000A8 (0x0034) MISSED OFFSET
	unsigned long                                      UseSimpleLineCollision : 1;                       		// 0x0000DC (0x0004) [0x00000001] 
	unsigned long                                      UseSimpleBoxCollision : 1;                        		// 0x0000E0 (0x0004) [0x00000001] 
	unsigned long                                      UseSimpleRigidBodyCollision : 1;                  		// 0x0000E4 (0x0004) [0x00000001] 
	unsigned long                                      ForceDoubleSidedShadowVolumes : 1;                		// 0x0000E8 (0x0004) [0x00000001] 
	unsigned long                                      UseFullPrecisionUVs : 1;                          		// 0x0000EC (0x0004) [0x00000001] 
	TArray<struct FName>                               ContentTags;                                      		// 0x0000F0 (0x000C)              
	unsigned long                                      RecenterUVs : 1;                                  		// 0x0000FC (0x0004) [0x00000001] 
	unsigned long                                      OverridePlanarZ : 1;                              		// 0x000100 (0x0004) [0x00000001] 
	unsigned char                                      _0x000104[0x28];                                  		// 0x000104 (0x0028) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.StaticMesh");
		return pClassPointer;
	};
};
UClass* UStaticMesh::pClassPointer = NULL;

//0x000000 (0x00013C - 0x00013C)
//LightMapTexture2D[0x102D51F0]
class ULightMapTexture2D : public UTexture2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.LightMapTexture2D");
		return pClassPointer;
	};
};
UClass* ULightMapTexture2D::pClassPointer = NULL;

//0x000264 (0x0002A4 - 0x000040)
//World[0x102D43B0]
class UWorld : public UObject
{
public:
	unsigned char                                      _0x000040[0x264];                                 		// 0x000040 (0x0264) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if (!pClassPointer)
			pClassPointer = UObject::FindClass("Class Engine.World");
		return pClassPointer;
	};
};
UClass* UWorld::pClassPointer = NULL;

#ifdef _MSC_VER
	#pragma pack(pop)
#endif